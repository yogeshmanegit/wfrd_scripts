USE [AesOps]
GO
/****** Object:  UserDefinedFunction [dbo].[DensityConvert]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[DensityConvert](@value varchar(4000), @fromUOM varchar(10), @toUOM varchar(10))
RETURNS float
AS
BEGIN
	DECLARE @fValue float
	IF @value IS NOT NULL
	BEGIN
		if @fromUOM = 'g/cc' AND @toUOM = 'ppg'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 10.022413122466
		END	
		else if @fromUOM = 'ppg' AND @toUOM = 'kg/m3'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 119.826427317
		END
		else if @fromUOM = 'ppg' AND @toUOM = 'kg/m³'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 119.826427317
		END
		else if @fromUOM = 'ppg' AND @toUOM = 'g/cc'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.09977637
		END
		else if @fromUOM = 'ppg' AND @toUOM = 'sg'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.119826427
		END
		else if @fromUOM = 'kg/m3' AND @toUOM = 'ppg'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.00834540445
		END
		else if @fromUOM = 'kg/m³' AND @toUOM = 'ppg'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.00834540445
		END
		else if @fromUOM = 'kg/m3' AND @toUOM = 'sg'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.00100000000
		END
		else if @fromUOM = 'kg/m³' AND @toUOM = 'sg'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.00100000000
		END
		else if @fromUOM = 'sg' AND @toUOM = 'ppg'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 8.345404452
		END
		else if @fromUOM = 'sg' AND @toUOM = 'kg/m3'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 1000.000000000
		END
		else if @fromUOM = 'sg' AND @toUOM = 'kg/m³'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 1000.000000000
		END
		else
		BEGIN
			set @fValue = dbo.NumCheck(@value)
		END
	END
	RETURN Round(@fValue,2)
END


GO
/****** Object:  UserDefinedFunction [dbo].[DogLegConvert]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[DogLegConvert](@value varchar(4000), @fromUOM varchar(10), @toUOM varchar(10))
RETURNS float
AS
BEGIN
	DECLARE @fValue float
	IF @value IS NOT NULL
	BEGIN
		if @fromUOM = 'deg/100 ft' AND @toUOM = 'deg/30 m'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 30) / (100 * 0.304800000) 
		END
		else if @fromUOM = 'deg/30 m' AND @toUOM = 'deg/100 ft'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 100) / (30 * 3.280839895)
		END
		else
		BEGIN
			set @fValue = dbo.NumCheck(@value)
		END
	END
	RETURN Round(@fValue,2)
END

GO
/****** Object:  UserDefinedFunction [dbo].[FindDocumentPath]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[FindDocumentPath](@id int)
RETURNS varchar (4000)
AS
BEGIN 
  DECLARE @parentID int
  DECLARE @DocumentPath varchar (4000)
  SET @DocumentPath = ''
  SET @parentID = (SELECT  ParentDocItemId
  FROM DocItems (NOLOCK)
  WHERE DocItemId = @id)
  WHILE @parentID IS NOT NULL 
    BEGIN
IF @parentID = 0
BREAK
	  DECLARE @CurrentPath varchar (512)
      SET @id = @parentID
      SELECT @parentID = ParentDocItemId, @CurrentPath = DocItemTitle
      FROM DocItems (NOLOCK)
      WHERE DocItemId = @id
		
	  SET @DocumentPath = @CurrentPath + '/' + @DocumentPath
    END
  RETURN @DocumentPath
END

GO
/****** Object:  UserDefinedFunction [dbo].[fnComponentComment]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[fnComponentComment] (@ID varchar(50), @Type tinyint)
RETURNS varchar(8000)
AS
BEGIN
	DECLARE @strResult As Varchar(8000)
	SET @strResult = ''	
	SELECT @strResult = @strResult + u.FirstName + ' ' + u.LastName + ' (' + Cast(c.CreateDate as varchar(25)) + ') ' + Char(10) + Replace(Replace(c.Comment,Char(13),''),Char(10),' ') + Char(10) + Char(10)
	FROM RMAnalysisComments c
	LEFT JOIN Users u ON c.UserID = u.UserID
	WHERE c.IsDeleted = 0
	AND c.CommentTypeID = @Type
	AND c.ToolStringInfoID = @ID
	ORDER BY c.CreateDate Desc

	IF LEN(@strResult) > ''
	    BEGIN
	           SET @strResult = LEFT(@strResult, LEN(@strResult) - 1)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END

GO
/****** Object:  UserDefinedFunction [dbo].[fnComponentFailureInfoExcel]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[fnComponentFailureInfoExcel] (@sIncidentID uniqueidentifier)
RETURNS varchar(5000)
AS
BEGIN
	DECLARE @strResult As Varchar(5000)
	SET @strResult = ''

	DECLARE @sToolString As Varchar(50)
	SET @sToolString = ''

	SELECT @strResult = @strResult 
		+ Case When @sToolString <> t.SerialNumber Then t.SerialNumber + Char(10) Else '|' End
		+ Case tsci.StatusCodeID When 1 Then ' D-Open' When 0 Then ' D-Closed' Else '|' End
		+ Case When tsci.StatusCodeID Is Not Null Then ' ' + ISNULL(pt.[Name],tsci.FailedNonPartName) + ' ' + ISNULL(tsci.SerialNum,'') Else '|' End
		+ ISNULL(' ('+vFC.FailureCategoryCode + vFC.FailureSubCategoryCode + vFC.FailureCode+')','|')
		+ Case When TFF = 1 And CSI = 1 Then ' TFF/CI'
			When TFF = 1 And CSI = 0 Then ' TFF'
			When TFF = 0 And CSI = 1 Then ' CI'
			When NCI = 1 Then ' NCI'
			When TFF = 0 And CSI = 0 And NCI = 0 Then '|' End
		+ Case When OS = 1 Then ' [OS]' + ISNULL(' ('+vOS.FailureCategoryCode + vOS.FailureSubCategoryCode + vOS.FailureCode+')','|') Else '|' End
		+ Case When PR = 1 Then ' [PR]' + ISNULL(' ('+vPR.FailureCategoryCode + vPR.FailureSubCategoryCode + vPR.FailureCode+')','|') Else '|' End
		+ Case When RC = 1 Then ' RC' Else '|' End
		+ Case When CN = 1 Then ' CN' Else '|' End
		+ Case When tsci.StatusCodeID Is Not Null Then Char(10) Else '|' End
		, @sToolString = t.SerialNumber
	FROM ToolStringComponentInfo tsci
	LEFT JOIN ToolStrings t ON t.ToolStringID = tsci.ToolStringID
	LEFT JOIN PartTypes pt ON pt.PartTypeID = tsci.PartTypeID
	LEFT JOIN vwFailureCodes vFC ON vFC.FailureCodeID = tsci.CompFailureCodeID
	LEFT JOIN vwFailureCodes vOS ON vOS.FailureCodeID = tsci.OutOfSpecCodeID
	LEFT JOIN vwFailureCodes vPR ON vPR.FailureCodeID = tsci.ProceduralCodeID
	WHERE tsci.IncidentID = @sIncidentID
	ORDER BY t.SerialNumber, tsci.StatusCodeID

	IF LEN(@strResult) = 0
    BEGIN
           SET @strResult = NULL
    END

	RETURN Replace(@strResult,'|','')
END




GO
/****** Object:  UserDefinedFunction [dbo].[fnComponentFailureInfoHTML]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[fnComponentFailureInfoHTML] (@sIncidentID uniqueidentifier)
RETURNS varchar(5000)
AS
BEGIN
	DECLARE @strResult As Varchar(5000)
	SET @strResult = ''

	DECLARE @sToolString As Varchar(50)
	SET @sToolString = ''

	SELECT @strResult = @strResult
		+ Case When @sToolString <> t.SerialNumber Then t.SerialNumber + '<br />' Else '' End
		+ Case tsci.StatusCodeID When 1 Then '&nbsp;<b>D-Open</b>' When 0 Then '&nbsp;<b>D-Closed</b>' Else '' End
		+ Case When tsci.StatusCodeID Is Not Null Then '&nbsp;' + ISNULL(pt.[Name],tsci.FailedNonPartName) + '&nbsp;<i>' + ISNULL(tsci.SerialNum,'') + '</i>' Else '' End
		+ ISNULL('&nbsp;('+vFC.FailureCategoryCode + vFC.FailureSubCategoryCode + vFC.FailureCode+')','')
		+ Case When TFF = 1 And CSI = 1 Then '&nbsp;TFF/CI'
			When TFF = 1 And CSI = 0 Then '&nbsp;TFF'
			When TFF = 0 And CSI = 1 Then '&nbsp;CI'
			When NCI = 1 Then '&nbsp;NCI'
			When TFF = 0 And CSI = 0 And NCI = 0 Then '' End
		+ Case When OS = 1 Then '&nbsp;[OS]' + ISNULL('&nbsp;('+vOS.FailureCategoryCode + vOS.FailureSubCategoryCode + vOS.FailureCode+')','') Else '' End
		+ Case When PR = 1 Then '&nbsp;[PR]' + ISNULL('&nbsp;('+vPR.FailureCategoryCode + vPR.FailureSubCategoryCode + vPR.FailureCode+')','') Else '' End
		+ Case When RC = 1 Then '&nbsp;RC' Else '' End
		+ Case When CN = 1 Then '&nbsp;CN' Else '' End
		+ Case When tsci.StatusCodeID Is Not Null Then '<br />' Else '' End
		, @sToolString = t.SerialNumber
	FROM ToolStringComponentInfo tsci
	LEFT JOIN ToolStrings t ON t.ToolStringID = tsci.ToolStringID
	LEFT JOIN PartTypes pt ON pt.PartTypeID = tsci.PartTypeID
	LEFT JOIN vwFailureCodes vFC ON vFC.FailureCodeID = tsci.CompFailureCodeID
	LEFT JOIN vwFailureCodes vOS ON vOS.FailureCodeID = tsci.OutOfSpecCodeID
	LEFT JOIN vwFailureCodes vPR ON vPR.FailureCodeID = tsci.ProceduralCodeID
	WHERE tsci.IncidentID = @sIncidentID
	ORDER BY t.SerialNumber, tsci.StatusCodeID

	IF LEN(@strResult) = 0
	BEGIN
		SET @strResult = null
	END	

	RETURN @strResult
END




GO
/****** Object:  UserDefinedFunction [dbo].[fnComponentFracasInfoExcel]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnComponentFracasInfoExcel] (@sIncidentID uniqueidentifier)
RETURNS varchar(3000)
AS
BEGIN
	DECLARE @strResult As Varchar(3000)
	SET @strResult = ''	

	DECLARE @sToolString As Varchar(50)
	SET @sToolString = ''

	SELECT @strResult = @strResult 
		+ Case When @sToolString <> t.SerialNumber Then t.SerialNumber + Char(10) Else '' End
		+ Case tsci.StatusCodeID When 1 Then ' D-Open' When 0 Then ' D-Closed' Else '' End + ' '
		+ pt.[Name] + ' ' + tsci.SerialNum
		+ ISNULL(' ('+vFC.FailureCategoryCode + vFC.FailureSubCategoryCode + vFC.FailureCode+')','') + ' '
		+ Case When TFF = 1 And CSI = 1 Then 'TFF/CI'
			When TFF = 1 And CSI = 0 Then 'TFF'
			When TFF = 0 And CSI = 1 Then 'CI'
			When NCI = 1 Then 'NCI'
			When TFF = 0 And CSI = 0 And NCI = 0 Then '' End + ' '
		+ Case When OS = 1 Then '[OS]' + ISNULL(' ('+vOS.FailureCategoryCode + vOS.FailureSubCategoryCode + vOS.FailureCode+') ','') Else '' End + ' '
		+ Case When PR = 1 Then '[PR]' + ISNULL(' ('+vPR.FailureCategoryCode + vPR.FailureSubCategoryCode + vPR.FailureCode+') ','') Else '' End + ' '
		+ Case When RC = 1 Then 'RC' Else '' End + ' '
		+ Case When CN = 1 Then 'CN' Else '' End
		+ Char(10)
		, @sToolString = t.SerialNumber
	FROM ToolStringComponentInfo tsci
	LEFT JOIN ToolStrings t ON t.ToolStringID = tsci.ToolStringID
	LEFT JOIN PartTypes pt ON pt.PartTypeID = tsci.PartTypeID
	LEFT JOIN vwFailureCodes vFC ON vFC.FailureCodeID = tsci.CompFailureCodeID
	LEFT JOIN vwFailureCodes vOS ON vOS.FailureCodeID = tsci.OutOfSpecCodeID
	LEFT JOIN vwFailureCodes vPR ON vPR.FailureCodeID = tsci.ProceduralCodeID
	WHERE (FA = 1)
	AND tsci.IncidentID = @sIncidentID
	ORDER BY TFF Desc, RC Desc, CSI Desc, pt.[Name], tsci.SerialNum

	IF LEN(@strResult) > ''
	    BEGIN
	           SET @strResult = LEFT(@strResult, LEN(@strResult) - 2)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END


GO
/****** Object:  UserDefinedFunction [dbo].[fnComponentFracasInfoHTML]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnComponentFracasInfoHTML] (@sIncidentID uniqueidentifier)
RETURNS varchar(3000)
AS
BEGIN
	DECLARE @strResult As Varchar(3000)
	SET @strResult = ''	

	DECLARE @sToolString As Varchar(50)
	SET @sToolString = ''

	SELECT @strResult = @strResult 
		+ Case When @sToolString <> t.SerialNumber Then t.SerialNumber + '<br />' Else '' End
		+ Case tsci.StatusCodeID When 1 Then '&nbsp;<b>D-Open</b>' When 0 Then '&nbsp;<b>D-Closed</b>' Else '' End + '&nbsp;'
		+ pt.[Name] + '&nbsp;<i>' + tsci.SerialNum + '</i>'
		+ ISNULL('&nbsp;('+vFC.FailureCategoryCode + vFC.FailureSubCategoryCode + vFC.FailureCode+')','') + '&nbsp;'
		+ Case When TFF = 1 And CSI = 1 Then 'TFF/CI'
			When TFF = 1 And CSI = 0 Then 'TFF'
			When TFF = 0 And CSI = 1 Then 'CI'
			When NCI = 1 Then 'NCI'
			When TFF = 0 And CSI = 0 And NCI = 0 Then '' End + '&nbsp;'
		+ Case When OS = 1 Then '[OS]' + ISNULL('&nbsp;('+vOS.FailureCategoryCode + vOS.FailureSubCategoryCode + vOS.FailureCode+')&nbsp;','') Else '' End + '&nbsp;'
		+ Case When PR = 1 Then '[PR]' + ISNULL('&nbsp;('+vPR.FailureCategoryCode + vPR.FailureSubCategoryCode + vPR.FailureCode+')&nbsp;','') Else '' End + '&nbsp;'
		+ Case When RC = 1 Then 'RC' Else '' End + '&nbsp;'
		+ Case When CN = 1 Then 'CN' Else '' End
		+ '<br />'
		, @sToolString = t.SerialNumber
	FROM ToolStringComponentInfo tsci
	LEFT JOIN ToolStrings t ON t.ToolStringID = tsci.ToolStringID
	LEFT JOIN PartTypes pt ON pt.PartTypeID = tsci.PartTypeID
	LEFT JOIN vwFailureCodes vFC ON vFC.FailureCodeID = tsci.CompFailureCodeID
	LEFT JOIN vwFailureCodes vOS ON vOS.FailureCodeID = tsci.OutOfSpecCodeID
	LEFT JOIN vwFailureCodes vPR ON vPR.FailureCodeID = tsci.ProceduralCodeID
	WHERE (FA = 1)
	AND tsci.IncidentID = @sIncidentID
	ORDER BY TFF Desc, RC Desc, CSI Desc, pt.[Name], tsci.SerialNum


	IF LEN(@strResult) > ''
	    BEGIN
	           SET @strResult = LEFT(@strResult, LEN(@strResult) - 6)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END


GO
/****** Object:  UserDefinedFunction [dbo].[fnCorrectiveActionGroup]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[fnCorrectiveActionGroup] (@ID varchar(50))
RETURNS varchar(5000)
AS
BEGIN
	DECLARE @strResult As Varchar(5000)
	SET @strResult = ''	
	SELECT @strResult = @strResult + IsNull(pt.[Name],'') + ' ' + tsci.SerialNum + ': ' + Char(10) + Cast(tsci.CorrectiveAction as varchar(1500)) + Char(10) + Char(10)
	FROM ToolStringComponentInfo tsci
	LEFT JOIN PartTypes pt ON pt.PartTypeID = tsci.PartTypeID
	WHERE tsci.CorrectiveAction Is Not Null
	AND tsci.IncidentID = @ID

	IF LEN(@strResult) > ''
	    BEGIN
	           SET @strResult = LEFT(@strResult, LEN(@strResult) - 2)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END



GO
/****** Object:  UserDefinedFunction [dbo].[fnEncrypt]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  FUNCTION [dbo].[fnEncrypt](@ClearPIN varchar(255) ) RETURNS varbinary(255)
AS
BEGIN

DECLARE @EncryptedPIN varbinary(255)
SELECT @EncryptedPIN = CONVERT(varbinary(255), pwdencrypt(@ClearPIN))
RETURN @EncryptedPIN

END

GO
/****** Object:  UserDefinedFunction [dbo].[fnFailureDescGroup]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[fnFailureDescGroup] (@ID varchar(50))
RETURNS varchar(5000)
AS
BEGIN
	DECLARE @strResult As Varchar(5000)
	SET @strResult = ''	
	SELECT @strResult = @strResult + IsNull(pt.[Name],'') + ' ' + tsci.SerialNum + ': ' + Char(10) + Cast(tsci.FailureDesc as varchar(1300)) + Char(10) + Char(10)
	FROM ToolStringComponentInfo tsci
	LEFT JOIN PartTypes pt ON pt.PartTypeID = tsci.PartTypeID
	WHERE tsci.FailureDesc Is Not Null
	AND tsci.IncidentID = @ID

	IF LEN(@strResult) > ''
	    BEGIN
	           SET @strResult = LEFT(@strResult, LEN(@strResult) - 2)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END



GO
/****** Object:  UserDefinedFunction [dbo].[fnGetComponentComment]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnGetComponentComment] (@ID varchar(50), @Type tinyint)
RETURNS varchar(8000)
AS
BEGIN
	DECLARE @strResult As Varchar(8000)
	SET @strResult = ''
	IF (SELECT top 1 Cast(c.CreateDate as varchar(20)) FROM RMAnalysisComments c WHERE IsDeleted = 0 AND CommentTypeID = @Type AND ToolStringInfoID = @ID) IS NOT NULL
	BEGIN
		SELECT @strResult = @strResult + (u.FirstName + ' ' + u.LastName + ' (' + Cast(c.CreateDate as varchar(25)) + ') ' + Char(10) + c.Comment + Char(10) + Char(10))
		FROM RMAnalysisComments c (NOLOCK)
		LEFT JOIN Users u  (NOLOCK) ON c.UserID = u.UserID
		WHERE IsDeleted = 0
		AND CommentTypeID = @Type
		AND ToolStringInfoID = @ID
		ORDER BY CreateDate Desc
	END 
	ELSE
	BEGIN
		SELECT @strResult = c.Comment + '..'
		FROM RMAnalysisComments c  (NOLOCK)
		WHERE IsDeleted = 0
		AND CommentTypeID = @Type
		AND ToolStringInfoID = @ID
	END

	IF LEN(@strResult) > ''
	    BEGIN
	           SET @strResult = LEFT(@strResult, LEN(@strResult) - 2)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END


GO
/****** Object:  UserDefinedFunction [dbo].[fnGetProductlineByToolStringType]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 4/21/16
-- Description:	Get Productline by ToolString Type
-- =============================================
CREATE FUNCTION [dbo].[fnGetProductlineByToolStringType] 
(
	-- Add the parameters for the function here
	@Type varchar(100)
)
RETURNS varchar(100)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(100)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = CASE	WHEN @Type = 'Hel/LWD' THEN 'LWD'
		WHEN @Type = 'AGS' THEN 'DD'
		WHEN @Type = 'CMP' THEN 'MWD'
		WHEN @Type = 'EM' THEN 'MWD'
		WHEN @Type = 'EM/HYPERPULSE' THEN 'MWD'
		WHEN @Type = 'GEOLINK' THEN 'MWD'
		WHEN @Type = 'GWD' THEN 'LWD'
		WHEN @Type = 'HEL/EM' THEN 'MWD'
		WHEN @Type = 'HYPERPULSE' THEN 'MWD'
		WHEN @Type = 'ML' THEN 'DD'
		WHEN @Type = 'MOTOR' THEN 'DD'
		WHEN @Type = 'RSS' THEN 'RSS'
		WHEN @Type = 'SURFACE' THEN 'MWD'
		WHEN @Type = 'Tensor' THEN 'MWD'
		WHEN @Type = 'WPR' THEN 'MWD'
		WHEN @Type = 'BECFIELD' THEN 'MWD'
		WHEN @Type = 'DMT/AMS' THEN 'MWD'

	ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[fnGetToolStringTypeBySerialNumber]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 4/7/16
-- Description:	Get ToolString Type
-- =============================================
CREATE FUNCTION [dbo].[fnGetToolStringTypeBySerialNumber] 
(
	-- Add the parameters for the function here
	@Type varchar(100),
	@SerialNumber varchar(MAX),
	@ToolCode varchar(max) = null
)
RETURNS varchar(100)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(100)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = 


	CASE /*Case for Tool String Type*/
	/*LWD Tool Strings*/

	WHEN @Type = 'HEL/LWD' and substring(substring(@SerialNumber,3,100),0,case when charindex('-', substring(@SerialNumber,3,100),0) = 0 then len(@SerialNumber) 
	else charindex('-', substring(@SerialNumber,3,100),0) end) like '%p%' THEN 'HEL' 
	 WHEN @Type = 'HEL/LWD' and substring(substring(@SerialNumber,3,100),0,case when charindex('-', substring(@SerialNumber,3,100),0) = 0 then len(@SerialNumber) 
	else charindex('-', substring(@SerialNumber,3,100),0) end) like '%d%' THEN 'HEL' 
	WHEN @Type = 'HEL/LWD' and substring(substring(@SerialNumber,3,100),0,case when charindex('-', substring(@SerialNumber,3,100),0) = 0 then len(@SerialNumber) 
	else charindex('-', substring(@SerialNumber,3,100),0) end) like '%n%' THEN 'NDT'
	WHEN @Type = 'HEL/LWD' and substring(substring(@SerialNumber,3,100),0,case when charindex('-', substring(@SerialNumber,3,100),0) = 0 then len(@SerialNumber) 
	else charindex('-', substring(@SerialNumber,3,100),0) end) like '%z%' THEN 'NDT'
	WHEN @Type = 'HEL/LWD' and substring(substring(@SerialNumber,3,100),0,case when charindex('-', substring(@SerialNumber,3,100),0) = 0 then len(@SerialNumber) 
	else charindex('-', substring(@SerialNumber,3,100),0) end) like '%A%' THEN 'Shockwave'
	WHEN @Type = 'HEL/LWD' and substring(substring(@SerialNumber,3,100),0,case when charindex('-', substring(@SerialNumber,3,100),0) = 0 then len(@SerialNumber) 
	else charindex('-', substring(@SerialNumber,3,100),0) end) like '%F%' THEN 'Pressurewave'
	WHEN @Type = 'HEL/LWD' and substring(substring(@SerialNumber,3,100),0,case when charindex('-', substring(@SerialNumber,3,100),0) = 0 then len(@SerialNumber) 
	else charindex('-', substring(@SerialNumber,3,100),0) end) like '%J%' THEN 'Spectralwave'
	WHEN @Type = 'HEL/LWD' and substring(substring(@SerialNumber,3,100),0,case when charindex('-', substring(@SerialNumber,3,100),0) = 0 then len(@SerialNumber) 
	else charindex('-', substring(@SerialNumber,3,100),0) end) like '%O%' THEN 'Sinewave'
	WHEN @Type = 'HEL/LWD' and substring(substring(@SerialNumber,3,100),0,case when charindex('-', substring(@SerialNumber,3,100),0) = 0 then len(@SerialNumber) 
	else charindex('-', substring(@SerialNumber,3,100),0) end) like '%R%' THEN 'MFR'
	WHEN @Type = 'HEL/LWD' and substring(substring(@SerialNumber,3,100),0,case when charindex('-', substring(@SerialNumber,3,100),0) = 0 then len(@SerialNumber) 
	else charindex('-', substring(@SerialNumber,3,100),0) end) like '%I%' THEN 'HEL'
	WHEN @Type = 'HEL/LWD' and substring(substring(@SerialNumber,3,100),0,case when charindex('-', substring(@SerialNumber,3,100),0) = 0 then len(@SerialNumber) 
	else charindex('-', substring(@SerialNumber,3,100),0) end) like '%W%' THEN 'Guidewave'
	/*RSS Tool Strings*/
	WHEN (@Type = 'RSS' and substring(substring(@SerialNumber,3,100),0,case when charindex('-', substring(@SerialNumber,3,100),0) = 0 then len(@SerialNumber) 
		else charindex('-', substring(@SerialNumber,3,100),0) end) like '%X%') and (@ToolCode ='bias4' OR @ToolCode ='bias6' OR @ToolCode ='bias10' OR @ToolCode ='bias8')
		THEN 'Mk 3 RSS Tool'
	WHEN (@Type = 'RSS' and substring(substring(@SerialNumber,3,100),0,case when charindex('-', substring(@SerialNumber,3,100),0) = 0 then len(@SerialNumber) 
		else charindex('-', substring(@SerialNumber,3,100),0) end) like '%X%') and (@ToolCode ='BIAS6 (MK4)' OR @ToolCode ='BIAS64' OR @ToolCode ='BIAS64 (MK4+)' 
		OR @ToolCode ='BIAS64 (MK4+H)' or @ToolCode ='BIAS9'  ) THEN 'Mk 4 RSS Tool'


	/**motorized RSS*/

	/*Other Tool Strings*/
	WHEN @Type = 'SURFACE'  THEN 'Surface'
	WHEN @Type = 'Motor'  THEN 'Motor'
	WHEN @Type = 'hyperpulse'  THEN 'Hyperpulse'
	WHEN @Type = 'EM'  THEN 'EM'
	WHEN @Type = 'HEL/EM'  THEN 'HEL/EM'
	WHEN @Type = 'AGS'  THEN 'AGS'
	when @Type = 'WPR' then 'WPR'
	when @Type = 'GWD' then 'GWD'
	when @Type= 'BECFIELD' then 'BECFIELD'
	when @Type= 'DMT/AMS' then 'DMT/AMS'
	ELSE '' END

	-- Return the result of the function
	RETURN @Result

END

GO
/****** Object:  UserDefinedFunction [dbo].[fnGetUSDConversionFactor]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




Create FUNCTION [dbo].[fnGetUSDConversionFactor](@currencyCode VARCHAR(50), @effectiveDate DATETIME)
RETURNS FLOAT
AS
BEGIN
	DECLARE @fValue FLOAT 
	
	IF(@currencyCode IS NOT NULL AND @currencyCode <> '' AND  @currencyCode <> 'USD')
	BEGIN
		IF(@effectiveDate IS NOT NULL)
		BEGIN
			SET @fValue = dbo.NumCheck((SELECT TOP 1 ConversionFactor
							FROM CurrencyConversionFactors 
							WHERE CurrShortName = @currencyCode AND 
							CONVERT(DATE,ISNULL(EffectiveStartDate,GETDATE()),101) <= CONVERT(DATE,@effectiveDate, 101)
							ORDER BY ISNULL(EffectiveStartDate,GETDATE()) DESC))
						
		END
		ELSE 
		BEGIN
			SET @fValue = dbo.NumCheck((SELECT TOP 1 ConversionFactor
							FROM CurrencyConversionFactors 
							WHERE CurrShortName = @currencyCode 
							ORDER BY ISNULL(EffectiveStartDate,GETDATE()) DESC))	
		END 
	END
	IF(@fValue <= 0 OR @fValue IS NULL)
		SET @fValue = 1
		
		
	RETURN Round(@fValue,7)
END



GO
/****** Object:  UserDefinedFunction [dbo].[fnHasComponentComment]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnHasComponentComment] (@ID varchar(50), @Type tinyint)
RETURNS varchar(50)
AS
BEGIN
	DECLARE @strResult As Varchar(50)
	SET @strResult = ''	
	SELECT TOP 1 @strResult = c.CreateDate
	FROM RMAnalysisComments c
	WHERE IsDeleted = 0
	AND CommentTypeID = @Type
	AND ToolStringInfoID = @ID


	IF LEN(@strResult) = ''
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnIncidentLostTime]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnIncidentLostTime] (@sIncidentID varchar(50))
RETURNS int
AS
BEGIN
	DECLARE @iHours As int
	SET @iHours = 0
	SELECT  @iHours = @iHours + Hours
	FROM LostTime 
	WHERE IncidentID = @sIncidentID
	RETURN @iHours
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnIncidentTools]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[fnIncidentTools] (@ID varchar(50))
RETURNS varchar(1000)
AS
BEGIN
	DECLARE @strTools As Varchar(1000)
	DECLARE @strResult As Varchar(1000)
	SET @strTools = ''
	SELECT @strTools = @strTools + t.SerialNumber + ', '
	FROM ToolStrings t 
	LEFT JOIN ToolStringComponentInfo tsci ON tsci.ToolStringID = t.ToolStringId 
	WHERE tsci.IncidentID = @ID
	AND t.IsDeleted = 0
	GROUP BY t.SerialNumber

	IF LEN(@strTools) > ''
	    BEGIN
			SET @strResult = LEFT(@strTools, LEN(@strTools) - 1)
	    END
	ELSE
	    BEGIN
			SET @strResult = null
	    END
	RETURN @strResult
END



GO
/****** Object:  UserDefinedFunction [dbo].[fnJarActivityPersonnel]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnJarActivityPersonnel] (@JarActivityId uniqueidentifier)
RETURNS varchar(500)
AS
BEGIN
	DECLARE @strPers As varchar(500)
	DECLARE @strResult As varchar(500)
	SET @strPers = ''
	SELECT @strPers = @strPers + p.FirstName + ' ' + p.LastName + ', '
	FROM JarActivityPersonnel ap
	LEFT JOIN JobPersonnel p ON p.JobPersonnelId = ap.JobPersonnelId
	WHERE ap.JarActivityId = @JarActivityId
	ORDER BY p.LastName, p.FirstName

	IF LEN(@strPers) > ''
	    BEGIN
	           SET @strResult = LEFT(@strPers, LEN(@strPers) - 1)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnJarRevStatus]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnJarRevStatus] (@JobId uniqueidentifier)
RETURNS varchar(50)
AS
BEGIN
	DECLARE @strResult As varchar(50)
	SET @strResult = ''
	
	SELECT @strResult=(
		CASE 
			WHEN  CONVERT (DATE, j.EndDate) <= CONVERT (DATE, GETDATE()) THEN 'Closed'
			ELSE ISNULL((j.RevenueStatus ),'')
		END)
	FROM Jobs j
	WHERE j.JobId = @JobId
	
	RETURN @strResult
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnJarRunTools]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnJarRunTools] (@JarRunId uniqueidentifier)
RETURNS varchar(500)
AS
BEGIN
	DECLARE @strTools As varchar(500)
	DECLARE @strResult As varchar(500)
	SET @strTools = ''
	SELECT @strTools = @strTools + t.SerialNumber + ', '
	FROM JarRunTools rt
	LEFT JOIN ToolStrings t ON t.ToolStringID = rt.ToolStringID
	WHERE rt.JarRunId = @JarRunId
	AND t.IsDeleted = 0
	GROUP BY t.SerialNumber
	ORDER BY t.SerialNumber

	IF LEN(@strTools) > ''
	    BEGIN
	           SET @strResult = LEFT(@strTools, LEN(@strTools) - 1)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END

GO
/****** Object:  UserDefinedFunction [dbo].[fnJarToolRuns]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnJarToolRuns] (@ToolStringId uniqueidentifier)
RETURNS varchar(100)
AS
BEGIN
	DECLARE @strRuns As varchar(100)
	DECLARE @strResult As varchar(100)
	SET @strRuns = ''
	SELECT @strRuns = @strRuns + r.RunNumber + ', '
	FROM JarRunTools rt
	LEFT JOIN JarRuns r ON r.JarRunId = rt.JarRunId
	WHERE rt.ToolStringId = @ToolStringId
	ORDER BY r.RunNumber

	IF LEN(@strRuns) > ''
	    BEGIN
	           SET @strResult = LEFT(@strRuns, LEN(@strRuns) - 1)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnJobCoordinators]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnJobCoordinators] (@JobID uniqueidentifier)
RETURNS varchar(200)
AS
BEGIN
	DECLARE @strResult As Varchar(200)
	SET @strResult = ''
	SELECT @strResult = @strResult + e.FirstName + ' ' + e.LastName + ' (' + IsNull(jp.ProductLine,'n/a') + '), '
	FROM JobPersonnel jp
	LEFT JOIN Employees e on e.Employeeid = jp.Employeeid
	WHERE e.Title = 'Coordinator'
	AND jp.JobID = @JobID

	IF LEN(@strResult) > 0
	    BEGIN
	           SET @strResult = LEFT(@strResult, LEN(@strResult) - 1)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null

			   SELECT @strResult = e.FirstName + ' ' + e.LastName
			   FROM Jobs j 
			   INNER JOIN Users e on e.WFTUserName = j.WFTUserName
			   Where jobId = @JobID and j.WFTUserName IS NOT NULL
	    END
	RETURN @strResult
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnJobImportStatus]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE FUNCTION [dbo].[fnJobImportStatus] (@JobId uniqueidentifier)
RETURNS varchar(50)
AS
BEGIN
	DECLARE @strResult As varchar(10)
	SET @strResult = ''
	
	SELECT @strResult=(
		Case 
			When j.ConfirmedClosed = 1 Then 'Closed'
			When j.StartDate <= GetDate() And (j.EndDate Is Null Or J.EndDate > GetDate())
			Then 'Active'
			When j.EndDate <= GETDATE() And ImportedReports.RunCnt Is Null
			Then 'Pending'
			When j.EndDate <= GetDate() And (IsNull(j.Runs,0) <> IsNull(ImportedReports.RunCnt,0)
									   Or IsNull(j.DownholeFailures,0) <> IsNull(ImportedReports.FailureCnt,0)
									   Or IsNull(j.DeckCheckFailures,0) <> IsNull(ImportedReports.SurfaceEquipCnt,0)
									   Or IsNull(j.SurfaceEquipmentFailures,0) <> IsNull(ImportedReports.DeckCheckCnt,0))
			Then 'Pending'
			When j.EndDate <= GetDate() And ImportedReports.RunCnt Is Not Null 
									  And j.Runs = IsNull(ImportedReports.RunCnt,0)
									  And IsNull(j.DownholeFailures,0) = IsNull(ImportedReports.FailureCnt,0)
									  And IsNull(j.DeckCheckFailures,0) = IsNull(ImportedReports.SurfaceEquipCnt,0)
									  And IsNull(j.SurfaceEquipmentFailures,0) = IsNull(ImportedReports.DeckCheckCnt,0)
			Then 'Closed'
			When j.StartDate > GetDate()
			Then 'Projected'
		End)
	FROM Jobs j
	LEFT JOIN (
		Select 
			w.JobID
			, IsNull(Sum(cast(r.IsDownHole as tinyint)),0) As RunCnt
			, IsNull(Sum(cast(i.IsDownHole as tinyint)),0) As FailureCnt
			, Sum(Case When i.IncidentNumber = 'FR-Surface Equipment' Then 1 Else 0 End) As SurfaceEquipCnt
			, Sum(Case When i.IncidentNumber = 'FR-Deck Check' Then 1 Else 0 End) As DeckCheckCnt
		From Wells w 
		Left Join Runs r On r.WellID = w.WellID And r.IsDeleted = 0
		Left Join Incidents i On i.RunID = r.RunID And i.IsDeleted = 0
		Where w.IsDeleted = 0
		Group By w.JobID
	) As ImportedReports ON ImportedReports.JobID = j.JobId
	WHERE j.IsDeleted = 0
	AND j.JobId = @JobId
	
	RETURN @strResult
END



GO
/****** Object:  UserDefinedFunction [dbo].[fnJobWells]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnJobWells] (@ID varchar(50))
RETURNS varchar(1000)
AS
BEGIN
	DECLARE @strWells As Varchar(500)
	DECLARE @strResult As Varchar(500)
	SET @strWells = ''
	SELECT @strWells = @strWells + w.Well + ',<br>'
	FROM Wells w 
	WHERE w.JobID = @ID
	AND w.IsDeleted = 0

	IF LEN(@strWells) > ''
	    BEGIN
	           SET @strResult = LEFT(@strWells, LEN(@strWells) - 5)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnPartTypeProperties]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnPartTypeProperties] (@PartTypeID int)
RETURNS varchar(1000)
AS
BEGIN
	DECLARE @strProperties As Varchar(1000)
	DECLARE @strResult As Varchar(1000)
	SET @strProperties = ''
	SELECT @strProperties = @strProperties + Property + ', '
	FROM PartTypeProperties
	WHERE PartTypeID = @PartTypeID
	ORDER BY SortOrder

	IF LEN(@strProperties) > ''
	    BEGIN
	           SET @strResult = LEFT(@strProperties, LEN(@strProperties) - 1)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END

GO
/****** Object:  UserDefinedFunction [dbo].[fnRunEngineers]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnRunEngineers] (@ID varchar(50))
RETURNS varchar(1000)
AS
BEGIN
	DECLARE @strEngineers As Varchar(1000)
	DECLARE @strResult As Varchar(1000)
	SET @strEngineers = ''
	SELECT  @strEngineers = @strEngineers + FirstName + ' ' + LastName + ', '
	FROM EngineersOnDuty 
	WHERE RunID = @ID
	GROUP BY LastName, FirstName
	ORDER BY LastName, FirstName

	IF LEN(@strEngineers) > ''
	    BEGIN
	           SET @strResult = LEFT(@strEngineers, LEN(@strEngineers) - 1)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnRunLeadEngineers]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnRunLeadEngineers] (@ID varchar(50))
RETURNS varchar(1000)
AS
BEGIN
	DECLARE @strEngineers As Varchar(500)
	DECLARE @strResult As Varchar(500)
	SET @strEngineers = ''
	SELECT  @strEngineers = @strEngineers + FirstName + ' ' + LastName + ', '
	FROM EngineersOnDuty 
	WHERE RunID = @ID
	AND IsLead = 1
	GROUP BY LastName, FirstName
	ORDER BY LastName, FirstName

	IF LEN(@strEngineers) > ''
	    BEGIN
	           SET @strResult = LEFT(@strEngineers, LEN(@strEngineers) - 1)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END

GO
/****** Object:  UserDefinedFunction [dbo].[fnRunTools]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnRunTools] (@ID varchar(50))
RETURNS varchar(1000)
AS
BEGIN
	DECLARE @strTools As Varchar(1000)
	DECLARE @strResult As Varchar(1000)
	SET @strTools = ''
	SELECT @strTools = @strTools + t.SerialNumber + ', '
	FROM ToolStrings t
	LEFT JOIN ToolStringComponentInfo tsci ON tsci.ToolStringId = t.ToolStringId 
	WHERE tsci.RunID = @ID
	AND t.IsDeleted = 0
	GROUP BY t.SerialNumber

	IF LEN(@strTools) > ''
	    BEGIN
	           SET @strResult = LEFT(@strTools, LEN(@strTools) - 1)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnRunTypes]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnRunTypes] (@ID varchar(50))
RETURNS varchar(1000)
AS
BEGIN
	DECLARE @strTypes As Varchar(1000)
	DECLARE @strResult As Varchar(1000)
	SET @strTypes = ''
	SELECT @strTypes = @strTypes + t.Type + ', '
	FROM ToolStrings t 
	LEFT OUTER JOIN ToolStringComponentInfo tsci ON tsci.ToolStringID = t.ToolStringID
	WHERE tsci.RunID = @ID
	AND t.Type is not null
	GROUP BY t.Type

	IF LEN(@strTypes) > ''
	    BEGIN
	           SET @strResult = LEFT(@strTypes, LEN(@strTypes) - 1)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnWeekEnding]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[fnWeekEnding]
(
	@DateWorked datetime
)
RETURNS datetime
AS
BEGIN
	DECLARE @WeekEnding datetime
	
	SELECT @WeekEnding=@DateWorked
	
	WHILE (DATEPART(dw, @WeekEnding) < 7)
	BEGIN
		SELECT @WeekEnding=DATEADD(dd, 1, @WeekEnding)
	END
	
	RETURN @WeekEnding
END


GO
/****** Object:  UserDefinedFunction [dbo].[GetCBMMonitorTriggerValue]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--======================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 06 Dec 2016
--DESCRIPTION: To get CBM trigger value
--=======================================================
CREATE FUNCTION [dbo].[GetCBMMonitorTriggerValue] (
	@AssetRepairTrackId uniqueidentifier,
	@PFTConfigId uniqueidentifier,
	@MeterReadingTypeId int
)
RETURNS decimal(18, 5)
AS
BEGIN
  DECLARE @BranchPlant varchar(max)
  DECLARE @Region varchar(max)
  SELECT  @BranchPlant = FromBranchPlant FROM AssetRepairTrack (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId
  SELECT  @Region = Region FROM BranchPlants (NOLOCK) WHERE BranchPlant = @BranchPlant

  DECLARE @RegionTriggerValue decimal(18, 2) = NULL
  DECLARE @BPTriggerValue decimal(18, 2) = NULL
  DECLARE @GlobalTrigger decimal(18, 2) = NULL

  SELECT  @GlobalTrigger = GlobalTrigger, @RegionTriggerValue = cc.TriggerValue, @BPTriggerValue = cc1.TriggerValue
  FROM	  CBMMonitor c (NOLOCK)
		  JOIN CBMMonitorAssetItemNums i (NOLOCK) ON c.CBMMonitorId = i.CBMMonitorId and i.IsParent = 1
		  JOIN AssetRepairTrack a (NOLOCK) ON a.ItemNum = i.ItemNum
		  LEFT JOIN CBMMonitorCustoms cc (NOLOCK) ON cc.PFTConfigId = c.PFTConfigId AND cc.MeterReadingTypeId = c.MeterReadingTypeId
		  AND cc.TriggerType = 'R' AND cc.TriggerName = @Region
		  LEFT JOIN CBMMonitorCustoms cc1 (NOLOCK) ON cc1.PFTConfigId = c.PFTConfigId AND cc1.MeterReadingTypeId = c.MeterReadingTypeId AND cc1.TriggerType = 'B' AND cc1.TriggerName = @BranchPlant
  WHERE c.MeterReadingTypeId = @MeterReadingTypeId AND c.PFTConfigId = @PFTConfigId and a.AssetRepairTrackId = @AssetRepairTrackId

  RETURN COALESCE(@BPTriggerValue, @RegionTriggerValue, @GlobalTrigger)
END
GO
/****** Object:  UserDefinedFunction [dbo].[GetCBMMonitorTriggerValue_Test]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--======================================================
--CREATED BY : Vivek Bhati
--CREATED ON : 4/7/2022
--DESCRIPTION: To get CBM trigger value by fixed asset id
--=======================================================
CREATE FUNCTION [dbo].[GetCBMMonitorTriggerValue_Test] (
	@FixedAssetId uniqueidentifier,
	@PFTConfigId uniqueidentifier,
	@MeterReadingTypeId int
)
RETURNS decimal(18, 5)
AS
BEGIN
  DECLARE @BranchPlant varchar(max)
  DECLARE @Region varchar(max)
  SELECT  @BranchPlant = BranchPlant FROM FixedAssets (NOLOCK) WHERE FixedAssetId = @FixedAssetId
  SELECT  @Region = Region FROM BranchPlants (NOLOCK) WHERE BranchPlant = @BranchPlant

  DECLARE @RegionTriggerValue decimal(18, 2) = NULL
  DECLARE @BPTriggerValue decimal(18, 2) = NULL
  DECLARE @GlobalTrigger decimal(18, 2) = NULL

  SELECT  @GlobalTrigger = GlobalTrigger, @RegionTriggerValue = cc.TriggerValue, @BPTriggerValue = cc1.TriggerValue
  FROM	  CBMMonitor c (NOLOCK)
		  JOIN CBMMonitorAssetItemNums i (NOLOCK) ON c.CBMMonitorId = i.CBMMonitorId and i.IsParent = 1
		  JOIN FixedAssets f (NOLOCK) ON f.InventoryItemNum = i.ItemNum
		  LEFT JOIN CBMMonitorCustoms cc (NOLOCK) ON cc.PFTConfigId = c.PFTConfigId AND cc.MeterReadingTypeId = c.MeterReadingTypeId
		  AND cc.TriggerType = 'R' AND cc.TriggerName = @Region
		  LEFT JOIN CBMMonitorCustoms cc1 (NOLOCK) ON cc1.PFTConfigId = c.PFTConfigId AND cc1.MeterReadingTypeId = c.MeterReadingTypeId AND cc1.TriggerType = 'B' AND cc1.TriggerName = @BranchPlant
  WHERE c.MeterReadingTypeId = @MeterReadingTypeId AND c.PFTConfigId = @PFTConfigId and f.FixedAssetId = @FixedAssetId

  RETURN COALESCE(@BPTriggerValue, @RegionTriggerValue, @GlobalTrigger)
END

GO
/****** Object:  UserDefinedFunction [dbo].[GetLastBillableLocation]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--===============================================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 20 June 2016
--DESCRIPTION: To get last billable locations
--=============================================================================== 
CREATE FUNCTION [dbo].[GetLastBillableLocation](@FixedAssetId UNIQUEIDENTIFIER, @Location VARCHAR(250))
RETURNS VARCHAR(250)
AS
  BEGIN
  DECLARE @Result VARCHAR(100)
  IF (@Location='Region')
	BEGIN
		SELECT	@Result = [RG].[RegionDesc] 
				FROM [FixedAssets](NOLOCK) [FA] 
				LEFT JOIN [BranchPlants](NOLOCK) [BP] ON [BP].[BranchPlant] = [FA].[BranchPlant]
				LEFT JOIN [Regions] [RG] ON [RG].[Region] = [BP].[Region]
		WHERE	[FA].[FixedAssetId] = @FixedAssetId AND [BP].[IsOperationsBillableLocation] = 1

		IF(@Result IS NULL)
		BEGIN
			SELECT	TOP 1 @Result = [IR].[RegionDesc]
			FROM	[PartTransferDtl] [PTD] WITH (NOLOCK)
					LEFT OUTER JOIN [BranchPlants](NOLOCK) [BP] ON [BP].[BranchPlant] = [PTD].ReceivingLocation
					LEFT OUTER JOIN [Regions](NOLOCK) [IR] ON [IR].[Region] = [BP].[Region]
			WHERE	[PTD].[FixedAssetId] = @FixedAssetId AND [BP].[IsOperationsBillableLocation] = 1
			ORDER BY [PTD].[DateofTransaction] DESC, [PTD].[JDETransactionId] DESC, [PTD].[DateAdded] DESC
		END
	END
	
	IF (@Location='Country')
	BEGIN
		SELECT	@Result = [CT].[CountryDesc] FROM [FixedAssets](NOLOCK) [FA] 
				LEFT JOIN [BranchPlants](NOLOCK) [BP] ON [BP].[BranchPlant] = [FA].[BranchPlant]
				LEFT JOIN [Countries] [CT] ON [CT].[Country] = [BP].[Country]
		WHERE	[FA].[FixedAssetId] = @FixedAssetId AND [BP].[IsOperationsBillableLocation] = 1

		IF(@Result IS NULL)
		BEGIN
			SELECT	TOP 1 @Result = [CT].[CountryDesc]
			FROM	[PartTransferDtl] [PTD] WITH (NOLOCK)
					LEFT OUTER JOIN [BranchPlants](NOLOCK) [BP] ON [BP].[BranchPlant] = [PTD].ReceivingLocation
					LEFT OUTER JOIN [Countries](NOLOCK) [CT] ON [CT].[Country] = [BP].[Country]
			WHERE	[PTD].[FixedAssetId] = @FixedAssetId AND [BP].[IsOperationsBillableLocation] = 1
			ORDER BY [PTD].[DateofTransaction] DESC, [PTD].[JDETransactionId] DESC, [PTD].[DateAdded] DESC
		END
	END
	IF (@Location='BranchPlant')
	BEGIN
		SELECT	@Result = [BP].[BranchPlant] FROM [FixedAssets](NOLOCK) [FA] 
				LEFT JOIN [BranchPlants](NOLOCK) [BP] ON [BP].[BranchPlant] = [FA].[BranchPlant]
		WHERE	[FA].[FixedAssetId] = @FixedAssetId AND [BP].[IsOperationsBillableLocation] = 1

		IF(@Result IS NULL)
		BEGIN
			SELECT	TOP 1 @Result = [BP].[BranchPlant]
			FROM	[PartTransferDtl] [PTD] WITH (NOLOCK)
					LEFT OUTER JOIN [BranchPlants](NOLOCK) [BP] ON [BP].[BranchPlant] = [PTD].[ReceivingLocation]
			WHERE	[PTD].[FixedAssetId] = @FixedAssetId AND [BP].[IsOperationsBillableLocation] = 1
			ORDER BY [PTD].[DateofTransaction] DESC, [PTD].[JDETransactionId] DESC, [PTD].[DateAdded] DESC
		END
	END	
	IF (@Location='BranchPlantName')
	BEGIN
		SELECT	@Result = [BP].[CompanyName] FROM [FixedAssets](NOLOCK) [FA] 
				LEFT JOIN [BranchPlants](NOLOCK) [BP] ON [BP].[BranchPlant] = [FA].[BranchPlant]
		WHERE	[FA].[FixedAssetId] = @FixedAssetId AND [BP].[IsOperationsBillableLocation] = 1

		IF(@Result IS NULL)
		BEGIN
			SELECT	TOP 1 @Result = [BP].[CompanyName]
			FROM	[PartTransferDtl] [PTD] WITH (NOLOCK)
					LEFT OUTER JOIN [BranchPlants](NOLOCK) [BP] ON [BP].[BranchPlant] = [PTD].[ReceivingLocation]
			WHERE	[PTD].[FixedAssetId] = @FixedAssetId AND [BP].[IsOperationsBillableLocation] = 1
			ORDER BY [PTD].[DateofTransaction] DESC, [PTD].[JDETransactionId] DESC, [PTD].[DateAdded] DESC
		END
	END				
RETURN  @Result
  END


GO
/****** Object:  UserDefinedFunction [dbo].[GetScorecardLimitExpression]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[GetScorecardLimitExpression]
(
	@ReportFieldId INT,
	@Region VARCHAR(25),
	@Value VARCHAR(50),
	@LimitType VARCHAR(20)
)
RETURNS VARCHAR(MAX)
AS
BEGIN

-- Declare the return variable here
DECLARE @sqlColorExpression as VARCHAR(MAX)
SET @sqlColorExpression = ''

DECLARE @LimitStart VARCHAR(10)
DECLARE @LimitBetween1 VARCHAR(10)
DECLARE @LimitBetween2 VARCHAR(10)
DECLARE @LimitEnd VARCHAR(10)
DECLARE @LimitExtra VARCHAR(10)

SET @LimitStart = ''
SET @LimitBetween1 = ''
SET @LimitBetween2 = ''
SET @LimitEnd = ''
SET @LimitExtra = ''

if(@LimitType = 'Target')
BEGIN
	Select 
		@LimitStart = LTRIM(RTRIM(ISNULL(TargetLimitStart, '')))
		, @LimitBetween1 = LTRIM(RTRIM(ISNULL(TargetLimitBetween1, '')))
		, @LimitBetween2 = LTRIM(RTRIM(ISNULL(TargetLimitBetween2, '')))
		, @LimitEnd = LTRIM(RTRIM(ISNULL(TargetLimitEnd, '')))
		, @LimitExtra = LTRIM(RTRIM(ISNULL(TargetLimitExtra, '')))
	from ScorecardTargetLimits 
	Where ReportFieldId = @ReportFieldId AND Region = @Region
END
ELSE IF(@LimitType = 'ActualVsBudget')
BEGIN
	Select 
		@LimitStart = LTRIM(RTRIM(ISNULL(ActualVsBudgetLimitStart, '')))
		, @LimitBetween1 = LTRIM(RTRIM(ISNULL(ActualVsBudgetLimitBetween1, '')))
		, @LimitBetween2 = LTRIM(RTRIM(ISNULL(ActualVsBudgetLimitBetween2, '')))
		, @LimitEnd = LTRIM(RTRIM(ISNULL(ActualVsBudgetLimitEnd, '')))
		, @LimitExtra = LTRIM(RTRIM(ISNULL(ActualVsBudgetLimitExtra, '')))
	from ScorecardTargetLimits 
	Where ReportFieldId = @ReportFieldId AND Region = @Region
END

IF (LTRIM(RTRIM(ISNULL(@Value, ''))) <> '' AND (@LimitStart <> '' AND @LimitBetween1 <> '' AND @LimitEnd <> ''))
BEGIN
	--No Sign Used, then use =
	IF(CHARINDEX('<', @LimitStart) = 0 AND CHARINDEX('>', @LimitStart) = 0 AND CHARINDEX('=', @LimitStart) = 0)
	BEGIN
		SET @LimitStart = ' = ' + @LimitStart
	END
	--No Sign Used, then use =
	IF(CHARINDEX('<', @LimitEnd) = 0 AND CHARINDEX('>', @LimitEnd) = 0 AND CHARINDEX('=', @LimitEnd) = 0)
	BEGIN
		SET @LimitEnd = ' = ' + @LimitEnd
	END
	
	--Make Expression.
	IF(@LimitExtra <> '')
	BEGIN
		SET @sqlColorExpression = ' WHEN ' + @Value + ' = ' + @LimitExtra + ' THEN ''C'''
	END
	
	SET @sqlColorExpression += ' WHEN ' + @Value + ' BETWEEN ' + @LimitBetween1 + ' AND ' + (CASE WHEN @LimitBetween2 <> '' THEN @LimitBetween2 ELSE @LimitBetween1 END) + ' THEN ''Y'''
	SET @sqlColorExpression += ' WHEN ' + @Value + ' ' + @LimitStart + ' THEN ''R'''
	SET @sqlColorExpression += ' WHEN ' + @Value + ' ' + @LimitEnd + ' THEN ''G'''
	
	SET @sqlColorExpression = ' (CASE ' + @sqlColorExpression + ' ELSE ''N'' END) '
END

IF(LTRIM(RTRIM(ISNULL(@sqlColorExpression, '')))) = ''
BEGIN
	SET @sqlColorExpression = 'NULL'
END
	
RETURN @sqlColorExpression

END

GO
/****** Object:  UserDefinedFunction [dbo].[IncidentAIRTs]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[IncidentAIRTs] (@ID varchar(50))
RETURNS varchar(1000)
AS
BEGIN
	DECLARE @strAIRTs As Varchar(1000)
	DECLARE @strResult As Varchar(1000)
	SET @strAIRTs = ''
	SELECT @strAIRTs = @strAIRTs + ARTNumber + ', '
	FROM AssetRepairTrack
	WHERE IncidentID = @ID

	IF LEN(@strAIRTs) > ''
	    BEGIN
	           SET @strResult = LEFT(@strAIRTs, LEN(@strAIRTs) - 1)
	    END
	ELSE
	    BEGIN
	           SET @strResult = null
	    END
	RETURN @strResult
END

GO
/****** Object:  UserDefinedFunction [dbo].[IsInteger]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[IsInteger](@Value VarChar(18))
Returns Bit
As 
Begin
  
  Return IsNull(
     (Select Case When CharIndex('.', @Value) > 0 
                  Then Case When Convert(int, ParseName(@Value, 1)) <> 0
                            Then 0
                            Else 1
                            End
                  Else 1
                  End
      Where IsNumeric(@Value + 'e0') = 1), 0)

End
GO
/****** Object:  UserDefinedFunction [dbo].[IsNumber]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Function [dbo].[IsNumber](@Value VarChar(18))
Returns Bit
As
Begin
  Return (Select IsNumeric(@Value + 'e0'))
End
GO
/****** Object:  UserDefinedFunction [dbo].[LengthConvert]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   FUNCTION [dbo].[LengthConvert](@value varchar(4000), @fromUOM varchar(10), @toUOM varchar(10))
RETURNS float
AS
BEGIN
	DECLARE @fValue float
	IF @value IS NOT NULL
	BEGIN
		if @fromUOM = 'ft' AND @toUOM = 'm'
		BEGIN
			set @fValue = dbo.NumCheck(@value) *  0.304800000 
		END
		else if @fromUOM = 'm' AND @toUOM = 'ft'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 3.280839895
		END
		else if @fromUOM = 'mm' AND @toUOM = 'in'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.0393701
		END
		else if @fromUOM = 'in' AND @toUOM = 'mm'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 25.4 
		END
		else
		BEGIN
			set @fValue = dbo.NumCheck(@value)
		END
	END
	RETURN Round(@fValue,3)
END



GO
/****** Object:  UserDefinedFunction [dbo].[ListToTable]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[ListToTable] (
/*
WRITTEN BY Adam Howitt adamhowitt@yahoo.com
FUNCTION ListToTable
WRITTEN FOR SQL Server 2000
DATE 02/20/2003

Usage: select entry from listtotable('abc,def,ghi') order by entry desc
*/
@mylist varchar(8000)
)
RETURNS @ListTable TABLE (
seqid int not null,
entry varchar(255) not null)

AS

BEGIN
DECLARE 
@this varchar(255),	
@rest varchar(8000),
@pos int,
@seqid	 int

SET @this	= ' '
SET @seqid	= 1
SET @rest	= @mylist
SET @pos	= PATINDEX('%,%', @rest)
WHILE (@pos > 0)
BEGIN
set @this=substring(@rest,1,@pos-1)
set @rest=substring(@rest,@pos+1,len(@rest)-@pos)
INSERT INTO @ListTable (seqid,entry) 
VALUES (@seqid,@this)
SET @pos= PATINDEX('%,%', @rest)
SET @seqid=@seqid+1
END
set @this=@rest
INSERT INTO @ListTable (seqid,entry) 
VALUES (@seqid,@this)
RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[NumCheck]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[NumCheck] (@value varchar(50))
RETURNS float
AS
BEGIN
   Declare @fValue float
   IF @value IS NOT NULL
   BEGIN
	   IF IsNumeric(@value) = 0 --or @value is NULL
	   Begin
   		Set @fValue = 0.0
	   End
	   ELSE
	   Begin
		Set @fValue = replace(@value, ',', '')
	   End
   END
   RETURN @fValue
END


GO
/****** Object:  UserDefinedFunction [dbo].[PressureConvert]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[PressureConvert](@value varchar(4000), @fromUOM varchar(10), @toUOM varchar(10))
RETURNS float
AS
BEGIN
	DECLARE @fValue float
	IF @value IS NOT NULL
	BEGIN
		if @fromUOM = 'kPa' AND @toUOM = 'psi'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.145038
		END
		else if @fromUOM = 'Pa' AND @toUOM = 'psi'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.000145038
		END
		else if @fromUOM = 'kPag' AND @toUOM = 'psi'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.145038
		END
		else if @fromUOM = 'atm' AND @toUOM = 'psi'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 14.6959488
		END
		else if @fromUOM = 'psi' AND @toUOM = 'kPa'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 6.894757   
		END
		else if @fromUOM = 'psi' AND @toUOM = 'Pa'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 6894.757279   
		END
		else if @fromUOM = 'psi' AND @toUOM = 'kPag'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 6.894757   
		END
		else if @fromUOM = 'psi' AND @toUOM = 'atm'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.0680459639
		END
		else
		BEGIN
			set @fValue = dbo.NumCheck(@value)
		END
	END
	RETURN Round(@fValue,2)
END


GO
/****** Object:  UserDefinedFunction [dbo].[Split]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[Split] (@sep VARCHAR(1), @s VARCHAR(MAX))

RETURNS @t TABLE
    (
        val VARCHAR(MAX),
        NodeLevel Int
    )   
AS
    BEGIN
        DECLARE @xml XML
        SET @XML = N'<root><r>' + REPLACE(@s, @sep, '</r><r>') + '</r></root>'

        INSERT INTO @t(val, NodeLevel)
        SELECT r.value('.','VARCHAR(MAX)') as Item, 
        ROW_NUMBER() over (order by (Select 0)) as NodeLevel
        FROM @xml.nodes('//root/r') AS RECORDS(r)

        RETURN
    END


GO
/****** Object:  UserDefinedFunction [dbo].[String_To_CommaSaparatedInt]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Sachin Mhalungekar
-- Create date: 09/07/2018
-- Description:	 To return string of comma saparated int into int of comma saparated int   
-- =============================================

CREATE FUNCTION [dbo].[String_To_CommaSaparatedInt] (@InStr VARCHAR(MAX))
RETURNS @TempTab TABLE
   (id int not null)
AS
BEGIN
    ;-- Ensure input ends with comma
	SET @InStr = REPLACE(@InStr + ',', ',,', ',')
	DECLARE @SP INT
DECLARE @VALUE VARCHAR(1000)
WHILE PATINDEX('%,%', @INSTR ) <> 0 
BEGIN
   SELECT  @SP = PATINDEX('%,%',@INSTR)
   SELECT  @VALUE = LEFT(@INSTR , @SP - 1)
   SELECT  @INSTR = STUFF(@INSTR, 1, @SP, '')
   INSERT INTO @TempTab(id) VALUES (@VALUE)
END
	RETURN
END
GO
/****** Object:  UserDefinedFunction [dbo].[TempConvert]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[TempConvert](@value varchar(4000), @fromUOM varchar(10), @toUOM varchar(10))
RETURNS float
AS
BEGIN
	DECLARE @fValue float
	IF @value IS NOT NULL
	BEGIN
		if Right(@fromUOM, 1) = 'F' AND Right(@toUOM, 1) = 'C'
		BEGIN
			set @fValue = dbo.NumCheck(@value)
		
			if @fValue <> 0
			begin
				set @fValue = ((dbo.NumCheck(@value) - 32.0) * 5.0) / 9.0
			end
		END
		else if Right(@fromUOM, 1) = 'C' AND Right(@toUOM, 1) = 'F'
		BEGIN
			set @fValue = ((dbo.NumCheck(@value) * 9.0) / 5.0) + 32.0
		END
		else
		BEGIN
			set @fValue = dbo.NumCheck(@value)
		END
	END
	RETURN Round(@fValue,2)
END


GO
/****** Object:  UserDefinedFunction [dbo].[TorqueConvert]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[TorqueConvert](@value varchar(100), @fromUOM varchar(5), @toUOM varchar(5))
RETURNS float
AS
BEGIN
	DECLARE @fValue float
	IF @value IS NOT NULL
	BEGIN
		if @fromUOM = 'N-m' AND @toUOM = 'ft-lbs'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 0.7376) 
		END
		else if @fromUOM = 'dN-m' AND @toUOM = 'ft-lbs'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 7.375621)
		END
		else if @fromUOM = 'kN-m' AND @toUOM = 'ft-lbs'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 737.56212117)
		END
		else if @fromUOM = 'ft-lbs' AND @toUOM = 'dN-m'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 0.1355818)
		END
		else if @fromUOM = 'N-m' AND @toUOM = 'dN-m'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 0.1000000)
		END
		else if @fromUOM = 'kN-m' AND @toUOM = 'dN-m'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 0.0010000)
		END
		else
		BEGIN
			set @fValue = dbo.NumCheck(@value)
		END
	END
	RETURN @fValue
END


GO
/****** Object:  UserDefinedFunction [dbo].[udf_BuildSheet_GetAIRTForMaintenance]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*----------------------------------------------------	
Program Type	: FUNCTION
Description		: To GET AIRTS FOR BUILD SHEET MAINTENANCE
Author			: Sachin Mhalungekar
Created Date	: 28/05/21
Modification History
---------------------------------------------------
<CR #> 			<Date>	    <Author>	<Reason for changes and location of changes>
--------------------------------------------------*/
CREATE FUNCTION [dbo].[udf_BuildSheet_GetAIRTForMaintenance] 
(
	@toolStringId		UNIQUEIDENTIFIER,
	@fixedAssetId		UNIQUEIDENTIFIER,
	@branchPlant		VARCHAR(12),
	@isOpenAirts		BIT
)
RETURNS @AIRTs TABLE (
    AssetRepairTrackId	UNIQUEIDENTIFIER,
	ITPFTWOId			UNIQUEIDENTIFIER,
	SRPFTWOId			UNIQUEIDENTIFIER,
	ARTNumber			VARCHAR(25),
	[Status]			VARCHAR(25)
) AS
BEGIN

DECLARE @isNonLiveLocation BIT;
SELECT TOP 1 @isNonLiveLocation = IsNonLiveLocation FROM BranchPlants WHERE BranchPlant = @branchPlant;

IF @isOpenAirts = 0
BEGIN
	IF @isNonLiveLocation = 0
		INSERT @AIRTs
		SELECT TOP 1 AssetRepairTrackId, ITPFTWOId, SRPFTWOId, ARTNumber, [Status]  
					 FROM AssetRepairTrack (NOLOCK) ar JOIN Dispatches (NOLOCK) d on ar.DispatchNumber=d.DispatchNumber and ar.FixedAssetId = @fixedAssetId
					 join JarRunTools (NOLOCK) jrt	ON jrt.ToolStringId = @toolStringId and d.DispatchId = jrt.JobId
					 ORDER BY ar.DateAdded DESC 
	ELSE
		INSERT @AIRTs
		SELECT TOP 1 AssetRepairTrackId, ITPFTWOId, SRPFTWOId, ARTNumber, [Status]  
				 FROM AssetRepairTrack (NOLOCK) ar where ar.DispatchNumber IS NULL AND ar.FixedAssetId = @fixedAssetId
				 ORDER BY ar.DateAdded DESC
END
ELSE
BEGIN
	IF @isNonLiveLocation = 0
		INSERT @AIRTs
		SELECT TOP 1 AssetRepairTrackId, ITPFTWOId, SRPFTWOId, ARTNumber, [Status]  
				 FROM AssetRepairTrack (NOLOCK) ar1 JOIN Dispatches (NOLOCK) d on (ar1.DispatchNumber IS NULL OR ar1.DispatchNumber != d.DispatchNumber) and ar1.FixedAssetId = @fixedAssetId
				 join JarRunTools (NOLOCK) jrt	ON jrt.ToolStringId = @toolStringId and d.DispatchId != jrt.JobId AND ar1.Status = 'Open'
	ELSE
		INSERT @AIRTs
		SELECT TOP 1 AssetRepairTrackId, ITPFTWOId, SRPFTWOId, ARTNumber, [Status]  
				 FROM AssetRepairTrack (NOLOCK) ar1 WHERE ar1.DispatchNumber IS NULL and ar1.FixedAssetId = @fixedAssetId AND ar1.Status = 'Open'
END

RETURN
END
GO
/****** Object:  UserDefinedFunction [dbo].[udf_GetAIRTApproverLevel]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh
-- Create date: 10/13/2016
-- Description:	
-- =============================================
CREATE FUNCTION [dbo].[udf_GetAIRTApproverLevel]
(
	-- Add the parameters for the function here
	@ProductLine varchar(50),
	@LocId VARCHAR(16),
	@UserId int
)
RETURNS INT
AS
BEGIN
	-- Declare the return variable here
	DECLARE @ApproverLevel INT = 0

	
    -- AIRT ADMIN
	IF EXISTS(SELECT DISTINCT u.UserId 
					FROM MCApprovers a (NOLOCK)
					INNER JOIN Users u (NOLOCK) ON u.UserId = a.UserId
					INNER JOIN UserProfile p (NOLOCK) on u.UserId = p.UserId			-- for Approval delegate
					LEFT JOIN Users u1 (NOLOCK) ON p.ApproverDelegate = u1.UserName
					WHERE ApprovalCode='AIRT' 
					AND ApproverType = 10
					AND (u.UserId = @UserId OR (u1.UserId = @UserId AND p.ApproverDelegateExpiryDate > GETDATE()))
					AND ((ProductLine = @ProductLine AND LocId = @LocId OR (ProductLine = @ProductLine AND LocId IS NULL)  
						OR (LocId = @LocId AND ProductLine IS NULL) OR (ProductLine IS NULL AND LocId IS NULL ) )))
		BEGIN
			SET @ApproverLevel = 2
		END
	-- Level 2 Approver
	ELSE IF EXISTS(SELECT DISTINCT u.UserId 
					FROM MCApprovers a (NOLOCK)
					INNER JOIN Users u (NOLOCK) ON u.UserId = a.UserId
					INNER JOIN UserProfile p (NOLOCK) on u.UserId = p.UserId			-- for Approval delegate
					LEFT JOIN Users u1 (NOLOCK) ON p.ApproverDelegate = u1.UserName
					WHERE ApprovalCode='AIRT' 
					AND ApproverType = 6
					AND (u.UserId = @UserId OR (u1.UserId = @UserId AND p.ApproverDelegateExpiryDate > GETDATE()))
					AND ((ProductLine = @ProductLine AND LocId = @LocId OR (ProductLine = @ProductLine AND LocId IS NULL)  OR (LocId = @LocId AND ProductLine IS NULL) OR (ProductLine IS NULL AND LocId IS NULL ) )))
		BEGIN
			SET @ApproverLevel = 2
		END
	-- Level 1 Approver
	ELSE IF EXISTS(SELECT DISTINCT u.UserId 
					FROM MCApprovers a (NOLOCK)
					INNER JOIN Users u (NOLOCK) ON u.UserId = a.UserId
					INNER JOIN UserProfile p (NOLOCK) on u.UserId = p.UserId			-- for Approval delegate
					LEFT JOIN Users u1 (NOLOCK) ON p.ApproverDelegate = u1.UserName
					WHERE ApprovalCode='AIRT' 
					AND ApproverType = 5
					AND (u.UserId = @UserId OR (u1.UserId = @UserId AND p.ApproverDelegateExpiryDate > GETDATE()))
					AND ((ProductLine = @ProductLine AND LocId = @LocId OR (ProductLine = @ProductLine AND LocId IS NULL)  OR (LocId = @LocId AND ProductLine IS NULL) OR (ProductLine IS NULL AND LocId IS NULL ) )))
		BEGIN
			SET @ApproverLevel = 1
		END
	ELSE IF EXISTS (SELECT * FROM UserRoles(NOLOCK) WHERE UserId = @UserId AND RoleId in (1))
		BEGIN
			SET @ApproverLevel = 2
		END


	-- Return the result of the function
	RETURN @ApproverLevel

END

GO
/****** Object:  UserDefinedFunction [dbo].[udf_GetAuditFieldId]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--===========================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 14 Jan 2016
--DESCRIPTION: TO get  audit field id based on name
--===========================================================
CREATE FUNCTION [dbo].[udf_GetAuditFieldId](@FieldName VARCHAR(100))
RETURNS INT
AS
BEGIN
DECLARE @FieldId INT = 0;

	SELECT @FieldId = [FieldId] FROM [AuditRMFields] WHERE [FieldName] = @FieldName
	RETURN @FieldId
END
GO
/****** Object:  UserDefinedFunction [dbo].[udf_GetJobIds]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<SUYEB MOHAMMAD>
-- Create date: <19 May 2016>
-- Description:	<To get job Ids based on job and toolstrings mapping>
-- =============================================
--TFS 76819: SACHIN MHALUNGEKAR - 30 APR 2020 - ADDED CONDITIONS FOR NONDS
--=======================================================
CREATE FUNCTION [dbo].[udf_GetJobIds]
(
  @ToolStringId UNIQUEIDENTIFIER
)
RETURNS VARCHAR(1000)
AS
BEGIN
DECLARE @Temp VARCHAR(1000) = '', @toolType VARCHAR(100);

	SELECT TOP 1 @toolType = [Type] FROM ToolStrings WHERE ToolStringId=@ToolStringId

	IF(UPPER(@toolType) = 'NONDS')
	BEGIN
		SELECT	@Temp = @Temp + CONVERT(NVARCHAR(50),[TM].[JobId]) + ',' FROM  [JarRunTools] [TM] 
				INNER JOIN [ToolStrings] [TS] on [TS].[ToolStringId] = [TM].[ToolStringId]
		WHERE	[TS].[ToolStringId] = @ToolStringId 
	END
	ELSE
	BEGIN
		SELECT	@Temp = @Temp + CONVERT(NVARCHAR(50),[JB].[JobId]) + ',' FROM [Jobs] [JB] 
				INNER JOIN [JarRunTools] [TM] ON [TM].[JobId] = [JB].[JobId]
				INNER JOIN [ToolStrings] [TS] on [TS].[ToolStringId] = [TM].[ToolStringId]
		WHERE	[TS].[ToolStringId] = @ToolStringId AND [JB].[IsDeleted] = 0 ORDER BY [JB].[StartDate] Desc
	END
	RETURN SUBSTRING(@Temp, 0, LEN(@Temp))

END


GO
/****** Object:  UserDefinedFunction [dbo].[udf_GetJobNumbers]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<SUYEB MOHAMMAD>
-- Create date: <19 May 2016>
-- Description:	<To get job number based on job and toolstrings mapping>
-- =============================================
CREATE FUNCTION [dbo].[udf_GetJobNumbers]
(
  @ToolStringId UNIQUEIDENTIFIER
)
RETURNS VARCHAR(1000)
AS
BEGIN
DECLARE @Temp VARCHAR(1000) = '';

	SELECT @Temp = @Temp + [JobNumber] + ',' 
	FROM
	(
		SELECT	DISTINCT [JB].[JobNumber], [JB].[StartDate]
				FROM [Jobs] [JB] 
				INNER JOIN [JarRunTools] [TM] ON [TM].[JobId] = [JB].[JobId]
				INNER JOIN [ToolStrings] [TS] on [TS].[ToolStringId] = [TM].[ToolStringId]
		WHERE	[TS].[ToolStringId] = @ToolStringId AND [JB].[IsDeleted] = 0 
	) A
	ORDER BY [StartDate] Desc

	RETURN SUBSTRING(@Temp, 0, LEN(@Temp))

END
GO
/****** Object:  UserDefinedFunction [dbo].[udf_GetToolStringFixedAssetAttributes]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Sachin Mhalungekar
-- Create date: <23 June 2020>
-- Description:	<To get attributes for tool string fixed asset>
-- =============================================
CREATE FUNCTION [dbo].[udf_GetToolStringFixedAssetAttributes]
(
  @ToolStringFixedAssetId UNIQUEIDENTIFIER,
  @AttributeTypeId INT
)
RETURNS VARCHAR(1000)
AS
BEGIN

	DECLARE @Temp VARCHAR(MAX);
		SELECT	@Temp = COALESCE(@Temp + ',', '')  + Attribute  
		FROM  ToolStringFixedAssetAttributes 
		WHERE ToolStringFixedAssetsId = @ToolStringFixedAssetId AND  AttributeTypeId= @AttributeTypeId;
	
	RETURN @Temp

END



GO
/****** Object:  UserDefinedFunction [dbo].[udf_IsAIRTOrDTAssigned]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Sachin Mhalungekar
-- Create date: <2 JULY 2020>
-- Description:	<To get AIRT OR DT ASSIGNED TO SERIAL NUM>
-- =============================================
CREATE FUNCTION [dbo].[udf_IsAIRTOrDTAssigned]
(
  @SerialNum VARCHAR(100),
  @ItemNum VARCHAR(100)
)
RETURNS INT
AS
BEGIN

	DECLARE @temp INT, @ARTNumber VARCHAR(100), @lastAIRTDate DATETIME, @lastDTReturnDate DATETIME, @RNItemNum VARCHAR(100);

	SELECT TOP 1 @ARTNumber=ARTNumber, @lastAIRTDate=art.DateAdded, @RNItemNum = art.RNItemNum  FROM AssetRepairTrack art WITH (NOLOCK) WHERE SerialNum=@SerialNum AND ItemNum=@ItemNum ORDER BY art.DateAdded DESC;
	
	IF (ISNULL(@ARTNumber, '') = '')
	BEGIN
		SET @temp = 0; --Red
	END
	ELSE
	BEGIN
		SELECT TOP 1 @lastDTReturnDate = dii.DateReturned FROM DispatchInstanceItems dii WITH (NOLOCK) WHERE SerialNum=@SerialNum AND ItemNum=@RNItemNum AND ISNULL(ErrorMessage, '')='' ORDER BY dii.DateReturned DESC
		IF (ISNULL(@lastDTReturnDate, '') = '')
		BEGIN
			SET @temp = 2;
		END
		ELSE IF(@lastAIRTDate < @lastDTReturnDate)
		BEGIN
			SET @temp = 1; --Yellow
		END
		ELSE IF(@lastAIRTDate > @lastDTReturnDate)
		BEGIN
			SET @temp = 2; --Green
		END
	END

	RETURN @Temp

END

GO
/****** Object:  UserDefinedFunction [dbo].[udf_StripHTML]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 CREATE FUNCTION [dbo].[udf_StripHTML] (@HTMLText VARCHAR(MAX))
RETURNS VARCHAR(MAX)
AS
     BEGIN
         DECLARE @Start INT;
         DECLARE @End INT;
         DECLARE @Length INT;
         SET @Start = CHARINDEX('<', @HTMLText);
         SET @End = CHARINDEX('>', @HTMLText, CHARINDEX('<', @HTMLText));
         SET @Length = (@End - @Start) + 1;
         WHILE @Start > 0
               AND @End > 0
               AND @Length > 0
             BEGIN
                 SET @HTMLText = STUFF(@HTMLText, @Start, @Length, '');
                 SET @Start = CHARINDEX('<', @HTMLText);
                 SET @End = CHARINDEX('>', @HTMLText, CHARINDEX('<', @HTMLText));
                 SET @Length = (@End - @Start) + 1;
             END;
         RETURN LTRIM(RTRIM(@HTMLText));
     END;

GO
/****** Object:  UserDefinedFunction [dbo].[ufn_CbmMonitor_GetDTLastMeterReadingValue]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--============================================================================  
--MODFIED BY : Sachin Mhalungekar  
--MODIFIED ON: 10 May 2020  
--DESCRIPTION: Get last meter reading value for DT PM dues   
--============================================================================  
-- Changes: TFS Task -  - Added:  - User: - Date:
--============================================================================  
CREATE FUNCTION [dbo].[ufn_CbmMonitor_GetDTLastMeterReadingValue] 
(
	@fixedAssetId UNIQUEIDENTIFIER,
	@cbmMonitorId INT
)
RETURNS DECIMAL(10,2)

WITH EXECUTE AS CALLER
AS

BEGIN
	 
	DECLARE @meterReadingTypeId INT, @cbmMonitorPFTConfigId UNIQUEIDENTIFIER, @objectNumber INT = 0, 
			@oldPFTConfigId UNIQUEIDENTIFIER = null, @newPFTConfigId UNIQUEIDENTIFIER = null
	DECLARE @lastMeterReadingValue decimal(10,2) = 0.0, @pwsDateAdded DATETIME

	-- Get Meter reading type based on CBM Monitor Id
	SELECT TOP 1 @meterReadingTypeId = meterReadingTypeId, @cbmMonitorPFTConfigId = PFTConfigId, @objectNumber = ObjectNumber FROM CBMMonitor WHERE CBMMonitorId = @cbmMonitorId
	
	-- Number of days asset returned on DT
	IF (@meterReadingTypeId IN (10, 11))
	BEGIN	
	IF(ISNULL(@objectNumber, 0) = 0)
	BEGIN
		SET @oldPFTConfigId = @cbmMonitorPFTConfigId;
		SET @newPFTConfigId = @cbmMonitorPFTConfigId;
	END
	ELSE
	BEGIN
		SELECT	TOP 1 @oldPFTConfigId = PFTConfigId FROM PMDispositionItems 
		WHERE	MeterReadingTypeId = @meterReadingTypeId AND ObjectNumber = @objectNumber AND FixedAssetId = @fixedAssetId ORDER BY CreatedOn DESC;

		SELECT	TOP 1 @newPFTConfigId = PFTConfigId FROM PFTConfig pc WHERE pc.ObjectNumber = @objectNumber AND pc.IsObsolete = 0;

		----considered PFTConfigId must be different for same DT type on the AIRT
		--SELECT	@pwsDateAdded = MAX(pws.DateAdded) FROM PFTWO (NOLOCK) p 
		--JOIN	PMDispositionItems (NOLOCK) pdi ON pdi.PFTConfigId = p.PFTConfigId AND pdi.FixedAssetId = p.FixedAssetId
		--JOIN	PFTWOSeq (NOLOCK) pws on p.PFTWOId = pws.PFTWOId
		--WHERE	p.PFTType=3 AND p.ReasonForChange != 'Closed – Rollback' AND pdi.MeterReadingTypeId = @meterReadingTypeId AND p.Active = 0 AND p.FixedAssetId = @fixedAssetId
	END
	IF NOT EXISTS(SELECT TOP 1 PFTWOId FROM PFTWO WHERE FixedAssetId = @fixedAssetId AND PFTType = 3 AND PFTConfigId = ISNULL(@oldPFTConfigId, @newPFTConfigId) AND Active = 1)
		--MeterReadingTypeId = 8 do we need to add this condition as if there are two CBM with same pftconfigid on the same AIRT then what?
		BEGIN
			SELECT @lastMeterReadingValue =
			CASE	
								WHEN --check latest DT pmpft
									(	SELECT COUNT(pw.PFTWOId) FROM PFTWO (NOLOCK) pw 
										WHERE pw.FixedAssetId = @fixedAssetId AND pw.PFTType = 3 AND pw.PFTConfigId = ISNULL(@oldPFTConfigId, @newPFTConfigId) AND pw.ReasonForChange != 'Closed – Rollback'
									) = 0
								THEN DATEDIFF(dd, CASE WHEN ShipType ='DT-RETURN'  THEN DateReturned
													   WHEN ShipType ='DT-SEQ-ADD' THEN DateShipped  END, GETDATE()) 
								WHEN 
									CASE WHEN ShipType ='DT-RETURN'  THEN DateReturned
									WHEN ShipType ='DT-SEQ-ADD' THEN DateShipped  END > (SELECT MAX(pws.DateAdded) [DateAdded] FROM PFTWO (NOLOCK) pw JOIN PFTWOSeq (NOLOCK) pws on pw.PFTWOId = pws.PFTWOId
									WHERE pw.FixedAssetId = @fixedAssetId and pw.PFTType = 3 AND pw.PFTConfigId = ISNULL(@oldPFTConfigId, @newPFTConfigId)
									AND pw.Active = 0 AND pw.ReasonForChange != 'Closed – Rollback')
								THEN DATEDIFF(dd, CASE WHEN ShipType ='DT-RETURN'  THEN DateReturned
													   WHEN ShipType ='DT-SEQ-ADD' THEN DateShipped  END, GETDATE()) 
			END 
			FROM 
			(
				SELECT TOP 1 di.ShipType,
						dii.DateReturned,
						di.DateShipped
				FROM	Dispatches d
				JOIN DispatchInstances di on d.DispatchId = di.DispatchId 
				JOIN DispatchInstanceItems dii on di.DispatchInstanceId=dii.DispatchInstanceId
				WHERE	dii.FixedAssetId = @fixedAssetId AND di.ShipType= CASE	WHEN @meterReadingTypeId = 10 THEN 'DT-RETURN'
																				WHEN @meterReadingTypeId = 11 THEN 'DT-SEQ-ADD' END
				ORDER BY dii.DateAdded DESC
			) A	
		END	
	END

	RETURN ISNULL(@lastMeterReadingValue, 0)
END
GO
/****** Object:  UserDefinedFunction [dbo].[ufn_CBMMonitor_GetPMValue]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--======================================================
--CREATED BY : Yogesh
--CREATED ON : 13 Feb 2018
--DESCRIPTION: To get PM Due Percent
--=======================================================
CREATE FUNCTION [dbo].[ufn_CBMMonitor_GetPMValue] (
	@FixedAssetId UNIQUEIDENTIFIER
)
RETURNS decimal(18, 2)
AS
BEGIN

  DECLARE @Result decimal(18,2)
  SELECT @Result = ROUND(cm.LastMeterReadingValue / (m.GlobalTrigger * 0.01), 2)
  FROM CBMCalculatedMeterReadings cm (NOLOCK)
  JOIN FixedAssets f (NOLOCK) ON f.FixedAssetId = cm.FixedAssetId
  JOIN FixedAssets parentf (NOLOCK) ON parentf.FixedAssetId = f.ParentFixedAssetId
  JOIN CBMMonitorAssetItemNums cc (NOLOCK) ON f.InventoryItemNum = cc.ItemNum AND cc.IsParent = 0
  JOIN CBMMonitorAssetItemNums parentc (NOLOCK) ON cc.CBMMonitorId = parentc.CBMMonitorId AND parentf.InventoryItemNum = parentc.ItemNum AND parentc.IsParent = 1
  JOIN CBMMonitor m (NOLOCK) ON m.CBMMonitorId = cc.CBMMonitorId and m.Active = 1 and cm.MeterReadingTypeId = m.MeterReadingTypeId
  --LEFT JOIN CBMMonitorCustoms cr (NOLOCK) ON cr.PFTConfigId = m.PFTConfigId AND cr.MeterReadingTypeId = m.MeterReadingTypeId 
		--  AND cr.TriggerType = 'R' --AND cc.TriggerName = @Region
  --LEFT JOIN CBMMonitorCustoms cb (NOLOCK) ON cb.PFTConfigId = m.PFTConfigId AND cb.MeterReadingTypeId = m.MeterReadingTypeId 
		--  AND cr.TriggerType = 'B' --AND cc.TriggerName = @BranchPlant
  WHERE cm.FixedAssetId = @FixedAssetId
  ORDER By ROUND(cm.LastMeterReadingValue / (m.GlobalTrigger * 0.01), 2) DESC

  
  RETURN @Result
END
GO
/****** Object:  UserDefinedFunction [dbo].[ufn_CBMMonitor_GetTriggerValue]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--======================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 06 Dec 2016
--DESCRIPTION: To get CBM trigger value
--=======================================================
CREATE FUNCTION [dbo].[ufn_CBMMonitor_GetTriggerValue] (
	@ComponentItemNum varchar(50),
	@AssetRepairTrackId uniqueidentifier,
	@PFTConfigId uniqueidentifier,
	@MeterReadingTypeId int
)
RETURNS decimal(18, 5)
AS
BEGIN


  IF (@MeterReadingTypeId = 4)
	RETURN 0

  DECLARE @BranchPlant VARCHAR(MAX), @Region VARCHAR(MAX), @AssetItemNum varchar(50), @ObjectNumber int
  SELECT  @BranchPlant = FromBranchPlant, @AssetItemNum = ItemNum FROM AssetRepairTrack (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId
  SELECT  @Region = Region FROM BranchPlants (NOLOCK) WHERE BranchPlant = @BranchPlant
  SELECT TOP 1 @ObjectNumber = ObjectNumber FROM PFTConfig (NOLOCK) WHERE PFTConfigId = @PFTConfigId;

  DECLARE @RegionTriggerValue decimal(18, 2) = NULL
  DECLARE @BPTriggerValue decimal(18, 2) = NULL
  DECLARE @GlobalTrigger decimal(18, 2) = NULL

  SELECT @GlobalTrigger = GlobalTrigger, @RegionTriggerValue = cc.TriggerValue, @BPTriggerValue = cc1.TriggerValue
  FROM CBMMonitor c (NOLOCK)
  JOIN CBMMonitorAssetItemNums a (NOLOCK) ON c.CBMMonitorId = a.CBMMonitorId AND a.IsParent = 1 AND a.ItemNum = @AssetItemNum
  JOIN CBMMonitorAssetItemNums comp (NOLOCK) ON c.CBMMonitorId = comp.CBMMonitorId AND comp.IsParent = 0 AND comp.ItemNum = @ComponentItemNum
  LEFT JOIN CBMMonitorCustoms cc (NOLOCK) ON cc.ObjectNumber = c.ObjectNumber AND cc.MeterReadingTypeId = c.MeterReadingTypeId 
		  AND cc.TriggerType = 'R' AND cc.TriggerName = @Region
  LEFT JOIN CBMMonitorCustoms cc1 (NOLOCK) ON cc1.ObjectNumber = c.ObjectNumber AND cc1.MeterReadingTypeId = c.MeterReadingTypeId 
		  AND cc1.TriggerType = 'B' AND cc1.TriggerName = @BranchPlant
  WHERE c.MeterReadingTypeId = @MeterReadingTypeId AND c.ObjectNumber = @ObjectNumber

  RETURN COALESCE(@BPTriggerValue, @RegionTriggerValue, @GlobalTrigger)

END


GO
/****** Object:  UserDefinedFunction [dbo].[ufn_CBMMonitor_GetTriggerValue_Test]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--======================================================
--CREATED BY : Vivek Bhati
--CREATED ON : 01/04/2022
--DESCRIPTION: To get CBM trigger value
--=======================================================
CREATE FUNCTION [dbo].[ufn_CBMMonitor_GetTriggerValue_Test] (
	@FixedAssetId uniqueidentifier,
	@PFTConfigId uniqueidentifier,
	@MeterReadingTypeId int
)
RETURNS decimal(18, 5)
AS
BEGIN

  DECLARE @BranchPlant VARCHAR(MAX), @Region VARCHAR(MAX), @AssetItemNum varchar(50), @ObjectNumber int
  SELECT  @BranchPlant = BranchPlant, @AssetItemNum = InventoryItemNum FROM FixedAssets (NOLOCK) WHERE FixedAssetId = @FixedAssetId
  SELECT  @Region = Region FROM BranchPlants (NOLOCK) WHERE BranchPlant = @BranchPlant
  SELECT TOP 1 @ObjectNumber = ObjectNumber FROM PFTConfig (NOLOCK) WHERE PFTConfigId = @PFTConfigId;

  DECLARE @RegionTriggerValue decimal(18, 2) = NULL
  DECLARE @BPTriggerValue decimal(18, 2) = NULL
  DECLARE @GlobalTrigger decimal(18, 2) = NULL

  SELECT @GlobalTrigger = GlobalTrigger, @RegionTriggerValue = cc.TriggerValue, @BPTriggerValue = cc1.TriggerValue
  FROM CBMMonitor c (NOLOCK)
  JOIN CBMMonitorAssetItemNums a (NOLOCK) ON c.CBMMonitorId = a.CBMMonitorId AND a.IsParent = 1 AND a.ItemNum = @AssetItemNum
  LEFT JOIN CBMMonitorCustoms cc (NOLOCK) ON cc.ObjectNumber = c.ObjectNumber AND cc.MeterReadingTypeId = c.MeterReadingTypeId 
		  AND cc.TriggerType = 'R' AND cc.TriggerName = @Region
  LEFT JOIN CBMMonitorCustoms cc1 (NOLOCK) ON cc1.ObjectNumber = c.ObjectNumber AND cc1.MeterReadingTypeId = c.MeterReadingTypeId 
		  AND cc1.TriggerType = 'B' AND cc1.TriggerName = @BranchPlant
  WHERE c.MeterReadingTypeId = @MeterReadingTypeId AND c.ObjectNumber = @ObjectNumber

  RETURN COALESCE(@BPTriggerValue, @RegionTriggerValue, @GlobalTrigger)
END

		

GO
/****** Object:  UserDefinedFunction [dbo].[ufn_GetCBMTriggerValue]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--======================================================
--CREATED BY : Yogesh Mane
--CREATED ON : 19 Mar 2019
--DESCRIPTION: To get CBM trigger value
--=======================================================
CREATE FUNCTION [dbo].[ufn_GetCBMTriggerValue] (
	@CBMMonitorId int,
	@BranchPlant varchar(12)
)
RETURNS decimal(18, 5)
AS
BEGIN

  DECLARE @Region VARCHAR(MAX)
  SELECT  @Region = Region FROM BranchPlants (NOLOCK) WHERE BranchPlant = @BranchPlant

  DECLARE @RegionTriggerValue decimal(18, 2) = NULL
  DECLARE @BPTriggerValue decimal(18, 2) = NULL
  DECLARE @GlobalTrigger decimal(18, 2) = NULL

  SELECT @GlobalTrigger = GlobalTrigger, @RegionTriggerValue = cc.TriggerValue, @BPTriggerValue = cc1.TriggerValue
  FROM CBMMonitor c (NOLOCK)
  LEFT JOIN CBMMonitorCustoms cc (NOLOCK) ON cc.PFTConfigId = c.PFTConfigId AND cc.MeterReadingTypeId = c.MeterReadingTypeId 
		  AND cc.TriggerType = 'R' AND cc.TriggerName = @Region
  LEFT JOIN CBMMonitorCustoms cc1 (NOLOCK) ON cc1.PFTConfigId = c.PFTConfigId AND cc1.MeterReadingTypeId = c.MeterReadingTypeId 
		  AND cc1.TriggerType = 'B' AND cc1.TriggerName = @BranchPlant
  WHERE c.CBMMonitorId = @CBMMonitorId

  RETURN COALESCE(@BPTriggerValue, @RegionTriggerValue, @GlobalTrigger)
END



GO
/****** Object:  UserDefinedFunction [dbo].[ufnGetAssetStatusforJobHistory]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==================================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 20 Oct 2016
--DESCIPTION : To get asset status for job history icon
--===================================================================
CREATE FUNCTION [dbo].[ufnGetAssetStatusforJobHistory](@RunId UNIQUEIDENTIFIER,@FixedAssetId UNIQUEIDENTIFIER)
RETURNS INT
AS
BEGIN
	DECLARE @CSISUM INT = 0;
	DECLARE @Result INT = 1;
	SELECT  @CSISUM = ISNULL(SUM(CAST(CSI AS INT)), 0) FROM ToolStringComponentInfo(NOLOCK) WHERE RunID = @RunId AND FixedAssetID = @FixedAssetId
	
	IF(@CSISUM >= 1)
	BEGIN SET @Result = 3 END
	ELSE
		BEGIN
		SELECT  @CSISUM = ISNULL(SUM(CAST(CSI AS INT)), 0) FROM ToolStringComponentInfo(NOLOCK) WHERE RunID = @RunId AND FixedAssetID != @FixedAssetId	
		IF(@CSISUM >= 1)
		BEGIN
			SET @Result = 2				
		END
		ELSE IF EXISTS(SELECT * FROM Incidents WHERE RunID = @RunId)
			BEGIN
				SET @Result = 2			
			END
	END

	RETURN @Result
END

GO
/****** Object:  UserDefinedFunction [dbo].[ufnGetToolStatusforJobHistory]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==================================================================  
--CREATED BY : Sachin Mhalungekar
--CREATED ON : 28 Mar 2019  
--DESCIPTION : To get asset status for job history icon  
--===================================================================  
CREATE FUNCTION [dbo].[ufnGetToolStatusforJobHistory]
(
	@RunId UNIQUEIDENTIFIER,
	@ToolStringID UNIQUEIDENTIFIER
)  
RETURNS INT  
AS  
BEGIN  
 DECLARE @CSISUM INT = 0;  
 DECLARE @Result INT = 1; -- green
 SELECT  @CSISUM = (ISNULL(SUM(CAST(CSI AS INT)), 0) + ISNULL(SUM(CAST(NCI AS INT)), 0)) FROM ToolStringComponentInfo(NOLOCK) WHERE RunID = @RunId AND ToolStringID = @ToolStringID  
   
 IF(@CSISUM >= 1)  
	BEGIN SET @Result = 3 END  -- red
 ELSE  
	BEGIN  
		SELECT  @CSISUM = (ISNULL(SUM(CAST(CSI AS INT)), 0) + ISNULL(SUM(CAST(NCI AS INT)), 0)) FROM ToolStringComponentInfo(NOLOCK) WHERE RunID = @RunId AND ToolStringID != @ToolStringID   
		IF(@CSISUM >= 1)  
			SET @Result = 2    -- yellow  
	END  
  
 RETURN @Result  
END  

GO
/****** Object:  UserDefinedFunction [dbo].[ufnTimeZoneConvert]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[ufnTimeZoneConvert](
   @TimeZoneId int,
   @DateTime DATETIME
)
RETURNS datetime
AS 
BEGIN
	Declare  @localOffSetValue varchar(255);
	Select @localOffSetValue= OptionLabel from SelectOptions where SelectName = 'TimeZone' and OptionValue = @TimeZoneId
	if(isnull(@localOffSetValue,'0') != '0' and @DateTime is not null and cast(@localOffSetValue as varchar(10))!='NULL')
		BEGIN
			 
			RETURN  DateADD(MINUTE,cast(DATEPART(TZoffset, @DateTime at time zone @localOffSetValue) as int),( @DateTime at time zone 'Central Standard Time') AT TIME ZONE 'UTC')

		END
	 
	RETURN @DateTime
END;
GO
/****** Object:  UserDefinedFunction [dbo].[VelocityConvert]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[VelocityConvert](@value varchar(4000), @fromUOM varchar(10), @toUOM varchar(10))
RETURNS float
AS
BEGIN
	DECLARE @fValue float
	IF @value IS NOT NULL
	BEGIN
		if @fromUOM = 'm/hr' AND @toUOM = 'ft/hr'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 3.280839895
		END
		else if @fromUOM = 'm/hr' AND @toUOM = 'm/min'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.016666667
		END
		else if @fromUOM = 'm/hr' AND @toUOM = 'm/sec'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.000277778
		END
		else if @fromUOM = 'ft/hr' AND @toUOM = 'm/hr'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.3048
		END
		else if @fromUOM = 'ft/hr' AND @toUOM = 'm/min'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.00508
		END
		else if @fromUOM = 'ft/hr' AND @toUOM = 'm/sec'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.000084667
		END
		else if @fromUOM = 'm/min' AND @toUOM = 'ft/hr'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 196.850393701
		END
		else if @fromUOM = 'm/min' AND @toUOM = 'm/hr'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 60
		END
		else if @fromUOM = 'm/min' AND @toUOM = 'm/sec'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.016666667
		END
		else if @fromUOM = 'm/sec' AND @toUOM = 'ft/hr'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 11811.023622047
		END
		else if @fromUOM = 'm/sec' AND @toUOM = 'm/hr'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 3600
		END
		else if @fromUOM = 'm/sec' AND @toUOM = 'm/min'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 60
		END
		else
		BEGIN
			set @fValue = dbo.NumCheck(@value)
		END
	END
	RETURN Round(@fValue,2)
END


GO
/****** Object:  UserDefinedFunction [dbo].[ViscosityConvert]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ViscosityConvert](@value varchar(4000), @fromUOM varchar(10), @toUOM varchar(10))
RETURNS float
AS
BEGIN
	DECLARE @fValue float
	IF @value IS NOT NULL
	BEGIN
		if @fromUOM = 'sec/l' AND @toUOM = 'sec/qt'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 1.057   
		END
		else if @fromUOM = 'sec/qt' AND @toUOM = 'sec/l'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.9463 
		END
		else
		BEGIN
			set @fValue = dbo.NumCheck(@value)
		END
	END
	RETURN Round(@fValue,2)
END


GO
/****** Object:  UserDefinedFunction [dbo].[VolumeConvert]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[VolumeConvert](@value varchar(4000), @fromUOM varchar(10), @toUOM varchar(10))
RETURNS float
AS
BEGIN
	DECLARE @fValue float
	IF @value IS NOT NULL
	BEGIN
		if @fromUOM = 'gpm' AND @toUOM = 'm3/min'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.003785
		END
		else if @fromUOM = 'gpm' AND @toUOM = 'L/min'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 3.785
		END
		else if @fromUOM = 'gpm' AND @toUOM = 'ft3/min'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.1337
		END

		else if @fromUOM = 'm3/min' AND @toUOM = 'gpm'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 264.2
		END
		else if @fromUOM = 'm3/min' AND @toUOM = 'L/min'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 1000
		END
		else if @fromUOM = 'm3/min' AND @toUOM = 'ft3/min'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 35.31
		END

		else if @fromUOM = 'm³/min' AND @toUOM = 'gpm'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 264.2
		END
		else if @fromUOM = 'm³/min' AND @toUOM = 'L/min'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 1000
		END
		else if @fromUOM = 'm³min' AND @toUOM = 'ft3/min'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 35.31
		END

		else if @fromUOM = 'L/min' AND @toUOM = 'gpm'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.2642
		END
		else if @fromUOM = 'L/min' AND @toUOM = 'm3/min'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.001
		END
		else if @fromUOM = 'L/min' AND @toUOM = 'ft3/min'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.03531
		END
		
		else if @fromUOM = 'ft3/min' AND @toUOM = 'gpm'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 7.481
		END
		else if @fromUOM = 'ft3/min' AND @toUOM = 'm3/min'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 0.02832
		END
		else if @fromUOM = 'ft3/min' AND @toUOM = 'L/min'
		BEGIN
			set @fValue = dbo.NumCheck(@value) * 28.32
		END

		else
		BEGIN
			set @fValue = dbo.NumCheck(@value)
		END
	END
	RETURN Round(@fValue,2)
END

GO
/****** Object:  UserDefinedFunction [dbo].[WeightConvert]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[WeightConvert](@value varchar(100), @fromUOM varchar(5), @toUOM varchar(5))
RETURNS float
AS
BEGIN
	DECLARE @fValue float
	IF @value IS NOT NULL
	BEGIN
		if @fromUOM = 'lb' AND @toUOM = 'klb'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) / 1000) 
		END
		else if @fromUOM = 't' AND @toUOM = 'klb'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 0.5)
		END
		else if @fromUOM = 'gm' AND @toUOM = 'klb'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 453592.37)
		END
		else if @fromUOM = 'kg' AND @toUOM = 'klb'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 453.59237)
		END
		else if @fromUOM = 'lb' AND @toUOM = 'kg'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 0.45359237)
		END
		else if @fromUOM = 'klb' AND @toUOM = 'kg'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 0.00045359237)
		END
		else if @fromUOM = 't' AND @toUOM = 'kg'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 907.18474)
		END
		else if @fromUOM = 'gm' AND @toUOM = 'kg'
		BEGIN
			set @fValue = (dbo.NumCheck(@value) * 0.001)
		END
		else
		BEGIN
			set @fValue = dbo.NumCheck(@value)
		END
	END
	RETURN Round(@fValue,2)
END

GO
/****** Object:  Table [dbo].[RelBusinessIntelligenceDataSet]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RelBusinessIntelligenceDataSet](
	[RunId] [uniqueidentifier] NOT NULL,
	[RunYear] [int] NOT NULL,
	[RunMonth] [tinyint] NOT NULL,
	[RunMonthName] [varchar](15) NOT NULL,
	[Quarter] [varchar](2) NOT NULL,
	[MonthYear] [varchar](25) NOT NULL,
	[Region] [varchar](30) NULL,
	[Country] [varchar](30) NULL,
	[District] [varchar](30) NULL,
	[CustomerID] [uniqueidentifier] NULL,
	[Hemisphere] [varchar](50) NULL,
	[RegionDesc] [varchar](50) NULL,
	[DistrictDesc] [varchar](50) NULL,
	[CustomerName] [varchar](50) NULL,
	[JobNumber] [varchar](50) NOT NULL,
	[Rig] [varchar](50) NULL,
	[TFF] [tinyint] NOT NULL,
	[CSI] [tinyint] NOT NULL,
	[NCI] [tinyint] NOT NULL,
	[OS] [tinyint] NOT NULL,
	[PR] [tinyint] NOT NULL,
	[Others] [tinyint] NULL,
	[GFA] [tinyint] NULL,
	[NonTFFRun] [tinyint] NULL,
	[NPT] [float] NULL,
	[NPTRun] [tinyint] NULL,
	[NonNPTRun] [tinyint] NULL,
	[NPTRunNoTFF] [tinyint] NULL,
	[CIRunNoNPT] [tinyint] NULL,
	[GoodRun] [tinyint] NULL,
	[B2B] [tinyint] NOT NULL,
	[MaxTempF] [float] NOT NULL,
	[MaxTempWindowF] [varchar](10) NULL,
	[MaxTempC] [float] NOT NULL,
	[MaxTempWindowC] [varchar](10) NULL,
	[OperHrs] [float] NOT NULL,
	[CircHrs] [float] NOT NULL,
	[DrillHrs] [float] NOT NULL,
	[CircHrsWindow] [varchar](10) NULL,
	[Less30CircHrEvents] [tinyint] NULL,
	[Less30CircHr] [float] NULL,
	[LWD] [tinyint] NOT NULL,
	[HELEM] [tinyint] NOT NULL,
	[EM] [tinyint] NOT NULL,
	[PP] [tinyint] NOT NULL,
	[RSS] [tinyint] NOT NULL,
	[MotorWFT] [tinyint] NULL,
	[RentalMotor] [tinyint] NOT NULL,
	[AllMWD] [tinyint] NOT NULL,
	[BECFIELD] [tinyint] NOT NULL,
	[TENSOR] [tinyint] NOT NULL,
	[GEOLINK] [tinyint] NOT NULL,
	[Well] [varchar](50) NOT NULL,
	[RunNumber] [varchar](50) NOT NULL,
	[RunNumberCnt] [tinyint] NOT NULL,
	[OffShore] [bit] NULL,
	[InHoleDate] [datetime] NOT NULL,
	[EndDate] [datetime] NOT NULL,
	[OutHoleDate] [datetime] NOT NULL,
	[TFFToolString] [varchar](50) NULL,
	[TFFComponentID] [int] NULL,
	[TFFComponent] [varchar](100) NULL,
	[TFFComponentDesc] [varchar](100) NULL,
	[TFFSerialNumber] [varchar](50) NULL,
	[Greater30HrsNPTEvents] [tinyint] NULL,
	[Greater30HrNPTHrs] [float] NULL,
	[Is3030] [tinyint] NULL,
	[Non3030] [tinyint] NULL,
	[RMReportStatus] [varchar](20) NULL,
	[MDStart] [float] NULL,
	[MDEnd] [float] NULL,
	[MDEndWindow] [varchar](15) NULL,
	[MDDistance] [float] NULL,
	[TVDStart] [float] NULL,
	[TVDEnd] [float] NULL,
	[HoleSize] [float] NULL,
	[HoleSizeWindow] [varchar](15) NULL,
	[MaxHydrostaticPressure] [float] NULL,
	[MaxOperPressure] [float] NULL,
	[MaxObservedPressure] [float] NULL,
	[MudDensity] [float] NULL,
	[BaseFluidEnd] [varchar](30) NULL,
	[MaxDoglegRotating] [float] NULL,
	[MaxDoglegRotatingWindow] [varchar](5) NULL,
	[MaxDoglegSliding] [float] NULL,
	[MaxDoglegSlidingWindow] [varchar](5) NULL,
	[MaxInc] [float] NULL,
	[FlowRate] [float] NULL,
	[MotorSerialNumber] [varchar](50) NULL,
	[MotorSize] [float] NULL,
	[MotorLength] [float] NULL,
	[MotorType] [varchar](50) NULL,
	[Manufacturer] [varchar](50) NULL,
	[LobesRS] [varchar](25) NULL,
	[MotorRPM] [float] NULL,
	[MotorOnBottom] [float] NULL,
	[MotorOffBottom] [float] NULL,
	[MotorDifferential] [float] NULL,
	[Tools] [varchar](500) NULL,
	[ToolSize] [float] NULL,
	[CountryDesc] [varchar](50) NULL,
	[FieldSymptom] [varchar](255) NULL,
	[FieldSymptom2] [varchar](255) NULL,
	[RSSFailureTFF] [tinyint] NOT NULL,
	[RSSFailureCSI] [tinyint] NOT NULL,
	[RSSNPTnonTFF] [float] NULL,
	[TotalRSSNPTTFF] [float] NULL,
	[RSSOT] [float] NULL,
	[LWDFailureTFF] [tinyint] NOT NULL,
	[LWDFailureCSI] [tinyint] NOT NULL,
	[LWDNPTTFF] [float] NULL,
	[LWDNPTnonTFF] [float] NULL,
	[TotalLWDNPT] [float] NULL,
	[LWDOT] [float] NULL,
	[CompFailureCode] [varchar](10) NULL,
	[CompFailureCodeDesc] [varchar](255) NULL,
	[OutOfSpecCode] [varchar](10) NULL,
	[OutOfSpecCodeDesc] [varchar](255) NULL,
	[OSNPT] [float] NULL,
	[ProceduralCode] [varchar](10) NULL,
	[ProceduralCodeDesc] [varchar](255) NULL,
	[PRModes] [varchar](10) NULL,
	[PRNPT] [float] NULL,
	[AverageROP] [float] NULL,
	[RunLeadEngineers] [varchar](300) NULL,
	[RunEngineers] [varchar](500) NULL,
	[Pulser (AES)] [tinyint] NOT NULL,
	[Driver Insert] [tinyint] NOT NULL,
	[IDS] [tinyint] NOT NULL,
	[Gamma Ray Insert] [tinyint] NOT NULL,
	[HAGR] [tinyint] NOT NULL,
	[SAGR] [tinyint] NOT NULL,
	[LWDGammaCombine] [tinyint] NULL,
	[MFR Collar] [tinyint] NOT NULL,
	[Azimuthal MFR] [tinyint] NOT NULL,
	[MFRCombine] [tinyint] NULL,
	[Neutron Insert] [tinyint] NOT NULL,
	[Density Insert] [tinyint] NOT NULL,
	[NeutronDensityCombine] [tinyint] NULL,
	[Collar, SST Sensor] [tinyint] NOT NULL,
	[BAP Insert] [tinyint] NOT NULL,
	[Battery High Temp] [tinyint] NOT NULL,
	[Battery IBM] [tinyint] NOT NULL,
	[Battery Low Temp] [tinyint] NOT NULL,
	[Battery Medium Temp] [tinyint] NOT NULL,
	[LWDBatteryCombine] [tinyint] NULL,
	[Battery, Formation Tester] [tinyint] NOT NULL,
	[Bias Unit] [tinyint] NOT NULL,
	[Controller Insert] [tinyint] NOT NULL,
	[Collar, Formation Tester] [tinyint] NOT NULL,
	[Compensation Assembly] [tinyint] NOT NULL,
	[TVM] [tinyint] NOT NULL,
	[LWDDirOnly] [varchar](10) NULL,
	[LWDDirGam] [varchar](10) NULL,
	[LWDDirGamMFRCombo] [varchar](10) NULL,
	[LWDTripleCombo] [varchar](10) NULL,
	[LWDQuadCombo] [varchar](10) NULL,
	[MWD Pulser (AES)] [tinyint] NOT NULL,
	[MWD Pulser 2"] [tinyint] NOT NULL,
	[MWDPulserCombine] [tinyint] NULL,
	[Control Module Sonde] [tinyint] NOT NULL,
	[BTR] [tinyint] NOT NULL,
	[CDS] [tinyint] NOT NULL,
	[CDST (Clever Deviation Sonde Top Mounted)] [tinyint] NOT NULL,
	[GRG4] [tinyint] NOT NULL,
	[Oriented Gamma Ray] [tinyint] NOT NULL,
	[UGR] [tinyint] NOT NULL,
	[MWDGammaCombine] [tinyint] NULL,
	[MWD Battery High Temp] [tinyint] NOT NULL,
	[MWD Battery Low Temp] [tinyint] NOT NULL,
	[MWDBatteryCombine] [tinyint] NULL,
	[CSGX] [tinyint] NOT NULL,
	[Gabis] [tinyint] NOT NULL,
	[Gabis Battery] [tinyint] NOT NULL,
	[Inclination Sonde] [tinyint] NOT NULL,
	[EMDirOnly] [tinyint] NULL,
	[EMDirGam] [tinyint] NULL,
	[PPDirOnly] [tinyint] NULL,
	[PPDirGam] [tinyint] NULL,
	[TotalComponentCount] [tinyint] NOT NULL,
	[TotalCSICount] [tinyint] NOT NULL,
	[TotalNCICount] [tinyint] NOT NULL,
	[SolidPercentageMax] [float] NULL,
	[SandPercentageMax] [float] NULL,
	[WaterPercentageMax] [float] NULL,
	[OilPercentageMax] [float] NULL,
	[pHMax] [float] NULL,
	[RotatingHrs] [float] NULL,
	[ReasonsForPooh] [varchar](2000) NULL,
	[WaterDepth] [int] NULL,
	[BitDeltaP] [float] NULL,
	[WeightOnBit] [float] NULL,
	[Torque] [float] NULL,
	[SurfaceRPM] [float] NULL,
	[UnderBalanced] [varchar](3) NULL,
	[GasFlowRate] [float] NULL,
	[SPP] [float] NULL,
	[OrificeSize] [varchar](30) NULL,
	[Latitude] [varchar](50) NULL,
	[Longitude] [varchar](50) NULL,
	[LocationCountry] [varchar](50) NULL,
	[LocationState] [varchar](50) NULL,
	[LocationCounty] [varchar](50) NULL,
	[MotorFailureTFF] [tinyint] NULL,
	[MotorFailureCSI] [tinyint] NULL,
	[MotorNPTTFF] [float] NULL,
	[EMFailureTFF] [tinyint] NULL,
	[EMFailureCSI] [tinyint] NULL,
	[EMNPTTFF] [float] NULL,
	[PPFailureTFF] [tinyint] NULL,
	[PPFailureCSI] [tinyint] NULL,
	[PPNPTTFF] [float] NULL,
	[MWDFailureTFF] [tinyint] NULL,
	[MWDFailureCSI] [tinyint] NULL,
	[MWDNPTTFF] [float] NULL,
	[MWDOT] [float] NULL,
	[EMOT] [float] NULL,
	[HPOT] [float] NULL,
	[MotorOT] [float] NULL,
	[IncidentId] [uniqueidentifier] NULL,
	[IncidentNumber] [varchar](50) NULL,
	[FaultCodeLevelOne] [varchar](10) NULL,
	[FaultCodeDescLevelOne] [varchar](255) NULL,
	[FaultCodeLevelTwo] [varchar](10) NULL,
	[FaultCodeDescLevelTwo] [varchar](255) NULL,
	[FaultCodeLevelThree] [varchar](10) NULL,
	[FaultCodeDescLevelThree] [varchar](255) NULL,
	[FieldSummary] [varchar](5000) NULL,
	[FieldSymptomSummary] [varchar](5000) NULL,
	[LoadDate] [datetime] NOT NULL,
	[PulseCount] [int] NULL,
	[RSSRevolutions] [float] NULL,
	[GWD] [tinyint] NULL,
	[Crosswave] [tinyint] NULL,
	[CasingLink] [tinyint] NULL,
	[VMS] [tinyint] NULL,
	[DualIDS] [tinyint] NULL,
	[DualPulser] [tinyint] NULL,
	[ExtendedRange] [tinyint] NULL,
	[WPR] [tinyint] NULL,
	[DLC] [tinyint] NULL,
	[AdjustableGaugeStabilizer] [tinyint] NULL,
	[TBSMotorySteerable] [tinyint] NULL,
	[Geosteering] [tinyint] NULL,
	[RTOCMonitoring] [tinyint] NULL,
	[HeatWave] [tinyint] NOT NULL,
	[HEX] [tinyint] NOT NULL,
	[WptsReportId] [int] NULL,
	[SMI] [tinyint] NULL,
	[AGS] [tinyint] NULL,
	[EMTwinwells] [tinyint] NULL,
	[JobStartDate] [datetime] NULL,
	[JobEndDate] [datetime] NULL,
	[JobEstEndDate] [datetime] NULL,
	[Criticality] [tinyint] NULL,
	[TOTALRSSNPT] [float] NULL,
	[X] [varchar](50) NULL,
	[Y] [varchar](50) NULL,
	[RssMagnus] [int] NULL,
	[WptsCparId] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[RunId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ToolStrings]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ToolStrings](
	[ToolStringId] [uniqueidentifier] NOT NULL,
	[SerialNumber] [varchar](50) NOT NULL,
	[Description] [varchar](50) NOT NULL,
	[CreatedBy] [tinyint] NOT NULL,
	[SizeId] [int] NULL,
	[ToolYear] [smallint] NULL,
	[District] [varchar](12) NULL,
	[BuildNumber] [nvarchar](6) NULL,
	[ToolMod] [varchar](5) NULL,
	[Disassembled] [bit] NULL,
	[DisassembledDate] [datetime] NULL,
	[CheckSum] [varchar](15) NULL,
	[Type] [varchar](20) NULL,
	[Length] [float] NULL,
	[LengthUOM] [varchar](10) NULL,
	[CollarID] [float] NULL,
	[CollarIDUOM] [varchar](10) NULL,
	[CollarOD] [float] NULL,
	[CollarODUOM] [varchar](10) NULL,
	[StabilizerBladeOD] [float] NULL,
	[StabilizerBladeODUOM] [varchar](20) NULL,
	[ConnectionTypeTop] [varchar](30) NULL,
	[ConnectionTypeBottom] [varchar](30) NULL,
	[KitNumber] [int] NULL,
	[IsLatestKitNumber] [tinyint] NULL,
	[IsTurnaround] [tinyint] NULL,
	[MotorType] [varchar](15) NULL,
	[MotorProperty] [varchar](30) NULL,
	[WorkOrderNum] [varchar](15) NULL,
	[MotorSerial] [varchar](50) NULL,
	[ConnectionTopSize] [float] NULL,
	[ConnectionTopSizeUOM] [varchar](5) NULL,
	[ConnectionBottomSize] [float] NULL,
	[ConnectionBottomSizeUOM] [varchar](5) NULL,
	[Service] [varchar](25) NULL,
	[BearingPackConfig] [varchar](50) NULL,
	[PowerSectionConfig] [varchar](50) NULL,
	[RMManufacturer] [varchar](20) NULL,
	[RMType] [varchar](20) NULL,
	[RMMidBodyStabSize] [float] NULL,
	[RMSerialNum] [varchar](25) NULL,
	[RMLobes] [varchar](10) NULL,
	[RMStages] [varchar](10) NULL,
	[CreateDate] [datetime] NOT NULL,
	[CreateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[EDP] [varchar](30) NULL,
	[LegacyCheckSum] [varchar](15) NULL,
	[Comments] [varchar](500) NULL,
	[ProductLineId] [int] NULL,
	[TemplateId] [int] NULL,
	[MasterTemplateID] [int] NULL,
	[Status] [tinyint] NULL,
	[Name] [varchar](100) NULL,
	[IsLocked] [bit] NULL,
	[LockedBy] [int] NULL,
 CONSTRAINT [PK_ToolStrings] PRIMARY KEY CLUSTERED 
(
	[ToolStringId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PartTypes]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PartTypes](
	[PartTypeId] [int] NULL,
	[Name] [varchar](100) NULL,
	[ShortName] [varchar](3) NULL,
	[Description] [varchar](250) NULL,
	[Occurrence] [int] NOT NULL,
	[HEL_LWD] [bit] NOT NULL,
	[HEL_EM] [bit] NOT NULL,
	[RSS] [bit] NOT NULL,
	[EM] [bit] NOT NULL,
	[EM_TWINWELLS] [bit] NOT NULL,
	[HYPERPULSE] [bit] NOT NULL,
	[AGS] [bit] NOT NULL,
	[BECFIELD] [bit] NOT NULL,
	[DMT_AMS] [bit] NOT NULL,
	[GEOLINK] [bit] NOT NULL,
	[GWD] [bit] NOT NULL,
	[TENSOR] [bit] NOT NULL,
	[WPR] [bit] NOT NULL,
	[MOTOR] [bit] NOT NULL,
	[SURFACE] [bit] NOT NULL,
	[Primary] [bit] NOT NULL,
	[Accountable] [varchar](20) NULL,
	[IsValidated] [char](1) NOT NULL,
	[IsDeleted] [bit] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ToolStringComponentInfo]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ToolStringComponentInfo](
	[ToolStringInfoID] [uniqueidentifier] NOT NULL,
	[ToolStringID] [uniqueidentifier] NOT NULL,
	[FixedAssetID] [uniqueidentifier] NULL,
	[SerialNum] [varchar](30) NULL,
	[RNItemNum] [varchar](30) NULL,
	[InventoryItemNum] [varchar](30) NULL,
	[PartTypeID] [int] NULL,
	[RunID] [uniqueidentifier] NULL,
	[IncidentID] [uniqueidentifier] NULL,
	[EndingOperHrs] [varchar](50) NULL,
	[EndingCircHrs] [varchar](50) NULL,
	[EndingDrillHrs] [varchar](50) NULL,
	[BitRunValveCycles] [varchar](50) NULL,
	[CumulativeValveCycles] [varchar](50) NULL,
	[FailureDesc] [text] NULL,
	[IsUsed] [bit] NULL,
	[StatusCodeID] [tinyint] NULL,
	[GlobalStatusCodeID] [tinyint] NULL,
	[CorrectiveAction] [varchar](3100) NULL,
	[FieldSymptom] [varchar](255) NULL,
	[LostTime] [varchar](10) NULL,
	[TFF] [bit] NOT NULL,
	[CSI] [bit] NOT NULL,
	[NCI] [bit] NOT NULL,
	[OS] [bit] NOT NULL,
	[PR] [bit] NOT NULL,
	[FA] [bit] NOT NULL,
	[RC] [bit] NOT NULL,
	[CN] [bit] NOT NULL,
	[IncidentDate] [datetime] NULL,
	[CompFailureCodeID] [uniqueidentifier] NULL,
	[OutOfSpecCodeID] [uniqueidentifier] NULL,
	[ProceduralCodeID] [uniqueidentifier] NULL,
	[TIPFT] [varchar](30) NULL,
	[ArtNumber] [varchar](30) NULL,
	[FailedNonPartName] [varchar](50) NULL,
	[Revision] [varchar](2) NULL,
	[ToolCode] [varchar](40) NULL,
	[MasterFirmwareRevision] [varchar](12) NULL,
	[FailedNonPartType] [varchar](20) NULL,
	[CustomProperty] [varchar](128) NULL,
	[LastUpdatedOn] [datetime] NULL,
 CONSTRAINT [PK_ToolStringComponentInfo] PRIMARY KEY CLUSTERED 
(
	[ToolStringInfoID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ToolStringSize]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ToolStringSize](
	[ToolSizeID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[ShortName] [varchar](6) NULL,
	[Size] [varchar](20) NOT NULL,
	[IsTool] [bit] NOT NULL,
	[IsMotor] [bit] NOT NULL,
 CONSTRAINT [PK_ToolStringSize] PRIMARY KEY CLUSTERED 
(
	[ToolSizeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwToolStringAnalysisExport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwToolStringAnalysisExport]
AS
SELECT bi.runid, 
       t1.serialnumber, 
       bi.customername, 
       bi.well, 
       t1.type, 
       b.productline, 
       a.toolstringtype, 
       a.size, 
       bi.operhrs, 
       bi.circhrs, 
       bi.drillhrs, 
       bi.inholedate, 
       bi.outholedate, 
       bi.region, 
       bi.districtdesc, 
       bi.MDDistance, 
       bi.maxtempc, 
       c1.istff, 
       c1.iscsi, 
       c1.npthrs, 
       bi.motorwft, 
       bi.jobnumber, 
       e.serialnum, 
       e.NAME, 
       bi.offshore, 
       bi.holesize, 
       bi.LoadDate [LastModifiedDate],
	   bi.WPTSReportId
FROM   relbusinessintelligencedataset bi 
       LEFT JOIN toolstringcomponentinfo c 
              ON c.runid = bi.runid 
       LEFT JOIN toolstrings t1 
              ON t1.toolstringid = c.toolstringid 
       LEFT JOIN (SELECT t.toolstringid, 
                         t.serialnumber, 
                         ts.size, 
						 tc.runid,
                         CASE /*Case for Tool String Type*/ 
                           /*LWD Tool Strings*/ 
							WHEN t.type = 'HEL/LWD' and substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%p%' THEN 'HEL' 
							WHEN t.type = 'HEL/LWD' and substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%d%' THEN 'HEL' 
							WHEN t.type = 'HEL/LWD' and substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%n%' THEN 'NDT'
							WHEN t.type = 'HEL/LWD' and substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%z%' THEN 'NDT'
							WHEN t.type = 'HEL/LWD' and substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%A%' THEN 'Shockwave'



							WHEN t.type = 'HEL/LWD' and substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%F%' THEN 'Pressurewave'
							WHEN t.type = 'HEL/LWD' and substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%J%' THEN 'Spectralwave'
							WHEN t.type = 'HEL/LWD' and substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%O%' THEN 'Sinewave'





							WHEN t.type = 'HEL/LWD' and (substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%R%') 
								AND (substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) LIKE '%G%') THEN 'MFR GAMMA'
							WHEN t.type = 'HEL/LWD' and substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%R%' THEN 'MFR no Gamma'
							WHEN t.type = 'HEL/LWD' and substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%I%' THEN 'HEL'
							WHEN t.type = 'HEL/LWD' and substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%W%' THEN 'Guidewave'



							WHEN t.type = 'HEL/LWD' and substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%U%' THEN 'UWI'
							
							/*RSS Tool Strings*/
							WHEN (t.type = 'RSS' and substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%X%') 
									and (tc.ToolCode = 'bias4' OR tc.ToolCode ='bias6' OR tc.ToolCode ='bias10' OR tc.ToolCode ='bias8') THEN 'Mk 3 RSS Tool'
							WHEN (t.type = 'RSS' and substring(substring(t.serialnumber,3,100),0,case when charindex('-', substring(t.serialnumber,3,100),0) = 0 then len(t.serialnumber) else charindex('-', substring(t.serialnumber,3,100),0) end) like '%X%')
									and (tc.ToolCode = 'BIAS6 (MK4)' OR tc.ToolCode ='BIAS64' OR tc.ToolCode ='BIAS64 (MK4+)' oR tc.ToolCode ='BIAS64 (MK4+H)' or tc.ToolCode ='BIAS9'  ) THEN 'Mk 4 RSS Tool'

							/**motorized RSS*/

							/*Other Tool Strings*/
							WHEN t.type = 'SURFACE'  THEN 'Surface'
							WHEN t.type = 'Motor'  THEN 'Motor'
							WHEN t.type = 'hyperpulse'  THEN 'Hyperpulse'
							WHEN t.type = 'EM'  THEN 'EM'
							WHEN t.type = 'HEL/EM'  THEN 'HEL/EM'
							WHEN t.type = 'AGS'  THEN 'AGS'
							when t.Type = 'WPR' then 'WPR'
							when t.Type = 'GWD' then 'GWD'
							when t.type= 'BECFIELD' then 'BECFIELD'
							when t.type= 'DMT/AMS' then 'DMT/AMS'
							ELSE '' END AS ToolStringType 

                  FROM   toolstrings t 
                         LEFT JOIN toolstringsize ts 
                                ON ts.toolsizeid = t.sizeid 
                         LEFT JOIN toolstringcomponentinfo tc 
                                ON tc.toolstringid = t.toolstringid
					GROUP BY t.toolstringid,
                         t.serialnumber, 
                         ts.size, 
						 tc.runid, t.Type, tc.ToolCode) a 
              ON a.serialnumber = t1.serialnumber and a.runid = bi.RunId AND ISNULL(a.ToolStringType,'') != ''
       LEFT JOIN (SELECT toolstringid, 
                         t.serialnumber, 
                         ts.size, 
                         CASE /*case to determine product line*/ 
                           WHEN t.type = 'Hel/LWD' THEN 'LWD' 
                           WHEN t.type = 'AGS' THEN 'DD' 
                           WHEN t.type = 'CMP' THEN 'MWD' 
                           WHEN t.type = 'EM' THEN 'MWD' 
                           WHEN t.type = 'EM/HYPERPULSE' THEN 'MWD' 
                           WHEN t.type = 'GEOLINK' THEN 'MWD' 
                           WHEN t.type = 'GWD' THEN 'LWD' 
                           WHEN t.type = 'HEL/EM' THEN 'MWD' 
                           WHEN t.type = 'HYPERPULSE' THEN 'MWD' 
                           WHEN t.type = 'ML' THEN 'DD' 
                           WHEN t.type = 'MOTOR' THEN 'DD' 
                           WHEN t.type = 'RSS' THEN 'RSS' 
                           WHEN t.type = 'SURFACE' THEN 'MWD' 
                           WHEN t.type = 'Tensor' THEN 'MWD' 
                           WHEN t.type = 'WPR' THEN 'MWD' 
                           WHEN t.type = 'BECFIELD' THEN 'MWD' 
                           WHEN t.type = 'DMT/AMS' THEN 'MWD' 
                           ELSE '' 
                         END AS productline 
                  FROM   toolstrings t 
                         LEFT JOIN toolstringsize ts 
                                ON ts.toolsizeid = t.sizeid) b 
     ON b.serialnumber = t1.serialnumber 
    LEFT JOIN (SELECT toolstringid, 
						runid, 
                         Max(CONVERT(INT, tff))                 [IsTFF], 
                         Max(CONVERT(INT, csi))                 [IsCSI], 
                         Sum(CONVERT(DECIMAL(18, 5), losttime)) [NPTHrs] 
                  FROM   toolstringcomponentinfo 
                  WHERE  Isnumeric(losttime) = 1 
                  GROUP  BY toolstringid, 
                            runid) c1 
              ON t1.toolstringid = c1.toolstringid and c1.RunID = bi.RunId
       LEFT JOIN (SELECT tc3.RunID, tc3.serialnum, 
                         pts.NAME, 
                         tc3.toolstringid 
                  FROM   toolstringcomponentinfo tc3 
                         LEFT JOIN parttypes pts 
                                ON pts.parttypeid = tc3.parttypeid 
                  WHERE  tff = '1') E 
              ON e.toolstringid = t1.toolstringid and e.RunID = bi.RunId
WHERE  bi.outholedate >= '1-1-2014' 
GROUP  BY bi.runid, 
          bi.customername, 
          bi.well, 
          t1.serialnumber, 
          t1.type, 
          a.toolstringtype, 
          a.size, 
          bi.operhrs, 
          bi.circhrs, 
          bi.drillhrs, 
          bi.inholedate, 
          outholedate, 
          bi.region, 
          bi.districtdesc, 
          bi.mddistance, 
          b.productline, 
          bi.maxtempc, 
          c1.istff, 
          c1.iscsi, 
          c1.npthrs, 
          bi.motorwft, 
          bi.jobnumber, 
          E.serialnum, 
          e.NAME, 
          bi.offshore, 
          bi.holesize,
		  bi.LoadDate,
		  bi.WPTSReportId
GO
/****** Object:  View [dbo].[vwRelBusinessIntelligenceAPI]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwRelBusinessIntelligenceAPI] AS
SELECT RunID
, IncidentID
, RunYear
, RunMonth
, RunMonthName
, Quarter
, Hemisphere
, RegionDesc
, DistrictDesc
, CustomerName
, JobNumber
, Rig
, TFF
, CSI
, NCI
, OS
, PR
, Others
, GFA
, NPT
, NPTRun
, CIRunNoNPT
, GoodRun
, B2B
, MaxTempF
, MaxTempWindowF
, MaxTempC
, MaxTempWindowC
, OperHrs
, CircHrs
, DrillHrs
, CircHrsWindow
, LWD
, EM
, PP
, RSS
, MotorWFT
, Well
, RunNumber
, OffShore
, InHoleDate
, OutHoleDate
, TFFToolString
, TFFComponent
, TFFComponentDesc
, TFFSerialNumber
, Is3030
, RMReportStatus
, MDStart
, MDEnd
, MDEndWindow
, MDDistance
, TVDStart
, TVDEnd
, HoleSize
, HoleSizeWindow
, MaxHydrostaticPressure
, MaxOperPressure
, MaxObservedPressure
, MudDensity
, BaseFluidEnd
, MaxDoglegRotating
, MaxDoglegRotatingWindow
, MaxDoglegSliding
, MaxDoglegSlidingWindow
, MaxInc
, FlowRate
, MotorSerialNumber
, MotorSize
, MotorLength
, MotorType
, Manufacturer
, LobesRS
, MotorRPM
, MotorOnBottom
, MotorOffBottom
, MotorDifferential
, Tools
, ToolSize
, CountryDesc
, FieldSymptom2
, RSSFailureTFF
, RSSFailureCSI
, RSSNPTnonTFF
, TotalRSSNPTTFF
, RSSOT
, LWDFailureTFF
, LWDFailureCSI
, LWDNPTTFF
, LWDNPTnonTFF
, TotalLWDNPT
, LWDOT
, CompFailureCode
, CompFailureCodeDesc
, OutOfSpecCode
, OutOfSpecCodeDesc
, OSNPT
, ProceduralCode
, ProceduralCodeDesc
, PRModes
, PRNPT
, AverageROP
, RunLeadEngineers
, RunEngineers
, TotalComponentCount
, TotalCSICount
, TotalNCICount
, RentalMotor
, MotorFailureTFF
, MotorNPTTFF
, EMFailureTFF
, EMNPTTFF
, PPFailureTFF
, PPNPTTFF
, MWDFailureTFF
, MWDNPTTFF
, MWDOT
, EMOT
, HPOT
, MotorOT
, IncidentNumber
, FieldSummary
, FieldSymptomSummary
, FaultCodeLevelOne
, FaultCodeDescLevelOne
, FaultCodeLevelTwo
, FaultCodeDescLevelTwo
, FaultCodeLevelThree
, FaultCodeDescLevelThree
, LoadDate
FROM RelBusinessIntelligenceDataSet WITH(NOLOCK)


GO
/****** Object:  Table [dbo].[ItemNums]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ItemNums](
	[ItemNumId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[ItemNum2] [varchar](30) NULL,
	[ItemNum3] [varchar](30) NULL,
	[LegacyNum] [varchar](30) NULL,
	[DescShort] [varchar](60) NULL,
	[DescLong] [varchar](255) NULL,
	[DefaultUOM] [varchar](2) NULL,
	[PartClassification] [varchar](512) NULL,
	[Revision] [varchar](20) NULL,
	[DescDocNum] [varchar](20) NULL,
	[ToolPanel] [varchar](30) NULL,
	[ToolCode] [varchar](30) NULL,
	[PartCode] [varchar](30) NULL,
	[Critical] [bit] NULL,
	[IsObsolete] [bit] NOT NULL,
	[IsRestrictPurchasing] [bit] NOT NULL,
	[IsAsset] [bit] NOT NULL,
	[DefaultSerialProfile] [varchar](1) NULL,
	[StockType] [varchar](1) NULL,
	[ProductLine] [varchar](30) NULL,
	[ServiceLine] [varchar](30) NULL,
	[PartTypeId] [int] NULL,
	[Active] [bit] NOT NULL,
	[LastEdit] [datetime] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[TEROrderMultiple] [int] NOT NULL,
	[IsHazMat] [varchar](1) NULL,
	[ToolPerJob] [int] NULL,
	[Size] [varchar](20) NULL,
	[JDEGLCode] [varchar](15) NULL,
	[StdUnitCost] [money] NULL,
	[DepreciationCost] [money] NULL,
	[NetWeight] [varchar](30) NULL,
	[EcnRestriction] [bit] NULL,
 CONSTRAINT [PK_ItemNums] PRIMARY KEY CLUSTERED 
(
	[ItemNumId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Regions]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Regions](
	[RegionId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Region] [varchar](25) NOT NULL,
	[RegionDesc] [varchar](50) NULL,
	[Latitude] [decimal](18, 4) NULL,
	[Longitude] [decimal](18, 4) NULL,
	[Active] [bit] NOT NULL,
	[LastEdit] [datetime] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[Hemisphere] [varchar](25) NULL,
 CONSTRAINT [PK_Regions] PRIMARY KEY CLUSTERED 
(
	[RegionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Countries]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Countries](
	[CountryId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Country] [varchar](25) NOT NULL,
	[CountryDesc] [varchar](50) NULL,
	[Latitude] [decimal](18, 4) NULL,
	[Longitude] [decimal](18, 4) NULL,
	[Active] [bit] NOT NULL,
	[LastEdit] [datetime] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[RegionCode] [varchar](25) NULL,
 CONSTRAINT [PK_Countries] PRIMARY KEY CLUSTERED 
(
	[CountryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ShipmentRequestFormDetails]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ShipmentRequestFormDetails](
	[ShipmentRequestFormDetailId] [int] IDENTITY(1,1) NOT NULL,
	[ShipmentRequestFormId] [int] NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[Qty] [int] NOT NULL,
	[IsReturn] [bit] NULL,
	[RequestFormDetailId] [int] NULL,
	[CustomsInvoiceId] [uniqueidentifier] NULL,
	[IsActive] [bit] NOT NULL,
	[IsComplete] [bit] NOT NULL,
	[NewUse] [varchar](3) NULL,
	[InvoiceNumber] [varchar](30) NULL,
	[S9Number] [varchar](30) NULL,
 CONSTRAINT [PK_ShipmentRequestFormDetails] PRIMARY KEY CLUSTERED 
(
	[ShipmentRequestFormDetailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SelectOptions]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SelectOptions](
	[SelectOptionId] [uniqueidentifier] NOT NULL,
	[SelectName] [varchar](50) NOT NULL,
	[OptionValue] [varchar](100) NOT NULL,
	[OptionLabel] [varchar](50) NOT NULL,
	[SortOrder] [int] NULL,
	[Attribute1] [varchar](1000) NULL,
	[Attribute2] [varchar](255) NULL,
	[Attribute3] [varchar](255) NULL,
 CONSTRAINT [PK_SelectOptions] PRIMARY KEY CLUSTERED 
(
	[SelectOptionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BranchPlants]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BranchPlants](
	[BranchPlantId] [uniqueidentifier] NOT NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[MCDL01] [varchar](30) NULL,
	[CompanyName] [varchar](50) NOT NULL,
	[Description] [varchar](150) NULL,
	[BaseCode] [varchar](25) NULL,
	[RelBaseCode] [varchar](10) NULL,
	[SAPFuncLoc] [varchar](50) NULL,
	[County] [varchar](25) NULL,
	[City] [varchar](10) NULL,
	[StateProvince] [varchar](3) NULL,
	[Country] [varchar](25) NULL,
	[ZipCode] [varchar](12) NULL,
	[Region] [varchar](25) NULL,
	[Hemisphere] [varchar](25) NULL,
	[IsOps] [bit] NOT NULL,
	[IsManufacturing] [bit] NOT NULL,
	[IsRepair] [bit] NOT NULL,
	[IsGlobalRepair] [bit] NOT NULL,
	[Latitude] [decimal](18, 4) NULL,
	[Longitude] [decimal](18, 4) NULL,
	[Active] [bit] NOT NULL,
	[LastEdit] [datetime] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[IsNonLiveLocation] [bit] NOT NULL,
	[IsRemovedFromAR] [bit] NULL,
	[WptsWFDLocationId] [int] NULL,
	[WptsRegionId] [int] NULL,
	[WptsCountryId] [int] NULL,
	[IsOperationsBillableLocation] [bit] NOT NULL,
	[CurrencyCode] [varchar](3) NULL,
	[IsSuperCenter] [bit] NOT NULL,
 CONSTRAINT [PK_BranchPlants] PRIMARY KEY CLUSTERED 
(
	[BranchPlantId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ShipmentRequestForms]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ShipmentRequestForms](
	[ShipmentRequestformId] [int] IDENTITY(1,1) NOT NULL,
	[FromBranchPlant] [varchar](25) NOT NULL,
	[ToBranchPlant] [varchar](25) NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[RequiredDate] [datetime] NULL,
	[CreatedUserName] [varchar](100) NULL,
	[Notes] [varchar](4000) NULL,
	[ShipmentMethod] [varchar](100) NULL,
	[Customer] [varchar](256) NULL,
	[Project] [varchar](256) NULL,
	[LocalRefNumber] [varchar](256) NULL,
	[Status] [int] NULL,
	[RequestFormId] [int] NULL,
	[Comments] [varchar](4000) NULL,
	[LastEdit] [datetime] NULL,
	[LastEditUserName] [varchar](100) NULL,
	[ProcessToShipmentDate] [datetime] NULL,
	[ProcessToShipmentUserName] [varchar](100) NULL,
	[LocalApprovalNumber] [varchar](256) NULL,
	[IsComplete] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[Urgency] [varchar](128) NULL,
	[DispatchId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_ShipmentRequestForm] PRIMARY KEY CLUSTERED 
(
	[ShipmentRequestformId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RequestForms]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RequestForms](
	[RequestFormId] [int] IDENTITY(1,1) NOT NULL,
	[FromBranchPlant] [varchar](12) NOT NULL,
	[ToBranchPlant] [varchar](12) NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[RequiredDate] [datetime] NULL,
	[CreatedUserName] [varchar](50) NULL,
	[Notes] [varchar](4000) NULL,
	[ShipmentMethod] [varchar](100) NULL,
	[Customer] [varchar](256) NULL,
	[Project] [varchar](256) NULL,
	[LocalRefNumber] [varchar](256) NULL,
	[Status] [int] NULL,
	[ToolPanel] [varchar](25) NULL,
	[LastEdit] [datetime] NULL,
	[LastEditUserName] [varchar](50) NULL,
	[DateSubmittedForApproval] [datetime] NULL,
	[ApprovalDate] [datetime] NULL,
	[ApprovalUserName] [varchar](100) NULL,
	[LocalApprovalNumber] [varchar](256) NULL,
	[IsComplete] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[IsArchived] [bit] NOT NULL,
	[JobNo] [varchar](255) NULL,
	[WellNo] [varchar](255) NULL,
	[Rig] [varchar](255) NULL,
	[CalledOutBy] [varchar](255) NULL,
	[CallOutDate] [datetime] NULL,
	[HoleSize] [varchar](50) NULL,
	[Temperature1] [varchar](50) NULL,
	[Temperature2] [varchar](50) NULL,
	[Temperature3] [varchar](50) NULL,
	[MWDLWDString] [varchar](255) NULL,
	[ShippedDate] [datetime] NULL,
	[ContactNumber] [varchar](255) NULL,
	[RequestItemGroupId] [int] NULL,
	[RequiredWithIn] [int] NULL,
	[ARL] [varchar](50) NULL,
	[RSTTemperature] [varchar](50) NULL,
	[LastViewDate] [datetime] NULL,
	[LastViewUserName] [varchar](255) NULL,
	[WellName] [varchar](255) NULL,
	[IsMotorised] [bit] NULL,
	[DateRequiredInCustom] [datetime] NULL,
	[IsForecasted] [bit] NULL,
	[NotRequiredBy] [varchar](50) NULL,
	[NotRequiredAt] [datetime] NULL,
	[NotRequiredComments] [varchar](256) NULL,
	[ArchiveDate] [datetime] NULL,
	[ArchiveOn] [datetime] NULL,
	[EstimatedDeliveryDate] [datetime] NULL,
	[CapitalRequiredFor] [varchar](50) NULL,
	[ArchivedUserName] [varchar](256) NULL,
	[UnArchivedUserName] [varchar](256) NULL,
 CONSTRAINT [PK_RequestForm] PRIMARY KEY CLUSTERED 
(
	[RequestFormId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwRequestFormSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwRequestFormSearch] as

SELECT     'AR-' + rf.ToBranchPlant + '-' + CAST(rf.RequestFormId AS varchar) AS RequestNumber, rf.RequestFormId, rf.FromBranchPlant, rf.ToBranchPlant, rf.CreateDate, 
                      rf.RequiredDate, rf.CreatedUserName, rf.Notes, rf.ShipmentMethod, rf.Customer, rf.Project, rf.LocalRefNumber, rf.LocalApprovalNumber, rf.Status,
                      rf.ToolPanel, rf.LastEdit, rf.LastEditUserName, rf.DateSubmittedForApproval, rf.ApprovalDate, rf.ApprovalUserName, rf.LastViewDate, rf.LastViewUserName, 
                      rf.IsComplete, rf.IsArchived, fl.CompanyName AS FromCompanyName, 
                      tl.CompanyName AS ToCompanyName, rfs.OptionValue as StatusDesc, rfs.OptionLabel as StatusName,
                      rf.DateRequiredInCustom, rf.IsForecasted, rf.NotRequiredBy, rf.NotRequiredAt, 
                      rf.NotRequiredComments, rf.ArchiveDate, rf.ArchiveOn, rf.HoleSize, rf.IsMotorised,rf.Temperature1,
                      case rf.IsComplete when '1' then 'Yes' else 'No' end as IsCompleteYesNo,
                      case rf.IsArchived when '1' then 'Yes' else 'No' end as IsArchivedYesNo,
                      case rf.IsMotorised when '1' then 'Yes' else 'No' end as IsMotorisedYesNo,
                      case rf.IsForecasted when '1' then 'Yes' else 'No' end as IsForecastedYesNo,
                      rf.IsActive,fr.RegionDesc AS FromRegion, tr.RegionDesc AS ToRegion, fc.CountryDesc AS FromCountry, tc.CountryDesc AS ToCountry,
                      STUFF (( SELECT DISTINCT ', ' + S9Number FROM ShipmentRequestFormDetails d (NOLOCK)
							LEFT JOIN ShipmentRequestForms s (NOLOCK) ON s.ShipmentRequestformId = d.ShipmentRequestFormId
							WHERE s.RequestFormId = rf.RequestFormId
						FOR XML PATH('')), 1, 1, '') AS S9Numbers
FROM RequestForms AS rf (NOLOCK) 
LEFT JOIN  BranchPlants AS fl (NOLOCK) ON fl.BranchPlant = rf.FromBranchPlant
LEFT JOIN  BranchPlants AS tl (NOLOCK) ON tl.BranchPlant = rf.ToBranchPlant 
LEFT JOIN  Regions AS fr (NOLOCK) ON fr.Region = fl.Region
LEFT JOIN  Regions AS tr (NOLOCK) ON tr.Region = tl.Region
LEFT JOIN  Countries AS fc (NOLOCK) ON fc.Country = fl.Country
LEFT JOIN  Countries AS tc (NOLOCK) ON tc.Country = tl.Country
LEFT JOIN  SelectOptions AS rfs (NOLOCK) ON rfs.SortOrder = rf.Status and rfs.SelectName = 'RequestFormStatus'




GO
/****** Object:  Table [dbo].[GLProductLineBranchPlantMappings]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GLProductLineBranchPlantMappings](
	[GLProductLineId] [int] NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[UpdatedBy] [varchar](10) NULL,
	[UpdatedOn] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PartStatus]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PartStatus](
	[PartStatusId] [int] IDENTITY(1,1) NOT NULL,
	[Status] [varchar](50) NOT NULL,
	[Code] [varchar](2) NOT NULL,
	[ErpStatusCode] [varchar](10) NULL,
	[IsSrcWorkOrder] [bit] NOT NULL,
	[IsDestWorkOrder] [bit] NOT NULL,
	[IsSrcWorkOrderChild] [bit] NOT NULL,
	[IsDestWorkOrderChild] [bit] NOT NULL,
	[IsSrcDispatch] [bit] NOT NULL,
	[IsDestDispatch] [bit] NOT NULL,
	[IsSrcAIRT] [bit] NOT NULL,
	[IsDestAIRT] [bit] NOT NULL,
	[IsSrcPFT] [bit] NOT NULL,
	[IsDestPFT] [bit] NOT NULL,
	[IsSrcBuildSheet] [bit] NOT NULL,
	[IsDestBuildSheet] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[IsAssigned] [bit] NOT NULL,
	[IsAvailable] [bit] NOT NULL,
	[IsDisposed] [bit] NOT NULL,
	[IsTesting] [bit] NOT NULL,
	[IsRepair] [bit] NOT NULL,
	[IsTransit] [bit] NOT NULL,
	[IsParked] [bit] NOT NULL,
	[IsOther] [bit] NOT NULL,
	[IsSrcStatus] [bit] NOT NULL,
	[IsDestStatus] [bit] NOT NULL,
	[IsInActive] [bit] NOT NULL,
	[IsTrend] [bit] NOT NULL,
 CONSTRAINT [PK_PartStatus] PRIMARY KEY CLUSTERED 
(
	[PartStatusId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RequestFormDetails]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RequestFormDetails](
	[RequestFormDetailId] [int] IDENTITY(1,1) NOT NULL,
	[RequestFormId] [int] NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[Qty] [int] NOT NULL,
	[QtyFilled] [int] NULL,
	[IsComplete] [bit] NOT NULL,
	[Comments] [varchar](4000) NULL,
	[SourceComments] [varchar](4000) NULL,
	[StandardCost] [decimal](18, 4) NULL,
	[ItemRequiredDate] [datetime] NULL,
	[DateCreated] [datetime] NULL,
	[CreatedBy] [varchar](50) NULL,
	[EstimatedDeliveryDateItem] [datetime] NULL,
	[CanSupply] [varchar](20) NULL,
	[EstimatedNumOfWeeks] [int] NULL,
	[CapitalRequiredForItem] [varchar](50) NULL,
	[RefRequestFormDetailId] [int] NULL,
	[CurrShortName] [varchar](3) NULL,
 CONSTRAINT [PK_RequestFormDetail] PRIMARY KEY CLUSTERED 
(
	[RequestFormDetailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FixedAssets]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FixedAssets](
	[FixedAssetId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[AssetNumber] [varchar](30) NULL,
	[Company] [varchar](5) NULL,
	[BranchPlant] [varchar](75) NULL,
	[FixedAssetBranchPlant] [varchar](75) NULL,
	[AssetDescription] [varchar](255) NULL,
	[ParentNumber] [varchar](260) NULL,
	[ParentFixedAssetId] [uniqueidentifier] NULL,
	[ManufacturersSerialNumber] [varchar](25) NULL,
	[BusinessUnit] [varchar](12) NULL,
	[RNItemNum] [varchar](30) NULL,
	[SerialNum] [varchar](50) NULL,
	[CurrentItemQty] [decimal](15, 2) NULL,
	[CurrencyCode] [varchar](3) NULL,
	[Cost] [decimal](15, 2) NULL,
	[AccumDepreciation] [decimal](15, 2) NULL,
	[NetBookValue] [decimal](15, 2) NULL,
	[ProductLineCode] [varchar](3) NULL,
	[UnitNumber] [varchar](12) NULL,
	[InventoryItemNum] [varchar](30) NULL,
	[LegacySerialNumber] [varchar](25) NULL,
	[AFENumber] [varchar](12) NULL,
	[State] [varchar](3) NULL,
	[ContractAccount] [varchar](25) NULL,
	[Ownership] [varchar](3) NULL,
	[DateAcquired] [date] NULL,
	[LifeMonths] [int] NULL,
	[StartDepreciation_Date] [date] NULL,
	[NewUsed] [char](1) NULL,
	[Manufacturer] [varchar](100) NULL,
	[ModelYear] [varchar](3) NULL,
	[ThirdItemNumber] [varchar](40) NULL,
	[DateDisposed] [date] NULL,
	[EquipmentStatus] [varchar](2) NULL,
	[FiscalYear] [int] NULL,
	[LedgerType] [varchar](2) NULL,
	[CatCode16] [varchar](3) NULL,
	[IsAdvisorOnly] [bit] NOT NULL,
	[NotUsed] [bit] NOT NULL,
	[IsAddByWorkOrder] [bit] NOT NULL,
	[Revision] [varchar](2) NULL,
	[LastEdit] [datetime] NULL,
	[LastStatusChangeDate] [datetime] NULL,
	[Source] [varchar](15) NULL,
	[SystemStatus] [varchar](470) NULL,
	[MaintPlant] [varchar](4) NULL,
	[MaintPlantDesc] [varchar](30) NULL,
	[FirmwareVersion] [varchar](40) NULL,
	[ModelNum] [varchar](20) NULL,
	[PhysicalLoc] [varchar](30) NULL,
	[EquipTypeDesc] [varchar](40) NULL,
	[ERPNotificationDate] [datetime] NULL,
	[ERPNotificationNumber] [varchar](30) NULL,
	[PartInternalStatus] [varchar](15) NULL,
	[OriginalLocation] [varchar](50) NULL,
	[OriginalStatus] [varchar](30) NULL,
	[SerialDescLong] [varchar](1024) NULL,
	[Comments] [varchar](8000) NULL,
	[SAPLastEdit] [datetime] NULL,
	[ParentPartId] [uniqueidentifier] NULL,
	[CustomsInvoiceDetailId] [uniqueidentifier] NULL,
	[Submt] [varchar](18) NULL,
	[LeakTestDate] [datetime] NULL,
	[RadioIsotope] [varchar](50) NULL,
	[Activity] [varchar](50) NULL,
	[SFC] [varchar](50) NULL,
	[SourceModel] [varchar](50) NULL,
	[LastComments] [varchar](8000) NULL,
	[PhysicalLocation] [varchar](150) NULL,
	[VerifiedBy] [varchar](15) NULL,
	[VerifiedDate] [datetime] NULL,
	[VerifiedLocation] [varchar](50) NULL,
	[StdCost] [money] NULL,
	[StdCostCode] [varchar](5) NULL,
	[OwnershipDesc] [varchar](20) NULL,
	[Category] [varchar](30) NULL,
	[CompanyCodeDesc] [varchar](25) NULL,
	[CostCenterDesc] [varchar](40) NULL,
	[CostCenterManager] [varchar](30) NULL,
	[TechId] [varchar](50) NULL,
	[MasterFirmwareItemNum] [varchar](30) NULL,
	[MasterFirmwareRevision] [varchar](12) NULL,
	[MfgPartNum] [varchar](30) NULL,
	[DateAdded] [datetime] NULL,
	[UserIdAdded] [int] NULL,
	[UserIdLastEdit] [int] NULL,
	[TopLevelFixedAssetId] [uniqueidentifier] NULL,
	[AcqCode] [varchar](3) NULL,
	[MajorAccountingClass] [varchar](3) NULL,
	[JournalingFlag] [varchar](1) NULL,
	[ApplicationCode] [varchar](3) NULL,
	[AssetLifeRemaining] [decimal](6, 2) NULL,
 CONSTRAINT [PK_FixedAssets] PRIMARY KEY CLUSTERED 
(
	[FixedAssetId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwRequestDetailItemNums]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwRequestDetailItemNums] as

SELECT d.RequestFormDetailId, d.RequestFormId, d.ItemNum, d.Qty, d.IsComplete, d.Comments,
  d.SourceComments, d.StandardCost, d.ItemRequiredDate, d.DateCreated, d.CreatedBy,
  d.EstimatedDeliveryDateItem, d.CanSupply, d.EstimatedNumOfWeeks,
  d.CapitalRequiredForItem, d.RefRequestFormDetailId,
  i.ToolPanel,i.ToolCode,i.ItemNum3,i.DescShort as ToolDescription,D.CurrShortName,
  (SELECT ISNULL(SUM(ISNULL(sd.Qty, 0)), 0)
	FROM ShipmentRequestFormDetails AS sd (NOLOCK) 
	INNER JOIN ShipmentRequestForms AS sr (NOLOCK) ON sr.ShipmentRequestformId = sd.ShipmentRequestFormId
	WHERE (sd.RequestFormDetailId = d.RequestFormDetailId) AND (sd.IsActive = 1) AND (sr.IsActive = 1)
   ) as QtyInProcess,
  (ISNULL(d.Qty, 0)
   - (
	SELECT ISNULL(SUM(ISNULL(sd.Qty, 0)), 0)
	FROM ShipmentRequestFormDetails AS sd (NOLOCK) 
	INNER JOIN ShipmentRequestForms AS sr (NOLOCK) ON sr.ShipmentRequestformId = sd.ShipmentRequestFormId
	WHERE (sd.RequestFormDetailId = d.RequestFormDetailId) AND (sd.IsActive = 1) AND (sr.IsActive = 1))
  ) As QtyOutstanding,
  ISNULL(a.Useable,0) [Useable],
  ISNULL(a.Unuseable,0) [Unuseable],
  ISNULL(a.Working,0) [Working]
FROM RequestFormDetails d (NOLOCK)
JOIN RequestForms r (NOLOCK) ON r.RequestFormId = d.RequestFormId
LEFT JOIN ItemNums i (NOLOCK) on d.itemnum = i.itemnum
LEFT JOIN (SELECT f.BranchPlant, f.RNItemNum, 
		SUM(CASE WHEN equipmentstatus IN ('AV', 'AS') THEN 1 ELSE 0 END) AS [Useable],
		SUM (CASE WHEN equipmentstatus = 'wk' THEN 1 ELSE 0 END) AS [Working],
		SUM( CASE WHEN equipmentstatus NOT IN ('AV', 'AS', 'WK') THEN 1 ELSE 0 END) AS [Unuseable]
		FROM FixedAssets f (NOLOCK)
		JOIN PartStatus p (NOLOCK) ON p.Code = f.EquipmentStatus 
		WHERE p.IsDisposed = 0
		GROUP BY f.BranchPlant, f.RNItemNum) A ON A.BranchPlant = r.ToBranchPlant AND i.ItemNum = a.RNItemNum

GO
/****** Object:  View [dbo].[vwRequestFormDetailSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwRequestFormDetailSearch] as

SELECT     rd.RequestFormDetailId, rd.RequestFormId, rd.ItemNum, rd.Comments, rd.Qty, rd.QtyInProcess, rd.IsComplete as RequestFormDetailIsComplete, rd.SourceComments, rd.StandardCost, rd.CurrShortName,
                      rd.ToolPanel, rd.ToolCode, rd.ItemNum3, rd.ToolDescription, rs.RequestNumber, rs.IsArchived, rs.FromCompanyName, rs.ToCompanyName, 
                      rs.FromBranchPlant, rs.ToBranchPlant, rs.CreateDate, rs.RequiredDate, rs.CreatedUserName, rs.Notes, rs.ShipmentMethod, rs.Customer, rs.Project, rs.LocalRefNumber, 
                      rs.LocalApprovalNumber, rs.Status,  rs.DateSubmittedForApproval, rs.ApprovalDate, rs.ApprovalUserName, rs.LastViewDate, rs.LastViewUserName, 
                      rs.StatusDesc, rs.StatusName, rs.IsComplete,
                      rs.DateRequiredInCustom, rs.IsForecasted, rs.NotRequiredBy, rs.NotRequiredAt, rs.NotRequiredComments, rs.ArchiveDate, rs.ArchiveOn, rd.DateCreated, 
                      rd.CreatedBy, rd.EstimatedDeliveryDateItem, rd.CanSupply, rd.EstimatedNumOfWeeks,rd.CapitalRequiredForItem, rd.RefRequestFormDetailId, rs.IsMotorised, rs.Temperature1,
                      case rs.IsComplete when '1' then 'Yes' else 'No' end as IsCompleteYesNo,
                      case rs.IsArchived when '1' then 'Yes' else 'No' end as IsArchivedYesNo,
                      case rs.IsMotorised when '1' then 'Yes' else 'No' end as IsMotorisedYesNo,
                      case rs.IsForecasted when '1' then 'Yes' else 'No' end as IsForecastedYesNo,
                      rs.isActive,rs.HoleSize, rd.QtyOutstanding,rs.FromRegion,rs.FromCountry,rs.ToRegion,rs.ToCountry,
					  STUFF (( SELECT DISTINCT ', ' + S9Number FROM ShipmentRequestFormDetails d (NOLOCK)
							WHERE d.RequestFormDetailId = rd.RequestFormDetailId
						FOR XML PATH('')), 1, 1, '') AS S9Numbers
FROM dbo.vwRequestDetailItemNums AS rd (NOLOCK)
INNER JOIN dbo.vwRequestFormSearch AS rs (NOLOCK) ON rs.RequestFormId = rd.RequestFormId










GO
/****** Object:  View [dbo].[vwAssetUtilizationReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwAssetUtilizationReport]
AS
SELECT
  r.BranchPlant AS [BranchPlant],
  br.region,
  r.toolcode,
  r.[year],
  r.[month],
  SUM(r.Qty_Requested) QtyRequested,
  SUM(r.Number_of_Runs) NumberOfRuns,
  SUM(r.Unuseable) [Unuseable],
  SUM(r.Useable) [Useable],
  SUM(r.working) [Working],
  r.toolpanel,
  br.IsGlobalRepair,
  br.Country,
  glp.GLProductLineId AS ProductLineId
FROM (SELECT
  h.ToBranchPlant [BranchPlant],
  d.ToolCode [ToolCode],
  YEAR(h.RequiredDate) [Year],
  MONTH(h.RequiredDate) [Month],
  SUM(d.Qty) [Qty_Requested],
  0 [Number_of_Runs],
  0 [Useable],
  0 [Unuseable],
  0 [Working],
  d.ToolPanel [ToolPanel]
FROM vwRequestFormSearch h (NOLOCK)
INNER JOIN vwRequestFormDetailSearch d (NOLOCK)
  ON d.RequestFormId = h.RequestFormId
WHERE h.StatusDesc IN ('Open', 'Submitted', 'Approved', 'Rejected', 'Closed', 'Request Endorsed')
GROUP BY h.ToBranchPlant,
         d.ToolCode,
         d.ToolPanel,
         YEAR(h.RequiredDate),
         MONTH(h.RequiredDate)
UNION ALL
SELECT
  district [Branchplant],
  tc.toolcode [ToolCode],
  YEAR(bi.outholedate) [Year],
  MONTH(bi.outholedate) [Month],
  0 [Qty_Requested],
  COUNT(bi.runid) [Number_of_Runs],
  0 [Useable],
  0 [Unuseable],
  0 [Working],
  i.ToolPanel [ToolPanel]
FROM relbusinessintelligencedataset bi (NOLOCK)
INNER JOIN toolstringcomponentinfo tc (NOLOCK)
  ON tc.runid = bi.runid
INNER JOIN ItemNums i
  ON i.ItemNum = tc.InventoryItemNum
GROUP BY district,
         tc.toolcode,
         i.ToolPanel,
         YEAR(bi.outholedate),
         MONTH(bi.outholedate)
UNION ALL

SELECT BranchPlant, 
		ToolCode, 
		[Year], 
		[Month], 
		0 [Qty_Requested],
		0 [Number_of_Runs],
		AVG(UnUseable) [UnUseable],
		AVG(Useable) [Useable], 
		AVG(Working) [Working], 
		ToolPanel
FROM (
		SELECT
			  BranchPlant,
			  YEAR(inventorydate) [Year],
			  MONTH(inventorydate) [Month],
			  CONVERT(NVARCHAR(10), inventorydate, 103) [Day],
			  Toolcode,
			  ToolPanel,
			  SUM([UnUseable]) [UnUseable],
			  SUM([Useable]) [Useable],
			  SUM([Working]) [Working],
			  SUM(1) [Total]
		FROM AesWarehouse.dbo.AssetUtilizationDaily (NOLOCK)
		GROUP BY
			  BranchPlant,
			  YEAR(inventorydate),
			  MONTH(inventorydate),
			  CONVERT(NVARCHAR(10), inventorydate, 103),
			  Toolcode,
			  Toolpanel
) A
GROUP BY BranchPlant, Year, Month, ToolCode, ToolPanel
) r
LEFT JOIN BranchPlants br (NOLOCK)
  ON r.branchplant = br.branchplant
  LEFT JOIN GLProductLineBranchPlantMappings glp
  ON glp.BranchPlant = br.BranchPlant
GROUP BY r.BranchPlant,
         br.IsGlobalRepair,
         br.companyname,
         br.region,
         r.toolcode,
         r.ToolPanel,
         r.[year],
         r.[month],
         br.Country,
		 glp.GLProductLineId
GO
/****** Object:  View [dbo].[vwRelBusinessIntelligenceDataSet_Region]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwRelBusinessIntelligenceDataSet_Region]
AS
(
	SELECT Distinct Region from RelBusinessIntelligenceDataSet
	Where Region is not null or Region <> ''  
)
GO
/****** Object:  View [dbo].[VwRelBusinessIntelligenceDataSet]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--===========================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 24 May 2017
-- DESCRIPTION: To fetch RelBusinessIntelligenceDataSet data
--============================================================
CREATE VIEW [dbo].[VwRelBusinessIntelligenceDataSet]
AS
SELECT [RunId],
[RunYear],
[RunMonth],
[RunMonthName],
[Quarter],
[MonthYear],
[Region],
[Country],
[District],
[CustomerID],
[Hemisphere],
[RegionDesc],
[DistrictDesc],
[CustomerName],
[JobNumber],
[Rig],
[TFF],
[CSI],
[NCI],
[OS],
[PR],
[Others],
[GFA],
[NonTFFRun],
[NPT],
[NPTRun],
[NonNPTRun],
[NPTRunNoTFF],
[CIRunNoNPT],
[GoodRun],
[B2B],
[MaxTempF],
[MaxTempWindowF],
[MaxTempC],
[MaxTempWindowC],
[OperHrs],
[CircHrs],
[DrillHrs],
[CircHrsWindow],
[Less30CircHrEvents],
[Less30CircHr],
[LWD],
[HELEM],
[EM],
[PP],
[RSS],
[MotorWFT],
[RentalMotor],
[AllMWD],
[BECFIELD],
[TENSOR],
[GEOLINK],
[Well],
[RunNumber],
[RunNumberCnt],
[OffShore],
[InHoleDate],
[EndDate],
[OutHoleDate],
[TFFToolString],
[TFFComponentID],
[TFFComponent],
[TFFComponentDesc],
[TFFSerialNumber],
[Greater30HrsNPTEvents],
[Greater30HrNPTHrs],
[Is3030],
[Non3030],
[RMReportStatus],
[MDStart],
[MDEnd],
[MDEndWindow],
[MDDistance],
[TVDStart],
[TVDEnd],
[HoleSize],
[HoleSizeWindow],
[MaxHydrostaticPressure],
[MaxOperPressure],
[MaxObservedPressure],
[MudDensity],
[BaseFluidEnd],
[MaxDoglegRotating],
[MaxDoglegRotatingWindow],
[MaxDoglegSliding],
[MaxDoglegSlidingWindow],
[MaxInc],
[FlowRate],
[MotorSerialNumber],
[MotorSize],
[MotorLength],
[MotorType],
[Manufacturer],
[LobesRS],
[MotorRPM],
[MotorOnBottom],
[MotorOffBottom],
[MotorDifferential],
[Tools],
[ToolSize],
[CountryDesc],
[FieldSymptom],
[FieldSymptom2],
[RSSFailureTFF],
[RSSFailureCSI],
[RSSNPTnonTFF],
[TotalRSSNPTTFF],
[RSSOT],
[LWDFailureTFF],
[LWDFailureCSI],
[LWDNPTTFF],
[LWDNPTnonTFF],
[TotalLWDNPT],
[LWDOT],
[CompFailureCode],
[CompFailureCodeDesc],
[OutOfSpecCode],
[OutOfSpecCodeDesc],
[OSNPT],
[ProceduralCode],
[ProceduralCodeDesc],
[PRModes],
[PRNPT],
[AverageROP],
[RunLeadEngineers],
[RunEngineers],
[Pulser (AES)],
[Driver Insert],
[IDS],
[Gamma Ray Insert],
[HAGR],
[SAGR],
[LWDGammaCombine],
[MFR Collar],
[Azimuthal MFR],
[MFRCombine],
[Neutron Insert],
[Density Insert],
[NeutronDensityCombine],
[Collar, SST Sensor],
[BAP Insert],
[Battery High Temp],
[Battery IBM],
[Battery Low Temp],
[Battery Medium Temp],
[LWDBatteryCombine],
[Battery, Formation Tester],
[Bias Unit],
[Controller Insert],
[Collar, Formation Tester],
[Compensation Assembly],
[TVM],
[LWDDirOnly],
[LWDDirGam],
[LWDDirGamMFRCombo],
[LWDTripleCombo],
[LWDQuadCombo],
[MWD Pulser (AES)],
[MWD Pulser 2"],
[MWDPulserCombine],
[Control Module Sonde],
[BTR],
[CDS],
[CDST (Clever Deviation Sonde Top Mounted)],
[GRG4],
[Oriented Gamma Ray],
[UGR],
[MWDGammaCombine],
[MWD Battery High Temp],
[MWD Battery Low Temp],
[MWDBatteryCombine],
[CSGX],
[Gabis],
[Gabis Battery],
[Inclination Sonde],
[EMDirOnly],
[EMDirGam],
[PPDirOnly],
[PPDirGam],
[TotalComponentCount],
[TotalCSICount],
[TotalNCICount],
[SolidPercentageMax],
[SandPercentageMax],
[WaterPercentageMax],
[OilPercentageMax],
[pHMax],
[RotatingHrs],
[ReasonsForPooh],
[WaterDepth],
[BitDeltaP],
[WeightOnBit],
[Torque],
[SurfaceRPM],
[UnderBalanced],
[GasFlowRate],
[SPP],
[OrificeSize],
[Latitude],
[Longitude],
[LocationCountry],
[LocationState],
[LocationCounty],
[MotorFailureTFF],
[MotorFailureCSI],
[MotorNPTTFF],
[EMFailureTFF],
[EMFailureCSI],
[EMNPTTFF],
[PPFailureTFF],
[PPFailureCSI],
[PPNPTTFF],
[MWDFailureTFF],
[MWDFailureCSI],
[MWDNPTTFF],
[MWDOT],
[EMOT],
[HPOT],
[MotorOT],
[IncidentId],
[IncidentNumber],
[FaultCodeLevelOne],
[FaultCodeDescLevelOne],
[FaultCodeLevelTwo],
[FaultCodeDescLevelTwo],
[FaultCodeLevelThree],
[FaultCodeDescLevelThree],
[FieldSummary],
[FieldSymptomSummary],
[LoadDate],
[PulseCount],
[RSSRevolutions],
[GWD],
[Crosswave],
[CasingLink],
[VMS],
[DualIDS],
[DualPulser],
[ExtendedRange],
[WPR],
[DLC],
[AdjustableGaugeStabilizer],
[TBSMotorySteerable],
[Geosteering],
[RTOCMonitoring],
[HeatWave],
[HEX],
[WptsReportId],
[SMI],
[AGS],
[EMTwinwells],
[JobStartDate],
[JobEndDate],
[JobEstEndDate],
[Criticality] AS [PriorityCode],
[TOTALRSSNPT],
[X],
[Y],
[RssMagnus],
[WptsCparId]
FROM RelBusinessIntelligenceDataSet
GO
/****** Object:  View [dbo].[vwAssetUtilizationRegionExport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwAssetUtilizationRegionExport]
AS
SELECT
	'Region' [ViewType],
	r.Region AS [ViewValue],
	r.Toolcode,
	r.[Year],
	r.[Month],
	SUM(r.Qty_Requested) QtyRequested,
	SUM(r.Number_of_Runs) NumberOfRuns,
	SUM(r.Unuseable) [Unusable],
	SUM(r.Useable) [Usable],
	SUM(r.working) [Working],

	CASE WHEN SUM(r.[DistinctCount]) <> 0 THEN SUM(r.Unuseable) / (SUM(r.Unuseable) + SUM(r.Useable) + SUM(r.working)) * 100 ELSE 0 END [UnUsablePercentage],
	CASE WHEN SUM(r.[DistinctCount]) <> 0 THEN SUM(r.Useable) / (SUM(r.Unuseable) + SUM(r.Useable) + SUM(r.working)) * 100 ELSE 0 END [UsablePercentage],
	CASE WHEN SUM(r.[DistinctCount]) <> 0 THEN SUM(r.working) / (SUM(r.Unuseable) + SUM(r.Useable) + SUM(r.working)) * 100 ELSE 0 END [WorkingPercentage],

	SUM(r.[DistinctCount]) [DistinctCount],
	r.ToolPanel
FROM (SELECT
  d.ToolCode [ToolCode],
  b.Region,
  YEAR(h.RequiredDate) [Year],
  MONTH(h.RequiredDate) [Month],
  SUM(d.Qty) [Qty_Requested],
  0 [Number_of_Runs],
  0 [Useable],
  0 [Unuseable],
  0 [Working],
  d.ToolPanel [ToolPanel],
  0 [DistinctCount]
FROM vwRequestFormSearch h (NOLOCK)
INNER JOIN vwRequestFormDetailSearch d (NOLOCK) ON d.RequestFormId = h.RequestFormId
INNER JOIN BranchPlants b (NOLOCK) ON b.BranchPlant = h.ToBranchPlant
WHERE h.StatusDesc IN ('Open', 'Submitted', 'Approved', 'Rejected', 'Closed', 'Request Endorsed')
GROUP BY b.Region,
		d.ToolCode,
         d.ToolPanel,
         YEAR(h.RequiredDate),
         MONTH(h.RequiredDate)

UNION ALL

SELECT
  tc.toolcode [ToolCode],
  bi.Region,
  YEAR(bi.outholedate) [Year],
  MONTH(bi.outholedate) [Month],
  0 [Qty_Requested],
  COUNT(bi.runid) [Number_of_Runs],
  0 [Useable],
  0 [Unuseable],
  0 [Working],
  i.ToolPanel [ToolPanel],
  0 [DistinctCount]
FROM relbusinessintelligencedataset bi (NOLOCK)
INNER JOIN toolstringcomponentinfo tc (NOLOCK) ON tc.runid = bi.runid
INNER JOIN ItemNums i ON i.ItemNum = tc.InventoryItemNum

GROUP BY bi.Region,
		tc.toolcode,
         i.ToolPanel,
         YEAR(bi.outholedate),
         MONTH(bi.outholedate)

UNION ALL

SELECT ToolCode,
		[Region],
		YEAR([InventoryDate]) [Year],
		Month([InventoryDate]) [Month],
		0 [Qty_Requested],
		0 [Number_Of_Runs],
		AVG([Usable]) [Usable],
		AVG([UnUsable]) [UnUsable],
		AVG([Working]) [Working],
		ToolPanel,
		0 [DistinctTotal]
FROM (SELECT
		i.toolcode,
		i.ToolPanel,
		b.Region,
		CONVERT(DATETIME,CONVERT(char(10), inventorydate, 103),103) [inventorydate],
		SUM(CASE WHEN equipmentstatus IN ('AV', 'as') THEN 1.0 ELSE 0 END) [Usable],
		SUM(CASE WHEN equipmentstatus NOT IN ('AV', 'as', 'wk') THEN 1.0 ELSE 0 END) [UnUsable],
		SUM(CASE WHEN equipmentstatus = 'wk' THEN 1.0 ELSE 0 END) [Working]
	FROM aeswarehouse.dbo.fixedassetsnapshots fs (NOLOCK)
	INNER JOIN partstatus ps (NOLOCK) ON ps.code = fs.equipmentstatus
	INNER JOIN itemnums i (NOLOCK) ON i.itemnum = fs.rnitemnum
	INNER JOIN BranchPlants b (NOLOCK) ON b.BranchPlant = fs.BranchPlant
	WHERE fs.equipmentstatus NOT IN ('50', 'nj') AND ps.isdisposed = '0' 
	GROUP BY
		CONVERT(DATETIME,CONVERT(char(10), inventorydate, 103),103),
		b.[Region],
		i.toolcode,
		i.toolpanel
	) A
GROUP BY ToolCode,
		ToolPanel,
		[Region],
		YEAR([InventoryDate]),
		Month([InventoryDate])

UNION ALL

	SELECT ToolCode, 
			Region,
			[Year], 
			[Month],
			0 [Qty_Requested],
			0 [Number_of_Runs],
			0 [Usable], 
			0 [Working], 
			0 [UnUsable],
			ToolPanel, 			 
			COUNT(fixedAssetId) [DistinctCount]
	FROM (
			SELECT YEAR(inventorydate) [Year],
					  MONTH(inventorydate) [Month],
					  i.toolcode,
					  i.toolpanel,
					  b.Region,
					  FixedAssetId
			FROM aeswarehouse.dbo.fixedassetsnapshots fs (NOLOCK)
				INNER JOIN partstatus ps (NOLOCK) ON ps.code = fs.equipmentstatus
				INNER JOIN itemnums i (NOLOCK) ON i.itemnum = fs.rnitemnum
				INNER JOIN BranchPlants b (NOLOCK) ON b.BranchPlant = fs.BranchPlant
				WHERE fs.equipmentstatus NOT IN ('50', 'nj') AND ps.isdisposed = '0' 
			GROUP BY
					YEAR(inventorydate),
					MONTH(inventorydate),
					i.toolcode,
					i.toolpanel,
					b.Region,
					fs.FixedAssetId
		) a
		GROUP BY [Year], 
			[Month], 
			Region,
			ToolCode, 
			ToolPanel
) r
GROUP BY r.Region,
		 r.toolcode,
         r.ToolPanel,
         r.[year],
         r.[month]
GO
/****** Object:  View [dbo].[vwAssetUtilizationGlobalExport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwAssetUtilizationGlobalExport]
AS
SELECT
	'Global' [ViewType],
	'Global' AS [ViewValue],
	r.Toolcode,
	r.[Year],
	r.[Month],
	SUM(r.Qty_Requested) QtyRequested,
	SUM(r.Number_of_Runs) NumberOfRuns,
	SUM(r.Unuseable) [Unusable],
	SUM(r.Useable) [Usable],
	SUM(r.working) [Working],

	CASE WHEN SUM(r.[DistinctCount]) <> 0 THEN SUM(r.Unuseable) / (SUM(r.Unuseable) + SUM(r.Useable) + SUM(r.working)) * 100 ELSE 0 END [UnUsablePercentage],
	CASE WHEN SUM(r.[DistinctCount]) <> 0 THEN SUM(r.Useable) / (SUM(r.Unuseable) + SUM(r.Useable) + SUM(r.working)) * 100 ELSE 0 END [UsablePercentage],
	CASE WHEN SUM(r.[DistinctCount]) <> 0 THEN SUM(r.working) / (SUM(r.Unuseable) + SUM(r.Useable) + SUM(r.working)) * 100 ELSE 0 END [WorkingPercentage],

	SUM(r.[DistinctCount]) [DistinctCount],
	r.ToolPanel
FROM (SELECT
  d.ToolCode [ToolCode],
  YEAR(h.RequiredDate) [Year],
  MONTH(h.RequiredDate) [Month],
  SUM(d.Qty) [Qty_Requested],
  0 [Number_of_Runs],
  0 [Useable],
  0 [Unuseable],
  0 [Working],
  d.ToolPanel [ToolPanel],
  0 [DistinctCount]
FROM vwRequestFormSearch h (NOLOCK)
INNER JOIN vwRequestFormDetailSearch d (NOLOCK)
  ON d.RequestFormId = h.RequestFormId
WHERE h.StatusDesc IN ('Open', 'Submitted', 'Approved', 'Rejected', 'Closed', 'Request Endorsed')
GROUP BY d.ToolCode,
         d.ToolPanel,
         YEAR(h.RequiredDate),
         MONTH(h.RequiredDate)

UNION ALL

SELECT
  tc.toolcode [ToolCode],
  YEAR(bi.outholedate) [Year],
  MONTH(bi.outholedate) [Month],
  0 [Qty_Requested],
  COUNT(bi.runid) [Number_of_Runs],
  0 [Useable],
  0 [Unuseable],
  0 [Working],
  i.ToolPanel [ToolPanel],
  0 [DistinctCount]
FROM relbusinessintelligencedataset bi (NOLOCK)
INNER JOIN toolstringcomponentinfo tc (NOLOCK)
  ON tc.runid = bi.runid
INNER JOIN ItemNums i
  ON i.ItemNum = tc.InventoryItemNum
GROUP BY tc.toolcode,
         i.ToolPanel,
         YEAR(bi.outholedate),
         MONTH(bi.outholedate)

UNION ALL

SELECT ToolCode,
		YEAR([InventoryDate]) [Year],
		Month([InventoryDate]) [Month],
		0 [Qty_Requested],
		0 [Number_Of_Runs],
		AVG([Usable]) [Usable],
		AVG([UnUsable]) [UnUsable],
		AVG([Working]) [Working],
		ToolPanel,
		0 [DistinctTotal]
FROM (SELECT
		i.toolcode,
		i.ToolPanel,
		CONVERT(DATETIME,CONVERT(char(10), inventorydate, 103),103) [inventorydate],
		SUM(CASE WHEN equipmentstatus IN ('AV', 'as') THEN 1.0 ELSE 0 END) [Usable],
		SUM(CASE WHEN equipmentstatus NOT IN ('AV', 'as', 'wk') THEN 1.0 ELSE 0 END) [UnUsable],
		SUM(CASE WHEN equipmentstatus = 'wk' THEN 1.0 ELSE 0 END) [Working]
	FROM aeswarehouse.dbo.fixedassetsnapshots fs (NOLOCK)
	INNER JOIN partstatus ps (NOLOCK) ON ps.code = fs.equipmentstatus
	INNER JOIN itemnums i (NOLOCK) ON i.itemnum = fs.rnitemnum
	WHERE fs.equipmentstatus NOT IN ('50', 'nj') AND ps.isdisposed = '0' 
	GROUP BY
		CONVERT(DATETIME,CONVERT(char(10), inventorydate, 103),103),
		i.toolcode,
		i.toolpanel
	) A
GROUP BY ToolCode,
		YEAR([InventoryDate]),
		Month([InventoryDate]),
		ToolPanel
UNION ALL

	SELECT ToolCode, 
			[Year], 
			[Month], 
			0 [Qty_Requested],
			0 [Number_of_Runs],
			0 [Usable], 
			0 [Working], 
			0 [UnUsable],
			ToolPanel, 			 
			COUNT(fixedAssetId) [DistinctCount]
	FROM (
			SELECT YEAR(inventorydate) [Year],
					  MONTH(inventorydate) [Month],
					  i.toolcode,
					  i.toolpanel,
					  FixedAssetId
			FROM aeswarehouse.dbo.fixedassetsnapshots fs (NOLOCK)
				INNER JOIN partstatus ps (NOLOCK) ON ps.code = fs.equipmentstatus
				INNER JOIN itemnums i (NOLOCK) ON i.itemnum = fs.rnitemnum
				WHERE fs.equipmentstatus NOT IN ('50', 'nj') AND ps.isdisposed = '0' 
			GROUP BY
					YEAR(inventorydate),
					MONTH(inventorydate),
					i.toolcode,
					i.toolpanel,
					fs.FixedAssetId
		) a
		GROUP BY [Year], 
			[Month], 
			ToolCode, 
			ToolPanel
) r
GROUP BY r.toolcode,
         r.ToolPanel,
         r.[year],
         r.[month]
GO
/****** Object:  View [dbo].[vwAssetUtilizationBranchPlantExport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwAssetUtilizationBranchPlantExport]
AS
SELECT
	'BranchPlant' [ViewType],
	r.BranchPlant +' - ' + b.CompanyName AS [ViewValue],
	r.Toolcode,
	r.[Year],
	r.[Month],
	SUM(r.Qty_Requested) QtyRequested,
	SUM(r.Number_of_Runs) NumberOfRuns,
	SUM(r.Unuseable) [Unusable],
	SUM(r.Useable) [Usable],
	SUM(r.working) [Working],

	CASE WHEN SUM(r.[DistinctCount]) <> 0 THEN SUM(r.Unuseable) / (SUM(r.Unuseable) + SUM(r.Useable) + SUM(r.working)) * 100 ELSE 0 END [UnUsablePercentage],
	CASE WHEN SUM(r.[DistinctCount]) <> 0 THEN SUM(r.Useable) / (SUM(r.Unuseable) + SUM(r.Useable) + SUM(r.working)) * 100 ELSE 0 END [UsablePercentage],
	CASE WHEN SUM(r.[DistinctCount]) <> 0 THEN SUM(r.working) / (SUM(r.Unuseable) + SUM(r.Useable) + SUM(r.working)) * 100 ELSE 0 END [WorkingPercentage],

	SUM(r.[DistinctCount]) [DistinctCount],
	r.ToolPanel
FROM (SELECT
  d.ToolCode [ToolCode],
  h.ToBranchPlant [BranchPlant],
  YEAR(h.RequiredDate) [Year],
  MONTH(h.RequiredDate) [Month],
  SUM(d.Qty) [Qty_Requested],
  0 [Number_of_Runs],
  0 [Useable],
  0 [Unuseable],
  0 [Working],
  d.ToolPanel [ToolPanel],
  0 [DistinctCount]
FROM vwRequestFormSearch h (NOLOCK)
INNER JOIN vwRequestFormDetailSearch d (NOLOCK) ON d.RequestFormId = h.RequestFormId
WHERE h.StatusDesc IN ('Open', 'Submitted', 'Approved', 'Rejected', 'Closed', 'Request Endorsed')
GROUP BY h.ToBranchPlant,
		d.ToolCode,
         d.ToolPanel,
         YEAR(h.RequiredDate),
         MONTH(h.RequiredDate)

UNION ALL

SELECT
  tc.toolcode [ToolCode],
  bi.District,
  YEAR(bi.outholedate) [Year],
  MONTH(bi.outholedate) [Month],
  0 [Qty_Requested],
  COUNT(bi.runid) [Number_of_Runs],
  0 [Useable],
  0 [Unuseable],
  0 [Working],
  i.ToolPanel [ToolPanel],
  0 [DistinctCount]
FROM relbusinessintelligencedataset bi (NOLOCK)
INNER JOIN toolstringcomponentinfo tc (NOLOCK) ON tc.runid = bi.runid
INNER JOIN ItemNums i ON i.ItemNum = tc.InventoryItemNum

GROUP BY bi.District,
		tc.toolcode,
         i.ToolPanel,
         YEAR(bi.outholedate),
         MONTH(bi.outholedate)

UNION ALL

SELECT ToolCode,
		[BranchPlant],
		YEAR([InventoryDate]) [Year],
		Month([InventoryDate]) [Month],
		0 [Qty_Requested],
		0 [Number_Of_Runs],
		AVG([Usable]) [Usable],
		AVG([UnUsable]) [UnUsable],
		AVG([Working]) [Working],
		ToolPanel,
		0 [DistinctTotal]
FROM (SELECT
		i.toolcode,
		i.ToolPanel,
		fs.BranchPlant,
		CONVERT(DATETIME,CONVERT(char(10), inventorydate, 103),103) [inventorydate],
		SUM(CASE WHEN equipmentstatus IN ('AV', 'as') THEN 1.0 ELSE 0 END) [Usable],
		SUM(CASE WHEN equipmentstatus NOT IN ('AV', 'as', 'wk') THEN 1.0 ELSE 0 END) [UnUsable],
		SUM(CASE WHEN equipmentstatus = 'wk' THEN 1.0 ELSE 0 END) [Working]
	FROM aeswarehouse.dbo.fixedassetsnapshots fs (NOLOCK)
	INNER JOIN partstatus ps (NOLOCK) ON ps.code = fs.equipmentstatus
	INNER JOIN itemnums i (NOLOCK) ON i.itemnum = fs.rnitemnum
	WHERE fs.equipmentstatus NOT IN ('50', 'nj') AND ps.isdisposed = '0' 
	GROUP BY
		CONVERT(DATETIME,CONVERT(char(10), inventorydate, 103),103),
		fs.[BranchPlant],
		i.toolcode,
		i.toolpanel
	) A
GROUP BY ToolCode,
		ToolPanel,
		BranchPlant,
		YEAR([InventoryDate]),
		Month([InventoryDate])

UNION ALL

	SELECT ToolCode, 
			BranchPlant,
			[Year], 
			[Month],
			0 [Qty_Requested],
			0 [Number_of_Runs],
			0 [Usable], 
			0 [Working], 
			0 [UnUsable],
			ToolPanel, 			 
			COUNT(fixedAssetId) [DistinctCount]
	FROM (
			SELECT YEAR(inventorydate) [Year],
					  MONTH(inventorydate) [Month],
					  i.toolcode,
					  i.toolpanel,
					  fs.BranchPlant,
					  FixedAssetId
			FROM aeswarehouse.dbo.fixedassetsnapshots fs (NOLOCK)
				INNER JOIN partstatus ps (NOLOCK) ON ps.code = fs.equipmentstatus
				INNER JOIN itemnums i (NOLOCK) ON i.itemnum = fs.rnitemnum
				WHERE fs.equipmentstatus NOT IN ('50', 'nj') AND ps.isdisposed = '0' 
			GROUP BY
					YEAR(inventorydate),
					MONTH(inventorydate),
					i.toolcode,
					i.toolpanel,
					fs.BranchPlant,
					fs.FixedAssetId
		) a
		GROUP BY [Year], 
			[Month], 
			BranchPlant,
			ToolCode, 
			ToolPanel
) r
JOIN BranchPlants b ON b.BranchPlant = r.BranchPlant
GROUP BY r.BranchPlant,
		 b.CompanyName,
		 r.toolcode,
         r.ToolPanel,
         r.[year],
         r.[month]


GO
/****** Object:  Table [dbo].[Jobs]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Jobs](
	[JobId] [uniqueidentifier] NOT NULL,
	[Region] [varchar](30) NULL,
	[Country] [varchar](30) NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[CustomerId] [uniqueidentifier] NULL,
	[JobNumber] [varchar](50) NOT NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[EstDays] [datetime] NULL,
	[SpudDate] [datetime] NULL,
	[ImportStatus] [varchar](15) NULL,
	[LocationCountry] [varchar](50) NULL,
	[LocationState] [varchar](50) NULL,
	[LocationCounty] [varchar](50) NULL,
	[Field] [varchar](50) NULL,
	[RigType] [varchar](50) NULL,
	[Rig] [varchar](50) NULL,
	[Offshore] [bit] NULL,
	[Coordinator] [varchar](100) NULL,
	[ThirdPartyClient] [varchar](50) NULL,
	[X] [varchar](50) NULL,
	[Y] [varchar](50) NULL,
	[SurfaceSystem] [varchar](50) NULL,
	[SurfaceSystemVersion] [varchar](50) NULL,
	[RigPhone1] [varchar](50) NULL,
	[RigPhone2] [varchar](50) NULL,
	[Longitude] [varchar](50) NULL,
	[Latitude] [varchar](50) NULL,
	[API] [varchar](50) NULL,
	[UnitSerialNumber] [varchar](50) NULL,
	[DirectionalDrillingCompany] [varchar](50) NULL,
	[WellPlanRevision] [varchar](50) NULL,
	[CoreVersion] [varchar](10) NULL,
	[IsDS] [bit] NOT NULL,
	[IsJarOnly] [bit] NOT NULL,
	[JarWell] [varchar](200) NULL,
	[JarRunNumber] [varchar](50) NULL,
	[CreateDate] [datetime] NOT NULL,
	[CreateUserID] [int] NOT NULL,
	[UpdateDate] [datetime] NULL,
	[UpdateUserID] [int] NULL,
	[DateProjected] [datetime] NULL,
	[DateActive] [datetime] NULL,
	[DatePending] [datetime] NULL,
	[DateClosed] [datetime] NULL,
	[IsDeleted] [bit] NOT NULL,
	[RigName] [varchar](50) NULL,
	[PadProject] [varchar](3) NULL,
	[PadProjectName] [varchar](30) NULL,
	[ClientAFE] [varchar](20) NULL,
	[ClientPO] [varchar](20) NULL,
	[ClientWO] [varchar](20) NULL,
	[KOP] [varchar](20) NULL,
	[KitNumber] [varchar](20) NULL,
	[IPAddress] [varchar](25) NULL,
	[ReportId] [int] NULL,
	[DDRSSCoordinator] [varchar](100) NULL,
	[JarWellType] [varchar](25) NULL,
	[JarReservoirType] [varchar](15) NULL,
	[PreTravelTime] [int] NULL,
	[PostTravelTime] [int] NULL,
	[ConfirmedClosed] [bit] NULL,
	[Runs] [int] NULL,
	[DownholeFailures] [int] NULL,
	[DeckCheckFailures] [int] NULL,
	[SurfaceEquipmentFailures] [int] NULL,
	[DispatchNumber] [int] NULL,
	[OffshoreYN] [varchar](3) NULL,
	[JdeCustomerId] [uniqueidentifier] NULL,
	[SalesforceId] [varchar](20) NULL,
	[WFTUserName] [varchar](20) NULL,
	[SFCreatedDate] [datetime] NULL,
	[SFLastModifiedDate] [datetime] NULL,
	[RevenueStatus] [varchar](100) NULL,
 CONSTRAINT [PK_Jobs] PRIMARY KEY CLUSTERED 
(
	[JobId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwDownhole2]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=========================================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 22 June 2016
--DESCRIPTION: To get downhole2 data for WPTS
--=========================================================================
CREATE VIEW [dbo].[vwDownhole2]
AS

SELECT
  r.JobNumber,
  J.ReportId,
  WptsReportId,
  RunId,
  CustomerName,
  r.Rig,
  TFF,
  NCI,
  CSI,
  OS,
  PR,
  Others,
  GFA,
  NonTFFRun,
  NPT,
  NPTRun,
  NonNPTRun,
  NPTRunNoTFF,
  CIRunNoNPT,
  B2B,
  MaxTempF,
  MaxTempWindowF,
  MaxTempC,
  MaxTempWindowC,
  OperHrs,
  CircHrs,
  DrillHrs,
  CircHrsWindow,
  [Less30CircHrEvents],
  [Less30CircHr],
  [LWD],
  [HELEM],
  [EM],
  [PP],
  [RSS],
  [MotorWFT],
  [RentalMotor],
  [AllMWD],
  [BECFIELD],
  [TENSOR],
  [GEOLINK],
  [Well],
  [RunNumber],
  [RunNumberCnt],
  [InHoleDate],
  r.[EndDate],
  [Greater30HrsNPTEvents],
  [Greater30HrNPTHrs],
  [Is3030],
  [Non3030],
  [MDStart],
  [MDEnd],
  [MDEndWindow],
  [MDDistance],
  [TVDStart],
  [TVDEnd],
  [HoleSize],
  [HoleSizeWindow],
  [MaxHydrostaticPressure],
  [MaxOperPressure],
  [MaxObservedPressure],
  [MudDensity],
  [BaseFluidEnd],
  [MaxDoglegRotating],
  [MaxDoglegRotatingWindow],
  [MaxDoglegSliding],
  [MaxDoglegSlidingWindow],
  [MaxInc],
  [FlowRate],
  [MotorSerialNumber],
  [MotorSize],
  [MotorLength],
  [MotorType],
  [Manufacturer],
  [LobesRS],
  [MotorRPM],
  [MotorOnBottom],
  [MotorOffBottom],
  [MotorDifferential],
  [ToolSize],
  [FieldSymptom],
  [FieldSymptom2],
  [RSSFailureTFF],
  [RSSFailureCSI],
  [RSSNPTnonTFF],
  [TotalRSSNPTTFF],
  [RSSOT],
  [LWDFailureTFF],
  [LWDFailureCSI],
  [LWDNPTTFF],
  [LWDNPTnonTFF],
  [TotalLWDNPT],
  [LWDOT],
  [PRModes],
  [PRNPT],
  [AverageROP],
  [RunLeadEngineers],
  [RunEngineers],
  [TVM],
  [LWDDirOnly],
  [LWDDirGam],
  [LWDDirGamMFRCombo],
  [LWDTripleCombo],
  [LWDQuadCombo],
  [EMDirOnly],
  [EMDirGam],
  [PPDirOnly],
  [PPDirGam],
  [TotalComponentCount],
  [TotalCSICount],
  [TotalNCICount],
  [SolidPercentageMax],
  [SandPercentageMax],
  [WaterPercentageMax],
  [OilPercentageMax],
  [pHMax],
  [RotatingHrs],
  [ReasonsForPooh],
  [WaterDepth],
  [BitDeltaP],
  [WeightOnBit],
  [Torque],
  [SurfaceRPM],
  [UnderBalanced],
  [GasFlowRate],
  [SPP],
  [OrificeSize],
  [MotorFailureTFF],
  [MotorFailureCSI],
  [MotorNPTTFF],
  [EMFailureTFF],
  [EMFailureCSI],
  [EMNPTTFF],
  [PPFailureTFF],
  [PPFailureCSI],
  [PPNPTTFF],
  [MWDFailureTFF],
  [MWDFailureCSI],
  [MWDNPTTFF],
  [MWDOT],
  [EMOT],
  [HPOT],
  [MotorOT],
  [IncidentId],
  [IncidentNumber],
  [FieldSummary],
  [FieldSymptomSummary],
  [LoadDate],
  [PulseCount],
  [RSSRevolutions],
  [ExtendedRange],
  [Criticality],
  [TOTALRSSNPT]
FROM RelBusinessIntelligenceDataSet r
LEFT JOIN Jobs j
  ON r.JobNUmber = j.JobNUmber


GO
/****** Object:  Table [dbo].[PFTConfigSeq]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTConfigSeq](
	[PFTConfigSeqId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[PFTConfigId] [uniqueidentifier] NOT NULL,
	[Seq] [int] NOT NULL,
	[SeqName] [varchar](1024) NOT NULL,
	[PFTLabId] [uniqueidentifier] NULL,
	[SeqDesc] [varchar](8000) NULL,
	[IsTestDataReq] [tinyint] NULL,
	[SendEmailOnPass] [varchar](1024) NULL,
	[DateAdded] [datetime] NULL,
	[IsCommentRequired] [tinyint] NULL,
	[IsCommentNumeric] [tinyint] NULL,
	[EstimatedHours] [decimal](18, 2) NULL,
	[IsLabourHrRequired] [tinyint] NULL,
	[ObjectId] [int] NULL,
	[isSupervisorSignOff] [tinyint] NULL,
 CONSTRAINT [PK_PFSequences] PRIMARY KEY CLUSTERED 
(
	[PFTConfigSeqId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTWOSeq]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTWOSeq](
	[PFTWOSeqId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[PFTWOId] [uniqueidentifier] NOT NULL,
	[PFTConfigSeqId] [uniqueidentifier] NOT NULL,
	[PFTResult] [varchar](1) NOT NULL,
	[FailureCode] [varchar](255) NULL,
	[FailureComponent] [varchar](15) NULL,
	[Comment] [nvarchar](max) NULL,
	[Hours] [decimal](10, 2) NULL,
	[UserName] [varchar](15) NULL,
	[UserId] [int] NOT NULL,
	[NCRRequestId] [int] NULL,
	[IsDebug] [bit] NOT NULL,
	[IsRTV] [bit] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
 CONSTRAINT [PK_PFWOSequences] PRIMARY KEY CLUSTERED 
(
	[PFTWOSeqId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WorkOrders]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WorkOrders](
	[WorkOrderId] [uniqueidentifier] NOT NULL,
	[WorkOrderNum] [varchar](30) NOT NULL,
	[WorkOrderType] [tinyint] NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[InventoryItemNum] [varchar](30) NOT NULL,
	[SerialNum] [varchar](30) NOT NULL,
	[AssetNumber] [varchar](10) NULL,
	[AddedBy] [varchar](15) NULL,
	[DateAdded] [datetime] NULL,
	[DateClosed] [datetime] NULL,
	[EndRNItemNum] [varchar](30) NULL,
	[StartRevision] [varchar](2) NULL,
	[EndRevision] [varchar](2) NULL,
	[OpenedBy] [varchar](15) NULL,
	[StartDate] [datetime] NULL,
	[Comments] [varchar](1024) NULL,
	[EngComments] [varchar](1024) NULL,
	[Status] [varchar](15) NULL,
	[Quantity] [decimal](18, 4) NULL,
	[EstimatedRepairCost] [decimal](18, 4) NULL,
	[EstimatedHours] [decimal](18, 4) NULL,
	[EstimatedLabor] [decimal](18, 4) NULL,
	[EstimatedMaterial] [decimal](18, 4) NULL,
	[LaborCost] [decimal](18, 4) NULL,
	[MaterialCost] [decimal](18, 4) NULL,
	[StartRNItemNum] [varchar](30) NULL,
	[CurrencyCode] [varchar](3) NULL,
	[TotalHours] [decimal](18, 4) NULL,
	[ParentWorkOrderNum] [varchar](30) NULL,
	[JDEWorkOrderNum] [varchar](30) NULL,
	[JDEParentWorkOrderNum] [varchar](30) NULL,
	[NCRRequestId] [int] NULL,
	[EndInventoryItemNum] [varchar](30) NULL,
	[HasException] [bit] NOT NULL,
	[ClosedBy] [varchar](15) NULL,
	[LevelOfRepair] [varchar](5) NULL,
 CONSTRAINT [PK_WorkOrders] PRIMARY KEY CLUSTERED 
(
	[WorkOrderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTLabs]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTLabs](
	[PFTLabId] [uniqueidentifier] NOT NULL,
	[LabName] [varchar](25) NOT NULL,
	[BranchPlant] [varchar](12) NULL,
	[LabDesc] [varchar](75) NULL,
	[DateAdded] [datetime] NULL,
 CONSTRAINT [PK_SeqLocations] PRIMARY KEY CLUSTERED 
(
	[PFTLabId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTConfig]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTConfig](
	[PFTConfigId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ProcessName] [varchar](1024) NOT NULL,
	[ProcessDesc] [varchar](1024) NULL,
	[IsDynamic] [tinyint] NOT NULL,
	[DateAdded] [datetime] NULL,
	[IsObsolete] [tinyint] NOT NULL,
	[PFTObjectId] [int] NULL,
	[ObjectNumber] [int] NULL,
 CONSTRAINT [PK_PFTConfig] PRIMARY KEY CLUSTERED 
(
	[PFTConfigId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Users]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Users](
	[UserId] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](15) NOT NULL,
	[PasswordEnc] [varbinary](255) NOT NULL,
	[FirstName] [varchar](25) NOT NULL,
	[LastName] [varchar](25) NOT NULL,
	[Active] [tinyint] NOT NULL,
	[Email] [varchar](100) NULL,
	[Notes] [varchar](500) NULL,
	[PictureLink] [varchar](50) NULL,
	[AdminLevel] [tinyint] NOT NULL,
	[WorkPhone] [varchar](25) NULL,
	[CellPhone] [varchar](25) NULL,
	[HomePhone] [varchar](25) NULL,
	[Division] [varchar](50) NULL,
	[DepartmentId] [int] NULL,
	[StartDate] [datetime] NULL,
	[JobPosition] [varchar](100) NULL,
	[ReportsTo] [int] NULL,
	[LastLoginDate] [datetime] NULL,
	[NumLoginAttempts] [smallint] NOT NULL,
	[ForceChangePassword] [tinyint] NOT NULL,
	[DefGLExpense] [varchar](35) NULL,
	[DateAdded] [datetime] NOT NULL,
	[WFTUserName] [varchar](50) NULL,
	[DefaultProductLine] [int] NULL,
	[DefaultModule] [varchar](25) NULL,
	[JDEBadgeNum] [varchar](10) NULL,
	[DefaultLanguage] [varchar](20) NULL,
	[DefaultUOM] [varchar](100) NULL,
	[EcnRestriction] [bit] NULL,
 CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTWO]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTWO](
	[PFTWOId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[WO_NO] [varchar](25) NOT NULL,
	[WorkOrderId] [uniqueidentifier] NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[AssetNumber] [varchar](10) NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[PFTConfigId] [uniqueidentifier] NULL,
	[Active] [bit] NOT NULL,
	[CurPFTWOSeqId] [uniqueidentifier] NULL,
	[UserIdAdded] [int] NOT NULL,
	[Revision] [varchar](12) NULL,
	[IsDynamic] [bit] NOT NULL,
	[ReferenceDocs] [varchar](4000) NULL,
	[SerialNum] [varchar](30) NULL,
	[IncidentNum] [varchar](50) NULL,
	[JobNum] [varchar](50) NULL,
	[Combo] [varchar](50) NULL,
	[IsDebug] [bit] NOT NULL,
	[IsRTV] [bit] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[PFTType] [tinyint] NULL,
	[FWSensorId] [uniqueidentifier] NULL,
	[SensorName] [varchar](50) NULL,
	[NCRRequestId] [int] NULL,
	[JDEWorkOrderNum] [varchar](30) NULL,
	[AssetRepairTrackId] [uniqueidentifier] NULL,
	[UpdatedBy] [int] NULL,
	[ReasonForChange] [nvarchar](4000) NULL,
 CONSTRAINT [PK_PFTWOId] PRIMARY KEY CLUSTERED 
(
	[PFTWOId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AssetRepairTrack]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AssetRepairTrack](
	[AssetRepairTrackId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ARTNumber] [varchar](25) NOT NULL,
	[ITPFTWOId] [uniqueidentifier] NULL,
	[SRPFTWOId] [uniqueidentifier] NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[SerialNum] [varchar](30) NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[ItemDesc] [varchar](60) NULL,
	[RNItemNum] [varchar](30) NULL,
	[Revision] [varchar](2) NULL,
	[AssetNumber] [varchar](10) NULL,
	[IncidentId] [uniqueidentifier] NULL,
	[JobId] [uniqueidentifier] NULL,
	[ToolStringInfoId] [uniqueidentifier] NULL,
	[NCRNumber] [int] NULL,
	[WorkOrderNum] [varchar](30) NULL,
	[FromBranchPlant] [varchar](12) NULL,
	[ShipToBranchPlant] [varchar](12) NULL,
	[Comments] [text] NULL,
	[Status] [varchar](25) NOT NULL,
	[DateClosed] [datetime] NULL,
	[IsPFTWorkOrderRequired] [bit] NOT NULL,
	[IsNCRRequired] [bit] NOT NULL,
	[PartRepairCost] [decimal](18, 4) NULL,
	[IsAssetFromField] [bit] NOT NULL,
	[IsRedTag] [bit] NOT NULL,
	[FailureCodeId] [uniqueidentifier] NULL,
	[OutOfSpecCodeId] [uniqueidentifier] NULL,
	[ProceduralCodeId] [uniqueidentifier] NULL,
	[AddedBy] [varchar](15) NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[IsIRNotificationSent] [bit] NOT NULL,
	[FailureType] [varchar](1) NULL,
	[FailureDescriptionCommentId] [uniqueidentifier] NULL,
	[CorrectiveMaintenanceCommentId] [uniqueidentifier] NULL,
	[CloseStatus] [varchar](2) NULL,
	[NeedsCustomerFeedback] [bit] NOT NULL,
	[IsNeedsCustomerFeedbackEmailSent] [bit] NOT NULL,
	[CPARId] [int] NULL,
	[DispatchNumber] [int] NULL,
	[CloseBy] [varchar](15) NULL,
 CONSTRAINT [PK_AssetRepairTrack] PRIMARY KEY CLUSTERED 
(
	[AssetRepairTrackId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwPFTWO]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwPFTWO]
AS

SELECT    PFTWO.PFTWOId, PFTWO.WO_NO, PFTWO.BranchPlant, PFTWO.AssetNumber, PFTWO.ItemNum, PFTWO.PFTConfigId, 
                      PFTWO.Active, PFTWO.CurPFTWOSeqId, PFTWO.UserIdAdded, PFTWO.DateAdded, PFTWO.IsDynamic, PFTWO.IncidentNum, 
                      PFTWO.JobNum, PFTWO.Combo, PFTWO.IsDebug, PFTWO.IsRTV, PFTConfig.ProcessName, PFTConfig.ProcessDesc, 
                      u.UserName AS UserNameAdded, PFTConfigSeq.Seq AS CurSeqNumber, PFTConfigSeq.SeqName AS CurSeqName, 
                      PFTConfigSeq.SeqDesc AS CurSeqDesc, PFTLabs.LabName AS CurLabName, 
                      i.DescShort AS DESCRIPTION, PFTWO.FixedAssetId,  
					  i.PartCode, i.ItemNumId as PartDescId, 
					  PFTWO.WorkOrderId, WorkOrders.WorkOrderNum, WorkOrders.WorkOrderType, 
					  PFTWO.ReferenceDocs, PFTWO.SerialNum, PFTWO.JDEWorkOrderNum,
					  PFTConfigSeq.IsTestDataReq, PFTConfigSeq.SendEmailOnPass, WorkOrders.DateClosed,
                          (SELECT     TOP (1) UserName
                            FROM          PFTWOSeq AS a WITH (NOLOCK)
                            WHERE      (PFTWOId = PFTWO.PFTWOId) AND (UserName IS NOT NULL)
                            ORDER BY DateAdded DESC) AS LastUserName,
                          (SELECT     TOP (1) DateAdded
                            FROM          PFTWOSeq AS a WITH (NOLOCK)
                            WHERE      (PFTWOId = PFTWO.PFTWOId) AND (UserName IS NOT NULL)
                            ORDER BY DateAdded DESC) AS LastDateAdded,  PFTWO.Revision, PFTWO.PFTType, 
                      PFTWO.FWSensorId, PFTWO.SensorName, PFTWO.NCRRequestId, PFTConfigSeq.IsCommentRequired, PFTConfigSeq.IsCommentNumeric,
					  CASE WHEN (SELECT top 1 PFTWOId FROM PFTWOSeq a WITH (NOLOCK) WHERE PFTWOId = PFTWO.PFTWOId) is not null THEN 1 ELSE 0 END AS IsSequenceDefined,
					  CASE WHEN (SELECT top 1 PFTWOId FROM PFTWOSEQ seq WITH (NOLOCK) WHERE seq.PFTWOId=PFTWO.PFTWOId AND PFTResult='F') is not null THEN 1 ELSE 0 END AS HasFailedStep,
					  ISNULL(PFTWO.AssetRepairTrackId, CASE WHEN vwARTITPFT.AssetRepairTrackId IS NOT NULL THEN vwARTITPFT.AssetRepairTrackId ELSE vwARTSRPFT.AssetRepairTrackId END) AS AssetRepairTrackId,
					  CASE WHEN vwARTITPFT.AssetRepairTrackId IS NOT NULL THEN vwARTITPFT.ARTNumber ELSE vwARTSRPFT.ARTNumber END AS ARTNumber,
					  fa.LegacySerialNumber,
					  PFTConfigSeq.IsLabourHrRequired,
					  PFTWO.ReasonForChange
FROM PFTWO WITH(NOLOCK) 
LEFT JOIN ItemNums i WITH (NOLOCK) ON i.ItemNum = PFTWO.ItemNum
LEFT OUTER JOIN WorkOrders WITH(NOLOCK) ON PFTWO.WorkOrderId = WorkOrders.WorkOrderId 
LEFT OUTER JOIN PFTConfigSeq WITH(NOLOCK) ON PFTWO.CurPFTWOSeqId = PFTConfigSeq.PFTConfigSeqId 
LEFT OUTER JOIN PFTLabs WITH(NOLOCK) ON PFTLabs.PFTLabId = PFTConfigSeq.PFTLabId 
LEFT OUTER JOIN Users u WITH(NOLOCK) ON PFTWO.UserIdAdded = u.UserId 
LEFT OUTER JOIN PFTConfig WITH(NOLOCK) ON PFTWO.PFTConfigId = PFTConfig.PFTConfigId 
LEFT OUTER JOIN PFTWOSeq WITH(NOLOCK) ON PFTWO.CurPFTWOSeqId = PFTWOSeq.PFTWOSeqId 
LEFT OUTER JOIN AssetRepairTrack AS vwARTITPFT WITH(NOLOCK) ON vwARTITPFT.ITPFTWOId = PFTWO.PFTWOId 
LEFT OUTER JOIN AssetRepairTrack AS vwARTSRPFT WITH(NOLOCK) ON vwARTSRPFT.SRPFTWOId = PFTWO.PFTWOId
LEFT OUTER JOIN FixedAssets AS fa WITH(NOLOCK) ON fa.AssetNumber = PFTWO.AssetNumber
GO
/****** Object:  Table [dbo].[PFTConfigSequenceObjects]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTConfigSequenceObjects](
	[PFTConfigSequenceObjectId] [int] IDENTITY(1,1) NOT NULL,
	[PFTConfigSequenceId] [uniqueidentifier] NULL,
	[PFTObjectId] [int] NULL,
	[DateAdded] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[PFTConfigSequenceObjectId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTObjectMappings]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTObjectMappings](
	[ObjectMappingId] [int] IDENTITY(1,1) NOT NULL,
	[ParentId] [int] NOT NULL,
	[ObjectId] [int] NOT NULL,
	[SequenceNumber] [int] NOT NULL,
	[CreatedBy] [varchar](20) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL,
 CONSTRAINT [PK_PFTObjectMappings] PRIMARY KEY CLUSTERED 
(
	[ObjectMappingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[VwPFTConfigObjects]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 /*===============================================================
CREATED BY : SUYEB MOHAMMAD
CREATED ON : 15 Sep 2017
DESCRIPTION: To get PFT config sequence data
====================================================
TASK 57717: Added IsLabourHrRequired - Sachin Mhalungekar - 9/5/18
Added IsisSupervisorSignOff - 21/9/20
====================================================*/
CREATE VIEW [dbo].[VwPFTConfigObjects]
AS
SELECT       
	WO.PFTWOId, CS.PFTConfigSeqId AS PFTConfigSequenceId,
	ISNULL(OM.PFTObjectId, 0) AS ObjectId,
    POM.SequenceNumber AS ChildSequenceNumber , 
    ISNULL(cs.ObjectId, 0) AS StepObjectId,
    CS.Seq AS SequenceNumber, 
    CS.SeqName AS SequenceName, 
    CS.SeqDesc AS SequenceDescription, 
    ISNULL(CAST(CS.IsCommentRequired AS int), 0) AS IsCommentRequired, 
    ISNULL(CAST(CS.IsCommentNumeric AS int), 0) AS IsCommentNumeric, 
    WO.Active AS IsPFTActive, ISNULL(CAST(CS.IsTestDataReq AS int), 0) 
    AS IsTestDataReq, 
    ISNULL(CAST(CS.IsLabourHrRequired AS int), 0) AS IsLabourHrRequired,
	ISNULL(CAST(CS.IsSupervisorSignOff AS int), 0) AS IsSupervisorSignOff
FROM            dbo.PFTWO AS WO 
				LEFT OUTER JOIN dbo.PFTConfigSeq AS CS ON CS.PFTConfigSeqId = WO.CurPFTWOSeqId 
				LEFT OUTER JOIN dbo.PFTConfigSequenceObjects AS OM ON OM.PFTConfigSequenceId = CS.PFTConfigSeqId 
				LEFT JOIN dbo.PFTObjectMappings AS POM ON POM.ParentId = CS.ObjectId AND POM.ObjectId=OM.PFTObjectId
                         


GO
/****** Object:  View [dbo].[vwPFTConfigSeq]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO



CREATE VIEW [dbo].[vwPFTConfigSeq]
AS

select pftcs.PFTConfigSeqId, pftcs.PFTConfigId, pftcs.Seq, pftcs.SeqName, pftcs.PFTLabId, pftcs.SeqDesc, pftcs.IsTestDataReq, 
pftcs.SendEmailOnPass, pftcs.DateAdded, pftcs.IsCommentRequired, pftcs.IsCommentNumeric, 
ISNULL((SELECT top 1 1 FROM PFTWOSeq (NOLOCK) pftwos WHERE pftwos.PFTConfigSeqId = pftcs.PFTConfigSeqId),0) as IsSequenceInUse
from PFTConfigSeq (NOLOCK) pftcs



GO
/****** Object:  Table [dbo].[PFTWOForms]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTWOForms](
	[PFTWOFormId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[PFTWOId] [uniqueidentifier] NOT NULL,
	[PFTConfigId] [uniqueidentifier] NOT NULL,
	[ObjectId] [int] NULL,
	[Result] [varchar](1) NULL,
	[UserId] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
 CONSTRAINT [PK_PFTWOForms] PRIMARY KEY CLUSTERED 
(
	[PFTWOFormId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTWOFormCollections]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTWOFormCollections](
	[PFTWOFormCollectionId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[PFTWOFormId] [uniqueidentifier] NOT NULL,
	[PFTConfigSeqId] [uniqueidentifier] NOT NULL,
	[ObjectId] [int] NULL,
	[Result] [varchar](1) NULL,
	[UserId] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
 CONSTRAINT [PK_PFTWOFormCollections] PRIMARY KEY CLUSTERED 
(
	[PFTWOFormCollectionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[VW_PFTWOFormCollections]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================  
-- Author:  Sachin Mhalungekar
-- Create date: 11/11/2019  
-- Description: Get PFT Work Order Form collection data
-- =============================================  
CREATE VIEW [dbo].[VW_PFTWOFormCollections]
AS 
SELECT 
		pwfs.PFTWOFormId,
		pwfc.PFTWOFormCollectionId,
		pwfs.PFTWOId,
		pwfc.PFTConfigSeqId,
		pwfs.ObjectId [FormObjectId],
		pwfs.Result [FormResult],
		pwfc.ObjectId [SeqObjectId],
		pwfc.Result [CollectionResult],
		pcs.PFTConfigId,
		pcs.Seq,
		pcs.SeqName,
		pcs.PFTLabId,
		pcs.SeqDesc,
		pcs.IsTestDataReq,
		pcs.SendEmailOnPass,
		pwfc.DateAdded,
		pcs.IsCommentRequired,
		pcs.IsCommentNumeric,
		pcs.EstimatedHours,
		pcs.IsLabourHrRequired,
		pc.PFTObjectId 
FROM	PFTWOForms pwfs
JOIN	PFTWOFormCollections pwfc on pwfs.PFTWOFormId = pwfc.PFTWOFormId
JOIN	PFTConfigSeq pcs	on pcs.PFTConfigSeqId = pwfc.PFTConfigSeqId
JOIN	PFTConfig pc		on pc.PFTConfigId = pcs.PFTConfigId

GO
/****** Object:  Table [dbo].[PFTWOSeqFields]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTWOSeqFields](
	[PFTWOSeqFieldId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[PFTWOSeqId] [uniqueidentifier] NOT NULL,
	[ObjectId] [int] NULL,
	[FieldResult] [varchar](1) NOT NULL,
	[UOM] [varchar](100) NULL,
	[Result] [varchar](100) NULL,
	[ResultInEmpirical] [varchar](100) NULL,
	[TextResult1] [varchar](100) NULL,
	[TextResult2] [varchar](100) NULL,
	[TextResult3] [varchar](100) NULL,
	[TextResult4] [varchar](100) NULL,
	[SequenceNumber] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
 CONSTRAINT [PK_PFWOSeqFields] PRIMARY KEY CLUSTERED 
(
	[PFTWOSeqFieldId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTObjects]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTObjects](
	[ObjectId] [int] IDENTITY(1,1) NOT NULL,
	[ObjectNumber] [int] NOT NULL,
	[Revision] [int] NOT NULL,
	[Type] [int] NOT NULL,
	[Name] [varchar](1024) NULL,
	[Description] [varchar](8000) NULL,
	[ProductLineId] [int] NOT NULL,
	[State] [int] NOT NULL,
	[Field1] [varchar](100) NULL,
	[Field2] [varchar](100) NULL,
	[Field3] [varchar](100) NULL,
	[Field4] [varchar](100) NULL,
	[Field5] [varchar](100) NULL,
	[CreatedBy] [varchar](20) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL,
	[ReasonForChange] [varchar](4000) NULL,
	[Field6] [varchar](100) NULL,
	[Field7] [varchar](100) NULL,
	[Field8] [varchar](100) NULL,
	[Field9] [varchar](100) NULL,
	[Field10] [varchar](100) NULL,
	[Field11] [varchar](100) NULL,
	[Field12] [varchar](100) NULL,
	[Field13] [varchar](100) NULL,
	[Field14] [varchar](100) NULL,
	[Field15] [varchar](100) NULL,
 CONSTRAINT [PK_Pftobject] PRIMARY KEY CLUSTERED 
(
	[ObjectId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTBlobObjects]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTBlobObjects](
	[BlobObjectId] [int] IDENTITY(1,1) NOT NULL,
	[ObjectId] [int] NOT NULL,
	[BlobContent] [varbinary](max) NOT NULL,
 CONSTRAINT [PK_PFTBlobObjects] PRIMARY KEY CLUSTERED 
(
	[BlobObjectId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[VW_PFTObjectSeqFields]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
-- =============================================    
-- Author:  Sachin Mhalungekar  
-- Create date: 09/22/2019    
-- Description: Get PFT Object for PFT for fields  
-- =============================================    
CREATE VIEW [dbo].[VW_PFTObjectSeqFields]            
AS                    
SELECT Distinct p.ObjectId,                    
 p.ObjectNumber,                    
 p.Revision,              
 p.Type [ObjectType],                   
 p.Name [PFTObjectName],                    
 p.Description [PFTObjectDescription],                  
 p.State [ObjectState],            
 CASE WHEN p.Type = 3 THEN (SELECT TOP 1 BlobContent FROM PFTBlobObjects WHERE ObjectId = p.ObjectId) ELSE p.Field1 END [Field1],                   
 Field1Name,                    
 p.Field2,  
 CASE    
      WHEN (p.type = 5 and Field1Name='Number') THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = p.Field2)                          
  Else Null END [Field2Name],                
 p.Field3,                    
 p.Field4,     
  CASE    
      WHEN p.type = 5 AND p.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'MathSign' and OptionValue = p.Field4)                          
  Else p.Field4 END [Field4Name],                    
 CASE WHEN ISNULL(pwfc.UOM,'') != '' THEN pwfc.UOM ELSE p.Field5 END [Field5],           
 CASE    
      WHEN p.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = p.Field5)                          
 ELSE  p.Field5  END [Field5Name],              
 p.Field6,  
 p.Field7,  
 p.Field8,  
 p.Field9,  
 p.Field10,  
 p.Field11,  
 CASE    
      WHEN p.type = 5 AND p.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = p.Field11)                          
  Else p.Field11 END [Field11Name],   
 p.Field12,  
 CASE    
      WHEN p.type = 5 AND p.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = p.Field12)                          
  Else p.Field12 END [Field12Name],   
 p.Field13,  
 CASE    
      WHEN p.type = 5 AND p.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = p.Field13)                          
  Else p.Field13 END [Field13Name],   
 p.Field14,  
 p.Field15,  
 pwfs.PFTConfigSeqId,  
 pwfs.PFTWOSeqId,  
 pwfc.PFTWOSeqFieldId,  
 pwfc.Result,   
 CASE WHEN Field1Name = 'Simple Choice' AND Field2 = 'yesno' AND pwfc.Result ='Yes' THEN CAST (1 AS BIT)  
  WHEN Field1Name = 'Simple Choice' AND Field2 = 'passfail' AND pwfc.Result ='Pass' THEN CAST (1 AS BIT) 
  ELSE CAST (0 AS BIT) END Result1 ,  
 pwfc.UOM,  
 pwfc.ResultInEmpirical,  
 pwfc.TextResult1,  
 pwfc.TextResult2,  
 pwfc.TextResult3,  
 pwfc.TextResult4,  
 pwfc.UserId,  
 pwfc.DateAdded,  
 pwfc.FieldResult,  
 pom.SequenceNumber  
 FROM PFTWOSeq (NOLOCK) pwfs
 JOIN PFTConfigSeq (NOLOCK) pcs ON pwfs.PFTConfigSeqId = pcs.PFTConfigSeqId 
 JOIN PFTObjectMappings (NOLOCK) pom ON pom.ParentId = pcs.ObjectId  
 JOIN PFTObjects (NOLOCK) p     ON p.ObjectId = pom.ObjectId   
 LEFT JOIN PFTWOSeqFields (NOLOCK) pwfc on pwfc.PFTWOSeqId = pwfs.PFTWOSeqId AND pwfc.ObjectId = p.ObjectId AND pwfc.SequenceNumber = pom.SequenceNumber  
--- For Field Name   
CROSS APPLY (select CASE WHEN p.Type = 1 THEN   
  (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'PFTConfigType' AND OptionValue = p.Field1 )                     
           WHEN p.type = 2 THEN (SELECT LabName FROM PFTLabs WHERE PFTLabId = p.Field1)                     
      WHEN p.type = 4 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'MessageIcon' AND OptionValue = p.Field1  )   
      WHEN p.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldType' AND OptionValue = p.Field1  )   
  Else p.Field1 END [Field1Name]  )   as Field1Name

GO
/****** Object:  View [dbo].[VwPFTWOPFTConfigObjects]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*===============================================================  
CREATED BY : SACHIN MHALUNGEKAR 
CREATED ON : 18 Sep 2020
DESCRIPTION: To get PFT config sequence data  
====================================================  
TASK : Added  - user - date 
====================================================*/  
CREATE VIEW [dbo].[VwPFTWOPFTConfigObjects]  
AS  
SELECT           
  WO.PFTWOId,   
  CS.PFTConfigSeqId AS PFTConfigSequenceId,  
  ISNULL(cs.ObjectId, 0) AS ObjectId,    
  POM.SequenceNumber AS ChildSequenceNumber ,     
  ISNULL(cs.ObjectId, 0) AS StepObjectId,    
  CS.Seq AS SequenceNumber,     
  CS.SeqName AS SequenceName,     
  CS.SeqDesc AS SequenceDescription,     
  ISNULL(CAST(CS.IsCommentRequired AS int), 0) AS IsCommentRequired,     
  ISNULL(CAST(CS.IsCommentNumeric AS int), 0) AS IsCommentNumeric,     
  WO.Active AS IsPFTActive,   
  ISNULL(CAST(CS.IsTestDataReq AS int), 0)  AS IsTestDataReq,     
  ISNULL(CAST(CS.IsLabourHrRequired AS int), 0) AS IsLabourHrRequired,  
  PWS.PFTResult,  
  PWS.Comment,  
  PWS.Hours,  
  pws.IsRTV ,  
  PWS.PFTWOSeqId,  
  WO.PFTType,  
  ISNULL(CAST(cs.isSupervisorSignOff AS int), 0)  AS IsSupervisorSignOff,  
  CAST(CASE WHEN WO.Active = 0 THEN 0 WHEN wo.PFTType=4 AND pws.PFTResult = 'F' THEN 0 ELSE 1 END AS BIT) IsSeqEditable  
FROM  dbo.PFTWO (NOLOCK) WO   
JOIN  PFTWOSeq (NOLOCK) PWS      ON PWS.PFTWOId = WO.PFTWOId  
JOIN  dbo.PFTConfigSeq (NOLOCK) CS    ON CS.PFTConfigSeqId = PWS.PFTConfigSeqId   
LEFT JOIN dbo.PFTConfigSequenceObjects (NOLOCK) OM ON OM.PFTConfigSequenceId = CS.PFTConfigSeqId   
LEFT JOIN   dbo.PFTObjectMappings (NOLOCK) POM   ON POM.ParentId = CS.ObjectId AND POM.ObjectId=OM.PFTObjectId    
                           
  
GO
/****** Object:  View [dbo].[vwPFTWOSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwPFTWOSearch] AS

SELECT    PFTWO.PFTWOId, 
          PFTWO.WO_NO,
          t.OptionLabel AS [PFTTypeName],
          PFTWO.PFTType,
          PFTWO.AssetNumber,
          PFTWO.SerialNum,
          PFTWO.ItemNum,
          PFTWO.Combo,
          PFTWO.JobNum,
          PFTWO.BranchPlant,
		  PFTWO.IsDebug,
		  PFTWO.IsRTV,
		  PFTWO.PFTConfigId,
          PFTConfig.ProcessDesc, 
          Users.UserName AS UserNameAdded,
		  PFTWO.CurPFTWOSeqId,
          PFTConfigSeq.Seq AS CurSeqNumber,
          PFTConfig.ProcessName, 
          PFTConfigSeq.SeqName AS CurSeqName,
		  PFTWO.FixedAssetId,
          ItemNums.DescShort AS DESCRIPTION,
          PFTWO.Active,
          PFTWO.DateAdded,
          PFTWO.JDEWorkOrderNum,
          (SELECT     TOP (1) UserName
                            FROM          PFTWOSeq (NOLOCK)  AS a
                            WHERE      (PFTWOId = PFTWO.PFTWOId) AND (UserName IS NOT NULL)
                            ORDER BY DateAdded DESC) AS LastSeqUserName,
          (SELECT     TOP (1) DateAdded
                            FROM          PFTWOSeq (NOLOCK)  AS a
                            WHERE      (PFTWOId = PFTWO.PFTWOId) AND (UserName IS NOT NULL)
                            ORDER BY DateAdded DESC) AS LastSeqDateAdded,
          PFTWO.NCRRequestId,
          PFTWO.WorkOrderId,
          WorkOrders.WorkOrderNum, WorkOrders.WorkOrderType,
          bp.CompanyName as BranchPlantName,
          PFTWO.AssetRepairTrackId,
		  PFTWO.ReasonForChange,
		  PFTConfig.PFTObjectId,
		  CASE WHEN PFTWO.DateAdded < '2021-08-13' THEN 1 ELSE 0 END AS [IsOldPFTWO]
		  -- Flag for new strcture pft or not 
		  ,CAST(CASE WHEN ItemNums.EcnRestriction = 1 THEN 1 ELSE 0 END AS BIT) [EcnRestriction],
			bp.IsNonLiveLocation [BranchPlantIsLive]
FROM PFTWO WITH(NOLOCK) 
LEFT OUTER JOIN FixedAssets WITH(NOLOCK) ON FixedAssets.FixedAssetId = PFTWO.FixedAssetId 
LEFT OUTER JOIN ItemNums WITH(NOLOCK) ON ItemNums.ItemNum = PFTWO.ItemNum 
LEFT OUTER JOIN PFTConfigSeq WITH(NOLOCK) ON PFTWO.CurPFTWOSeqId = PFTConfigSeq.PFTConfigSeqId 
LEFT OUTER JOIN WorkOrders WITH(NOLOCK) ON PFTWO.WorkOrderId = WorkOrders.WorkOrderId 
LEFT OUTER JOIN Users AS Users WITH(NOLOCK) ON PFTWO.UserIdAdded = Users.UserId 
LEFT OUTER JOIN PFTConfig WITH(NOLOCK) ON PFTWO.PFTConfigId = PFTConfig.PFTConfigId 
LEFT OUTER JOIN BranchPlants bp WITH(NOLOCK) ON bp.BranchPlant = PFTWO.BranchPlant
JOIN SelectOptions t ON PFTWO.PFTType = t.OptionValue and t.SelectName = 'PFTConfigType' 


GO
/****** Object:  Table [dbo].[DocItemAttach]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DocItemAttach](
	[DocItemAttachId] [uniqueidentifier] NOT NULL,
	[DocItemAttachType] [varchar](16) NOT NULL,
	[DocItemId] [int] NOT NULL,
	[KeyId] [int] NULL,
	[SubKeyId] [int] NULL,
	[SubKeyName] [varchar](25) NULL,
	[GuidKeyId] [uniqueidentifier] NULL,
	[LegacyKeyId] [int] NULL,
 CONSTRAINT [PK_DocItemAttach] PRIMARY KEY CLUSTERED 
(
	[DocItemAttachId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwPFTWOSeq]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--===================================================
--MODIFIED BY: SUYEB MOHAMMAD
--MODIFIED ON: 21 Oct 2016
--DESCRIPTION: To get attachment info for pft sequence
--====================================================
--TASK 57717: Added IsLabourHrRequired - Sachin Mhalungekar - 8/5/18
--====================================================
CREATE VIEW [dbo].[vwPFTWOSeq]
AS
SELECT (CASE WHEN (SELECT COUNT(*) 
					FROM DocItemAttach DA(NOLOCK) 
					WHERE DA.GuidKeyId = PFTWOSeq.PFTWOId AND PFTConfigSeq.Seq=DA.SubKeyId) > 0
			 THEN 1 ELSE 0 END) AS HasAttachment, 
  PFTWOSeq.PFTWOSeqId, 
  PFTWOSeq.PFTWOId, 
  PFTWOSeq.PFTResult, 
  PFTWOSeq.PFTConfigSeqId, 
  PFTWOSeq.FailureCode, 
  PFTWOSeq.FailureComponent, 
  PFTWOSeq.Comment, 
  PFTWOSeq.UserId, 
  PFTWOSeq.DateAdded, 
  PFTWOSeq.IsDebug, 
  PFTWOSeq.IsRTV, 
  PFTConfigSeq.Seq, 
  PFTConfigSeq.SeqName, 
  PFTConfigSeq.PFTLabId, 
  PFTConfigSeq.SeqDesc, 
  PFTLabs.LabName, 
  SelectOptions.OptionLabel AS PFTResultDesc, 
  Users.UserName AS UserNameSess, 
  PFTWOSeq.Hours, 
  PFTWOSeq.UserName, 
  PFTWOSeq.NCRRequestId, 
  PFTConfigSeq.IsCommentRequired, 
  PFTConfigSeq.IsLabourHrRequired,
  PFTWO.AssetRepairTrackId,
  PFTConfigSeq.ObjectId,
  PFTConfigSeq.IsTestDataReq
FROM PFTWOSeq (NOLOCK)
JOIN PFTWO (NOLOCK) ON PFTWOSeq.PFTWOId = PFTWO.PFTWOId 
LEFT OUTER JOIN Users (NOLOCK) ON Users.UserId = PFTWOSeq.UserId 
LEFT OUTER JOIN SelectOptions (NOLOCK) ON SelectOptions.OptionValue = PFTWOSeq.PFTResult AND SelectOptions.SelectName='PFTResults'
LEFT OUTER JOIN PFTConfigSeq (NOLOCK) ON PFTWOSeq.PFTConfigSeqId = PFTConfigSeq.PFTConfigSeqId
LEFT OUTER JOIN PFTLabs (NOLOCK) ON PFTLabs.PFTLabId = PFTConfigSeq.PFTLabId
GO
/****** Object:  View [dbo].[vwPFTSequenceSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwPFTSequenceSearch] as
SELECT  
		  pftseq.PFTWOSeqId,
		  pftconfig.Seq AS SeqNumber,
		  pftconfig.SeqName,
		  (CASE WHEN itAIRT.AssetRepairTrackId IS NOT NULL THEN itAIRT.AssetRepairTrackId ELSE srAIRT.AssetRepairTrackId END) as AssetRepairTrackId,
		  (CASE WHEN itAIRT.AssetRepairTrackId IS NOT NULL THEN itAIRT.ARTNumber ELSE srAIRT.ARTNumber END) as ARTNumber,
		  pft.PFTWOId, 
          pft.WO_NO as PFTNumber,
          pft.SerialNum,
          pft.ItemNum,
          fa.RNItemNum,
          IsNull(i.DescShort, ri.DescShort) as ItemDescription,
          pft.AssetNumber,
          ISNULL(ri.ToolPanel, i.ToolPanel) as ToolPanel,
          ISNULL(ri.ToolCode, i.ToolCode) as ToolCode,
          (CASE WHEN itAIRT.AssetRepairTrackId IS NOT NULL THEN itAIRTRegion.RegionDesc ELSE srAIRTRegion.RegionDesc END) as AIRTOriginatingRegion,
          (CASE WHEN itAIRT.AssetRepairTrackId IS NOT NULL THEN itAIRT.FromBranchPlant ELSE srAIRT.FromBranchPlant END) as AIRTOriginatingBranchPlant,
          (CASE WHEN itAIRT.AssetRepairTrackId IS NOT NULL THEN itAIRTBP.CompanyName ELSE srAIRTBP.CompanyName END) as AIRTOriginatingBranchPlantName,
          pft.DateAdded,
          (CASE WHEN itAIRT.AssetRepairTrackId IS NOT NULL THEN itAIRT.Status ELSE srAIRT.Status END) as Status,
          pft.Active,
          pft.WorkOrderId,
          wo.WorkOrderNum,
          wo.JDEWorkOrderNum,
          pftseqresult.OptionLabel as PFTResult,
          pftseq.Comment as PFTSequenceComment
FROM PFTWOSeq(NOLOCK) pftseq
LEFT JOIN PFTWO(NOLOCK) pft ON pft.PFTWOId = pftseq.PFTWOId
LEFT JOIN PFTConfigSeq(NOLOCK) pftconfig ON pftconfig.PFTConfigSeqId = pftseq.PFTConfigSeqId
LEFT JOIN FixedAssets(NOLOCK) fa ON fa.FixedAssetId = pft.FixedAssetId
LEFT JOIN ItemNums(NOLOCK) i ON i.ItemNum = pft.ItemNum
LEFT JOIN ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
LEFT JOIN WorkOrders(NOLOCK) wo ON wo.WorkOrderId = pft.WorkOrderId
LEFT OUTER JOIN SelectOptions(NOLOCK) pftseqresult ON pftseqresult.OptionValue = pftseq.PFTResult AND pftseqresult.SelectName = 'PFTResults'


LEFT JOIN AssetRepairTrack(NOLOCK) itAIRT ON itAIRT.ITPFTWOId = pft.PFTWOId
LEFT JOIN BranchPlants(NOLOCK) itAIRTBP ON itAIRTBP.BranchPlant = itAIRT.FromBranchPlant
LEFT JOIN Regions(NOLOCK) itAIRTRegion ON itAIRTRegion.Region = itAIRTBP.Region

LEFT JOIN AssetRepairTrack(NOLOCK) srAIRT ON srAIRT.SRPFTWOId = pft.PFTWOId
LEFT JOIN BranchPlants(NOLOCK) srAIRTBP ON srAIRTBP.BranchPlant = srAIRT.FromBranchPlant
LEFT JOIN Regions(NOLOCK) srAIRTRegion ON srAIRTRegion.Region = srAIRTBP.Region

GO
/****** Object:  View [dbo].[vwPCBPFTReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwPCBPFTReport] AS

SELECT TOP 100 PERCENT NEWID() as Id,
	pft.ItemNum, 
	i.ItemNumId, 
	i.DescShort,
	pft.BranchPlant, 
	pftc.ProcessName, 
	pftc.ProcessDesc, 
	pft.PFTConfigId, 
	COUNT(*) as SequenceCount,
	pftcs.Seq as CurrentSequenceNumber ,
	(pftcs.SeqName + ' (' + ltrim(str(pftcs.Seq)) + ')') as CurrentSequenceName, 
	CurPFTWOSeqId,
	(SELECT COUNT(*) FROM PFTWO(NOLOCK)
		LEFT OUTER JOIN PFTConfigSeq(NOLOCK) ON PFTConfigSeq.PFTConfigSeqId = PFTWO.CurPFTWOSeqId
		WHERE ItemNum = pft.ItemNum AND PFTConfigSeq.SeqName + ' (' + ltrim(str(PFTConfigSeq.Seq)) + ')' = pftcs.SeqName + ' (' + ltrim(str(pftcs.Seq)) + ')' 
		AND Active = 1 AND IsRTV = 1
	) As IsRTVCount,
	(SELECT COUNT(*) FROM PFTWO(NOLOCK)
		LEFT OUTER JOIN PFTConfigSeq(NOLOCK) ON PFTConfigSeq.PFTConfigSeqId = PFTWO.CurPFTWOSeqId
		WHERE ItemNum = pft.ItemNum AND PFTConfigSeq.SeqName + ' (' + ltrim(str(PFTConfigSeq.Seq)) + ')' = pftcs.SeqName + ' (' + ltrim(str(pftcs.Seq)) + ')' 
		AND Active = 1 AND IsDebug = 1
	) As IsDebugCount,
	0 as SalesPrice
FROM PFTWO(NOLOCK) pft
LEFT JOIN ItemNums(NOLOCK) i  ON i.ItemNum = pft.ItemNum
LEFT OUTER JOIN PFTConfigSeq(NOLOCK) pftcs ON pftcs.PFTConfigSeqId = pft.CurPFTWOSeqId
LEFT OUTER JOIN PFTConfig(NOLOCK) pftc ON pftc.PFTConfigId = pft.PFTConfigId
WHERE pft.Active = 1
AND pftcs.Seq IS NOT NULL 
AND i.ItemNum IN (Select OptionValue from SelectOptions(NOLOCK) Where SelectName = 'PCBPFTItemNums')
AND pft.BranchPlant IN(Select BranchPlant from BranchPlants WITH(NOLOCK) Where BaseCode = 'AC')
GROUP BY pft.ItemNum, i.ItemNumId, i.DescShort, pft.BranchPlant, pftc.ProcessName, pftc.ProcessDesc, pft.PFTConfigId, (pftcs.SeqName + ' (' + ltrim(str(pftcs.Seq)) + ')'), pftcs.Seq, CurPFTWOSeqId--, ibp.StdUnitCost
ORDER BY pft.ItemNum, pftcs.Seq ASC

GO
/****** Object:  View [dbo].[vwPCBPFTReportInventory]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwPCBPFTReportInventory] AS

SELECT TOP 100 PERCENT NEWID() as Id,
	pft.ItemNum, 
	i.DescShort,
	0 AS AvailableQty,
	0 AS SalesPrice,
	0 AS TotalPrice
FROM PFTWO(NOLOCK) pft
LEFT JOIN ItemNums(NOLOCK) i  ON i.ItemNum = pft.ItemNum
LEFT OUTER JOIN PFTConfigSeq(NOLOCK) pftcs ON pftcs.PFTConfigSeqId = pft.CurPFTWOSeqId
--LEFT OUTER JOIN PFTConfig(NOLOCK) pftc ON pftc.PFTConfigId = pft.PFTConfigId
WHERE pft.Active = 1
AND pftcs.Seq IS NOT NULL 
AND i.ItemNum IN (Select OptionValue from SelectOptions(NOLOCK) Where SelectName = 'PCBPFTItemNums')
AND pft.BranchPlant IN(Select BranchPlant from BranchPlants WITH(NOLOCK) Where BaseCode = 'AC')
GROUP BY pft.ItemNum, i.DescShort
ORDER BY pft.ItemNum

GO
/****** Object:  Table [dbo].[PartDescPFTConfigs]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PartDescPFTConfigs](
	[PartDescPFTConfigID] [uniqueidentifier] NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[PFTConfigID] [uniqueidentifier] NOT NULL,
	[PFTType] [tinyint] NOT NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_PartDescPFTConfigs] PRIMARY KEY CLUSTERED 
(
	[PartDescPFTConfigID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwPFTConfig]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO



CREATE VIEW [dbo].[vwPFTConfig]
AS

select pftc.PFTConfigId, pftc.ProcessName, pftc.ProcessDesc, pftc.IsDynamic, pftc.DateAdded, pftc.IsObsolete,  
IsNull((select top 1 1 FROM PFTWO (NOLOCK) pftwo WHERE pftwo.PFTConfigId = pftc.PFTConfigId), 0) as IsUsedInPFT,
ISNull((SELECT top 1 1 FROM PFTWOSeq (NOLOCK) WHERE PFTConfigSeqId IN 
(SELECT PFTConfigSeqId FROM PFTConfigSeq (NOLOCK) pftcs WHERE pftcs.PFTConfigId = pftc.PFTConfigId)),0) as IsPFTConfigSeqInUse,
ISNull((SELECT top 1 1 FROM (
        SELECT PFTConfigId FROM PFTWO (NOLOCK) pftwo WHERE pftwo.PFTConfigId = pftc.PFTConfigId
        UNION
        SELECT PFTConfigId FROM PartDescPFTConfigs (NOLOCK) pdpftc WHERE pdpftc.PFTConfigID = pftc.PFTConfigId
        ) a ),0) as IsPFTConfigInUse
from dbo.PFTConfig (NOLOCK) pftc



GO
/****** Object:  Table [dbo].[MudData]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MudData](
	[MudDataID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NULL,
	[MudTypeStart] [varchar](50) NULL,
	[MudTypeEnd] [varchar](50) NULL,
	[DensityStart] [float] NULL,
	[DensityEnd] [float] NULL,
	[DensityMax] [float] NULL,
	[DensityMin] [float] NULL,
	[DensityUnits] [varchar](10) NULL,
	[FunnelViscosityStart] [float] NULL,
	[FunnelViscosityEnd] [float] NULL,
	[FunnelViscosityMin] [float] NULL,
	[FunnelViscosityMax] [float] NULL,
	[FunnelViscosityUnits] [varchar](10) NULL,
	[OilPercentageStart] [float] NULL,
	[OilPercentageEnd] [float] NULL,
	[OilPercentageMin] [float] NULL,
	[OilPercentageMax] [float] NULL,
	[WaterPercentageStart] [float] NULL,
	[WaterPercentageEnd] [float] NULL,
	[WaterPercentageMin] [float] NULL,
	[WaterPercentageMax] [float] NULL,
	[SandPercentageStart] [float] NULL,
	[SandPercentageEnd] [float] NULL,
	[SandPercentageMax] [float] NULL,
	[SandPercentageMin] [float] NULL,
	[SolidPercentageStart] [float] NULL,
	[SolidPercentageEnd] [float] NULL,
	[SolidPercentageMax] [float] NULL,
	[SolidPercentageMin] [float] NULL,
	[PVStart] [float] NULL,
	[PVEnd] [float] NULL,
	[PVMin] [float] NULL,
	[PVMax] [float] NULL,
	[PVUnits] [varchar](10) NULL,
	[LCMStart] [float] NULL,
	[LCMEnd] [float] NULL,
	[LCMMax] [float] NULL,
	[LCMMin] [float] NULL,
	[LCMUnits] [varchar](10) NULL,
	[LCMTypeGradeStart] [varchar](50) NULL,
	[LCMTypeGradeEnd] [varchar](50) NULL,
	[pHStart] [float] NULL,
	[pHEnd] [float] NULL,
	[pHMin] [float] NULL,
	[pHMax] [float] NULL,
	[KClStart] [float] NULL,
	[KClEnd] [float] NULL,
	[KClMax] [float] NULL,
	[KClMin] [float] NULL,
	[KClUnits] [varchar](10) NULL,
	[NaClStart] [float] NULL,
	[NaClEnd] [float] NULL,
	[NaClMax] [float] NULL,
	[NaClMin] [float] NULL,
	[NaClUnits] [varchar](10) NULL,
	[CaClStart] [float] NULL,
	[CaClEnd] [float] NULL,
	[CaClMax] [float] NULL,
	[CaClMin] [float] NULL,
	[CaClUnits] [varchar](10) NULL,
	[TotalChloridesStart] [float] NULL,
	[TotalChloridesEnd] [float] NULL,
	[TotalChloridesMax] [float] NULL,
	[TotalChloridesMin] [float] NULL,
	[TotalChloridesUnits] [varchar](10) NULL,
	[EqvNaClStart] [float] NULL,
	[EqvNaClEnd] [float] NULL,
	[EqvNaClMax] [float] NULL,
	[EqvNaClMin] [float] NULL,
	[EqvNaClUnits] [varchar](10) NULL,
	[BoreHoleTempStart] [float] NULL,
	[BoreHoleTempEnd] [float] NULL,
	[BoreHoleTempMax] [float] NULL,
	[BoreHoleTempMin] [float] NULL,
	[BoreHoleTempUnits] [varchar](10) NULL,
	[AVATMWDStart] [float] NULL,
	[AVATMWDEnd] [float] NULL,
	[AVATMWDUnits] [varchar](10) NULL,
	[CVATMWDStart] [float] NULL,
	[CVATMWDEnd] [float] NULL,
	[CVATMWDUnits] [varchar](10) NULL,
	[TemperatureVerified] [tinyint] NULL,
	[BaseFluidStart] [varchar](50) NULL,
	[BaseFluidEnd] [varchar](50) NULL,
	[GasTypeStart] [varchar](50) NULL,
	[GasTypeEnd] [varchar](50) NULL,
	[WaterLossStart] [float] NULL,
	[WaterLossEnd] [float] NULL,
	[WaterLossMin] [float] NULL,
	[WaterLossMax] [float] NULL,
	[WaterLostUnits] [varchar](10) NULL,
	[YieldPointStart] [float] NULL,
	[YieldPointEnd] [float] NULL,
	[YieldPointMin] [float] NULL,
	[YieldPointMax] [float] NULL,
	[YieldPointUnits] [varchar](10) NULL,
	[GELStart] [float] NULL,
	[GELEnd] [float] NULL,
	[GELMin] [float] NULL,
	[GELMax] [float] NULL,
	[GELUnits] [varchar](10) NULL,
 CONSTRAINT [PK_MudData_MudDataID] PRIMARY KEY CLUSTERED 
(
	[MudDataID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BHA]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BHA](
	[BHAID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NULL,
	[BHANumber] [varchar](50) NULL,
	[BHAType] [varchar](50) NULL,
	[Torque] [float] NULL,
	[TorqueUOM] [varchar](10) NULL,
	[WeightOnBit] [float] NULL,
	[WeightOnBitUOM] [varchar](10) NULL,
	[ShockSub] [varchar](50) NULL,
	[JarType] [varchar](50) NULL,
	[FloatType] [varchar](50) NULL,
	[RotaryRPM] [float] NULL,
	[SurfaceRPM] [float] NULL,
	[RestrictorSub] [varchar](50) NULL,
	[IncidentID] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[BHAID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Hydraulics]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Hydraulics](
	[HydraulicID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NULL,
	[StrokeRateStart] [float] NULL,
	[StrokeRateEnd] [float] NULL,
	[StrokeRateMin] [float] NULL,
	[Strokes] [float] NULL,
	[StrokesUOM] [varchar](10) NULL,
	[FlowRateStart] [float] NULL,
	[FlowRateEnd] [float] NULL,
	[FlowRateMin] [float] NULL,
	[FlowRate] [float] NULL,
	[FlowRateUOM] [varchar](10) NULL,
	[GasFlowRateStart] [float] NULL,
	[GasFlowRateEnd] [float] NULL,
	[GasFlowRateMin] [float] NULL,
	[GasFlowRate] [float] NULL,
	[GasFlowRateUOM] [varchar](10) NULL,
	[OrificeSerialNumber] [varchar](20) NULL,
	[Orifice] [varchar](20) NULL,
	[OrificeUOM] [varchar](10) NULL,
	[SPPOnBottomStart] [float] NULL,
	[SPPOnBottomEnd] [float] NULL,
	[SPPOnBottomMin] [float] NULL,
	[SPP] [float] NULL,
	[SPPUOM] [varchar](10) NULL,
	[HydroPressureStart] [float] NULL,
	[HydroPressureEnd] [float] NULL,
	[HydroPressureMin] [float] NULL,
	[MaxPressure] [float] NULL,
	[MaxPressureUOM] [varchar](10) NULL,
	[MaxOperPressureStart] [float] NULL,
	[MaxOperPressureEnd] [float] NULL,
	[MaxOperPressureMin] [float] NULL,
	[MaxOperPressure] [float] NULL,
	[MaxOperPressureUOM] [varchar](10) NULL,
	[MaxObservedPressureStart] [float] NULL,
	[MaxObservedPressureEnd] [float] NULL,
	[MaxObservedPressureMin] [float] NULL,
	[MaxObservedPressure] [float] NULL,
	[MaxObservedPressureUOM] [varchar](10) NULL,
	[OrificeSizeCanadian] [varchar](20) NULL,
	[OrificeSizeCanadianUOM] [varchar](10) NULL,
	[PulseAmplitudeObservedStart] [float] NULL,
	[PulseAmplitudeObservedEnd] [float] NULL,
	[PulseAmplitudeObservedMin] [float] NULL,
	[PulseAmplitude] [float] NULL,
	[PulseAmplitudeUOM] [varchar](10) NULL,
	[PulseAmplitudeDownholeStart] [float] NULL,
	[PulseAmplitudeDownholeEnd] [float] NULL,
	[PulseAmplitudeDownholeMin] [float] NULL,
	[PulseAmplitudeDownhole] [float] NULL,
	[PulseAmplitudeDownholeUOM] [varchar](10) NULL,
	[DeltaPTotalStart] [float] NULL,
	[DeltaPTotalEnd] [float] NULL,
	[DeltaPTotalMin] [float] NULL,
	[DeltaPTotal] [float] NULL,
	[DeltaPTotalUOM] [varchar](10) NULL,
	[HoleSize] [float] NULL,
	[HoleSizeUOM] [varchar](10) NULL,
	[DetectionStart] [float] NULL,
	[DetectionEnd] [float] NULL,
	[DetectionMin] [float] NULL,
	[DetectionPercentage] [float] NULL,
	[PoppetOD] [varchar](20) NULL,
	[PoppetODUOM] [varchar](10) NULL,
	[UnderBalancedStart] [varchar](3) NULL,
	[UnderBalanced] [varchar](3) NULL,
	[CurrentFreq] [varchar](15) NULL,
	[CurrentMode] [varchar](15) NULL,
	[RestrictorNozzleSize] [varchar](15) NULL,
	[RestrictorNozzleSizeUOM] [varchar](10) NULL,
	[DeltaPBitStart] [float] NULL,
	[DeltaPBitEnd] [float] NULL,
	[DeltaPBitMin] [float] NULL,
	[DeltaPBitMax] [float] NULL,
	[DeltaPBitUOM] [varchar](10) NULL,
	[SPPOffBottomStart] [float] NULL,
	[SPPOffBottomEnd] [float] NULL,
	[SPPOffBottomMin] [float] NULL,
	[SPPOffBottomMax] [float] NULL,
	[SPPOffBottomUOM] [varchar](10) NULL,
	[DifferentialPressureStart] [float] NULL,
	[DifferentialPressureEnd] [float] NULL,
	[DifferentialPressureMin] [float] NULL,
	[DifferentialPressureMax] [float] NULL,
	[DifferentialPressureUOM] [varchar](10) NULL,
	[OrientingFRStart] [float] NULL,
	[OrientingFREnd] [float] NULL,
	[OrientingFRMin] [float] NULL,
	[OrientingFRMax] [float] NULL,
	[OrientingFRUOM] [varchar](10) NULL,
	[RotatingFRStart] [float] NULL,
	[RotatingFREnd] [float] NULL,
	[RotatingFRMin] [float] NULL,
	[RotatingFRMax] [float] NULL,
	[RotatingFRUOM] [varchar](10) NULL,
	[RotaryFRStart] [float] NULL,
	[RotaryFREnd] [float] NULL,
	[RotaryFRMin] [float] NULL,
	[RotaryFRMax] [float] NULL,
	[RotaryFRUOM] [varchar](10) NULL,
	[DrillingFRStart] [float] NULL,
	[DrillingFREnd] [float] NULL,
	[DrillingFRMin] [float] NULL,
	[DrillingFRMax] [float] NULL,
	[DrillingFRUOM] [varchar](10) NULL,
	[AnnularVelocityStart] [float] NULL,
	[AnnularVelocityEnd] [float] NULL,
	[AnnularVelocityMin] [float] NULL,
	[AnnularVelocityMax] [float] NULL,
	[AnnularVelocityUOM] [varchar](10) NULL,
	[CriticalVelocityStart] [float] NULL,
	[CriticalVelocityEnd] [float] NULL,
	[CriticalVelocityMin] [float] NULL,
	[CriticalVelocityMax] [float] NULL,
	[CriticalVelocityUOM] [varchar](10) NULL,
	[RSSRevolutions] [float] NULL,
	[RSSRevolutionsUOM] [varchar](10) NULL,
	[MotorBend] [float] NULL,
	[MotorBendUOM] [varchar](10) NULL,
 CONSTRAINT [PK_Hydraulics_HydraulicID] PRIMARY KEY CLUSTERED 
(
	[HydraulicID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FaultCodes]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FaultCodes](
	[FaultCodeId] [uniqueidentifier] NOT NULL,
	[FaultCode] [varchar](10) NOT NULL,
	[FaultCodeDesc] [varchar](255) NOT NULL,
	[ParentFaultCodeId] [uniqueidentifier] NULL,
	[TapRootId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_FaultCodes] PRIMARY KEY CLUSTERED 
(
	[FaultCodeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IncidentFaultCodes]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IncidentFaultCodes](
	[IncidentFaultCodeId] [uniqueidentifier] NOT NULL,
	[IncidentId] [uniqueidentifier] NOT NULL,
	[LevelOneId] [uniqueidentifier] NOT NULL,
	[LevelTwoId] [uniqueidentifier] NOT NULL,
	[LevelThreeId] [uniqueidentifier] NOT NULL,
	[TapRootId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_IncidentFaultCodes] PRIMARY KEY CLUSTERED 
(
	[IncidentFaultCodeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwIncidentFaultCodes]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwIncidentFaultCodes] AS
SELECT ifc.IncidentId
, fc1.FaultCodeId As LevelOneId
, fc1.FaultCode As LevelOneCode
, fc1.FaultCodeDesc As LevelOneDesc
, fc2.FaultCodeId As LevelTwoId
, fc2.FaultCode As LevelTwoCode
, fc2.FaultCodeDesc As LevelTwoDesc
, fc3.FaultCodeId As LevelThreeId
, fc3.FaultCode As LevelThreeCode
, fc3.FaultCodeDesc As LevelThreeDesc
, fc3.TapRootId
FROM IncidentFaultCodes ifc WITH(NOLOCK) 
LEFT JOIN FaultCodes fc1 WITH(NOLOCK) ON fc1.FaultCodeId = ifc.LevelOneId
LEFT JOIN FaultCodes fc2 WITH(NOLOCK) ON fc2.FaultCodeId = ifc.LevelTwoId
LEFT JOIN FaultCodes fc3 WITH(NOLOCK) ON fc3.FaultCodeId = ifc.LevelThreeId


GO
/****** Object:  Table [dbo].[FailureCategories]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FailureCategories](
	[FailureCategoryId] [uniqueidentifier] NOT NULL,
	[FailureCategoryCode] [varchar](7) NOT NULL,
	[FailureCategoryDesc] [varchar](255) NULL,
	[FailureType] [varchar](250) NULL,
	[IsHistorical] [bit] NOT NULL,
	[GLProductLineId] [int] NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL,
 CONSTRAINT [PK_FailureCategories] PRIMARY KEY CLUSTERED 
(
	[FailureCategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FailureSubCategories]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FailureSubCategories](
	[FailureSubCategoryId] [uniqueidentifier] NOT NULL,
	[FailureSubCategoryCode] [varchar](7) NOT NULL,
	[FailureSubCategoryDesc] [varchar](255) NULL,
	[FailureType] [varchar](250) NULL,
	[IsHistorical] [bit] NOT NULL,
	[GLProductLineId] [int] NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL,
 CONSTRAINT [PK_FailureSubCategories] PRIMARY KEY CLUSTERED 
(
	[FailureSubCategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FailureCodes]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FailureCodes](
	[FailureCodeId] [uniqueidentifier] NOT NULL,
	[FailureCategoryId] [uniqueidentifier] NULL,
	[FailureSubCategoryId] [uniqueidentifier] NULL,
	[FailureCode] [varchar](7) NULL,
	[FailureDesc] [varchar](255) NULL,
	[FailureType] [varchar](250) NULL,
	[IsHistorical] [bit] NOT NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL,
	[FailureCodeTypeId] [int] NULL,
	[GLProductLineId] [int] NULL,
 CONSTRAINT [PK_FailureCodes] PRIMARY KEY CLUSTERED 
(
	[FailureCodeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwFailureCodes]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwFailureCodes]
AS
SELECT
	fc.FailureType,
	fc.FailureCodeId,
	fc.FailureCode,
	fc.FailureDesc,
	fc.FailureCategoryId,
	fc.IsHistorical,
	Case fc.IsHistorical When 1 Then 'Yes' Else '' End As IsHistoricalLabel,
	c.FailureCategoryCode,
	c.FailureCategoryDesc, 
	c.IsHistorical As IsCatHistorical,
	fc.FailureSubCategoryId,
	sc.FailureSubCategoryCode,
	sc.FailureSubCategoryDesc,
	sc.IsHistorical As IsSubCatHistorical,
	so.OptionLabel AS FailureTypeCode,
	fc.FailureCodeTypeId
FROM FailureCodes fc WITH(NOLOCK)
LEFT OUTER JOIN dbo.FailureCategories c WITH(NOLOCK) ON c.FailureCategoryId = fc.FailureCategoryId 
LEFT OUTER JOIN dbo.FailureSubCategories sc WITH(NOLOCK) ON sc.FailureSubCategoryId = fc.FailureSubCategoryId
LEFT JOIN dbo.SelectOptions so ON fc.FailureCodeTypeId = so.OptionValue AND so.SelectName='FailureCodeType'

GO
/****** Object:  Table [dbo].[Wells]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Wells](
	[WellID] [uniqueidentifier] NOT NULL,
	[JobID] [uniqueidentifier] NOT NULL,
	[Well] [varchar](200) NULL,
	[TieOnMD] [float] NULL,
	[TieOnMDUOM] [varchar](10) NULL,
	[TieOnInc] [float] NULL,
	[TieOnIncUOM] [varchar](10) NULL,
	[TieOnNSDep] [float] NULL,
	[TieOnNSDepUOM] [varchar](10) NULL,
	[TieOnEWDep] [float] NULL,
	[TieOnEWDepUOM] [varchar](10) NULL,
	[TieOnTVD] [float] NULL,
	[TieOnTVDUOM] [varchar](10) NULL,
	[TieOnAz] [float] NULL,
	[TieOnAzUOM] [varchar](10) NULL,
	[SurveyCalcMethod] [varchar](50) NULL,
	[MagRef] [varchar](50) NULL,
	[AZMMethod] [varchar](50) NULL,
	[SpudDate] [datetime] NULL,
	[TieOnSurvProvBy] [varchar](50) NULL,
	[KellyBushing] [float] NULL,
	[KellyBushingUOM] [varchar](10) NULL,
	[GroundLevel] [float] NULL,
	[GroundLevelUOM] [varchar](10) NULL,
	[DrillFloor] [float] NULL,
	[DrillFloorUOM] [varchar](10) NULL,
	[WaterDepth] [float] NULL,
	[WaterDepthUOM] [varchar](10) NULL,
	[PermanentDatum] [varchar](50) NULL,
	[LogMeasuredFrom] [varchar](50) NULL,
	[ElevationOfLogDatum] [float] NULL,
	[ElevationOfLogDatumUOM] [varchar](10) NULL,
	[DepthReference] [varchar](50) NULL,
	[LWDMWDServiceCompany] [varchar](50) NULL,
	[DDServiceCompany] [varchar](50) NULL,
	[APIUWIWellLicense] [varchar](50) NULL,
	[WellType] [varchar](50) NULL,
	[TargetDirection] [float] NULL,
	[TargetDirectionUOM] [varchar](5) NULL,
	[MagneticDeclination] [float] NULL,
	[MagneticDeclinationUOM] [varchar](5) NULL,
	[GridConvergence] [float] NULL,
	[GridConvergenceUOM] [varchar](5) NULL,
	[BTotalRef] [float] NULL,
	[BTotalRefUOM] [varchar](5) NULL,
	[DipReference] [float] NULL,
	[DipReferenceUOM] [varchar](5) NULL,
	[GTotalRef] [float] NULL,
	[GTotalRefUOM] [varchar](5) NULL,
	[TotalCorrection] [float] NULL,
	[TotalCorrectionUOM] [varchar](5) NULL,
	[GeoMagModel] [varchar](50) NULL,
	[MapSystem] [varchar](50) NULL,
	[MapZone] [varchar](50) NULL,
	[GeoDatum] [varchar](50) NULL,
	[WellPlanDate] [datetime] NULL,
	[MagneticDataSource] [varchar](50) NULL,
	[ImportUserID] [int] NULL,
	[ImportDate] [datetime] NULL,
	[ImportSource] [varchar](50) NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_Wells] PRIMARY KEY CLUSTERED 
(
	[WellID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Runs]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Runs](
	[RunID] [uniqueidentifier] NOT NULL,
	[WellID] [uniqueidentifier] NULL,
	[RunNumber] [varchar](50) NOT NULL,
	[ReportNumber] [varchar](50) NOT NULL,
	[ServiceType] [varchar](255) NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[MDStart] [float] NULL,
	[MDStartUOM] [varchar](10) NULL,
	[MDEnd] [float] NULL,
	[MDEndUOM] [varchar](10) NULL,
	[TVDStart] [float] NULL,
	[TVDStartUOM] [varchar](10) NULL,
	[TVDEnd] [float] NULL,
	[TVDEndUOM] [varchar](10) NULL,
	[OperHrs] [float] NULL,
	[CircHrs] [float] NULL,
	[DrillHrs] [float] NULL,
	[RotatingHrs] [float] NULL,
	[EMReamingHrs] [float] NULL,
	[ReasonsForPooh] [text] NULL,
	[Comments] [text] NULL,
	[AverageROP] [float] NULL,
	[AverageROPUOM] [varchar](10) NULL,
	[Formation] [varchar](20) NULL,
	[RecordedLogPercentage] [float] NULL,
	[RealtimeLogPercentage] [float] NULL,
	[DistanceWiped] [float] NULL,
	[DistanceWipedUOM] [varchar](10) NULL,
	[StartLogDate] [datetime] NULL,
	[EndLogDate] [datetime] NULL,
	[ClientRep] [varchar](50) NULL,
	[PulseCount] [int] NULL,
	[BHANumber] [varchar](50) NULL,
	[BHAType] [varchar](20) NULL,
	[SectionType] [varchar](15) NULL,
	[HoleSize] [float] NULL,
	[HoleSizeUOM] [varchar](5) NULL,
	[DrillOutCasingShoe] [bit] NULL,
	[ShoeWeight] [float] NULL,
	[ShoeWeightUOM] [varchar](10) NULL,
	[ShoeLength] [float] NULL,
	[ShoeLengthUOM] [varchar](10) NULL,
	[TypeCasingShoe] [varchar](25) NULL,
	[DLCPulseCount] [float] NULL,
	[DLCHoursCirculating] [float] NULL,
	[DLCHoursUnderPumpPressure] [float] NULL,
	[TBS] [tinyint] NOT NULL,
	[Geosteering] [tinyint] NOT NULL,
	[GeosteeringCompany] [varchar](25) NULL,
	[RTOMonitoring] [tinyint] NOT NULL,
	[HEL_LWD] [tinyint] NOT NULL,
	[HEL_EM] [tinyint] NOT NULL,
	[EM] [tinyint] NOT NULL,
	[PP] [tinyint] NOT NULL,
	[RSS] [tinyint] NOT NULL,
	[TENSOR] [tinyint] NOT NULL,
	[GEOLINK] [tinyint] NOT NULL,
	[BECFIELD] [tinyint] NOT NULL,
	[GWD] [tinyint] NOT NULL,
	[WPR] [tinyint] NOT NULL,
	[MOTOR] [tinyint] NOT NULL,
	[AGS] [tinyint] NOT NULL,
	[DLC] [tinyint] NOT NULL,
	[IsDownHole] [tinyint] NOT NULL,
	[IsTightHole] [tinyint] NOT NULL,
	[RptPath] [varchar](255) NULL,
	[ImportUserID] [int] NULL,
	[ImportDate] [datetime] NULL,
	[ImportSource] [varchar](50) NULL,
	[IsDeleted] [bit] NOT NULL,
	[ClientComments] [text] NULL,
	[DMT_AMS] [tinyint] NOT NULL,
	[DateAdded] [datetime] NULL,
	[ProductLineId] [int] NULL,
 CONSTRAINT [PK_Runs] PRIMARY KEY CLUSTERED 
(
	[RunID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Customers]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Customers](
	[CustomerId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[CustomerNumber] [int] NULL,
	[CustomerName] [varchar](50) NOT NULL,
	[ParentNumber] [int] NULL,
	[AddressType] [varchar](3) NOT NULL,
	[BillTo] [int] NULL,
	[AC02Desc] [varchar](30) NULL,
	[AC03Desc] [varchar](30) NULL,
	[AC04Desc] [varchar](30) NULL,
	[Line0MailName] [varchar](40) NULL,
	[Line1MailName] [varchar](40) NULL,
	[Line2MailName] [varchar](40) NULL,
	[EffectiveDate] [datetime] NULL,
	[AddressLine1] [varchar](40) NULL,
	[AddressLine2] [varchar](40) NULL,
	[AddressLine3] [varchar](40) NULL,
	[AddressLine4] [varchar](40) NULL,
	[City] [varchar](25) NULL,
	[State] [varchar](3) NULL,
	[Country] [varchar](3) NULL,
	[County] [varchar](25) NULL,
	[ZipCode] [varchar](12) NULL,
	[IsActive] [bit] NOT NULL,
	[A5HOLD] [varchar](2) NULL,
	[A6HOLD] [varchar](2) NULL,
 CONSTRAINT [PK_Customers] PRIMARY KEY CLUSTERED 
(
	[CustomerId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Incidents]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Incidents](
	[IncidentID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[IncidentNumber] [varchar](50) NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[FailureDate] [datetime] NULL,
	[FieldSummary] [varchar](5000) NULL,
	[FieldSurfCheckSummary] [varchar](5000) NULL,
	[IsOpen] [tinyint] NULL,
	[AcceptedLostTime] [decimal](8, 2) NULL,
	[Dist_LWD] [bit] NOT NULL,
	[Dist_DD] [bit] NOT NULL,
	[Dist_MWD] [bit] NOT NULL,
	[Dist_RSS] [bit] NOT NULL,
	[Global_LWD] [bit] NOT NULL,
	[Global_DD] [bit] NOT NULL,
	[Global_MWD] [bit] NOT NULL,
	[Global_RSS] [bit] NOT NULL,
	[Dist_SURVEY] [bit] NOT NULL,
	[Global_SURVEY] [bit] NOT NULL,
	[PreRunNumber] [varchar](50) NULL,
	[MaxDoglegSeverity] [float] NULL,
	[MaxWhirl] [float] NULL,
	[MaxStickSlip] [varchar](20) NULL,
	[RptPath] [varchar](255) NULL,
	[CoreVersion] [varchar](10) NULL,
	[IsHistorical] [bit] NOT NULL,
	[IsDownHole] [bit] NOT NULL,
	[ImportUserID] [int] NULL,
	[ImportDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[IsGFA] [bit] NULL,
	[Dist_SURFACE] [bit] NOT NULL,
	[Global_SURFACE] [bit] NOT NULL,
	[ClientNPT] [decimal](8, 2) NULL,
	[COF] [decimal](8, 2) NULL,
	[Criticality] [tinyint] NULL,
	[CPARId] [int] NULL,
 CONSTRAINT [PK_Incidents] PRIMARY KEY CLUSTERED 
(
	[IncidentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BitData]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BitData](
	[BitDataID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[BitDeltaP] [float] NULL,
	[BitDeltaPUOM] [varchar](10) NULL,
	[BitManufacturer] [varchar](50) NULL,
	[BitTFA] [float] NULL,
	[BitTFAUOM] [varchar](10) NULL,
	[BitType] [varchar](50) NULL,
	[Model] [varchar](50) NULL,
	[SerialNumber] [varchar](50) NULL,
	[BitSize] [float] NULL,
	[BitSizeUOM] [varchar](10) NULL,
	[EstimatedFlowRate] [float] NULL,
	[Comments] [varchar](255) NULL,
	[MaxOuterD] [float] NULL,
	[TopConnectionType] [varchar](50) NULL,
	[GaugeType] [varchar](20) NULL,
	[GaugeLength] [float] NULL,
	[GaugeLengthUOM] [varchar](5) NULL,
	[PDCCutterSize] [float] NULL,
	[PDCCutterSizeUOM] [varchar](5) NULL,
	[NumberOfBlades] [float] NULL,
	[BitLength] [float] NULL,
	[BitLengthUOM] [varchar](5) NULL,
	[GradingIn] [varchar](30) NULL,
	[GradingOut] [varchar](30) NULL,
	[Nozzles] [varchar](30) NULL,
 CONSTRAINT [PK_BitData] PRIMARY KEY CLUSTERED 
(
	[BitDataID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SurveyData]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SurveyData](
	[SurveyDataID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[AzimuthIn] [float] NULL,
	[AzimuthInUOM] [varchar](10) NULL,
	[AzimuthOut] [float] NULL,
	[AzimuthOutUOM] [varchar](10) NULL,
	[BTotal] [float] NULL,
	[BTotalUOM] [varchar](10) NULL,
	[CasingShoe] [float] NULL,
	[CasingShoeUOM] [varchar](10) NULL,
	[Convergence] [float] NULL,
	[ConvergenceUOM] [varchar](10) NULL,
	[Declination] [float] NULL,
	[DeclinationUOM] [varchar](10) NULL,
	[GTotal] [float] NULL,
	[GTotalUOM] [varchar](10) NULL,
	[IncIn] [float] NULL,
	[IncInUOM] [varchar](10) NULL,
	[IncOut] [float] NULL,
	[IncOutUOM] [varchar](10) NULL,
	[MaxInc] [float] NULL,
	[MaxIncUOM] [varchar](10) NULL,
	[MinInc] [float] NULL,
	[MinIncUOM] [varchar](10) NULL,
	[InternalTFO] [float] NULL,
	[InternalTFOUOM] [varchar](10) NULL,
	[MagneticDip] [float] NULL,
	[MagneticDipUOM] [varchar](10) NULL,
	[TargetAzimuth] [float] NULL,
	[TargetAzimuthUOM] [varchar](10) NULL,
	[TFSwitch] [float] NULL,
	[TFSwitchUOM] [varchar](10) NULL,
	[ToolOffset] [float] NULL,
	[ToolOffsetUOM] [varchar](10) NULL,
	[TotalCorrection] [float] NULL,
	[TotalCorrectionUOM] [varchar](10) NULL,
	[VerticalSection] [float] NULL,
	[VerticalSectionUOM] [varchar](10) NULL,
	[ActualMagneticDip] [float] NULL,
	[ActualMagneticDipUOM] [varchar](10) NULL,
	[ActualBTotal] [float] NULL,
	[ActualBTotalUOM] [varchar](10) NULL,
	[TFO] [float] NULL,
	[TFOUOM] [varchar](10) NULL,
	[ScanRate] [varchar](15) NULL,
	[DrillCollarOffset] [float] NULL,
	[DrillCollarOffsetUOM] [varchar](10) NULL,
	[TransactionRate] [float] NULL,
	[TransactionRateUOM] [varchar](10) NULL,
	[Delay] [float] NULL,
	[DelayUOM] [varchar](10) NULL,
	[Circumference] [float] NULL,
	[CircumferenceUOM] [varchar](10) NULL,
	[ActualToMotor] [float] NULL,
	[ActualToMotorUOM] [varchar](10) NULL,
	[ActualGTotal] [float] NULL,
	[ActualGTotalUOM] [varchar](10) NULL,
	[EMCSGTime] [varchar](15) NULL,
	[EMGRTime] [varchar](15) NULL,
	[MagneticDataSource] [varchar](20) NULL,
	[MagneticDataSourceOther] [varchar](30) NULL,
	[BTotalMin] [float] NULL,
	[BTotalMinUOM] [varchar](5) NULL,
	[BTotalMax] [float] NULL,
	[BTotalMaxUOM] [varchar](5) NULL,
	[GTotalMin] [float] NULL,
	[GTotalMinUOM] [varchar](5) NULL,
	[GTotalMax] [float] NULL,
	[GTotalMaxUOM] [varchar](5) NULL,
	[DipMeasuredMin] [float] NULL,
	[DipMeasuredMinUOM] [varchar](5) NULL,
	[DipMeasuredMax] [float] NULL,
	[DipMeasuredMaxUOM] [varchar](5) NULL,
	[GTotalWorst] [float] NULL,
	[GTotalWorstUOM] [varchar](5) NULL,
	[BTotalWorst] [float] NULL,
	[BTotalWorstUOM] [varchar](5) NULL,
	[DipWorst] [float] NULL,
	[DipWorstUOM] [varchar](5) NULL,
 CONSTRAINT [PK_SurveyData] PRIMARY KEY CLUSTERED 
(
	[SurveyDataID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MotorData]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MotorData](
	[MotorDataID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[ToolStringID] [uniqueidentifier] NULL,
	[MotorDifferential] [float] NULL,
	[MotorDifferentialUOM] [varchar](10) NULL,
	[MotorRPM] [float] NULL,
	[SerialNumber] [varchar](50) NULL,
	[LobesRS] [varchar](25) NULL,
	[MaxDogleg] [float] NULL,
	[MaxDoglegUOM] [varchar](15) NULL,
	[MotorSize] [float] NULL,
	[MotorSizeUOM] [varchar](10) NULL,
	[DeltaPOffBottom] [float] NULL,
	[DeltaPOffBottomUOM] [varchar](10) NULL,
	[DeltaPOnBottom] [float] NULL,
	[DeltaPOnBottomUOM] [varchar](10) NULL,
	[MotorType] [varchar](50) NULL,
	[Manufacturer] [varchar](50) NULL,
	[Length] [float] NULL,
	[LengthUOM] [varchar](10) NULL,
	[MotorSetting] [varchar](50) NULL,
	[OffsetKickpad] [bit] NULL,
	[MotorStabilizer] [varchar](50) NULL,
	[MotorPressureDrop] [float] NULL,
	[MotorPressureDropUOM] [varchar](5) NULL,
	[WFEntity] [varchar](50) NULL,
	[AHSMaxRecommended] [float] NULL,
	[AHSCurrent] [float] NULL,
	[ClientRep] [uniqueidentifier] NULL,
	[WFRep] [uniqueidentifier] NULL,
	[MotorNominalSize] [float] NULL,
	[MotorNominalSizeUOM] [varchar](5) NULL,
	[PowerSectionConfiguration] [varchar](20) NULL,
	[BearingPackConfiguration] [varchar](20) NULL,
	[BitToBend] [float] NULL,
	[BitToBendUOM] [varchar](5) NULL,
	[AdjustableHousing] [varchar](50) NULL,
	[NoLoadRPMFlowUnit] [float] NULL,
	[MaxDogLegSliding] [float] NULL,
	[MaxDogLegSlidingUOM] [varchar](15) NULL,
	[RSSRevolutions] [float] NULL,
	[RSSRevolutionsUOM] [varchar](10) NULL,
	[MotorBend] [float] NULL,
	[MotorBendUOM] [varchar](10) NULL,
 CONSTRAINT [PK_MotorData] PRIMARY KEY CLUSTERED 
(
	[MotorDataID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwRelBusinessIntelligenceInnerTable]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==================================================================
--MODIFIED BY : SUYEB MOHAMMAD
--MODIFIED ON : 9 Aug 2017
--DESCRIPTION : To add two new fields X and Y from jobs table
--===================================================================
CREATE VIEW [dbo].[vwRelBusinessIntelligenceInnerTable]
AS
SELECT R.RunID
, I.IncidentID
, J.Region
, J.Country
, J.BranchPlant
, J.CustomerID
, Reg.Hemisphere
, Reg.RegionDesc
, CN.CountryDesc
, bp.CompanyName As BranchPlantName
, Cu.CustomerName
, J.JobNumber
, J.StartDate As JobStartDate
, J.EndDate As JobEndDate
, J.EstDays As JobEstEndDate
, J.ReportId
, J.Rig
, J.Field
, W.Well
, R.RunNumber
, J.OffShore
, Case When t.[Type] = 'HEL/LWD' Then 1 Else 0 End As LWD
, Case When t.[Type] = 'HEL/EM' Then 1 Else 0 End As HELEM
, Case When t.[Type] = 'RSS' Then 1 Else 0 End As RSS
, Case When t.[Type] = 'EM' Then 1 Else 0 End As EM
, Case When t.[Type] = 'HYPERPULSE' Then 1 Else 0 End As PP
, Case When t.[Type] = 'BECFIELD' Then 1 Else 0 End As BECFIELD
, Case When t.[Type] = 'GEOLINK' Then 1 Else 0 End As GEOLINK
, Case When t.[Type] = 'MOTOR' Then 1 Else 0 End As MotorWFT
, Case When t.[Type] = 'MOTOR' And t.[Description] = 'Rental Motor' Then 1 Else 0 End As MotorRental
, Case When t.[Type] = 'TENSOR' Then 1 Else 0 End As TENSOR
, Case When t.[Type] = 'GWD' Then 1 Else 0 End As GWD
, Case When t.[Type] = 'WPR' Then 1 Else 0 End As WPR
, Case When t.[Type] = 'AGS' Then 1 Else 0 End As AGS
, Case When t.[Type] = 'EM/TWINWELLS' Then 1 Else 0 End As EMTwinwells
, CONVERT(VARCHAR, R.StartDate, 101) As InHoleDate
, R.EndDate
, CONVERT(VARCHAR, R.EndDate, 101) As OutHoleDate
, R.ImportDate
, I.IncidentNumber
, I.FieldSummary
, I.FieldSurfCheckSummary As FieldSymptomSummary
, Case I.IsOpen When 0 Then 'Closed' When 1 Then 'Open' When 99 Then 'Closed at District' End As RMReportStatus
, IsNull(i.AcceptedLostTime,0) As AcceptedLostTime
, Case When TSCI.TFF = 1 Then 1 Else 0 End As TFF 
, Case When TSCI.CSI = 1 Then 1 Else 0 End As CSI
, Case When TSCI.NCI = 1 Then 1 Else 0 End As NCI
, Case When TSCI.TFF = 1 And TSCI.OS = 1 And TSCI.PR = 0 Then 1 Else 0 End As OS
, Case When TSCI.TFF = 1 And TSCI.PR = 1 Then 1 Else 0 End As PR
, Case When TSCI.TFF = 1 And TSCI.OS = 0 And TSCI.PR = 0 Then 1 Else 0 End As Others
, Case When TSCI.TFF = 1 Then t.SerialNumber Else '' End As TFFToolString
, Case When TSCI.TFF = 1 Then pt.PartTypeID Else '' End As TFFComponentID
, Case When TSCI.TFF = 1 Then IsNull(pt.[Name],TSCI.FailedNonPartName) Else '' End As TFFComponent
, Case When TSCI.TFF = 1 Then pt.[Description] Else '' End As TFFComponentDesc
, Case When TSCI.TFF = 1 Then IsNull(TSCI.SerialNum,t.RMSerialNum) Else '' End As TFFSerialNumber
, R.OperHrs
, R.CircHrs
, R.DrillHrs
, dbo.TempConvert(md.BoreHoleTempMax,md.BoreHoleTempUnits,'°F') As MaxTempF
, dbo.TempConvert(md.BoreHoleTempMax,md.BoreHoleTempUnits,'°C') As MaxTempC
, dbo.LengthConvert(R.MDStart,R.MDStartUOM,'ft') As MDStart
, dbo.LengthConvert(R.MDEnd,R.MDEndUOM,'ft') As MDEnd
, dbo.LengthConvert(R.TVDStart,R.TVDStartUOM,'ft') As TVDStart
, dbo.LengthConvert(R.TVDEnd,R.TVDEndUOM,'ft') As TVDEnd
, dbo.LengthConvert(H.HoleSize,H.HoleSizeUOM,'in') As HoleSize
, dbo.PressureConvert(h.MaxPressure,h.MaxPressureUOM,'psi') as MaxHydrostaticPressure
, dbo.PressureConvert(h.MaxOperPressure,h.MaxOperPressureUOM,'psi') as MaxOperPressure
, dbo.PressureConvert(h.MaxObservedPressure,h.MaxObservedPressureUOM,'psi') As MaxObservedPressure
, dbo.DensityConvert(md.DensityEnd,md.DensityUnits,'ppg') As MudDensity
, md.BaseFluidEnd
, dbo.DogLegConvert(mod.MaxDogleg,mod.MaxDoglegUOM,'deg/100 ft') AS MaxDoglegRotating
, dbo.DogLegConvert(mod.MaxDoglegSliding,mod.MaxDoglegSlidingUOM,'deg/100 ft') AS MaxDoglegSliding
, IsNull(sd.MaxInc,0) As MaxInc
, dbo.VolumeConvert(H.FlowRate,H.FlowRateUOM,'gpm') As FlowRate
, mod.SerialNumber As MotorSerialNumber
, dbo.LengthConvert(mod.MotorSize,mod.MotorSizeUOM,'in') As MotorSize
, dbo.LengthConvert(mod.Length,mod.LengthUOM,'ft') As MotorLength
, mod.MotorType
, mod.Manufacturer
, mod.LobesRS
, mod.MotorRPM
, dbo.PressureConvert(mod.DeltaPOnBottom,mod.DeltaPOnBottomUOM,'psi') As MotorOnBottom
, dbo.PressureConvert(mod.DeltaPOffBottom,mod.DeltaPOffBottomUOM,'psi') As MotorOffBottom
, dbo.PressureConvert(mod.MotorDifferential,mod.MotorDifferentialUOM,'psi') As MotorDifferential
, (Select ShortName From ToolStringSize Where ToolSizeID = t.SizeID) As ToolSize
, Case When TSCI.TFF = 1 Then TSCI.FieldSymptom Else '' End As FieldSymptom
, Case When TSCI.CSI = 1 Then TSCI.FieldSymptom Else '' End As FieldSymptom2
, Case When TSCI.TFF = 1 And t.[Type] = 'RSS' And pt.Accountable = 'RSS' Then 1 Else 0 End As RSSFailureTFF
, Case When TSCI.CSI = 1 And t.[Type] = 'RSS' And pt.Accountable = 'RSS' Then 1 Else 0 End As RSSFailureCSI
, Case When TSCI.TFF = 1 And (pt.HEL_LWD = 1 OR pt.HEL_EM = 1 OR pt.GWD = 1) And pt.Accountable Is Null Then 1 Else 0 End As LWDFailureTFF -- Changed by Yogesh for TFS# 40953
, Case When TSCI.CSI = 1 And pt.HEL_LWD = 1 And pt.Accountable Is Null Then 1 Else 0 End As LWDFailureCSI
, Case When TSCI.TFF = 1 Then fc.FailureCategoryCode + fc.FailureSubCategoryCode + fc.FailureCode Else '' End As CompFailureCode
, Case When TSCI.TFF = 1 Then fc.FailureDesc Else '' End As CompFailureCodeDesc
, Case When TSCI.TFF = 1 And TSCI.OS = 1 Then os.FailureCategoryCode + os.FailureSubCategoryCode + os.FailureCode Else '' End As OutOfSpecCode
, Case When TSCI.TFF = 1 And TSCI.OS = 1 Then os.FailureDesc Else '' End As OutOfSpecCodeDesc
, Case When TSCI.TFF = 1 And TSCI.PR = 1 Then pr.FailureCategoryCode + pr.FailureSubCategoryCode + pr.FailureCode Else '' End As ProceduralCode
, Case When TSCI.TFF = 1 And TSCI.PR = 1 Then pr.FailureDesc Else '' End As ProceduralCodeDesc
, Case When TSCI.TFF = 1 And TSCI.PR = 1 Then pr.FailureSubCategoryCode Else '' End As PRModes
, Round(dbo.VelocityConvert(R.AverageROP,R.AverageROPUOM,'ft/hr'),2) As AverageROP
, Case When TSCI.PartTypeID = 6 Then 1 Else 0 End As [Pulser (AES)]
, Case When TSCI.PartTypeID = 8 Then 1 Else 0 End As [Driver Insert]
, Case When TSCI.PartTypeID = 11 Then 1 Else 0 End As [IDS]
, Case When TSCI.PartTypeID = 2 Then 1 Else 0 End As [Gamma Ray Insert]
, Case When TSCI.PartTypeID = 1015 Then 1 Else 0 End As [HAGR]
, Case When TSCI.PartTypeID = 1016 Then 1 Else 0 End As [SAGR]
, Case When TSCI.PartTypeID = 27 Then 1 Else 0 End As [MFR Collar]
, Case When TSCI.PartTypeID = 1241 Then 1 Else 0 End As [Azimuthal MFR]
, Case When TSCI.PartTypeID = 18 Then 1 Else 0 End As [Neutron Insert]
, Case When TSCI.PartTypeID = 22 Then 1 Else 0 End As [Density Insert]
, Case When TSCI.PartTypeID = 1097 Then 1 Else 0 End As [Collar, SST Sensor]
, Case When TSCI.PartTypeID = 10 Then 1 Else 0 End As [BAP Insert]
, Case When TSCI.PartTypeID = 31 Then 1 Else 0 End As [Battery High Temp]
, Case When TSCI.PartTypeID = 1011 Then 1 Else 0 End As [Battery IBM]
, Case When TSCI.PartTypeID = 9 Then 1 Else 0 End As [Battery Low Temp]
, Case When TSCI.PartTypeID = 33 Then 1 Else 0 End As [Battery Medium Temp]
, Case When TSCI.PartTypeID = 1189 Then 1 Else 0 End As [Battery, Formation Tester]
, Case When TSCI.PartTypeID = 48 Then 1 Else 0 End As [Bias Unit]
, Case When TSCI.PartTypeID = 47 Then 1 Else 0 End As [Controller Insert]
, Case When TSCI.PartTypeID = 1183 Then 1 Else 0 End As [Collar, Formation Tester]
, Case When TSCI.PartTypeID = 1142 Then 1 Else 0 End As [Compensation Assembly]
, Case When TSCI.PartTypeID = 1096 Then 1 Else 0 End As [TVM]
, Case When TSCI.PartTypeID = 1112 Then 1 Else 0 End As [MWD Pulser (AES)]
, Case When TSCI.PartTypeID = 1031 Then 1 Else 0 End As [MWD Pulser 2"]
, Case When TSCI.PartTypeID = 1002 Then 1 Else 0 End As [Control Module Sonde]
, Case When TSCI.PartTypeID = 57 Then 1 Else 0 End As [BTR]
, Case When TSCI.PartTypeID = 74 Then 1 Else 0 End As [CDS]
, Case When TSCI.PartTypeID = 1213 Then 1 Else 0 End As [CDST (Clever Deviation Sonde Top Mounted)]
, Case When TSCI.PartTypeID = 76 Then 1 Else 0 End As [GRG4]
, Case When TSCI.PartTypeID = 58 Then 1 Else 0 End As [Oriented Gamma Ray]
, Case When TSCI.PartTypeID = 1080 Then 1 Else 0 End As [UGR]
, Case When TSCI.PartTypeID = 31 Then 1 Else 0 End As [MWD Battery High Temp]
, Case When TSCI.PartTypeID = 9 Then 1 Else 0 End As [MWD Battery Low Temp]
, Case When TSCI.PartTypeID = 75 Then 1 Else 0 End As [CSGX]
, Case When TSCI.PartTypeID = 62 Then 1 Else 0 End As [Gabis]
, Case When TSCI.PartTypeID = 63 Then 1 Else 0 End As [Gabis Battery]
, Case When TSCI.PartTypeID = 1051 Then 1 Else 0 End As [Inclination Sonde] 
, Case When TSCI.PartTypeID = 1306 Then 1 Else 0 End As [VMS]
, Case When (TSCI.PartTypeID = 69 or TSCI.PartTypeID = 70) Then 1 Else 0 End As [ExtendedRange]
, Case When TSCI.PartTypeID = 1084 Then 1 Else 0 End As [DLC]
, Case When TSCI.PartTypeID = 1267 Then 1 Else 0 End As [SMI]
, Case When t.[Type] = 'EM' or t.[Type] = 'HYPERPULSE' or t.[Type] = 'BECFIELD' or t.[Type] = 'GEOLINK' or t.[Type] = 'TENSOR' Then 1 Else 0 End As AllMWD
, 1 As TotalComponentCount
, md.SolidPercentageMax
, md.SandPercentageMax
, md.WaterPercentageMax
, md.OilPercentageMax
, md.pHMax
, R.RotatingHrs
, Replace(Replace(Cast(R.ReasonsForPooh as nvarchar(max)),Char(13),''),Char(10),' ') As ReasonsForPooh
, Round(dbo.LengthConvert(W.WaterDepth,W.WaterDepthUOM,'ft'),0) As WaterDepth
, Round(dbo.PressureConvert(bd.BitDeltaP,bd.BitDeltaPUOM,'psi'),2) As BitDeltaP
, dbo.WeightConvert(bha.WeightOnBit,bha.WeightOnBitUOM,'klb') As WeightOnBit
, dbo.TorqueConvert(bha.Torque,bha.TorqueUOM,'ft-lbs') As Torque
, bha.SurfaceRPM
, h.UnderBalanced
, dbo.VolumeConvert(GasFlowRate,GasFlowRateUOM,'ft3/min') As GasFlowRate
, dbo.PressureConvert(h.SPP,h.SPPUOM,'psi') As SPP
, H.Orifice + ' ' + H.OrificeUOM As OrificeSize
, J.Latitude
, J.Longitude
, IsNull(LocationCountry,'') As LocationCountry
, IsNull(LocationState,'') As LocationState
, IsNull(LocationCounty,'') As LocationCounty
, Case When TSCI.TFF = 1 And t.[Type] = 'MOTOR' Then 1 Else 0 End As MotorFailureTFF
, Case When TSCI.CSI = 1 And t.[Type] = 'MOTOR' Then 1 Else 0 End As MotorFailureCSI
, Case When TSCI.TFF = 1 And t.[Type] = 'EM' Then 1 Else 0 End As EMFailureTFF
, Case When TSCI.CSI = 1 And t.[Type] = 'EM' Then 1 Else 0 End As EMFailureCSI
, Case When TSCI.TFF = 1 And t.[Type] = 'HYPERPULSE' Then 1 Else 0 End As PPFailureTFF
, Case When TSCI.CSI = 1 And t.[Type] = 'HYPERPULSE' Then 1 Else 0 End As PPFailureCSI
, Case When TSCI.TFF = 1 And (t.[Type] = 'EM' or t.[Type] = 'HYPERPULSE' or t.[Type] = 'BECFIELD' or t.[Type] = 'GEOLINK' or t.[Type] = 'TENSOR') Then 1 Else 0 End As MWDFailureTFF
, Case When TSCI.CSI = 1 And (t.[Type] = 'EM' or t.[Type] = 'HYPERPULSE' or t.[Type] = 'BECFIELD' or t.[Type] = 'GEOLINK' or t.[Type] = 'TENSOR') Then 1 Else 0 End As MWDFailureCSI
, ifc.LevelOneCode As FaultCodeLevelOne
, ifc.LevelOneDesc As FaultCodeDescLevelOne
, ifc.LevelTwoCode As FaultCodeLevelTwo
, ifc.LevelTwoDesc As FaultCodeDescLevelTwo
, ifc.LevelThreeCode As FaultCodeLevelThree
, ifc.LevelThreeDesc As FaultCodeDescLevelThree
, Case When tsci.CustomProperty = 'HeatWave 180C' Then 1 Else 0 End As HeatWave
, Case When tsci.CustomProperty = 'HEX (200C Rated Tool)' Then 1 Else 0 End As HEX
, R.PulseCount
, H.RSSRevolutions
, i.Criticality
,j.X
,j.Y
, CASE WHEN TSCI.ToolCode LIKE 'MAG%BIAS%' THEN 1 ELSE 0 END [RssMagnus]
, i.CPARId [WptsCparId]

FROM Jobs (NOLOCK) J
LEFT JOIN Regions (NOLOCK) REG ON REG.Region = J.Region 
LEFT JOIN Countries (NOLOCK) CN ON CN.Country = J.Country 
LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = J.BranchPlant 
LEFT JOIN Customers (NOLOCK) Cu ON J.CustomerID = Cu.CustomerID 
LEFT JOIN Wells (NOLOCK) W ON J.JobID = W.JobID AND W.IsDeleted = 0 
LEFT JOIN Runs (NOLOCK) R ON W.WellID = R.WellID AND R.IsDeleted = 0 AND R.EndDate IS NOT NULL AND R.ProductLineId=1
LEFT JOIN MudData (NOLOCK) md ON R.RunID = md.RunID 
LEFT JOIN Hydraulics (NOLOCK) h ON R.RunID = h.RunID 
LEFT JOIN Incidents (NOLOCK) i ON R.RunID = i.RunID AND i.IsDeleted = 0
LEFT JOIN MotorData (NOLOCK) mod ON R.RunID = mod.RunID 
LEFT JOIN SurveyData (NOLOCK) sd ON R.RunID = sd.RunID 
LEFT JOIN BitData (NOLOCK) bd ON R.RunID = bd.RunID 
LEFT JOIN BHA (NOLOCK) bha ON R.RunID = bha.RunID
--- Change made by Yogesh on 11/7/2019 to handle 'Non Tool Related' incident
------------------------------------------------------------------------------------------
LEFT JOIN (
			SELECT ToolStringInfoID, RunID [NewRunId] FROM ToolStringComponentInfo tsc1 WHERE tsc1.RunID IS NOT NULL
			UNION
			SELECT tsc2.ToolStringInfoID, i1.RunID [NewRunId] 
				FROM ToolStringComponentInfo tsc2
				JOIN Incidents i1 on tsc2.IncidentID = i1.IncidentID and i1.IsDeleted = 0
				WHERE tsc2.RunID IS NULL
			) tsc ON tsc.NewRunId = R.RunID
LEFT JOIN ToolStringComponentInfo (NOLOCK) TSCI ON tsc.ToolStringInfoID = TSCI.ToolStringInfoID
------------------------------------------------------------------------------------------

--LEFT JOIN ToolStringComponentInfo (NOLOCK) TSCI ON R.RunID = TSCI.RunID 

LEFT JOIN ToolStrings (NOLOCK) t ON t.ToolStringID = TSCI.ToolStringID 
LEFT JOIN PartTypes (NOLOCK) pt ON pt.PartTypeID = TSCI.PartTypeID
LEFT JOIN vwFailureCodes (NOLOCK) fc On fc.FailureCodeID = TSCI.CompFailureCodeID
LEFT JOIN vwFailureCodes (NOLOCK) os On os.FailureCodeID = TSCI.OutOfSpecCodeID
LEFT JOIN vwFailureCodes (NOLOCK) pr On pr.FailureCodeID = TSCI.ProceduralCodeID
LEFT JOIN vwIncidentFaultCodes (NOLOCK) ifc ON ifc.IncidentId = i.IncidentID
WHERE J.IsDeleted = 0 AND R.IsDownHole = 1



GO
/****** Object:  View [dbo].[Districts]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[Districts] AS
SELECT BranchPlant As District
	, RelBaseCode + ' - ' + BranchPlant + ' - ' + CompanyName As DistrictDesc
	, RelBaseCode As ShortDistrict
	, b.CompanyName As BranchPlantName
	, b.Country
	, c.CountryDesc
	, b.Region
	, r.RegionDesc
	, b.Hemisphere
	, b.Active
FROM BranchPlants b WITH(NOLOCK) 
LEFT OUTER JOIN Regions r WITH(NOLOCK) ON r.Region = b.Region
LEFT OUTER JOIN Countries c WITH(NOLOCK) ON c.Country = b.Country
WHERE IsOps = 1 AND b.Active = 1
AND RelBaseCode Is Not Null


GO
/****** Object:  View [dbo].[vwToolByRunsSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwToolByRunsSearch] AS
SELECT
	j.BranchPlant
	, j.Region
	, j.Country
	, d.DistrictDesc
	, j.CustomerId
	, cu.CustomerNumber
	, cu.CustomerName
	, j.JobNumber
	, j.Rig
	, w.Well
	, r.RunNumber
	, r.RunID
	, r.StartDate As InHoleDate
	, r.EndDate As OutHoleDate
	, r.OperHrs
	, r.CircHrs
	, r.DrillHrs
	, r.MDStart
	, r.MDStartUOM
	, r.MDEnd
	, r.MDEndUOM
	, r.TVDStart
	, r.TVDStartUOM
	, r.TVDEnd
	, r.TVDEndUOM
	, i.IncidentID
	, Case When i.IncidentNumber Is Null Then '' Else i.IncidentNumber End As IncidentNumber
	, tsci.TFF
	, tsci.CSI
	, t.[Type] As ToolType
	, t.District
	, t.ToolStringId
	, t.SerialNumber As ToolString
	, t.SizeId
	, bha.SurfaceRPM
	, bha.WeightOnBit
	, bha.WeightOnBitUOM
	, bha.Torque
	, bha.TorqueUOM
	, md.BaseFluidEnd
	, md.DensityMax
	, md.DensityUnits
	, md.SolidPercentageMax
	, md.pHEnd
	, md.BoreHoleTempMax
	, md.BoreHoleTempUnits
	, mot.MaxDogleg
	, mot.MaxDoglegUOM
FROM dbo.Jobs AS j (NOLOCK)
LEFT JOIN Districts AS d (NOLOCK) ON d.District = j.BranchPlant 
LEFT JOIN Customers cu (NOLOCK) ON cu.CustomerId = j.CustomerId
LEFT JOIN Wells AS w (NOLOCK) ON w.JobID = j.JobID AND w.IsDeleted = 0 
LEFT JOIN Runs AS r (NOLOCK) ON r.WellID = w.WellID AND r.IsDeleted = 0
LEFT JOIN BHA bha (NOLOCK) ON bha.RunID = r.RunID
LEFT JOIN MudData md (NOLOCK) ON md.RunID = r.RunID
LEFT JOIN MotorData mot (NOLOCK) ON mot.RunID = r.RunID
LEFT JOIN Incidents AS i (NOLOCK) ON i.RunID = r.RunID AND i.IsDeleted = 0 
LEFT JOIN (Select tsci1.RunID, tsci1.IncidentID, tsci1.ToolStringId, Max(Convert(tinyint,tsci1.TFF)) As TFF, Max(Convert(tinyint,tsci1.CSI)) As CSI 
			From ToolStringComponentInfo as tsci1 (NOLOCK)
			Where tsci1.RunID Is Not Null
			Group By tsci1.RunID, tsci1.IncidentID, tsci1.ToolStringId
) as tsci ON tsci.RunID = r.RunID 
LEFT JOIN ToolStrings t (NOLOCK) ON t.ToolStringId = tsci.ToolStringId
WHERE t.SerialNumber IS NOT NULL
GO
/****** Object:  View [dbo].[vwRelPieChartsReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwRelPieChartsReport]
AS
SELECT j.Region
	, j.BranchPlant
	, j.Country
	, j.CustomerId
	, j.JobNumber
	, re.RegionDesc
	, co.CountryDesc
	, di.DistrictDesc As District
	, cu.CustomerName As Company
	, w.Well
	, r.RunNumber
	, r.EndDate As OutHoleDate
	, r.TVDEnd
	, r.TVDEndUOM
	, md.BoreHoleTempMax
	, md.BoreHoleTempUnits
	, md.DensityEnd
	, md.DensityUnits
	, h.MaxOperPressure
	, h.MaxOperPressureUOM
	, h.FlowRate
	, h.FlowRateUOM
	, i.IncidentNumber
	, i.FailureDate
	, Case When r.EndDate Is Null Then i.FailureDate Else r.EndDate End As DateFilter
	, vfc.FailureType
	, vfc.FailureCategoryCode
	, vfc.FailureCategoryDesc
	, vfc.FailureSubCategoryCode
	, vfc.FailureSubCategoryDesc
	, vfc.FailureCode
	, vfc.FailureDesc
	, vOS.FailureCategoryCode As OutOfSpecCatCode
	, vOS.FailureCategoryDesc As OutOfSpecCatDesc
	, vOS.FailureSubCategoryCode As OutOfSpecSubCatCode
	, vOS.FailureSubCategoryDesc As OutOfSpecSubCatDesc
	, vOS.FailureCode As OutOfSpecCode
	, vOS.FailureDesc As OutOfSpecDesc
	, vPR.FailureCategoryCode As ProcCatCode
	, vPR.FailureCategoryDesc As ProcCatDesc
	, vPR.FailureSubCategoryCode As ProcSubCatCode
	, vPR.FailureSubCategoryDesc As ProcSubCatDesc
	, vPR.FailureCode As ProcCode
	, vPR.FailureDesc As ProcDesc
	, vfc.IsHistorical
	, r.HEL_LWD
	, r.HEL_EM
	, r.RSS
	, r.EM
	, r.PP
	, r.BECFIELD
	, r.GEOLINK
	, r.TENSOR
	, r.MOTOR
	, r.GWD
	, r.WPR
	, t.[Type] As ToolType
	, tsci.TFF
	, tsci.CSI
	, tsci.NCI
	, tsci.OS
	, tsci.PR
	, tsci.FieldSymptom
	, tsci.PartTypeID As ComponentPartID
	, pt.[Name] ComponentName
	, tsci.SerialNum As SerialNumber
FROM Jobs j WITH(NOLOCK)
LEFT JOIN Wells w WITH(NOLOCK) ON w.JobID = j.JobID AND w.IsDeleted = 0
LEFT JOIN Runs r WITH(NOLOCK) ON r.WellID = w.WellID AND r.IsDeleted = 0
LEFT JOIN MudData md WITH(NOLOCK) ON R.RunID = md.RunID 
LEFT JOIN Hydraulics h WITH(NOLOCK) ON R.RunID = h.RunID 
LEFT JOIN Incidents i WITH(NOLOCK) ON i.RunID = r.RunID AND i.IsDeleted = 0
LEFT JOIN ToolStringComponentInfo tsci WITH(NOLOCK) ON tsci.IncidentID = i.IncidentID
LEFT JOIN ToolStrings t WITH(NOLOCK) ON tsci.ToolStringID = t.ToolStringID
LEFT JOIN PartTypes pt WITH(NOLOCK) ON pt.PartTypeID = tsci.PartTypeID
LEFT JOIN vwFailureCodes vfc ON tsci.CompFailureCodeID = vfc.FailureCodeID
LEFT JOIN vwFailureCodes vOS ON tsci.OutOfSpecCodeID = vOS.FailureCodeID
LEFT JOIN vwFailureCodes vPR ON tsci.ProceduralCodeID = vPR.FailureCodeID
LEFT JOIN Regions re WITH(NOLOCK) on re.region = j.Region
LEFT JOIN Countries co WITH(NOLOCK) on co.Country = j.Country
LEFT JOIN Districts di WITH(NOLOCK) on di.District = j.BranchPlant
LEFT JOIN Customers cu WITH(NOLOCK) on cu.CustomerID = j.CustomerID
WHERE j.IsDeleted = 0 AND tsci.CompFailureCodeID IS NOT NULL



GO
/****** Object:  View [dbo].[vwRelFailureCountReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwRelFailureCountReport]
AS
SELECT 
	Reg.Region
	, D.District
	, Reg.RegionDesc
	, D.DistrictDesc
	, CN.CountryDesc
	, CU.CustomerName
	, J.JobNumber
	, W.Well
	, R.RunID
	, R.RunNumber
	, J.OffShore
	, R.StartDate As InHoleDate
	, R.EndDate AS OutHoleDate
	, dbo.NumCheck(R.OperHrs) As OperHrs
	, dbo.NumCheck(R.CircHrs) As CircHrs
	, dbo.NumCheck(R.DrillHrs) As DrillHrs
	, R.MDStart
	, R.MDStartUOM
	, R.MDEnd
	, R.MDEndUOM
	, R.TVDStart
	, R.TVDStartUOM
	, R.TVDEnd
	, R.TVDEndUOM
	, H.HoleSize
	, H.HoleSizeUOM
	, MD.DensityEnd
	, MD.DensityUnits
	, MD.BoreHoleTempMax
	, MD.BoreHoleTempUnits
	, H.MaxPressure
	, H.MaxPressureUOM
	, H.MaxOperPressure
	, H.MaxOperPressureUOM
	, I.IncidentID
	, I.IncidentNumber
	, I.FailureDate
	, T.[Type] As ToolType
	, T.SerialNumber As Tool
	, TSCI.PartTypeID
	, PT.[Name] As Component
	, TSCI.SerialNum As SerialNumber
	, TSCI.StatusCodeID
	, Case When TSCI.StatusCodeID = 1 Then 'Open' Else 'Close' End As DistrictStatus
	, TSCI.TFF
	, TSCI.CSI
	, TSCI.NCI
	, TSCI.OS
	, TSCI.PR
	, FC.FailureCategoryCode + FC.FailureSubCategoryCode + FC.FailureCode As FailureCode
FROM Jobs J WITH(NOLOCK)
LEFT JOIN Regions REG WITH(NOLOCK) ON REG.Region = J.Region 
LEFT JOIN Districts D WITH(NOLOCK) ON D.District = J.BranchPlant 
LEFT JOIN Countries CN WITH(NOLOCK) ON CN.Country = J.Country 
LEFT JOIN Customers CU WITH(NOLOCK) ON J.CustomerID = CU.CustomerID 
LEFT JOIN Wells W WITH(NOLOCK) ON J.JobID = W.JobID AND W.IsDeleted = 0
LEFT JOIN Runs R WITH(NOLOCK) ON W.WellID = R.WellID AND R.IsDeleted = 0 AND R.ProductLineId=1
LEFT JOIN MudData MD WITH(NOLOCK) ON R.RunID = MD.RunID
LEFT JOIN Hydraulics H WITH(NOLOCK) ON R.RunID = H.RunID
LEFT JOIN Incidents I WITH(NOLOCK) ON R.RunID = I.RunID AND I.IsDeleted = 0
LEFT JOIN ToolStringComponentInfo TSCI WITH(NOLOCK) ON R.RunID = TSCI.RunID 
LEFT JOIN vwFailureCodes FC ON FC.FailureCodeID = TSCI.CompFailureCodeID
LEFT JOIN ToolStrings T WITH(NOLOCK) ON T.ToolStringID = TSCI.ToolStringID
LEFT JOIN PartTypes PT WITH(NOLOCK) ON PT.PartTypeID = TSCI.PartTypeID
WHERE J.IsDeleted = 0 
GO
/****** Object:  View [dbo].[vwComponentHistoryReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwComponentHistoryReport] AS
SELECT R.RunID
	, I.IncidentID
	, CASE WHEN R.EndDate IS NULL THEN Year(I.FailureDate) ELSE Year(R.EndDate) END AS RunYear
	, CASE WHEN R.EndDate IS NULL THEN Month(I.FailureDate) ELSE Month(R.EndDate) END AS RunMonth
	, CASE WHEN R.EndDate IS NULL THEN I.FailureDate ELSE R.EndDate END AS DateFilter
	, reg.Region
	, reg.RegionDesc
	, co.Country
	, co.CountryDesc
	, D.District
	, D.DistrictDesc
	, J.CustomerID
	, cu.CustomerName
	, J.JobNumber
	, J.Offshore
	, J.Rig
	, W.Well
	, R.RunNumber
	, R.EndDate AS OutHoleDate
	, R.OperHrs
	, R.CircHrs
	, R.DrillHrs
	, R.RotatingHrs
	, R.MDStart
	, R.MDStartUOM
	, R.MDEnd
	, R.MDEndUOM
	, R.TVDStart
	, R.TVDStartUOM
	, R.TVDEnd
	, R.TVDEndUOM
	, R.ReasonsForPooh
	, R.AverageROP
	, R.AverageROPUOM
	, R.PulseCount
	, MD.BaseFluidEnd
	, MD.OilPercentageEnd
	, MD.WaterPercentageEnd
	, MD.SandPercentageEnd
	, MD.SolidPercentageEnd
	, MD.pHMax
	, MD.BoreHoleTempMax
	, MD.BoreHoleTempUnits
	, dbo.TempConvert(MD.BoreHoleTempMax, MD.BoreHoleTempUnits, '°C') AS MaxTempC
	, Case When dbo.TempConvert(MD.BoreHoleTempMax, MD.BoreHoleTempUnits, '°C') > 140 Then
	((R.CircHrs * 32) / (POWER(1.071773455,(180-dbo.TempConvert(MD.BoreHoleTempMax, MD.BoreHoleTempUnits, '°C'))))) + (R.OperHrs - R.CircHrs)
	Else R.OperHrs
	End As PMTT
	, MD.DensityMax
	, MD.DensityUnits
	, H.MaxOperPressure
	, H.MaxOperPressureUOM
	, H.MaxObservedPressure
	, H.MaxObservedPressureUOM
	, H.SPP
	, H.SPPUOM
	, H.FlowRate AS LiquidFlow
	, H.FlowRateUOM AS LiquidFlowUOM
	, H.GasFlowRate
	, H.GasFlowRateUOM
	, H.Orifice AS OrificeSize
	, H.OrificeUOM AS OrificeSizeUOM
	, H.HoleSize
	, H.HoleSizeUOM
	, I.IncidentNumber AS FailureNumber
	, I.FailureDate
	, Case I.IsOpen When 1 Then 'Open' When 0 Then 'Closed' Else NULL END AS FailureStatus
	, tsci.ToolStringInfoID
	, t.Type AS ToolType
	, t.SizeID AS ToolSizeID
	, (SELECT ShortName FROM dbo.ToolStringSize WITH(NOLOCK) WHERE ToolSizeID = t.SizeID) AS ToolSize
	, t.ToolStringID
	, t.SerialNumber AS ToolString
	, tsci.PartTypeID AS ComponentID
	, PT.[Name] AS Component
	, tsci.FixedAssetId AS ComponentPartID
	, tsci.SerialNum As SerialNumber
	, tsci.StatusCodeID AS DistrictStatusID
	, tsci.GlobalStatusCodeID AS GlobalStatusID
	, Case tsci.StatusCodeID When 1 Then 'Open' When 0 Then 'Closed' Else NULL End AS DistrictStatus
	, Case tsci.GlobalStatusCodeID When 1 Then 'Open' When 0 Then 'Closed' Else NULL End AS GlobalStatus
	, dbo.NumCheck(tsci.TFF ) As TFF
	, dbo.NumCheck(tsci.CSI) As CI
	, dbo.NumCheck(tsci.NCI) As NCI
	, dbo.NumCheck(tsci.OS) As OS
	, dbo.NumCheck(tsci.PR) As PR
	, tsci.FieldSymptom As AcceptedFieldSymptom
	, tsci.TIPFT
	, tsci.ArtNumber
	, tsci.CompFailureCodeID
	, tsci.OutOfSpecCodeID
	, tsci.ProceduralCodeID
	, vwCFC.FailureType As FailureCodeType
	, vwCFC.FailureCategoryCode
	, vwCFC.FailureSubCategoryCode
	, vwCFC.FailureCode AS FailureCodeNumber
	, vwOSC.FailureType As OSFailureCodeType
	, vwOSC.FailureCategoryCode As OSFailureCategoryCode
	, vwOSC.FailureSubCategoryCode As OSFailureSubCategoryCode
	, vwOSC.FailureCode AS OSFailureCodeNumber
	, vwOSC.FailureDesc As OSFailureDesc
	, vwPRC.FailureCategoryCode As PRFailureCategoryCode
	, vwPRC.FailureSubCategoryCode As PRFailureSubCategoryCode
	, vwPRC.FailureCode AS PRFailureCodeNumber
	, vwPRC.FailureDesc As PRFailureDesc
FROM dbo.Jobs AS J WITH(NOLOCK)
LEFT OUTER JOIN dbo.Regions AS reg WITH(NOLOCK) ON reg.Region = J.Region 
LEFT OUTER JOIN dbo.Countries AS co WITH(NOLOCK) ON co.Country = j.Country
LEFT OUTER JOIN dbo.Districts AS D WITH(NOLOCK) ON D.District = J.BranchPlant 
LEFT OUTER JOIN dbo.Customers AS cu WITH(NOLOCK) ON J.CustomerId = cu.CustomerId 
LEFT OUTER JOIN dbo.Wells AS W WITH(NOLOCK) ON J.JobID = W.JobID AND W.IsDeleted = 0 
LEFT OUTER JOIN dbo.Runs AS R WITH(NOLOCK) ON W.WellID = R.WellID AND R.IsDeleted = 0 
LEFT OUTER JOIN dbo.Incidents AS I WITH(NOLOCK) ON R.RunID = I.RunID AND I.IsDeleted = 0 
LEFT OUTER JOIN dbo.Hydraulics AS H WITH(NOLOCK) ON R.RunID = H.RunID 
LEFT OUTER JOIN dbo.MudData AS MD WITH(NOLOCK) ON R.RunID = MD.RunID 
LEFT OUTER JOIN dbo.ToolStringComponentInfo AS tsci WITH(NOLOCK) ON R.RunID = tsci.RunID 
LEFT OUTER JOIN dbo.ToolStrings AS t WITH(NOLOCK) ON t.ToolStringId = tsci.ToolStringID 
LEFT OUTER JOIN dbo.vwFailureCodes AS vwCFC WITH(NOLOCK) ON vwCFC.FailureCodeId = tsci.CompFailureCodeID 
LEFT OUTER JOIN dbo.vwFailureCodes AS vwOSC WITH(NOLOCK) ON vwOSC.FailureCodeId = tsci.OutOfSpecCodeID 
LEFT OUTER JOIN dbo.vwFailureCodes AS vwPRC WITH(NOLOCK) ON vwPRC.FailureCodeId = tsci.ProceduralCodeID
LEFT OUTER JOIN dbo.PartTypes AS PT WITH(NOLOCK) ON PT.PartTypeID = tsci.PartTypeID
WHERE J.IsDeleted = 0 AND tsci.SerialNum IS NOT NULL




GO
/****** Object:  Table [dbo].[GFAIncidents]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GFAIncidents](
	[GFAId] [uniqueidentifier] NOT NULL,
	[JobId] [uniqueidentifier] NOT NULL,
	[RunNumber] [varchar](30) NULL,
	[Activity] [varchar](50) NULL,
	[GFANumber] [varchar](50) NULL,
	[CreateDate] [datetime] NULL,
	[FailureDate] [datetime] NULL,
	[EmployeeId] [uniqueidentifier] NULL,
	[ProductLine] [varchar](50) NULL,
	[FieldSymptom] [varchar](200) NULL,
	[TFF] [bit] NOT NULL,
	[CI] [bit] NOT NULL,
	[NCI] [bit] NOT NULL,
	[MudType] [varchar](50) NULL,
	[CircHrs] [varchar](25) NULL,
	[VibrationLevel] [bit] NOT NULL,
	[CoordContacted] [bit] NOT NULL,
	[GlobalContacted] [bit] NOT NULL,
	[FailureDesc] [varchar](5000) NULL,
	[PossibleCauses] [varchar](5000) NULL,
	[ServiceLine] [varchar](10) NULL,
	[RunCircHrs] [float] NULL,
	[NPT] [float] NULL,
	[TotalCircHrs] [float] NULL,
	[Disposition] [varchar](20) NULL,
	[Summary] [varchar](5000) NULL,
	[IncidentId] [uniqueidentifier] NULL,
	[IncidentNumber] [varchar](50) NULL,
	[Is3030] [bit] NOT NULL,
	[AcceptedFieldFailure] [varchar](200) NULL,
	[MaxTemp] [float] NULL,
	[MaxTempUOM] [varchar](2) NULL,
	[Depth] [float] NULL,
	[DepthUOM] [varchar](2) NULL,
	[EmailSent] [bit] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[UserIdAdded] [int] NOT NULL,
	[LastEdit] [datetime] NULL,
	[LastEditBy] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[WellName] [varchar](50) NULL,
 CONSTRAINT [PK_GFAIncidents] PRIMARY KEY CLUSTERED 
(
	[GFAId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwRMAnalysisEditHeader]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vwRMAnalysisEditHeader]
AS
SELECT i.IncidentID
  	, dist.DistrictDesc
	, dist.ShortDistrict
	, j.JobNumber
	, j.Coordinator
	, cu.CustomerName
	, w.Well
	, r.RunNumber
	, i.IncidentNumber
	, Cast(Left(DateName(mm,i.FailureDate),3) as varchar(3)) + '-' + Cast(Day(i.FailureDate) as varchar(2)) + '-' + Cast(Year(i.FailureDate) as varchar(4)) As FailureDate
	, i.CoreVersion
	, Case i.IsOpen When 0 Then 'Closed' When 1 Then 'Open' When 99 Then 'Closed/District' End As StatusDesc
	, i.FieldSummary
	, i.FieldSurfCheckSummary
	, i.Dist_LWD
	, i.Dist_DD
	, i.Dist_MWD
	, i.Dist_RSS
	, i.Dist_SURVEY
	, i.Dist_SURFACE
	, i.Global_LWD
	, i.Global_DD
	, i.Global_MWD
	, i.Global_RSS
	, i.Global_SURVEY
	, i.Global_SURFACE
	, i.AcceptedLostTime
	, i.ClientNPT
	, i.COF
	, Round(dbo.TempConvert(md.BoreHoleTempMax,md.BoreHoleTempUnits,'°C'),0) As MaxTemp
	, '°C' As MaxTempUOM
	, Round(h.FlowRate,2) As FlowRate
	, h.FlowRateUOM
	, Round(md.DensityEnd,2) As MudWeight
	, md.DensityUnits As MudWeightUOM
	, md.SandPercentageMax As SandContent
	, Round(h.MaxOperPressure,0) As MaxOperPressure
	, h.MaxOperPressureUOM
	, r.OperHrs As RunLength
	, r.CircHrs As CircHrs
	, Case When (Select Max(Cast(tsci.CSI as tinyint)) CSI From ToolStringComponentInfo tsci WITH(NOLOCK) Where tsci.IncidentID = i.IncidentID) = 1 And (dbo.NumCheck(r.CircHrs) <= 30.0 Or i.AcceptedLostTime >= 30.0) Then 'Yes' Else 'No' End As Is3030
	, (Select Top 1 gfa.GFAID From GFAIncidents gfa WITH(NOLOCK) Where gfa.IncidentID = i.IncidentID Order By CreateDate Desc) As GFAID
	, i.MaxDoglegSeverity
	, i.MaxWhirl
	, i.MaxStickSlip
	, ifc.LevelOneId
	, ifc.LevelTwoId
	, ifc.LevelThreeId
	, ifc.LevelOneCode + ifc.LevelTwoCode + ifc.LevelThreeCode As FaultCode
	, ifc.TapRootId
FROM Jobs j WITH(NOLOCK)
LEFT JOIN Districts dist WITH(NOLOCK) ON dist.District = j.BranchPlant
LEFT JOIN Customers cu WITH(NOLOCK) ON cu.CustomerID = j.CustomerID
LEFT JOIN Wells w WITH(NOLOCK) ON w.JobID = j.JobID AND w.IsDeleted = 0
LEFT JOIN Runs r WITH(NOLOCK) ON r.WellID = w.WellID AND r.IsDeleted = 0
LEFT JOIN Incidents i WITH(NOLOCK) ON i.RunID = r.RunID AND i.IsDeleted = 0
LEFT JOIN vwIncidentFaultCodes ifc WITH(NOLOCK) ON ifc.IncidentId = I.IncidentID
LEFT JOIN Hydraulics h WITH(NOLOCK) ON h.RunID = r.RunID
LEFT JOIN MudData md WITH(NOLOCK) ON md.RunID = r.RunID
WHERE j.IsDeleted = 0




GO
/****** Object:  View [dbo].[vwOpsAssetEvents]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwOpsAssetEvents]
AS

SELECT
	tsci.ToolStringInfoID
	, p.FixedAssetId
	, p.SerialNum
	, p.InventoryItemNum
	, j.JobId
	, j.JobNumber
	, r.StartDate
	, null AS PFTType
	, r.OperHrs
	, r.CircHrs
	, r.DrillHrs
	, i.IncidentID
	, i.IncidentNumber
	, i.FieldSummary
	, stuff((
			SELECT 
				', ' + (fc.FailureCode + sfc.FailureSubCategoryCode + fc.FailureCode)
			FROM Incidents i2 WITH (NOLOCK)
			   INNER JOIN ToolStringComponentInfo tsci WITH (NOLOCK) ON tsci.IncidentID = i2.IncidentID
			   INNER JOIN FailureCodes fc WITH (NOLOCK) ON fc.FailureCodeId = tsci.CompFailureCodeID
			   INNER JOIN FailureSubCategories sfc WITH (NOLOCK) ON sfc.FailureSubCategoryId = fc.FailureSubCategoryId
			WHERE i2.IncidentID = i.IncidentID
	   FOR XML PATH('')), 1, 1, '') as FailureCodes
	, (
		SELECT COUNT(1) FROM ToolStringComponentInfo info WITH (NOLOCK)
		WHERE CompFailureCodeID is not null
			AND IncidentID = i.IncidentID 
			AND info.FixedAssetID = tsci.FixedAssetID) AS IsMatch
	, 'J' AS RecordType
	, c.CustomerName
	, b.BranchPlant
	, w.Well
	, r.RunNumber
	, r.MdStart 
	, r.MdStartUOM
	, r.MdEnd
	, r.MdEndUOM
	, itemNum.DescShort  AS CompDesc
	, r.EndDate
	, md.BoreholeTempMax AS MaxTemp
	, null AS PFTSeqComment
	, b.CompanyName as BranchPlantName
FROM ToolStringComponentInfo tsci WITH (NOLOCK)
INNER JOIN FixedAssets p WITH (NOLOCK) ON p.FixedAssetId = tsci.FixedAssetID
INNER JOIN Runs r WITH (NOLOCK) ON r.RunID = tsci.RunID AND r.IsDeleted = 0
INNER JOIN Wells w WITH (NOLOCK) ON w.WellID = r.WellID AND w.IsDeleted = 0
INNER JOIN Jobs j WITH (NOLOCK) ON j.JobId = w.JobID and j.IsDeleted = 0
LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = j.BranchPlant
LEFT JOIN Customers C WITH (NOLOCK) ON C.CustomerId= j.CustomerId
LEFT JOIN Incidents i WITH (NOLOCK) ON i.RunID = r.RunID
LEFT JOIN MudData md WITH (NOLOCK) ON md.RunID = r.RunID
LEFT JOIN ItemNums itemNum WITH (NOLOCK) ON itemNum.ItemNum = p.InventoryItemNum
WHERE 1 = 2
UNION ALL

SELECT
	 a.PFTWOId 
	, f.FixedAssetId
	, f.SerialNum
	, f.InventoryItemNum
	, a.PFTWOId AS JobId
	, a.WO_NO AS JobPFTNum
	, a.DateAdded AS StartDate
	, sl.OptionLabel AS PFTType
	, (SELECT SUM(ISNULL(r.OperHrs,0))
		FROM ToolStringComponentInfo tsci (NOLOCK)
			INNER JOIN FixedAssets fa (NOLOCK) ON fa.FixedAssetId = tsci.FixedAssetID
			INNER JOIN Runs r (NOLOCK) on r.RunID = tsci.RunID AND r.IsDeleted = 0
		WHERE fa.FixedAssetId = a.FixedAssetId AND r.OperHrs IS NOT NULL and r.EndDate <= a.DateAdded
			AND r.EndDate >= (SELECT MAX(pft2.DateAdded) FROM PFTWO pft2 (NOLOCK) WHERE pft2.FixedAssetId = a.FixedAssetId AND pft2.DateAdded < a.DateAdded AND pft2.PFTType IN ( 0, 1))
			AND r.IsDeleted = 0
	) AS OperHrs
	, (SELECT SUM(ISNULL(r.CircHrs,0))
		FROM ToolStringComponentInfo tsci (NOLOCK)
			INNER JOIN FixedAssets fa (NOLOCK) ON fa.FixedAssetId = tsci.FixedAssetID
			INNER JOIN Runs r (NOLOCK) ON r.RunID = tsci.RunID AND r.IsDeleted = 0
		WHERE fa.FixedAssetId = a.FixedAssetId AND r.CircHrs IS NOT NULL AND r.EndDate <= a.DateAdded
			AND r.EndDate >= (SELECT MAX(pft2.DateAdded) FROM PFTWO pft2 (NOLOCK) WHERE pft2.FixedAssetId = a.FixedAssetId AND pft2.DateAdded < a.DateAdded AND pft2.PFTType IN ( 0, 1))
			AND r.IsDeleted = 0
	) AS CircHrs
	, (SELECT SUM(ISNULL(r.DrillHrs,0))
		FROM ToolStringComponentInfo tsci (NOLOCK)
			INNER JOIN FixedAssets fa (NOLOCK) ON fa.FixedAssetId = tsci.FixedAssetID 
			INNER JOIN Runs r (NOLOCK) on r.RunID = tsci.RunID AND r.IsDeleted = 0
		WHERE fa.FixedAssetId = a.FixedAssetId And r.DrillHrs IS NOT NULL AND r.EndDate <= a.DateAdded
			AND r.EndDate >= (SELECT MAX(pft2.DateAdded) FROM PFTWO pft2 (NOLOCK) WHERE pft2.FixedAssetId = a.FixedAssetId AND pft2.DateAdded < a.DateAdded AND pft2.PFTType IN ( 0, 1))
			AND r.IsDeleted = 0
	) AS DrillHrs
	, NULL, NULL, NULL, NULL, NULL
	, 'P' AS RecordType
	, NULL, b.BranchPlant, NULL, NULL, NULL
	, NULL, NULL, NULL, NULL, NULL, NULL
	, LTRIM(RTRIM(STUFF(
		(SELECT ', ' + CONVERT(VARCHAR, pftwoseq1.Comment)
		 FROM PFTWOSeq pftwoseq1 WHERE a.PFTWOId = pftwoseq1.PFTWOId
		 FOR XML PATH('')), 1, 1, ''))) AS PFTSeqComment
	, b.CompanyName as BranchPlantName
FROM PFTWO a (NOLOCK)
INNER JOIN FixedAssets f (NOLOCK) ON f.FixedAssetId = a.FixedAssetId
INNER JOIN SelectOptions sl (NOLOCK) ON sl.SelectName = 'PFTConfigType' AND sl.OptionValue = a.PFTType
LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = a.BranchPlant
WHERE 1 = 2


GO
/****** Object:  Table [dbo].[DataFields]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DataFields](
	[DataFieldId] [int] IDENTITY(1,1) NOT NULL,
	[FieldName] [varchar](50) NOT NULL,
	[DisplayName] [varchar](128) NOT NULL,
	[FieldDataTypeOptionValue] [varchar](1) NOT NULL,
	[FormatString] [varchar](50) NULL,
	[DataFieldLookupId] [int] NULL,
	[MinLength] [smallint] NULL,
	[MaxLength] [smallint] NULL,
	[NumDisplayRows] [smallint] NOT NULL,
	[IsRequired] [bit] NOT NULL,
	[IsReadOnly] [bit] NOT NULL,
	[IsReportCriteria] [bit] NOT NULL,
	[DefaultValue] [varchar](255) NULL,
	[DefaultDisplaySize] [smallint] NULL,
	[DefaultDisplayOrder] [smallint] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[ParentDataFieldId] [int] NULL,
	[FieldCategoryOptionValue] [varchar](1) NULL,
	[LookupKey] [varchar](50) NULL,
	[LookupParamName] [varchar](50) NULL,
	[IsRange] [bit] NULL,
	[IsCustomProperty] [bit] NOT NULL,
	[IsAllowWorkOrder] [bit] NOT NULL,
 CONSTRAINT [PK_Field] PRIMARY KEY CLUSTERED 
(
	[DataFieldId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FixedAssetValues]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FixedAssetValues](
	[FixedAssetValueId] [int] IDENTITY(1,1) NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[DataFieldId] [int] NOT NULL,
	[StringValue] [varchar](8000) NULL,
	[DateValue] [datetime] NULL,
	[NumberValue] [decimal](18, 4) NULL,
	[BooleanValue] [bit] NULL,
	[GuidValue] [uniqueidentifier] NULL,
 CONSTRAINT [PK_PartValue] PRIMARY KEY CLUSTERED 
(
	[FixedAssetValueId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwFixedAssetValues]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwFixedAssetValues]
AS

SELECT  fav.FixedAssetValueId
		, fav.FixedAssetId
		, fav.DataFieldId
		, fav.StringValue
		, fav.DateValue
		, fav.NumberValue
		, fav.BooleanValue
		, fav.GuidValue
		, f.FieldName
		, f.DisplayName
		, f.FieldDataTypeOptionValue
		, CASE 
			WHEN f.FieldDataTypeOptionValue  IN (1, 2, 3 ) THEN fav.StringValue
			WHEN f.FieldDataTypeOptionValue = 4 THEN CONVERT(VARCHAR, fav.DateValue,101)
			WHEN f.FieldDataTypeOptionValue IN(5 ,6) THEN CONVERT(VARCHAR,CONVERT(decimal(18,2),fav.NumberValue))
			WHEN f.FieldDataTypeOptionValue IN(7 ,8) THEN CONVERT(VARCHAR,fav.BooleanValue)
		END AS DisplayValue
		, f.IsAllowWorkOrder
FROM dbo.FixedAssetValues (NOLOCK) fav
LEFT JOIN dbo.DataFields (NOLOCK) f ON f.DataFieldId = fav.DataFieldId


GO
/****** Object:  Table [dbo].[Portlets]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Portlets](
	[PortletId] [int] IDENTITY(1,1) NOT NULL,
	[PortletName] [varchar](255) NULL,
	[EntityName] [varchar](200) NOT NULL,
	[SortInfo] [varchar](50) NOT NULL,
	[SortOrder] [varchar](10) NOT NULL,
	[PortletType] [varchar](50) NULL,
	[IsDefault] [bit] NULL,
	[BranchPlantColumnName] [varchar](50) NULL,
	[Active] [bit] NOT NULL,
 CONSTRAINT [PK_Portlets] PRIMARY KEY CLUSTERED 
(
	[PortletId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PortletColumns]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PortletColumns](
	[PortletColumnId] [int] IDENTITY(1,1) NOT NULL,
	[PortletId] [int] NOT NULL,
	[DataFieldId] [int] NOT NULL,
	[ColumnId] [varchar](100) NULL,
	[Align] [varchar](50) NULL,
	[IsSortable] [bit] NOT NULL,
	[IsHidden] [bit] NOT NULL,
	[IsHideable] [bit] NOT NULL,
	[IsMenuDisabled] [bit] NOT NULL,
	[IsExportable] [bit] NOT NULL,
	[DataType] [varchar](50) NULL,
	[UseNull] [bit] NULL,
	[LinkUrl] [varchar](400) NULL,
	[LinkFields] [varchar](200) NULL,
 CONSTRAINT [PK_PortletColumns] PRIMARY KEY CLUSTERED 
(
	[PortletColumnId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwPortletColumns]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwPortletColumns] AS

SELECT	pc.PortletColumnId, 
		pc.PortletId,
		df.DataFieldId, 
		df.DisplayName,
		pc.ColumnId,
		df.FieldName,
		df.MinLength,
		pc.Align,
		pc.IsSortable, 
		pc.IsHidden,
		pc.IsHideable,
		pc.IsMenuDisabled, 
		pc.IsExportable,
		df.IsReportCriteria,
		pc.DataType,
		pc.UseNull,
		df.FormatString,
		df.DefaultDisplayOrder,
		pc.LinkUrl,
		pc.LinkFields
from PortletColumns (NOLOCK) pc
INNER JOIN DataFields (NOLOCK) df  ON df.DataFieldId = pc.DataFieldId
INNER JOIN Portlets (NOLOCK) p ON p.PortletId = pc.PortletId
WHERE p.Active=1



GO
/****** Object:  Table [dbo].[PortletFilters]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PortletFilters](
	[PortletFilterId] [int] IDENTITY(1,1) NOT NULL,
	[PortletId] [int] NOT NULL,
	[DataFieldId] [int] NOT NULL,
	[AllowMultipleSelect] [tinyint] NULL,
	[Source] [varchar](1000) NULL,
	[SourceType] [varchar](50) NULL,
	[DataTextField] [varchar](300) NULL,
	[DataValueField] [varchar](300) NULL,
	[ColumnRange] [varchar](1) NULL,
 CONSTRAINT [PK_PortletFilters] PRIMARY KEY CLUSTERED 
(
	[PortletFilterId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PortletUserFilter]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PortletUserFilter](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NULL,
	[PortletFilterID] [int] NULL,
	[FilterValue] [nvarchar](max) NULL,
 CONSTRAINT [PK_PortletUserFilter] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwPortletFilters]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwPortletFilters]
AS

SELECT pf.PortletFilterId,
	df.FieldName, 
	pf.PortletId, 
	df.DisplayName,
	df.LookupKey, 
	df.LookupParamName, 
	pf.AllowMultipleSelect, 
	pf.Source, 
	pf.SourceType, 
	pf.DataTextField, 
	pf.DataValueField, 
	df.FieldDataTypeOptionValue,
	(SELECT TOP 1 puf.FilterValue FROM PortletUserFilter(NOLOCK) puf WHERE puf.PortletFilterID = pf.PortletFilterId AND puf.UserID=u.UserId) AS FilterValue,
	u.UserID,
	(SELECT TOP 1 puf.ID FROM PortletUserFilter(NOLOCK) puf WHERE puf.PortletFilterID = pf.PortletFilterId AND puf.UserID=u.UserId) AS PortletUserFilterID,
	pf.ColumnRange,
	df.DefaultValue,
	df.IsReportCriteria,
	df.IsReadOnly 
FROM Users (NOLOCK) u
JOIN PortletFilters(NOLOCK) pf ON 1 = 1
INNER JOIN DataFields (NOLOCK) df ON df.DataFieldId = pf.DataFieldId
INNER JOIN Portlets (NOLOCK) p ON p.PortletId = pf.PortletId
WHERE p.Active=1
GO
/****** Object:  Table [dbo].[DispatchInstanceItems]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DispatchInstanceItems](
	[DispatchInstanceItemId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DispatchInstanceId] [uniqueidentifier] NOT NULL,
	[LineNumber] [int] NULL,
	[FixedAssetId] [uniqueidentifier] NULL,
	[AssetNumber] [varchar](15) NULL,
	[SerialNum] [varchar](50) NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[Description] [varchar](255) NULL,
	[Revision] [varchar](2) NULL,
	[Size] [varchar](10) NULL,
	[QtyShipped] [int] NOT NULL,
	[TopConnection] [varchar](50) NULL,
	[BottomConnection] [varchar](50) NULL,
	[DateAdded] [datetime] NOT NULL,
	[QtyReturned] [int] NULL,
	[DateReturned] [datetime] NULL,
	[Comments] [varchar](255) NULL,
	[Condition] [varchar](255) NULL,
	[ReasonCode] [varchar](50) NULL,
	[ToolStringId] [uniqueidentifier] NULL,
	[RNItemNum] [varchar](30) NULL,
	[JDETxnNum] [int] NULL,
	[AmountExtendedPrice] [decimal](19, 4) NULL,
	[ForeignExtendedPrice] [decimal](19, 4) NULL,
	[TrxnCurrency] [varchar](5) NULL,
	[BaseCurrency] [varchar](5) NULL,
	[QtySold] [int] NULL,
	[DateBilled] [datetime] NULL,
	[ParentId] [uniqueidentifier] NULL,
	[ReturnToBranchPlant] [varchar](12) NULL,
	[AIRTBranchPlant] [varchar](12) NULL,
	[ErrorMessage] [varchar](max) NULL,
	[RevenueBusinessUnit] [varchar](30) NULL,
 CONSTRAINT [PK_DispatchInstanceItem] PRIMARY KEY CLUSTERED 
(
	[DispatchInstanceItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[GLCodes]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GLCodes](
	[GLCode] [varchar](20) NULL,
	[Description] [varchar](250) NULL,
	[GLProductLineId] [int] NULL,
	[UpdatedBy] [varchar](10) NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[GroupPL] [varchar](250) NULL,
	[GroupPLShort] [varchar](250) NULL,
	[SegmentPL] [varchar](250) NULL,
	[SegmentPLShort] [varchar](250) NULL,
	[ProductLine] [varchar](250) NULL,
	[ProductLineService] [varchar](250) NULL,
	[RollUpJobType] [varchar](10) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwComponentSerialNumLookup]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwComponentSerialNumLookup]
AS
SELECT a.FixedAssetId  
 , a.AssetNumber  
 , a.BranchPlant  
 , a.FixedAssetBranchPlant  
 , a.SerialNum  
 , a.RNItemNum  
 , a.InventoryItemNum  
 , a.Revision  
 , a.EquipmentStatus  
 , bp.CompanyName As BranchPlantName  
 , ISNULL(rn.ToolCode, inv.ToolCode) As ToolCode  
 , ISNULL(rn.ToolPanel, inv.ToolPanel) As ToolPanel  
 , ISNULL(rn.DescShort, inv.DescShort) As RNDescShort  
 , a.MasterFirmwareRevision  
 , fw.DescShort As MasterFirmwareShortDesc  
 , (Select Top 1 Case When fav.DataFieldId In (719, 720) And fav.BooleanValue = 1 Then df.DisplayName Else NULL End  
  From FixedAssetValues fav  
  Left Join DataFields df On df.DataFieldId = fav.DataFieldId  
  Where fav.FixedAssetId = a.FixedAssetID  
 ) As CustomProperty  
 , a.AssetLifeRemaining  
 , ps.Status [AssetStatus]  
 , ps.IsDisposed  
 , gc.GLProductLineId [ProductLine]  
 , (SELECT TOP 1 CASE WHEN ISNULL(dii.DateReturned, '') = '' THEN '' ELSE CONVERT(VARCHAR(10),dii.DateReturned,101) END FROM DispatchInstanceItems dii WHERE SerialNum=a.SerialNum AND ItemNum=a.RNItemNum AND ISNULL(ErrorMessage, '')='' ORDER BY dii.DateReturned DESC) DTReturnDate
 , dbo.udf_IsAIRTOrDTAssigned(a.SerialNum, a.InventoryItemNum) As IsAIRTOrDTAssigned
 , (SELECT TOP 1 ArtNumber FROM AssetRepairTrack WHERE FixedAssetId =  a.FixedAssetId ORDER BY DateAdded DESC) AS ArtNumber
FROM FixedAssets a WITH (NOLOCK)  
JOIN PartStatus ps WITH (NOLOCK) ON ps.Code = a.EquipmentStatus  
LEFT JOIN BranchPlants bp WITH (NOLOCK) ON bp.BranchPlant = a.BranchPlant  
LEFT JOIN ItemNums rn WITH (NOLOCK) ON rn.ItemNum = a.RNItemNum   
LEFT JOIN ItemNums inv WITH (NOLOCK) ON inv.ItemNum = a.InventoryItemNum   
LEFT JOIN ItemNums fw WITH (NOLOCK) ON fw.ItemNum = a.MasterFirmwareItemNum  
LEFT JOIN GLCodes gc  WITH (NOLOCK) ON gc.GLCode = a.ProductLineCode  
WHERE a.NotUsed = 0 
GO
/****** Object:  Table [dbo].[ECNApprovers]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ECNApprovers](
	[ECNApproverId] [int] IDENTITY(1,1) NOT NULL,
	[ECNId] [int] NOT NULL,
	[ApprovalType] [nvarchar](50) NULL,
	[Approver] [nvarchar](50) NULL,
	[ApprovalDate] [datetime] NULL,
	[ApprovedWA] [nvarchar](50) NULL,
	[Source] [varchar](3) NULL,
 CONSTRAINT [PK_ECNApprovers] PRIMARY KEY CLUSTERED 
(
	[ECNApproverId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ECNs]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ECNs](
	[ECNId] [int] IDENTITY(1,1) NOT NULL,
	[ECNNumber] [varchar](15) NULL,
	[ECNDepartment] [varchar](30) NULL,
	[ECNCategory] [varchar](1) NULL,
	[ECNCreator] [varchar](50) NOT NULL,
	[ECNCreatedDate] [datetime] NULL,
	[ECNPriority] [varchar](10) NULL,
	[ECNReason] [varchar](max) NULL,
	[ECNStatus] [varchar](40) NULL,
	[ECNStatusDate] [datetime] NULL,
	[ECNType] [tinyint] NOT NULL,
	[ECNName] [varchar](255) NULL,
	[ECNDescription] [varchar](4000) NULL,
	[IsFromJDE] [bit] NOT NULL,
 CONSTRAINT [PK_ECNs] PRIMARY KEY CLUSTERED 
(
	[ECNId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwECNApprovers]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[vwECNApprovers] AS
SELECT ecna.ECNApproverId,
	ecna.ECNId,
	ecna.ApprovalType, 
	ecna.Approver, 
	ecna.ApprovalDate, 
	ecna.ApprovedWA,
	ecna.Source,
	ecn.ECNNumber
FROM ECNApprovers ecna with (NOLOCK)
LEFT OUTER JOIN ECNs ecn with (NOLOCK) ON ecn.ECNId = ecna.ECNId





GO
/****** Object:  Table [dbo].[PartTransferDtl]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PartTransferDtl](
	[PartTransferDtlId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[PartTransferId] [uniqueidentifier] NULL,
	[JDETransactionId] [int] NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[AssetNumber] [varchar](30) NULL,
	[DocumentType] [varchar](25) NULL,
	[DocumentNumber] [varchar](30) NULL,
	[AddressNumber] [int] NULL,
	[InventoryItemNum] [varchar](30) NULL,
	[RNItemNum] [varchar](30) NULL,
	[SerialNum] [varchar](50) NULL,
	[Revision] [varchar](2) NULL,
	[Quantity] [int] NOT NULL,
	[AssetStatus] [varchar](2) NULL,
	[DateShipConfirmed] [datetime] NULL,
	[UserCreatedDocument] [varchar](25) NULL,
	[UserApprovedonRecvSide] [varchar](25) NULL,
	[DateApproved] [datetime] NULL,
	[SendingLocation] [varchar](12) NULL,
	[ReceivingLocation] [varchar](12) NULL,
	[AssetTransferReqNo] [varchar](25) NULL,
	[DateofTransaction] [datetime] NULL,
	[OwnershipCode] [varchar](3) NULL,
	[DateAdded] [datetime] NULL,
	[RefId] [uniqueidentifier] NULL,
	[Source] [varchar](2) NULL,
	[Dest] [varchar](2) NULL,
	[RefType] [varchar](2) NULL,
	[RefNum] [varchar](25) NULL,
	[ParentNumber] [varchar](260) NULL,
	[Comment] [varchar](1024) NULL,
	[Disposition] [varchar](50) NULL,
	[ErrorMessage] [varchar](max) NULL,
 CONSTRAINT [PK_PartTransferDtl] PRIMARY KEY CLUSTERED 
(
	[PartTransferDtlId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ClientOrderFixedAssets]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ClientOrderFixedAssets](
	[ClientOrderFixedAssetId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ClientOrderId] [uniqueidentifier] NOT NULL,
	[PartTransferId] [uniqueidentifier] NULL,
	[PartTransferDtlId] [uniqueidentifier] NULL,
	[DateAdded] [datetime] NOT NULL,
	[DeliveryNoteNumber] [varchar](64) NULL,
	[ReceiptPartTransferDtlId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_ClientOrderFixedAssets] PRIMARY KEY CLUSTERED 
(
	[ClientOrderFixedAssetId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwClientOrderReceive]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwClientOrderReceive]
AS

SELECT cofa.ClientOrderFixedAssetId ,ptd.SerialNum, ptd.InventoryItemNum, ptd.Revision, ptd.FixedAssetId, ptd.AssetNumber,
fa.AssetDescription as Description, ptd.DateShipConfirmed as DateShipped, null as StandardCost,
cofa.ClientOrderId, fa.EquipmentStatus, fa.BranchPlant, cofa.ReceiptPartTransferDtlId 
FROM ClientOrderFixedAssets (NOLOCK) cofa
LEFT JOIN PartTransferDtl (NOLOCK) ptd ON cofa.PartTransferDtlId = ptd.PartTransferDtlId
LEFT JOIN FixedAssets (NOLOCK) fa ON ptd.FixedAssetId = fa.FixedAssetId


GO
/****** Object:  Table [dbo].[DispatchInstances]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DispatchInstances](
	[DispatchInstanceId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DispatchId] [uniqueidentifier] NOT NULL,
	[SequenceNum] [int] NOT NULL,
	[ReturnSequenceNum] [int] NULL,
	[ShipTo] [int] NULL,
	[ShipType] [varchar](15) NOT NULL,
	[DateShipped] [datetime] NULL,
	[DateDelivered] [datetime] NULL,
	[DateLastEdit] [datetime] NULL,
	[UserIdLastEdit] [int] NULL,
	[DateAdded] [datetime] NOT NULL,
	[InvoiceSequenceNum] [int] NULL,
	[InvoiceNum] [varchar](20) NULL,
	[InvoiceType] [varchar](20) NULL,
	[InvoiceCompany] [varchar](12) NULL,
	[JobType] [varchar](50) NULL,
 CONSTRAINT [PK_DispatchInstance] PRIMARY KEY CLUSTERED 
(
	[DispatchInstanceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessUnits]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessUnits](
	[BusinessUnit] [varchar](20) NOT NULL,
	[BranchPlant] [varchar](12) NULL,
	[Description] [varchar](150) NULL,
	[UserId] [varchar](10) NULL,
	[CreatedOn] [datetime] NULL,
	[GLCode] [varchar](20) NULL,
	[IsActive] [bit] NULL,
	[BUType] [varchar](20) NULL,
	[Department] [varchar](20) NULL,
	[ToCountryCode] [varchar](20) NULL,
	[OrgCountryCode] [varchar](20) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ItemNumMetadata]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ItemNumMetadata](
	[ItemNumMetaDataId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[MetaName] [varchar](255) NOT NULL,
	[MetaValue] [varchar](4000) NULL,
	[UOM] [varchar](50) NULL,
 CONSTRAINT [PK_ItemNumMetadata] PRIMARY KEY CLUSTERED 
(
	[ItemNumMetaDataId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Dispatches]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Dispatches](
	[DispatchId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[DispatchNumber] [int] NOT NULL,
	[JDEJobNumber] [varchar](50) NULL,
	[JDECustomerNumber] [int] NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[WellName] [varchar](50) NULL,
	[WellDetails1] [varchar](50) NULL,
	[WellDetails3] [varchar](50) NULL,
	[RigName] [varchar](50) NULL,
	[DateLastEdit] [datetime] NULL,
	[UserIdLastEdit] [int] NULL,
	[DateAdded] [datetime] NOT NULL,
	[JobId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_Dispatch] PRIMARY KEY CLUSTERED 
(
	[DispatchId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_DispatchNumber] UNIQUE NONCLUSTERED 
(
	[DispatchNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ToolStringFixedAssets]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ToolStringFixedAssets](
	[ToolStringFixedAssetsId] [uniqueidentifier] NOT NULL,
	[ToolStringID] [uniqueidentifier] NOT NULL,
	[FixedAssetID] [uniqueidentifier] NOT NULL,
	[SerialNum] [varchar](30) NULL,
	[RNItemNum] [varchar](30) NULL,
	[InventoryItemNum] [varchar](30) NULL,
	[PartTypeID] [int] NULL,
	[OrderPosition] [int] NULL,
	[SortNumber] [int] NULL,
	[Revision] [varchar](2) NULL,
	[ToolCode] [varchar](40) NULL,
	[MasterFirmwareRevision] [varchar](12) NULL,
	[CustomProperty] [varchar](128) NULL,
	[DateAdded] [datetime] NULL,
	[Description] [varchar](400) NULL,
	[ContainerId] [int] NULL,
	[Comments] [varchar](500) NULL,
 CONSTRAINT [PK_ToolStringFixedAssets] PRIMARY KEY CLUSTERED 
(
	[ToolStringFixedAssetsId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwFixedAssetsSearch1]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=========================================================================================  
--MODIFIED BY: SUYEB MOHAMMAD  
--MODIFIED ON :19 Feb 2015  
--DESCRIPTION: Added new productline   
--========================================================================================  
CREATE VIEW [dbo].[vwFixedAssetsSearch1]
AS  
SELECT f.*,
	
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN rsloc.RegionDesc END SourceRegion,
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN csloc.CountryDesc END AS SourceCountry,
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN p.SendingLocation END AS SourceBranchPlant,
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN sloc.CompanyName END AS SourceBranchPlantName,
  
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN rrloc.RegionDesc END DestRegion,
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN crloc.CountryDesc END AS DestCountry,
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN p.ReceivingLocation END AS DestBranchPlant,
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN rloc.CompanyName END AS DestBranchPlantName,

	regLastbillable.RegionDesc AS LastBillableRegion,
	clastbillable.CountryDesc AS LastBillableCountry,
	bpLastbillable.BranchPlant LastBillableBranchPlant,
	bpLastbillable.CompanyName AS LastBillableBranchPlantName	

FROM 
(
SELECT   
  fa.FixedAssetId,
  (SELECT TOP 1 ptd.PartTransferDtlId FROM PartTransferDtl ptd WITH (NOLOCK) WHERE ptd.FixedAssetId = fa.FixedAssetId 
	ORDER BY ptd.DateofTransaction DESC) [PartTransferDtlId],
  (SELECT TOP 1 ReceivingLocation FROM [PartTransferDtl] [PTD] WITH (NOLOCK)
					LEFT OUTER JOIN [BranchPlants](NOLOCK) [BP] ON [BP].[BranchPlant] = [PTD].ReceivingLocation
			WHERE	[PTD].[FixedAssetId] = fa.FixedAssetId AND [BP].[IsOperationsBillableLocation] = 1
			ORDER BY [PTD].[DateofTransaction] DESC) [LastBillableBranchPlantNum],
  fa.SerialNum,  
  fa.InventoryItemNum,  
  fa.AssetNumber,  
  fa.BranchPlant,  
  bp.CompanyName AS BranchPlantName,  
  fap.AssetNumber AS ParentNumber,  
  fa.EquipmentStatus,  
  fa.LegacySerialNumber,  
  fa.RNItemNum,  
  fa.AssetDescription AS FixedAssetDescription,  
  i.DescShort AS AssetDescription,  
  ri.DescShort AS RNAssetDescription,  
  i.DescLong AS InventoryDescLong,  
  fa.Ownership,  
  fa.OwnershipDesc,  
  fa.LastStatusChangeDate,  
  DATEDIFF(DAY, ISNULL(fa.LastStatusChangeDate, GETDATE()), GETDATE()) AS DaysInStatus,  
  fa.Cost,  
  fa.NetBookValue,  
  fa.CurrencyCode,  
  fa.MasterFirmwareRevision,  
  fa.MasterFirmwareItemNum,  
  fa.FirmwareVersion,  
  fa.TechId,  
  fa.MfgPartNum,  
  fa.ThirdItemNumber,  
  fa.PhysicalLocation,  
  fa.FixedAssetBranchPlant,  
  fbp.CompanyName AS FixedAssetBranchPlantName,  
  fa.ManufacturersSerialNumber,  
  fa.LastComments,  
  fa.Revision,  
  fa.CatCode16,  
  fa.VerifiedBy,  
  fa.VerifiedDate,  
  fa.VerifiedLocation,  
  ISNULL(ps.IsDisposed,0) [IsDisposed],  
  ps.[Status] AS StatusDesc,  
  (SELECT TOP 1 j.JobNumber  
 FROM DispatchInstanceItems dii (NOLOCK)  
 JOIN DispatchInstances di (NOLOCK) ON di.DispatchInstanceId = dii.DispatchInstanceId  
 JOIN Dispatches d (NOLOCK) ON d.DispatchId = di.DispatchId  
 JOIN Jobs j (NOLOCK) ON j.JobId = d.JobId  
  WHERE dii.FixedAssetId = fa.FixedAssetId AND dii.DateReturned IS NULL) AS JobNumber,  
  r.Region,  
  r.RegionDesc,  
  c.Country,  
  c.CountryDesc,  
  bp.IsRepair,  
  bp.IsGlobalRepair,  
  bp.IsOps,  
  bp.SAPFuncLoc,  
  ISNULL(ri.ToolPanel, i.ToolPanel) AS ToolPanel,  
  ISNULL(ri.ToolCode, i.ToolCode) AS ToolCode,  
  ISNULL(ri.ItemNum2, i.ItemNum2) AS ItemNum2,  
  ISNULL(ri.ItemNum3, i.ItemNum3) AS ItemNum3,  
  ISNULL(ri.LegacyNum, i.LegacyNum) AS LegacyNum,  
  gl.GLProductLineId AS ProductLineId,  
  ISNULL(i.Critical, 0) AS Critical,  
  i.DescShort AS ItemNumDescShort,  
  i.DescLong AS ItemNumDescLong,  
  i.Size,  
  
  --CASE WHEN fa.EquipmentStatus IN ('50', 'IN') THEN (SELECT TOP 1 ts.SerialNumber  
  --     FROM ToolStringFixedAssets tsfa (NOLOCK)  
  --  JOIN ToolStrings ts (NOLOCK) ON ts.ToolStringId = tsfa.ToolStringID  
  --  WHERE ts.Disassembled = 0 AND ts.IsDeleted = 0 AND tsfa.FixedAssetId = fa.FixedAssetId)  
  --ELSE NULL END AS ToolString,  
  (SELECT TOP 1 ts.SerialNumber  
 FROM ToolStringFixedAssets tsfa (NOLOCK)  
 JOIN ToolStrings ts (NOLOCK) ON ts.ToolStringId = tsfa.ToolStringID  
 WHERE ts.Disassembled = 0 AND ts.IsDeleted = 0 AND tsfa.FixedAssetId = fa.FixedAssetId  
 ORDER BY ts.CreateDate DESC) ToolString,  
  
  CASE WHEN soRadioActive.SelectOptionId IS NULL THEN 0 ELSE 1 END AS IsRadioActive,  
  CASE WHEN fa.EquipmentStatus IN ('50', 'IN') THEN fatp.SerialNum ELSE NULL END AS TopLevelSerialNum,  
  CASE WHEN fa.EquipmentStatus IN ('50', 'IN') THEN pst.Status ELSE NULL END AS TopLevelEquipmentStatus,  
  ISNULL(ri.IsAsset, ISNULL(i.IsAsset, 0)) AS IsAsset,  
  CASE ISNULL(ri.IsAsset, ISNULL(i.IsAsset, 0)) WHEN 1 THEN 'Y' ELSE 'N' END AS IsAssetDisplay,  
  ISNULL(r.Active,0) AS IsRegionActive,   
  i.PartCode,  
  (SELECT TOP 1 imd.MetaValue FROM ItemNumMetadata(NOLOCK) imd  WHERE imd.MetaName = 'TOOL_SIZE_NOMINAL' AND imd.ItemNum = fa.InventoryItemNum) AS ToolSizeNominal,  
  i.NetWeight,  
  i.DefaultSerialProfile,  
  ISNULL(ri.PartClassification, i.PartClassification) AS PartClassification,  
  ISNULL(ri.Revision, i.Revision) AS LatestRevision,  
  null AS CostInUSD,  
  null AS NetBookValueInUSD, 
  null AS CurrencyLastUpdated,  
  -- Removed on TFS # 91116
  --fa.Cost * cc.ConversionFactor AS CostInUSD,  
  --fa.NetBookValue * cc.ConversionFactor AS NetBookValueInUSD, 
  --cc.EffectiveStartDate AS CurrencyLastUpdated,  
  fa.AcqCode,  
  fa.MajorAccountingClass,  
  fa.JournalingFlag,  
  fa.ApplicationCode,
  fa.AssetLifeRemaining,
  bp.[IsOperationsBillableLocation]  
FROM dbo.FixedAssets(NOLOCK) fa  
LEFT OUTER JOIN FixedAssets(NOLOCK) fap ON fap.FixedAssetId = fa.ParentFixedAssetId  
LEFT OUTER JOIN FixedAssets(NOLOCK) fatp ON fatp.FixedAssetId = fa.TopLevelFixedAssetId  
LEFT JOIN dbo.ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum  
LEFT JOIN dbo.ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum  
LEFT JOIN dbo.BranchPlants(NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant  
LEFT JOIN dbo.BranchPlants(NOLOCK) fbp ON fbp.BranchPlant = fa.FixedAssetBranchPlant  
LEFT JOIN dbo.SelectOptions(NOLOCK) soRadioActive ON soRadioActive.SelectName = 'AIRTRadioActive'  
  AND soRadioActive.OptionValue = ISNULL(ri.ToolCode, i.ToolCode)  
LEFT JOIN dbo.PartStatus(NOLOCK) ps ON ps.Code = fa.EquipmentStatus  
LEFT JOIN dbo.PartStatus(NOLOCK) pst ON pst.Code = fatp.EquipmentStatus  
LEFT JOIN dbo.Regions(NOLOCK) r ON r.Region = bp.Region  
LEFT JOIN dbo.Countries(NOLOCK) c ON c.Country = bp.Country  
--LEFT JOIN GLCodes gl ON gl.GLCode = fa.ProductLineCode  
LEFT OUTER JOIN BusinessUnits bu (NOLOCK) ON fa.BusinessUnit=bu.BusinessUnit
LEFT OUTER JOIN GLCodes gl (NOLOCK) ON gl.GLCode = bu.GLCode
-- Removed on TFS # 91116
--LEFT JOIN (SELECT * FROM CurrencyConversionFactors(NOLOCK) ccf1   
--   WHERE ccf1.EffectiveStartDate = (SELECT MAX(ccf2.EffectiveStartDate)   
--            FROM CurrencyConversionFactors(NOLOCK) ccf2   
--            WHERE ccf2.EffectiveStartDate <= GETDATE() AND ccf2.CurrShortName = ccf1.CurrShortName)  
--   ) cc ON cc.CurrShortName = fa.CurrencyCode
) f
LEFT JOIN PartTransferDtl p (NOLOCK) ON p.PartTransferDtlId = f.PartTransferDtlId and p.DocumentType IN ('S0','S5','S9','ST','S1')
LEFT JOIN BranchPlants sloc (NOLOCK) on sloc.BranchPlant = p.SendingLocation
LEFT OUTER JOIN Regions(NOLOCK) rsloc ON rsloc.Region = sloc.Region  
LEFT OUTER JOIN Countries(NOLOCK) csloc ON csloc.Country = sloc.Country  
   
LEFT JOIN BranchPlants rloc (NOLOCK) ON rloc.BranchPlant = p.ReceivingLocation
LEFT OUTER JOIN Regions(NOLOCK) rrloc ON rrloc.Region = rloc.Region  
LEFT OUTER JOIN Countries(NOLOCK) crloc ON crloc.Country = rloc.Country  

LEFT JOIN BranchPlants bpLastbillable (NOLOCK) ON bpLastbillable.BranchPlant = f.LastBillableBranchPlantNum
LEFT OUTER JOIN Regions(NOLOCK) regLastbillable ON regLastbillable.Region = bpLastbillable.Region  
LEFT OUTER JOIN Countries(NOLOCK) clastbillable ON bpLastbillable.Country = clastbillable.Country
GO
/****** Object:  Table [dbo].[PartTransfers]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PartTransfers](
	[PartTransferId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[TransferType] [int] NOT NULL,
	[TransferDate] [datetime] NOT NULL,
	[CustomsInvoiceNum] [varchar](40) NULL,
	[ToBranchPlant] [varchar](12) NULL,
	[Comment] [varchar](1024) NULL,
	[ProcessedBy] [varchar](15) NULL,
	[ToolPanel] [varchar](30) NULL,
	[RefNum] [varchar](25) NULL,
 CONSTRAINT [PK_PartTransfers] PRIMARY KEY CLUSTERED 
(
	[PartTransferId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwWorkOrderPartTransferSummary]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwWorkOrderPartTransferSummary] AS
SELECT
	NEWID() as Id,
	wo.WorkOrderId,
	ptd.InventoryItemNum,
	SUM(CASE WHEN ptd.Source = 'IN' THEN ptd.Quantity ELSE 0 END) as QtyRemoved,
	SUM(CASE WHEN ptd.Dest = 'IN' THEN ptd.Quantity ELSE 0 END) as QtyAdded
FROM PartTransferDtl ptd (NOLOCK)
LEFT JOIN PartTransfers pt (NOLOCK) ON pt.PartTransferId = ptd.PartTransferId
LEFT JOIN WorkOrders wo (NOLOCK) ON wo.WorkOrderId = ptd.RefId
WHERE ptd.RefType = 'WO' AND pt.TransferType = 9
GROUP by wo.WorkOrderId, ptd.InventoryItemNum

GO
/****** Object:  View [dbo].[vwAssetTransferReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwAssetTransferReport] AS

SELECT  ptd.PartTransferDtlId 
		, ptd.DateofTransaction AS TransferDate
		, ptd.UserCreatedDocument
		, ptd.SendingLocation AS FromBranchPlant
		, sbp.CompanyName AS FromBranchPlantDesc
		, ptd.ReceivingLocation AS ToBranchPlant
		, dbp.CompanyName AS ToBranchPlantDesc
		, fa.TechId
		, ISNULL(ri.IsAsset, ISNULL(i.IsAsset, 0)) as IsAsset 
		, ISNULL(ri.ToolPanel, i.ToolPanel) as ToolPanel
		, ISNULL(ri.ToolCode, i.ToolCode) as ToolCode
		, sc.CountryDesc AS FromCountry
		, sr.RegionDesc AS FromRegion
		, dc.CountryDesc AS ToCountry 
		, dr.RegionDesc AS ToRegion
		, fa.SerialNum
		, i.ItemNum
		, fa.RNItemNum
FROM PartTransferDtl (NOLOCK) ptd
JOIN FixedAssets (NOLOCK) fa ON fa.FixedAssetId = ptd.FixedAssetId
LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = ptd.InventoryItemNum
LEFT JOIN ItemNums (NOLOCK) ri ON ri.ItemNum = ptd.RNItemNum
LEFT JOIN BranchPlants (NOLOCK) sbp ON sbp.BranchPlant = ptd.SendingLocation
LEFT JOIN Regions (NOLOCK) sr ON sr.Region = sbp.Region
LEFT JOIN Countries (NOLOCK) sc ON sc.Country = sbp.Country
LEFT JOIN BranchPlants (NOLOCK) dbp ON dbp.BranchPlant = ptd.ReceivingLocation
LEFT JOIN Regions (NOLOCK) dr ON dr.Region = dbp.Region
LEFT JOIN Countries (NOLOCK) dc ON dc.Country = dbp.Country



GO
/****** Object:  View [dbo].[vwLastStatusChangeReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwLastStatusChangeReport] as

SELECT ptd.UserCreatedDocument,ptd.DateofTransaction,
	ptd.PartTransferDtlId, ptd.FixedAssetId ,ptd.SerialNum,ptd.InventoryItemNum,ptd.AssetNumber,
	ptd.Quantity, ptd.RNItemNum, ptd.RefType, ptd.[Source] as FromStatus, ptd.Dest as ToStatus,
	sps.[Status] as FromStatusDesc, dps.[Status] as ToStatusDesc, 
	f.EquipmentStatus as CurrentStatus, fps.[Status] as CurrentStatusDesc, 
	cbp.BranchPlant as CurrentBranchPlant, cbp.CompanyName AS CurrentBranchPlantDesc,
	sbp.BranchPlant as FromBranchPlant, sbp.CompanyName AS FromBranchPlantDesc,
	dbp.BranchPlant as ToBranchPlant, dbp.CompanyName AS ToBranchPlantDesc,
	sbp.Region as FromRegion, dbp.Region AS ToRegion,i.ToolPanel,i.ToolCode,i.IsAsset,f.TechId,
	sr.RegionDesc as FromRegionDesc, dr.RegionDesc as ToRegionDesc
	
FROM PartTransferDtl ptd (NOLOCK)
LEFT JOIN FixedAssets f (NOLOCK) on ptd.FixedAssetId = f.FixedAssetId
LEFT JOIN ItemNums i (NOLOCK) on f.InventoryItemNum = i.ItemNum 
LEFT JOIN PartStatus sps (NOLOCK) ON sps.Code = ptd.[Source]
LEFT JOIN PartStatus dps (NOLOCK) ON dps.Code = ptd.Dest
LEFT JOIN PartStatus fps (NOLOCK) ON fps.Code = f.EquipmentStatus
LEFT JOIN BranchPlants cbp (NOLOCK) on cbp.BranchPlant = f.BranchPlant 
LEFT JOIN BranchPlants sbp (NOLOCK) on sbp.BranchPlant = ptd.SendingLocation
LEFT JOIN Regions sr (NOLOCK) ON sr.Region = sbp.Region
LEFT JOIN BranchPlants dbp (NOLOCK) on dbp.BranchPlant = ptd.ReceivingLocation
LEFT JOIN Regions dr (NOLOCK) ON dr.Region = dbp.Region



GO
/****** Object:  View [dbo].[vwFixedAssetCommentsHistory]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[vwFixedAssetCommentsHistory] as
select 
	ptd.UserCreatedDocument
	, ptd.DateAdded
	, ptd.PartTransferDtlId
	, ptd.FixedAssetId
	, ptd.SerialNum
	, ptd.InventoryItemNum
	, ptd.AssetNumber
	, ptd.Quantity
	, ptd.RNItemNum
	, ptd.RefType
	, ISNULL(ri.ToolPanel, i.ToolPanel) as ToolPanel
	, ISNULL(ri.ToolCode, i.ToolCode) as ToolCode
	, ISNULL(ri.IsAsset, ISNULL(i.IsAsset, 0)) as IsAsset
	, ptd.Comment as PartTransferDtlComments
	, fa.TechId
from PartTransferDtl(NOLOCK) ptd
left join FixedAssets(NOLOCK) fa ON fa.FixedAssetId = ptd.FixedAssetId
left join ItemNums(NOLOCK) i ON i.ItemNum = ptd.InventoryItemNum
left join ItemNums(NOLOCK) ri ON ri.ItemNum = ptd.RNItemNum


GO
/****** Object:  View [dbo].[vwFixedAssetsSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=========================================================================================  
--MODIFIED BY: SUYEB MOHAMMAD  
--MODIFIED ON :19 Feb 2015  
--DESCRIPTION: Added new productline   
--========================================================================================  
CREATE VIEW [dbo].[vwFixedAssetsSearch]
AS  
SELECT f.*,
	
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN rsloc.RegionDesc END SourceRegion,
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN csloc.CountryDesc END AS SourceCountry,
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN p.SendingLocation END AS SourceBranchPlant,
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN sloc.CompanyName END AS SourceBranchPlantName,
  
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN rrloc.RegionDesc END DestRegion,
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN crloc.CountryDesc END AS DestCountry,
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN p.ReceivingLocation END AS DestBranchPlant,
	CASE WHEN f.EquipmentStatus IN ('PT', 'IT') THEN rloc.CompanyName END AS DestBranchPlantName,

	regLastbillable.RegionDesc AS LastBillableRegion,
	clastbillable.CountryDesc AS LastBillableCountry,
	bpLastbillable.BranchPlant LastBillableBranchPlant,
	bpLastbillable.CompanyName AS LastBillableBranchPlantName	

FROM 
(
SELECT   
  fa.FixedAssetId,
  (SELECT TOP 1 ptd.PartTransferDtlId FROM PartTransferDtl ptd WITH (NOLOCK) WHERE ptd.FixedAssetId = fa.FixedAssetId 
	ORDER BY ptd.DateofTransaction DESC) [PartTransferDtlId],
  (SELECT TOP 1 ReceivingLocation FROM [PartTransferDtl] [PTD] WITH (NOLOCK)
					LEFT OUTER JOIN [BranchPlants](NOLOCK) [BP] ON [BP].[BranchPlant] = [PTD].ReceivingLocation
			WHERE	[PTD].[FixedAssetId] = fa.FixedAssetId AND [BP].[IsOperationsBillableLocation] = 1
			ORDER BY [PTD].[DateofTransaction] DESC) [LastBillableBranchPlantNum],
  fa.SerialNum,  
  fa.InventoryItemNum,  
  fa.AssetNumber,  
  fa.BranchPlant,  
  bp.CompanyName AS BranchPlantName,  
  fap.AssetNumber AS ParentNumber,  
  fa.EquipmentStatus,  
  fa.LegacySerialNumber,  
  fa.RNItemNum,  
  fa.AssetDescription AS FixedAssetDescription,  
  i.DescShort AS AssetDescription,  
  ri.DescShort AS RNAssetDescription,  
  i.DescLong AS InventoryDescLong,  
  fa.Ownership,  
  fa.OwnershipDesc,  
  fa.LastStatusChangeDate,  
  DATEDIFF(DAY, ISNULL(fa.LastStatusChangeDate, GETDATE()), GETDATE()) AS DaysInStatus,  
  fa.Cost,  
  fa.NetBookValue,  
  fa.CurrencyCode,  
  fa.MasterFirmwareRevision,  
  fa.MasterFirmwareItemNum,  
  fa.FirmwareVersion,  
  fa.TechId,  
  fa.MfgPartNum,  
  fa.ThirdItemNumber,  
  fa.PhysicalLocation,  
  fa.FixedAssetBranchPlant,  
  fbp.CompanyName AS FixedAssetBranchPlantName,  
  fa.ManufacturersSerialNumber,  
  fa.LastComments,  
  fa.Revision,  
  fa.CatCode16,  
  fa.VerifiedBy,  
  fa.VerifiedDate,  
  fa.VerifiedLocation,  
  ISNULL(ps.IsDisposed,0) [IsDisposed],  
  ps.[Status] AS StatusDesc,  
  (SELECT TOP 1 j.JobNumber  
 FROM DispatchInstanceItems dii (NOLOCK)  
 JOIN DispatchInstances di (NOLOCK) ON di.DispatchInstanceId = dii.DispatchInstanceId  
 JOIN Dispatches d (NOLOCK) ON d.DispatchId = di.DispatchId  
 JOIN Jobs j (NOLOCK) ON j.JobId = d.JobId  
  WHERE dii.FixedAssetId = fa.FixedAssetId AND dii.DateReturned IS NULL) AS JobNumber,  
  r.Region,  
  r.RegionDesc,  
  c.Country,  
  c.CountryDesc,  
  bp.IsRepair,  
  bp.IsGlobalRepair,  
  bp.IsOps,  
  bp.SAPFuncLoc,  
  ISNULL(ri.ToolPanel, i.ToolPanel) AS ToolPanel,  
  ISNULL(ri.ToolCode, i.ToolCode) AS ToolCode,  
  ISNULL(ri.ItemNum2, i.ItemNum2) AS ItemNum2,  
  ISNULL(ri.ItemNum3, i.ItemNum3) AS ItemNum3,  
  ISNULL(ri.LegacyNum, i.LegacyNum) AS LegacyNum,  
  gl.GLProductLineId AS ProductLineId,  
  ISNULL(i.Critical, 0) AS Critical,  
  i.DescShort AS ItemNumDescShort,  
  i.DescLong AS ItemNumDescLong,  
  i.Size,  
  
  --CASE WHEN fa.EquipmentStatus IN ('50', 'IN') THEN (SELECT TOP 1 ts.SerialNumber  
  --     FROM ToolStringFixedAssets tsfa (NOLOCK)  
  --  JOIN ToolStrings ts (NOLOCK) ON ts.ToolStringId = tsfa.ToolStringID  
  --  WHERE ts.Disassembled = 0 AND ts.IsDeleted = 0 AND tsfa.FixedAssetId = fa.FixedAssetId)  
  --ELSE NULL END AS ToolString,  
  (SELECT TOP 1 ts.SerialNumber  
 FROM ToolStringFixedAssets tsfa (NOLOCK)  
 JOIN ToolStrings ts (NOLOCK) ON ts.ToolStringId = tsfa.ToolStringID  
 WHERE ts.Disassembled = 0 AND ts.IsDeleted = 0 AND tsfa.FixedAssetId = fa.FixedAssetId  
 ORDER BY ts.CreateDate DESC) ToolString,  
  
  CASE WHEN soRadioActive.SelectOptionId IS NULL THEN 0 ELSE 1 END AS IsRadioActive,  
  CASE WHEN fa.EquipmentStatus IN ('50', 'IN') THEN fatp.SerialNum ELSE NULL END AS TopLevelSerialNum,  
  CASE WHEN fa.EquipmentStatus IN ('50', 'IN') THEN pst.Status ELSE NULL END AS TopLevelEquipmentStatus,  
  ISNULL(ri.IsAsset, ISNULL(i.IsAsset, 0)) AS IsAsset,  
  CASE ISNULL(ri.IsAsset, ISNULL(i.IsAsset, 0)) WHEN 1 THEN 'Y' ELSE 'N' END AS IsAssetDisplay,  
  ISNULL(r.Active,0) AS IsRegionActive,   
  i.PartCode,  
  (SELECT TOP 1 imd.MetaValue FROM ItemNumMetadata(NOLOCK) imd  WHERE imd.MetaName = 'TOOL_SIZE_NOMINAL' AND imd.ItemNum = fa.InventoryItemNum) AS ToolSizeNominal,  
  i.NetWeight,  
  i.DefaultSerialProfile,  
  ISNULL(ri.PartClassification, i.PartClassification) AS PartClassification,  
  ISNULL(ri.Revision, i.Revision) AS LatestRevision,  
  null AS CostInUSD,  
  null AS NetBookValueInUSD, 
  null AS CurrencyLastUpdated,  
  -- Removed on TFS # 91116
  --fa.Cost * cc.ConversionFactor AS CostInUSD,  
  --fa.NetBookValue * cc.ConversionFactor AS NetBookValueInUSD, 
  --cc.EffectiveStartDate AS CurrencyLastUpdated,  
  fa.AcqCode,  
  fa.MajorAccountingClass,  
  fa.JournalingFlag,  
  fa.ApplicationCode,
  fa.AssetLifeRemaining,
  bp.[IsOperationsBillableLocation]  
FROM dbo.FixedAssets(NOLOCK) fa  
LEFT OUTER JOIN FixedAssets(NOLOCK) fap ON fap.FixedAssetId = fa.ParentFixedAssetId  
LEFT OUTER JOIN FixedAssets(NOLOCK) fatp ON fatp.FixedAssetId = fa.TopLevelFixedAssetId  
LEFT JOIN dbo.ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum  
LEFT JOIN dbo.ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum  
LEFT JOIN dbo.BranchPlants(NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant  
LEFT JOIN dbo.BranchPlants(NOLOCK) fbp ON fbp.BranchPlant = fa.FixedAssetBranchPlant  
LEFT JOIN dbo.SelectOptions(NOLOCK) soRadioActive ON soRadioActive.SelectName = 'AIRTRadioActive'  
  AND soRadioActive.OptionValue = ISNULL(ri.ToolCode, i.ToolCode)  
LEFT JOIN dbo.PartStatus(NOLOCK) ps ON ps.Code = fa.EquipmentStatus  
LEFT JOIN dbo.PartStatus(NOLOCK) pst ON pst.Code = fatp.EquipmentStatus  
LEFT JOIN dbo.Regions(NOLOCK) r ON r.Region = bp.Region  
LEFT JOIN dbo.Countries(NOLOCK) c ON c.Country = bp.Country  
LEFT JOIN GLCodes gl ON gl.GLCode = fa.ProductLineCode  
-- Removed on TFS # 91116
--LEFT JOIN (SELECT * FROM CurrencyConversionFactors(NOLOCK) ccf1   
--   WHERE ccf1.EffectiveStartDate = (SELECT MAX(ccf2.EffectiveStartDate)   
--            FROM CurrencyConversionFactors(NOLOCK) ccf2   
--            WHERE ccf2.EffectiveStartDate <= GETDATE() AND ccf2.CurrShortName = ccf1.CurrShortName)  
--   ) cc ON cc.CurrShortName = fa.CurrencyCode
) f
LEFT JOIN PartTransferDtl p (NOLOCK) ON p.PartTransferDtlId = f.PartTransferDtlId and p.DocumentType IN ('S0','S5','S9','ST','S1')
LEFT JOIN BranchPlants sloc (NOLOCK) on sloc.BranchPlant = p.SendingLocation
LEFT OUTER JOIN Regions(NOLOCK) rsloc ON rsloc.Region = sloc.Region  
LEFT OUTER JOIN Countries(NOLOCK) csloc ON csloc.Country = sloc.Country  
   
LEFT JOIN BranchPlants rloc (NOLOCK) ON rloc.BranchPlant = p.ReceivingLocation
LEFT OUTER JOIN Regions(NOLOCK) rrloc ON rrloc.Region = rloc.Region  
LEFT OUTER JOIN Countries(NOLOCK) crloc ON crloc.Country = rloc.Country  

LEFT JOIN BranchPlants bpLastbillable (NOLOCK) ON bpLastbillable.BranchPlant = f.LastBillableBranchPlantNum
LEFT OUTER JOIN Regions(NOLOCK) regLastbillable ON regLastbillable.Region = bpLastbillable.Region  
LEFT OUTER JOIN Countries(NOLOCK) clastbillable ON bpLastbillable.Country = clastbillable.Country


GO
/****** Object:  Table [dbo].[CBMRunAssetMappings]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CBMRunAssetMappings](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[RunId] [uniqueidentifier] NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[ImportDate] [datetime] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ParentFixedAssetId] [uniqueidentifier] NULL,
	[TopLevelFixedAssetId] [uniqueidentifier] NULL,
 CONSTRAINT [PK__CBMRunAs__3214EC07524FE66E] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CBMMonitor]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CBMMonitor](
	[CBMMonitorId] [int] IDENTITY(1,1) NOT NULL,
	[MeterReadingTypeId] [int] NULL,
	[PFTConfigId] [uniqueidentifier] NULL,
	[GlobalTrigger] [int] NULL,
	[CreateJDEWO] [bit] NULL,
	[Active] [bit] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NULL,
	[UpdatedOn] [datetime] NULL,
	[UpdatedBy] [int] NULL,
	[DefaultMeterReading] [decimal](18, 2) NULL,
	[EffectiveDate] [datetime] NULL,
	[ObjectNumber] [int] NULL,
 CONSTRAINT [PK_CBMMonitor] PRIMARY KEY CLUSTERED 
(
	[CBMMonitorId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CBMCalculatedMeterReadings]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CBMCalculatedMeterReadings](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[MeterReadingTypeId] [int] NULL,
	[LastMeterReadingValue] [varchar](50) NULL,
	[LifeTimeValue] [varchar](20) NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[LastPFTWOId] [uniqueidentifier] NULL,
	[CBMMonitorId] [int] NULL,
 CONSTRAINT [PK__CBMCalcu__3214EC0757149B8B] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CBMMonitorAssetItemNums]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CBMMonitorAssetItemNums](
	[CBMMonitorAssetItemNumId] [int] IDENTITY(1,1) NOT NULL,
	[CBMMonitorId] [int] NOT NULL,
	[ItemNum] [varchar](50) NOT NULL,
	[CreatedBy] [varchar](100) NULL,
	[CreatedOn] [datetime] NULL,
	[IsParent] [bit] NOT NULL,
 CONSTRAINT [PK__CBMMonit__8CE2ED1E552C5319] PRIMARY KEY CLUSTERED 
(
	[CBMMonitorAssetItemNumId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[VW_FixedAsset_LifeConsumed]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[VW_FixedAsset_LifeConsumed]
AS
SELECT FixedAssetId,
[AssetLifeConsumed],
100 - [AssetLifeConsumed] As [AssetLifeRemaining]
FROM (
	SELECT c.FixedAssetId, Max(c.AssetLifeConsumed) as [AssetLifeConsumed] FROM
(SELECT f1.FixedAssetId,
		CONVERT(DECIMAL(10,2), 
					MAX(CASE WHEN CONVERT(DECIMAL(10,2), m.LastMeterReadingValue) > cm.GlobalTrigger THEN 100.00
							ELSE (CONVERT(DECIMAL(10,2), m.LastMeterReadingValue) / CONVERT(INT, cm.GlobalTrigger)) * 100.00 end))  [AssetLifeConsumed]
	FROM dbo.CBMCalculatedMeterReadings m (NOLOCK)
	JOIN FixedAssets f (NOLOCK) ON f.FixedAssetId = m.FixedAssetId
	JOIN BranchPlants b (NOLOCK) ON b.BranchPlant = f.BranchPlant
	JOIN (
			SELECT FixedAssetId, TopLevelFixedAssetId
			FROM CBMRunAssetMappings cam (NOLOCK)
			JOIN Runs r (NOLOCK) ON r.runid = cam.runid
			GROUP BY FixedAssetId, TopLevelFixedAssetId
			) a ON a.FixedAssetId = m.FixedAssetId
	JOIN FixedAssetS f1 (NOLOCK) ON f1.FixedAssetId = a.TopLevelFixedAssetId
	JOIN CBMMonitorAssetItemNums ca1 (NOLOCK) ON ca1.ItemNum = f1.InventoryItemNum AND ca1.IsParent = 1
	JOIN CBMMonitorAssetItemNums ca2 (NOLOCK) ON ca2.ItemNum = f.InventoryItemNum AND ca2.IsParent = 0
	JOIN CBMMonitor cm (NOLOCK) ON cm.CBMMonitorId = ca1.CBMMonitorId AND cm.CBMMonitorId = ca2.CBMMonitorId AND m.MeterReadingTypeId = cm.MeterReadingTypeId
	WHERE cm.MeterReadingTypeId != 5 AND ISNUMERIC(m.LastMeterReadingValue)=1
	GROUP by f1.FixedAssetId	
UNION
	SELECT b.FixedAssetId, max(b.AssetLifeConsumed) FROM 
	(SELECT f1.FixedAssetId,  m.MeterReadingTypeId,	 
	CONVERT(DECIMAL(10,2), MAX(	CASE WHEN m.MeterReadingTypeId = 5 THEN
										CASE WHEN CONVERT(DECIMAL(10,2), scheduledCount) > m.GlobalTrigger THEN 100.00
										ELSE (CONVERT(DECIMAL(10,2), scheduledCount) / CONVERT(INT, m.GlobalTrigger)) * 100.00 
										END 
									WHEN m.MeterReadingTypeId = 8 THEN
										CASE WHEN artCount = 0 OR (artCount % m.GlobalTrigger) = 0 THEN 0 
										ELSE ((artCount % m.GlobalTrigger)/m.GlobalTrigger) * 100 
										END
									WHEN m.MeterReadingTypeId = 10 THEN
										CASE WHEN CONVERT(DECIMAL(10,2), dtCount) > m.GlobalTrigger THEN 100.00
										ELSE (CONVERT(DECIMAL(10,2), dtCount) / CONVERT(INT, m.GlobalTrigger)) * 100.00 
										END
									WHEN m.MeterReadingTypeId = 11 THEN
										CASE WHEN CONVERT(DECIMAL(10,2), dtSCount) > m.GlobalTrigger THEN 100.00
										ELSE (CONVERT(DECIMAL(10,2), dtSCount) / CONVERT(INT, m.GlobalTrigger)) * 100.00 
										END
								END)) [AssetLifeConsumed]
	
	FROM CBMMonitor m (NOLOCK)   
	JOIN CBMMonitorAssetItemNums p (NOLOCK) on p.CBMMonitorId = m.CBMMonitorId and p.IsParent = 1  
	JOIN CBMMonitorAssetItemNums C (NOLOCK) ON c.CBMMonitorId = m.CBMMonitorId and c.IsParent = 0  
	JOIN AssetRepairTrack a (NOLOCK) on a.ItemNum = c.ItemNum  
	JOIN FixedAssets f (NOLOCK) ON a.FixedAssetId = f.FixedAssetId  
	JOIN FixedAssets f1 (NOLOCK) ON f1.FixedAssetId = ISNULL(f.TopLevelFixedAssetId, f.FixedAssetId) AND f1.InventoryItemNum = p.ItemNum  
	LEFT JOIN CBMCalculatedMeterReadings r  (NOLOCK) ON r.FixedAssetId = f1.FixedAssetid AND r.MeterReadingTypeId = m.MeterReadingTypeId AND r.CBMMonitorId = m.CBMMonitorId --AND r.MeterReadingTypeId = 5
	CROSS APPLY(SELECT artCount = (SELECT COUNT(*) FROM AssetRepairTrack art (NOLOCK) WHERE art.FixedAssetId = f.FixedAssetId)) ac --- airt count
	CROSS APPLY (SELECT scheduledCount =	DATEDIFF(dd,    --- scheduled
											COALESCE(r.LastMeterReadingValue
													--,(SELECT  MAX(pws.DateAdded) [DateAdded] FROM PFTWO pw JOIN PFTWOSeq pws on pw.PFTWOId = pws.PFTWOId
													--	WHERE pw.FixedAssetId = f1.FixedAssetId AND pw.PFTConfigId = m.PFTConfigId AND m.MeterReadingTypeId = 5 AND pw.PFTType = 3 and pw.Active = 0) -- PMPFT  
													,(SELECT MIN(DateofTransaction) [DateofTransaction] FROM PartTransferDtl p (NOLOCK) Where Dest = 'IN' AND p.FixedAssetId = f1.fixedAssetId)  
													, f1.DateAdded)  
													,GETDATE())) sc
	CROSS APPLY (SELECT dtCount = CASE WHEN ---check active Days Since DT pmpft
					(SELECT COUNT(pw.PFTWOId) FROM PFTWO pw (NOLOCK)
					WHERE pw.FixedAssetId = f1.FixedAssetId AND pw.PFTType = 3 AND pw.PFTConfigId = m.PFTConfigId AND m.MeterReadingTypeId = 10 AND pw.Active = 1) >= 1 
					THEN 0 ELSE 
					(
					SELECT TOP 1 
					CASE di.ShipType 
					WHEN 'DT-RETURN' THEN
						CASE	
								WHEN --check latest DT pmpft
									(SELECT COUNT(pw.PFTWOId) FROM PFTWO pw (NOLOCK)
									WHERE pw.FixedAssetId = f1.FixedAssetId AND pw.PFTType = 3 AND pw.PFTConfigId = m.PFTConfigId AND m.MeterReadingTypeId = 10) = 0
								THEN DATEDIFF(dd, dii.DateReturned , GETDATE()) 
								WHEN 
									dii.DateReturned > (SELECT MAX(pws.DateAdded) [DateAdded] FROM PFTWO pw (NOLOCK) JOIN PFTWOSeq pws (NOLOCK) on pw.PFTWOId = pws.PFTWOId
									WHERE pw.FixedAssetId = f1.FixedAssetId and pw.PFTType = 3 AND pw.PFTConfigId = m.PFTConfigId AND m.MeterReadingTypeId = 10 AND pw.Active = 0)
								THEN DATEDIFF(dd, dii.DateReturned , GETDATE()) 
						END 
					ELSE null END
					FROM	Dispatches d (NOLOCK) JOIN
							DispatchInstances di (NOLOCK) on d.DispatchId=di.DispatchId JOIN
							DispatchInstanceItems dii (NOLOCK) on di.DispatchInstanceId=dii.DispatchInstanceId
					WHERE	dii.FixedAssetId = f.FixedAssetId AND di.ShipType = 'DT-RETURN'
					ORDER BY dii.DateAdded DESC
					) 
					END
					) dc
	 CROSS APPLY (SELECT dtSCount = CASE WHEN ---check active Days Since DT Ship pmpft
					(SELECT COUNT(pw.PFTWOId) FROM PFTWO pw (NOLOCK)
					WHERE pw.FixedAssetId = f1.FixedAssetId AND pw.PFTType = 3 AND pw.PFTConfigId = m.PFTConfigId AND m.MeterReadingTypeId = 11 AND pw.Active = 1) >= 1 
					THEN 0 ELSE 
					(
					SELECT TOP 1 
					CASE di.ShipType 
					WHEN 'DT-SEQ-ADD' THEN
						CASE	
								WHEN --check latest DT pmpft
									(SELECT COUNT(pw.PFTWOId) FROM PFTWO pw (NOLOCK) 
									WHERE pw.FixedAssetId = f1.FixedAssetId AND pw.PFTType = 3 AND pw.PFTConfigId = m.PFTConfigId AND m.MeterReadingTypeId = 11) = 0
								THEN DATEDIFF(dd, di.DateShipped , GETDATE()) 
								WHEN 
									di.DateShipped > (SELECT MAX(pws.DateAdded) [DateAdded] FROM PFTWO pw (NOLOCK) JOIN PFTWOSeq pws (NOLOCK) on pw.PFTWOId = pws.PFTWOId
									WHERE pw.FixedAssetId = f1.FixedAssetId and pw.PFTType = 3 AND pw.PFTConfigId = m.PFTConfigId AND m.MeterReadingTypeId = 11 AND pw.Active = 0)
								THEN DATEDIFF(dd, di.DateShipped , GETDATE()) 
						END 
					ELSE null END
					FROM	Dispatches d (NOLOCK) JOIN
							DispatchInstances di (NOLOCK) on d.DispatchId=di.DispatchId JOIN
							DispatchInstanceItems dii (NOLOCK) on di.DispatchInstanceId=dii.DispatchInstanceId
					WHERE	dii.FixedAssetId = f.FixedAssetId AND di.ShipType = 'DT-SEQ-ADD'
					ORDER BY dii.DateAdded DESC
					) 
					END
					) dsc
	WHERE m.MeterReadingTypeId in ( 5, 8, 10, 11)
	GROUP BY f1.FixedAssetId, m.MeterReadingTypeId
	) b
	WHERE b.AssetLifeConsumed is not null 
	group by b.FixedAssetId) c
	GROUP BY c.FixedAssetId
) AS A
GO
/****** Object:  View [dbo].[vwTransferSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwTransferSearch] AS

SELECT p.PartTransferDtlId
	, p.FixedAssetId
	, p.SerialNum
	, p.InventoryItemNum
	, p.AssetNumber
	, p.Quantity
	, p.RNItemNum
	, sr.RegionDesc as SendingRegion
	, sc.CountryDesc as SendingCountry
	, p.SendingLocation
	, sbp.CompanyName AS SendingCompanyName
	, rr.RegionDesc as ReceivingRegion
	, rc.CountryDesc as ReceivingCountry
	, p.ReceivingLocation
	, rbp.CompanyName AS ReceivingCompanyName
	, p.JDETransactionId
	, p.DateShipConfirmed
	, p.DocumentNumber
	, p.DocumentType
	, so.OptionLabel AS DocumentDesc
	, p.UserCreatedDocument
	, p.[Source]
	, p.Dest
	, p.DateAdded
	, p.DateofTransaction
	, p.ParentNumber
	, p.Disposition
	, p.ErrorMessage
FROM PartTransferDtl (NOLOCK) p

LEFT JOIN BranchPlants (NOLOCK) sbp ON sbp.BranchPlant = p.SendingLocation
LEFT OUTER JOIN Regions sr WITH(NOLOCK) ON sr.Region = sbp.Region
LEFT OUTER JOIN Countries sc WITH(NOLOCK) ON sc.Country = sbp.Country

LEFT JOIN BranchPlants (NOLOCK) rbp ON rbp.BranchPlant = p.ReceivingLocation
LEFT OUTER JOIN Regions rr WITH(NOLOCK) ON rr.Region = rbp.Region
LEFT OUTER JOIN Countries rc WITH(NOLOCK) ON rc.Country = rbp.Country

LEFT OUTER JOIN SelectOptions (NOLOCK) so ON so.OptionValue = p.DocumentType AND  so.SelectName = 'TransferDocumentType'








GO
/****** Object:  View [dbo].[vwWorkOrderRemovedFixedAssets]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vwWorkOrderRemovedFixedAssets]
AS

SELECT
	ptd.PartTransferDtlId,
	ptd.RefId AS WorkOrderId,
	wo.WorkOrderNum,
	ptd.FixedAssetId,
	ptd.AssetNumber,
	ptd.InventoryItemNum,
	ptd.RNItemNum,
	fa.AssetDescription AS [Description],
	ptd.SerialNum,
	ptd.ParentNumber AS ParentAssetNumber
	

FROM PartTransferDtl ptd (NOLOCK)
LEFT JOIN PartTransfers pt (NOLOCK) ON pt.PartTransferId = ptd.PartTransferId
LEFT JOIN WorkOrders wo (NOLOCK) ON wo.WorkOrderId = ptd.RefId
LEFT JOIN FixedAssets fa (NOLOCK) ON fa.AssetNumber = ptd.AssetNumber

WHERE ptd.RefType = 'WO' AND pt.TransferType = 9 AND ptd.[Source]= 'IN' AND ptd.Dest <> 'IN'


GO
/****** Object:  View [dbo].[vwClientOrderFixedAssets]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwClientOrderFixedAssets]
AS

SELECT  cofa.ClientOrderFixedAssetId, cofa.ClientOrderId, cofa.PartTransferId, cofa.DateAdded, 
		cofa.DeliveryNoteNumber, ptd.FixedAssetId, ptd.Quantity, ptd.SerialNum, ptd.Revision, 
		ptd.InventoryItemNum, i.DescShort as [Description], ptd.PartTransferDtlId, ptd.RNItemNum
FROM ClientOrderFixedAssets cofa WITH(NOLOCK)
LEFT JOIN PartTransferDtl ptd WITH(NOLOCK) ON ptd.PartTransferDtlId = cofa.PartTransferDtlId
LEFT JOIN ItemNums i WITH(NOLOCK) ON i.ItemNum = ptd.InventoryItemNum


GO
/****** Object:  View [dbo].[vwPartTransferDtl]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE View [dbo].[vwPartTransferDtl] as
SELECT 
	ptd.PartTransferDtlId,
	ptd.PartTransferId,
	ptd.FixedAssetId,
	ptd.SerialNum,
	ptd.InventoryItemNum,
	ptd.RNItemNum,
	ptd.AssetNumber,
	IsNull(ri.DescShort, i.DescShort) as AssetDescription,
	ptd.Quantity,
	ptd.Revision,
	ptd.ParentNumber,
	f.EquipmentStatus,
	fps.[Status] AS EquipmentStatusDesc,
	f.BranchPlant,
	bp.CompanyName AS BranchPlantDesc,
	i.DescShort AS [Description],
	ptd.[Source],
	sps.[Status] AS SourceFixedAssetStatus,  
	ptd.Dest,
	dps.[Status] AS DestFixedAssetStatus,
	ptd.Disposition,
	ptd.RefId, 
	ptd.RefType,
	ptd.RefNum,
	pt.TransferType,
	ptd.Comment,
	f.LastComments,
	ptd.DateAdded,
	ptd.ErrorMessage
FROM PartTransferDtl ptd (NOLOCK)
LEFT JOIN PartTransfers pt ON pt.PartTransferId = ptd.PartTransferId
LEFT JOIN FixedAssets f (NOLOCK) ON f.FixedAssetId = ptd.FixedAssetId
LEFT JOIN ItemNums i (NOLOCK) on i.ItemNum = f.InventoryItemNum
LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = f.RNItemNum 
LEFT JOIN PartStatus sps (NOLOCK) ON sps.Code = ptd.[Source]
LEFT JOIN PartStatus dps (NOLOCK) ON dps.Code = ptd.[Dest]
LEFT JOIN PartStatus fps (NOLOCK) ON fps.Code = f.EquipmentStatus
LEFT JOIN BranchPlants bp (NOLOCK) ON bp.BranchPlant = f.BranchPlant 







GO
/****** Object:  Table [dbo].[ClientOrders]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ClientOrders](
	[ClientOrderId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[CONum] [varchar](10) NOT NULL,
	[BranchPlant] [varchar](25) NOT NULL,
	[ToBranchPlant] [varchar](25) NULL,
	[COType] [varchar](15) NULL,
	[ClientNum] [varchar](10) NULL,
	[CODate] [datetime] NULL,
	[DateRequired] [datetime] NULL,
	[ConfirmBy] [varchar](20) NULL,
	[Station] [varchar](15) NULL,
	[RequisitionBy] [varchar](20) NULL,
	[FOBPoint] [varchar](10) NULL,
	[ShipVia] [varchar](10) NULL,
	[ShipPay] [varchar](3) NULL,
	[Remarks] [varchar](4096) NULL,
	[CloseDate] [datetime] NULL,
	[LastEdit] [datetime] NULL,
	[Complete] [bit] NULL,
	[IsApproved] [bit] NOT NULL,
	[AutoTransfer] [tinyint] NOT NULL,
	[UserIdUpload] [int] NULL,
	[DateAdded] [datetime] NOT NULL,
	[KeepRec] [tinyint] NOT NULL,
	[IsHazMat] [bit] NULL,
	[DateApproved] [datetime] NULL,
	[UserIdApproved] [int] NULL,
	[TotalCost] [decimal](18, 2) NULL,
	[TotalCostIncludingTransfer] [decimal](18, 2) NULL,
	[RequisitionByEmail] [varchar](100) NULL,
	[JDEApprovalNo] [varchar](20) NULL,
	[WhereToInvoice] [varchar](40) NULL,
	[IsUnApproved] [bit] NULL,
	[Markup] [decimal](18, 2) NOT NULL,
	[IsVoid] [bit] NOT NULL,
	[ProductLine] [varchar](50) NULL,
	[Status] [int] NULL,
	[Stage] [int] NULL,
	[IsAutoApproved] [bit] NULL,
	[UserIdLastEdit] [int] NULL,
 CONSTRAINT [PK_ClientOrders] PRIMARY KEY CLUSTERED 
(
	[ClientOrderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_ClientOrders] UNIQUE NONCLUSTERED 
(
	[CONum] ASC,
	[BranchPlant] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwClientOrderFilledSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwClientOrderFilledSearch]
AS

SELECT  cofa.ClientOrderFixedAssetId, ptd.RefNum, ptd.RNItemNum, ptd.InventoryItemNum, ptd.SerialNum, ptd.Revision,
		ptd.Quantity AS QtyFilled, ptd.DateofTransaction, ptd.RefId,
		co.ProductLine, co.Complete, co.Status, co.BranchPlant AS RequestingBranchPlant, 
		co.ToBranchPlant AS ProvidingBranchPlant,co.ClientOrderId
		
FROM ClientOrderFixedAssets (NOLOCK) cofa
JOIN PartTransferDtl (NOLOCK) ptd ON ptd.PartTransferDtlId=cofa.PartTransferDtlId
JOIN ClientOrders (NOLOCK) co ON co.ClientOrderId=cofa.ClientOrderId

GO
/****** Object:  Table [dbo].[ItemNumReferences]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ItemNumReferences](
	[ItemNumReferenceId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[RefItemNum] [varchar](30) NOT NULL,
	[RefType] [varchar](1) NOT NULL,
	[Source] [varchar](1) NULL,
 CONSTRAINT [PK_InventoryRNItemNums] PRIMARY KEY CLUSTERED 
(
	[ItemNumReferenceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[NewUsedItemNums]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE View [dbo].[NewUsedItemNums] As

Select 
  i1.ItemNum as KeyItemNum, inr1.ItemNum as NewItemNum, inr1.RefItemNum as UsedItemNum, 'N' as NewUsedItem
From ItemNums(NOLOCK) i1
join ItemNumReferences(NOLOCK) inr1 on inr1.ItemNum = i1.ItemNum and inr1.RefType = 'U'

UNION

Select 
  i2.ItemNum as KeyItemNum, inr2.ItemNum as NewItemNum, inr2.RefItemNum as UsedItemNum, 'U' as NewUsedItem
From ItemNums(NOLOCK) i2 
join ItemNumReferences(NOLOCK) inr2 on inr2.RefItemNum = i2.ItemNum and inr2.RefType = 'U'

GO
/****** Object:  View [dbo].[InventoryRNItemNums]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[InventoryRNItemNums]
AS
SELECT 
  ItemNumReferenceId as InventoryRNItemNumId 
  , ItemNum as InventoryItemNum
  , RefItemNum as RNItemNum
FROM ItemNumReferences WITH(NOLOCK)
where RefType = 'R'

GO
/****** Object:  Table [dbo].[JDEWorkOrders]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JDEWorkOrders](
	[JDEWorkOrderId] [uniqueidentifier] NOT NULL,
	[WorkOrderNumber] [varchar](30) NOT NULL,
	[Source] [varchar](15) NULL,
	[Target] [varchar](30) NULL,
	[Method] [varchar](30) NULL,
	[TransactionUserId] [varchar](30) NULL,
	[TransactionId] [varchar](30) NULL,
	[TransactionName] [varchar](30) NULL,
	[EdgeKey] [varchar](30) NULL,
	[EquipmentStatus] [varchar](4) NULL,
	[OrderType] [varchar](4) NULL,
	[OrderSuffix] [varchar](30) NULL,
	[RelatedOrderType] [varchar](4) NULL,
	[RelatedWONumber] [varchar](30) NULL,
	[ParentWONumber] [varchar](30) NULL,
	[TypeWO] [varchar](6) NULL,
	[WorkOrderPriority] [int] NULL,
	[Description] [varchar](255) NULL,
	[StatusComment] [varchar](255) NULL,
	[Company] [varchar](50) NULL,
	[BusinessUnit] [varchar](30) NULL,
	[Branch] [varchar](12) NULL,
	[WorkOrderStatusCode] [varchar](4) NULL,
	[StatusChangedDate] [datetime] NULL,
	[Subsidiary] [varchar](30) NULL,
	[TransactionDate] [datetime] NULL,
	[StartDate] [datetime] NULL,
	[RequestedDate] [datetime] NULL,
	[CompletionDate] [datetime] NULL,
	[AssignedToDate] [datetime] NULL,
	[AssignedToInspectorDate] [datetime] NULL,
	[Reference] [varchar](50) NULL,
	[Reference2] [varchar](50) NULL,
	[EstimatedAmount] [float] NULL,
	[OriginalDollarsAmount] [float] NULL,
	[EstimatedHours] [float] NULL,
	[OriginalHours] [float] NULL,
	[ActualAmount] [float] NULL,
	[ActualHours] [float] NULL,
	[ShortItemNumber] [varchar](30) NULL,
	[SecondItemNumber] [varchar](30) NULL,
	[ThirdItemNumber] [varchar](30) NULL,
	[AssetItemNumber] [varchar](30) NULL,
	[PostingEdit] [varchar](30) NULL,
	[LotNumber] [varchar](30) NULL,
	[LotPotency] [varchar](30) NULL,
	[LotGrade] [varchar](30) NULL,
	[UpdatedDate] [datetime] NULL,
	[TimeOfDay] [varchar](30) NULL,
	[ParentNumber] [varchar](30) NULL,
	[WorkOrderCriticality] [varchar](30) NULL,
	[EstimatedDowntimeHours] [float] NULL,
	[ActualDowntimeHours] [float] NULL,
	[MeterPosition] [varchar](30) NULL,
	[EstimatedLaborAmount] [float] NULL,
	[EstimatedMaterialAmount] [float] NULL,
	[EstimatedOtherAmount] [float] NULL,
	[ActualLaborAmount] [float] NULL,
	[ActualMaterialAmount] [float] NULL,
	[WorkOrderStatus] [varchar](6) NULL,
	[DocumentType] [varchar](6) NULL,
	[MiscCost] [float] NULL,
	[ExchangeRate] [float] NULL,
	[ActaulLaborInUSD] [float] NULL,
	[ActualMaterialInUSD] [float] NULL,
	[ActaulMiscCostInUSD] [float] NULL,
	[MiscCostInUSD] [float] NULL,
	[DateAdded] [datetime] NULL,
	[LastUpdatedDate] [datetime] NULL,
	[WorkOrderId] [uniqueidentifier] NULL,
	[DispatchNumber] [int] NULL,
	[CustomerNumber] [int] NULL,
	[AssetRepairTrackId] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JDEWOSwapInFeeds]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JDEWOSwapInFeeds](
	[JDEWOSwapInFeedId] [uniqueidentifier] NOT NULL,
	[WorkOrderNum] [varchar](30) NOT NULL,
	[BranchPlant] [varchar](12) NULL,
	[LineNumber] [int] NULL,
	[JournalEntryLineNumber] [int] NULL,
	[SerialNum] [varchar](30) NULL,
	[InventoryItemNum] [varchar](30) NULL,
	[AssetNumber] [varchar](30) NULL,
	[Quantity] [int] NULL,
	[Revision] [varchar](2) NULL,
	[TransactionDate] [datetime] NULL,
	[TransactionReference] [varchar](30) NULL,
	[UniqueKeyID] [int] NULL,
	[ProcessedBy] [int] NULL,
	[ProcessedDate] [datetime] NULL,
	[ParentSerialNum] [varchar](30) NULL,
	[IsOnHold] [bit] NULL,
	[IsVerified] [bit] NULL,
	[OnHoldBy] [int] NULL,
	[OnHoldDate] [datetime] NULL,
	[VerifiedBy] [int] NULL,
	[VerifiedDate] [datetime] NULL,
	[ProcessState] [int] NOT NULL,
	[ExceptionMessage] [varchar](500) NULL,
	[OnHoldComments] [varchar](1000) NULL,
 CONSTRAINT [PK_JDEWOSwapInFeeds] PRIMARY KEY CLUSTERED 
(
	[JDEWOSwapInFeedId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwJDEWOSwapInFeeds]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwJDEWOSwapInFeeds]
AS
SELECT     jw.JDEWOSwapInFeedId, jw.WorkOrderNum AS JDEWorkOrderNum,
                          (SELECT     TOP 1 WorkOrderNum
                            FROM          WorkOrders(NOLOCK) wo
                            WHERE      wo.JDEWorkOrderNum = jw.WorkOrderNum) AS WorkOrderNum, jw.BranchPlant, bp.CompanyName AS BranchPlantName, jw.LineNumber, 
                      jw.JournalEntryLineNumber, jw.SerialNum, jw.InventoryItemNum, ISNULL(nui.NewItemNum, jw.InventoryItemNum) AS NewItemNum, nui.UsedItemNum, 
                      ISNULL(nui.NewUsedItem, 'N') AS NewUsedItem, (CASE WHEN
                          (SELECT     TOP 1 RNItemNum
                            FROM          InventoryRNItemNums WITH (NOLOCK)
                            WHERE      RNItemNum = jw.InventoryItemNum) IS NOT NULL THEN 'RN' ELSE 'I' END) AS RNI, jw.Quantity, jw.Revision, jw.TransactionDate, 
                      jw.TransactionReference, jw.UniqueKeyID, jw.ProcessedBy, jw.ProcessedDate, u.UserName AS ProcessedByUserName, (CASE WHEN jw.ProcessedDate IS NULL 
                      THEN 0 ELSE 1 END) AS IsProcessed, ISNULL(jw.IsOnHold, 0) AS IsOnHold, ISNULL(jw.IsVerified, 0) AS IsVerified, jw.OnHoldDate AS OnHoldDate, 
                      jw.VerifiedDate AS VerifiedDate, jw.OnHoldBy AS OnHoldBy, jw.VerifiedBy AS VerifiedBy, uh.UserName AS OnHoldByUserName,
                      uv.UserName AS VerifiedByUserName, jw.ProcessState as ProcessState, jw.ExceptionMessage as ExceptionMessage,
                      'JDE' AS Source, jw.OnHoldComments, i.DescShort, i.ItemNum3,CAST(wi.EcnRestriction AS BIT) [EcnRestriction]
FROM         JDEWOSwapInFeeds(NOLOCK) jw LEFT JOIN
                      Users(NOLOCK) u ON u.UserId = jw.ProcessedBy LEFT JOIN
                      Users(NOLOCK) uh ON uh.UserId = jw.OnHoldBy LEFT JOIN
                      Users(NOLOCK) uv ON uv.UserId = jw.VerifiedBy LEFT JOIN
                      NewUsedItemNums(NOLOCK) nui ON nui.KeyItemNum = jw.InventoryItemNum 
                      LEFT JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = jw.BranchPlant
                      LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = jw.InventoryItemNum
					  LEFT JOIN jdeworkorders(NOLOCK) j on j.WorkOrderNumber = jw.WorkOrderNum
					 LEFT JOIN workorders (NOLOCK) w on w.JDEWorkOrderNum = j.workordernumber
					 LEFT JOIN ItemNums (NOLOCK) wi ON wi.ItemNum = w.InventoryItemNum
UNION
SELECT     ptd.PartTransferDtlId AS JDEWOSwapInFeedId, wo.JDEWorkOrderNum, wo.WorkOrderNum, wo.BranchPlant, bp.CompanyName AS BranchPlantName, NULL 
                      AS LineNumber, NULL AS JournalEntryLineNumber, ptd.SerialNum, ptd.InventoryItemNum, ISNULL(nui.NewItemNum, ptd.InventoryItemNum) AS NewItemNum, 
                      nui.UsedItemNum, ISNULL(nui.NewUsedItem, 'N') AS NewUsedItem, (CASE WHEN
                          (SELECT     TOP 1 RNItemNum
                            FROM          InventoryRNItemNums WITH (NOLOCK)
                            WHERE      RNItemNum = ptd.InventoryItemNum) IS NOT NULL THEN 'RN' ELSE 'I' END) AS RNI, ptd.Quantity, ptd.Revision, ptd.DateAdded AS TransactionDate, 
                      ptd.DocumentNumber AS TransactionReference, NULL AS UniqueKeyID, NULL AS ProcessedBy, NULL AS ProcessedDate, NULL AS ProcessedByUserName, 
                      0 AS IsProcessed, 0 AS IsOnHold, 0 AS IsVerified, NULL AS OnHoldDate, NULL AS VerifiedDate, 0 AS OnHoldBy, 0 AS VerifiedBy, NULL AS OnHoldByUserName,
                      NULL AS VerifiedByUserName, 1 as ProcessState, NULL as ExceptionMessage, 'WorkOrder' AS Source, NULL AS OnHoldComments
                      , i.DescShort, i.ItemNum3,CAST(wi.EcnRestriction AS BIT) [EcnRestriction]
FROM         PartTransferDtl(NOLOCK) ptd LEFT JOIN
                      PartTransfers(NOLOCK) pt ON pt.PartTransferId = ptd.PartTransferId LEFT JOIN
                      WorkOrders(NOLOCK) wo ON wo.WorkOrderId = ptd.RefId LEFT JOIN
                      NewUsedItemNums(NOLOCK) nui ON nui.KeyItemNum = ptd.InventoryItemNum LEFT JOIN
                      BranchPlants(NOLOCK) bp ON bp.BranchPlant = wo.BranchPlant
                      LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = ptd.InventoryItemNum
					  LEFT JOIN ItemNums (NOLOCK) wi ON wi.ItemNum = wo.InventoryItemNum
WHERE     ptd.RefType = 'WO' AND pt.TransferType = 9
GO
/****** Object:  Table [dbo].[CurrencyConversionFactors]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CurrencyConversionFactors](
	[CurrencyConversionId] [uniqueidentifier] NOT NULL,
	[CurrShortName] [varchar](3) NOT NULL,
	[ConversionFactor] [decimal](18, 7) NOT NULL,
	[EffectiveStartDate] [datetime] NULL,
 CONSTRAINT [PK_CurrencyConversionFactors] PRIMARY KEY CLUSTERED 
(
	[CurrencyConversionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwFixedAssetsSearchOLD]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=========================================================================================  
--MODIFIED BY: SUYEB MOHAMMAD  
--MODIFIED ON :19 Feb 2015  
--DESCRIPTION: Added new productline   
--========================================================================================  
CREATE VIEW [dbo].[vwFixedAssetsSearchOLD]  
AS  
SELECT   
  fa.FixedAssetId,  
  fa.SerialNum,  
  fa.InventoryItemNum,  
  fa.AssetNumber,  
  fa.BranchPlant,  
  bp.CompanyName AS BranchPlantName,  
  fap.AssetNumber AS ParentNumber,  
  fa.EquipmentStatus,  
  fa.LegacySerialNumber,  
  fa.RNItemNum,  
  fa.AssetDescription AS FixedAssetDescription,  
  i.DescShort AS AssetDescription,  
  ri.DescShort AS RNAssetDescription,  
  i.DescLong AS InventoryDescLong,  
  fa.Ownership,  
  fa.OwnershipDesc,  
  fa.LastStatusChangeDate,  
  DATEDIFF(DAY, ISNULL(fa.LastStatusChangeDate, GETDATE()), GETDATE()) AS DaysInStatus,  
  fa.Cost,  
  fa.NetBookValue,  
  fa.CurrencyCode,  
  fa.MasterFirmwareRevision,  
  fa.MasterFirmwareItemNum,  
  fa.FirmwareVersion,  
  fa.TechId,  
  fa.MfgPartNum,  
  fa.ThirdItemNumber,  
  fa.PhysicalLocation,  
  fa.FixedAssetBranchPlant,  
  fbp.CompanyName AS FixedAssetBranchPlantName,  
  fa.ManufacturersSerialNumber,  
  fa.LastComments,  
  fa.Revision,  
  fa.CatCode16,  
  fa.VerifiedBy,  
  fa.VerifiedDate,  
  fa.VerifiedLocation,  
  ps.IsDisposed,  
  ps.[Status] AS StatusDesc,  
  (SELECT TOP 1 j.JobNumber  
 FROM DispatchInstanceItems dii (NOLOCK)  
 JOIN DispatchInstances di (NOLOCK) ON di.DispatchInstanceId = dii.DispatchInstanceId  
 JOIN Dispatches d (NOLOCK) ON d.DispatchId = di.DispatchId  
 JOIN Jobs j (NOLOCK) ON j.JobId = d.JobId  
  WHERE dii.FixedAssetId = fa.FixedAssetId AND dii.DateReturned IS NULL) AS JobNumber,  
  r.Region,  
  r.RegionDesc,  
  c.Country,  
  c.CountryDesc,  
  bp.IsRepair,  
  bp.IsGlobalRepair,  
  bp.IsOps,  
  bp.SAPFuncLoc,  
  ISNULL(ri.ToolPanel, i.ToolPanel) AS ToolPanel,  
  ISNULL(ri.ToolCode, i.ToolCode) AS ToolCode,  
  ISNULL(ri.ItemNum2, i.ItemNum2) AS ItemNum2,  
  ISNULL(ri.ItemNum3, i.ItemNum3) AS ItemNum3,  
  ISNULL(ri.LegacyNum, i.LegacyNum) AS LegacyNum,  
  gl.GLProductLineId AS ProductLineId,  
  ISNULL(i.Critical, 0) AS Critical,  
  i.DescShort AS ItemNumDescShort,  
  i.DescLong AS ItemNumDescLong,  
  i.Size,  
  CASE WHEN fa.EquipmentStatus IN ('PT', 'IT') THEN (SELECT TOP 1 ir.RegionDesc   
   FROM PartTransferDtl ptd WITH (NOLOCK)  
   LEFT OUTER JOIN BranchPlants(NOLOCK) ibp ON ibp.BranchPlant = ptd.SendingLocation  
   LEFT OUTER JOIN Regions(NOLOCK) ir ON ir.Region = ibp.Region  
   WHERE ptd.FixedAssetId = fa.FixedAssetId AND fa.EquipmentStatus IN ('PT', 'IT')  
   ORDER BY ptd.DateofTransaction DESC, ptd.JDETransactionID DESC, ptd.DateAdded DESC)  
  ELSE NULL END AS SourceRegion,  
  
  CASE WHEN fa.EquipmentStatus IN ('PT', 'IT') THEN (SELECT TOP 1 ic.CountryDesc  
   FROM PartTransferDtl ptd WITH (NOLOCK)   
   LEFT OUTER JOIN BranchPlants(NOLOCK) ibp ON ibp.BranchPlant = ptd.SendingLocation  
   LEFT OUTER JOIN Countries(NOLOCK) ic ON ic.Country = ibp.Country  
   WHERE ptd.FixedAssetId = fa.FixedAssetId AND fa.EquipmentStatus IN ('PT', 'IT')  
   ORDER BY ptd.DateofTransaction DESC, ptd.JDETransactionID DESC, ptd.DateAdded DESC)  
  ELSE NULL END AS SourceCountry,  
  
  CASE WHEN fa.EquipmentStatus IN ('PT', 'IT') THEN (SELECT TOP 1 SendingLocation  
   FROM PartTransferDtl ptd WITH (NOLOCK)   
   WHERE ptd.FixedAssetId = fa.FixedAssetId AND fa.EquipmentStatus IN ('PT', 'IT')   
   ORDER BY ptd.DateofTransaction DESC, ptd.JDETransactionID DESC, ptd.DateAdded DESC)  
  ELSE NULL END AS SourceBranchPlant,  
  
  CASE WHEN fa.EquipmentStatus IN ('PT', 'IT') THEN (SELECT TOP 1 ibp.CompanyName   
   FROM PartTransferDtl ptd WITH (NOLOCK)  
   LEFT OUTER JOIN BranchPlants(NOLOCK) ibp ON ibp.BranchPlant = ptd.SendingLocation  
   WHERE ptd.FixedAssetId = fa.FixedAssetId AND fa.EquipmentStatus IN ('PT', 'IT')   
   ORDER BY ptd.DateofTransaction DESC, ptd.JDETransactionID DESC, ptd.DateAdded DESC)  
  ELSE NULL  END AS SourceBranchPlantName,  
  
  CASE WHEN fa.EquipmentStatus IN ('PT', 'IT') THEN (SELECT TOP 1 ir.RegionDesc  
   FROM PartTransferDtl ptd WITH (NOLOCK)   
   LEFT OUTER JOIN BranchPlants(NOLOCK) ibp ON ibp.BranchPlant = ptd.ReceivingLocation  
   LEFT OUTER JOIN Regions(NOLOCK) ir ON ir.Region = ibp.Region   
   WHERE ptd.FixedAssetId = fa.FixedAssetId AND fa.EquipmentStatus IN ('PT', 'IT')  
   ORDER BY ptd.DateofTransaction DESC, ptd.JDETransactionID DESC, ptd.DateAdded DESC)  
  ELSE NULL END AS DestRegion,  
  
  CASE WHEN fa.EquipmentStatus IN ('PT', 'IT') THEN (SELECT TOP 1 ic.CountryDesc  
   FROM PartTransferDtl ptd WITH (NOLOCK)  
   LEFT OUTER JOIN BranchPlants(NOLOCK) ibp ON ibp.BranchPlant = ptd.ReceivingLocation  
   LEFT OUTER JOIN Countries(NOLOCK) ic ON ic.Country = ibp.Country  
   WHERE ptd.FixedAssetId = fa.FixedAssetId AND fa.EquipmentStatus IN ('PT', 'IT')  
   ORDER BY ptd.DateofTransaction DESC, ptd.JDETransactionID DESC, ptd.DateAdded DESC)  
  ELSE NULL END AS DestCountry,  
  
  CASE WHEN fa.EquipmentStatus IN ('PT', 'IT') THEN (SELECT TOP 1 ReceivingLocation  
   FROM PartTransferDtl ptd WITH (NOLOCK)  
   WHERE ptd.FixedAssetId = fa.FixedAssetId AND fa.EquipmentStatus IN ('PT', 'IT')  
   ORDER BY ptd.DateofTransaction DESC, ptd.JDETransactionID DESC, ptd.DateAdded DESC)  
  ELSE NULL END AS DestBranchPlant,  
  
  CASE WHEN fa.EquipmentStatus IN ('PT', 'IT') THEN (SELECT TOP 1 ibp.CompanyName  
    FROM PartTransferDtl ptd WITH (NOLOCK)  
    LEFT OUTER JOIN BranchPlants(NOLOCK) ibp ON ibp.BranchPlant = ptd.ReceivingLocation  
    WHERE ptd.FixedAssetId = fa.FixedAssetId AND fa.EquipmentStatus IN ('PT', 'IT')   
     ORDER BY ptd.DateofTransaction DESC, ptd.JDETransactionID DESC, ptd.DateAdded DESC)  
  ELSE NULL END AS DestBranchPlantName,  
  
  --CASE WHEN fa.EquipmentStatus IN ('50', 'IN') THEN (SELECT TOP 1 ts.SerialNumber  
  --     FROM ToolStringFixedAssets tsfa (NOLOCK)  
  --  JOIN ToolStrings ts (NOLOCK) ON ts.ToolStringId = tsfa.ToolStringID  
  --  WHERE ts.Disassembled = 0 AND ts.IsDeleted = 0 AND tsfa.FixedAssetId = fa.FixedAssetId)  
  --ELSE NULL END AS ToolString,  
  (SELECT TOP 1 ts.SerialNumber  
 FROM ToolStringFixedAssets tsfa (NOLOCK)  
 JOIN ToolStrings ts (NOLOCK) ON ts.ToolStringId = tsfa.ToolStringID  
 WHERE ts.Disassembled = 0 AND ts.IsDeleted = 0 AND tsfa.FixedAssetId = fa.FixedAssetId  
 ORDER BY ts.CreateDate DESC) ToolString,  
  
  CASE WHEN soRadioActive.SelectOptionId IS NULL THEN 0 ELSE 1 END AS IsRadioActive,  
  CASE WHEN fa.EquipmentStatus IN ('50', 'IN') THEN fatp.SerialNum ELSE NULL END AS TopLevelSerialNum,  
  CASE WHEN fa.EquipmentStatus IN ('50', 'IN') THEN pst.Status ELSE NULL END AS TopLevelEquipmentStatus,  
  ISNULL(ri.IsAsset, ISNULL(i.IsAsset, 0)) AS IsAsset,  
  CASE ISNULL(ri.IsAsset, ISNULL(i.IsAsset, 0)) WHEN 1 THEN 'Y' ELSE 'N' END AS IsAssetDisplay,  
  ISNULL(r.Active,0) AS IsRegionActive,   
  i.PartCode,  
  (SELECT TOP 1 imd.MetaValue FROM ItemNumMetadata(NOLOCK) imd  WHERE imd.MetaName = 'TOOL_SIZE_NOMINAL' AND imd.ItemNum = fa.InventoryItemNum) AS ToolSizeNominal,  
  i.NetWeight,  
  i.DefaultSerialProfile,  
  ISNULL(ri.PartClassification, i.PartClassification) AS PartClassification,  
  ISNULL(ri.Revision, i.Revision) AS LatestRevision,  
  dbo.GetLastBillableLocation(fa.FixedAssetId,'Region') AS LastBillableRegion,  
  dbo.GetLastBillableLocation(fa.FixedAssetId,'Country') AS LastBillableCountry,  
  dbo.GetLastBillableLocation(fa.FixedAssetId,'BranchPlant') AS LastBillableBranchPlant,  
  dbo.GetLastBillableLocation(fa.FixedAssetId,'BranchPlantName') AS LastBillableBranchPlantName,  
  fa.Cost * cc.ConversionFactor AS CostInUSD,  
  fa.NetBookValue * cc.ConversionFactor AS NetBookValueInUSD, 
  cc.EffectiveStartDate AS CurrencyLastUpdated,  
  fa.AcqCode,  
  fa.MajorAccountingClass,  
  fa.JournalingFlag,  
  fa.ApplicationCode,
  fa.AssetLifeRemaining 
    
FROM dbo.FixedAssets(NOLOCK) fa  
LEFT OUTER JOIN FixedAssets(NOLOCK) fap ON fap.FixedAssetId = fa.ParentFixedAssetId  
LEFT OUTER JOIN FixedAssets(NOLOCK) fatp ON fatp.FixedAssetId = fa.TopLevelFixedAssetId  
LEFT JOIN dbo.ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum  
LEFT JOIN dbo.ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum  
LEFT JOIN dbo.BranchPlants(NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant  
LEFT JOIN dbo.BranchPlants(NOLOCK) fbp ON fbp.BranchPlant = fa.FixedAssetBranchPlant  
LEFT JOIN dbo.SelectOptions(NOLOCK) soRadioActive ON soRadioActive.SelectName = 'AIRTRadioActive'  
  AND soRadioActive.OptionValue = ISNULL(ri.ToolCode, i.ToolCode)  
LEFT JOIN dbo.PartStatus(NOLOCK) ps ON ps.Code = fa.EquipmentStatus  
LEFT JOIN dbo.PartStatus(NOLOCK) pst ON pst.Code = fatp.EquipmentStatus  
LEFT JOIN dbo.Regions(NOLOCK) r ON r.Region = bp.Region  
LEFT JOIN dbo.Countries(NOLOCK) c ON c.Country = bp.Country  
LEFT JOIN GLCodes gl ON gl.GLCode = fa.ProductLineCode  
LEFT JOIN (SELECT * FROM CurrencyConversionFactors(NOLOCK) ccf1   
   WHERE ccf1.EffectiveStartDate = (SELECT MAX(ccf2.EffectiveStartDate)   
            FROM CurrencyConversionFactors(NOLOCK) ccf2   
            WHERE ccf2.EffectiveStartDate <= GETDATE() AND ccf2.CurrShortName = ccf1.CurrShortName)  
   ) cc ON cc.CurrShortName = fa.CurrencyCode

GO
/****** Object:  Table [dbo].[Departments]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Departments](
	[DepartmentId] [int] IDENTITY(1,1) NOT NULL,
	[DepartmentName] [varchar](50) NOT NULL,
	[DisplayOrder] [int] NULL,
	[RibbonId] [int] NULL,
 CONSTRAINT [PK_Departments] PRIMARY KEY CLUSTERED 
(
	[DepartmentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwActiveUsers]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwActiveUsers]
AS
SELECT     UserId, UserName, FirstName, Active, LastName, Email, Notes, PictureLink, AdminLevel, HomePhone, CellPhone, WorkPhone, Division, StartDate, 
                      Users.DepartmentId, ReportsTo, JobPosition, DefGLExpense, FirstName + ' ' + LastName AS FullName
                      , DepartmentName 
FROM         dbo.Users WITH (NOLOCK)
LEFT OUTER JOIN Departments WITH (NOLOCK) ON Users.DepartmentId = Departments.DepartmentId
WHERE     (Active = 1)  or Active = 200




GO
/****** Object:  Table [dbo].[UserProfile]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserProfile](
	[UserProfileId] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NOT NULL,
	[SAPPersonnelNo] [varchar](50) NULL,
	[HomeCostCenter] [varchar](50) NULL,
	[ManagerName] [varchar](100) NULL,
	[TimeSheetDestination] [varchar](100) NULL,
	[EmployeeType] [varchar](20) NULL,
	[TimeSheetReminder] [varchar](1) NULL,
	[IsHazmatCertified] [bit] NULL,
	[HazmatLicenseExpiryDate] [datetime] NULL,
	[ApproverDelegate] [varchar](15) NULL,
	[ApproverDelegateExpiryDate] [datetime] NULL,
	[IsFirmwareTraceabilityReportSubscribed] [bit] NULL,
 CONSTRAINT [PK_UserProfile] PRIMARY KEY CLUSTERED 
(
	[UserProfileId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[AppUserList]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[AppUserList]
AS
SELECT 
  Users.UserId, Users.UserName, Users.FirstName, Users.LastName, 
  Users.FirstName + ' ' + Users.LastName AS FullName, 
  Users.LastName + ', ' + Users.FirstName AS LastNameFirst, 
  Users.Email, Users.WorkPhone, Users.HomePhone, Users.CellPhone, Users.Active, Users.LastLoginDate, 
  Users.ForceChangePassword, Users.Notes, Users.AdminLevel, Users.Division, Users.StartDate, Users.JobPosition, Users.ReportsTo, 
  Users.WFTUserName, Users.DefaultProductLine, Users.DefaultModule, Users.DepartmentId, Departments.DepartmentName, 
  Users.DateAdded, UserProfile.IsFirmwareTraceabilityReportSubscribed
FROM Users (NOLOCK)
LEFT OUTER JOIN Departments (NOLOCK) ON Users.DepartmentId = Departments.DepartmentId
LEFT OUTER JOIN UserProfile (NOLOCK) ON UserProfile.UserId = Users.UserId





GO
/****** Object:  View [dbo].[AppUser]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[AppUser] As
select UserId as AppUserId, UserName, 1 as OrgId, 1000000 + UserId as GroupId, Null as ContactId, 0 as IsExternal, Email as PrimaryEmail
, FirstName , LastName, DepartmentId
From Users (NOLOCK)
GO
/****** Object:  Table [dbo].[Ribbon]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Ribbon](
	[RibbonId] [int] NOT NULL,
	[OrgId] [int] NOT NULL,
	[RibbonName] [varchar](255) NOT NULL,
	[RibbonXml] [xml] NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_Ribbon] PRIMARY KEY CLUSTERED 
(
	[RibbonId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwAppUserActiveRibbon]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwAppUserActiveRibbon] AS
Select 
  AppUser.AppUserId, AppUser.UserName, AppUser.OrgId
  , Department.DepartmentId, Department.DepartmentName
  , Ribbon.RibbonId, Ribbon.RibbonName, Ribbon.RibbonXml
From AppUser WITH(NOLOCK)
join Departments Department WITH(NOLOCK) on AppUser.DepartmentId = Department.DepartmentId
join Ribbon WITH(NOLOCK) on Department.RibbonId = Ribbon.RibbonId
where Ribbon.IsActive = 1


GO
/****** Object:  Table [dbo].[RequestedLogin]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RequestedLogin](
	[RequestID] [uniqueidentifier] NOT NULL,
	[Username] [varchar](15) NULL,
	[WeatherfordUsername] [varchar](50) NULL,
	[FirstName] [varchar](255) NOT NULL,
	[LastName] [varchar](255) NOT NULL,
	[Email] [varchar](255) NOT NULL,
	[WorkPhone] [varchar](20) NULL,
	[HomePhone] [varchar](20) NULL,
	[CellPhone] [varchar](20) NULL,
	[JobPosition] [varchar](50) NULL,
	[DepartmentID] [int] NULL,
	[ManagerUserID] [int] NULL,
	[Manager] [varchar](255) NULL,
	[ManagerEmail] [varchar](255) NULL,
	[ManagerPhone] [varchar](20) NULL,
	[ProductLine] [int] NULL,
	[CurrentStatus] [varchar](50) NOT NULL,
	[RequestDate] [datetime] NOT NULL,
	[UserCreatedOn] [datetime] NULL,
	[CRNCRRightsRequested] [bit] NOT NULL,
	[CRNCRRightsGranted] [bit] NULL,
	[CRNCRRightsGrantedBy] [int] NULL,
	[CRNCRRightsGrantedOn] [datetime] NULL,
	[PCBPFTReportSubscription] [bit] NULL,
	[ImarksDefaultGlobalBaseCode] [bit] NULL,
	[IsAllBaseCodeAccess] [bit] NULL,
	[Password] [varchar](50) NULL,
	[PermissionsRequested] [varchar](1000) NULL,
	[StatusChangedOn] [datetime] NULL,
	[StatusChangedBy] [int] NULL,
	[RightsRequested] [bit] NULL,
	[RightsGranted] [bit] NULL,
	[RightsGrantedBy] [int] NULL,
	[RightsGrantedOn] [datetime] NULL,
	[Security] [varchar](1000) NULL,
	[BranchPlant] [varchar](1000) NULL,
	[DefaultBranchPlant] [varchar](50) NULL,
	[Permissions] [varchar](1000) NULL,
 CONSTRAINT [PK_RequestedLogin] PRIMARY KEY CLUSTERED 
(
	[RequestID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[RequestedLoginList]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[RequestedLoginList]
AS
SELECT     dbo.RequestedLogin.RequestID, dbo.RequestedLogin.Username, dbo.RequestedLogin.WeatherfordUsername, dbo.RequestedLogin.FirstName, 
                      dbo.RequestedLogin.LastName, dbo.RequestedLogin.Email, dbo.RequestedLogin.WorkPhone, dbo.RequestedLogin.HomePhone, dbo.RequestedLogin.CellPhone, 
                      dbo.RequestedLogin.JobPosition, dbo.RequestedLogin.DepartmentID, dbo.RequestedLogin.ManagerUserID, dbo.RequestedLogin.ManagerEmail, 
                      dbo.RequestedLogin.ManagerPhone, dbo.RequestedLogin.ProductLine, dbo.RequestedLogin.CurrentStatus, dbo.RequestedLogin.RequestDate, 
                      dbo.RequestedLogin.UserCreatedOn, 
                      dbo.RequestedLogin.RightsRequested, dbo.RequestedLogin.RightsGranted, dbo.RequestedLogin.RightsGrantedBy, 
                      dbo.RequestedLogin.RightsGrantedOn, dbo.RequestedLogin.CRNCRRightsRequested, dbo.RequestedLogin.CRNCRRightsGranted, 
                      dbo.RequestedLogin.CRNCRRightsGrantedBy, dbo.RequestedLogin.CRNCRRightsGrantedOn, 
                      dbo.RequestedLogin.LastName + ',  ' + dbo.RequestedLogin.FirstName AS FullName, dbo.Departments.DepartmentName, 
                      Users_1.LastName + ', ' + Users_1.FirstName AS Supervisor, dbo.Users.UserId AS CreatedUserId, dbo.RequestedLogin.Password, dbo.RequestedLogin.Manager
FROM         dbo.RequestedLogin WITH(NOLOCK) LEFT OUTER JOIN
                      dbo.Users WITH(NOLOCK) ON dbo.RequestedLogin.Username = dbo.Users.UserName LEFT OUTER JOIN
                      dbo.Users AS Users_1 WITH(NOLOCK) ON dbo.RequestedLogin.ManagerUserID = Users_1.UserId LEFT OUTER JOIN
                      dbo.Departments WITH(NOLOCK) ON dbo.RequestedLogin.DepartmentID = dbo.Departments.DepartmentId

GO
/****** Object:  Table [dbo].[PressureSwitchOnData]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PressureSwitchOnData](
	[PressureSwitchOnDataID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[DeltaP] [float] NULL,
	[DeltaPUOM] [varchar](10) NULL,
	[SampleCount] [float] NULL,
	[Delay] [float] NULL,
	[DelayUOM] [varchar](10) NULL,
	[SampleRate] [float] NULL,
	[SampleRateUOM] [varchar](10) NULL,
	[VibrationSwitch] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[PressureSwitchOnDataID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PressureSwitchOffData]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PressureSwitchOffData](
	[PressureSwitchOffDataID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[DeltaP] [float] NULL,
	[DeltaPUOM] [varchar](10) NULL,
	[SampleCount] [float] NULL,
	[Delay] [float] NULL,
	[DelayUOM] [varchar](10) NULL,
	[SampleRate] [float] NULL,
	[SampleRateUOM] [varchar](10) NULL,
	[VibrationSwitch] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[PressureSwitchOffDataID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwBitRunPressureSwitch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwBitRunPressureSwitch]
AS
SELECT r.RunID
	, psod.DeltaP AS OnDeltaP
	, psod.DeltaPUOM AS OnDeltaPUOM
	, psod.SampleCount AS OnSampleCount
	, psod.Delay AS OnDelay
	, psod.DelayUOM AS OnDelayUOM
	, psod.SampleRate AS OnSampleRate
	, psod.SampleRateUOM AS OnSampleRateUOM
	, psod.VibrationSwitch AS OnVibrationSwitch
	, psofd.DeltaP AS OffDeltaP
	, psofd.DeltaPUOM AS OffDeltaPUOM
	, psofd.SampleCount AS OffSampleCount
	, psofd.Delay AS OffDelay
	, psofd.DelayUOM AS OffDelayUOM
	, psofd.SampleRate AS OffSampleRate
	, psofd.SampleRateUOM AS OffSampleRateUOM
	, psofd.VibrationSwitch AS OffVibrationSwitch 
FROM Runs r WITH(NOLOCK)
LEFT JOIN PressureSwitchOnData psod WITH(NOLOCK) ON r.RunID = psod.RunID 
LEFT JOIN PressureSwitchOffData psofd WITH(NOLOCK) ON r.RunID = psofd.RunID 
WHERE r.IsDeleted = 0

GO
/****** Object:  View [dbo].[vwFixedAssets]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwFixedAssets]
AS

SELECT 
  fa.FixedAssetId, fa.AssetNumber, fap.AssetNumber as ParentNumber, fa.ParentFixedAssetId, fa.SerialNum
  , fa.CurrentItemQty, fa.EquipmentStatus, fa.BranchPlant, bp.CompanyName AS BranchPlantDesc
  , fa.FixedAssetBranchPlant  
  , IsNull(i.DescShort, ISNULL(ri.DescShort, fa.AssetDescription)) as AssetDescription
  , fa.InventoryItemNum
  , ISNULL(nui.NewItemNum, fa.InventoryItemNum) as NewItemNum
  , nui.UsedItemNum
  , ISNULL(nui.NewUsedItem, 'N') as NewUsedItem
  , fa.RNItemNum
  , (CASE WHEN ISNULL(fa.RNItemNum, '') <> '' THEN 'RN' ELSE 'I' END) as RNI
  , fa.ThirdItemNumber, fa.LegacySerialNumber
  , fa.IsAdvisorOnly, fa.NotUsed, fa.IsAddByWorkOrder
  , i.ItemNumId,i.PartCode, i.DescShort
  , fa.Revision
  , i.Revision as ItemNumRevision
  , IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)) AS IsAsset
  , (CASE IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)) WHEN 1 THEN 'Yes' ELSE 'No' END) AS IsAssetDisplay
  , (CASE i.DefaultSerialProfile WHEN 'S' THEN 0 ELSE 1 END) AS IsBatch
  , (CASE i.DefaultSerialProfile WHEN 'S' THEN 'No' ELSE 'Yes' END) AS IsBatchDisplay
  , ps.[Status] AS StatusDesc
  , CASE WHEN isnull(so.optionvalue,'') = '' THEN 0 ELSE 1 END AS IsRadioActive
  , ISNULL(ri.ToolPanel, i.ToolPanel) as ToolPanel, fa.LastComments
  
  , fa.TopLevelFixedAssetId
  , (CASE WHEN (Select COUNT(b.FixedAssetId) from FixedAssets b WITH(NOLOCK) Where b.ParentFixedAssetId = fa.FixedAssetId) > 0 THEN 1 ELSE 0 END) as HasChildren
	
	, ISNULL(ps.IsSrcWorkOrder, 1) as IsSrcWorkOrder
	, ISNULL(ps.IsSrcWorkOrderChild, 1) as IsSrcWorkOrderChild
	, ISNULL(ps.IsSrcDispatch, 1) as IsSrcDispatch
	, ISNULL(ps.IsSrcAIRT, 1) as IsSrcAIRT
	, ISNULL(ps.IsSrcPFT, 1) as IsSrcPFT
	, ISNULL(ps.IsSrcBuildSheet, 1) as IsSrcBuildSheet
	, ISNULL(ps.IsDisposed, 0) as IsDisposed
	, ISNULL(ps.IsSrcStatus, 1) as IsSrcStatus
	, ISNULL(bp.IsNonLiveLocation,0) AS IsNonLiveLocation
	, ISNULL(gl.GLProductLineId,0) [ProductlineId]
	, ISNULL(ri.DescShort, i.DescShort) As RNDescShort ,
	CASE
		WHEN  i.itemnum in (SELECT itemnum FROM ItemNumReferences  WHERE reftype = 'R') THEN 'Asset'
		WHEN  i.itemnum in (SELECT itemnum FROM ItemNumReferences  WHERE reftype = 'U') THEN 'Used Inventory'
		ELSE 'Inventory' END as [AssetRefType]
	, CAST(CASE WHEN i.EcnRestriction = 1 OR ri.EcnRestriction = 1 THEN 1 ELSE 0 END AS BIT) [EcnRestriction]
	,DT.DispatchNumber [DeliveryTicket]
	,DT.DateReturned  [DateReturned ]
FROM FixedAssets(NOLOCK) fa
LEFT OUTER JOIN FixedAssets (NOLOCK) fap ON fap.FixedAssetId = fa.ParentFixedAssetId
LEFT JOIN dbo.ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN dbo.ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
LEFT JOIN NewUsedItemNums(NOLOCK) nui ON nui.KeyItemNum = fa.InventoryItemNum
LEFT JOIN BranchPlants(NOLOCK) bp on bp.BranchPlant = fa.BranchPlant
LEFT JOIN SelectOptions(NOLOCK) so on so.SelectName = 'AIRTRadioActive' AND so.OptionValue = ISNULL(ri.ToolCode, i.ToolCode)
LEFT JOIN PartStatus(NOLOCK) ps ON ps.Code = fa.EquipmentStatus
LEFT JOIN GLCodes gl ON gl.GLCode = fa.ProductLineCode
OUTER APPLY(select top 1 d.DispatchNumber, dii.DateReturned 
FROM Dispatches d
JOIN DispatchInstances di on d.DispatchId = di.DispatchId
JOIN DispatchInstanceItems dii on dii.DispatchInstanceId = di.DispatchInstanceId
WHERE 
 dii.SerialNum =fa.SerialNum and di.ShipType='DT-RETURN'
ORDER BY dii.DateAdded DESC) DT





GO
/****** Object:  Table [dbo].[WorkOrderMaterialRequests]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WorkOrderMaterialRequests](
	[WorkOrderMaterialRequestId] [uniqueidentifier] NOT NULL,
	[WorkOrderId] [uniqueidentifier] NOT NULL,
	[MaterialRequestNum] [varchar](30) NOT NULL,
	[Status] [varchar](25) NULL,
	[DateLastEdit] [datetime] NULL,
	[UserIdLastEdit] [int] NULL,
	[DateAdded] [datetime] NOT NULL,
	[UserIdAdded] [int] NOT NULL,
	[WorkflowStatus] [varchar](100) NULL,
	[WorkflowUpdatedOn] [datetime] NULL,
	[PFTWOId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_WorkOrderMaterialRequests] PRIMARY KEY CLUSTERED 
(
	[WorkOrderMaterialRequestId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WorkOrderMaterialRequestItems]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WorkOrderMaterialRequestItems](
	[WorkOrderMaterialRequestItemId] [uniqueidentifier] NOT NULL,
	[WorkOrderMaterialRequestId] [uniqueidentifier] NOT NULL,
	[LineNum] [numeric](4, 1) NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[ItemNumDesc] [varchar](60) NULL,
	[ParentItemNum] [varchar](30) NOT NULL,
	[ParentItemNumDesc] [varchar](60) NULL,
	[OptionText] [varchar](50) NULL,
	[QtyOnBOM] [int] NULL,
	[NetQtyRemoved] [int] NULL,
	[QtyRequired] [int] NULL,
	[UsedItemNum] [varchar](30) NULL,
	[RNI] [varchar](2) NULL,
	[StdUnitCost] [money] NULL,
	[CurrencyCode] [varchar](3) NULL,
	[CurrencyConversionFactor] [decimal](18, 7) NULL,
 CONSTRAINT [PK_WorkOrderMaterialRequestItems] PRIMARY KEY CLUSTERED 
(
	[WorkOrderMaterialRequestItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ItemNumBranchPlants]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ItemNumBranchPlants](
	[ItemNumBranchPlantId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[Version] [varchar](2) NULL,
	[SerialProfile] [varchar](1) NULL,
	[LotStatusCode] [varchar](1) NULL,
	[MinReorder] [decimal](18, 4) NULL,
	[MaxInStock] [decimal](18, 4) NULL,
	[OptimumStock] [decimal](18, 4) NULL,
	[IsProvidingLoc] [bit] NULL,
	[CurrShortName] [varchar](3) NULL,
	[StdUnitCost] [money] NULL,
	[MovingAverageCost] [money] NULL,
	[CostMethod] [varchar](2) NULL,
	[ECCN] [varchar](20) NULL,
	[HTSUS] [varchar](10) NULL,
	[LastEdit] [datetime] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[PlndDeliveryTime] [int] NULL,
 CONSTRAINT [PK_ItemNumBranchPlants] PRIMARY KEY CLUSTERED 
(
	[ItemNumBranchPlantId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ItemNumConfigs]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ItemNumConfigs](
	[ItemNumConfigId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[BranchPlant] [varchar](12) NULL,
	[LineNum] [numeric](15, 2) NULL,
	[ItemNum] [varchar](100) NOT NULL,
	[ParentItemNum] [varchar](100) NULL,
	[OptionText] [varchar](100) NULL,
	[ECNNumber] [varchar](15) NULL,
	[LastDateModified] [datetime] NULL,
	[LastUserModified] [int] NULL,
	[Qty] [int] NULL,
	[Reference] [varchar](15) NULL,
	[EffectiveFromDate] [date] NULL,
	[EffectiveThruDate] [date] NULL,
	[ItemLevel] [varchar](2) NULL,
	[IsToolString] [bit] NULL,
	[ToolSizeID] [int] NULL,
	[IsActive] [bit] NULL,
	[IsMandatoryReplacement] [bit] NULL,
	[IsRequired] [bit] NOT NULL,
	[UserIdAdded] [int] NULL,
	[DateAdded] [datetime] NULL,
 CONSTRAINT [PK_ItemNumConfigs] PRIMARY KEY CLUSTERED 
(
	[ItemNumConfigId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwWorkOrderMaterialRequestItems]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwWorkOrderMaterialRequestItems] AS

Select mri.WorkOrderMaterialRequestItemId,
		mr.WorkOrderMaterialRequestId,
		mr.WorkOrderId,
		mri.LineNum,
		mri.ItemNum,
		(CASE WHEN mr.Status = 'Completed' THEN mri.ItemNumDesc ELSE i.DescShort END) as ItemNumDesc,
		mri.ParentItemNum,
		(CASE WHEN mr.Status = 'Completed' THEN mri.ParentItemNumDesc ELSE ip.DescShort END) as ParentItemNumDesc,
		(CASE 
			WHEN mr.Status = 'Completed' THEN 
				mri.UsedItemNum 
			ELSE 
				(Select TOP 1 nui.UsedItemNum from NewUsedItemNums nui WITH(NOLOCK) Where nui.KeyItemNum = mri.ItemNum)
			END) as UsedItemNum,
		--(CASE 
		--	WHEN mr.Status = 'Completed' THEN 
		--		mri.RNI 
		--	ELSE 
		--		(CASE WHEN (Select TOP 1 RNItemNum from InventoryRNItemNums WITH(NOLOCK) Where RNItemNum = mri.ItemNum) IS NOT NULL THEN 'RN' ELSE 'I' END)
		--	END) as RNI,
		CASE
		WHEN  mri.itemnum in (SELECT itemnum FROM ItemNumReferences  WHERE reftype = 'R') THEN 'Asset'
		WHEN  mri.itemnum in (SELECT itemnum FROM ItemNumReferences  WHERE reftype = 'U') THEN 'Used Inventory'
		ELSE 'Inventory' END as [RNI],
		mri.OptionText,
		(CASE WHEN config.ParentItemNum IS NULL THEN 0 ELSE 1 END) As HasBOM,
		mri.QtyOnBOM,
		mri.NetQtyRemoved,
		mri.QtyRequired,
		
		(CASE 
			WHEN mr.Status = 'Completed' THEN 
				mri.StdUnitCost 
			ELSE
				(Select top 1 ibp.StdUnitCost from ItemNumBranchPlants(NOLOCK) ibp Where ibp.BranchPlant = wo.BranchPlant AND ibp.ItemNum = mri.ItemNum)
			END) as StdUnitCost,
		--(CASE 
		--	WHEN mr.Status = 'Completed' THEN 
		--		mri.CurrencyCode 
		--	ELSE
		--		(Select top 1 ibp.CurrShortName from ItemNumBranchPlants(NOLOCK) ibp Where ibp.BranchPlant = wo.BranchPlant AND ibp.ItemNum = mri.ItemNum)
		--	END) as CurrencyCode,
		mri.CurrencyCode,
		--(CASE 
		--	WHEN mr.Status = 'Completed' THEN 
		--		mri.CurrencyConversionFactor 
		--	ELSE
		--		dbo.fnGetUSDConversionFactor((Select top 1 ibp.CurrShortName from ItemNumBranchPlants(NOLOCK) ibp Where ibp.BranchPlant = wo.BranchPlant AND ibp.ItemNum = mri.ItemNum), NULL)
		--	END)
			null as CurrencyConversionFactor,
			(Select top 1 ibp.BranchPlant from ItemNumBranchPlants(NOLOCK) ibp Where ibp.BranchPlant = 
			wo.BranchPlant AND ibp.ItemNum = mri.ItemNum) As BranchPlant
		,i.IsAsset
		,ir.RefItemNum [CompanionPart]
from WorkOrderMaterialRequestItems(NOLOCK) mri
INNER JOIN WorkOrderMaterialRequests(NOLOCK) mr ON mr.WorkOrderMaterialRequestId = mri.WorkOrderMaterialRequestId
INNER JOIN WorkOrders(NOLOCK) wo ON wo.WorkOrderId = mr.WorkOrderId

LEFT OUTER JOIN ItemNums(NOLOCK) i ON i.ItemNum = mri.ItemNum
LEFT OUTER JOIN ItemNums(NOLOCK) ip ON ip.ItemNum = mri.ParentItemNum
LEFT OUTER JOIN (Select Distinct ParentItemNum from ItemNumConfigs(NOLOCK) Where ISNULL(IsToolString, 0) = 0) config ON config.ParentItemNum = mri.ItemNum 
LEFT OUTER JOIN ItemNumReferences ir ON ir.ItemNum = mri.ItemNum



GO
/****** Object:  View [dbo].[vwSerialNumLookup]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwSerialNumLookup] AS

Select NEWID() as LookupId, 
		fa.SerialNum, 
		fa.InventoryItemNum,
		ISNULL(nui.NewItemNum, fa.InventoryItemNum) as NewItemNum,
	    nui.UsedItemNum,
	    ISNULL(nui.NewUsedItem, 'N') as NewUsedItem,
	    fa.RNItemNum,
		(CASE WHEN ISNULL(fa.RNItemNum, '') <> '' THEN 'RN' ELSE 'I' END) as RNI,
		i.DescShort as ItemNumDesc,
		fa.BranchPlant,
		bp.CompanyName AS BranchPlantDesc,
		fa.EquipmentStatus,
		ps.Status as StatusDesc,
		fa.CurrentItemQty,
		fa.Revision,
		IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)) AS IsAsset,
		(CASE IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)) WHEN 1 THEN 'Yes' ELSE 'No' END) AS IsAssetDisplay,
		0 AS IsBatch,
		'No' AS IsBatchDisplay,
		ISNULL(ps.IsSrcWorkOrder, 1) as IsSrcWorkOrder,
		ISNULL(ps.IsSrcWorkOrderChild, 1) as IsSrcWorkOrderChild,
		ISNULL(ps.IsSrcDispatch, 1) as IsSrcDispatch,
		ISNULL(ps.IsSrcAIRT, 1) as IsSrcAIRT,
		ISNULL(ps.IsSrcPFT, 1) as IsSrcPFT,
		ISNULL(ps.IsSrcBuildSheet, 1) as IsSrcBuildSheet,
		ISNULL(ps.IsDisposed, 0) as IsDisposed,
		ISNULL(ps.IsSrcStatus, 1) as IsSrcStatus,
		gl.GLProductLineId [ProductLineId],
	CASE
		WHEN  i.itemnum in (SELECT itemnum FROM ItemNumReferences  WHERE reftype = 'R') THEN 'Asset'
		WHEN  i.itemnum in (SELECT itemnum FROM ItemNumReferences  WHERE reftype = 'U') THEN 'Used Inventory'
		ELSE 'Inventory' END as [AssetRefType],
		i.EcnRestriction
from FixedAssets(NOLOCK) fa
LEFT JOIN ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN NewUsedItemNums(NOLOCK) nui ON nui.KeyItemNum = fa.InventoryItemNum
LEFT JOIN dbo.ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
LEFT JOIN PartStatus(NOLOCK) ps ON ps.Code = fa.EquipmentStatus
LEFT JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
LEFT JOIN GLCodes gl ON gl.GLCode = fa.ProductLineCode
Where i.DefaultSerialProfile = 'S'

UNION

Select  NEWID() as LookupId, 
		fa.SerialNum, 
		fa.InventoryItemNum,
		ISNULL(nui.NewItemNum, fa.InventoryItemNum) as NewItemNum,
	    nui.UsedItemNum,
	    ISNULL(nui.NewUsedItem, 'N') as NewUsedItem,
	    ISNULL(fa.RNItemNum, '') as RNItemNum,
		(CASE WHEN ISNULL(fa.RNItemNum, '') <> '' THEN 'RN' ELSE 'I' END) as RNI,
		i.DescShort as ItemNumDesc,
		'' as BranchPlant,
		'' as BranchPlantDesc,
		'AV' as EquipmentStatus,
		ps.Status as StatusDesc,
		fa.CurrentItemQty,
		ISNULL(fa.Revision, '') as Revision,
		IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)) AS IsAsset,
		(CASE IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)) WHEN 1 THEN 'Yes' ELSE 'No' END) AS IsAssetDisplay,
		1 AS IsBatch,
		'Yes' AS IsBatchDisplay,
		1 as IsSrcWorkOrder,
		1 as IsSrcWorkOrderChild,
		1 as IsSrcDispatch,
		1 as IsSrcAIRT,
		1 as IsSrcPFT,
		1 as IsSrcBuildSheet,
		0 as IsDisposed,
		1 as IsSrcStatus,
		gl.GLProductLineId [ProductLineId],
	CASE
		WHEN  fa.InventoryItemNum in (SELECT itemnum FROM ItemNumReferences  WHERE reftype = 'R') THEN 'Asset'
		WHEN  fa.InventoryItemNum in (SELECT itemnum FROM ItemNumReferences  WHERE reftype = 'U') THEN 'Used Inventory'
		ELSE 'Inventory' END as [AssetRefType],
		i.EcnRestriction
from FixedAssets(NOLOCK) fa
LEFT JOIN ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN NewUsedItemNums(NOLOCK) nui ON nui.KeyItemNum = fa.InventoryItemNum
LEFT JOIN dbo.ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
LEFT JOIN PartStatus(NOLOCK) ps ON ps.Code = 'AV'
--LEFT JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
LEFT JOIN GLCodes gl ON gl.GLCode = fa.ProductLineCode
Where ISNULL(i.DefaultSerialProfile, '') <> 'S'
GROUP by SerialNum, fa.InventoryItemNum, ISNULL(fa.RNItemNum, ''), ISNULL(nui.NewItemNum, fa.InventoryItemNum), nui.UsedItemNum, ISNULL(nui.NewUsedItem, 'N'),
	i.DescShort, ps.Status, ISNULL(fa.Revision, ''), 
	IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)), i.DefaultSerialProfile, 
	fa.CurrentItemQty, gl.GLProductLineId,
		i.EcnRestriction


GO
/****** Object:  View [dbo].[vwItemNumConfigs]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwItemNumConfigs] as
SELECT 
	ItemNumConfigId, 
	c.ItemNum, 
	c.ParentItemNum,
	nui.UsedItemNum,
	(CASE WHEN (Select TOP 1 RNItemNum from InventoryRNItemNums WITH(NOLOCK) Where RNItemNum = c.ItemNum) IS NOT NULL THEN 'RN' ELSE 'I' END) AS RNI,
	Qty, 
	OptionText, 
	ECNNumber,
	LastDateModified, 
	LastUserModified,
	i.DescShort,
	c.IsRequired,
	i.IsAsset,
	(CASE WHEN i.DefaultSerialProfile = 'S' THEN 0 ELSE 1 END) AS IsBatch,
	CASE WHEN BOM.ParentItemNum IS NULL THEN 0 ELSE 1 END AS HasBOM,
	c.IsToolString,
	c.ToolSizeID,
	c.IsActive,
	s.Size,
	i.StdUnitCost,
	i.StdUnitCost * c.Qty as TotalCost,
	c.LineNum,
	u.UserName as LastModifiedUserName,
	c.IsMandatoryReplacement,
	c.UserIdAdded,
	ua.UserName as AddedByUserName,
	c.DateAdded,
	CASE
		WHEN  c.itemnum in (SELECT itemnum FROM ItemNumReferences  WHERE reftype = 'R') THEN 'Asset'
		WHEN  c.itemnum in (SELECT itemnum FROM ItemNumReferences  WHERE reftype = 'U') THEN 'Used Inventory'
		ELSE 'Inventory' END as [AssetRefType]
	, CAST(i.EcnRestriction AS BIT) [EcnRestriction]
	, bp.CurrencyCode
	,ir.RefItemNum AS CompanionPart
from ItemNumConfigs(NOLOCK) c
left join ItemNums(NOLOCK) i on i.ItemNum = c.ItemNum
LEFT OUTER JOIN (SELECT DISTINCT ParentItemNum FROM ItemNumConfigs(NOLOCK) WHERE IsNull(IsToolString, 0) = 0) AS BOM ON BOM.ParentItemNum = c.ItemNum
LEFT JOIN NewUsedItemNums(NOLOCK) nui ON nui.KeyItemNum = c.ItemNum
LEFT JOIN ToolStringSize(NOLOCK) s on c.ToolSizeID = s.ToolSizeID
LEFT JOIN users u (NOLOCK) on u.UserId = c.LastUserModified
LEFT JOIN users ua (NOLOCK) on ua.UserId = c.UserIdAdded
LEFT JOIN BranchPlants bp(NOLOCK) ON bp.BranchPlant=c.BranchPlant
LEFT JOIN ItemNumReferences ir (NOLOCK) ON ir.ItemNum=c.ItemNum






GO
/****** Object:  View [dbo].[vw_FixedAssetLookup]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_FixedAssetLookup] AS

Select fa.FixedAssetId, 
		fa.SerialNum, 
		fa.InventoryItemNum,
		ISNULL(nui.NewItemNum, fa.InventoryItemNum) as NewItemNum,
	    nui.UsedItemNum,
	    ISNULL(nui.NewUsedItem, 'N') as NewUsedItem,
	    fa.RNItemNum,
		(CASE WHEN ISNULL(fa.RNItemNum, '') <> '' THEN 'RN' ELSE 'I' END) as RNI,
		i.DescShort as ItemNumDesc,
		fa.BranchPlant,
		bp.CompanyName AS BranchPlantDesc,
		fa.EquipmentStatus,
		ps.Status as StatusDesc,
		fa.CurrentItemQty,
		fa.Revision,
		IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)) AS IsAsset,
		(CASE IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)) WHEN 1 THEN 'Yes' ELSE 'No' END) AS IsAssetDisplay,
		0 AS IsBatch,
		'No' AS IsBatchDisplay,
		ISNULL(ps.IsSrcWorkOrder, 1) as IsSrcWorkOrder,
		ISNULL(ps.IsSrcWorkOrderChild, 1) as IsSrcWorkOrderChild,
		ISNULL(ps.IsSrcDispatch, 1) as IsSrcDispatch,
		ISNULL(ps.IsSrcAIRT, 1) as IsSrcAIRT,
		ISNULL(ps.IsSrcPFT, 1) as IsSrcPFT,
		ISNULL(ps.IsSrcBuildSheet, 1) as IsSrcBuildSheet,
		ISNULL(ps.IsDisposed, 0) as IsDisposed,
		ISNULL(ps.IsSrcStatus, 1) as IsSrcStatus,
		gl.GLProductLineId [ProductLineId]
from FixedAssets(NOLOCK) fa
LEFT JOIN ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN NewUsedItemNums(NOLOCK) nui ON nui.KeyItemNum = fa.InventoryItemNum
LEFT JOIN dbo.ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
LEFT JOIN PartStatus(NOLOCK) ps ON ps.Code = fa.EquipmentStatus
LEFT JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
LEFT JOIN GLCodes gl ON gl.GLCode = fa.ProductLineCode
Where i.DefaultSerialProfile = 'S'

UNION

Select  fa.FixedAssetId,
		fa.SerialNum, 
		fa.InventoryItemNum,
		ISNULL(nui.NewItemNum, fa.InventoryItemNum) as NewItemNum,
	    nui.UsedItemNum,
	    ISNULL(nui.NewUsedItem, 'N') as NewUsedItem,
	    ISNULL(fa.RNItemNum, '') as RNItemNum,
		(CASE WHEN ISNULL(fa.RNItemNum, '') <> '' THEN 'RN' ELSE 'I' END) as RNI,
		i.DescShort as ItemNumDesc,
		'' as BranchPlant,
		'' as BranchPlantDesc,
		'AV' as EquipmentStatus,
		ps.Status as StatusDesc,
		fa.CurrentItemQty,
		ISNULL(fa.Revision, '') as Revision,
		IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)) AS IsAsset,
		(CASE IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)) WHEN 1 THEN 'Yes' ELSE 'No' END) AS IsAssetDisplay,
		1 AS IsBatch,
		'Yes' AS IsBatchDisplay,
		1 as IsSrcWorkOrder,
		1 as IsSrcWorkOrderChild,
		1 as IsSrcDispatch,
		1 as IsSrcAIRT,
		1 as IsSrcPFT,
		1 as IsSrcBuildSheet,
		0 as IsDisposed,
		1 as IsSrcStatus,
		gl.GLProductLineId [ProductLineId]
from FixedAssets(NOLOCK) fa
LEFT JOIN ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN NewUsedItemNums(NOLOCK) nui ON nui.KeyItemNum = fa.InventoryItemNum
LEFT JOIN dbo.ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
LEFT JOIN PartStatus(NOLOCK) ps ON ps.Code = 'AV'
--LEFT JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
LEFT JOIN GLCodes gl ON gl.GLCode = fa.ProductLineCode
Where ISNULL(i.DefaultSerialProfile, '') <> 'S'
GROUP by fa.FixedAssetId,SerialNum, fa.InventoryItemNum, ISNULL(fa.RNItemNum, ''), ISNULL(nui.NewItemNum, fa.InventoryItemNum), nui.UsedItemNum, ISNULL(nui.NewUsedItem, 'N'),
	i.DescShort, ps.Status, ISNULL(fa.Revision, ''), 
	IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)), i.DefaultSerialProfile, 
	fa.CurrentItemQty, gl.GLProductLineId
GO
/****** Object:  View [dbo].[vwFixedAssetListTemp]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwFixedAssetListTemp]
AS

SELECT 
  fa.FixedAssetId, fa.AssetNumber, fap.AssetNumber as ParentNumber, fa.ParentFixedAssetId, fa.SerialNum
  , fa.CurrentItemQty, fa.EquipmentStatus, fa.BranchPlant, bp.CompanyName AS BranchPlantDesc
  , fa.FixedAssetBranchPlant  
  , IsNull(i.DescShort, ri.DescShort) as AssetDescription
  , fa.InventoryItemNum
  , ISNULL(nui.NewItemNum, fa.InventoryItemNum) as NewItemNum
  , nui.UsedItemNum
  , ISNULL(nui.NewUsedItem, 'N') as NewUsedItem
  , fa.RNItemNum
  , (CASE WHEN ISNULL(fa.RNItemNum, '') <> '' THEN 'RN' ELSE 'I' END) as RNI
  , fa.ThirdItemNumber, fa.LegacySerialNumber
  , fa.IsAdvisorOnly, fa.NotUsed, fa.IsAddByWorkOrder
  , i.ItemNumId,i.PartCode, i.DescShort
  , fa.Revision
  , i.Revision as ItemNumRevision
  , IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)) AS IsAsset
  , (CASE IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)) WHEN 1 THEN 'Yes' ELSE 'No' END) AS IsAssetDisplay
  , (CASE i.DefaultSerialProfile WHEN 'S' THEN 0 ELSE 1 END) AS IsBatch
  , (CASE i.DefaultSerialProfile WHEN 'S' THEN 'No' ELSE 'Yes' END) AS IsBatchDisplay
  , ps.[Status] AS StatusDesc
  , CASE WHEN isnull(so.optionvalue,'') = '' THEN 0 ELSE 1 END AS IsRadioActive
  , ISNULL(ri.ToolPanel, i.ToolPanel) as ToolPanel, fa.LastComments
  
  , fa.TopLevelFixedAssetId
  , (CASE WHEN (Select COUNT(b.FixedAssetId) from FixedAssets b WITH(NOLOCK) Where b.ParentFixedAssetId = fa.FixedAssetId) > 0 THEN 1 ELSE 0 END) as HasChildren
	
	, ISNULL(ps.IsSrcWorkOrder, 1) as IsSrcWorkOrder
	, ISNULL(ps.IsSrcWorkOrderChild, 1) as IsSrcWorkOrderChild
	, ISNULL(ps.IsSrcDispatch, 1) as IsSrcDispatch
	, ISNULL(ps.IsSrcAIRT, 1) as IsSrcAIRT
	, ISNULL(ps.IsSrcPFT, 1) as IsSrcPFT
	, ISNULL(ps.IsSrcBuildSheet, 1) as IsSrcBuildSheet
	, ISNULL(ps.IsDisposed, 0) as IsDisposed
	, ISNULL(ps.IsSrcStatus, 1) as IsSrcStatus
FROM FixedAssets(NOLOCK) fa
LEFT OUTER JOIN FixedAssets (NOLOCK) fap ON fap.FixedAssetId = fa.ParentFixedAssetId
LEFT JOIN dbo.ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN dbo.ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
LEFT JOIN NewUsedItemNums(NOLOCK) nui ON nui.KeyItemNum = fa.InventoryItemNum
LEFT JOIN BranchPlants(NOLOCK) bp on bp.BranchPlant = fa.BranchPlant
LEFT JOIN SelectOptions(NOLOCK) so on so.SelectName = 'AIRTRadioActive' AND so.OptionValue = ISNULL(ri.ToolCode, i.ToolCode)
LEFT JOIN PartStatus(NOLOCK) ps ON ps.Code = fa.EquipmentStatus
WHERE fa.AssetNumber IN (
select assetnumber

from fixedassets f
left join PartStatus p on p.code = f.equipmentstatus

where 

assetnumber is not null and
branchplant = '112263' and
equipmentstatus in ('av') and
serialnum in (

'43779',
'43782',
'7287',
'25281',
'25268',
'11553',
'23918',
'20269',
'55039',
'55046',
'55712',
'59710',
'59712',
'100039',
'14624',
'5391',
'4903',
'7405',
'73193',
'73603',
'73606',
'73611',
'73615',
'74380',
'74665',
'74680',
'78347',
'49137',
'49238',
'26118',
'75874',
'54857',
'404422226',
'4888',
'3404',
'5054',
'2981',
'7933',
'11832',
'7588',
'21990',
'13087',
'19427',
'23084',
'22775',
'19706',
'4174',
'20381',
'4082',
'4009',
'1734',
'3351',
'3039',
'1357',
'2952',
'1842',
'18901',
'8113',
'10644',
'5881',
'13018',
'12911',
'16772',
'7464',
'19205',
'23186',
'4193',
'24544',
'20012',
'20758',
'16025',
'8507',
'12802',
'17161',
'16142',
'23555',
'24035',
'16600',
'36228',
'26165',
'72243',
'36087',
'36085',
'36082',
'36078',
'31186',
'44580',
'32006',
'25158',
'46593',
'35886',
'27425',
'27416',
'37742',
'34527',
'26483',
'24454',
'1895',
'72837',
'71989',
'71985',
'30033',
'26809',
'26105',
'48950',
'38379',
'25897',
'70622',
'70621',
'30554',
'30556',
'72232',
'43998',
'40471',
'37849',
'40442',
'78972',
'68366674',
'68366658',
'66700405',
'47657',
'25702',
'70158',
'59830',
'47702',
'29713',
'72688',
'72687',
'31234',
'48088',
'78854',
'75167',
'47556',
'76659',
'76654',
'39616',
'29864',
'39620',
'73131',
'31479',
'10235',
'18053',
'48984',
'72577',
'100439',
'100440',
'76291',
'46422',
'71256',
'72626',
'79097',
'79090',
'79089',
'67887831',
'67165168',
'23959',
'JVE-16219',
'78775',
'52803',
'59569',
'57893',
'56994',
'52418',
'75181',
'68569033',
'68568823',
'67776161',
'67226979',
'67226952',
'49295',
'15673',
'59809',
'37219',
'37216',
'78784',
'4302',
'28745',
'76495',
'52590',
'49220',
'34535',
'32226',
'59136',
'28932',
'78436',
'78435',
'77054',
'51924',
'51924',
'51921',
'JVE-10037',
'78438',
'17185',
'32704',
'32468',
'32467',
'22940',
'72719',
'22706',
'21286',
'31459',
'25656',
'72183',
'72072',
'10431',
'5416',
'2265',
'9227',
'7670',
'7669',
'7667',
'17197',
'11496',
'3576',
'7374',
'24180',
'2938',
'13723',
'13969',
'51507',
'51437',
'48232',
'46332',
'40369',
'40366',
'10048',
'16693',
'23389',
'24772',
'25788',
'10041',
'10303',
'10305',
'10306',
'10310',
'10484',
'10487',
'10489',
'10746',
'10748',
'10749',
'10752',
'12892',
'13334',
'13703',
'13704',
'13707',
'14001',
'14129',
'14463',
'14467',
'9448',
'9447',
'9446',
'9330',
'9329',
'9328',
'8985',
'8984',
'8982',
'8980',
'8764',
'8761',
'7919',
'7873',
'7649',
'6882',
'6482',
'6444',
'58515',
'58513',
'16911',
'16916',
'18456',
'18705',
'18787',
'18789',
'19921',
'19929',
'50743',
'50742',
'50741',
'50740',
'21775',
'21776',
'21777',
'22150',
'47669',
'47666',
'47663',
'47662',
'45598',
'45595',
'45593',
'40487',
'39984',
'39983',
'39982',
'39981',
'39978',
'39977',
'39976',
'39975',
'39974',
'39338',
'39334',
'39197',
'39196',
'38964',
'38406',
'38405',
'37755',
'37578',
'37577',
'37574',
'37573',
'36802',
'36797',
'10314',
'10316',
'10478',
'10488',
'12437',
'12850',
'13305',
'13307',
'13308',
'13311',
'13775',
'13777',
'13782',
'13783',
'13787',
'13797',
'14250',
'9452',
'9323',
'8979',
'8770',
'8430',
'7796',
'7633',
'16678',
'16684',
'59677',
'59675',
'59673',
'16898',
'55761',
'55759',
'55756',
'55754',
'52529',
'52528',
'52527',
'52526',
'52525',
'20779',
'47670',
'45617',
'45616',
'45615',
'45614',
'45609',
'44268',
'44266',
'44265',
'43924',
'43923',
'43920',
'42911',
'24364',
'42895',
'42886',
'42885',
'24742',
'40618',
'40617',
'40616',
'40614',
'40612',
'40610',
'40418',
'40417',
'40415',
'40414',
'40406',
'39986',
'39985',
'26066',
'26067',
'38717',
'38714',
'38712',
'38711',
'37767',
'37766',
'37762',
'37756',
'37637',
'37636',
'37635',
'26602',
'37634',
'37633',
'37631',
'36821',
'36808',
'35728',
'35725',
'34432',
'34431',
'30398',
'30397',
'22558',
'22560',
'17388',
'7651',
'43921',
'12893',
'6549',
'79221',
'79210',
'79203',
'1494',
'1506',
'79202',
'79201',
'1535',
'1596',
'1642',
'1658',
'1663',
'1685',
'1722',
'1726',
'51419',
'1750',
'1758',
'1771',
'51418',
'1800',
'51417',
'1807',
'51411',
'1813',
'1819',
'1836',
'1841',
'51409',
'51407',
'51406',
'51401',
'1871',
'51399',
'51397',
'1887',
'51395',
'51392',
'51391',
'51390',
'51387',
'51377',
'1918',
'51376',
'51372',
'1931',
'1932',
'51367',
'51360',
'51354',
'1963',
'1967',
'51352',
'1971',
'51343',
'1994',
'1995',
'2006',
'2016',
'2023',
'2047',
'2048',
'49924',
'49921',
'49914',
'49913',
'49911',
'49891',
'49888',
'49886',
'49885',
'46318',
'44766',
'44765',
'44764',
'44756',
'40779',
'40770',
'40769',
'40768',
'40763',
'40759',
'CDS976',
'CDS961',
'CDS944',
'CDS935',
'CDS933',
'CDS932',
'CDS914',
'CDS900',
'CDS852',
'CDS846',
'CDS840',
'CDS799',
'CDS784',
'CDS771',
'CDS759',
'CDS753',
'CDS740',
'CDS715',
'CDS615',
'CDS599',
'CDS598',
'CDS576',
'CDS567',
'CDS563',
'CDS538',
'CDS527',
'CDS526',
'CDS506',
'CDS503',
'CDS502',
'CDS465',
'CDS448',
'CDS391',
'CDS386',
'CDS383',
'CDS356',
'CDS349',
'CDS342',
'CDS336',
'CDS326',
'CDS321',
'CDS316',
'CDS273',
'CDS246',
'CDS1166',
'CDS1163',
'CDS1122',
'CDS1117',
'CDS1097',
'CDS1088',
'CDS1080',
'CDS1078',
'CDS1075',
'CDS1071',
'CDS1054',
'CDS1024',
'CDS1018',
'51109',
'51103',
'51083',
'51079',
'48200',
'48197',
'48193',
'48189',
'48176',
'44744',
'44731',
'40718',
'67792567',
'51122',
'10123',
'10125',
'10132',
'10143',
'10151',
'10157',
'51190',
'51152',
'51145',
'71581',
'70438',
'70432',
'16211',
'70240',
'70239',
'70237',
'70235',
'73149',
'72591',
'71287',
'70225',
'70224',
'70223',
'70211',
'70208',
'41337',
'36157',
'36038',
'36033',
'36032',
'35866',
'2840',
'51319',
'51307',
'51306',
'51300',
'51297',
'51296',
'51288',
'51275',
'51266',
'51247',
'51242',
'51240',
'51237',
'51229',
'48238',
'46346',
'46341',
'44782',
'44775',
'40790',
'2565',
'2636',
'3122',
'3120',
'3110',
'3101',
'3078',
'3072',
'3040',
'3000',
'2984',
'2811',
'2979',
'2923',
'2884',
'74358',
'69104810',
'66657751',
'BTR996',
'BTR988',
'BTR979',
'BTR976',
'BTR964',
'BTR962',
'BTR961',
'BTR933',
'BTR928',
'BTR920',
'BTR907',
'BTR828',
'BTR824',
'BTR823',
'BTR811',
'BTR801',
'BTR795',
'BTR742',
'BTR740',
'BTR739',
'BTR719',
'BTR696',
'BTR681',
'BTR669',
'BTR641',
'BTR620',
'BTR594',
'BTR556',
'BTR546',
'BTR545',
'BTR514',
'BTR494',
'BTR471',
'BTR418',
'BTR417',
'BTR372',
'BTR356',
'BTR352',
'BTR343',
'BTR336',
'BTR323',
'BTR318',
'BTR292',
'BTR205',
'BTR194',
'BTR158',
'BTR1054',
'BTR1041',
'BTR1027',
'BTR1009',
'BTR1003',
'BTR031',
'51075',
'51066',
'51056',
'51054',
'51043',
'51042',
'48147',
'48144',
'48140',
'48139',
'48135',
'44700',
'44695',
'40679',
'40678',
'40670',
'40666',
'219',
'2746',
'960-2716',
'960-1879',
'800-75689',
'800-75688',
'800-75674',
'650-05-082',
'650-05-083',
'650-05-127',
'650-05-128',
'650-05-159',
'650-05-160',
'475-3258',
'475-2963',
'500-3974',
'625-41173',
'625-41164',
'675-4078',
'675-3916',
'675-3115',
'800-75702',
'800-75696',
'800-75692',
'800-56294',
'800-56292',
'800-48065',
'800-4169',
'800-40936',
'800-4067',
'800-3836',
'800-3502',
'800-1641',
'960-46837',
'960-3723',
'960-3567',
'960-2718',
'675-48060',
'675-45686',
'675-41008',
'675-40992',
'675-3746',
'675-3743',
'675-3643',
'675-3611',
'675-3207',
'675-2274',
'800-1685',
'800-1264',
'960-75797',
'960-75789',
'960-56387',
'675-1892',
'375-74324',
'375-74323',
'375-74322',
'960-75811',
'375-67614867',
'475-56038',
'475-56035',
'475-50123',
'475-50120',
'475-50107',
'475-47994',
'475-47974',
'475-46812',
'475-45706',
'475-41096',
'475-41081',
'475-3966',
'475-3739',
'475-3216',
'475-3038',
'475-2947',
'50515',
'42139',
'42135',
'401715144',
'75395',
'75392',
'75379',
'75378',
'75375',
'75374',
'75370',
'75369',
'75365',
'75363',
'75359',
'75415',
'403246057',
'403246033',
'403246011',
'72447653-01',
'72904252-01',
'58640',
'49123',
'403829112',
'403246001',
'401715150',
'401815538',
'71949192-01',
'71949125-01',
'71778856-01',
'71167684-01',
'69225304-01',
'69225275-01',
'69225267-01',
'42394',
'42340',
'42267',
'403246837',
'403246667',
'402695229',
'404047787',
'69405145-01',
'401604616',
'402321620',
'401373970',
'402730531',
'402336039',
'DP402806849',
'403737300',
'403028952',
'403028944',
'402962473',
'54362',
'41566',
'401604610',
'401604584',
'401265216',
'401265197',
'69904913-01',
'69904892-01',
'69904884-01',
'69904850-01',
'55556',
'50281',
'49978',
'49975',
'49974',
'400934249',
'402321626',
'402074003',
'400934253',
'47431',
'401715143',
'402580398',
'402933097',
'402933112',
'DP402806484',
'DP402806502',
'DP402806434',
'DP402771398',
'DP402771359',
'50366',
'42306',
'42288',
'42260',
'403024665',
'403024630',
'402854402',
'403246879',
'DP402771380',
'50368',
'42402',
'42273',
'403765070',
'403246692',
'403246644',
'403024681',
'402336161',
'77687',
'77683',
'77653',
'77652',
'77649',
'77648',
'77645',
'77644',
'77636',
'77635',
'77630',
'77619',
'77617',
'77610',
'77604',
'77597',
'404171959',
'404171911',
'404171910',
'404171907',
'404171895',
'404171893',
'59475',
'404171961',
'404171951',
'404171920',
'50000',
'42140',
'404047782',
'403246352',
'403246344',
'75331',
'402771510',
'402446392',
'DP402803207',
'74356',
'74353',
'74349',
'DP402807021',
'68886098-01',
'68886080-01',
'68788842-01',
'68270681-01',
'68270630-01',
'68096934-01',
'54536',
'54535',
'54533',
'50545',
'42650',
'42643',
'42609',
'403822901',
'403548261',
'403246953',
'402807009',
'69683330-01',
'43487',
'42630',
'403648302',
'403555430',
'403246977',
'402968948',
'402968945',
'402874403',
'402074080',
'403617534',
'402824820',
'76210',
'76206',
'74169',
'74167',
'74161',
'74160',
'74159',
'74158',
'74156',
'74155',
'74154',
'74153',
'76605',
'76602',
'76601',
'75495',
'75492',
'DP402771539',
'402692849',
'401814401',
'58634',
'45767',
'59445',
'59418',
'78272',
'78271',
'78270',
'78269')
)
AND fa.EquipmentStatus = 'AV' AND fa.AssetNumber NOT IN ('10644')

GO
/****** Object:  View [dbo].[vwItemNums]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwItemNums]
AS
SELECT 
  i.ItemNumId
  , i.ItemNum
  , ISNULL(nui.NewItemNum, i.ItemNum) as NewItemNum
  , nui.UsedItemNum
  , ISNULL(nui.NewUsedItem, 'N') as NewUsedItem
  , (CASE WHEN (Select TOP 1 RNItemNum from InventoryRNItemNums WITH(NOLOCK) Where RNItemNum = i.ItemNum) IS NOT NULL THEN 'RN' ELSE 'I' END) AS RNI
  , i.ItemNum2, i.ItemNum3, i.LegacyNum
  , i.DescShort, i.DescLong, i.DefaultUOM, i.PartClassification
  , CASE WHEN ISNULL(m.MetaValue,'') = '' THEN i.Revision ELSE m.MetaValue END [Revision]
  , i.DescDocNum, i.ToolPanel, i.ToolCode, i.PartCode
  , ISNULL(i.Critical, 0) as Critical, i.ToolPerJob, i.IsObsolete
  , IsRestrictPurchasing
  , i.ProductLine, i.ServiceLine
  , i.PartTypeId, i.Active, i.LastEdit, i.DateAdded
  
  , i.IsAsset
  ,	(CASE i.IsAsset WHEN 1 THEN 'Yes' ELSE 'No' END) AS IsAssetDisplay
  , i.DefaultSerialProfile
  , so.OptionLabel as DefaultSerialProfileLabel
  ,	(CASE i.DefaultSerialProfile WHEN 'S' THEN 0 ELSE 1 END) AS IsBatch
  ,	(CASE i.DefaultSerialProfile WHEN 'S' THEN 'No' ELSE 'Yes' END) AS IsBatchDisplay
  
  , i.TEROrderMultiple, ISNULL(i.IsHazMat, 0) as IsHazMat, i.JDEGLCode
  , i.StdUnitCost
  , 'USD' as CurrencyCode
  , i.DepreciationCost,
	CASE
		WHEN  i.itemnum in (SELECT itemnum FROM ItemNumReferences  WHERE reftype = 'R') THEN 'Asset'
		WHEN  i.itemnum in (SELECT itemnum FROM ItemNumReferences  WHERE reftype = 'U') THEN 'Used Inventory'
		ELSE 'Inventory' END as [AssetRefType]
  , CAST(i.EcnRestriction AS BIT) [EcnRestriction]
FROM ItemNums(NOLOCK) i
LEFT JOIN SelectOptions(NOLOCK) so ON so.SelectName = 'DefaultSerialProfile' and so.OptionValue = i.DefaultSerialProfile
LEFT JOIN NewUsedItemNums(NOLOCK) nui ON nui.KeyItemNum = i.ItemNum
LEFT JOIN ItemNumMetadata m on i.ItemNum = m.ItemNum and m.MetaName = 'SOFTWARE VERSION'


GO
/****** Object:  Table [dbo].[ARTDispositions]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ARTDispositions](
	[DispositionId] [int] IDENTITY(1,1) NOT NULL,
	[AssetRepairTrackId] [uniqueidentifier] NOT NULL,
	[Disposition] [varchar](25) NOT NULL,
	[DispositionedById] [int] NULL,
	[DispositionDate] [datetime] NULL,
	[DispositionComments] [varchar](2048) NOT NULL,
	[Status] [varchar](20) NOT NULL,
	[ApproverId] [int] NOT NULL,
	[ApprovalLevel] [tinyint] NOT NULL,
	[ShipToLocation] [varchar](25) NULL,
	[UserIdAdded] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[ApprovalMethod] [smallint] NULL,
 CONSTRAINT [PK_ARTDispositions] PRIMARY KEY CLUSTERED 
(
	[DispositionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwARTDispositions]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwARTDispositions] AS
SELECT d.DispositionId, d.AssetRepairTrackId, d.Disposition,so.OptionLabel as DispositionDesc, d.DispositionedById, disu.UserName AS DispositionedByUserName, 
		disu.Email AS DispositionedByEmail, LTRIM(RTRIM(disu.FirstName + ' ' + disu.LastName)) AS DispositionedByFullName,
		d.DispositionDate, d.DispositionComments, d.Status, d.ApproverId, appu.UserName AS ApproverUserName, 
		appu.Email AS ApproverEmail, LTRIM(RTRIM(appu.FirstName + ' ' + appu.LastName)) AS ApproverFullName, d.ApprovalLevel, 
		d.ShipToLocation, d.UserIdAdded, addu.UserName AS AddedByUserName, addu.Email AS AddedByEmail, 
		LTRIM(RTRIM(addu.FirstName + ' ' + addu.LastName)) AS AddedByFullName, d.DateAdded, bp.CompanyName as ShipToBranchPlantName
FROM ARTDispositions d (NOLOCK)
LEFT OUTER JOIN AssetRepairTrack art (NOLOCK) ON art.AssetRepairTrackId = d.AssetRepairTrackId
LEFT OUTER JOIN Users disu (NOLOCK) ON d.DispositionedById = disu.UserId
INNER JOIN Users appu (NOLOCK) ON d.ApproverId = appu.UserId
INNER JOIN Users addu (NOLOCK) ON d.UserIdAdded = addu.UserId
LEFT OUTER JOIN SelectOptions so (NOLOCK) ON  so.SelectName = 'Disposition' AND so.OptionValue = d.Disposition
LEFT OUTER JOIN BranchPlants bp (NOLOCK) ON  bp.BranchPlant = d.ShipToLocation

GO
/****** Object:  View [dbo].[vwAssetRepairTrackDistrictReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[vwAssetRepairTrackDistrictReport]
AS
Select 
	art.AssetRepairTrackId
	, art.ARTNumber
	, art.FixedAssetId
	, art.AssetNumber
	, art.SerialNum
	, art.Revision
	, art.RNItemNum
	, art.ItemNum
	, art.ItemDesc
	
	, fap.AssetNumber as ParentAssetNumber
	, fap.SerialNum as ParentSerialNum
	, ISNULL(ri.ToolPanel, i.ToolPanel) as ToolPanel
	, ISNULL(ri.ToolCode, i.ToolCode) as ToolCode
	, fa.NetBookValue
	, fa.CurrencyCode
	, fa.EquipmentStatus
	, ps.Status as EquipmentStatusDesc
	, fa.LastStatusChangeDate
	
	, fromr.RegionDesc as FromRegion
	, fromc.CountryDesc as FromCountry
	, art.FromBranchPlant as FromBranchPlant
	, frombp.CompanyName as FromBranchPlantName
	, shipr.RegionDesc as ShipToRegion
	, shipc.CountryDesc as ShipToCountry
	, art.ShipToBranchPlant as ShipToBranchPlant
	, shipbp.CompanyName as ShipToBranchPlantName
	, art.DateAdded
	, art.DateClosed
	
	, art.JobId
	, j.JobNumber
	, jcust.CustomerName
	, jr.RegionDesc as JobRegion
	, jc.CountryDesc as JobCountry
	, j.BranchPlant as JobBranchPlant
	, jbp.CompanyName as JobBranchPlantName
	, art.IncidentId
	, inc.IncidentNumber
	, art.FailureType
	, sof.OptionLabel as FailureTypeDesc
	
	, CONVERT(BIT, (CASE WHEN 
				(Select TOP 1 d.DispositionId from vwARTDispositions d Where d.AssetRepairTrackId = art.AssetRepairTrackId ORDER by DispositionId DESC) IS NOT NULL
				AND (Select TOP 1 d.Status from vwARTDispositions d Where d.AssetRepairTrackId = art.AssetRepairTrackId ORDER by DispositionId DESC) <> 'Approved'
			THEN 1 
			ELSE 0 
	END)) as PendingDispositionApproval
	, CONVERT(BIT, (CASE WHEN (art.IsAssetFromField = 1 AND art.IsRedTag = 1 AND art.IncidentId IS NULL) THEN 1 ELSE 0 END)) as PendingIncidentReport
	, art.NeedsCustomerFeedback
	, (Select TOP 1 d.DispositionId from vwARTDispositions d Where d.AssetRepairTrackId = art.AssetRepairTrackId ORDER by DispositionId DESC) as DispositionId
	, (Select TOP 1 d.DispositionDesc from vwARTDispositions d Where d.AssetRepairTrackId = art.AssetRepairTrackId ORDER by DispositionId DESC) as DispositionDesc
	, (Select TOP 1 d.DispositionComments from vwARTDispositions d Where d.AssetRepairTrackId = art.AssetRepairTrackId ORDER by DispositionId DESC) as DispositionComments
	, (Select TOP 1 d.DispositionedByUserName from vwARTDispositions d Where d.AssetRepairTrackId = art.AssetRepairTrackId ORDER by DispositionId DESC) as DispositionedByUserName
	, art.Status
	
	, art.NCRNumber
	, wo.WorkOrderId
	, art.WorkOrderNum
	, wo.DateAdded as WorkOrderDateAdded
	, wo.DateClosed as WorkOrderDateClosed
	, wo.JDEWorkOrderNum
	, jdewo.EstimatedLaborAmount
	, jdewo.EstimatedMaterialAmount
	, jdewo.ExchangeRate
	, art.PartRepairCost
	
from AssetRepairTrack(NOLOCK) art

LEFT OUTER JOIN FixedAssets(NOLOCK) fa on fa.FixedAssetId = art.FixedAssetId
LEFT OUTER JOIN FixedAssets(NOLOCK) fap ON fap.FixedAssetId = fa.ParentFixedAssetId
LEFT OUTER JOIN PartStatus(NOLOCK) ps ON ps.Code = fa.EquipmentStatus
LEFT OUTER JOIN ItemNums(NOLOCK) i ON i.ItemNum = art.ItemNum
LEFT OUTER JOIN ItemNums(NOLOCK) ri ON ri.ItemNum = art.RNItemNum
LEFT OUTER JOIN SelectOptions(NOLOCK) sof ON sof.OptionValue = art.FailureType and sof.SelectName = 'FailureType'
LEFT OUTER JOIN Incidents(NOLOCK) inc ON inc.IncidentID = art.IncidentId

LEFT OUTER JOIN BranchPlants(NOLOCK) frombp ON frombp.BranchPlant = art.FromBranchPlant
LEFT OUTER JOIN Regions(NOLOCK) fromr ON fromr.Region = frombp.Region
LEFT OUTER JOIN Countries(NOLOCK) fromc ON fromc.Country = frombp.Country

LEFT OUTER JOIN BranchPlants(NOLOCK) shipbp ON shipbp.BranchPlant = art.ShipToBranchPlant
LEFT OUTER JOIN Regions(NOLOCK) shipr ON shipr.Region = shipbp.Region
LEFT OUTER JOIN Countries(NOLOCK) shipc ON shipc.Country = shipbp.Country

LEFT OUTER JOIN Jobs(NOLOCK) j ON j.JobId = art.JobId
LEFT OUTER JOIN Customers(NOLOCK) jcust ON jcust.CustomerId = j.CustomerId
LEFT OUTER JOIN BranchPlants(NOLOCK) jbp ON jbp.BranchPlant = j.BranchPlant
LEFT OUTER JOIN Regions(NOLOCK) jr on jr.Region = j.Region
LEFT OUTER JOIN Countries(NOLOCK) jc on jc.Country = j.Country

LEFT OUTER JOIN WorkOrders(NOLOCK) wo ON wo.WorkOrderNum = art.WorkOrderNum
LEFT OUTER JOIN JDEWorkOrders(NOLOCK) jdewo ON jdewo.WorkOrderNumber = wo.JDEWorkOrderNum



GO
/****** Object:  View [dbo].[vwJobs]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--====================================================================================
--MODIFIED BY : SUYEB MOHAMMAD
--MODIFIED ON : 27 May 2016
--DESCRIIPTION: Added new columns salesforceId,ReportId,CustomerNumber,JarWellType
--====================================================================================
CREATE VIEW [dbo].[vwJobs]
AS

SELECT
  j.JobID,
  j.Region,
  r.RegionDesc,
  j.Country,
  cn.CountryDesc,
  j.BranchPlant,
  j.CustomerId,
  j.JobNumber,
  j.StartDate,
  j.EndDate,
  j.EstDays,
  j.SpudDate,
  j.ImportStatus,
  j.LocationCountry,
  j.LocationState,
  j.LocationCounty,
  j.Field,
  j.RigType,
  j.Rig,
  j.Offshore,
  j.OffShoreYN,
  j.Coordinator,
  j.ThirdPartyClient,
  j.X,
  j.Y,
  j.SurfaceSystem,
  j.SurfaceSystemVersion,
  j.RigPhone1,
  j.RigPhone2,
  j.Longitude,
  j.Latitude,
  j.API,
  j.UnitSerialNumber,
  j.DirectionalDrillingCompany,
  j.WellPlanRevision,
  j.CoreVersion,
  j.IsDS,
  j.IsJarOnly,
  j.CreateDate,
  j.CreateUserID,
  j.UpdateDate,
  j.UpdateUserID,
  j.DateProjected,
  j.DateActive,
  j.DatePending,
  j.DateClosed,
  j.IsDeleted,
  c.CustomerName,
  j.JarWell,
  dbo.fnJarRevStatus(j.JobId) AS JarRevStatus,
  bp.CompanyName AS BPCompanyName,
  j.DispatchNumber,
  j.JarWellType,
  j.ReportId,
  j.SalesforceId,
  c.CustomerNumber

FROM Jobs(NOLOCK) j
LEFT JOIN Customers(NOLOCK) c
  ON c.CustomerId = j.CustomerId
LEFT JOIN BranchPlants(NOLOCK) bp
  ON bp.BranchPlant = j.BranchPlant
LEFT JOIN Countries(NOLOCK) cn
  ON cn.Country = j.Country
LEFT JOIN Regions(NOLOCK) r
  ON r.Region = j.Region AND r.Active = 1
GO
/****** Object:  View [dbo].[vwAssetRepairTrackSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwAssetRepairTrackSearch]  
AS  
  
SELECT art.AssetRepairTrackId  
  , art.ARTNumber  
  , art.FixedAssetId  
  , art.ItemNum as PartNum  
  , art.RNItemNum as RNPartNum  
  , art.ItemDesc as PartDesc  
  , art.SerialNum  
  , art.AssetNumber  
  , CASE WHEN isnull(sl.optionvalue,'') = '' THEN 0 ELSE 1 END AS IsRadioActive  
  , art.IncidentId  
  , inc.IncidentNumber  
  , j.JobNumber  
  , art.NCRNumber  
  , (Select TOP 1 d.DispositionId from ARTDispositions d Where d.AssetRepairTrackId = art.AssetRepairTrackId ORDER by DispositionId DESC) as CurrentDispositionId  
  , (Select TOP 1 d.Status from ARTDispositions d Where d.AssetRepairTrackId = art.AssetRepairTrackId ORDER by DispositionId DESC) as CurrentDispositionStatus  
  , (SELECT TOP 1 CASE WHEN d.Status ='Approved' THEN DispositionDate ELSE NULL END   
    FROM ARTDispositions (NOLOCK) d WHERE d.AssetRepairTrackId = art.AssetRepairTrackId ORDER by DispositionId DESC) [DispositionDate]  
  , art.FromBranchPlant  
  , art.ShipToBranchPlant  
  , art.Status  
  , art.DateClosed  
  , art.PartRepairCost  
  , art.IsAssetFromField  
  , art.IsRedTag  
  , art.AddedBy  
  , art.DateAdded  
  , pftIT.WO_NO AS ITPFTWONumber  
  , art.SRPFTWOId  
  , pftSR.WO_NO AS SRPFTWONumber  
  , gc.SegmentPL AS ProductLine 
  , art.FailureType  
  , slf.OptionLabel AS FailureTypeDisplay  
  , fa.EquipmentStatus  
  , ps.Status as EquipmentStatusDesc  
  , fbp.Region as FromBPCompanyName  
  , sbp.Region as ShipBPCompanyName  
  , c.CustomerName as Client  
  , art.WorkOrderNum  
  , art.NeedsCustomerFeedback  
  , ISNULL(gc.GLProductLineId,1) [GLProductLineId]
  , pftIT.Active [ITActive] 
  , pftSR.Active [SRActive]
  , (SELECT TOP 1 CASE WHEN [Status] ='Open' AND pftSR.Active=0 AND art.Status ='Open'
		 THEN 1 ELSE 0 END FROM WorkOrders where WorkOrderNum = pftSR.WO_NO) [IsWorkOrderOpen]
  ,(case  when isnull(pftSR.WO_NO,'') <> ''
			then (case when (pftSR.Active = 0 and 
			(SELECT TOP 1 CASE WHEN d.Status ='Approved' THEN DispositionDate ELSE NULL END   
			FROM ARTDispositions (NOLOCK) d WHERE d.AssetRepairTrackId = art.AssetRepairTrackId ORDER by DispositionId DESC) <> NULL and 
			(SELECT TOP 1 CASE WHEN [Status] ='Open' AND pftSR.Active=0 AND art.Status ='Open' THEN 1 ELSE 0 END FROM WorkOrders 
				where WorkOrderNum = pftSR.WO_NO) = 0) then 0 else 1 end  )
			Else isnull(pftIT.Active,0) End) AS [IsARTClose] ,
			art.DispatchNumber
			,Concat(u.LastName,', ' ,u.FirstName) as UserName 
			,i.ToolCode
			,i.ToolPanel
FROM dbo.AssetRepairTrack art (NOLOCK)  
LEFT OUTER JOIN ItemNums(NOLOCK) i ON i.ItemNum = art.ItemNum  
LEFT OUTER JOIN ItemNums(NOLOCK) ri ON ri.ItemNum = art.RNItemNum  
LEFT OUTER JOIN Jobs j (NOLOCK) ON art.JobId = j.JobId  
LEFT OUTER JOIN Dispatches d (NOLOCK) ON art.DispatchNumber = d.DispatchNumber  
LEFT OUTER JOIN PFTWO pftIT (NOLOCK) ON art.ITPFTWOID = pftIT.PFTWOID  
LEFT OUTER JOIN PFTWO pftSR (NOLOCK) ON art.SRPFTWOID = pftSR.PFTWOID  
LEFT OUTER JOIN SelectOptions sl (NOLOCK) on sl.SelectName = 'AIRTRadioActive' AND sl.optionvalue = ISNULL(ri.ToolCode, i.ToolCode)  
LEFT OUTER JOIN Incidents inc (NOLOCK) on art.IncidentId = inc.IncidentID  
LEFT OUTER JOIN SelectOptions slf (NOLOCK) on slf.optionvalue = art.FailureType and slf.SelectName = 'FailureType'  
LEFT OUTER JOIN FixedAssets fa (NOLOCK) on fa.FixedAssetId = art.FixedAssetId  
LEFT OUTER JOIN BusinessUnits bu (NOLOCK) ON fa.BusinessUnit=bu.BusinessUnit
LEFT OUTER JOIN PartStatus ps (NOLOCK) on ps.Code = fa.EquipmentStatus  
LEFT OUTER JOIN BranchPlants (NOLOCK) sbp ON sbp.BranchPlant= art.ShipToBranchPlant  
LEFT OUTER JOIN BranchPlants (NOLOCK) fbp ON fbp.BranchPlant= art.FromBranchPlant  
LEFT OUTER JOIN Customers (NOLOCK) c ON c.CustomerNumber = d.JDECustomerNumber  
LEFT OUTER JOIN GLCodes gc (NOLOCK) ON gc.GLCode = bu.GLCode
LEFT OUTER JOIN Users u (nolock) on u.WFTUserName=art.AddedBy

GO
/****** Object:  Table [dbo].[JarRunTools]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JarRunTools](
	[JarRunToolId] [uniqueidentifier] NOT NULL,
	[JobId] [uniqueidentifier] NOT NULL,
	[JarRunId] [uniqueidentifier] NULL,
	[ToolStringId] [uniqueidentifier] NOT NULL,
	[IsBackup] [bit] NOT NULL,
	[DateShipped] [datetime] NULL,
	[DateReturned] [datetime] NULL,
	[DateAdded] [datetime] NULL,
 CONSTRAINT [PK_JarRunTools] PRIMARY KEY CLUSTERED 
(
	[JarRunToolId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwJobRunFixedAssets]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW  [dbo].[vwJobRunFixedAssets] AS
SELECT FixedAssetID,j.JobNumber
FROM ToolStringFixedAssets tsfa
join ToolStrings ts on ts.ToolStringId = tsfa.ToolStringID 
join jarruntools jt on jt.toolstringid = tsfa.toolstringid
join JobS j ON j.JobId = jt.jobid 
Union
SELECT  fixedassetid,j.JobNumber
FROM ToolStringComponentInfo  (NOLOCK) tc 
join ToolStrings  (NOLOCK) ts on ts.ToolStringId = tc.ToolStringID  
join Runs  (NOLOCK) r ON r.RunID = tc.RunID
join Wells  (NOLOCK) w ON w.WellID = r.WellID
join JobS  (NOLOCK) j ON j.JobId = w.JobID   

GO
/****** Object:  Table [dbo].[JarActivities]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JarActivities](
	[JarActivityId] [uniqueidentifier] NOT NULL,
	[JobId] [uniqueidentifier] NOT NULL,
	[RunNumber] [varchar](30) NOT NULL,
	[StartDate] [datetime] NOT NULL,
	[EndDate] [datetime] NOT NULL,
	[Activity] [varchar](50) NULL,
	[EstDayRate] [float] NULL,
	[RevenueStatus] [varchar](50) NULL,
	[Comments] [varchar](5000) NULL,
	[ToolSize] [float] NULL,
	[BackupToolSize] [float] NULL,
	[WellName] [varchar](50) NULL,
	[HoleDepth] [decimal](18, 4) NULL,
	[HoleDepthUOM] [varchar](10) NULL,
	[MaxTemp] [decimal](18, 4) NULL,
	[MaxTempUOM] [varchar](10) NULL,
	[DateLastEdit] [datetime] NULL,
	[UserIdLastEdit] [int] NULL,
	[DateAdded] [datetime] NULL,
	[UserIdAdded] [int] NULL,
 CONSTRAINT [PK_JarActivities] PRIMARY KEY CLUSTERED 
(
	[JarActivityId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwJobRunExceptionReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwJobRunExceptionReport] AS
Select * from (
	SELECT  j.JobId
		  , j.JobNumber
		  , j.Region
		  , r.RegionDesc
		  , j.Country
		  , c.CountryDesc
		  , j.BranchPlant
		  , bp.CompanyName As BranchPlantName
		  , j.CustomerId
		  , cu.CustomerName
		  , j.StartDate
		  , j.EstDays
		  , j.EndDate
		  , (Select Min(StartDate) 
			 From Runs(NOLOCK) r left outer join Wells(NOLOCK) w ON w.WellID = r.WellID 
			 Where w.JobID = j.JobId And w.IsDeleted = 0 And r.IsDeleted = 0 And r.IsDownhole = 1) As RunStartDate
		  , (Select Min(StartDate) From JarActivities(NOLOCK) ja Where ja.RevenueStatus = 'Operating' And ja.JobId = j.JobId) As JarActivityStart
		  , (Select Max(EndDate) 
			 From Runs(NOLOCK) r left outer join Wells(NOLOCK) w ON w.WellID = r.WellID 
			 Where w.JobID = j.JobId And w.IsDeleted = 0 And r.IsDeleted = 0 And r.IsDownhole = 1) As RunEndDate
		  , (Select MAX(StartDate) From JarActivities(NOLOCK) ja Where ja.RevenueStatus = 'Operating' And ja.JobId = j.JobId) As JarActivityEnd
		  , CASE WHEN j.Runs IS NOT NULL THEN j.Runs
				ELSE (Select MAX(dbo.NumCheck(RunNumber)) From JarActivities(NOLOCK) ja Where ja.JobId = j.JobId) END As MaxRunNumber
		  , (Select COUNT(RunNumber) 
			 From Runs(NOLOCK) r left outer join Wells(NOLOCK) w ON w.WellID = r.WellID 
			 Where w.JobID = j.JobId And w.IsDeleted = 0 And r.IsDeleted = 0 And r.IsDownhole = 1) AS ActualRunCount
	FROM Jobs (NOLOCK) j
	LEFT JOIN Customers (NOLOCK) cu ON cu.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
	LEFT JOIN Regions (NOLOCK) r ON r.Region = j.Region
	LEFT JOIN Countries (NOLOCK) c ON c.Country = j.Country
	WHERE j.IsDeleted = 0
) a
Where MaxRunNumber > ActualRunCount


GO
/****** Object:  View [dbo].[vwDispatches]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwDispatches]
AS

SELECT d.DispatchId
		, d.DispatchNumber
		, d.JDEJobNumber
		, d.JDECustomerNumber
		, r.RegionDesc as Region
		, c.CountryDesc as Country
		, d.BranchPlant
		, bp.CompanyName
		, d.WellName
		, d.WellDetails1
		, d.WellDetails3
		, d.RigName
		, d.DateLastEdit
		, d.UserIdLastEdit
		, d.DateAdded
		, d.JobId
		, cu.CustomerName AS JDECustomerName
		, pc.CustomerNumber AS JDEParentCustomerNumber
		, pc.CustomerName AS JDEParentCustomerName
		, j.JobNumber AS JARJobNumber
		, jc.CustomerNumber AS JARCustomerNumber
		, jc.CustomerName AS JARCustomerName
		, j.StartDate
		, dbo.fnJarRevStatus(j.JobId) AS JarRevStatus
		, j.EndDate
		, cu.CustomerId AS JDECustomerId
		, pc.CustomerId AS JDEParentCustomerId
		, jc.CustomerId AS JARCustomerId
FROM Dispatches (NOLOCK) d 
LEFT OUTER JOIN Jobs (NOLOCK) j ON j.JobId = d.JobId
LEFT OUTER JOIN Customers (NOLOCK) cu ON d.JDECustomerNumber = cu.CustomerNumber
LEFT OUTER JOIN Customers (NOLOCK) pc ON cu.ParentNumber = pc.CustomerNumber
LEFT OUTER JOIN Customers (NOLOCK) jc ON jc.CustomerId = j.CustomerId

LEFT OUTER JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = d.BranchPlant
LEFT OUTER JOIN Regions (NOLOCK) r ON r.Region = bp.Region AND r.Active = 1
LEFT OUTER JOIN Countries (NOLOCK) c ON c.Country = bp.Country



GO
/****** Object:  View [dbo].[vwDispatchExceptionReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwDispatchExceptionReport]
AS

SELECT d.DispatchId
	, d.DispatchNumber
	, d.JDEJobNumber
	, d.BranchPlant
	, bp.CompanyName as BranchPlantName
	, d.JobId
	, j.JobNumber as JARJobNumber
	, j.Region
	, j.Country
	, d.DateAdded
	, c.CustomerName as JDECustomer
	, r.RegionDesc
	, ct.CountryDesc
	, j.StartDate
	, j.EndDate
	, dbo.fnJarRevStatus(j.JobId) AS JarRevStatus
	
FROM Dispatches (NOLOCK) d 
LEFT OUTER JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = d.BranchPlant
LEFT OUTER JOIN Jobs(NOLOCK) j ON j.JobId = d.JobId
LEFT OUTER JOIN Customers(NOLOCK) c on c.CustomerNumber = d.JDECustomerNumber
LEFT OUTER JOIN Regions (NOLOCK) r ON r.Region = bp.Region
LEFT OUTER JOIN Countries (NOLOCK) ct ON ct.Country = bp.Country

Where d.JobId IS NULL OR d.JDEJobNumber IS NULL



GO
/****** Object:  Table [dbo].[CBMHistogramMonitorTools]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CBMHistogramMonitorTools](
	[CBMMonitorToolId] [uniqueidentifier] NULL,
	[CBMHistogramRunId] [uniqueidentifier] NULL,
	[MonitorName] [varchar](100) NULL,
	[ToolMnem] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CBMHistograms]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CBMHistograms](
	[CBMHistogramId] [uniqueidentifier] NULL,
	[CBMMonitorToolId] [uniqueidentifier] NULL,
	[CBMHistogramRunId] [uniqueidentifier] NULL,
	[Recorded] [bit] NULL,
	[MetricName] [varchar](100) NULL,
	[CurveName] [varchar](100) NULL,
	[BinUnits] [varchar](100) NULL,
	[HistogramUnits] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CBMHistogramRuns]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CBMHistogramRuns](
	[CBMHistogramRunId] [uniqueidentifier] NULL,
	[RunId] [uniqueidentifier] NULL,
	[JobNumber] [varchar](100) NULL,
	[WellName] [varchar](100) NULL,
	[RunNumber] [varchar](100) NULL,
	[CreatedBy] [varchar](100) NULL,
	[SurveyDistGT60DQM] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CBMHistogramBins]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CBMHistogramBins](
	[CBMHistogramBinId] [uniqueidentifier] NULL,
	[CBMHistogramId] [uniqueidentifier] NULL,
	[CBMHistogramRunId] [uniqueidentifier] NULL,
	[Start] [decimal](10, 2) NULL,
	[End] [decimal](10, 2) NULL,
	[Value] [decimal](10, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwCBMHistogram]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwCBMHistogram] AS 
SELECT DISTINCT 
			f.SerialNum,
			f.InventoryItemNum,
			j.JobNumber,
			w.Well,
			r.RunNumber,
			r.EndDate,
			cbm_h.Recorded,
			cbm_h.CurveName, 
			cbm_h.MetricName,
			cbm_h.HistogramUnits,
			cbm_t.toolmnem,
			cbm_b.[Start],
			cbm_b.[End],
			cbm_b.Value
FROM 
			CBMRunAssetMappings ra (NOLOCK)
INNER JOIN	Runs r (NOLOCK) ON r.RunId = ra.RunId
INNER JOIN	Wells w (NOLOCK) ON w.WellID = r.WellID
INNER JOIN	Jobs j ON j.JobId = w.JobID
INNER JOIN	FixedAssets f ON f.FixedAssetId = ra.ParentFixedAssetId
JOIN		dbo.CBMHistogramRuns cbm_r (NOLOCK) ON cbm_r.RunId = r.RunID
JOIN		CBMHistogramBins cbm_b (NOLOCK) on cbm_b.CBMHistogramRunId = cbm_r.CBMHistogramRunId
JOIN		CBMHistograms cbm_h (NOLOCK) on cbm_h.CBMHistogramRunId = cbm_r.CBMHistogramRunId and cbm_h.CBMHistogramId = cbm_b.CBMHistogramId
JOIN		CBMHistogramMonitorTools cbm_t (NOLOCK) ON cbm_t.CBMMonitorToolId = cbm_h.CBMMonitorToolId
GO
/****** Object:  View [dbo].[vwJobSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE VIEW [dbo].[vwJobSearch] AS
SELECT j.JobID
	, j.Region
	, j.BranchPlant As District
	, j.Country
	, j.CustomerId
	, cu.CustomerNumber
	, j.JobNumber
	, reg.RegionDesc
	, d.RelBaseCode + ' - ' + d.BranchPlant + ' - ' + d.CompanyName As DistrictDesc
	, c.CountryDesc
	, j.LocationState
	, j.LocationCounty
	, cu.CustomerName
	, j.Field
	, j.Rig
	, dbo.fnJobWells(j.JobID) As Wells
	, j.StartDate
	, j.EndDate
	, dbo.fnJobImportStatus(j.JobId) As ImportStatus
	, CASE WHEN j.Runs IS NOT NULL THEN j.Runs
		ELSE (select ISNULL(Max(ja.RunNumber), 0) from JarActivities ja where ja.JobId = j.JobId and ja.RunNumber <> 'Standby' and ja.RunNumber <> 'Other' and LEN(ja.RunNumber) > 0) END As JarRuns
	, (Select COUNT(*) From Runs r Left Join Wells w ON r.WellID = w.WellID Where w.JobID = j.JobID And w.IsDeleted = 0 And r.IsDeleted = 0 And r.IsDownhole = 1) As RunCnt
    , (Select COUNT(*) From Incidents i Left Join Runs r ON r.RunID = i.RunID Left Join Wells w ON r.WellID = w.WellID Where w.JobID = j.JobID And w.IsDeleted = 0 And r.IsDeleted = 0 And i.IsDeleted = 0) As IncidentCnt
FROM Jobs j 
LEFT JOIN Regions reg ON reg.Region = j.Region
LEFT JOIN Countries c ON c.Country = j.Country
LEFT JOIN BranchPlants d ON d.BranchPlant = j.BranchPlant
LEFT JOIN Customers cu ON cu.CustomerId = j.CustomerId
WHERE j.IsDeleted = 0 AND j.IsJAROnly = 0






GO
/****** Object:  View [dbo].[vwJobView]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwJobView] AS 
SELECT 
	j.JobID
	, j.JobNumber
	, j.StartDate
	, DateName(m,j.StartDate) + ' ' +  DateName(d,j.StartDate) + ' ' + DateName(yyyy,j.StartDate) AS StartDateText
	, j.EndDate
	, DateName(m,j.EndDate) + ' ' +  DateName(d,j.EndDate) + ' ' + DateName(yyyy,j.EndDate) AS EndDateText
	, reg.Region
	, reg.RegionDesc
	, c.Country
	, c.CountryDesc
	, d.District
	, d.DistrictDesc
	, cu.CustomerId
	, cu.CustomerName
	, j.Offshore
	, j.ImportStatus
	, j.Coordinator
	, j.CoreVersion
FROM Jobs j WITH(NOLOCK)
LEFT JOIN Regions reg WITH(NOLOCK) ON reg.Region = j.Region
LEFT JOIN Countries c WITH(NOLOCK) ON c.Country = j.Country
LEFT JOIN Districts d WITH(NOLOCK) ON d.District = j.BranchPlant
LEFT JOIN Customers cu WITH(NOLOCK) ON cu.CustomerId = j.CustomerId
WHERE j.IsDeleted = 0

GO
/****** Object:  View [dbo].[vwIncidentRptHdr]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwIncidentRptHdr]
AS
SELECT  j.JobID,	
	r.RunID,
	i.IncidentID,
	d.DistrictDesc,
    substring( convert(varchar, r.StartDate, 100),0,20)AS StartDate,
	substring( convert(varchar, r.EndDate, 100),0,20) AS EndDate,
	j.JobNumber,
	j.Coordinator AS CoordName,
	w.Well,
	r.RunNumber as Run,
	i.IncidentNumber,
	Case When (Select Max(Cast(CSI as tinyint)) CSI From ToolStringComponentInfo tsci WITH(NOLOCK) Where tsci.IncidentID = I.IncidentID) = 1 And (dbo.NumCheck(R.CircHrs) <= 30.0 Or i.AcceptedLostTime >= 30.0) Then 'Yes' Else 'No' End As Is3030
FROM Jobs j WITH(NOLOCK)
LEFT JOIN Districts d WITH(NOLOCK) ON d.District = j.BranchPlant
LEFT JOIN Wells w WITH(NOLOCK) On j.JobId = w.JobId and w.IsDeleted =0
LEFT JOIN Runs r WITH(NOLOCK) On w.WellId = r.WellId and r.IsDeleted = 0
LEFT JOIN Incidents i WITH(NOLOCK) On r.RunID = i.RunID and i.IsDeleted = 0
WHERE j.IsDeleted = 0

GO
/****** Object:  View [dbo].[vwIncidents]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwIncidents]
AS
SELECT j.JobNumber, w.Well, r.RunNumber,t.IncidentNumber,t.IncidentID, FixedAssetID
FROM Jobs j
	INNER JOIN Wells w ON w.JobId = j.jobId
	INNER JOIN Runs r ON r.WellId = w.WellId
	INNER JOIN Incidents t ON t.RunID = r.runid
	INNER JOIN ToolStringComponentInfo ti ON ti.RunId = r.RunID
GO
/****** Object:  View [dbo].[vwIncidentJobInfo]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwIncidentJobInfo]
AS
SELECT  j.JobID,	
	r.RunID,
	i.IncidentID,
	j.JobNumber,
	w.Well,
	r.RunNumber,
	r.ServiceType,
	i.IncidentNumber,
	i.FailureDate,
	cu.CustomerName,
	j.Rig,
	j.Field,
	reg.RegionDesc,
	dist.DistrictDesc,
	cntry.CountryDesc,
	j.UnitSerialNumber,
	dbo.fnJobCoordinators(j.JobID) AS CoordName,
	j.ThirdPartyClient,
	j.Latitude,
	j.Longitude,
	j.X,
	j.Y,
	j.Offshore,
	j.API,
	j.SurfaceSystem AS SurfSystem,
	j.SurfaceSystemVersion AS SoftSystem,
	j.DirectionalDrillingCompany,
	j.RigPhone1,	
	j.RigPhone2
FROM Jobs j WITH(NOLOCK)
LEFT JOIN Wells w WITH(NOLOCK) On j.JobId = w.JobId and w.IsDeleted =0
LEFT JOIN Runs r WITH(NOLOCK) On w.WellId = r.WellId and r.IsDeleted = 0
LEFT JOIN Incidents i WITH(NOLOCK) On r.RunID = i.RunID and i.IsDeleted = 0
LEFT JOIN Districts dist ON dist.District = j.BranchPlant
LEFT JOIN Regions reg WITH(NOLOCK) ON reg.Region = j.Region
LEFT JOIN Countries cntry WITH(NOLOCK) on cntry.Country = j.Country
LEFT JOIN Customers cu WITH(NOLOCK) on cu.CustomerID = j.CustomerID
WHERE j.IsDeleted = 0 

GO
/****** Object:  View [dbo].[vwBitRunPdfSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwBitRunPdfSearch]
AS
SELECT R.RunID
	, dist.Region
	, dist.Country
	, dist.District
	, dist.DistrictDesc
	, cu.CustomerId
	, cu.CustomerNumber
	, cu.CustomerName
	, j.JobNumber
	, j.Rig
	, w.Well
	, r.RunNumber
	, r.ServiceType
	, r.StartDate
	, r.EndDate
	, r.MDStart
	, r.MDStartUOM
	, r.MDEnd
	, r.MDEndUOM
	, r.OperHrs
	, r.CircHrs
	, r.DrillHrs
	, dbo.fnRunTools(r.RunID) As ToolString
	, r.RptPath
	, r.IsDownHole
	, (Select top 1 i.IncidentID From Incidents i WITH (NOLOCK) Where i.IsDeleted = 0 And i.RunID = r.RunID) As IncidentID
	, r.HEL_LWD
	, r.HEL_EM
	, r.RSS
	, r.EM
	, r.PP
	, r.AGS
	, r.BECFIELD
	, r.GEOLINK
	, r.GWD
	, r.MOTOR
	, r.TENSOR
	, r.WPR
FROM Jobs j WITH (NOLOCK)
LEFT JOIN Wells w WITH (NOLOCK) ON w.JobID = j.JobID AND w.IsDeleted = 0
LEFT JOIN Runs r WITH (NOLOCK) ON r.WellID = w.WellID AND r.IsDeleted = 0 
LEFT JOIN Districts dist WITH (NOLOCK) ON j.BranchPlant = dist.District
LEFT JOIN Customers cu WITH (NOLOCK) ON j.CustomerId = cu.CustomerId
WHERE j.IsDeleted = 0
AND r.IsDownhole = 1


GO
/****** Object:  Table [dbo].[Daily]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Daily](
	[DailyID] [uniqueidentifier] NOT NULL,
	[WellID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NULL,
	[ActivityName] [varchar](50) NOT NULL,
	[ActivityStart] [datetime] NOT NULL,
	[ActivityEnd] [datetime] NOT NULL,
	[BelowRotataryDatetime] [datetime] NULL,
	[AboveRotaryDatetime] [datetime] NULL,
	[TotalBelowRotaryTime] [float] NULL,
	[TotalAboveRotaryTime] [float] NULL,
	[MDStart] [float] NULL,
	[MDFinish] [float] NULL,
	[MDUOM] [varchar](5) NULL,
	[TVDStart] [float] NULL,
	[TVDFinish] [float] NULL,
	[TVDUOM] [varchar](5) NULL,
	[InclinationStart] [float] NULL,
	[InclinationFinish] [float] NULL,
	[InclinationUOM] [varchar](10) NULL,
	[AzimuthStart] [float] NULL,
	[AzimuthFinish] [float] NULL,
	[AzimuthUOM] [varchar](10) NULL,
	[MDTotalDrilling] [float] NULL,
	[AvgROP] [float] NULL,
	[AvgROPUOM] [varchar](10) NULL,
	[OperatingHours] [float] NULL,
	[TVDTotalDrilling] [float] NULL,
	[RotatingHours] [float] NULL,
	[ReamHours] [float] NULL,
	[DrillingHours] [float] NULL,
	[BuildRateDD] [float] NULL,
	[BuildRateDDUOM] [varchar](10) NULL,
	[MaxDogLegDD] [float] NULL,
	[MaxDogLegDDUOM] [varchar](10) NULL,
	[PumpsOnHoursLWD] [float] NULL,
	[MeasuredDipAngleLWD] [float] NULL,
	[MeasuredDipAngleLWDUOM] [varchar](10) NULL,
	[MeasuredBTotalLWD] [float] NULL,
	[MeasuredBTotalLWDUOM] [varchar](10) NULL,
	[MeasuredGTotalLWD] [float] NULL,
	[MeasuredGTotalLWDUOM] [varchar](10) NULL,
	[CommentsLWD] [varchar](2000) NULL,
	[MaterialsRequestedLWD] [varchar](2000) NULL,
	[CommentsDD] [varchar](2000) NULL,
	[MaterialsRequestedDD] [varchar](2000) NULL,
	[CommentsRSS] [varchar](2000) NULL,
	[MaterialsRequestedRSS] [varchar](2000) NULL,
	[AvgROPDD] [float] NULL,
	[AvgROPDDUOM] [varchar](10) NULL,
	[AvgROPRSS] [float] NULL,
	[AvgROPRSSUOM] [varchar](10) NULL,
	[RptPath] [varchar](255) NULL,
	[CreateDate] [datetime] NOT NULL,
	[ImportUserID] [int] NOT NULL,
	[ImportDate] [datetime] NOT NULL,
	[ImportSource] [varchar](10) NULL,
	[IsDeleted] [bit] NULL,
	[CircHrs] [float] NULL,
 CONSTRAINT [PK_tblDaily] PRIMARY KEY CLUSTERED 
(
	[DailyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwDailyReportPdfSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwDailyReportPdfSearch]
AS
SELECT da.DailyID
	, dist.Region
	, dist.Country
	, dist.District
	, dist.DistrictDesc
	, cu.CustomerId
	, cu.CustomerNumber
	, cu.CustomerName
	, j.JobNumber
	, j.Rig
	, w.Well
	, r.RunNumber
	, r.StartDate As RunStartDate
	, r.EndDate As RunEndDate
	, dbo.fnRunTools(r.RunID) As ToolString
	, da.ActivityName AS DailyNumber
	, da.ActivityStart As StartDate
	, da.ActivityEnd As EndDate
	, r.HEL_LWD
	, r.HEL_EM
	, r.RSS
	, r.EM
	, r.PP
	, r.AGS
	, r.BECFIELD
	, r.GEOLINK
	, r.GWD
	, r.MOTOR
	, r.TENSOR
	, r.WPR
FROM Jobs j 
LEFT JOIN Wells w ON w.JobID = j.JobID AND w.IsDeleted = 0
LEFT JOIN Runs r ON r.WellID = w.WellID AND r.IsDeleted = 0
LEFT JOIN Daily da ON r.RunID = da.RunID and da.IsDeleted = 0
LEFT JOIN Districts dist ON j.BranchPlant = dist.District
LEFT JOIN Customers cu ON j.CustomerId = cu.CustomerId
WHERE da.DailyID is not null


GO
/****** Object:  View [dbo].[vwBitRunJobInfo]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwBitRunJobInfo]
AS
SELECT  j.JobID
	, r.RunID
	, j.JobNumber
	, w.Well
	, r.RunNumber
	, r.ReportNumber
	, substring(convert(varchar, r.StartDate, 100),0,20) AS StartDate
	, '' AS StartDateTime
	--, Cast(DatePart(hh,r.StartDate) as varchar(2)) + ':' + Cast(DatePart(mi,r.StartDate) as varchar(2)) As StartDateTime
	, substring(convert(varchar, r.EndDate, 100),0,20) AS EndDate
	, '' AS EndDateTime
	--, Cast(DatePart(hh,r.EndDate) as varchar(2)) + ':' + Cast(DatePart(mi,r.EndDate) as varchar(2)) As EndDateTime
	, r.ServiceType
	, cu.CustomerName
	, j.Rig
	, j.Field
	, reg.RegionDesc
	, dist.DistrictDesc
	, cntry.CountryDesc
	, j.LocationState
	, j.LocationCounty
	, j.UnitSerialNumber
	, dbo.fnJobCoordinators(j.JobID) AS CoordName
	, j.ThirdPartyClient
	, j.Latitude
	, j.Longitude
	, j.X
	, j.Y
	, j.Offshore
	, j.API
	, j.SurfaceSystem AS SurfSystem
	, j.SurfaceSystemVersion AS SoftSystem
	, j.DirectionalDrillingCompany
	, j.RigPhone1
	, j.RigPhone2
FROM Jobs j
LEFT JOIN Wells w On j.JobId = w.JobId and w.IsDeleted =0
LEFT JOIN Runs r On w.WellId = r.WellId and r.IsDeleted = 0
LEFT JOIN Districts dist ON dist.District = j.BranchPlant
LEFT JOIN Regions reg ON reg.Region = j.Region
LEFT JOIN Countries cntry on cntry.Country = j.Country
LEFT JOIN Customers cu on cu.CustomerID = j.CustomerID
WHERE j.IsDeleted = 0 

GO
/****** Object:  View [dbo].[vwWellSearchResults]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwWellSearchResults] AS
SELECT w.WellID
, dist.District
, j.Country
, j.LocationState
, j.LocationCounty
, j.CustomerId
, j.JobNumber
, dist.DistrictDesc
, cntry.CountryDesc
, cu.CustomerNumber
, cu.CustomerName
, j.Field
, j.Rig
, w.Well
, j.StartDate
, j.EndDate
, (SELECT COUNT(*) FROM Runs r WHERE r.WellID = w.WellID AND r.IsDeleted = 0 AND r.IsDownHole = 1) As RunCnt
, (SELECT COUNT(*) FROM Incidents i LEFT JOIN Runs r ON r.RunID = i.RunID WHERE r.WellID = w.WellID AND r.IsDeleted = 0 AND i.IsDeleted = 0) As IncidentCnt
, Max(r.HEL_LWD) As HEL_LWD
, Max(r.HEL_EM) As HEL_EM
, Max(r.RSS) As RSS
, Max(r.EM) As EM
, Max(r.PP) As PP
, Max(r.AGS) As AGS
, Max(r.BECFIELD) As BECFIELD
, Max(r.GEOLINK) As GEOLINK
, Max(r.GWD) As GWD
, Max(r.MOTOR) As MOTOR
, Max(r.TENSOR) As TENSOR
, Max(r.WPR) As WPR
FROM Jobs j
LEFT JOIN Wells w ON j.JobID = w.JobID AND w.IsDeleted = 0
LEFT JOIN Districts dist ON dist.District = j.BranchPlant
LEFT JOIN Countries cntry ON cntry.Country = j.Country
LEFT JOIN Customers cu ON cu.CustomerId = j.CustomerId
LEFT JOIN Runs r ON w.WellID = r.WellID and r.IsDeleted = 0
WHERE j.IsDeleted = 0
AND w.Well Is Not Null
GROUP BY w.WellID, dist.District, j.Country, j.LocationState, j.LocationCounty, j.CustomerId, j.JobNumber, dist.DistrictDesc, cntry.CountryDesc
, cu.CustomerNumber, cu.CustomerName, j.Field, j.Rig, w.Well, j.StartDate, j.EndDate

GO
/****** Object:  View [dbo].[vwDailyRptJobInfo]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwDailyRptJobInfo]
AS
SELECT j.JobID
	, r.RunID
	, da.DailyID
	, j.JobNumber
	, w.Well
	, r.RunNumber
	, r.ReportNumber
	, da.ActivityName
	, Cast(Left(DateName(mm,da.ActivityStart),3) as varchar(3)) + '-' + Cast(Day(da.ActivityStart) as varchar(2)) + '-' + Cast(Year(da.ActivityStart) as varchar(4)) As StartDate
	, Cast(DatePart(hh,da.ActivityStart) as varchar(2)) + ':' + Cast(DatePart(mi,da.ActivityStart) as varchar(2)) As StartDateTime
	, Cast(Left(DateName(mm,da.ActivityStart),3) as varchar(3)) + '-' + Cast(Day(da.ActivityStart) as varchar(2)) + '-' + Cast(Year(da.ActivityStart) as varchar(4)) + ' ' +
	 Cast(DatePart(hh,da.ActivityStart) as varchar(2)) + ':' + Cast(DatePart(mi,da.ActivityStart) as varchar(2)) As SDateTime
	, Cast(Left(DateName(mm,da.ActivityEnd),3) as varchar(3)) + '-' + Cast(Day(da.ActivityEnd) as varchar(2)) + '-' + Cast(Year(da.ActivityEnd) as varchar(4)) As EndDate
	, Cast(DatePart(hh,da.ActivityEnd) as varchar(2)) + ':' + Cast(DatePart(mi,da.ActivityEnd) as varchar(2)) As EndDateTime
	, Cast(Left(DateName(mm,da.ActivityEnd),3) as varchar(3)) + '-' + Cast(Day(da.ActivityEnd) as varchar(2)) + '-' + Cast(Year(da.ActivityEnd) as varchar(4)) + ' ' +
	 Cast(DatePart(hh,da.ActivityEnd) as varchar(2)) + ':' + Cast(DatePart(mi,da.ActivityEnd) as varchar(2)) As EDateTime
	, cu.CustomerName
	, j.Rig
	, j.Field
	, reg.RegionDesc
	, dist.DistrictDesc
	, cntry.CountryDesc
	, j.LocationState
	, j.LocationCounty
	, j.UnitSerialNumber
	, j.Coordinator AS CoordName
	, j.ThirdPartyClient
	, j.Latitude
	, j.Longitude
	, j.X
	, j.Y
	, j.Offshore
	, j.API
	, j.SurfaceSystem AS SurfSystem
	, j.SurfaceSystemVersion AS SoftSystem
	, j.DirectionalDrillingCompany
	, j.RigPhone1
	, j.RigPhone2
FROM Jobs j WITH(NOLOCK)
LEFT JOIN Wells w WITH(NOLOCK) On j.JobId = w.JobId and w.IsDeleted =0
LEFT JOIN Runs r WITH(NOLOCK) On w.WellId = r.WellId and r.IsDeleted = 0
LEFT JOIN Daily da WITH(NOLOCK) ON r.RunID = da.RunID and da.IsDeleted = 0
LEFT JOIN Districts dist ON dist.District = j.BranchPlant
LEFT JOIN Regions reg WITH(NOLOCK) ON reg.Region = j.Region
LEFT JOIN Countries cntry WITH(NOLOCK) on cntry.Country = j.Country
LEFT JOIN Customers cu WITH(NOLOCK) on cu.CustomerId = j.CustomerID
WHERE j.IsDeleted = 0



GO
/****** Object:  View [dbo].[vwRuns]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwRuns] As

Select r.RunID,
		w.JobID, 
		r.RunNumber, 
		r.StartDate, 
		r.EndDate, 
		r.OperHrs, 
		r.CircHrs, 
		r.DrillHrs, 
		r.Comments,
		r.ClientComments
from Runs(NOLOCK) r
LEFT OUTER JOIN Wells(NOLOCK) w ON w.WellID = r.WellID
LEFT OUTER JOIN Jobs(NOLOCK) j ON j.JobId = w.JobID
Where r.IsDeleted = 0 AND w.IsDeleted = 0

GO
/****** Object:  View [dbo].[vwJobActivityReportSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwJobActivityReportSearch] AS

SELECT  j.JobID
	  , j.Region
	  , r.RegionDesc
	  , j.Country
	  , c.CountryDesc
	  , j.BranchPlant
	  , j.CustomerId
	  , bp.CompanyName As BranchPlantName
	  , j.JobNumber
	  , cu.CustomerName
	  , cu.CustomerNumber
	  , j.ImportStatus
	  , j.Rig
	  , j.DispatchNumber
	  , j.StartDate
	  , j.EstDays As EstEndDate
	  , j.EndDate
	  , j.JarWell
	, (Select TOP 1 RunNumber from JarActivities(NOLOCK) ja Where ja.JobId = j.JobId ORDER by EndDate DESC) as JarRunNumber
	, dbo.fnJarRevStatus(j.JobId) AS JarRevStatus
	, j.UpdateDate As LatestSaveDate
	, j.IsJarOnly
	, r.Active as IsRegionActive
	, (Select MAX(EndDate) from JarActivities(NOLOCK) ja Where ja.JobId = j.JobId) as LastActivityDate
	, bp.IsNonLiveLocation
FROM Jobs j WITH(NOLOCK)
LEFT JOIN Customers cu WITH(NOLOCK) ON cu.CustomerId = j.CustomerId
LEFT JOIN BranchPlants bp WITH(NOLOCK) ON bp.BranchPlant = j.BranchPlant
LEFT JOIN Regions(NOLOCK) r on r.Region = j.Region
LEFT JOIN countries(NOLOCK) c on c.Country = j.Country





GO
/****** Object:  Table [dbo].[JobQueue]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobQueue](
	[JobQueueId] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [nchar](10) NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[RunStart] [datetime] NULL,
	[RunEnd] [datetime] NULL,
	[RequestXml] [xml] NOT NULL,
	[JobQueueStatusId] [int] NOT NULL,
	[CurrentRetry] [int] NOT NULL,
	[AutoRetryCount] [int] NULL,
 CONSTRAINT [PK_JobQueue] PRIMARY KEY CLUSTERED 
(
	[JobQueueId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[VW_DeliveryTicket_Maintenance]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE VIEW [dbo].[VW_DeliveryTicket_Maintenance]
AS

SELECT * FROM 
(
	SELECT DISTINCT
		dii.DispatchInstanceItemId,
		d.DispatchNumber,
		ISNULL(dii.SerialNum, fa.SerialNum) [SerialNum],
		dii.ItemNum,
		dii.Description, 
		b.BranchPlant + ' - ' + b.CompanyName [BranchPlantName],
		fa.ToolCode,
		fa.EquipmentStatus,
		CASE WHEN a.AssetRepairTrackId IS NOT NULL THEN 'AIRT' END [MaintenanceType],
		ISNULL(jw.WorkOrderNumber, jw1.WorkOrderNumber) [JDEWorkOrderNumber],
		jw.WorkOrderStatusCode [JDEWorkOrderStatus],
		dbo.[ufn_CBMMonitor_GetPMValue](fa.FixedAssetId) [PMDuePercentage],
		CAST(CASE WHEN aOpen.AssetRepairTrackId IS NOT NULL THEN 1 ELSE 0 END As bit) [IsMaintAlreadyOpen],
		
		CONVERT(VARCHAR(50), CASE WHEN a.AssetRepairTrackId IS NOT NULL THEN a.ARTNumber END) [MaintenanceFormNumber],
		CONVERT(VARCHAR(36), CASE WHEN a.AssetRepairTrackId IS NOT NULL THEN a.AssetRepairTrackId END) [MaintenanceFormId],

		CASE WHEN a.AssetRepairTrackId IS NOT NULL
			THEN
				CASE WHEN a.Status = 'Closed' THEN 'Closed'
					 WHEN sr.PFTWOId IS NOT NULL THEN 'Service & Repair'
					 WHEN ad.Disposition = 'Approved' THEN 'Disposition Complete'
					 WHEN ti.Active = 0	THEN 'Waiting Disposition'
							ELSE 'Test & Inspection'
				END
			ELSE
				CASE WHEN jq.JobQueueStatusId IS NULL THEN 'Not Requested'
					WHEN jq.JobQueueStatusId = 1 THEN 'Pending'
					WHEN jq.JobQueueStatusId = 4 THEN 'Failed'
				END
		END [MaintenanceFormStatus],
		fa.IsAsset,
		dii.DateAdded,
		dii.DateReturned,
		fa.FixedAssetId,
		CAST((CASE WHEN fa.IsAsset = 0 THEN 0
				  WHEN jw.WorkOrderNumber IS NOT NULL THEN 0
				  WHEN (a.AssetRepairTrackId IS NOT NULL AND a.Status = 'Open') OR aOpen.AssetRepairTrackId  IS NOT NULL THEN 0
				  WHEN fa.FixedAssetId IS NULL THEN 0
				  WHEN jq.MaintenanceFormSourceId IS NOT NULL AND jq.JobQueueStatusId != 4 THEN 0
				  WHEN (SELECT count(*) 
						FROM DispatchInstanceItems dii1
						JOIN DispatchInstances di1 on dii1.DispatchInstanceId = di1.DispatchInstanceId
						WHERE dii.SerialNum = dii1.SerialNum AND dii.ItemNum = dii1.ItemNum AND di1.ShipType ='DT-RETURN' AND dii1.DateAdded > dii.DateAdded ) > 0 THEN 0
				 WHEN NOT EXISTS(SELECT TOP 1 ItemNum FROM PartDescPFTConfigs where ItemNum = fa.InventoryItemNum and PFTType = 2) THEN 0
				ELSE 1 END) AS BIT) AS [CanCreateMaintenance],

		(CASE WHEN (SELECT count(*) 
						FROM DispatchInstanceItems dii1
						JOIN DispatchInstances di1 on dii1.DispatchInstanceId = di1.DispatchInstanceId
						WHERE dii.SerialNum = dii1.SerialNum AND dii.ItemNum = dii1.ItemNum AND di1.ShipType ='DT-RETURN' AND dii1.DateAdded > dii.DateAdded ) > 0 
				THEN 0 
			ELSE 1 END) AS [IsLatest],

		CAST((CASE WHEN fa.IsAsset = 0 THEN 'This is not a properly set up JDE Asset'
				  WHEN jw.WorkOrderNumber IS NOT NULL THEN 'There is an open PFT on the Asset which must be closed before an AIRT can be created'
				  WHEN (a.AssetRepairTrackId IS NOT NULL AND a.Status = 'Open') OR aOpen.AssetRepairTrackId  IS NOT NULL THEN 'There is already an open AIRT ' + CAST(ISNULL(a.ARTNumber, aOpen.ARTNumber) AS Varchar(40))
				  WHEN fa.FixedAssetId IS NULL THEN 'The asset is not properly set up in MyAdvisor. Please contact the help desk'
				  WHEN jq.MaintenanceFormSourceId IS NOT NULL AND jq.JobQueueStatusId != 4 THEN 'There is already an open Maintenance request for this asset. It should be completed shortly.'
				  WHEN (SELECT count(*) 
						FROM DispatchInstanceItems dii1
						JOIN DispatchInstances di1 on dii1.DispatchInstanceId = di1.DispatchInstanceId
						WHERE dii.SerialNum = dii1.SerialNum AND dii.ItemNum = dii1.ItemNum AND di1.ShipType ='DT-RETURN' AND dii1.DateAdded > dii.DateAdded ) > 0 THEN 
						'The asset has been issued to another delivery ticket more recent than the ticket you are viewing. ' +  (SELECT TOP 1 CAST(d.DispatchNumber AS Varchar(10))
						FROM Dispatches d
						JOIN DispatchInstances di1 on d.DispatchId=di1.DispatchId
						JOIN DispatchInstanceItems dii1 on dii1.DispatchInstanceId = di1.DispatchInstanceId
						WHERE dii.SerialNum = dii1.SerialNum AND dii.ItemNum = dii1.ItemNum AND di1.ShipType ='DT-RETURN' AND dii1.DateAdded > dii.DateAdded order by dii1.DateAdded desc)
				 WHEN NOT EXISTS(SELECT TOP 1 ItemNum FROM PartDescPFTConfigs where ItemNum = fa.InventoryItemNum and PFTType = 2) THEN 'There is not a T&I PFT set up with the part # listed on this asset'
				ELSE 'This asset is eligible for Maintenance' END) AS varchar(200)) AS [MaintenanceReason],
		dii.ErrorMessage
		-- added new column RowNum as duplicate records genering due to multiple returns but query is executing slow
		--,ROW_NUMBER() OVER(PARTITION BY dii.[SerialNum], dii.ItemNum ORDER BY dii.dateadded DESC) RowNum
	FROM Dispatches d (NOLOCK)
	JOIN DispatchInstances di (NOLOCK) on di.DispatchId = d.DispatchId
	JOIN DispatchInstanceItems dii (NOLOCK) on dii.DispatchInstanceId = di.DispatchInstanceId
	LEFT JOIN vwFixedAssetsSearch fa (NOLOCK) ON fa.AssetNumber = dii.AssetNumber
	LEFT JOIN BranchPlants b (NOLOCK) ON b.BranchPlant = fa.BranchPlant
	LEFT JOIN Jobs j (NOLOCK) ON j.DispatchNumber = d.DispatchNumber

	------- AIRT Joins
	LEFT JOIN AssetRepairTrack a (NOLOCK) ON a.JobId = j.JobId and a.FixedAssetId = fa.FixedAssetId
	LEFT JOIN AssetRepairTrack aOpen (NOLOCK) ON (aOpen.JobId IS NULL OR aOpen.JobId != j.JobId) AND aOpen.FixedAssetId = fa.FixedAssetId and aOpen.Status = 'Open'
	LEFT JOIN ARTDispositions ad (NOLOCK) ON ad.AssetRepairTrackId = a.AssetRepairTrackId
	LEFT JOIN PFTWO ti (NOLOCK) ON ti.PFTWOId = a.ITPFTWOId
	LEFT JOIN PFTWO sr (NOLOCK) ON sr.PFTWOId = a.SRPFTWOId
	LEFT JOIN JDEWorkOrders jw (NOLOCK) ON jw.WorkOrderNumber = ti.JDEWorkOrderNum
	LEFT JOIN JDEWorkOrders jw1 (NOLOCK) ON jw1.WorkOrderNumber = sr.JDEWorkOrderNum

	LEFT JOIN (SELECT ROW_NUMBER() OVER(PARTITION BY RequestXml.value('(/DeliveryTicketMaintenance/MaintenanceFormSourceId/text())[1]', 'uniqueidentifier') 
										ORDER BY RequestXml.value('(/DeliveryTicketMaintenance/MaintenanceFormSourceId/text())[1]', 'uniqueidentifier'), 
				CreateDate DESC) [Index], RequestXml.value('(/DeliveryTicketMaintenance/MaintenanceFormSourceId/text())[1]', 'uniqueidentifier') [MaintenanceFormSourceId], JobQueueStatusId
			FROM JobQueue 
		WHERE jobid = 49 AND JobQueueStatusId IN (1, 4)) jq ON jq.MaintenanceFormSourceId = dii.DispatchInstanceItemId and jq.[Index] = 1

	WHERE di.ShipType = 'DT-RETURN'
	) AS A 
WHERE ISNULL(ErrorMessage,'') = ''
--[IsLatest] = 1

GO
/****** Object:  View [dbo].[vwToolSheetPDF]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==============================================================================================================
--MODIFIED BY: SUYEB MOHAMMAD
--MODIFIED ON : 08 Aug 2016
--DESCRIPTION: Replaced JarRunTool table by JobToolStringsMapping table to get JobNumber mapped agianst ToolStrings
--===============================================================================================================
CREATE VIEW [dbo].[vwToolSheetPDF] 
AS
SELECT t.ToolStringID
, t.SerialNumber As ToolString
, t.[Description] As ToolStringDesc
, CONVERT(VARCHAR, t.CreateDate, 107) As CreateDate
, t.[Type] As ToolType
, t.[CheckSum]
, t.KitNumber
, dbo.udf_GetJobNumbers(t.ToolStringId) As JobNumber
, (select top 1 c.CustomerName
	from JarRunTools jrt join Jobs j on j.JobId = jrt.JobId join Customers c on c.CustomerId = j.CustomerId
	where j.IsDeleted = 0 and jrt.ToolStringId = t.ToolStringId order by j.StartDate Desc) As CustomerName
, t.CreatedBy
, t.CreateUserID
, t.District
, (Select ShortName From ToolStringSize Where ToolSizeID = t.SizeID) As ToolSize
, t.ToolYear
, t.Disassembled
, CONVERT(VARCHAR, t.DisassembledDate, 107) as DisassembledDate
, t.Comments As ToolStringComments
, u.FirstName + ' ' + u.LastName as Technician
, ta.ToolStringFixedAssetsId
, ta.FixedAssetID
, ta.SerialNum
, pt.[Name]
, pt.[ShortName]
, ta.ToolCode
, ISNULL(rn.DescShort,inv.DescShort) As AssetDescription
, ta.MasterFirmwareRevision
, fw.DescShort As MasterFirmwareShortDesc
, ta.CustomProperty
, ta.OrderPosition
, t.MotorType
, t.MotorProperty
FROM ToolStrings t WITH (NOLOCK)
LEFT JOIN Users u WITH (NOLOCK) ON u.UserID = t.CreateUserID
LEFT JOIN Users u2 WITH (NOLOCK) ON u2.UserID = t.UpdateUserID
LEFT JOIN ToolStringFixedAssets ta WITH (NOLOCK) ON ta.ToolStringID = t.ToolStringID
LEFT JOIN FixedAssets a WITH (NOLOCK) ON a.FixedAssetId = ta.FixedAssetID
LEFT JOIN ItemNums fw WITH (NOLOCK) ON fw.ItemNum = a.MasterFirmwareItemNum
LEFT JOIN ItemNums rn WITH (NOLOCK) ON rn.ItemNum = ta.RNItemNum
LEFT JOIN ItemNums inv WITH (NOLOCK) ON inv.ItemNum = ta.InventoryItemNum
LEFT JOIN PartTypes pt WITH (NOLOCK) ON pt.PartTypeID = ta.PartTypeID
GO
/****** Object:  View [dbo].[vwOpsIncidents]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwOpsIncidents]
AS
SELECT
		i.IncidentID, i.IsOpen, i.IncidentNumber, 
		i.FailureDate, i.FieldSummary, i.IsDownHole,
		i.RptPath AS ReportPath , i.AcceptedLostTime, 
		i.IsHistorical, region.Region,region.RegionDesc, cntry.Country, cntry.CountryDesc, 
		b.BranchPlant, b.CompanyName AS BranchPlantCompanyName,
		cmp.CustomerName, j.Coordinator, j.JobId, j.JobNumber, 
		w.Well, r.RunNumber, r.StartDate, r.EndDate
		, stuff((SELECT ' ' + f.SerialNum
		  FROM ToolStringComponentInfo tsci (NOLOCK)
		  LEFT JOIN FixedAssets f (NOLOCK) ON f.FixedAssetId = tsci.FixedAssetID
		  WHERE tsci.IncidentID = i.IncidentID
		  FOR XML PATH('')), 1, 1, '') AS ComponentSerialNumbers
FROM Incidents i (NOLOCK)
	INNER JOIN Runs r (NOLOCK) ON r.RunID = i.RunID
	INNER JOIN Wells w (NOLOCK) ON w.WellID = r.WellID
	INNER JOIN Jobs j (NOLOCK) ON j.JobId = w.JobID
	LEFT JOIN BranchPlants b (NOLOCK) ON b.BranchPlant = j.BranchPlant
	LEFT JOIN Countries cntry (NOLOCK) ON cntry.Country = j.Country
	LEFT JOIN Regions region (NOLOCK) ON region.Region = j.Region
	LEFT JOIN Customers cmp (NOLOCK) ON cmp.CustomerId = j.CustomerId
WHERE 
	j.IsDeleted = 0 AND 
	r.IsDeleted = 0 AND 
	w.IsDeleted = 0 AND
	i.IsDeleted = 0 AND 
	r.MDStart IS NOT NULL AND 
	r.IsDownHole = 1


GO
/****** Object:  View [dbo].[vwOpsBitRuns]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwOpsBitRuns]
AS
	SELECT 
		  runs.RunID,
		  j.JobId,
		  j.JobNumber,
		  co.CustomerName,
		  b.BranchPlant,
		  b.CompanyName as BranchPlantCompanyName,
		  c.Country,
		  c.CountryDesc,
		  r.Region,
		  r.RegionDesc,
		  wells.Well,
		  runs.RunNumber,
		  runs.StartDate,
		  runs.EndDate,
		  runs.MDStart,
		  runs.MDStartUOM,
		  runs.MDEnd,
		  runs.MDEndUOM,
		  runs.OperHrs,
		  runs.DrillHrs,
		  runs.CircHrs
	FROM Runs runs WITH (NOLOCK)
		INNER JOIN Wells wells WITH (NOLOCK) ON wells.WellID=runs.WellID 
		INNER JOIN Jobs j WITH (NOLOCK) ON j.JobID = wells.JobID
		LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = j.BranchPlant
		LEFT JOIN Countries c WITH (NOLOCK) ON c.Country = j.Country
		LEFT JOIN Regions r WITH (NOLOCK) ON r.Region = j.Region
		LEFT JOIN Customers co WITH (NOLOCK) ON co.CustomerId = j.CustomerId
	WHERE runs.IsDeleted=0
		  AND wells.IsDeleted=0
		  AND j.IsDeleted=0
		  AND j.IsJAROnly = 0
		  AND runs.MDStart IS NOT NULL AND runs.IsDownHole = 1
		  AND r.Active=1 	  

GO
/****** Object:  View [dbo].[vwInboundAIRT]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--============================================================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 15th Feb 2016
--DESCRIPTION: To get AIRT report for inbound AIRT
--=============================================================================================
CREATE VIEW [dbo].[vwInboundAIRT]
AS
	SELECT	[ART].[AssetRepairTrackId], [FA].[AssetNumber], [ART].[ARTNumber], [NCRNumber], [FA].[SerialNum], [ITM].[DescShort], [ITM].[ItemNum], 
			[ITM].[ToolCode], [ART].[FromBranchPlant], [ART].[ShipToBranchPlant], [FA].[EquipmentStatus], [FA].[LastStatusChangeDate],
			[FA].[BranchPlant] AS [CurrentBranchplant], [AD].[DispositionComments], [AD].[DateAdded] AS [DispositionDate], [JB].[JobNumber]
	FROM	[AssetRepairTrack](NOLOCK) [ART]
			LEFT JOIN [ARTDispositions](NOLOCK) [AD] on [AD].[AssetRepairTrackId] = [ART].[AssetRepairTrackId]
			LEFT JOIN [FixedAssets](NOLOCK) [FA] on [FA].[FixedAssetId] = [ART].[FixedAssetId]
			LEFT JOIN [ItemNums](NOLOCK) [ITM] on [ITM].[ItemNum] = [FA].[InventoryItemNum]
			LEFT JOIN [Jobs](NOLOCK) [JB] on [JB].[JobId] = [ART].[JobId]
	WHERE	(([AD].[Disposition] = '1' AND [ApprovalLevel] = '1' AND [AD].[Status] = 'approved') OR
			([AD].[Disposition] = '2'AND ([ApprovalLevel] = '2' OR [ApprovalLevel] = '10') AND [AD].[Status] ='approved')) 
			AND [ART].[SRPFTWOId] IS NULL AND [ART].[Status] = 'open'
GO
/****** Object:  Table [dbo].[ProductLines]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProductLines](
	[ProductLineId] [int] IDENTITY(1,1) NOT NULL,
	[ProductLine] [varchar](20) NULL,
	[SystemName] [varchar](20) NULL,
	[ProductLineName] [varchar](50) NULL,
	[UseAIRT] [bit] NULL,
	[OrderPosition] [tinyint] NOT NULL,
	[Display] [bit] NOT NULL,
	[ServiceLine] [varchar](20) NULL,
	[OpsServiceLine] [varchar](20) NULL,
	[GFAServiceLine] [varchar](20) NULL,
	[OpsGFAServiceLine] [varchar](20) NULL,
	[JarActivityServiceLine] [varchar](20) NULL,
	[BitRunServiceLine] [varchar](20) NULL,
	[IncidentServiceLine] [varchar](20) NULL,
 CONSTRAINT [PK_ProductLines] PRIMARY KEY CLUSTERED 
(
	[ProductLineId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwIncidentSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwIncidentSearch]
AS
	
SELECT *
FROM (
		SELECT
			DISTINCT
			i.IncidentID
			, j.JobId
			, j.JobNumber
			, i.IncidentNumber
			, Case i.IsOpen When 0 Then 'Closed' When 1 Then 'Open' When 99 Then 'Closed/District' End As ReportStatus
			, w.Well 
			, i.FailureDate
			, r.RegionDesc
			, c.CountryDesc
			, b.BranchPlant
			, b.CompanyName AS BranchPlantName
			, cu.CustomerName
			, p.SystemName as ServiceLine
			, CASE WHEN p.IncidentServiceLine = t.Type THEN 1 ELSE 0 END as ServiceLineValue
	from Incidents i WITH (NOLOCK)
	INNER JOIN Runs run WITH (NOLOCK) ON run.RunID = i.RunID
	INNER JOIN Wells w WITH (NOLOCK) ON w.WellID =  run.WellID
	INNER JOIN ToolStringComponentInfo tsci WITH (NOLOCK) ON tsci.IncidentID = i.IncidentID
	INNER JOIN ToolStrings t WITH (NOLOCK) ON t.ToolStringID = tsci.ToolStringID
	INNER JOIN Jobs j WITH (NOLOCK) ON j.JobId = w.JobId
	LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = j.BranchPlant
	LEFT JOIN Countries c WITH (NOLOCK) ON c.Country = j.Country
	LEFT JOIN Regions r WITH (NOLOCK) ON r.Region = j.Region
	LEFT JOIN Customers cu WITH (NOLOCK) ON cu.CustomerId = j.CustomerId
	LEFT JOIN ProductLines p WITH (NOLOCK) ON p.IncidentServiceLine = t.Type
	Where 
		j.IsDeleted = 0 
		AND i.IsDeleted = 0 
		AND run.IsDeleted = 0 
		AND w.IsDeleted = 0
		AND run.IsDownHole = 1
) as Incidents
PIVOT
(
    MAX(ServiceLineValue)
    FOR [ServiceLine] IN (
			HEL_LWD
			, HEL_EM
			, RSS
			, EM
			, HYPERPULSE
			, AGS
			, BECFIELD
			, DMT_AMS
			, GEOLINK
			, GWD
			, MOTOR
			, TENSOR
			, WPR)
)AS IncidentPivot
GO
/****** Object:  View [dbo].[vwBitRunSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwBitRunSearch]
AS

SELECT 
	  runs.RunID
	  , j.JobId
	  , j.JobNumber
	  , b.BranchPlant
	  , b.CompanyName as BranchPlantName
	  , c.CountryDesc
	  , r.RegionDesc
	  , wells.Well
	  , runs.RunNumber
	  , runs.StartDate
	  , runs.EndDate
	  , runs.MDStart
	  , runs.MDStartUOM
	  , runs.MDEnd
	  , runs.MDEndUOM
	  , runs.OperHrs
	  , runs.DrillHrs
	  , runs.CircHrs
	  , runs.HEL_LWD
	  , runs.HEL_EM
	  , runs.RSS
	  , runs.EM
	  , runs.PP AS HYPERPULSE
	  , runs.AGS
	  , runs.BECFIELD
	  , runs.GEOLINK
	  , runs.GWD
	  , runs.MOTOR
	  , runs.TENSOR
	  , runs.WPR
	  , runs.IsDownHole
	  , cu.CustomerName
FROM Runs runs WITH (NOLOCK)
	INNER JOIN Wells wells WITH (NOLOCK) ON wells.WellID=runs.WellID 
	INNER JOIN Jobs j WITH (NOLOCK) ON j.JobID = wells.JobID
	LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = j.BranchPlant
	LEFT JOIN Countries c WITH (NOLOCK) ON c.Country = j.Country
	LEFT JOIN Regions r WITH (NOLOCK) ON r.Region = j.Region
	LEFT JOIN Customers cu WITH (NOLOCK) ON cu.CustomerId = j.CustomerId
WHERE runs.IsDeleted = 0
	  AND wells.IsDeleted = 0
	  AND j.IsDeleted = 0

GO
/****** Object:  Table [dbo].[JarRuns]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JarRuns](
	[JarRunId] [uniqueidentifier] NOT NULL,
	[JobId] [uniqueidentifier] NOT NULL,
	[RunNumber] [varchar](30) NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[HoleSize] [float] NULL,
	[ToolSize] [float] NULL,
	[BackupToolSize] [float] NULL,
	[HoleDepth] [float] NULL,
	[MaxTemp] [float] NULL,
	[OperHrs] [float] NULL,
	[CircHrs] [float] NULL,
	[DrillHrs] [float] NULL,
	[Comments] [varchar](max) NULL,
 CONSTRAINT [PK_JarRuns] PRIMARY KEY CLUSTERED 
(
	[JarRunId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JarRunForecastTools]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JarRunForecastTools](
	[JarRunForecastToolId] [uniqueidentifier] NOT NULL,
	[JarRunId] [uniqueidentifier] NOT NULL,
	[ItemNumConfigId] [uniqueidentifier] NOT NULL,
	[Qty] [int] NOT NULL,
 CONSTRAINT [PK_JarRunForecastTools] PRIMARY KEY CLUSTERED 
(
	[JarRunForecastToolId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwJarRunForecastTools]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vwJarRunForecastTools] AS

SELECT jrft.JarRunForecastToolId, 
		jrft.JarRunId, 
		jrft.ItemNumConfigId, 
		jrft.Qty, 
		ic.ItemNum, 
		ic.ToolSizeID,
		tss.ShortName AS SizeShortName, 
		r.RunNumber, 
		r.JobId,
		j.JobNumber,
		j.JarWell,
		j.Rig
FROM JarRunForecastTools (NOLOCK) jrft
LEFT JOIN JarRuns (NOLOCK) r ON r.JarRunId = jrft.JarRunId
LEFT JOIN ItemNumConfigs (NOLOCK) ic ON ic.ItemNumConfigId = jrft.ItemNumConfigId
LEFT OUTER JOIN ToolStringSize (NOLOCK) tss ON tss.ToolSizeID = ic.ToolSizeID
LEFT JOIN Jobs j on j.JobId = r.JobId





GO
/****** Object:  Table [dbo].[JarActivityServices]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JarActivityServices](
	[JarActivityServiceId] [uniqueidentifier] NOT NULL,
	[JarActivityId] [uniqueidentifier] NOT NULL,
	[ServiceLine] [varchar](20) NOT NULL,
	[Sensor] [varchar](25) NOT NULL,
 CONSTRAINT [PK_JarActivityServices] PRIMARY KEY CLUSTERED 
(
	[JarActivityServiceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwJarActivityDetailSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwJarActivityDetailSearch] 
AS

SELECT ja.JarActivityId
	, ja.JobId
	, j.JobNumber
	, j.StartDate AS JobStartDate
	, j.EndDate	 AS JobEndDate
	, ja.StartDate AS JarActivityStartDate
	, ja.EndDate AS JarActivityEndDate
	, ja.RevenueStatus
	, ja.Activity
	, ja.Comments
	, STUFF((
			SELECT 
				', ' + p.ServiceLine
			FROM JarActivityServices js WITH (NOLOCK)
			LEFT JOIN ProductLines p WITH (NOLOCK) ON p.JarActivityServiceLine = js.ServiceLine
			WHERE js.JarActivityId = ja.JarActivityId
			GROUP BY p.ServiceLine
		FOR XML PATH('')), 1, 1, '') as ServiceName
	, j.Region
	, r.RegionDesc
	, j.Country
	, c.CountryDesc
	, j.BranchPlant
	, bp.CompanyName As BranchPlantName

		
FROM JarActivities ja WITH (NOLOCK)  
LEFT JOIN Jobs j WITH (NOLOCK) ON ja.JobId = j.JobId
LEFT JOIN BranchPlants bp WITH(NOLOCK) ON bp.BranchPlant = j.BranchPlant
LEFT JOIN Regions(NOLOCK) r on r.Region = j.Region
LEFT JOIN Countries(NOLOCK) c on c.Country = j.Country

GO
/****** Object:  Table [dbo].[AuditRMAnalysis]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditRMAnalysis](
	[AuditRMAnalysisID] [uniqueidentifier] NOT NULL,
	[IncidentID] [uniqueidentifier] NOT NULL,
	[ToolStringID] [uniqueidentifier] NULL,
	[FixedAssetID] [uniqueidentifier] NULL,
	[FieldID] [int] NOT NULL,
	[FieldValue] [varchar](50) NULL,
	[UserID] [int] NULL,
	[ActionDate] [smalldatetime] NOT NULL,
	[ActionTypeID] [tinyint] NOT NULL,
	[PartTypeId] [int] NULL,
	[SerialNum] [varchar](30) NULL,
 CONSTRAINT [PK_AuditRMAnalys_59A6241C] PRIMARY KEY CLUSTERED 
(
	[AuditRMAnalysisID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwRMAnalysisSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwRMAnalysisSearch]
AS
SELECT r.RunID
, inc.IncidentID
, reg.Hemisphere
, j.Region
, reg.RegionDesc
, j.Country
, c.CountryDesc
, bp.BranchPlant As District
, bp.CompanyName As DistrictDesc
, j.JobNumber
, j.CustomerId
, cu.CustomerName
, cu.CustomerNumber
, j.Rig
, w.Well
, r.RunNumber + IsNull(' ' + inc.PreRunNumber,'') As RunNumber
, r.EndDate As OutHoleDate
, r.IsDownHole
, j.Coordinator
, inc.IncidentNumber
, inc.FailureDate
, inc.CreateDate
, inc.ImportDate
, inc.IsOpen As ReportStatusID
, Case inc.IsOpen When 0 Then 'Closed' When 1 Then 'Open' When 99 Then 'Closed/District' End As ReportStatus
, Cast(inc.Dist_LWD as tinyint) As Dist_LWD
, Cast(inc.Dist_DD as tinyint) As Dist_DD
, Cast(inc.Dist_MWD as tinyint) As Dist_MWD
, Cast(inc.Dist_RSS as tinyint) As Dist_RSS
, Cast(inc.Dist_SURVEY as tinyint) As Dist_SURVEY
, Cast(inc.Global_LWD as tinyint) As Global_LWD
, Cast(inc.Global_DD as tinyint) As Global_DD
, Cast(inc.Global_MWD as tinyint) As Global_MWD
, Cast(inc.Global_RSS as tinyint) As Global_RSS
, Cast(inc.Global_SURVEY as tinyint) As Global_SURVEY
, inc.AcceptedLostTime
, Case When (dbo.NumCheck(r.CircHrs) <= 30.0 or inc.AcceptedLostTime >= 30.0) Then 1 Else 0 End As Is3030
, (Select Max(a.ActionDate) From AuditRMAnalysis a Where a.FieldID = 29 And FieldValue = '99' And a.IncidentID = inc.IncidentID) As ClosedDistrictDate
, (Select Max(a.ActionDate) From AuditRMAnalysis a Where a.FieldID = 29 And FieldValue = '0' And a.IncidentID = inc.IncidentID) As ClosedDate
, (Select Max(a.ActionDate) From AuditRMAnalysis a Where a.IncidentID = inc.IncidentID) As LastUpdated
, tsci.StatusCodeID
, tsci.GlobalStatusCodeID
, tsci.FieldSymptom As AcceptedFieldSymptom
, tsci.TIPFT
, tsci.ArtNumber
, tsci.TFF
, tsci.CSI
, tsci.NCI
, tsci.OS
, tsci.PR
, tsci.RC
, tsci.CN
, Case When t.[Type] = 'HEL/LWD' Then 1 Else 0 End As HEL_LWD
, Case When t.[Type] = 'HEL/EM' Then 1 Else 0 End As HEL_EM
, Case When t.[Type] = 'RSS' Then 1 Else 0 End As RSS
, Case When t.[Type] = 'EM' Then 1 Else 0 End As EM
, Case When t.[Type] = 'HYPERPULSE' Then 1 Else 0 End As HYPERPULSE
, Case When t.[Type] = 'AGS' Then 1 Else 0 End As AGS
, Case When t.[Type] = 'BECFIELD' Then 1 Else 0 End As BECFIELD
, Case When t.[Type] = 'DMT/AMS' Then 1 Else 0 End As DMT_AMS
, Case When t.[Type] = 'GEOLINK' Then 1 Else 0 End As GEOLINK
, Case When t.[Type] = 'GWD' Then 1 Else 0 End As GWD
, Case When t.[Type] = 'MOTOR' Then 1 Else 0 End As MOTOR
, Case When t.[Type] = 'TENSOR' Then 1 Else 0 End As TENSOR
, Case When t.[Type] = 'WPR' Then 1 Else 0 End As WPR
, t.SerialNumber As ToolString
, tsci.PartTypeID
, tsci.SerialNum
, fc.FailureCategoryCode
, fc.FailureSubCategoryCode
, fc.FailureCode As FailureCodeNumber
, os.FailureCategoryCode As OutofSpecCategoryCode
, os.FailureSubCategoryCode As OutofSpecSubCategoryCode
, os.FailureCode As OutofSpecFailureCodeNumber
, pr.FailureCategoryCode As ProceduralCategoryCode
, pr.FailureSubCategoryCode As ProceduralSubCategoryCode
, pr.FailureCode As ProceduralFailureCodeNumber
, ifc.LevelOneId
, ifc.LevelTwoId
, ifc.LevelThreeId
, inc.IsHistorical
FROM Jobs j WITH(NOLOCK)
LEFT JOIN Regions reg WITH(NOLOCK) ON reg.Region = j.Region
LEFT JOIN Countries c WITH(NOLOCK) ON c.Country = j.Country
LEFT JOIN BranchPlants bp WITH(NOLOCK) ON bp.BranchPlant = j.BranchPlant 
LEFT JOIN Customers cu WITH(NOLOCK) ON cu.CustomerId = j.CustomerId
LEFT JOIN Wells w WITH(NOLOCK) ON w.JobID = j.JobID AND w.IsDeleted = 0
LEFT JOIN Runs r WITH(NOLOCK) ON w.WellID = r.WellID AND r.IsDeleted = 0
LEFT JOIN Incidents inc WITH(NOLOCK) ON r.RunID = inc.RunID AND inc.IsDeleted = 0
LEFT JOIN ToolStringComponentInfo tsci WITH(NOLOCK) ON tsci.IncidentID = inc.IncidentID
LEFT JOIN ToolStrings t WITH(NOLOCK) ON t.ToolStringID = tsci.ToolStringID
LEFT JOIN vwFailureCodes fc WITH(NOLOCK) On fc.FailureCodeID = tsci.CompFailureCodeID
LEFT JOIN vwFailureCodes os WITH(NOLOCK) On os.FailureCodeID = tsci.OutOfSpecCodeID
LEFT JOIN vwFailureCodes pr WITH(NOLOCK) On pr.FailureCodeID = tsci.ProceduralCodeID
LEFT JOIN vwIncidentFaultCodes ifc WITH(NOLOCK) ON ifc.IncidentId = inc.IncidentID
WHERE j.IsDeleted = 0
AND inc.IncidentNumber IS NOT NULL





GO
/****** Object:  Table [dbo].[FracasComponents]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FracasComponents](
	[FracasComponentID] [uniqueidentifier] NOT NULL,
	[IncidentID] [uniqueidentifier] NOT NULL,
	[ToolStringID] [uniqueidentifier] NOT NULL,
	[FixedAssetID] [uniqueidentifier] NOT NULL,
	[PartTypeID] [int] NULL,
	[InitialReview] [varchar](3000) NULL,
	[TestResults] [varchar](3000) NULL,
	[RootCause] [varchar](3000) NULL,
	[CorrectiveAction] [varchar](3000) NULL,
	[IsDeleted] [bit] NOT NULL,
	[StageCount] [tinyint] NOT NULL,
	[SerialNum] [varchar](30) NULL,
 CONSTRAINT [PK_FracasComponents] PRIMARY KEY CLUSTERED 
(
	[FracasComponentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FracasBHA]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FracasBHA](
	[FracasID] [uniqueidentifier] NOT NULL,
	[IncidentID] [uniqueidentifier] NOT NULL,
	[FracasDate] [datetime] NULL,
	[StatusID] [tinyint] NULL,
	[Dist_LWD] [bit] NOT NULL,
	[Dist_DD] [bit] NOT NULL,
	[Dist_MWD] [bit] NOT NULL,
	[Dist_RSS] [bit] NOT NULL,
	[Dist_SURVEY] [bit] NOT NULL,
	[Global_LWD] [bit] NOT NULL,
	[Global_DD] [bit] NOT NULL,
	[Global_MWD] [bit] NOT NULL,
	[Global_RSS] [bit] NOT NULL,
	[Global_SURVEY] [bit] NOT NULL,
	[InitialReview] [varchar](3000) NULL,
	[TestResults] [varchar](3000) NULL,
	[RootCause] [varchar](3000) NULL,
	[CorrectiveAction] [varchar](3000) NULL,
	[StageCount] [tinyint] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_FracasBHA] PRIMARY KEY CLUSTERED 
(
	[FracasID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwFracasSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwFracasSearch]
AS
SELECT ROW_NUMBER() OVER(ORDER BY District) as RowID
, inc.IncidentID
, j.Region
, j.Country
, reg.RegionDesc
, country.CountryDesc
, bp.BranchPlant AS District
, bp.CompanyName AS DistrictDesc
, j.JobNumber
, j.CustomerId
, cu.CustomerName
, cu.CustomerNumber
, w.Well
, r.RunNumber
, r.EndDate As OutHoleDate
, inc.IncidentNumber
, inc.FailureDate
, inc.AcceptedLostTime
, f.Dist_LWD
, f.Dist_DD
, f.Dist_MWD
, f.Dist_RSS
, f.Dist_SURVEY
, f.Global_LWD
, f.Global_DD
, f.Global_MWD
, f.Global_RSS
, f.Global_SURVEY
, f.StageCount As StageCountBHA
, fc.StageCount As StageCountComponent
, Case f.StatusID When 1 Then 'Open' When 99 Then 'Closed at District' When 0 Then 'Closed' Else '' End As FracasStatus
, Case When tsci.CSI = 1 And (dbo.NumCheck(r.CircHrs) <= 30.0 Or inc.AcceptedLostTime >= 30.0) Then 'Yes' Else 'No' End As Is3030
, FieldSymptom As AcceptedFieldSymptom
, tsci.TFF
, tsci.CSI
, tsci.NCI
, tsci.OS
, tsci.PR
, tsci.RC
, tsci.CN
, tsci.StatusCodeID As DistrictStatusCodeID
, tsci.GlobalStatusCodeID
, Case When t.[Type] = 'HEL/LWD' Then 1 Else 0 End As HEL_LWD
, Case When t.[Type] = 'HEL/EM' Then 1 Else 0 End As HEL_EM
, Case When t.[Type] = 'RSS' Then 1 Else 0 End As RSS
, Case When t.[Type] = 'EM' Then 1 Else 0 End As EM
, Case When t.[Type] = 'HYPERPULSE' Then 1 Else 0 End As HYPERPULSE
, Case When t.[Type] = 'AGS' Then 1 Else 0 End As AGS
, Case When t.[Type] = 'BECFIELD' Then 1 Else 0 End As BECFIELD
, Case When t.[Type] = 'DMT/AMS' Then 1 Else 0 End As DMT_AMS
, Case When t.[Type] = 'GEOLINK' Then 1 Else 0 End As GEOLINK
, Case When t.[Type] = 'GWD' Then 1 Else 0 End As GWD
, Case When t.[Type] = 'MOTOR' Then 1 Else 0 End As MOTOR
, Case When t.[Type] = 'TENSOR' Then 1 Else 0 End As TENSOR
, Case When t.[Type] = 'WPR' Then 1 Else 0 End As WPR
, pt.[Name] As Component
, tsci.PartTypeID
, t.SerialNumber As ToolString
, fc.FracasComponentID As FracasComponentIdJoin
, fa.SerialNum
FROM Jobs (NOLOCK) j
LEFT JOIN Regions (NOLOCK) reg ON reg.Region = j.Region
LEFT JOIN Countries (NOLOCK) country ON country.Country = j.Country
LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = j.BranchPlant AND bp.IsOps=1 AND bp.Active=1 AND bp.Region IS NOT NULL
LEFT JOIN Customers (NOLOCK) cu ON cu.CustomerId = j.CustomerId
LEFT JOIN Wells (NOLOCK) w ON w.JobID = j.JobID AND w.IsDeleted = 0
LEFT JOIN Runs (NOLOCK) r ON r.WellID = w.WellID AND r.IsDeleted = 0
LEFT JOIN Incidents (NOLOCK) inc ON inc.RunID = r.RunID AND inc.IsDeleted = 0
LEFT JOIN FracasBHA (NOLOCK) f ON f.IncidentID = inc.IncidentID AND f.IsDeleted = 0
LEFT JOIN ToolStringComponentInfo (NOLOCK) tsci ON tsci.IncidentID = inc.IncidentID
LEFT JOIN FixedAssets (NOLOCK) fa ON fa.FixedAssetId = tsci.FixedAssetID
LEFT JOIN ToolStrings (NOLOCK) t ON t.ToolStringID = tsci.ToolStringID
LEFT JOIN PartTypes (NOLOCK) pt ON pt.PartTypeID = tsci.PartTypeID
LEFT JOIN FracasComponents (NOLOCK) fc ON fc.IncidentID = tsci.IncidentID AND fc.ToolStringID = tsci.ToolStringID AND fc.FixedAssetID = tsci.FixedAssetID AND fc.IsDeleted = 0
WHERE tsci.FA = 1


GO
/****** Object:  View [dbo].[vwOpenCustomerImpactedIncidentReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vwOpenCustomerImpactedIncidentReport]
AS
SELECT 
  distinct
  (CONVERT(varchar(256), tsci.IncidentID) + ts.Type) as ID
  , i.IncidentID
  , j.JobNumber
  , r.RunNumber
  , j.Region
  , reg.RegionDesc
  , j.Country
  , c.CountryDesc
  , i.FailureDate
  , (select Max(Cast(tsci.CSI as tinyint)) from ToolStringComponentInfo tsci where i.IncidentID = tsci.IncidentID) As CI
  , (Select Max(a.ActionDate) From AuditRMAnalysis a Where a.FieldID = 29 And FieldValue = '0' And a.IncidentID = i.IncidentID) as ClosedDate
  , DATEDIFF(d, IsNull((Select Max(a.ActionDate) From AuditRMAnalysis a Where a.FieldID = 29 And FieldValue = '0' And a.IncidentID = i.IncidentID), i.FailureDate), GETDATE()) as DaysOpen 
  , ts.Type
FROM Incidents i 
JOIN Runs r on r.RunID = i.RunID
JOIN Wells w on w.WellID = r.WellID
left join ToolStringComponentInfo tsci on i.IncidentID = tsci.IncidentID and tsci.CSI=1
left join ToolStrings ts on ts.ToolStringId = tsci.ToolStringId
JOIN Jobs j on j.JobId = w.JobID
join Regions reg on reg.Region = j.Region
join Countries c on c.Country = j.Country
WHERE 
  i.IsDeleted = 0 
  and j.IsDeleted = 0
  and (select Max(Cast(tsci.CSI as tinyint)) from ToolStringComponentInfo tsci where i.IncidentID = tsci.IncidentID) = 1
  and ts.Type is not null
--  and DATEDIFF(d, IsNull((Select Max(a.ActionDate) From AuditRMAnalysis a Where a.FieldID = 29 And FieldValue = '0' And a.IncidentID = i.IncidentID), i.FailureDate), GETDATE()) > 30
  and i.IsOpen = 1



GO
/****** Object:  View [dbo].[vwRelJobAuditReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwRelJobAuditReport]
AS
SELECT JobID
	, j.Region
	, j.BranchPlant
	, r.RegionDesc
	, d.DistrictDesc
	, (SELECT COUNT(*) FROM Jobs WITH(NOLOCK) WHERE Jobs.JobID = j.JobID AND Jobs.ImportStatus = '1') AS ActiveStatusCount
	, (SELECT COUNT(*) FROM Jobs WITH(NOLOCK) WHERE Jobs.JobID = j.JobID AND Jobs.ImportStatus = '2') AS PendingStatusCount
	, (SELECT COUNT(*) FROM Jobs WITH(NOLOCK) WHERE Jobs.JobID = j.JobID AND Jobs.ImportStatus = '3') AS ProjectedStatusCount
FROM Jobs j WITH(NOLOCK)
LEFT JOIN Regions r WITH(NOLOCK) ON r.Region = j.Region
LEFT JOIN Districts d WITH(NOLOCK) ON d.District = j.BranchPlant
WHERE j.IsDeleted = 0 
AND j.ImportStatus <> 'Closed'
AND j.IsJarOnly = 0
AND d.Active = '1'

GO
/****** Object:  View [dbo].[vwRelJobAuditExcel]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  VIEW [dbo].[vwRelJobAuditExcel]
AS
SELECT j.JobID
	, j.UpdateDate
	, j.JobNumber
	, cu.CustomerName
	, (select top 1 w.Well from Wells w where w.IsDeleted = 0 and w.JobID = j.JobID order by w.Well) AS WellName
	, (select top 1 r.EndDate from Runs r left join Wells w on r.WellID = w.WellID and w.IsDeleted = 0 where r.IsDeleted = 0 and r.IsDownhole = 1 and w.JobID = j.JobID order by r.EndDate desc) As LatestOutHole
	, reg.Region
	, reg.RegionDesc
	, dist.District
	, dist.DistrictDesc
	, c.Country
	, dist.Active
	, j.StartDate
	, j.EndDate
	, j.ImportStatus As JobStatus
	, j.Coordinator AS CoordName
	, (select count(r.RunNumber) from Runs r left join Wells w on r.WellID = w.WellID and w.IsDeleted = 0 where r.IsDeleted = 0 and r.IsDownhole = 1 and w.JobID = j.JobID) As RunUpload
	, (select Max(jar.Run) from JarDailies jar where jar.IsDeleted = 0 and jar.JobID = j.JobID) As RunActivity
	, (select count(GFANumber) from GFAIncidents i join jobs on jobs.jobid = i.jobid where i.IsDeleted = 0 and jobs.JobID = j.JobID) As IncidentActivity
	, (select count(i.IncidentNumber) from Incidents i left join Runs r ON r.RunID = i.RunID and r.IsDeleted = 0 left join Wells w ON r.WellID = w.WellID and w.IsDeleted = 0 where i.IsDeleted = 0 and w.JobID = j.JobID) As IncidentUpload
	, '' As Comments
	, (select sum(r.HEL_LWD) from Runs r left join Wells w ON r.WellID = w.WellID and w.IsDeleted = 0 where r.IsDeleted = 0 and r.IsDownhole = 1 and w.JobID = j.JobID) AS HELRunCount
	, (select sum(r.EM) from Runs r left join Wells w ON r.WellID = w.WellID and w.IsDeleted = 0 where r.IsDeleted = 0 and r.IsDownhole = 1 and w.JobID = j.JobID) AS EMRunCount
	, (select sum(r.PP) from Runs r left join Wells w ON r.WellID = w.WellID and w.IsDeleted = 0 where r.IsDeleted = 0 and r.IsDownhole = 1 and w.JobID = j.JobID) AS PPRunCount
	, (select sum(r.RSS) from Runs r left join Wells w ON r.WellID = w.WellID and w.IsDeleted = 0 where r.IsDeleted = 0 and r.IsDownhole = 1 and w.JobID = j.JobID) AS RSSRunCount
	, (select sum(r.TENSOR) from Runs r left join Wells w ON r.WellID = w.WellID and w.IsDeleted = 0 where r.IsDeleted = 0 and r.IsDownhole = 1 and w.JobID = j.JobID) AS TENSORRunCount
	, (select sum(r.GEOLINK) from Runs r left join Wells w ON r.WellID = w.WellID and w.IsDeleted = 0 where r.IsDeleted = 0 and r.IsDownhole = 1 and w.JobID = j.JobID) AS GEOLINKRunCount
	, (select sum(r.BECFIELD) from Runs r left join Wells w ON r.WellID = w.WellID and w.IsDeleted = 0 where r.IsDeleted = 0 and r.IsDownhole = 1 and w.JobID = j.JobID) AS BECFIELDRunCount
	, (select sum(r.GWD) from Runs r left join Wells w ON r.WellID = w.WellID and w.IsDeleted = 0 where r.IsDeleted = 0 and r.IsDownhole = 1 and w.JobID = j.JobID) AS GWDRunCount
FROM Jobs j
LEFT JOIN Customers cu ON cu.CustomerID = j.CustomerID
LEFT JOIN Regions reg ON reg.Region = j.Region 
LEFT JOIN Districts dist ON dist.District = j.BranchPlant
LEFT JOIN Countries c ON c.Country = j.Country
WHERE j.IsDeleted = 0
AND j.IsJAROnly = 0
AND j.ImportStatus <> 'Closed'

GO
/****** Object:  View [dbo].[vwOpsRunTools]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwOpsRunTools]
AS
SELECT DISTINCT
	tsci.ToolStringInfoID,
    J.JobID,
	tsci.RunID,
	f.SerialNum AS Tool, 
	CASE tsci.IsUsed WHEN 1 THEN 'Yes' ELSE 'No' END AS IsUsed,
	b.BranchPlant,
	b.CompanyName AS BranchPlantCompanyName,
	C.CustomerId,
	C.CustomerName,
	J.JobNumber,
	W.Well,
	R.RunNumber,
	R.ServiceType,  
	R.StartDate,
	R.EndDate,
	R.MDStart, 
	R.MDStartUOM, 
	R.MDEnd, 
	R.MDEndUOM, 
	R.OperHrs, 
	R.CircHrs, 
	R.DrillHrs, 
	R.IsDownHole,
	(SELECT TOP 1 i.IncidentID FROM Incidents i WITH(NOLOCK) WHERE i.IsDeleted = 0 And i.RunID = R.RunID) AS IncidentID,
	(SELECT TOP 1 i.IncidentNumber FROM Incidents i WITH(NOLOCK) WHERE i.IsDeleted = 0 And i.RunID = R.RunID) AS IncidentNumber,
	R.HEL_LWD,
	R.HEL_EM,
	R.RSS,
	R.EM,
	R.PP,
	R.GEOLINK,
	R.BECFIELD,
	NULL AS CMP,
	R.TENSOR	 
FROM ToolStringComponentInfo tsci WITH (NOLOCK)
INNER JOIN FixedAssets f WITH (NOLOCK) ON f.FixedAssetId = tsci.FixedAssetID
INNER JOIN Runs R WITH (NOLOCK) ON R.RunID = tsci.RunID AND R.IsDeleted = 0
INNER JOIN Wells W WITH (NOLOCK) ON W.WellID = R.WellID AND W.IsDeleted = 0
INNER JOIN Jobs J WITH (NOLOCK) ON J.JobID = W.JobID and J.IsDeleted = 0
LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = j.BranchPlant
LEFT JOIN Customers C WITH (NOLOCK) ON c.CustomerId = j.CustomerId

GO
/****** Object:  View [dbo].[vwJarActivitySearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwJarActivitySearch] AS

SELECT ja.JarActivityId
	, ja.JobId
	, ja.RunNumber
	, ja.StartDate AS JarActivityStartDate
	, ja.EndDate AS JarActivityEndDate
	, ja.RevenueStatus
	, ja.Activity
	, ja.EstDayRate
	, ja.Comments
	, dbo.fnJarActivityPersonnel(ja.JarActivityId) As ActivityPersonnel		
	, stuff((
			SELECT 
				', ' + p.ServiceLine
			FROM JarActivityServices js WITH (NOLOCK)
			LEFT JOIN ProductLines p WITH (NOLOCK) ON p.JarActivityServiceLine = js.ServiceLine
			WHERE js.JarActivityId = ja.JarActivityId
			GROUP BY p.ServiceLine
		FOR XML PATH('')), 1, 1, '') as ServiceName
	, j.Region
	, r.RegionDesc
	, j.Country
	, c.CountryDesc
	, j.BranchPlant
	, j.CustomerId
	, bp.CompanyName As BranchPlantName
	, j.JobNumber
	, cu.CustomerName
	, cu.CustomerNumber
	, j.ImportStatus
	, j.Rig
	, j.StartDate
	, j.EstDays As EstEndDate
	, j.EndDate
	, j.JarWell
	, j.DispatchNumber
	, (Select TOP 1 RunNumber from JarActivities(NOLOCK) ja Where ja.JobId = j.JobId ORDER by EndDate DESC) as JarRunNumber
	, dbo.fnJarRevStatus(j.JobId) AS JarRevStatus
	, j.UpdateDate As LatestSaveDate
	, j.IsJarOnly
	, r.Active as IsRegionActive
	, (Select MAX(EndDate) from JarActivities(NOLOCK) ja Where ja.JobId = j.JobId) as LastActivityDate
		
FROM JarActivities ja WITH (NOLOCK)  
LEFT JOIN Jobs j WITH (NOLOCK) ON ja.JobId = j.JobId
LEFT JOIN Customers cu WITH(NOLOCK) ON cu.CustomerId = j.CustomerId
LEFT JOIN BranchPlants bp WITH(NOLOCK) ON bp.BranchPlant = j.BranchPlant
LEFT JOIN Regions(NOLOCK) r on r.Region = j.Region
LEFT JOIN countries(NOLOCK) c on c.Country = j.Country
GO
/****** Object:  Table [dbo].[BuildSheetTemplates]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildSheetTemplates](
	[TemplateID] [int] IDENTITY(1,1) NOT NULL,
	[TemplateName] [varchar](100) NULL,
	[ParentTemplateID] [int] NULL,
	[Description] [varchar](400) NULL,
	[GLProductLineId] [int] NULL,
	[BranchPlant] [varchar](20) NULL,
	[DateAdded] [datetime] NOT NULL,
	[AddedBy] [int] NULL,
	[UpdatedOn] [datetime] NULL,
	[UpdatedBy] [int] NULL,
 CONSTRAINT [PK_BuildSheetTemplates] PRIMARY KEY CLUSTERED 
(
	[TemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[GLProductLines]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GLProductLines](
	[Id] [int] NOT NULL,
	[Code] [varchar](50) NOT NULL,
	[Description] [varchar](250) NULL,
	[UpdatedBy] [varchar](10) NULL,
	[UpdatedOn] [datetime] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwToolSheetSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
----- TFS:81593: added below columns TemplateID, TemplateName, ProductLineId, ProductLine -- Sachin M -----
CREATE VIEW [dbo].[vwToolSheetSearch]
AS

SELECT dist.BranchPlant AS District
	, dist.BranchPlant + ' - '  + dist.CompanyName AS DistrictDesc
	, dist.RelBaseCode AS ShortDistrict
	, dist.Hemisphere
	, dist.Region
	, dist.Country
	, reg.RegionDesc
	, c.CountryDesc
	, (Select top 1 j.JobNumber 
		From JarRunTools jrt 
		Left Join Jobs j On j.JobId = jrt.JobId And j.IsDeleted = 0
		Where jrt.ToolStringId = t.ToolStringId
		Order By j.StartDate Desc) As LatestJob
	, t.ToolStringId
	, t.SerialNumber as ToolString
	, t.[Description] as ToolStringDesc
	, t.CreateDate
	, u.FirstName + ' ' + u.LastName as Technician
	, t.SizeId as ToolSizeID
	, t.ToolYear
	, t.BuildNumber
	, Case When t.Disassembled = 1 Then 'Yes' Else 'No' End As Disassembled
	, t.DisassembledDate
	, t.UpdateDate
	, u2.FirstName + ' ' + u2.LastName as UpdateUser
	, t.[Type] As ToolType
	, t.KitNumber As ProjectNumber
	, t.[CheckSum]
	, t.IsTurnaround
	, Case t.IsTurnaround When 1 Then 'Yes' Else 'No' End As IsTurnaroundText
	, Case t.[Type] When 'MOTOR' Then 'MotorSheet' When 'HEL/LWD' Then 'BuildSheet' When 'HEL/EM' Then 'BuildSheet' When 'RSS' Then 'BuildSheet' When 'AGS' Then 'BuildSheet' When 'GWD' Then 'BuildSheet' When 'NONDS' Then 'BuildSheet' Else 'LoadoutSheet' End 

As PageName
	, t.ToolMod
	, bst.TemplateID
	, bst.TemplateName
	, pl.Id AS ProductLineId
	, pl.Code AS ProductLine
	, Case t.[Status] When 1 Then 'Build Sheet Created' When 2 Then 'Pre-Job' When 3 Then 'Post-Job' When 4 Then 'Maintenance' Else '' End As [Status]
	, d.DispatchNumber
	, d.WellName
	, cs.CustomerName
	, t.Name
FROM ToolStrings t (NOLOCK)
LEFT JOIN Users u  (NOLOCK) ON u.UserId = t.CreateUserId
LEFT JOIN Users u2  (NOLOCK) ON u2.UserID = t.UpdateUserId
LEFT JOIN BranchPlants dist  (NOLOCK) ON dist.BranchPlant = t.District
LEFT JOIN Regions reg (NOLOCK) ON reg.Region = dist.Region
LEFT JOIN Countries c  (NOLOCK) ON c.Country = dist.Country
LEFT JOIN BuildSheetTemplates bst (NOLOCK) ON bst.TemplateID = t.TemplateId
LEFT JOIN GLProductLines pl (NOLOCK) ON pl.Id = t.ProductLineId
OUTER APPLY (SELECT TOP 1 d.DispatchNumber, d.WellName, d.JDECustomerNumber FROM Dispatches d (NOLOCK) JOIN JarRunTools jrt (NOLOCK) ON d.DispatchId = jrt.JobId WHERE jrt.ToolStringId = t.ToolStringId ORDER BY jrt.DateAdded DESC) As d
LEFT JOIN Customers cs (NOLOCK) ON cs.CustomerNumber = d.JDECustomerNumber
WHERE t.CreatedBy = 0 AND t.IsDeleted = 0


GO
/****** Object:  View [dbo].[VW_GetDTBuildSheets]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=======================================================
--MODIFIED BY: SACHIN MHALUNGEKAR
--MODIFIED ON : 25 June 2020
--DESCRIPTION: TO GET build sheets by delivery ticket
--=======================================================
CREATE VIEW [dbo].[VW_GetDTBuildSheets]
AS
SELECT 
		ts.ToolStringId,
		ts.SerialNumber [SheetNumber],
		ts.[Description],
		ts.District [BranchPlant],
		ts.CreateDate,
		ts.Comments,
		UPPER(ts.[Type]) [Type],
		u.WFTUserName [CreatedBy],
		ts.ProductLineId,
		pl.Code [ProductLine],
		d.DispatchId,
		d.DispatchNumber
FROM	
ToolStrings (NOLOCK) ts
JOIN		JarRunTools (NOLOCK) jrt			ON jrt.ToolStringId = ts.ToolStringId
JOIN		Dispatches	(NOLOCK) d				ON d.DispatchId = jrt.JobId
LEFT JOIN	GLProductLines (NOLOCK) pl			ON pl.Id = ts.ProductLineId
LEFT JOIN	Users (NOLOCK) u					ON ts.CreateUserId = u.UserId
UNION
SELECT 
		ts.ToolStringId,
		ts.SerialNumber [SheetNumber],
		ts.[Description],
		ts.District [BranchPlant],
		ts.CreateDate,
		ts.Comments,
		UPPER(ts.[Type]) [Type],
		u.WFTUserName [CreatedBy],
		ts.ProductLineId,
		pl.Code [ProductLine],
		d.DispatchId,
		d.DispatchNumber
FROM	
ToolStrings (NOLOCK) ts
JOIN		JarRunTools (NOLOCK) jrt			ON jrt.ToolStringId = ts.ToolStringId
JOIN		Jobs	(NOLOCK) j					ON j.JobId = jrt.JobId
JOIN		Dispatches	(NOLOCK) d				ON d.DispatchNumber = j.DispatchNumber
LEFT JOIN	GLProductLines (NOLOCK) pl			ON pl.Id = ts.ProductLineId
LEFT JOIN	Users (NOLOCK) u					ON ts.CreateUserId = u.UserId
GO
/****** Object:  View [dbo].[vwHomePieCharts]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwHomePieCharts]
AS
SELECT
	j.Region,
	j.BranchPlant,
	j.Country,
	j.CustomerId,
	j.JobNumber,
	w.Well,
	r.RunNumber,
	r.EndDate OutHoleDate,
	i.IncidentNumber,
	i.FailureDate,
	Case When r.EndDate Is Null Then i.FailureDate Else r.EndDate End As DateFilter, 
	vfc.FailureType,
	vfc.FailureCategoryCode, vfc.FailureCategoryDesc,
	vfc.FailureSubCategoryCode, vfc.FailureSubCategoryDesc,
	vfc.FailureCode, vfc.FailureDesc,
	vfc.IsHistorical,
	r.HEL_LWD,
	r.HEL_EM,
	r.RSS,
	r.EM,
	r.PP,
	r.BECFIELD,
	r.GWD,
	r.GEOLINK,
	r.TENSOR,
	r.WPR,
	r.MOTOR,
	tsci.TFF,
	tsci.CSI,
	t.[Type] As ToolType
FROM Jobs j WITH(NOLOCK)
LEFT JOIN Wells w WITH(NOLOCK) ON w.JobID = j.JobID AND w.IsDeleted = 0
LEFT JOIN Runs r WITH(NOLOCK) ON r.WellID = w.WellID AND r.IsDeleted = 0
LEFT JOIN Incidents i WITH(NOLOCK) ON i.RunID = r.RunID AND i.IsDeleted = 0
LEFT JOIN ToolStringComponentInfo tsci WITH(NOLOCK) ON tsci.IncidentID = i.IncidentID
LEFT JOIN ToolStrings t WITH(NOLOCK) ON tsci.ToolStringID = t.ToolStringID
LEFT JOIN vwFailureCodes vfc ON tsci.CompFailureCodeID = vfc.FailureCodeID
WHERE j.IsDeleted = 0
AND tsci.CompFailureCodeID IS NOT NULL


GO
/****** Object:  View [dbo].[vwIncidentReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwIncidentReport]
AS
SELECT 
        j.JobNumber
        , w.WellID
        , w.Well
        , r.RunID
        , r.RunNumber
        , r.StartDate As InHoleDate
        , r.EndDate As OutHoleDate
        , i.IncidentNumber
        , i.FailureDate
        , tsci.ToolStringInfoID
        , t.SerialNumber As ToolString
        , tsci.FixedAssetID, a.SerialNum, i.IncidentID 
FROM Jobs j (NOLOCK)
LEFT JOIN Wells w (NOLOCK) ON w.JobID = j.JobID AND w.IsDeleted = 0
LEFT JOIN Runs r (NOLOCK) ON r.WellID = w.WellID AND r.IsDeleted = 0
LEFT JOIN Incidents i (NOLOCK) ON i.RunID = r.RunID AND i.IsDeleted = 0
LEFT JOIN ToolStringComponentInfo tsci (NOLOCK) ON tsci.RunID = r.RunID
LEFT JOIN ToolStrings t (NOLOCK) ON t.ToolStringID = tsci.ToolStringID
LEFT JOIN FixedAssets a (NOLOCK) ON a.FixedAssetID = tsci.FixedAssetID
WHERE i.IncidentNumber IS NOT NULL AND 
j.IsDeleted = 0
GO
/****** Object:  View [dbo].[VwJobNumSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[VwJobNumSearch]
AS
SELECT 
		j.JobID, 
		j.JobNumber, 
		cu.CustomerName, 
		CONVERT(VARCHAR, j.StartDate, 101) As StartDate, 
		CONVERT(VARCHAR, j.EndDate, 101) As EndDate, 
		j.ImportStatus As [Status], 
		dbo.fnJarRevStatus(j.JobID) As JarRevStatus, 
		j.BranchPlant, 
		(Select Count(JarRuns.RunNumber) From JarRuns Where JarRuns.RunNumber Is Not Null And JarRuns.JobId = j.JobId) As JarRunCnt
FROM	Jobs j LEFT JOIN Customers cu ON j.CustomerID = cu.CustomerID
WHERE	j.IsDeleted = 0 AND j.JobNumber <> ''
GO
/****** Object:  View [dbo].[vwAverageRunUploadDays]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=======================================================================
--MODIFIED BY : SUYEB MOHAMMAD
--MODIFED ON :  11 April 2017
--DESCRIPTION : To get average days to upload runs
--========================================================================
CREATE VIEW [dbo].[vwAverageRunUploadDays]
AS
SELECT
	r.RunID,
	b.branchplant [BranchPlantID],
	b.branchplant + ' - ' + b.CompanyName [Branchplant],
	b.Country,
	b.Region,
	j.JobNumber,
	w.Well,
	r.RunNumber,
	r.EndDate,
	r.DateAdded,
	CASE WHEN r.EndDate > r.dateadded THEN 0 ELSE DATEDIFF(day,r.EndDate,r.dateadded) END [DaystoUpload]
FROM Runs r
inner join Wells w on w.WellID = r.WellID
inner join JobS j on j.JobId = w.JobID
inner join BranchPlants b on b.BranchPlant = j.BranchPlant
WHERE r.EndDate is not null
GO
/****** Object:  UserDefinedFunction [dbo].[fnJobHistory]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fnJobHistory] (@toolStringId UNIQUEIDENTIFIER)
RETURNS TABLE
AS
RETURN
(
    SELECT 
				j.JobNumber [JobNumber],
				w.Well [WellName],
				r.RunNumber [RunNumber], 
				r.EndDate [OutHoleDate],
				r.OperHrs [OperatingHrs], 
				i.AcceptedLostTime [WFTNPT],
				dbo.ufnGetToolStatusforJobHistory(r.RunID, t.ToolStringId) AS [Status]  

	FROM		Jobs j 
	JOIN		Wells w ON w.JobID = j.JobId
	JOIN		Runs r ON r.WellID = w.WellID and r.IsDeleted = '0'
	LEFT JOIN	Incidents i ON i.RunID = r.RunID 
	JOIN		(
				SELECT		RunID,	t1.ToolStringId
				FROM		ToolStrings t1
				JOIN		ToolStringComponentInfo tc ON tc.ToolStringID = t1.ToolStringId
				GROUP BY	t1.ToolStringId,RunID
				) a
				ON a.RunID = r.RunID and a.ToolStringId = @toolStringId
	JOIN		ToolStrings t ON t.ToolStringId = a.ToolStringId

	--ORDER BY	j.JobNumber, r.RunNumber
)
GO
/****** Object:  View [dbo].[vwJobDTIntegration]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwJobDTIntegration]
AS
SELECT * 
FROM 
(	SELECT 
		ROW_NUMBER() OVER(PARTITION BY f.FixedAssetId ORDER BY f.FixedAssetId asc, d.DispatchNumber desc) [Index], 
		f.FixedAssetId
		,f.SerialNum
		,f.InventoryItemNum
		,f.EquipmentStatus
		,ps.[Status] AS StatusDesc
		,f.BranchPlant
		,bp.CompanyName AS BranchPlantDesc
		,f.Revision
		,d.DispatchNumber
		,f.LastComments
		,ISNULL(i.DescShort,i1.DescShort) AS AssetDescription
		, (CASE i.DefaultSerialProfile WHEN 'S' THEN 0 ELSE 1 END) AS IsBatch
		, dii.DateAdded AS DateReturn
		, a.Dateadded AS AIRTDateAdded
		,j.JobNumber
	FROM FixedAssets f (NOLOCK)
	INNER JOIN DispatchInstanceItems(NOLOCK) dii ON f.AssetNumber = dii.AssetNumber
	LEFT JOIN PartStatus(NOLOCK) ps ON ps.Code = f.EquipmentStatus
	LEFT JOIN BranchPlants(NOLOCK) bp on bp.BranchPlant = f.BranchPlant
	LEFT JOIN dbo.ItemNums(NOLOCK) i ON i.ItemNum = f.InventoryItemNum
	INNER JOIN DispatchInstances(NOLOCK) di ON di.DispatchInstanceId = dii.DispatchInstanceId
	INNER JOIN Dispatches(NOLOCK) d ON d.DispatchId = di.DispatchId
	LEFT JOIN ItemNums (NOLOCK) i1 ON i1.ItemNum=f.RNItemNum 
	LEFT JOIN Jobs(NOLOCK) j on j.DispatchNumber = d.DispatchNumber
	LEFT JOIN (
	SELECT fixedassetid, MAX(dateadded)[Dateadded]
	FROM AssetRepairTrack (NOLOCK)
	GROUP BY FixedAssetId) a ON f.FixedAssetId = a.FixedAssetId
	WHERE
	(f.EquipmentStatus = 'av' AND
	di.ShipType = 'dt-return') AND ISNULL(a.Dateadded,'2001-01-01') < dii.DateAdded 
) A
WHERE [Index] = 1

GO
/****** Object:  View [dbo].[vwJobImportStatusReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE VIEW [dbo].[vwJobImportStatusReport]
AS

SELECT j.JobId
, IsNull(dbo.fnJobImportStatus(j.JobId),'') As ImportStatus
, IsNull(j.ConfirmedClosed,0) As ConfirmedClosed
, IsNull(dbo.fnJarRevStatus(j.JobId),'') As JarStatus
, j.BranchPlant
, bp.CompanyName AS BranchPlantName
, d.DistrictDesc
, d.Country
, d.CountryDesc
, d.Region
, d.RegionDesc
, j.JobNumber
, cu.CustomerName
, cu.CustomerNumber
, j.StartDate As JobStartDate
, j.EndDate As JobEndDate
, ImportedRuns.LatestOutHoleDate
, IsNull(ImportedRuns.ImportedRunsTotal,0) As ImportedRunsTotal
, (Select IsNull(COUNT(i.IncidentNumber),0)
	From Incidents i WITH(NOLOCK)
	Left Join Runs r WITH(NOLOCK) On r.RunID = i.RunID And r.IsDeleted = 0
	Left Join Wells w WITH(NOLOCK) On w.WellID = r.WellID And w.IsDeleted = 0
	Where i.IsDeleted = 0
	And w.JobID = j.JobId
   ) As ImportedFailuresTotal
, (Select IsNull(MAX(jr.RunNumber),0)
	From JarRuns jr WITH(NOLOCK)
	Where IsNumeric(jr.RunNumber) = 1
	And jr.JobId = j.JobId
   ) As ForecastedTotalRuns
, (Select IsNull(COUNT(gfa.GFANumber),0)
	From GFAIncidents gfa WITH(NOLOCK)
	Where gfa.IsDeleted = 0
	And gfa.JobId = j.JobId
   ) as GFACnt
, j.Rig
, (Select Top 1 w.Well From Wells w (NOLOCK) WHERE w.JobID = j.JobId ) As Well
   
FROM Jobs j WITH(NOLOCK)
LEFT JOIN Districts d WITH(NOLOCK) ON d.District = j.BranchPlant
LEFT JOIN BranchPlants bp WITH(NOLOCK) ON bp.BranchPlant = j.BranchPlant
LEFT JOIN Customers cu WITH(NOLOCK) ON cu.CustomerId = j.CustomerId
LEFT JOIN
(
	Select w.JobId
	, MAX(r.EndDate) As LatestOutHoleDate
	, COUNT(r.RunNumber) As ImportedRunsTotal
	From Wells w WITH(NOLOCK)
	Left Join Runs r WITH(NOLOCK) On w.WellID = r.WellID And r.IsDeleted = 0
	Where w.IsDeleted = 0 And r.IsDownHole = 1
	Group By w.JobID
) As ImportedRuns ON ImportedRuns.JobId = j.JobId
WHERE j.IsDeleted = 0




GO
/****** Object:  View [dbo].[VwDailyData]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*          

****Daily Data****        
pull in records based upon import date         
*/          
CREATE VIEW [dbo].[VwDailyData]
AS
SELECT      
	 j.JobNumber,j.BranchPlant,j.Offshore,j.Rig,c.CustomerName,w.Well,
	 d.RunID, d.ActivityName, d.ActivityStart, d.ActivityEnd,r.RunNumber , d.ImportDate      
FROM Daily d       
	JOIN runs r ON r.runid = d.runid        
	JOIN wells w ON w.wellid = d.wellid            
	JOIN jobs j ON j.jobid = w.jobid        
	JOIN customers c ON c.CustomerId = j.CustomerId       
WHERE d.ImportDate  > '1-1-2020'        

GO
/****** Object:  Table [dbo].[GFAComponents]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GFAComponents](
	[GFAComponentId] [uniqueidentifier] NOT NULL,
	[GFAId] [uniqueidentifier] NOT NULL,
	[ToolStringId] [uniqueidentifier] NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[PartTypeId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[IncidentId] [uniqueidentifier] NULL,
	[NPT] [float] NULL,
	[TFF] [bit] NULL,
	[CI] [bit] NULL,
	[FieldSymptom] [varchar](200) NULL,
	[FailureDesc] [text] NULL,
	[CorrectiveAction] [varchar](3100) NULL,
	[Temp] [float] NULL,
	[TempUOM] [varchar](10) NULL,
 CONSTRAINT [PK_GFAComponents] PRIMARY KEY CLUSTERED 
(
	[GFAComponentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwGFAIncidents]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--==================================================================
--MODIFIED BY : SUYEB MOHAMMAD
--MODIFIED ON : 11 May 2017
--DESCRIPTION : Added Priority Code 
--===================================================================
CREATE VIEW [dbo].[vwGFAIncidents]
AS
SELECT 
	gfa.GFAId,
	gfa.GFANumber,
	r.Region,
	r.RegionDesc,
	cntry.Country,
	cntry.CountryDesc,
	b.BranchPlant,
	j.JobId,
	j.JobNumber,
	j.Field,
	j.Rig,
	j.JarWell,
	(CASE WHEN ISNULL(gfa.WellName, '') = '' THEN j.JarWell ELSE gfa.WellName END) as WellName,
	j.StartDate,
	j.EndDate,
	cmp.CustomerName,
	gfa.RunNumber,
	gfa.FailureDate,
	gfa.TFF,
	gfa.CI,
	gfa.FailureDesc,
	gfa.PossibleCauses,
	gfa.ProductLine,
	pl.GFAServiceLine as ProductLineDisplay,
	gfa.EmployeeId,
	gfa.CreateDate,
	DATEDIFF(d, gfa.FailureDate, gfa.CreateDate) AS DaysToReport,
	gfa.Disposition,
	gfa.NPT,
	gfa.Summary,
	gfa.Is3030,
	gfa.AcceptedFieldFailure,
	
	gfa.MaxTemp AS LastReportedTemp,
	gfa.MaxTempUOM AS LastReportedTempUOM,

	STUFF((SELECT ',' + pt.Name
	from GFAComponents ci WITH(NOLOCK)
	JOIN PartTypes pt ON pt.PartTypeId = ci.PartTypeId
	WHERE ci.GFAId = gfa.GFAId
	FOR XML PATH('')), 1, 1, '') AS ComponentNames,

	STUFF((SELECT ',' + cip.SerialNum
	FROM GFAComponents ci WITH(NOLOCK)
	JOIN FixedAssets cip on cip.FixedAssetId = ci.FixedAssetId
	WHERE ci.GFAID = gfa.GFAID
	FOR XML PATH('')), 1, 1, '') as ComponentSerialNums,

	(SELECT COUNT(1) FROM GFAIncidents gfa2 WITH(NOLOCK) JOIN jobs mj2 WITH(NOLOCK) ON mj2.JobId = gfa2.JobId WHERE mj2.JobId = j.JobId AND gfa2.IsDeleted = 0) AS GFACnt,	
	(SELECT COUNT(1) FROM Runs r WITH(NOLOCK) JOIN Wells w WITH(NOLOCK) ON r.WellID = w.WellID WHERE w.JobID = j.JobId AND w.IsDeleted = 0 AND r.IsDeleted = 0 AND r.IsDownhole = 1) AS RunCnt,
    (SELECT COUNT(1) FROM Incidents i WITH(NOLOCK) JOIN Runs r WITH(NOLOCK) ON r.RunID = i.RunID JOIN Wells w WITH(NOLOCK) ON r.WellID = w.WellID WHERE w.JobID = j.JobId AND w.IsDeleted = 0 AND r.IsDeleted = 0 AND i.IsDeleted = 0) AS IncidentCnt,
    
    gfa.CircHrs,
    gfa.RunCircHrs,
    gfa.TotalCircHrs,
	gfa.NCI,
	gfa.MudType,
	b.CompanyName as BranchPlantCompanyName,
	(CASE WHEN NPT > 0 AND NPT < = 24 THEN 3 WHEN NPT >  24 AND NPT<=72   THEN 2 WHEN NPT >  72 THEN 1 ELSE 0  END) AS PriorityCode
	
FROM GFAIncidents gfa WITH(NOLOCK)
	INNER JOIN Jobs j WITH(NOLOCK) ON j.JobId = gfa.JobId
	LEFT JOIN ProductLines pl WITH(NOLOCK) ON pl.SystemName = gfa.ProductLine
	LEFT JOIN Customers cmp WITH(NOLOCK) ON cmp.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants b WITH(NOLOCK) ON b.BranchPlant = j.BranchPlant
	LEFT JOIN Countries cntry WITH(NOLOCK) ON cntry.Country = j.Country
	LEFT JOIN Regions r WITH(NOLOCK) ON r.Region = j.Region
WHERE  
	j.IsDeleted=0 AND gfa.IsDeleted = 0
GO
/****** Object:  View [dbo].[VwToolsTiedToJob]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[VwToolsTiedToJob] AS
SELECT   j.JobNumber, ts.SerialNumber, 
	    i.ToolPanel, i.ToolCode, tf.SerialNum,
	    tf.ToolStringID ,tf.DateAdded  
FROM toolstrings ts       
	JOIN ToolStringFixedAssets tf ON tf.ToolStringID = ts.ToolStringId        
	LEFT JOIN itemnums i ON i.itemnum = tf.InventoryItemNum            
	JOIN JarRunTools jt ON jt.ToolStringId = ts.ToolStringId           
	JOIN jobs j ON j.JobId = jt.JobId       
WHERE j.JobNumber in             
(           
       SELECT DISTINCT(jobnumber)
             FROM Daily d
       JOIN wells w ON w.wellid = d.wellid     
       JOIN jobs j ON j.jobid = w.jobid 
       WHERE d.ImportDate  > '1-1-2020' 
)          


GO
/****** Object:  View [dbo].[vwWptsHdrProfile]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwWptsHdrProfile] AS
SELECT j.JobId
, j.JobNumber as JobNo
, j.JobNumber as DocNo
, j.DispatchNumber
, j.ReportId
, CONVERT(VARCHAR, j.StartDate, 101) + ' 00:00:00' As JobStart
, CONVERT(VARCHAR, ISNULL(j.EndDate, j.EstDays), 101) + ' 00:00:00' As JobEnd
, cu.CustomerName As CustomerID
, j.LocationCountry + ', ' + j.LocationState + ', ' + j.LocationCounty As Location
, bp.WptsWFDLocationId As WFDLocationID
, bp.WptsRegionID As RegionID
, bp.WptsCountryID As CountryID
, w.Well as WellName
, j.Field
, w.APIUWIWellLicense
, '' [WellLatitude] --j.Latitude as WellLatitude
, '' [WellLongitude]--j.Longitude as WellLongitude
, j.LocationCountry
, j.RigName
, j.Rig
--, j.RigType
, '83' as RigTypeID
, '91' as WellClassID
, dbo.LengthConvert(w.GroundLevel, w.GroundLevelUOM, 'ft') As GroundLevel
, j.ClientAFE + ', ' + j.ClientPO + ', ' + j.ClientWO As CustOrderNo
, j.PadProjectName
--, reg.RegionDesc As Region
--, co.CountryDesc As Country
--, reg.RegionDesc As Area
, bp.CompanyName As BranchPlantDesc
, r.StartDate As InHoleDate
, r.EndDate As OutHoleDate
, '79' As BusinessUnitID
, '348' As PLineID
, '158' As OperationID
, CASE WHEN dbo.NumCheck(w.TieOnInc) >= 0.0 AND dbo.NumCheck(w.TieOnInc) <= 5.0 THEN '2440'
	WHEN dbo.NumCheck(w.TieOnInc) > 5.0 and dbo.NumCheck(w.TieOnInc) <= 30.0 THEN '2441'
	WHEN dbo.NumCheck(w.TieOnInc) > 30.0 and dbo.NumCheck(w.TieOnInc) <= 80.0 THEN '2442'
	WHEN dbo.NumCheck(w.TieOnInc) > 80.0 THEN '2443'
	ELSE NULL END As InclinationID
, CASE WHEN j.JarReservoirType  = 'GAS' THEN '61'
	WHEN j.JarReservoirType = 'OIL' THEN '62'
	ELSE NULL END As ResTypeID
, dbo.LengthConvert(r.MDEnd,r.MDEndUOM,'ft') As WellDepth
, dbo.LengthConvert(r.TVDEnd,r.TVDEndUOM,'ft') As WellDepthTVD
, dbo.LengthConvert(w.WaterDepth,w.WaterDepthUOM,'ft') As WaterDepth
, Case When j.Offshore = 1 Then Cast(dbo.LengthConvert(w.WaterDepth,w.WaterDepthUOM,'ft') as varchar(30)) Else 'Land' End As WellLocationID
, '25687' As WorkString
FROM Jobs j 
LEFT JOIN Regions reg ON reg.Region = j.Region
LEFT JOIN Countries co ON co.Country = j.Country
LEFT JOIN BranchPlants bp ON bp.BranchPlant = j.BranchPlant
LEFT JOIN Customers cu ON cu.CustomerId = j.CustomerId
LEFT JOIN Wells w ON w.JobID = j.JobID AND w.IsDeleted = 0
LEFT JOIN Runs r ON r.WellID = w.WellID AND r.IsDeleted = 0 --AND r.IsDownhole = 1
WHERE j.IsDeleted = 0
GO
/****** Object:  View [dbo].[vwWptsJobPerformance]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwWptsJobPerformance] AS
SELECT 
	JobNumber
	, Sum(OperHrs) As TotalOpHours
	, Sum(AcceptedLostTime) As WFTNPTHours
	, Max(CI) As CustomerImpacted
	, Max(IsGFA) As GFA
FROM 
(SELECT
	j.JobNumber
	, w.Well
	, r.RunNumber
	, dbo.NumCheck(r.OperHrs) As OperHrs
	, ISNULL(i.AcceptedLostTime, 0) as AcceptedLostTime
	, Max(Cast(tsci.CSI as tinyint)) As CI
	, Case When Max(gfa.GFANumber) Is Null Then 0 Else 1 End As IsGFA
FROM Jobs j WITH(NOLOCK)
LEFT JOIN Wells w WITH(NOLOCK) ON w.JobID = j.JobID AND w.IsDeleted = 0
LEFT JOIN Runs r WITH(NOLOCK) ON r.WellID = w.WellID AND r.IsDeleted = 0 --AND r.IsDownhole = 1
LEFT JOIN Incidents i WITH(NOLOCK) ON i.RunID = r.RunID AND i.IsDeleted = 0
LEFT JOIN GFAIncidents gfa WITH(NOLOCK) ON gfa.IncidentID = i.IncidentID
LEFT JOIN ToolStringComponentInfo tsci WITH(NOLOCK) ON tsci.RunID = r.RunID
WHERE j.IsDeleted = 0
GROUP BY j.JobNumber, w.Well, r.RunNumber, r.OperHrs, i.AcceptedLostTime
) AS #TMP
GROUP BY JobNumber

GO
/****** Object:  View [dbo].[vwdownhole2Tools]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--===================================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 22 June 2015
--DESCRIPTION: To get downholetools data for WPTS
--===================================================================
CREATE VIEW [dbo].[vwdownhole2Tools]
AS

SELECT
  j.JobNumber,
  r.[RunNumber],
  j.[ReportID],
  ts.type AS [TemplateName],
  t.[ToolStringInfoID],
  t.[FixedAssetID],
  f.[AssetNumber] [AssetNumber],
  t.[SerialNum],
  t.[RNItemNum],
  t.[InventoryItemNum],
  ISNULL([AssetDescription],'') AS [DescShort],
  t.[RunID],
  t.[CumulativeValveCycles],
  t.[FailureDesc],
  t.[IsUsed],
  t.[CorrectiveAction],
  t.[FieldSymptom],
  t.[LostTime],
  t.[TFF],
  t.[CSI],
  t.[NCI],
  t.[OS],
  t.[PR],
  t.[FA],
  t.[RC],
  t.[CN],
  t.[IncidentDate],
  t.[CompFailureCodeId] AS [CompFailureCode],
  t.[OutOfSpecCodeID],
  t.[ProceduralCodeID],
  t.[FailedNonPartName],
  t.[Revision],
  t.[ToolCode],
  t.[MasterFirmwareRevision],
  t.[FailedNonPartType]
FROM ToolStringComponentInfo t (NOLOCK)
LEFT JOIN ToolStrings ts WITH (NOLOCK) ON ts.ToolStringId = t.ToolStringID
LEFT JOIN dbo.Runs(NOLOCK) r ON t.RunID = r.RunID
LEFT JOIN dbo.Wells(NOLOCK) w ON w.WellID = r.WellID
LEFT JOIN dbo.Jobs(NOLOCK) j ON j.JobId = w.JobId
LEFT JOIN dbo.FixedAssets (NOLOCK) f ON f.FixedAssetId = t.FixedAssetId




GO
/****** Object:  Table [dbo].[ComponentProperties]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ComponentProperties](
	[ComponentPropertyID] [uniqueidentifier] NOT NULL,
	[ToolStringID] [uniqueidentifier] NULL,
	[FixedAssetID] [uniqueidentifier] NOT NULL,
	[PartTypePropertyID] [uniqueidentifier] NULL,
	[Property] [varchar](200) NOT NULL,
	[PropertyValue] [varchar](250) NULL,
	[ToolStringFixedAssetsId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_ComponentProperties] PRIMARY KEY CLUSTERED 
(
	[ComponentPropertyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PartTypeProperties]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PartTypeProperties](
	[PartTypePropertyID] [uniqueidentifier] NOT NULL,
	[PartTypeID] [int] NOT NULL,
	[Property] [varchar](50) NOT NULL,
	[DefaultValue] [varchar](250) NULL,
	[SortOrder] [tinyint] NULL,
	[IsRequired] [bit] NOT NULL,
 CONSTRAINT [PK_PartTypeProperties] PRIMARY KEY CLUSTERED 
(
	[PartTypePropertyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwToolSheet]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=======================================================
--MODIFIED BY: SUYEB MOHAMMAD
--MODIFIED ON : 19 May 2016
--DESCRIPTION: Replaced JarRunTool table by JobToolStringsMapping table to get JobNumber mapped agianst ToolStrings
--=======================================================
--TFS 76819: SACHIN MHALUNGEKAR - 25 June 2020 - ADDED ProductLineId, ToolCodes, ItemNums, TemplateId, MasterTemplateId
--=======================================================
CREATE VIEW [dbo].[vwToolSheet] 
AS
 SELECT NEWID() Id
, t.ToolStringID
, t.SerialNumber as ToolString
, t.[Description] as ToolStringDesc
, CONVERT(VARCHAR, t.CreateDate, 107) As CreateDate
, t.CreatedBy
, t.CreateUserID
, CASE UPPER(ISNULL(t.[Type],'')) 
	WHEN 'EM' THEN 'EM/HYPERPULSE'
	WHEN 'PP' THEN 'EM/HYPERPULSE' ELSE UPPER(ISNULL(t.[Type],'')) END  As ToolType
, t.District
, t.BuildNumber
, t.ToolMod
, t.[CheckSum]
, t.SizeID as ToolSizeID
, (Select ShortName From ToolStringSize Where ToolSizeID = t.SizeID) As ToolSize
, t.ToolYear
, t.Disassembled
, CONVERT(VARCHAR, t.DisassembledDate, 107) as DisassembledDate
, t.EDP
, t.Comments As ToolStringComments
, t.KitNumber
, t.IsTurnaround
, t.MotorType
, t.MotorProperty
, t.MotorSerial
, t.IsDeleted as TSIsDeleted
, u.FirstName + ' ' + u.LastName as Technician
, CONVERT(VARCHAR, t.UpdateDate, 107) As LastUpdated
, u2.FirstName + ' ' + u2.LastName as UpdateUser
, dbo.udf_GetJobIds(t.ToolStringId) As JobId
, dbo.udf_GetJobNumbers(t.ToolStringId) As JobNumber
, (select top 1 c.CustomerName
	from JarRunTools jrt join Jobs j on j.JobId = jrt.JobId join Customers c on c.CustomerId = j.CustomerId
	where j.IsDeleted = 0 and jrt.ToolStringId = t.ToolStringId order by j.StartDate Desc) As CustomerName
, ta.ToolStringFixedAssetsId
, ta.FixedAssetID
, ta.SerialNum
, ta.RNItemNum
, ta.InventoryItemNum
, ta.Revision
, ta.ToolCode
, ISNULL(rn.DescShort,inv.DescShort) As AssetDescription
, pt.PartTypeID
, pt.[Name]
, pt.ShortName
, ta.MasterFirmwareRevision
, fw.DescShort As MasterFirmwareShortDesc
, ta.CustomProperty
, pt.Occurrence
, ta.OrderPosition
, ta.SortNumber
, cp.ComponentPropertyID
, cp.PartTypePropertyID
, cp.[Property]
, cp.PropertyValue
, Case When ptp.SortOrder IS NULL THEN 99 Else ptp.SortOrder End As SortOrder
, ptp.IsRequired
, a.AssetLifeRemaining
, a.EquipmentStatus
, ps.Status [AssetStatus]
, ISNULL(ps.IsDisposed, 0) As IsDisposed
, t.ProductLineId
, dbo.udf_GetToolStringFixedAssetAttributes(ta.ToolStringFixedAssetsId, 1) As ToolCodes
, dbo.udf_GetToolStringFixedAssetAttributes(ta.ToolStringFixedAssetsId, 2) As ItemNums
, t.TemplateId
, t.MasterTemplateID
, t.Description
, ta.Description [TemplateMapDescription]
, dbo.udf_IsAIRTOrDTAssigned(ta.SerialNum, ta.InventoryItemNum) As IsAIRTOrDTAssigned
, (SELECT TOP 1 ArtNumber FROM AssetRepairTrack WHERE FixedAssetId =  a.FixedAssetId ORDER BY DateAdded DESC) AS ArtNumber
, ta.ContainerId
, ta.Comments
, t.Name As BuildSheetName
FROM ToolStrings t WITH (NOLOCK)
LEFT JOIN Users u WITH (NOLOCK) ON u.UserID = t.CreateUserID
LEFT JOIN Users u2 WITH (NOLOCK) ON u2.UserID = t.UpdateUserID
LEFT JOIN ToolStringFixedAssets ta WITH (NOLOCK) ON ta.ToolStringID = t.ToolStringID
LEFT JOIN FixedAssets a WITH (NOLOCK) ON ta.FixedAssetID != '00000000-0000-0000-0000-000000000000' AND a.FixedAssetId = ta.FixedAssetID
LEFT JOIN PartStatus ps WITH (NOLOCK) ON ps.Code = a.EquipmentStatus
LEFT JOIN ItemNums fw WITH (NOLOCK) ON fw.ItemNum = a.MasterFirmwareItemNum
LEFT JOIN ItemNums rn WITH (NOLOCK) ON rn.ItemNum = ta.RNItemNum
LEFT JOIN ItemNums inv WITH (NOLOCK) ON inv.ItemNum = ta.InventoryItemNum
LEFT JOIN PartTypes pt WITH (NOLOCK) ON pt.PartTypeID = ta.PartTypeID
LEFT JOIN ComponentProperties cp WITH (NOLOCK) ON cp.ToolStringID = ta.ToolStringID AND cp.ToolStringFixedAssetsId = ta.ToolStringFixedAssetsId
LEFT JOIN PartTypeProperties ptp WITH (NOLOCK) ON ptp.PartTypePropertyID = cp.PartTypePropertyID
WHERE t.CreatedBy = 0
AND t.IsDeleted = 0

GO
/****** Object:  View [dbo].[VWCpar]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW  [dbo].[VWCpar]
AS

SELECT j.DispatchNumber,JobNumber,r.RunNumber,FORMAT(r.EndDate,'d','en-US') as EndDate, 
		i.CPARId,
		tc.CompFailureCodeID,a.FailureCodeId,
		a.AssetRepairTrackId,a.FixedAssetId
FROM AssetRepairTrack(NOLOCK) a
JOIN jobs(NOLOCK) j on j.DispatchNumber = a.DispatchNumber
JOIN wells(NOLOCK) w on w.jobid = j.jobid
JOIN runs(NOLOCK) r on r.wellid = w.wellid
JOIN ToolStringComponentInfo(NOLOCK) tc on tc.runid = r.runid and tc.FixedAssetID = a.FixedAssetId 
JOIN Incidents(NOLOCK) i on i.runid = r.runid





GO
/****** Object:  View [dbo].[vwJarRunToolFixedAssets]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwJarRunToolFixedAssets]
AS
SELECT f.ToolStringFixedAssetsId,
		jrt.JobId,
		f.ToolStringID,
		t.SerialNumber AS ToolString,
		f.PartTypeID,
		p.Name AS PartTypeName,
		t.Type AS ToolType,
		f.FixedAssetID,
		f.SerialNum, 
		f.RNItemNum,
		f.Revision,
		f.InventoryItemNum, 
		i.DescShort,
		t.IsDeleted,
		t.Disassembled
FROM dbo.ToolStringFixedAssets (NOLOCK) f
INNER JOIN JarRunTools (NOLOCK) jrt ON jrt.ToolStringId = f.ToolStringID
INNER JOIN ToolStrings (NOLOCK) t ON t.ToolStringId = f.ToolStringID
LEFT JOIN dbo.ItemNums (NOLOCK) i ON i.ItemNum = f.InventoryItemNum
LEFT JOIN PartTypes (NOLOCK) p ON p.PartTypeId = f.PartTypeID


GO
/****** Object:  View [dbo].[vwJarRunTools]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwJarRunTools] AS
SELECT 
	jrt.JarRunToolId
	, jrt.JobId
	, jrt.JarRunId
	, jr.RunNumber
	, jrt.ToolStringId
	, ts.SerialNumber as ToolString
	, ts.Type as ToolType
	, ts.SizeId
	, tss.ShortName as SizeShortName
	, ISNULL(jrt.IsBackup, 0) As IsBackup
	, jrt.DateShipped
	, jrt.DateReturned
	, ts.CheckSum
FROM JarRunTools jrt WITH(NOLOCK)
LEFT JOIN JarRuns jr ON jr.JarRunId = jrt.JarRunId
LEFT JOIN ToolStrings ts WITH(NOLOCK) on ts.ToolStringId = jrt.ToolStringId
LEFT JOIN ToolStringSize tss WITH(NOLOCK) on tss.ToolSizeID = ts.SizeId




GO
/****** Object:  View [dbo].[vwJarJobToolPanelToolCode]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vwJarJobToolPanelToolCode] AS


SELECT NEWID() AS RowId, JobId, ToolPanel, ToolCode
FROM (

SELECT jr.JobId,
		ISNULL(i.ToolPanel, '') as ToolPanel,
		ISNULL(i.ToolCode, '') as ToolCode
FROM JarRunForecastTools jts WITH(NOLOCK)
LEFT OUTER JOIN JarRuns jr WITH(NOLOCK) ON jr.JarRunId = jts.JarRunId
INNER JOIN ItemNumConfigs inc WITH(NOLOCK) ON inc.ItemNumConfigId = jts.ItemNumConfigId 
INNER JOIN ItemNumConfigs inci WITH(NOLOCK) ON inci.ParentItemNum = inc.ItemNum AND ISNULL(inci.ToolSizeID, -1) = ISNULL(inc.ToolSizeID, -1) AND inci.IsToolString = 1
INNER JOIN ItemNums i WITH(NOLOCK) on i.ItemNum = inci.ItemNum

UNION 

SELECT jrt.JobId,
	ISNULL(i.ToolPanel, '') as ToolPanel,
	ISNULL(i.ToolCode, '') as ToolCode
FROM JarRunTools jrt WITH(NOLOCK)
LEFT OUTER JOIN JarRuns jr WITH(NOLOCK) ON jr.JarRunId = jrt.JarRunId
INNER JOIN ToolStringFixedAssets tsfa WITH(NOLOCK) ON tsfa.ToolStringId = jrt.ToolStringId
INNER JOIN ItemNums i WITH(NOLOCK) on i.ItemNum = tsfa.InventoryItemNum

UNION

SELECT w.JobID as JobId,
		ISNULL(i.ToolPanel, '') as ToolPanel,
		ISNULL(i.ToolCode, '') as ToolCode
from ToolStringComponentInfo tsci WITH(NOLOCK)
LEFT OUTER JOIN Runs r WITH(NOLOCK) on r.RunID = tsci.RunID
LEFT OUTER JOIN Wells w WITH(NOLOCK) on w.WellID = r.WellID
LEFT OUTER JOIN ItemNums i WITH(NOLOCK) on i.ItemNum = tsci.InventoryItemNum

) Result



GO
/****** Object:  View [dbo].[VwPFTWOSeqFormFields]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[VwPFTWOSeqFormFields]
AS
SELECT        PSeq.PFTWOId, 
              PSeq.PFTWOSeqId, 
			  PSeq.Seq, 
			  PSeq.SeqName, 
			  Pobj.Name, 
			  PSeq.PFTConfigSeqId,
			  SeqField.Result, 
			  IsNull(Pobj.Field7,'-') AS FormField1, 
			  IsNull(SeqField.TextResult1,'-') AS FormField1Actuals, 
			  IsNull(Pobj.Field8,'-') AS FormField2, 
              IsNull(SeqField.TextResult2,'-') AS FormField2Actuals, 
			  IsNull(Pobj.Field9,'-') AS FormField3, 
			  IsNull(SeqField.TextResult3,'-') AS FormField3Actulas, 
			  IsNull(SO.OptionLabel,'-') AS UOM, 
			  SO.OptionValue AS UOMId,
			  PWO.PFTType
FROM            dbo.vwPFTWOSeq AS PSeq INNER JOIN
                dbo.PFTWO PWO on PSeq.PFTWOId= PWO.PFTWOId INNER JOIN
                dbo.PFTWOSeqFields AS SeqField ON PSeq.PFTWOSeqId = SeqField.PFTWOSeqId INNER JOIN
                dbo.PFTObjects AS Pobj ON SeqField.ObjectId = Pobj.ObjectId LEFT JOIN
                dbo.SelectOptions AS SO ON SeqField.UOM = SO.OptionValue and SO.SelectName = 'FormFieldUOM'


GO
/****** Object:  Table [dbo].[RequestFormDetailSources]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RequestFormDetailSources](
	[RequestFormDetailSourceId] [int] IDENTITY(1,1) NOT NULL,
	[RequestFormDetailId] [int] NOT NULL,
	[SourceBranchPlant] [varchar](12) NOT NULL,
	[Quantity] [int] NULL,
 CONSTRAINT [PK_RequestFormDetailSource] PRIMARY KEY CLUSTERED 
(
	[RequestFormDetailSourceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwRequestFormDetailSources]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwRequestFormDetailSources] as
select r.RequestFormId,s.RequestFormDetailSourceId,s.RequestFormDetailId,
s.SourceBranchPlant,s.Quantity
from RequestForms r (NOLOCK)
inner join RequestFormDetails d (NOLOCK) on r.RequestFormId = d.RequestFormId
inner join RequestFormDetailSources s (NOLOCK) on d.RequestFormDetailId = s.RequestFormDetailId

GO
/****** Object:  View [dbo].[vwDispatchInstanceItems]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwDispatchInstanceItems]
AS

SELECT dii.DispatchInstanceItemId, dii.DispatchInstanceId, dii.LineNumber, dii.AssetNumber, dii.SerialNum
		,dii.ItemNum, dii.Description, dii.Revision, dii.QtyShipped, dii.TopConnection, dii.BottomConnection
		,dii.DateAdded, dii.QtyReturned, dii.DateReturned
		,di.DispatchId, di.SequenceNum, di.ShipTo, di.ShipType, di.DateShipped, di.DateDelivered, dii.ToolStringId
		,fa.FixedAssetId, dii.RNItemNum
		, di.InvoiceSequenceNum, dii.QtySold, dii.AmountExtendedPrice, dii.TrxnCurrency, dii.BaseCurrency, dii.DateBilled
		, dii.ParentId
		, dii.ReturnToBranchPlant, dii.AIRTBranchPlant
		, fa.BranchPlant AS FixedAssetBranchPlant
		, bp.CompanyName AS FixedAssetBranchPlantCompanyName
		, fa.ParentFixedAssetId
		, dii.Size
		, dii.Condition
		, dii.ReasonCode
		, dii.JDETxnNum
		, dii.ForeignExtendedPrice
		, dii.Comments
		, CASE i.DefaultSerialProfile WHEN 'S' THEN 0 ELSE 1 END AS IsBatch
		, ts.Type as ToolType
		, IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) AS IsAsset
		, ErrorMessage
		, fa.EquipmentStatus
		, CASE WHEN di.ShipType='DT-SEQ-ADD' THEN CONVERT(date, CONVERT(varchar(10), di.DateShipped,101),101)
		  WHEN di.ShipType='DT-RETURN' THEN CONVERT(date, CONVERT(varchar(10), dii.DateReturned,101),101) ELSE CONVERT(date, CONVERT(varchar(10), dii.DateReturned,101),101) END AS TransactionDate
FROM dbo.DispatchInstanceItems (NOLOCK) dii
LEFT OUTER JOIN dbo.DispatchInstances (NOLOCK) di ON di.DispatchInstanceId = dii.DispatchInstanceId
LEFT JOIN dbo.FixedAssets (NOLOCK) fa ON fa.AssetNumber = dii.AssetNumber
LEFT JOIN dbo.BranchPlants (NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
LEFT JOIN dbo.ItemNums (NOLOCK) i ON i.ItemNum = dii.ItemNum
LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = dii.RNItemNum
LEFT JOIN ToolStrings (NOLOCK) ts ON ts.ToolStringId = dii.ToolStringId








GO
/****** Object:  View [dbo].[vwDTBSComparison]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--CREATED BY :SUYEB MOHAMMAD
--CREATED ON :13 Oct 2015
--DESCRIPTION:To get count for DT/BS for RNs
--===================================================================================================

CREATE View [dbo].[vwDTBSComparison]
AS

SELECT  ROW_Number() OVER (ORDER BY [Years]) AS [Id], [Region], [District], CONVERT(DATETIME, [DateRange]) AS [DateRange],
		[Years], [Months], SUM(BS) AS [BSCount], SUM(DT) AS [DTCount],( [Region] + '-' + CONVERT(VARCHAR,[Years]) + '-' + CONVERT(VARCHAR,[Months]))  AS  [MonthYear]
FROM

(
SELECT	region, b.BranchPlant AS [District], STUFF(Convert(Date,dii.dateadded),9, 2, '01') AS [DateRange], YEAR(dii.dateadded) AS [Years], 
		MONTH(dii.dateadded) AS [Months], COUNT(serialnum) AS DT, 0 AS BS
FROM	Dispatches(NOLOCK) d
		LEFT JOIN DispatchInstances(NOLOCK) di ON di.DispatchId = d.DispatchId
		LEFT JOIN DispatchInstanceItems(NOLOCK) dii ON dii.DispatchInstanceId = di.DispatchInstanceId
		LEFT JOIN BranchPlants(NOLOCK) b ON b.BranchPlant = d.BranchPlant
		LEFT JOIN ItemNums(NOLOCK) i ON i.ItemNum = dii.ItemNum
WHERE	di.ShipType = 'DT-SEQ-ADD' and i.IsAsset = '1'
GROUP BY b.region, YEAR(dii.dateadded), MONTH(dii.dateadded), b.BranchPlant, CONVERT(date, dii.dateadded)

UNION  

SELECT	region, b.BranchPlant AS [District], STUFF(Convert(Date,t.CreateDate),9, 2, '01') AS [DateRange],
		YEAR(t.CreateDate) AS [Years], MONTH(t.CreateDate) AS [Months], 0 AS [DT], COUNT(tf.SerialNum) AS [BS]
FROM	toolstrings(NOLOCK) t
		LEFT JOIN toolstringfixedassets(NOLOCK) tf ON tf.ToolStringID = t.ToolStringId
		LEFT JOIN BranchPlants(NOLOCK) b ON b.BranchPlant = t.District
		LEFT JOIN ItemNums(NOLOCK) i ON i.ItemNum = tf.InventoryItemNum
WHERE	i.IsAsset = '1'
GROUP BY b.region, YEAR(t.CreateDate), MONTH(t.CreateDate), b.BranchPlant,CONVERT(date, t.CreateDate)) CT

GROUP BY [Years], [Months], [Region], [District], [DateRange]



GO
/****** Object:  View [dbo].[vwDispatchInstanceItemInvoiceSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwDispatchInstanceItemInvoiceSearch]
AS
SELECT
	dii.DispatchInstanceItemId,  
	dis.DispatchId,
	dis.DispatchNumber,
	di.DispatchInstanceId,
	di.InvoiceSequenceNum,
	dii.LineNumber,
	r.RegionDesc as Region, 
	c.CountryDesc as Country, 
	dis.BranchPlant, 
	bp.CompanyName,
	dii.AssetNumber, 
	dii.SerialNum,
	dii.ItemNum,
	i.DescShort as Description,
	dii.Revision,
	dii.DateBilled ,
	dii.AmountExtendedPrice,
	dii.TrxnCurrency,
	dii.BaseCurrency,
	dbo.fnGetUSDConversionFactor(dii.trxnCurrency, dii.DateBilled) as Rate,
	dii.AmountExtendedPrice * dbo.fnGetUSDConversionFactor(dii.trxnCurrency, dii.DateBilled) as USDCost,
	'USD' AS CurrShortName	
FROM Dispatches dis (NOLOCK) 
INNER JOIN DispatchInstances di (NOLOCK) ON dis.DispatchId = di.DispatchId  
INNER JOIN DispatchInstanceItems dii (NOLOCK) ON dii.DispatchInstanceId = di.DispatchInstanceId
left join ItemNums i on i.ItemNum = dii.ItemNum
LEFT OUTER JOIN BranchPlants bp (NOLOCK) ON bp.BranchPlant = dis.BranchPlant
LEFT OUTER JOIN Regions r (NOLOCK) ON r.Region = bp.Region
LEFT OUTER JOIN Countries c (NOLOCK) ON c.Country = bp.Country 
WHERE di.ShipType = 'DT-INVOICE'

GO
/****** Object:  View [dbo].[vwDispatchInstanceDiscrepancies]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwDispatchInstanceDiscrepancies]
AS

-- Missing Assets on JDE Delivery Ticket Sequence(found in Build/Load Out Sheets)
select 
	d.DispatchNumber,
	dii.DispatchInstanceItemId, 
	dii.DispatchInstanceId, 
	di.DispatchId, 
	(Select ToolStringId from DispatchInstanceItems(NOLOCK) pDii where pDii.DispatchInstanceItemId=dii.ParentId) 
		as ToolStringId,
	dii.SerialNum, dii.RNItemNum, dii.ItemNum, dii.Revision, dii.FixedAssetId, 
	(Select SerialNum from DispatchInstanceItems pDii(NOLOCK) where pDii.DispatchInstanceItemId=dii.ParentId) 
		as ToolStringSerialNum,
	dii.Description, di.SequenceNum, 1 as MissingInJDESequence, 0 as MissingInBOS
from DispatchInstanceItems (NOLOCK) dii
JOIN DispatchInstances (NOLOCK) di on di.DispatchInstanceId = dii.DispatchInstanceId
JOIN Dispatches (NOLOCK) d ON d.DispatchId = di.DispatchId
where dii.ToolStringId is null and dii.ParentId is not null 
and dii.SerialNum not in (
	select dii2.SerialNum
	from DispatchInstanceItems (NOLOCK) dii2
	left join DispatchInstances (NOLOCK) di2 on di2.DispatchInstanceId = dii2.DispatchInstanceId
	where di2.DispatchId = di.DispatchId --and di2.DispatchInstanceId = di.DispatchInstanceId
	and dii2.ToolStringId is null and dii2.ParentId is null)

union all

-- Missing Assets on Build/Load Out Sheets(found in JDE Delivery Ticket Sequence)
select d.DispatchNumber, 
	dii.DispatchInstanceItemId, 
	dii.DispatchInstanceId, 
	di.DispatchId, 
	dii.ToolStringId,
	dii.SerialNum, 
	dii.RNItemNum, 
	dii.ItemNum, 
	dii.Revision, 
	dii.FixedAssetId, 
	'' as ToolStringSerialNum,
	dii.Description, 
	di.SequenceNum, 0 as MissingInJDESequence, 
	1 as MissingInBOS
from DispatchInstanceItems (NOLOCK) dii
JOIN DispatchInstances (NOLOCK) di on di.DispatchInstanceId = dii.DispatchInstanceId
JOIN Dispatches (NOLOCK) d ON d.DispatchId = di.DispatchId
where dii.ToolStringId is null and ParentId is null 
and dii.SerialNum not in (
	select dii2.SerialNum
	from DispatchInstanceItems (NOLOCK) dii2
	left join DispatchInstances (NOLOCK) di2 on di2.DispatchInstanceId = dii2.DispatchInstanceId
	where di2.DispatchId = di.DispatchId --and di2.DispatchInstanceId = di.DispatchInstanceId
	and dii2.ToolStringId is null and dii2.ParentId is not null)
GO
/****** Object:  View [dbo].[vwMatchedDIDiscrepancies]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwMatchedDIDiscrepancies]
AS

-- Matched Assets(found in both JDE Delivery Ticket Sequence and Build/Load Out Sheets)

Select NEWID() as RowId, DispatchId, DispatchInstanceId, SerialNum, ItemNum, RNItemNum, Revision, Description, SequenceNum, ToolStringId, ToolStringSerialNum
	, RANK() OVER(PARTITION BY DispatchId, SerialNum ORDER by SequenceNum) AS RowRank 
from (
select di.DispatchId, dii.DispatchInstanceId, SerialNum, ItemNum, RNItemNum, Revision, Description, SequenceNum
	,(Select ToolStringId from DispatchInstanceItems(NOLOCK) pDii where pDii.DispatchInstanceItemId = dii.ParentId) as ToolStringId
	,(Select SerialNum from DispatchInstanceItems(NOLOCK) pDii where pDii.DispatchInstanceItemId = dii.ParentId) as ToolStringSerialNum
from DispatchInstanceItems (NOLOCK) dii
left join DispatchInstances (NOLOCK) di on di.DispatchInstanceId = dii.DispatchInstanceId
where dii.ToolStringId is null and dii.ParentId is not null and dii.QtyShipped > 0
and dii.SerialNum in (
	select dii2.SerialNum
	from DispatchInstanceItems (NOLOCK) dii2
	left join DispatchInstances (NOLOCK) di2 on di2.DispatchInstanceId = dii2.DispatchInstanceId
	where di2.DispatchId = di.DispatchId --and di2.DispatchInstanceId = di.DispatchInstanceId
	and dii2.ToolStringId is null and dii2.ParentId is null
)

union

select di.DispatchId, dii.DispatchInstanceId, SerialNum, ItemNum, RNItemNum, Revision, Description, SequenceNum
	,(Select ToolStringId from DispatchInstanceItems(NOLOCK) pDii where pDii.DispatchInstanceItemId = dii.ParentId) as ToolStringId
	,(Select SerialNum from DispatchInstanceItems(NOLOCK) pDii where pDii.DispatchInstanceItemId = dii.ParentId) as ToolStringSerialNum
from DispatchInstanceItems (NOLOCK) dii
left join DispatchInstances (NOLOCK) di on di.DispatchInstanceId = dii.DispatchInstanceId
where dii.ToolStringId is null and ParentId is null  and dii.QtyShipped > 0
and dii.SerialNum in (
	select dii2.SerialNum
	from DispatchInstanceItems (NOLOCK) dii2
	left join DispatchInstances (NOLOCK) di2 on di2.DispatchInstanceId = dii2.DispatchInstanceId
	where di2.DispatchId = di.DispatchId --and di2.DispatchInstanceId = di.DispatchInstanceId
	and dii2.ToolStringId is null and dii2.ParentId is not null)
) a



GO
/****** Object:  View [dbo].[vwDispatchInstanceDescrepancies]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwDispatchInstanceDescrepancies]
AS

-- Missing Assets on JDE Delivery Ticket Sequence(found in Build/Load Out Sheets)
select dii.DispatchInstanceItemId, dii.DispatchInstanceId, di.DispatchId, 
	(Select ToolStringId from DispatchInstanceItems(NOLOCK) pDii where pDii.DispatchInstanceItemId=dii.ParentId) 
		as ToolStringId,
	dii.SerialNum, dii.RNItemNum, dii.ItemNum, dii.Revision, dii.FixedAssetId, 
	(Select SerialNum from DispatchInstanceItems pDii(NOLOCK) where pDii.DispatchInstanceItemId=dii.ParentId) 
		as ToolStringSerialNum,
	dii.Description, di.SequenceNum, 1 as MissingInJDESequence, 0 as MissingInBOS
from DispatchInstanceItems (NOLOCK) dii
left join DispatchInstances (NOLOCK) di on di.DispatchInstanceId = dii.DispatchInstanceId
where dii.ToolStringId is null and dii.ParentId is not null 
and dii.SerialNum not in (
	select dii2.SerialNum
	from DispatchInstanceItems (NOLOCK) dii2
	left join DispatchInstances (NOLOCK) di2 on di2.DispatchInstanceId = dii2.DispatchInstanceId
	where di2.DispatchId = di.DispatchId --and di2.DispatchInstanceId = di.DispatchInstanceId
	and dii2.ToolStringId is null and dii2.ParentId is null)

union all

-- Missing Assets on Build/Load Out Sheets(found in JDE Delivery Ticket Sequence)
select dii.DispatchInstanceItemId, dii.DispatchInstanceId, di.DispatchId, dii.ToolStringId,
	dii.SerialNum, dii.RNItemNum, dii.ItemNum, dii.Revision, dii.FixedAssetId, '' as ToolStringSerialNum,
	dii.Description, di.SequenceNum, 0 as MissingInJDESequence, 1 as MissingInBOS
from DispatchInstanceItems (NOLOCK) dii
left join DispatchInstances (NOLOCK) di on di.DispatchInstanceId = dii.DispatchInstanceId
where dii.ToolStringId is null and ParentId is null 
and dii.SerialNum not in (
	select dii2.SerialNum
	from DispatchInstanceItems (NOLOCK) dii2
	left join DispatchInstances (NOLOCK) di2 on di2.DispatchInstanceId = dii2.DispatchInstanceId
	where di2.DispatchId = di.DispatchId --and di2.DispatchInstanceId = di.DispatchInstanceId
	and dii2.ToolStringId is null and dii2.ParentId is not null)
GO
/****** Object:  View [dbo].[vwToolStringFixedAssetsMissing]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwToolStringFixedAssetsMissing]
AS

SELECT 
  dii.DispatchInstanceItemId, di.DispatchInstanceId, di.DispatchId		
  , dii.AssetNumber, dii.SerialNum, dii.ItemNum, dii.RNItemNum, dii.Revision
  , di.SequenceNum
  , i.DescShort
  , (select top 1 tsfa.ToolStringID 
      from ToolStringFixedAssets tsfa (NOLOCK) 
      LEFT OUTER JOIN FixedAssets fa (NOLOCK) on fa.FixedAssetId = tsfa.FixedAssetID
      where fa.AssetNumber = dii.AssetNumber 
        AND tsfa.ToolStringId in (select dii2.ToolStringID from DispatchInstanceItems dii2 WITH(NOLOCK) 
          where dii2.DispatchInstanceId = dii.DispatchInstanceId and dii2.ToolStringId is not null))
     as IsMatchedOnInstanceToolString
  , (select top 1 tsfa2.ToolStringID 
      from ToolStringFixedAssets tsfa2 (NOLOCK) 
      LEFT OUTER JOIN FixedAssets fa2 (NOLOCK) on fa2.FixedAssetId = tsfa2.FixedAssetID
      where fa2.AssetNumber = dii.AssetNumber 
        AND tsfa2.ToolStringId in (select dii3.ToolStringID from DispatchInstanceItems dii3 (NOLOCK) join DispatchInstances di3 (NOLOCK) on dii3.DispatchInstanceId = di3.DispatchInstanceId 
        where di3.DispatchId = di.DispatchId and dii3.ToolStringId is not null))
     as IsMatchedOnDispatchToolString
FROM DispatchInstanceItems dii WITH(NOLOCK)
--LEFT JOIN FixedAssets fi (NOLOCK) ON fi.AssetNumber = dii.AssetNumber
LEFT JOIN dbo.ItemNums (NOLOCK) i ON i.ItemNum=dii.ItemNum
JOIN DispatchInstances di (NOLOCK) ON di.DispatchInstanceId=dii.DispatchInstanceId
WHERE
  dii.ToolStringId is NULL
  AND di.ShipType = 'DT-SEQ-ADD'
  AND (select top 1 tsfa.ToolStringID 
  from ToolStringFixedAssets tsfa (NOLOCK) 
  JOIN FixedAssets fa (NOLOCK) on fa.FixedAssetId = tsfa.FixedAssetID
  where fa.AssetNumber = dii.AssetNumber 
    AND tsfa.ToolStringId in (select dii2.ToolStringID from DispatchInstanceItems dii2 (NOLOCK) 
      where dii2.DispatchInstanceId = dii.DispatchInstanceId and dii2.ToolStringId is not null)) is NULL

GO
/****** Object:  View [dbo].[vwDispatchInstances]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwDispatchInstances]
AS

SELECT  di.DispatchInstanceId
		, di.SequenceNum
		, di.ShipTo
		, s.OptionLabel AS ShipType
		, di.DateShipped
		, di.DateDelivered
		, d.DispatchId
		, d.DispatchNumber
		, d.JobId
		, di.InvoiceSequenceNum
		, di.InvoiceNum
		, di.InvoiceType
		, di.InvoiceCompany
		, r.RegionDesc as Region
		, c.CountryDesc as Country
		, d.BranchPlant
		, bp.CompanyName as BranchPlantName
FROM DispatchInstances (NOLOCK) di 
INNER JOIN Dispatches (NOLOCK) d ON d.DispatchId = di.DispatchId
LEFT OUTER JOIN SelectOptions (NOLOCK) s ON s.SelectName = 'DispatchShipTypes' AND s.OptionValue = di.ShipType

LEFT OUTER JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = d.BranchPlant
LEFT OUTER JOIN Regions (NOLOCK) r ON r.Region = bp.Region
LEFT OUTER JOIN Countries (NOLOCK) c ON c.Country = bp.Country



GO
/****** Object:  View [dbo].[vwDispatchesLookUp]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwDispatchesLookUp]
AS

SELECT d.DispatchId,d.DispatchNumber,c.CustomerName,
		c.CustomerNumber,di.DateShipped,d.RigName,
		f.AssetNumber
FROM dispatches d
	JOIN dispatchinstances di on di.dispatchid = d.dispatchid 
	JOIN DispatchInstanceItems dii on dii.DispatchInstanceId = di.dispatchinstanceid ----- Revenue unit
	JOIN fixedassets f on f.SerialNum = dii.SerialNum and f.RNItemNum = dii.ItemNum
	LEFT JOIN customers c on c.CustomerNumber = d.JDECustomerNumber
WHERE   di.ShipType = 'dt-return'


GO
/****** Object:  Table [dbo].[RequestApprovals]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RequestApprovals](
	[ApprovalId] [int] IDENTITY(1,1) NOT NULL,
	[RequestId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[DateApproved] [datetime] NULL,
	[DateEntered] [datetime] NOT NULL,
	[ApprovalStatus] [varchar](1) NOT NULL,
	[ApprovalOrder] [tinyint] NOT NULL,
	[Comments] [text] NULL,
	[DateLastNotified] [datetime] NOT NULL,
	[RemindInDays] [int] NULL,
	[DateLastReminded] [datetime] NULL,
	[IsInitialApprover] [bit] NULL,
	[DateLastModified] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ApprovedBy] [int] NULL,
 CONSTRAINT [PK_RequestApprovals] PRIMARY KEY CLUSTERED 
(
	[ApprovalId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ActionItem]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ActionItem](
	[ActionItemId] [int] IDENTITY(1,1) NOT NULL,
	[RequestId] [int] NOT NULL,
	[UserIdAdded] [int] NOT NULL,
	[AssigneeUserId] [int] NOT NULL,
	[DueDate] [datetime] NOT NULL,
	[ActionDescription] [varchar](1024) NOT NULL,
	[AssigneeComments] [varchar](1024) NULL,
	[IsComplete] [bit] NOT NULL,
	[CompletionDate] [datetime] NULL,
	[DateAdded] [datetime] NOT NULL,
	[LastEditDate] [datetime] NULL,
	[LastEditBy] [int] NULL,
 CONSTRAINT [PK_ActionItem] PRIMARY KEY CLUSTERED 
(
	[ActionItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MCComments]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MCComments](
	[MCCommentId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[RefName] [varchar](25) NOT NULL,
	[RefId] [uniqueidentifier] NOT NULL,
	[RefId2] [int] NULL,
	[UserId] [int] NOT NULL,
	[Comment] [varchar](max) NOT NULL,
	[CommentDate] [datetime] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[EmailTo] [varchar](1024) NULL,
	[EmailCC] [varchar](1024) NULL,
	[ReplyToCommentId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_MCComments] PRIMARY KEY CLUSTERED 
(
	[MCCommentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Requests]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Requests](
	[RequestId] [int] IDENTITY(1,1) NOT NULL,
	[RequestType] [varchar](5) NOT NULL,
	[Requestor] [varchar](51) NULL,
	[RequestorEmail] [varchar](100) NULL,
	[RequestStatus] [varchar](2) NOT NULL,
	[UserIdEntered] [int] NOT NULL,
	[DateEntered] [datetime] NOT NULL,
	[Regarding] [varchar](30) NULL,
	[Supervisor] [varchar](50) NULL,
	[OpenClosed] [varchar](1) NOT NULL,
	[DateClosed] [datetime] NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[StatusChangedBy] [varchar](50) NULL,
	[IsDraft] [bit] NOT NULL,
	[Subject] [varchar](255) NULL,
	[OrigBranchPlant] [varchar](12) NULL,
	[SupervisorID] [int] NULL,
	[LastEdit] [datetime] NULL,
	[LastEditBy] [int] NULL,
 CONSTRAINT [PK_Requests] PRIMARY KEY CLUSTERED 
(
	[RequestId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwNCRActivityReport]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwNCRActivityReport]
AS
SELECT     RequestId, RequestType, Requestor, DateEntered, Supervisor, OpenClosed, r.BranchPlant, SupervisorID, r.LastEdit,
                          (SELECT     MAX(CommentDate) AS Expr1
                            FROM          dbo.MCComments AS rc WITH (NOLOCK)
                            WHERE      (RequestId = r.RequestId)) AS LastCommentDate,
                          (SELECT     MAX(DateApproved) AS Expr1
                            FROM          dbo.RequestApprovals AS ra WITH (NOLOCK)
                            WHERE      (RequestId = r.RequestId)) AS LastApprovalDate,
                          (SELECT     MAX(DateAdded) AS Expr1
                            FROM          dbo.ActionItem AS ai WITH (NOLOCK)
                            WHERE      (RequestID = r.RequestId)) AS LastActionItemDate,b.CompanyName
  , r.DateClosed
  , sl.OptionLabel AS OpenClosedDesc
FROM         Requests r WITH (NOLOCK)
left join BranchPlants b WITH (NOLOCK) on b.BranchPlant = r.BranchPlant
left join SelectOptions (NOLOCK) sl ON sl.SelectName='RequestStatus' AND sl.OptionValue=r.OpenClosed



GO
/****** Object:  View [dbo].[vwRequestApprovals]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwRequestApprovals]
AS
SELECT     dbo.RequestApprovals.ApprovalId
			, dbo.RequestApprovals.RequestId
			, dbo.Requests.RequestType
			, dbo.RequestApprovals.UserId
			, dbo.RequestApprovals.DateApproved
			, dbo.RequestApprovals.DateEntered
			, dbo.RequestApprovals.ApprovalStatus
			, dbo.RequestApprovals.ApprovalOrder
			, dbo.Users.FirstName
			, dbo.Users.LastName
			, dbo.Users.FirstName + ' ' + dbo.Users.LastName AS FullName
			, dbo.Users.UserName
			, dbo.RequestApprovals.Comments
			, ISNULL(dbo.RequestApprovals.RemindInDays,0) AS RemindInDays
			, 'CRNCR' AS ReqType
			, ISNULL(IsInitialApprover, 0) AS IsInitialApprover
			, dbo.Users.Email
			, dbo.RequestApprovals.DateLastReminded
			, dbo.Requests.OpenClosed AS RequestStatus
			
FROM         dbo.RequestApprovals WITH(NOLOCK) 

			LEFT OUTER JOIN dbo.Users WITH(NOLOCK) ON dbo.RequestApprovals.UserId = dbo.Users.UserId
			LEFT OUTER JOIN dbo.Requests WITH(NOLOCK) ON dbo.RequestApprovals.RequestId = dbo.Requests.RequestId


GO
/****** Object:  Table [dbo].[ChangeRequests]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeRequests](
	[RequestId] [int] NOT NULL,
	[DateSubmitted] [datetime] NULL,
	[DateRequired] [datetime] NULL,
	[Division] [varchar](25) NULL,
	[Priority] [varchar](10) NULL,
	[ImpactLevel] [varchar](2) NULL,
	[ChangeRequest] [text] NULL,
	[DetailedReason] [text] NULL,
	[ChangesRequired] [text] NULL,
	[SpecialNotes] [text] NULL,
	[Solution] [varchar](50) NULL,
	[SolutionComments] [varchar](max) NULL,
	[ProductLine] [varchar](50) NULL,
	[DeptCode] [varchar](10) NULL,
	[Tool] [varchar](50) NULL,
 CONSTRAINT [PK_ChangeRequests] PRIMARY KEY CLUSTERED 
(
	[RequestId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwChangeRequestSearch]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwChangeRequestSearch] AS

SELECT r.RequestId, r.RequestType, r.Regarding, r.Requestor, r.Supervisor, r.DateEntered, r.OpenClosed, rStatusSo.OptionLabel AS OpenClosedDesc,
		r.RequestStatus, rApprovalStatusSo.OptionLabel AS RequestStatusDesc, r.DateClosed,
		r.BranchPlant, bp.CompanyName, r.Subject, cr.ProductLine, cr.DeptCode, deptCodeSo.OptionLabel AS DeptCodeDesc, 
		cr.DateRequired, cr.Solution, cr.Priority, prioritySo.OptionLabel AS PriorityDesc,
		(SELECT TOP 1 u.FirstName + ' ' + u.LastName AS FullName FROM RequestApprovals (NOLOCK) ra
			LEFT OUTER JOIN Users (NOLOCK) u ON u.UserId=ra.UserId WHERE ra.ApprovalStatus='X' AND ra.RequestId=r.RequestId) AS NextApprover,
		cr.ChangeRequest, cr.DetailedReason, cr.ChangesRequired, cr.SpecialNotes, cr.SolutionComments, toolSo.OptionLabel AS ToolDesc
		
FROM Requests (NOLOCK) r
LEFT OUTER JOIN ChangeRequests (NOLOCK) cr ON cr.RequestId=r.RequestId
LEFT JOIN SelectOptions (NOLOCK) prioritySo ON prioritySo.SelectName='Priority' AND prioritySo.OptionValue=cr.Priority
LEFT JOIN SelectOptions (NOLOCK) rStatusSo ON rStatusSo.SelectName='RequestStatus' AND rStatusSo.OptionValue=r.OpenClosed
LEFT JOIN SelectOptions (NOLOCK) rApprovalStatusSo ON rApprovalStatusSo.SelectName='RequestApprovalStatus' AND rApprovalStatusSo.OptionValue=r.RequestStatus
LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant=r.BranchPlant
LEFT JOIN SelectOptions (NOLOCK) deptCodeSo ON deptCodeSo.SelectName='DeptCode' AND deptCodeSo.OptionValue=cr.DeptCode
LEFT JOIN SelectOptions (NOLOCK) toolSo ON toolSo.SelectName='CRTools' AND toolSo.OptionValue=cr.Tool



GO
/****** Object:  View [dbo].[vwPFTSequenceTotals]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwPFTSequenceTotals] AS

SELECT TOP 100 PERCENT NEWID() as Id,
		a.ItemNum, 
		a.Description, 
		a.ProcessName, 
		a.ProcessDesc, 
		a.PFTConfigId,
		count(*) as SequenceCount,
		(a.CurSeqName + ' (' + ltrim(str(a.CurSeqNumber)) + ')') as CurrentSequence, 
		a.CurPFTWOSeqId,
		(SELECT COUNT(*) FROM vwPFTWO (NOLOCK)
			WHERE ItemNum = a.ItemNum AND CurSeqName + ' (' + ltrim(str(CurSeqNumber)) + ')' = a.CurSeqName + ' (' + ltrim(str(a.CurSeqNumber)) + ')' AND Active = 1 AND IsRTV = 1
			GROUP BY ItemNum, Description, ProcessName, ProcessDesc, (CurSeqName + ' (' + ltrim(str(CurSeqNumber)) + ')')
		) As IsRTVCount,
		(SELECT COUNT(*) FROM vwPFTWO (NOLOCK)
			WHERE ItemNum = a.ItemNum AND CurSeqName + ' (' + ltrim(str(CurSeqNumber)) + ')' = a.CurSeqName + ' (' + ltrim(str(a.CurSeqNumber)) + ')' AND Active = 1 AND IsDebug = 1
			GROUP BY ItemNum, Description, ProcessName, ProcessDesc, (CurSeqName + ' (' + ltrim(str(CurSeqNumber)) + ')')
		) As IsDebugCount
FROM vwPFTWO (NOLOCK) a
WHERE a.ItemNum IN (Select OptionValue from SelectOptions (NOLOCK) Where SelectName = 'PFTReportAdminItemNums')
GROUP BY ItemNum, Description, ProcessName, ProcessDesc, a.PFTConfigId, (CurSeqName + ' (' + ltrim(str(CurSeqNumber)) + ')'), CurPFTWOSeqId 
ORDER BY ItemNum, ProcessName, CurrentSequence ASC
GO
/****** Object:  Table [dbo].[JarCoordinators]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JarCoordinators](
	[JarCoordinatorId] [uniqueidentifier] NOT NULL,
	[UserId] [int] NOT NULL,
	[ServiceLine] [varchar](10) NULL,
	[BranchPlant] [varchar](12) NULL,
 CONSTRAINT [PK_JarCoordinators] PRIMARY KEY CLUSTERED 
(
	[JarCoordinatorId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwJarCoordinators]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwJarCoordinators] AS

	SELECT jc.JarCoordinatorId
		,jc.UserId
		,u.UserName
		,u.FirstName
		,u.LastName
		,jc.ServiceLine
		,so.OptionLabel AS ServiceLineDesc
		,jc.BranchPlant
		,bp.[Description] AS BranchPlantDesc
		,bp.RelBaseCode
		,bp.CompanyName
	FROM JarCoordinators jc WITH(NOLOCK)
	INNER JOIN Users u WITH(NOLOCK) ON jc.UserId = u.UserId
	LEFT JOIN SelectOptions so WITH(NOLOCK) on so.SelectName = 'JarServiceLine' AND so.OptionValue = jc.ServiceLine
	LEFT JOIN BranchPlants bp WITH(NOLOCK) on bp.BranchPlant = jc.BranchPlant

GO
/****** Object:  View [dbo].[VW_BHA_Maintenance]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=======================================================
--MODIFIED BY: SACHIN MHALUNGEKAR
--MODIFIED ON : 29 JULY 2020
--DESCRIPTION: GET ASSETS FOR BHA MAINTENANCE
--=======================================================
--TFS 92261 : Yogesh - 14 July 2022 - Include toolstring deleted flag on line # 79
--=======================================================
CREATE VIEW [dbo].[VW_BHA_Maintenance]
AS

	SELECT DISTINCT
		ta.SerialNum,
		ta.InventoryItemNum ItemNum,
		ta.Description, 
		b.BranchPlant + ' - ' + b.CompanyName [BranchPlantName],
		ISNULL(ri.ToolCode, i.ToolCode) AS ToolCode,
		fa.EquipmentStatus,
		CASE WHEN a.AssetRepairTrackId IS NOT NULL THEN 'AIRT' END [MaintenanceType],
		ISNULL(jw.WorkOrderNumber, jw1.WorkOrderNumber) [JDEWorkOrderNumber],
		jw.WorkOrderStatusCode [JDEWorkOrderStatus],
		fa.AssetLifeRemaining,
		CAST(CASE WHEN aOpen.AssetRepairTrackId IS NOT NULL THEN 1 ELSE 0 END As bit) [IsMaintAlreadyOpen],
		
		CONVERT(VARCHAR(50), CASE WHEN a.AssetRepairTrackId IS NOT NULL THEN a.ARTNumber END) [MaintenanceFormNumber],
		CONVERT(VARCHAR(36), CASE WHEN a.AssetRepairTrackId IS NOT NULL THEN a.AssetRepairTrackId END) [MaintenanceFormId],

		CASE WHEN a.AssetRepairTrackId IS NOT NULL
			THEN
				CASE WHEN a.Status = 'Closed' THEN 'Closed'
					 WHEN sr.PFTWOId IS NOT NULL THEN 'Service & Repair'
					 WHEN ad.Disposition = 'Approved' THEN 'Disposition Complete'
					 WHEN ti.Active = 0	THEN 'Waiting Disposition'
							ELSE 'In Inspection'
				END
			ELSE
				CASE WHEN jq.JobQueueStatusId IS NULL THEN 'Not Requested'
					WHEN jq.JobQueueStatusId = 1 THEN 'Pending'
					WHEN jq.JobQueueStatusId = 4 THEN 'Failed'
				END
		END [MaintenanceFormStatus],
		CAST((CASE WHEN ISNULL(fa.AssetNumber, '') = '' THEN 0 ELSE 1 END) AS BIT)	AS IsAsset,
		ta.DateAdded,
		fa.FixedAssetId,
		CAST((CASE WHEN ISNULL(fa.AssetNumber, '') = '' THEN 0
				  WHEN jw.WorkOrderNumber IS NOT NULL THEN 0
				  WHEN (a.AssetRepairTrackId IS NOT NULL AND a.Status = 'Open') OR aOpen.AssetRepairTrackId  IS NOT NULL THEN 0
				  WHEN fa.FixedAssetId IS NULL THEN 0
				  WHEN jq.FixedAssetId IS NOT NULL AND jq.JobQueueStatusId != 4 THEN 0
				  WHEN ISNULL(lsn.SerialNumber, '') != '' THEN 0
				  WHEN NOT EXISTS(SELECT TOP 1 ItemNum FROM PartDescPFTConfigs where ItemNum = ta.InventoryItemNum and PFTType = 2) THEN 0
				  WHEN b.IsNonLiveLocation = 0 and bu.BusinessUnit IS NULL THEN 0
				ELSE 1 END) AS BIT) AS [CanCreateMaintenance],

		CASE WHEN ISNULL(lsn.SerialNumber, '') != '' THEN 0 ELSE 1 END AS [IsLatest],

		CAST((CASE WHEN ISNULL(fa.AssetNumber, '') = '' THEN 'This is not a properly set up JDE Asset'
				  WHEN jw.WorkOrderNumber IS NOT NULL THEN 'There is an open PFT on the Asset which must be closed before an AIRT can be created'
				  WHEN (a.AssetRepairTrackId IS NOT NULL AND a.Status = 'Open') OR aOpen.AssetRepairTrackId  IS NOT NULL THEN 'There is already an open AIRT ' + CAST(ISNULL(a.ARTNumber, aOpen.ARTNumber) AS Varchar(40))
				  WHEN fa.FixedAssetId IS NULL THEN 'The asset is not properly set up in MyAdvisor. Please contact the help desk'
				  WHEN jq.FixedAssetId IS NOT NULL AND jq.JobQueueStatusId != 4 THEN 'There is already an open Maintenance request for this asset. It should be completed shortly.'
				  WHEN ISNULL(lsn.SerialNumber, '') != '' THEN
				 'The asset has been issued to another build sheet more recent than the you are viewing. ' + lsn.SerialNumber
				 WHEN NOT EXISTS(SELECT TOP 1 ItemNum FROM PartDescPFTConfigs where ItemNum = ta.InventoryItemNum and PFTType = 2) THEN 'There is not a T&I PFT set up with the part # listed on this asset'
				 WHEN b.IsNonLiveLocation = 0 and bu.BusinessUnit IS NULL THEN 'Fixed Asset business unit is not valid ' + fa.BusinessUnit
				ELSE 'This asset is eligible for Maintenance' END) AS varchar(200)) AS [MaintenanceReason],
		
		t.ToolStringId,
		ta.OrderPosition,
		ta.SortNumber,
		CAST(0 AS BIT) AS ChangeJDEStatus
		
	FROM ToolStrings t WITH (NOLOCK)
	JOIN ToolStringFixedAssets ta WITH (NOLOCK) ON ta.ToolStringID = t.ToolStringID
	JOIN FixedAssets fa (NOLOCK) ON fa.FixedAssetId = ta.FixedAssetId AND ISNULL(fa.AssetNumber, '') != ''
	LEFT JOIN BranchPlants b (NOLOCK) ON b.BranchPlant = fa.BranchPlant	
	OUTER APPLY (SELECT TOP 1 ts.SerialNumber
						FROM toolstrings ts  WITH (NOLOCK)
						JOIN ToolStringFixedAssets tsfa  WITH (NOLOCK) ON ts.ToolStringID = tsfa.ToolStringId
						WHERE ISNULL(ts.IsDeleted,0) = 0 
							and tsfa.SerialNum = ta.SerialNum 
							AND tsfa.InventoryItemNum = ta.InventoryItemNum 
							and ts.CreateDate > t.CreateDate 
						ORDER BY ts.CreateDate DESC) lsn
    
	------- AIRT Joins
	OUTER APPLY udf_BuildSheet_GetAIRTForMaintenance(t.ToolStringId, fa.FixedAssetId, t.District, 0) a
	OUTER APPLY udf_BuildSheet_GetAIRTForMaintenance(t.ToolStringId, fa.FixedAssetId, t.District, 1) aOpen
	LEFT JOIN ARTDispositions ad (NOLOCK) ON ad.AssetRepairTrackId = a.AssetRepairTrackId
	LEFT JOIN PFTWO ti (NOLOCK) ON ti.PFTWOId = a.ITPFTWOId
	LEFT JOIN PFTWO sr (NOLOCK) ON sr.PFTWOId = a.SRPFTWOId
	LEFT JOIN JDEWorkOrders jw (NOLOCK) ON jw.WorkOrderNumber = ti.JDEWorkOrderNum
	LEFT JOIN JDEWorkOrders jw1 (NOLOCK) ON jw1.WorkOrderNumber = sr.JDEWorkOrderNum
	LEFT JOIN BusinessUnits bu (NOLOCK) ON ISNULL(fa.BusinessUnit, '') != '' AND bu.BusinessUnit = fa.BusinessUnit AND bu.IsActive = 1
	LEFT JOIN dbo.ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum    
	LEFT JOIN dbo.ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum 

	LEFT JOIN (SELECT ROW_NUMBER() OVER(PARTITION BY RequestXml.value('(/BHAMaintenance/FixedAssetId/text())[1]', 'uniqueidentifier') 
										ORDER BY RequestXml.value('(/BHAMaintenance/FixedAssetId/text())[1]', 'uniqueidentifier'), 
				CreateDate DESC) [Index], RequestXml.value('(/BHAMaintenance/FixedAssetId/text())[1]', 'uniqueidentifier') [FixedAssetId], 
				RequestXml.value('(/BHAMaintenance/MaintenanceFormSourceId/text())[1]', 'uniqueidentifier') MaintenanceFormSourceId,JobQueueStatusId
			FROM JobQueue 
		WHERE jobid = 50 AND JobQueueStatusId IN (1, 4)) jq ON jq.FixedAssetId = fa.FixedAssetId AND MaintenanceFormSourceId = ta.ToolStringID and jq.[Index] = 1



GO
/****** Object:  View [dbo].[vwAIRTPendingDispositionApprovalPortlet]    Script Date: 3/24/2023 7:52:15 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwAIRTPendingDispositionApprovalPortlet] AS


SELECT r1.AssetRepairTrackId, r1.ARTNumber, r1.Status, r1.AssetNumber, r1.SerialNum, r1.ItemNum, r1.DateAdded, r1.AddedBy, 
	   r1.FromBranchPlant, r1.CurrentDispositionId, r1.CurrentDispositionStatus 
FROM (
	SELECT art.AssetRepairTrackId, art.ARTNumber, art.Status, art.AssetNumber, art.SerialNum, art.ItemNum, art.DateAdded, art.AddedBy, art.FromBranchPlant,
	(SELECT TOP 1 DispositionId from ARTDispositions (NOLOCK) artd1 WHERE artd1.AssetRepairTrackId=art.AssetRepairTrackId ORDER BY artd1.DateAdded DESC) AS CurrentDispositionId,
	(SELECT TOP 1 Status FROM ARTDispositions (NOLOCK) artd2 WHERE artd2.AssetRepairTrackId=art.AssetRepairTrackId ORDER BY artd2.DateAdded DESC) AS CurrentDispositionStatus
	FROM AssetRepairTrack (NOLOCK) art
 ) r1
WHERE r1.CurrentDispositionId is not null and r1.CurrentDispositionStatus<>'Approved'

UNION 

SELECT r2.AssetRepairTrackId, r2.ARTNumber, r2.Status, r2.AssetNumber, r2.SerialNum, r2.ItemNum, r2.DateAdded, r2.AddedBy, 
	   r2.FromBranchPlant, r2.CurrentDispositionId, r2.CurrentDispositionStatus 
FROM (
	SELECT art.AssetRepairTrackId, art.ARTNumber, art.Status, art.AssetNumber, art.SerialNum, art.ItemNum, art.DateAdded, art.AddedBy, art.FromBranchPlant,
	(SELECT TOP 1 DispositionId FROM ARTDispositions (NOLOCK) artd1 WHERE artd1.AssetRepairTrackId=art.AssetRepairTrackId ORDER BY artd1.DateAdded DESC) AS CurrentDispositionId,
	(SELECT TOP 1 Status FROM ARTDispositions (NOLOCK) artd2 WHERE artd2.AssetRepairTrackId=art.AssetRepairTrackId ORDER BY artd2.DateAdded DESC) AS CurrentDispositionStatus
	FROM AssetRepairTrack (NOLOCK) art
) r2
WHERE r2.CurrentDispositionId IS NULL 
	AND r2.AssetRepairTrackId IN (
		SELECT b.AssetRepairTrackId FROM AssetRepairTrack (NOLOCK) b
		LEFT JOIN PFTWO (NOLOCK) p ON p.PFTWOId=b.ITPFTWOId
		LEFT JOIN PFTWOSeq (NOLOCK) s ON s.PFTWOId=b.ITPFTWOId
		WHERE p.Active=0 AND (s.PFTResult='F' OR b.IsRedTag=1))



GO
/****** Object:  Table [dbo].[MCApprovers]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MCApprovers](
	[ApproverId] [uniqueidentifier] NOT NULL,
	[ApprovalCode] [varchar](16) NOT NULL,
	[LocId] [varchar](16) NULL,
	[UserId] [int] NOT NULL,
	[ApproverType] [smallint] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[Amount] [decimal](18, 2) NULL,
	[IsDefault] [bit] NULL,
	[ProductLine] [varchar](50) NULL,
	[DeptCode] [varchar](10) NULL,
 CONSTRAINT [PK_MCApprovers] PRIMARY KEY CLUSTERED 
(
	[ApproverId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserRoles]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserRoles](
	[RoleId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[Source] [varchar](50) NULL,
 CONSTRAINT [PK_UserRoles] PRIMARY KEY CLUSTERED 
(
	[RoleId] ASC,
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwAIRTWaitingOnMyApprovalPortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwAIRTWaitingOnMyApprovalPortlet] 
AS

SELECT
	a.AssetRepairTrackId,
	a.ARTNumber,
	a.Status, 
	a.AssetNumber, 
	a.SerialNum, 
	a.ItemNum, 
	a.DateAdded, 
	a.AddedBy, 
	a.FromBranchPlant, 
	d.DispositionId CurrentDispositionId, 
	d.Status CurrentDispositionStatus, 
	m.UserId CurrentApproverId, 
	CONVERT(VARCHAR(1), NULL) ApproverDelegate 
FROM Assetrepairtrack (NOLOCK) a
JOIN ARTDispositions d (NOLOCK) ON a.AssetRepairTrackId = d.AssetRepairTrackId
JOIN MCApprovers m (NOLOCK) ON a.FromBranchPlant = m.LocId OR m.LocId IS NULL 
WHERE a.Status = 'Open' AND d.Status <> 'Approved' AND m.ApprovalCode = 'AIRT' 
	AND (CASE WHEN m.ApproverType = 5 AND d.Status <> 'Submitted' THEN 0 ELSE 1 END) = 1

UNION 

SELECT
	a.AssetRepairTrackId,
	a.ARTNumber,
	a.Status, 
	a.AssetNumber, 
	a.SerialNum, 
	a.ItemNum, 
	a.DateAdded, 
	a.AddedBy, 
	a.FromBranchPlant, 
	d.DispositionId CurrentDispositionId, 
	d.Status CurrentDispositionStatus, 
	u.UserId CurrentApproverId, 
	NULL ApproverDelegate 
FROM Assetrepairtrack (NOLOCK) a
JOIN ARTDispositions d (NOLOCK) ON a.AssetRepairTrackId = d.AssetRepairTrackId
JOIN UserRoles r (NOLOCK) on r.RoleId IN (1,3)
JOIN Users u (NOLOCK) ON u.UserId = r.UserId
WHERE a.Status = 'Open' AND d.Status <> 'Approved'

-- OLD View SQL Statement

--SELECT r1.AssetRepairTrackId, 
--       r1.ARTNumber, 
--       r1.Status, 
--       r1.AssetNumber, 
--       r1.SerialNum, 
--       r1.ItemNum, 
--       r1.DateAdded, 
--       r1.AddedBy, 
--       r1.FromBranchPlant, 
--       r1.CurrentDispositionId, 
--       r1.CurrentDispositionStatus, 
--       r1.CurrentApproverId, 
--       up.approverdelegate 
--FROM   (SELECT art.AssetRepairTrackId, 
--               art.ARTNumber, 
--               art.Status, 
--               art.AssetNumber, 
--               art.SerialNum, 
--               art.ItemNum, 
--               art.DateAdded, 
--               art.AddedBy, 
--               art.FromBranchPlant, 

--               (SELECT TOP 1 dispositionid  
--					FROM artdispositions (nolock) artd1  
--					WHERE  artd1.assetrepairtrackid = art.assetrepairtrackid 
--					ORDER  BY artd1.dateadded DESC) AS CurrentDispositionId, 

--               (SELECT TOP 1 status 
--					FROM   artdispositions (nolock) artd2 
--					WHERE  artd2.assetrepairtrackid = art.assetrepairtrackid 
--					ORDER  BY artd2.dateadded DESC) AS CurrentDispositionStatus, 

--               (SELECT TOP 1 approverid 
--					FROM   artdispositions (nolock) artd3 
--					WHERE  artd3.assetrepairtrackid = art.assetrepairtrackid 
--					ORDER  BY artd3.dateadded DESC) AS CurrentApproverId 

--        FROM   Assetrepairtrack (nolock) art) r1 
--       LEFT OUTER JOIN Userprofile (nolock) up 
--                    ON up.userid = r1.currentapproverid 
--WHERE  r1.currentdispositionid IS NOT NULL 
--       AND r1.currentdispositionstatus <> 'Approved' 
--       AND r1.status <> 'Closed' 

GO
/****** Object:  View [dbo].[VwMyAdvisorKPI1]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[VwMyAdvisorKPI1] AS 
SELECT        
			 g.SegmentPL [Segment Product Line] 
			,b1.BranchPlant+' - '+b1.companyname [Testing Branch]  
			,b1.Region [Testing Region] 
			,b1.Country [Testing Country]     
			,ISNULL(b2.BranchPlant+' - '+b2.companyname,'') [Repair Branch]     
			,ISNULL(b2.Region,'') [Repair Region]    
			,ISNULL(b2.Country,'') [Repair Country]  
			,a.ARTNumber [AIRT Number] 
			,a.SerialNum [Serial Number]      
			,a.ItemNum [Inventory Item Num]   
			,i.descshort [Item Description]   
			,ISNULL(i.toolcode,'') [Tool Code] 
			,ISNULL(i.toolpanel,'') [Tool Panel]     
			,ISNULL(CONVERT(VARCHAR(10),a.dateadded,101),'') [Date AIRT Created] 
			,ISNULL(CONVERT(VARCHAR(10),a.DateClosed,101),'') [Date AIRT Closed] 
			,ISNULL(d.[Disposition of AIRT],'') [Disposition of AIRT]     
			,ISNULL(j.ActaulLaborInUSD,'') [Repair Labor Cost]     
			,ISNULL(j.MiscCostInUSD,'') [Repair Misc Cost]  
			,ISNULL(j.ActualMaterialInUSD,'') [Repair Material Cost]      
			,ISNULL(j.ActaulMiscCostInUSD,'') [Repair Total Cost]  
			,ISNULL(f3.FailureCategoryCode+f2.FailureSubCategoryCode+f1.FailureCode,'') [Equipment Code]    
			,ISNULL(f3.FailureCategoryDesc,'') [Equipment Category]          
			,ISNULL(f2.FailureSubCategoryDesc,'') [Equipment Sub Category]    
			,ISNULL(f1.FailureDesc,'') [Equipment Description] 
			,ISNULL(f3.FailureCategoryDesc+' - '+ f2.FailureSubCategoryDesc+ ' - ' + f1.FailureDesc,'') [Equipment Code Description] 
			,ISNULL(CONVERT(VARCHAR(10),p.DateAdded,101),'') [Repair Start]     
			,CASE  
			       WHEN p.active = '0' THEN CONVERT(VARCHAR(10),e.[Date of Last Step],101)
			       WHEN p.active = '1' THEN 'Repair in progress'
			       ELSE 'No Repair' END AS [Repair Close]
			,CASE  
			       WHEN a.dateclosed IS NOT NULL THEN 'Closed'
			       ELSE 'open' END AS [Is Closed?]
			/*Begin Calculated KPIs*/  
			,CASE
					WHEN a.SRPFTWOId IS NOT NULL AND p.active = '0' THEN ISNULL(CONVERT(VARCHAR(10),DATEDIFF(dd,p.DateAdded ,e.[Date of Last Step]),101),'') 
					WHEN a.srpftwoid IS NOT NULL AND p.active = '1' THEN ISNULL(CONVERT(VARCHAR(10),DATEDIFF(dd,p.DateAdded ,GETDATE()),101),'') 
					ELSE '' 
			 END AS [Days in Repair] 
 
       
FROM		assetrepairtrack a    
LEFT JOIN	pftwo p					ON p.pftwoid = a.SRPFTWOId    
LEFT JOIN	BranchPlants b1			ON b1.BranchPlant = a.FromBranchPlant     
LEFT JOIN	branchplants b2			ON b2.BranchPlant = a.ShipToBranchPlant   
LEFT JOIN	itemnums i				ON i.itemnum = a.ItemNum   
LEFT JOIN	JDEWorkOrders j			ON j.workordernumber = p.JDEWorkOrderNum  
LEFT JOIN	fixedassets f			ON f.FixedAssetId = a.FixedAssetId    
LEFT JOIN	GLCodes g				ON g.GLCode = f.ProductLineCode    
LEFT JOIN	FailureCodes f1			ON f1.FailureCodeId = a.FailureCodeId     
LEFT JOIN	FailureSubCategories f2 ON f2.FailureSubCategoryId = f1.FailureSubCategoryId    
LEFT JOIN	FailureCategories f3	ON f3.FailureCategoryId = f1.FailureCategoryId       
LEFT JOIN	(---PFT last Step subquery to get date pft closed   
				SELECT	ps.PFTWOId, MAX(ps.DateAdded)[Date of Last Step]
				FROM	PFTWOSeq ps
				GROUP BY ps.pftwoid ) E ON e.PFTWOId = p.PFTWOId  
LEFT join	(---AIRT disposition Subquery  
				SELECT 
							a4.AssetRepairTrackid, a4.ARTNumber AS "AIRT Number",  
							ad4.DispositionComments as "AIRT Disposition Comments", 
							a4.ShipToBranchPlant,a4.FromBranchPlant, 
							ad5.[Disposition Date] as "AIRT disposition date",      
							CASE    
							   WHEN ad4.Disposition = '1' THEN 'Repair in District' 
							   WHEN ad4.Disposition = '4' THEN 'Use as is'   
							   WHEN ad4.Disposition = '2' THEN 'Repair in Global'   
							   WHEN ad4.Disposition = '3' THEN 'Scrap'       
							ELSE 'unknown disposition'	  END AS [Disposition of AIRT] 
				FROM		AssetRepairTrack a4    
				LEFT JOIN	ARTDispositions ad4 on ad4.AssetRepairTrackId = a4.AssetRepairTrackId      
				INNER JOIN	(     
								SELECT	ad.assetrepairtrackid,MAX(ad.dateadded) [Disposition Date]        
								FROM	ARTDispositions ad     
								GROUP BY assetrepairtrackid  
							) ad5 ON ad5.AssetRepairTrackId = a4.AssetRepairTrackId AND ad4.DateAdded = ad5.[Disposition Date]   
				) d ON d.AssetRepairTrackId = a.AssetRepairTrackId      

WHERE		a.DateAdded > '1-1-2015'
GO
/****** Object:  Table [dbo].[CustomsInvoices]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CustomsInvoices](
	[CustomsInvoiceId] [uniqueidentifier] NOT NULL,
	[CustomsInvoiceStatusId] [int] NOT NULL,
	[FromBranchPlant] [varchar](12) NOT NULL,
	[ToBranchPlant] [varchar](12) NOT NULL,
	[TitleText] [varchar](100) NULL,
	[TotalValueText] [varchar](100) NULL,
	[ShipperLine1] [varchar](256) NULL,
	[ShipperLine2] [varchar](256) NULL,
	[ShipperLine3] [varchar](256) NULL,
	[ShipperLine4] [varchar](256) NULL,
	[ShipperLine5] [varchar](256) NULL,
	[ShipperLine6] [varchar](256) NULL,
	[ShipperLine7] [varchar](256) NULL,
	[ConsigneeLine1] [varchar](256) NULL,
	[ConsigneeLine2] [varchar](256) NULL,
	[ConsigneeLine3] [varchar](256) NULL,
	[ConsigneeLine4] [varchar](256) NULL,
	[ConsigneeLine5] [varchar](256) NULL,
	[ConsigneeLine6] [varchar](256) NULL,
	[ConsigneeLine7] [varchar](256) NULL,
	[InvoiceAutoNumber] [int] NOT NULL,
	[InvoiceNumber] [varchar](35) NULL,
	[InvoiceDate] [datetime] NOT NULL,
	[ProcessedBy] [varchar](35) NOT NULL,
	[TrackingNumber] [varchar](50) NULL,
	[PackagingInformation] [varchar](100) NULL,
	[ShipmentMethod] [varchar](25) NULL,
	[TaxIdNumber] [varchar](25) NULL,
	[AirWaybillNumber] [varchar](50) NULL,
	[ConsigneeNumber] [varchar](50) NULL,
	[Comments] [varchar](4000) NULL,
	[DateAdded] [datetime] NOT NULL,
	[ShipperSignatureName] [varchar](100) NULL,
	[ShipperSignatureTitle] [varchar](100) NULL,
	[CreateDate] [datetime] NOT NULL,
	[CreatedUserName] [varchar](35) NOT NULL,
	[LastEditDate] [datetime] NOT NULL,
	[LastEditUserName] [varchar](35) NOT NULL,
	[Description] [varchar](1000) NULL,
	[Packer] [varchar](50) NULL,
	[PackerDate] [datetime] NULL,
	[DateSubmittedForApproval] [datetime] NULL,
	[ApprovalDate] [datetime] NULL,
	[IsAirlineApprovalReceived] [bit] NOT NULL,
	[IsImportLicenseReceived] [bit] NOT NULL,
	[IsNRCNotified] [bit] NOT NULL,
	[FreightForwarders] [varchar](50) NULL,
	[AWBNumber] [varchar](100) NULL,
	[ETA] [datetime] NULL,
	[IsShipmentComplete] [bit] NOT NULL,
	[AdditionalText] [varchar](4000) NULL,
	[IsDangerousGoods] [bit] NOT NULL,
	[IsAssetShipment] [bit] NOT NULL,
	[IsRepairShipment] [bit] NOT NULL,
	[AssetShipmentTitleText] [varchar](100) NULL,
	[AssetShipmentAdditionalText] [varchar](4000) NULL,
	[PackingCompleteDate] [datetime] NULL,
	[WorkflowId] [uniqueidentifier] NULL,
	[TotalValue] [numeric](18, 4) NULL,
	[AirFreightValue] [numeric](18, 4) NULL,
	[InsuranceValue] [numeric](18, 4) NULL,
	[CIFValue] [numeric](18, 4) NULL,
	[LocationId] [uniqueidentifier] NULL,
	[Units] [varchar](25) NULL,
	[ForwarderDate] [datetime] NULL,
	[ForwarderReleaseDate] [datetime] NULL,
	[CompleteDate] [datetime] NULL,
	[Notes] [varchar](8000) NULL,
	[FinalDestination1] [varchar](256) NULL,
	[FinalDestination2] [varchar](256) NULL,
	[FinalDestination3] [varchar](256) NULL,
	[FinalDestination4] [varchar](256) NULL,
	[FinalDestination5] [varchar](256) NULL,
	[FinalDestination6] [varchar](256) NULL,
	[FinalDestination7] [varchar](256) NULL,
	[SeaFreightValue] [numeric](18, 4) NULL,
	[PaymentTerms] [varchar](100) NULL,
	[VATNumber] [varchar](50) NULL,
	[EUNumber] [varchar](50) NULL,
	[BOLNumber] [varchar](50) NULL,
	[CMRNumber] [varchar](50) NULL,
	[ETA_Transit] [datetime] NULL,
	[ETA_FinalDestination] [datetime] NULL,
	[ATA_FinalDestination] [datetime] NULL,
	[ShipToDeliveryAddress] [varchar](2000) NULL,
	[IncotermFreightTerm] [varchar](256) NULL,
	[AirOceanFreight] [numeric](18, 4) NULL,
	[CratingPackingValue] [numeric](18, 4) NULL,
	[FreightPickupFee] [numeric](18, 4) NULL,
	[ShippingForwardingFee] [numeric](18, 4) NULL,
	[SecurityFuelSurcharge] [numeric](18, 4) NULL,
	[AirportTransferFee] [numeric](18, 4) NULL,
	[IsAcordeSubmitted] [bit] NULL,
	[EntryNumber] [varchar](255) NULL,
	[EntryDate] [datetime] NULL,
	[AccordeFileNo] [varchar](255) NULL,
	[FileBoxNo] [varchar](255) NULL,
	[ShippingCountry] [varchar](255) NULL,
	[CustomsBrokerCode] [varchar](255) NULL,
	[IsDomesticShipment] [bit] NOT NULL,
	[DomesticReceivedBy] [varchar](100) NULL,
	[RevisionNumber] [int] NULL,
	[ExportPrep] [numeric](18, 4) NULL,
	[ValueTerms] [varchar](150) NULL,
	[TermsLocation] [varchar](255) NULL,
	[TransitPort] [varchar](1024) NULL,
	[ATA_Transit] [datetime] NULL,
	[Import_Date] [datetime] NULL,
	[Import_Method] [varchar](50) NULL,
	[Required_Export_Date] [datetime] NULL,
	[ShipperAttnTo] [varchar](256) NULL,
	[ConsigneeAttnTo] [varchar](256) NULL,
	[StdCost] [varchar](50) NULL,
	[StdCostPercentage] [decimal](18, 2) NULL,
	[FreightType] [varchar](50) NULL,
	[FreightValue] [numeric](18, 4) NULL,
	[IsCancelled] [bit] NULL,
	[BillTo] [varchar](1000) NULL,
	[InvoiceNum] [varchar](50) NULL,
	[IsRedeployment] [bit] NOT NULL,
	[ToolPanel] [varchar](100) NULL,
	[BuyerText] [varchar](4000) NULL,
	[SellerText] [varchar](4000) NULL,
	[SLILine1] [varchar](256) NULL,
	[SLILine2] [varchar](256) NULL,
	[SLILine3] [varchar](256) NULL,
	[SLILine4] [varchar](256) NULL,
	[SLILine5] [varchar](256) NULL,
	[SLILine6] [varchar](256) NULL,
	[SLILine7] [varchar](256) NULL,
	[SLINotes] [varchar](4000) NULL,
	[DateShipped] [datetime] NULL,
 CONSTRAINT [PK_CustomsInvoices] PRIMARY KEY CLUSTERED 
(
	[CustomsInvoiceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwCustomsInvoiceSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwCustomsInvoiceSearch] AS

Select ci.CustomsInvoiceId
		, ci.InvoiceNumber
		, fromr.RegionDesc as FromRegion
		, fromc.CountryDesc as FromCountry
		, ci.FromBranchPlant
		, frombp.CompanyName as FromBranchPlantName
		, tor.RegionDesc as ToRegion
		, toc.CountryDesc as ToCountry
		, ci.ToBranchPlant
		, tobp.CompanyName as ToBranchPlantName
		, ci.CreatedUserName
		, ci.Description
		, ci.IsAssetShipment
		, (CASE WHEN ci.IsAssetShipment = 1 THEN 'Yes' ELSE 'No' END) as IsAssetShipmentDisplay
		, ci.ShipperLine1
		, ci.IsDangerousGoods
		, (CASE WHEN ci.IsDangerousGoods = 1 THEN 'Yes' ELSE 'No' END) as IsDangerousGoodsDisplay
		, ci.ShipmentMethod
		, ci.ToolPanel
		, ci.Comments
		, ci.CreateDate
		, ci.InvoiceDate
		, ci.AWBNumber
		, ci.TotalValue
from CustomsInvoices(NOLOCK) ci

LEFT OUTER JOIN BranchPlants(NOLOCK) frombp ON frombp.BranchPlant = ci.FromBranchPlant
LEFT OUTER JOIN Regions(NOLOCK) fromr ON fromr.Region = frombp.Region
LEFT OUTER JOIN Countries(NOLOCK) fromc ON fromc.Country = frombp.Country

LEFT OUTER JOIN BranchPlants(NOLOCK) tobp ON tobp.BranchPlant = ci.ToBranchPlant
LEFT OUTER JOIN Regions(NOLOCK) tor ON tor.Region = tobp.Region
LEFT OUTER JOIN Countries(NOLOCK) toc ON toc.Country = tobp.Country

GO
/****** Object:  Table [dbo].[CustomsInvoiceDetails]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CustomsInvoiceDetails](
	[CustomsInvoiceDetailId] [uniqueidentifier] NOT NULL,
	[CustomsInvoiceId] [uniqueidentifier] NOT NULL,
	[LineNumber] [int] NULL,
	[Quantity] [int] NULL,
	[Description] [varchar](255) NULL,
	[SerialNumber] [varchar](255) NULL,
	[PartNumber] [varchar](50) NULL,
	[NewUsed] [varchar](50) NULL,
	[Consumable] [varchar](50) NULL,
	[IsHeader] [bit] NOT NULL,
	[UnitCost] [money] NULL,
	[TotalCost] [money] NULL,
	[NetWeight] [varchar](18) NULL,
	[GrossWeight] [varchar](18) NULL,
	[CountryOfOrigin] [varchar](25) NULL,
	[DisplayOrder] [int] NOT NULL,
	[Size] [varchar](15) NULL,
	[Condition] [varchar](1) NULL,
	[Markup] [decimal](18, 4) NULL,
	[Asset] [varchar](50) NULL,
	[AssetId] [uniqueidentifier] NULL,
	[PartTransferId] [int] NULL,
	[TransferComplete] [bit] NOT NULL,
	[TERNumber] [varchar](64) NULL,
	[DeliveryNoteNumber] [varchar](64) NULL,
	[IsDeliveryNoteStart] [bit] NOT NULL,
	[IsDeliveryNoteEnd] [bit] NOT NULL,
	[TarriffCode] [varchar](50) NULL,
	[ECCNNumber] [varchar](50) NULL,
	[ScheduleB] [varchar](50) NULL,
	[CustomsStatus] [varchar](50) NULL,
	[ToolCode] [varchar](40) NULL,
	[Manufacturer] [varchar](100) NULL,
	[PrevPartStatusId] [int] NULL,
	[ParentCustomsInvoiceDetailId] [uniqueidentifier] NULL,
	[ICBNumber] [bit] NULL,
	[JDENumber] [bit] NULL,
	[ShipmentType] [varchar](20) NULL,
	[AIRT_Number] [varchar](100) NULL,
	[JDEItemNumber] [varchar](50) NULL,
 CONSTRAINT [PK_CustomsInvoiceDetail] PRIMARY KEY CLUSTERED 
(
	[CustomsInvoiceDetailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RequestParts]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RequestParts](
	[RequestPartId] [uniqueidentifier] NOT NULL,
	[RequestId] [int] NOT NULL,
	[PartNum] [varchar](30) NULL,
	[RNItemNum] [varchar](30) NULL,
	[SerialNum] [varchar](30) NULL,
	[AddedBy] [int] NULL,
	[DateAdded] [datetime] NOT NULL,
 CONSTRAINT [PK_ChangeRequestParts] PRIMARY KEY CLUSTERED 
(
	[RequestPartId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwCustomsInvoiceDetailExtraInfo]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwCustomsInvoiceDetailExtraInfo]
AS


SELECT cid.CustomsInvoiceDetailId,
		CASE WHEN ri.StdUnitCost IS NOT NULL AND ri.StdUnitCost > 0 THEN ri.StdUnitCost ELSE ISNULL(i.StdUnitCost,0) END AS StdCost,
		ISNULL(p.Cost,0) * (dbo.fnGetUSDConversionFactor(p.CurrencyCode,NULL)) AS AcquistionValue,
		ISNULL(p.NetBookValue,0) * (dbo.fnGetUSDConversionFactor(p.CurrencyCode,NULL)) AS NetBookValue,
		p.FixedAssetBranchPlant AS ChargeLocationId,
		p.Submt,
		--Convert(bit,(CASE WHEN AssetId IS NOT NULL AND (ToBaseCode = 'FW' OR ToBaseCode = 'GO') AND (Select Count(*) from ShipmentRequestFormDetailAsset s INNER JOIN RequestItemInfoConfigValueCI configCI ON s.CustomsInvoiceDetailId = configCI.CustomsInvoiceDetailId INNER JOIN RequestItem ri ON configCI.RequestItemId = ri.RequestItemId INNER JOIN RequestItemInfoConfig config ON ri.ToolVersion = config.PartNum  Where s.CustomsInvoiceDetailId = cid.CustomsInvoiceDetailId) > 0 THEN 1 ELSE 0 END)) as IsFromShipmentForm,
		
		Convert(bit,(CASE 
			WHEN ci.CustomsInvoiceStatusId <> 0 THEN
				0
			WHEN AssetId IS NULL THEN 
				(CASE WHEN (Select COUNT(*) from Requests r WITH(NOLOCK)
                    INNER JOIN RequestParts rp WITH(NOLOCK) on r.RequestId = rp.RequestId 
                    Where r.RequestType = 'CR' AND Regarding = 'Compliance' 
                    AND r.OpenClosed = 'O' AND rp.PartNum = cid.PartNumber) > 0 THEN 1 ELSE 0 END)
			ELSE 
				(CASE WHEN ( Select COUNT(*) from Requests r WITH(NOLOCK)
								INNER JOIN RequestParts rp WITH(NOLOCK) on r.RequestId = rp.RequestId 
								INNER JOIN  FixedAssets ip with(nolock) on ip.InventoryItemNum = rp.PartNum
								Where r.RequestType = 'CR' AND Regarding = 'Compliance' 
								AND r.OpenClosed = 'O' AND ip.FixedAssetId = cid.AssetId)> 0 THEN 1 ELSE 0 END)
			END)) as IsComplianceCROpen
FROM CustomsInvoiceDetails (NOLOCK) cid
INNER JOIN CustomsInvoices (NOLOCK) ci on ci.CustomsInvoiceId = cid.CustomsInvoiceId
LEFT OUTER JOIN FixedAssets (NOLOCK) p on p.FixedAssetId = cid.AssetId
LEFT OUTER JOIN  ItemNums (NOLOCK) i on i.ItemNum = p.InventoryItemNum
LEFT OUTER JOIN  ItemNums (NOLOCK) ri on ri.ItemNum = p.RNItemNum


GO
/****** Object:  View [dbo].[vwCIApprovedPortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE View [dbo].[vwCIApprovedPortlet] as
SELECT
	cis.CustomsInvoiceId,
	cis.InvoiceNumber,
	cis.FromBranchPlant,
	cis.ToBranchPlant,
	cis.ApprovalDate,
	cis.DateAdded,
	cis.Comments,
	cis.Description,
	cis.CreatedUserName,
	cis.CustomsInvoiceStatusId,
	cs.OptionLabel as StatusDesc
FROM 
	CustomsInvoices cis WITH(NOLOCK)
	Left JOIN SelectOptions AS cs WITH(NOLOCK) ON cis.CustomsInvoiceStatusId = cs.SortOrder and SelectName = 'CustomsInvoiceStatus'

GO
/****** Object:  Table [dbo].[CustomsInvoiceStatus]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CustomsInvoiceStatus](
	[CustomsInvoiceStatusId] [int] NOT NULL,
	[StatusName] [varchar](25) NOT NULL,
	[StatusDesc] [varchar](100) NOT NULL,
 CONSTRAINT [PK_CustomsInvoiceStatus] PRIMARY KEY CLUSTERED 
(
	[CustomsInvoiceStatusId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY],
 CONSTRAINT [IX_CustomsInvoiceStatus_StatusName] UNIQUE NONCLUSTERED 
(
	[StatusName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[CustomsInvoiceSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE VIEW [dbo].[CustomsInvoiceSearch]
AS
SELECT     c.CustomsInvoiceId, c.CustomsInvoiceStatusId, cis.StatusName, cis.StatusDesc, c.FromBranchPlant, 
                      CASE WHEN IsDomesticShipment = 1 THEN CASE WHEN c.InvoiceNum IS NULL THEN ('DS-' + [FromBranchPlant] + '-' + (CAST([InvoiceAutoNumber] AS varchar))) 
                      ELSE ('DS-' + [FromBranchPlant] + '-' + c.InvoiceNum) END ELSE CASE WHEN c.InvoiceNum IS NULL 
                      THEN ('CI-' + [FromBranchPlant] + '-' + (CAST([InvoiceAutoNumber] AS varchar))) ELSE ('CI-' + [FromBranchPlant] + '-' + c.InvoiceNum) END END AS InvoiceNumber, 
                      c.ToBranchPlant, c.TitleText, c.TotalValueText, c.ShipperLine1, c.ShipperLine2, c.ShipperLine3, c.ShipperLine4, c.ShipperLine5, 
                      c.ShipperLine6, c.ShipperLine7, c.ConsigneeLine1, c.ConsigneeLine2, c.ConsigneeLine3, c.ConsigneeLine4, c.ConsigneeLine5, c.ConsigneeLine6, c.ConsigneeLine7, 
                      c.InvoiceAutoNumber, c.InvoiceDate, c.ProcessedBy, c.TrackingNumber, c.PackagingInformation, c.ShipmentMethod, c.TaxIdNumber, c.AirWaybillNumber, 
                      c.ConsigneeNumber, --c.SAPNumber, 
                      c.Comments, c.DateAdded, c.IsRepairShipment, c.DateShipped, --c.DateReceived, 
                      --c.JobNumber, c.ShippingCompany, c.ShippingCompanyPhoneNumber, c.DriverMobileNumber, c.OperatorName, c.WellName, c.DrillingContractor, 
                      --c.RigNameAndNumber, c.Dock, c.DockLocation, c.DockContactPhoneNumber, c.Representing, c.ReceivedBy, 
                      c.ShipperSignatureName, c.ShipperSignatureTitle, 
                      c.CreateDate, c.CreatedUserName, c.LastEditDate, c.LastEditUserName, c.Description, c.Packer, c.PackerDate, c.DateSubmittedForApproval, c.ApprovalDate, 
                      c.IsAirlineApprovalReceived, c.IsImportLicenseReceived, c.IsNRCNotified, c.FreightForwarders, c.AWBNumber, c.EntryNumber, c.EntryDate, c.AccordeFileNo, 
                      c.FileBoxNo, c.ShippingCountry, c.CustomsBrokerCode, c.ETA, c.Units, c.IsShipmentComplete, 
                      --c.ShowAdditionalText, 
                      c.AdditionalText, c.IsDangerousGoods, 
                      c.IsAssetShipment, c.AssetShipmentTitleText, c.AssetShipmentAdditionalText, c.PackingCompleteDate, c.CompleteDate, c.BOLNumber, c.CMRNumber, c.ETA_Transit, 
                      c.ETA_FinalDestination, c.ATA_FinalDestination, c.TotalValue, c.ForwarderDate, c.ForwarderReleaseDate, b1.CompanyName AS ToBaseName, 
                      b1.BranchPlant + ' - ' + b1.CompanyName AS ToBranchPlantFullName, b2.CompanyName AS FromBaseName, b2.BranchPlant + ' - ' + b2.CompanyName AS FromBranchPlantFullName, 
                      c.Notes, c.WorkflowId, c.ATA_Transit, c.Import_Method, c.ConsigneeAttnTo, c.ShipperAttnTo, c.LocationId AS ShipToLocationId,
                      --ISNULL(lo.LocationDesc, '') + ' - ' + ISNULL(lo.DisplayName, '') AS ShipToLocationDesc, lo.DisplayName, lo.LocationCode, lo.LocationDesc,
                      c.StdCost, c.BillTo, c.InvoiceNum, 
                      c.IsRedeployment, c.IsDomesticShipment
                      ,[FinalDestination1]
					,[FinalDestination2]
					,[FinalDestination3]
					,[FinalDestination4]
					,[FinalDestination5]
					,[FinalDestination6]
					,[FinalDestination7]
					, ISNULL(u.FirstName, '') + ' ' + ISNULL(u.LastName, '') AS CreatedFullName--, DateShipBy, Urgency
FROM         dbo.CustomsInvoices AS c INNER JOIN
                      dbo.CustomsInvoiceStatus AS cis ON cis.CustomsInvoiceStatusId = c.CustomsInvoiceStatusId INNER JOIN
                      dbo.BranchPlants AS b1 ON c.ToBranchPlant = b1.BranchPlant INNER JOIN
                      dbo.BranchPlants AS b2 ON c.FromBranchPlant = b2.BranchPlant JOIN 
                      Users u ON u.UserName = c.CreatedUserName




GO
/****** Object:  Table [dbo].[NCRFailureCodes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NCRFailureCodes](
	[NCRFailureCodeId] [int] IDENTITY(1,1) NOT NULL,
	[FailCode] [varchar](100) NOT NULL,
	[FailDesc] [varchar](255) NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_NCRFailureCodes] PRIMARY KEY CLUSTERED 
(
	[NCRFailureCodeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwNCRFailureCodes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwNCRFailureCodes]
AS
SELECT     NCRFailureCodeId, FailCode, FailDesc
FROM         dbo.NCRFailureCodes WITH (NOLOCK)
WHERE     (IsActive = 1)


GO
/****** Object:  Table [dbo].[NCRFailedComponents]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NCRFailedComponents](
	[FailedComponentId] [uniqueidentifier] NOT NULL,
	[RequestId] [int] NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[SerialNum] [varchar](30) NULL,
	[InventoryItemNum] [varchar](30) NULL,
	[RNItemNum] [varchar](30) NULL,
	[AssetNumber] [varchar](10) NULL,
	[AssetDescription] [varchar](90) NULL,
	[ParentAssetNumber] [varchar](10) NULL,
	[NCRFailureCodeId] [int] NULL,
	[Comments] [varchar](4000) NULL,
	[AddedBy] [int] NULL,
	[DateAdded] [date] NOT NULL,
 CONSTRAINT [PK_NCRFailedComponents] PRIMARY KEY CLUSTERED 
(
	[FailedComponentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[NCRRequests]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NCRRequests](
	[RequestId] [int] NOT NULL,
	[PartDesc] [varchar](120) NULL,
	[PartNumber] [varchar](30) NULL,
	[Qty] [int] NULL,
	[Vendor] [varchar](70) NULL,
	[PoNum] [varchar](25) NULL,
	[Line] [varchar](25) NULL,
	[MtNum] [varchar](20) NULL,
	[FailCode] [varchar](100) NULL,
	[HtNum] [varchar](50) NULL,
	[ProbDesc] [varchar](max) NULL,
	[Cause] [varchar](8000) NULL,
	[Disposition] [varchar](25) NULL,
	[DispositionComments] [varchar](8000) NULL,
	[DispositionedBy] [varchar](51) NULL,
	[DispositionDate] [datetime] NULL,
	[SerialNumbers] [varchar](max) NULL,
	[LinkToNCR] [int] NULL,
	[IncidentId] [uniqueidentifier] NULL,
	[WorkOrderNum] [varchar](25) NULL,
	[Category] [varchar](50) NULL,
	[RunNumber] [varchar](50) NULL,
	[JobNumber] [varchar](20) NULL,
	[NewbuildRepair] [varchar](10) NULL,
	[IsBasedOnMeridian] [bit] NOT NULL,
	[Revision] [varchar](20) NULL,
	[RNItemNum] [varchar](30) NULL,
	[RNRevision] [varchar](20) NULL,
	[RNItemDesc] [varchar](120) NULL,
	[Cost] [money] NULL,
	[CurrencyCode] [varchar](3) NULL,
	[RNCost] [money] NULL,
	[RNCurrencyCode] [varchar](3) NULL,
	[JDEWorkOrderNum] [varchar](30) NULL,
	[InternalAnalysis] [varchar](50) NULL,
 CONSTRAINT [PK_NCRRequests] PRIMARY KEY CLUSTERED 
(
	[RequestId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwSearchRequests]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwSearchRequests]
As
SELECT     dbo.Requests.RequestId, dbo.Requests.RequestType, dbo.Requests.Requestor, dbo.Requests.RequestStatus, dbo.Requests.UserIdEntered, 
                      dbo.Requests.DateEntered, dbo.ChangeRequests.DateRequired, dbo.ChangeRequests.DateSubmitted, dbo.ChangeRequests.ChangeRequest, 
                      dbo.ChangeRequests.DetailedReason, dbo.ChangeRequests.ChangesRequired, dbo.ChangeRequests.SpecialNotes, dbo.Requests.DateClosed, 
                      dbo.Requests.OpenClosed, dbo.Requests.Supervisor, dbo.Requests.Regarding, dbo.Requests.RequestorEmail, dbo.ChangeRequests.Division, 
                      dbo.NCRRequests.PartDesc, dbo.NCRRequests.PartNumber, dbo.NCRRequests.Qty, dbo.NCRRequests.Vendor, dbo.NCRRequests.PoNum, 
                      dbo.NCRRequests.Line, dbo.NCRRequests.MtNum, dbo.NCRRequests.FailCode, dbo.NCRRequests.HtNum, dbo.NCRRequests.ProbDesc, 
                      dbo.NCRRequests.Cause, dbo.NCRRequests.Disposition, dbo.NCRRequests.DispositionComments, dbo.NCRRequests.DispositionedBy, dbo.NCRRequests.SerialNumbers, 
                      dbo.NCRRequests.LinkToNCR, dbo.Requests.BranchPlant, dbo.NCRRequests.WorkOrderNum, dbo.NCRRequests.NewbuildRepair, dbo.Requests.IsDraft, dbo.Requests.Subject, 
                      dbo.Requests.StatusChangedBy, dbo.ChangeRequests.Priority, dbo.ChangeRequests.Solution, dbo.ChangeRequests.SolutionComments
                      ,NC.InventoryItemNum as Part_Number
                      , NC.AssetDescription as CompPartDesc
                      , NC.SerialNum
                      , nfc.FailCode as FailureCode
                      , nfc.FailDesc as FailureDesc
                      , dbo.Requests.OrigBranchPlant, dbo.Requests.SupervisorID, dbo.ChangeRequests.ProductLine, dbo.ChangeRequests.DeptCode,
					  AICreator.FirstName + ' ' + AICreator.LastName AS ActionItemCreator, AIAssignee.FirstName + ' ' + AIAssignee.LastName AS ActionItemAssignee, AI.ActionDescription, AI.AssigneeComments, AI.DateAdded AS ActionItemDateAdded,
					  AI.DueDate AS ExpectedCompletionDate, AI.CompletionDate, AI.IsComplete AS IsActionItemComplete
					  , dbo.NCRRequests.Cost
					  , dbo.NCRRequests.CurrencyCode
					  , dbo.NCRRequests.RNItemNum
					  , dbo.NCRRequests.RNCost
					  , dbo.NCRRequests.RNCurrencyCode
					  , InternalAnalysis
FROM Requests WITH(NOLOCK) 
LEFT OUTER JOIN NCRRequests WITH(NOLOCK) ON dbo.Requests.RequestId = dbo.NCRRequests.RequestId LEFT OUTER JOIN
  dbo.ChangeRequests WITH(NOLOCK) ON dbo.Requests.RequestId = dbo.ChangeRequests.RequestId 
  LEFT OUTER JOIN dbo.NCRFailedComponents NC WITH(NOLOCK) on Requests.RequestId = NC.RequestId 
  LEFT OUTER JOIN dbo.NCRFailureCodes nfc WITH(NOLOCK) on nfc.NCRFailureCodeId = NC.NCRFailureCodeId
  LEFT OUTER JOIN dbo.ActionItem AI WITH(NOLOCK) on dbo.NCRRequests.RequestId = AI.RequestId LEFT OUTER JOIN 
  dbo.Users AICreator WITH(NOLOCK) ON AI.UserIdAdded = AICreator.UserId LEFT OUTER JOIN 
  dbo.Users AIAssignee WITH(NOLOCK) ON AI.AssigneeUserId = AIAssignee.UserId




GO
/****** Object:  View [dbo].[VW_DeliveryTicket_JDEMaintenanceMapping]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[VW_DeliveryTicket_JDEMaintenanceMapping]
AS

SELECT DISTINCT p.[PFTWOId] as [MaintenanceFormId],
       v.DispatchNumber,
       f.AssetNumber,
       v.SerialNum,
       v.ItemNum,
       f.RNItemNum,
       v.MaintenanceFormNumber,
       v.Description,
       ts.SerialNumber [ToolString]
FROM [VW_DeliveryTicket_Maintenance] v  (NOLOCK)
JOIN PFTWO p (NOLOCK) ON p.AssetRepairTrackId = v.MaintenanceFormId AND p.Active = 1 AND p.PFTType = 2 -- Inspection PFT
JOIN FixedAssets f (NOLOCK) ON f.FixedAssetId = p.FixedAssetId
LEFT JOIN DispatchInstanceItems dii ON dii.DispatchInstanceItemId = v.DispatchInstanceItemId
LEFT JOIN ToolStrings ts (NOLOCK) ON ts.ToolStringId = dii.ToolStringId
GO
/****** Object:  View [dbo].[vwBHASerialNumLookup]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=======================================================
--MODIFIED BY: SACHIN MHALUNGEKAR
--MODIFIED ON : 9 July 2020
--DESCRIPTION: TO GET Serial nums for BHA
--=======================================================
CREATE VIEW [dbo].[vwBHASerialNumLookup]  
AS  
SELECT a.FixedAssetId  
 , a.AssetNumber  
 , a.BranchPlant  
 , a.FixedAssetBranchPlant  
 , a.SerialNum  
 , a.RNItemNum  
 , a.InventoryItemNum  
 , a.Revision  
 , a.EquipmentStatus  
 , bp.CompanyName As BranchPlantName  
 , ISNULL(rn.ToolCode, inv.ToolCode) As ToolCode  
 , ISNULL(rn.ToolPanel, inv.ToolPanel) As ToolPanel  
 , ISNULL(inv.DescShort, rn.DescShort) As RNDescShort 
 , a.AssetLifeRemaining  
 , ps.Status [AssetStatus]  
 , ps.IsDisposed  
 , gc.GLProductLineId [ProductLine]  
 , (SELECT TOP 1 CASE WHEN ISNULL(dii.DateReturned, '') = '' THEN '' ELSE CONVERT(VARCHAR(10),dii.DateReturned,101) END FROM DispatchInstanceItems dii WITH (NOLOCK) WHERE SerialNum=a.SerialNum AND ItemNum=a.RNItemNum AND ISNULL(ErrorMessage, '')='' ORDER BY dii.DateReturned DESC) DTReturnDate
 , dbo.udf_IsAIRTOrDTAssigned(a.SerialNum, a.InventoryItemNum) As IsAIRTOrDTAssigned
 , (SELECT TOP 1 ArtNumber FROM AssetRepairTrack WITH (NOLOCK) WHERE FixedAssetId =  a.FixedAssetId ORDER BY DateAdded DESC) AS ArtNumber
FROM FixedAssets a WITH (NOLOCK)  
JOIN PartStatus ps WITH (NOLOCK) ON ps.Code = a.EquipmentStatus  
LEFT JOIN BranchPlants bp WITH (NOLOCK) ON bp.BranchPlant = a.BranchPlant  
LEFT JOIN ItemNums rn WITH (NOLOCK) ON rn.ItemNum = a.RNItemNum   
LEFT JOIN ItemNums inv WITH (NOLOCK) ON inv.ItemNum = a.InventoryItemNum 
LEFT JOIN GLCodes gc  WITH (NOLOCK) ON gc.GLCode = a.ProductLineCode  
WHERE a.NotUsed = 0  
  
  
  

GO
/****** Object:  Table [dbo].[Comments]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Comments](
	[CommentId] [uniqueidentifier] NOT NULL,
	[KeyGUId] [uniqueidentifier] NULL,
	[KeyNumId] [int] NULL,
	[Type] [varchar](15) NULL,
	[WFTUserName] [varchar](20) NULL,
	[Comment] [varchar](8000) NULL,
	[DateAdded] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwComments]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwComments] AS
 SELECT 
	f.CommentId,
	f.KeyGUId,
	f.KeyNumId,
	f.Type,
	ISNULL(c.FirstName,'') + ', ' + ISNULL(c.LastName,'') WFTUserName  ,
	f.Comment ,
	f.DateAdded 
FROM Comments  (NOLOCK) f
JOIN Users c on F.WFTUserName = c.WFTUserName  
	
GO
/****** Object:  Table [dbo].[MCApprovals]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MCApprovals](
	[ApprovalId] [uniqueidentifier] NOT NULL,
	[ApprovalCode] [varchar](16) NOT NULL,
	[LocId] [varchar](16) NULL,
	[UserId] [int] NOT NULL,
	[DateApproved] [datetime] NULL,
	[IsApproved] [varchar](1) NOT NULL,
	[Comments] [varchar](4000) NULL,
	[Stage] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[ReferenceId] [uniqueidentifier] NULL,
	[ReferenceIntId] [int] NULL,
 CONSTRAINT [PK_MCApprovals] PRIMARY KEY CLUSTERED 
(
	[ApprovalId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwMCApprovals]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  VIEW [dbo].[vwMCApprovals]
AS
SELECT 
  mca.ApprovalId, mca.ApprovalCode, mca.LocId, mca.UserId, mca.DateApproved, 
  mca.IsApproved, mca.Comments, mca.Stage, mca.DateAdded, mca.ReferenceId,
  u.LastName + ', ' + u.FirstName AS FullName, 
  s.OptionValue AS IsApprovedText, u.UserName, mca.ReferenceIntId
FROM MCApprovals mca WITH(NOLOCK)
LEFT OUTER JOIN Users u WITH(NOLOCK) ON u.UserId = mca.UserId 
LEFT OUTER JOIN SelectOptions s WITH(NOLOCK) ON s.SelectName = 'MCApprovalStatus' AND s.OptionLabel = mca.IsApproved

GO
/****** Object:  Table [dbo].[ChangeNotices]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeNotices](
	[CNId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[CNNum] [varchar](10) NOT NULL,
	[CNDesc] [varchar](4096) NOT NULL,
	[CNSubject] [varchar](60) NULL,
	[CNSummary] [varchar](4096) NULL,
	[ECNNum] [varchar](15) NULL,
	[CRNum] [varchar](15) NULL,
	[CNType] [varchar](25) NULL,
	[DateAdded] [datetime] NOT NULL,
	[CNStatus] [varchar](10) NULL,
	[CNDateClosed] [datetime] NULL,
	[EffectedPartNumber] [varchar](30) NULL,
	[ECRNum] [varchar](15) NULL,
 CONSTRAINT [PK_ChangeNotices] PRIMARY KEY CLUSTERED 
(
	[CNId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ECRs]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ECRs](
	[ECRId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ECRNum] [varchar](25) NOT NULL,
	[Originator] [varchar](50) NOT NULL,
	[OriginatorEmail] [varchar](100) NOT NULL,
	[Supervisor] [varchar](50) NOT NULL,
	[ToolSize] [varchar](50) NOT NULL,
	[BranchPlant] [varchar](25) NOT NULL,
	[ChangeDescription] [varchar](max) NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[UserIdAdded] [int] NOT NULL,
	[DateLastEdit] [datetime] NULL,
	[UserIdLastEdit] [int] NULL,
	[CompletionDate] [datetime] NULL,
	[Priority] [varchar](50) NULL,
	[IsDevelopment] [bit] NOT NULL,
	[IsTooling] [bit] NOT NULL,
	[IsFastTrack] [bit] NOT NULL,
	[IsImmediateInstruction] [bit] NOT NULL,
	[IsTCNRequired] [bit] NOT NULL,
	[ImpactTotalCost] [numeric](18, 2) NOT NULL,
	[Weeks] [varchar](50) NULL,
	[FormStatus] [int] NOT NULL,
	[IsRejected] [bit] NOT NULL,
	[FirstRequiredCompletionDate] [datetime] NULL,
	[SecondRequiredCompletionDate] [datetime] NULL,
	[AppendEmailSubject] [varchar](250) NULL,
 CONSTRAINT [PK_ECRs] PRIMARY KEY CLUSTERED 
(
	[ECRId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ECRDocuments]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ECRDocuments](
	[ECRDocumentId] [uniqueidentifier] NOT NULL,
	[ECRId] [uniqueidentifier] NOT NULL,
	[DocumentId] [varchar](50) NULL,
	[DocumentNumber] [varchar](50) NULL,
	[CurrentRevision] [varchar](20) NULL,
	[NewRevision] [varchar](20) NULL,
	[Description] [varchar](max) NOT NULL,
	[ECRDocumentModLevelId] [int] NULL,
	[Comments] [varchar](max) NULL,
	[DateAdded] [datetime] NOT NULL,
	[UserIdAdded] [int] NOT NULL,
	[SAPNumber] [varchar](50) NULL,
 CONSTRAINT [PK_ECRDocuments] PRIMARY KEY CLUSTERED 
(
	[ECRDocumentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ECRStates]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ECRStates](
	[ECRStateId] [int] NOT NULL,
	[StateDesc] [varchar](50) NOT NULL,
 CONSTRAINT [PK_ECRStates] PRIMARY KEY CLUSTERED 
(
	[ECRStateId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ECRPartNums]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ECRPartNums](
	[ECRPartNumId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ECRId] [uniqueidentifier] NOT NULL,
	[PartNum] [varchar](30) NOT NULL,
	[PartDesc] [varchar](255) NULL,
	[DateAdded] [datetime] NOT NULL,
	[UserIdAdded] [int] NOT NULL,
	[DateLastEdit] [datetime] NULL,
	[UserIdLastEdit] [int] NULL,
 CONSTRAINT [PK_ECRPartNums] PRIMARY KEY CLUSTERED 
(
	[ECRPartNumId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwECRs]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwECRs]
AS
SELECT     e.ECRId, e.ECRNum, e.Originator, ISNULL(u.LastName, '') + ', ' + ISNULL(u.FirstName, '') AS OriginatorName, e.CreateDate, e.CompletionDate, e.Priority, e.Weeks, 
                      e.ToolSize, e.FormStatus, es.StateDesc AS FormStatusDesc, e.BranchPlant, CASE WHEN e.IsDevelopment = 0 THEN 'No' ELSE 'Yes' END AS IsDevelopment, 
                      CASE WHEN e.IsTooling = 0 THEN 'No' ELSE 'Yes' END AS IsTooling, CASE WHEN e.IsFastTrack = 0 THEN 'No' ELSE 'Yes' END AS IsFastTrack, 
                      CASE WHEN e.IsImmediateInstruction = 0 THEN 'No' ELSE 'Yes' END AS IsImmediateInstruction, 
                      CASE WHEN e.IsTCNRequired = 0 THEN 'No' ELSE 'Yes' END AS IsTCNRequired, (CASE WHEN FormStatus > 7 AND FormStatus <= 10 AND CONVERT(varchar, 
                      GETDATE(), 101) > ISNULL(e.SecondRequiredCompletionDate, CONVERT(varchar, GETDATE(), 101)) THEN 'Yes' ELSE 'No' END) AS IsOverdueECR, 
                      (CASE WHEN e.FormStatus > 1 AND e.FormStatus <= 3 AND CONVERT(varchar, GETDATE(), 101) > ISNULL(e.FirstRequiredCompletionDate, CONVERT(varchar, 
                      GETDATE(), 101)) THEN 'Yes' ELSE 'No' END) AS IsOverdueEvaluation, STUFF
                          ((SELECT     ', ' + PartNum
                              FROM         ECRPartNums p WITH (NOLOCK)
                              WHERE     p.ECRId = e.ECRId FOR XML PATH('')), 1, 1, '') AS PartNum, STUFF
                          ((SELECT     ', ' + DocumentNumber
                              FROM         ECRDocuments d WITH (NOLOCK)
                              WHERE     d .ECRId = e.ECRId FOR XML PATH('')), 1, 1, '') AS DocumentNumber,
                          (SELECT     TOP 1 fullname
                            FROM          vwMCApprovals mca WITH (NOLOCK), Users u WITH (NOLOCK)
                            WHERE      mca.UserId = u.UserId AND mca.ReferenceId = ECRId AND mca.IsApproved = 'n'
                            ORDER BY Stage ASC) AS NextApprover, e.FirstRequiredCompletionDate,
                          (SELECT     TOP 1 DateApproved
                            FROM          MCApprovals WITH (NOLOCK)
                            WHERE      Stage = 3 AND ReferenceId = e.ECRId) AS Pending2ndEvaluationApprovalDate, e.SecondRequiredCompletionDate,
                          (SELECT     TOP 1 DateApproved
                            FROM          MCApprovals WITH (NOLOCK)
                            WHERE      Stage = 10 AND ReferenceId = e.ECRId) AS PendingEngineeringChangeApprovalDate,
						   bp.CompanyName,
						   STUFF((SELECT ', ' + CNNum FROM ChangeNotices CN WITH (NOLOCK) 
									where CN.ECRNum = e.ECRNum FOR XML PATH('')), 1, 1, '') AS TCNNumber
									
FROM         ECRs e WITH (NOLOCK) JOIN
                      ECRStates es WITH (NOLOCK) ON e.FormStatus = es.ECRStateId LEFT JOIN
                      Users u WITH (nolock) ON u.UserName = e.Originator LEFT JOIN
                      BranchPlants bp WITH (NOLOCK) ON bp.BranchPlant = e.BranchPlant


GO
/****** Object:  Table [dbo].[GVWEquipmentRequests]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GVWEquipmentRequests](
	[GVWEquipmentRequestId] [int] IDENTITY(1,1) NOT NULL,
	[GVWEquipmentRequestNo] [varchar](50) NULL,
	[RequestBranchPlant] [varchar](25) NULL,
	[RequestedBy] [varchar](50) NULL,
	[DateRequired] [datetime] NOT NULL,
	[Remarks] [varchar](4096) NULL,
	[JDELocalApproverNo] [varchar](50) NULL,
	[Priority] [varchar](50) NULL,
	[SubmitRequestedDate] [datetime] NULL,
	[SubmitRequestedBy] [varchar](50) NULL,
	[ProductLine] [varchar](40) NULL,
	[LastEdit] [datetime] NULL,
	[LastEditBy] [int] NULL,
	[DateAdded] [datetime] NULL,
	[UserIdAdded] [int] NULL,
	[DateCompleted] [datetime] NULL,
	[DateApproved] [datetime] NULL,
	[Status] [varchar](25) NULL,
	[Stage] [smallint] NULL,
 CONSTRAINT [PK_GVWEquipmentRequest] PRIMARY KEY CLUSTERED 
(
	[GVWEquipmentRequestId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwGVWEquipmentRequests]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE View [dbo].[vwGVWEquipmentRequests] as
SELECT      gvw.GVWEquipmentRequestId, 
			gvw.GVWEquipmentRequestNo, 
			gvw.RequestBranchPlant, 
			gvw.RequestedBy, 
			gvw.DateRequired, 
			gvw.Remarks, 
			gvw.JDELocalApproverNo, 
			gvw.Priority, 
			gvw.SubmitRequestedDate, 
			gvw.ProductLine, 
			gvw.DateApproved, 
			gvw.Status,
			gvw.DateCompleted,
			(Select TOP 1 UserName From vwMCApprovals Where ApprovalCode = 'GVW' AND ReferenceIntId = gvw.GVWEquipmentRequestID AND IsApproved = 'N') as NextApprover,
			bp.CompanyName as RequestBranchPlantName,
			r.RegionDesc as RequestRegion,
			c.CountryDesc as RequestCountry
FROM GVWEquipmentRequests gvw(NOLOCK)
LEFT JOIN BranchPlants bp WITH(NOLOCK) ON bp.BranchPlant = gvw.RequestBranchPlant
LEFT JOIN Regions r WITH(NOLOCK) ON r.Region = bp.Region
LEFT JOIN Countries c WITH(NOLOCK) ON c.Country = bp.Country



GO
/****** Object:  View [dbo].[vwNCRRequests]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwNCRRequests]
AS
SELECT		nr.RequestId, 
            r.RequestType, 
            r.Requestor, 
            r.RequestorEmail, 
            r.RequestStatus, 
            r.UserIdEntered, 
            r.DateEntered, 
            r.Regarding, 
            r.Supervisor, 
            r.OpenClosed, 
            r.DateClosed, 
            r.BranchPlant, 
            r.StatusChangedBy, 
            r.IsDraft, 
            r.Subject, 
            r.OrigBranchPlant,
            r.SupervisorID,
            r.LastEdit,
            r.LastEditBy, 
			nr.PartDesc, 
			nr.PartNumber, 
			nr.Qty, 
			nr.Vendor, 
			nr.PoNum, 
			nr.Line, 
			nr.MtNum, 
			nr.FailCode, 
			nr.HtNum, 
            nr.ProbDesc, 
            nr.Cause, 
            nr.Disposition, 
            nr.DispositionComments, 
            nr.DispositionedBy, 
            nr.DispositionDate, 
            nr.SerialNumbers, 
            nr.LinkToNCR,
            nr.IncidentId, 
            nr.WorkOrderNum, 
            nr.Category, 
            nr.RunNumber, 
            nr.JobNumber, 
            nr.NewbuildRepair,
            nr.Revision,
            nr.RNItemNum,
            nr.RNRevision,
			InternalAnalysis
FROM NCRRequests nr (NOLOCK)
LEFT JOIN Requests r (NOLOCK) ON r.RequestId = nr.RequestId
GO
/****** Object:  View [dbo].[NCRLookup]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[NCRLookup]
AS
SELECT     
	CONVERT(VARCHAR, RequestId) AS RequestId, 
	PartDesc, 
	PartNumber, 
	OpenClosed, 
Subject
FROM         dbo.vwNCRRequests

GO
/****** Object:  Table [dbo].[PFTWOFormCollectionFields]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTWOFormCollectionFields](
	[PFTWOFormCollectionFieldId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[PFTWOFormCollectionId] [uniqueidentifier] NOT NULL,
	[ObjectId] [int] NULL,
	[UOM] [varchar](100) NULL,
	[Result] [varchar](100) NULL,
	[FieldResult] [varchar](1) NULL,
	[ResultInEmpirical] [varchar](100) NULL,
	[TextResult1] [varchar](100) NULL,
	[TextResult2] [varchar](100) NULL,
	[TextResult3] [varchar](100) NULL,
	[TextResult4] [varchar](100) NULL,
	[SequenceNumber] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[UpdatedBy] [int] NULL,
	[UpdatedOn] [datetime] NULL,
 CONSTRAINT [PK_PFTWOFormCollectionFields] PRIMARY KEY CLUSTERED 
(
	[PFTWOFormCollectionFieldId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[VW_PFTObjectFormCollectionFields]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 -- =============================================  
-- Author:  Sachin Mhalungekar
-- Create date: 11/11/2019  
-- Description: Get PFT Object form collection fields data
-- =============================================  
CREATE VIEW [dbo].[VW_PFTObjectFormCollectionFields]          
AS                  
SELECT Distinct p.ObjectId,                  
 p.ObjectNumber,                  
 p.Revision,            
 p.Type [ObjectType],                  
 t.OptionLabel [ObjectTypeName],                  
 p.Name [PFTObjectName],                  
 p.Description [PFTObjectDescription],                
 p.State [ObjectState],          
 CASE WHEN p.Type = 3 THEN (SELECT TOP 1 BlobContent FROM PFTBlobObjects WHERE ObjectId = p.ObjectId) ELSE p.Field1 END [Field1],                 
 Field1Name,                  
 p.Field2,
 CASE  
      WHEN (p.type = 5 and Field1Name='Number') THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = p.Field2)                        
  Else Null END [Field2Name],              
 p.Field3,                  
 p.Field4,   
  CASE  
      WHEN p.type = 5 AND p.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'MathSign' and OptionValue = p.Field4)                        
  Else p.Field4 END [Field4Name],                  
 CASE WHEN ISNULL(pwfc.UOM,'') != '' THEN pwfc.UOM ELSE p.Field5 END [Field5],
 --CASE  
 --     WHEN p.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = CASE WHEN ISNULL(pwfc.UOM,'') != '' THEN pwfc.UOM ELSE p.Field5 END)                        
 --ELSE CASE WHEN ISNULL(pwfc.UOM,'') != '' THEN pwfc.UOM ELSE p.Field5 END  END [Field5Name],        
 CASE  
      WHEN p.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = p.Field5)                        
 ELSE  p.Field5  END [Field5Name],            
 p.Field6,
 p.Field7,
 p.Field8,
 p.Field9,
 p.Field10,
 p.Field11,
 CASE  
      WHEN p.type = 5 AND p.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = p.Field11)                        
  Else p.Field11 END [Field11Name], 
 p.Field12,
 CASE  
      WHEN p.type = 5 AND p.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = p.Field12)                        
  Else p.Field12 END [Field12Name], 
 p.Field13,
 CASE  
      WHEN p.type = 5 AND p.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = p.Field13)                        
  Else p.Field13 END [Field13Name], 
 p.Field14,
 p.Field15,
 pwfs.PFTConfigSeqId,
 pwfs.PFTWOFormCollectionId,
 pwfc.PFTWOFormCollectionFieldId,
 pwfc.Result, 
 CASE	WHEN Field1Name = 'Simple Choice' AND Field2 = 'yesno' AND pwfc.Result ='Yes' THEN CAST (1 AS BIT)
		--WHEN Field1Name = 'Simple Choice' AND Field2 = 'yesno' AND pwfc.Result ='No' THEN 'false' 
		WHEN Field1Name = 'Simple Choice' AND Field2 = 'passfail' AND pwfc.Result ='Pass' THEN CAST (1 AS BIT) 
		--WHEN Field1Name = 'Simple Choice' AND Field2 = 'passfail' AND pwfc.Result ='Fail' THEN 'false'
		ELSE CAST (0 AS BIT) END Result1 ,
 pwfc.UOM,
 pwfc.ResultInEmpirical,
 pwfc.TextResult1,
 pwfc.TextResult2,
 pwfc.TextResult3,
 pwfc.TextResult4,
 pwfc.UserId,
 pwfc.DateAdded,
 pwfc.FieldResult,
 pom.SequenceNumber
 FROM  PFTWOFormCollections (NOLOCK) pwfs                                  
JOIN PFTObjectMappings (NOLOCK) pom ON   pom.ParentId = pwfs.ObjectId
join PFTObjects (NOLOCK) p   ON p.ObjectId = pom.ObjectId
LEFT JOIN PFTWOFormCollectionFields (NOLOCK) pwfc on pwfc.PFTWOFormCollectionId = pwfs.PFTWOFormCollectionId AND pwfc.ObjectId = p.ObjectId  AND pwfc.SequenceNumber = pom.SequenceNumber
JOIN SelectOptions (NOLOCK) s ON p.[State] = s.OptionValue and s.SelectName = 'PFTObjectState'                  
JOIN SelectOptions (NOLOCK) t ON p.[Type] = t.OptionValue and t.SelectName = 'PFTObjectType'
--- For Field Name 
cross APPLY (select CASE WHEN p.Type = 1 THEN 
  (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'PFTConfigType' AND OptionValue = p.Field1 )                   
           WHEN p.type = 2 THEN (SELECT LabName FROM PFTLabs WHERE PFTLabId = p.Field1)                   
      WHEN p.type = 4 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'MessageIcon' AND OptionValue = p.Field1  ) 
      WHEN p.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldType' AND OptionValue = p.Field1  )                        
  Else p.Field1 END [Field1Name]  )   as Field1Name


GO
/****** Object:  View [dbo].[vwCRNCRPortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwCRNCRPortlet] as
SELECT     r.RequestId, 
		   r.RequestType, 
		   r.Requestor,
		   cr.Priority,
		   p.OptionLabel as PriorityDesc,
		   r.Subject, 
		   r.RequestStatus,
		   r.BranchPlant,
		   r.OpenClosed,
		   oc.OptionLabel  as OpenClosedDesc,
		   (SELECT top 1 FullName FROM vwRequestApprovals WITH(NOLOCK) WHERE approvalstatus='X' AND vwRequestApprovals.RequestId = r.RequestId) AS NextApprover,
		   u.UserName AS AddedByUserName
FROM Requests r WITH(NOLOCK) 
LEFT OUTER JOIN NCRRequests ncr WITH(NOLOCK) ON r.RequestId = ncr.RequestId 
LEFT OUTER JOIN  ChangeRequests cr WITH(NOLOCK) ON r.RequestId = cr.RequestId
LEFT JOIN SelectOptions oc WITH(NOLOCK) ON oc.OptionValue = r.OpenClosed and oc.SelectName = 'RequestStatus'
LEFT JOIN SelectOptions p WITH(NOLOCK) ON p.OptionValue = cr.Priority and p.SelectName = 'Priority'
LEFT JOIN Users u WITH(NOLOCK) ON u.UserId = r.UserIdEntered
WHERE r.RequestType IN ('CR', 'NCR') AND r.OpenClosed <> 'C'


GO
/****** Object:  Table [dbo].[CAPARequests]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CAPARequests](
	[RequestId] [int] NOT NULL,
	[Type] [varchar](3) NOT NULL,
	[Priority] [varchar](10) NULL,
	[Requirments] [text] NULL,
	[Description] [text] NULL,
	[Evidence] [text] NULL,
	[ResponseDueDate] [datetime] NULL,
	[ShortTermSolution] [varchar](1024) NULL,
	[RootCauseInvestigation] [text] NULL,
	[CAPreventRecurrence] [text] NULL,
	[PlannedCompletionDate] [datetime] NULL,
	[VerificationText] [varchar](1024) NULL,
	[CAPAId] [int] NULL,
 CONSTRAINT [PK_CAPARequests] PRIMARY KEY CLUSTERED 
(
	[RequestId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WCCMigration]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WCCMigration](
	[DocItemAttachId] [uniqueidentifier] NOT NULL,
	[MigrationStatus] [varchar](50) NULL,
 CONSTRAINT [PK_WCCMigration_DocItemAttachId] PRIMARY KEY CLUSTERED 
(
	[DocItemAttachId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DocItems]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DocItems](
	[DocItemId] [int] IDENTITY(1,1) NOT NULL,
	[DocItemTitle] [varchar](512) NOT NULL,
	[DocItemDesc] [varchar](1024) NULL,
	[DocItemFilePath] [varchar](1024) NULL,
	[DocItemFileName] [varchar](255) NULL,
	[DocItemFileSize] [numeric](18, 0) NULL,
	[DocItemType] [tinyint] NOT NULL,
	[DocItemDate] [datetime] NULL,
	[ParentDocItemId] [int] NULL,
	[OriginalFileName] [varchar](255) NULL,
	[UploadedBy] [int] NULL,
	[DateAdded] [datetime] NULL,
	[IsControlled] [bit] NOT NULL,
	[Uncontrolled] [bit] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[LegacyKeyId] [int] NULL,
	[LegacySource] [varchar](25) NULL,
	[DocumentCategory] [varchar](100) NULL,
	[WCCDocId] [varchar](25) NULL,
 CONSTRAINT [PK_DocItems] PRIMARY KEY CLUSTERED 
(
	[DocItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Calibrations]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Calibrations](
	[CalibId] [int] IDENTITY(1,1) NOT NULL,
	[CalibType] [varchar](50) NOT NULL,
	[AssetNumber] [varchar](25) NULL,
	[AssetType] [varchar](25) NULL,
	[Manufacturer] [varchar](50) NULL,
	[Model] [varchar](25) NULL,
	[SerialNumber] [varchar](25) NULL,
	[Description] [varchar](255) NULL,
	[LastCalDate] [datetime] NULL,
	[CalInterval] [int] NULL,
	[Company] [varchar](50) NULL,
	[Department] [varchar](25) NULL,
	[Owner] [varchar](25) NULL,
	[InServiceDate] [datetime] NULL,
	[Status] [varchar](25) NULL,
	[Comments] [varchar](4000) NULL,
	[UserIdAdded] [int] NULL,
	[DateAdded] [datetime] NOT NULL,
	[Location] [varchar](50) NULL,
	[StandardCalibratedAgainst] [varchar](100) NULL,
	[AcceptanceCriteria] [varchar](50) NULL,
	[ConditionReceived] [varchar](50) NULL,
	[IDLH] [bit] NOT NULL,
	[ReferenceOnlyEquipment] [bit] NOT NULL,
	[CalibrationCoordinator] [varchar](50) NULL,
	[Originator] [varchar](50) NULL,
	[IntervalType] [varchar](50) NULL,
 CONSTRAINT [PK_Calibrations] PRIMARY KEY CLUSTERED 
(
	[CalibId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[Vw_WCC_Documents]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[Vw_WCC_Documents]
AS
-- Fixed Assets
SELECT a.*,
CASE WHEN CHARINDEX ('D:\Prod\AttachDoc', a.DocItemFilePath) > 0 THEN 'DO NOT IMPORT' ELSE s.MigrationStatus END [MigrationStatus]
FROM
(
SELECT
	WCCDocId,DocItemAttachId,
	DocItemTitle										[dDocTitle],
	DocItemDesc											[DocDescription],
	null												[dDocType],
	CASE WHEN i.IsDeleted = 1 THEN 0 ELSE 1 END			[xActiveFlag], 
	null												[xBranchPlant], 
	i.DocItemDate										[xCaptureDate], 
	null												xDeliveryTicketNumber,
	CASE WHEN DocumentCategory IS NULL 
			THEN 'Misc Document' ELSE DocumentCategory 
	END													[xDocumentType],
	null												[xDocumentType2],
	f.InventoryItemNum									[xGenericNumber05],
	f.RNItemNum											[xGenericNumber06],
	null												[xGrade],
	f.AssetNumber										[xJDEAssetNumber],
	null												[xLegacyWorkOrderNumber],
	null												[xRegion],					-----?????
	f.SerialNum											[xSerialNumber],
	DocItemFileSize										[xSize],
	u.WftUserName										[xUserId],
	null												[xWorkOrderNumber],
	'MyAdvisor'											[xInputSource],
	'Asset'												[xScreenName],
	null												[xApplicationGroupId],
	CONVERT(varchar(max), f.FixedAssetId)				[xApplicationId],
	OriginalFileName,
	(CASE WHEN CHARINDEX('D:\', i.DocItemFilePath) > 0 OR CHARINDEX('e:\', i.DocItemFilePath) > 0 
		THEN '' ELSE 'D:\WebFiles\Advisor\' END + i.DocItemFilePath + '\' + DocItemFileName) as DocItemFilePath,
	DocItemFilePath [FilePath],
	DocItemFileName [FileName]
FROM DocItemAttach a
JOIN DocItems i ON a.DocItemId = i.DocItemId
JOIN FixedAssets f ON a.GuidKeyId = f.FixedAssetId
LEFT JOIN Users u ON u.UserId = i.UploadedBy
WHERE DocItemFileName IS NOT NULL

UNION

-- PFT WO

SELECT 
	WCCDocId,DocItemAttachId,
	DocItemTitle										[dDocTitle],
	DocItemDesc											[DocDescription],
	null												[dDocType],
	CASE WHEN i.IsDeleted = 1 THEN 0 ELSE 1 END			[xActiveFlag], 
	null												[xBranchPlant], 
	i.DocItemDate										[xCaptureDate], 
	null												xDeliveryTicketNumber,
	CASE WHEN DocumentCategory IS NULL 
			THEN 'Misc Document' ELSE DocumentCategory 
	END													[xDocumentType],
	null												[xDocumentType2],
	p.ItemNum											[xGenericNumber05],
	f.RNItemNum											[xGenericNumber06],
	null												[xGrade],
	p.AssetNumber										[xJDEAssetNumber],
	null												[xLegacyWorkOrderNumber],
	null												[xRegion],					-----?????
	p.SerialNum											[xSerialNumber],
	DocItemFileSize										[xSize],
	u.WftUserName										[xUserId],
	null												[xWorkOrderNumber],
	'MyAdvisor'											[xInputSource],
	'PFT'												[xScreenName],
	p.PFTWOId											[xApplicationGroupId],
	CONVERT(varchar(36), SubKeyId)						[xApplicationId],
	OriginalFileName,
	(CASE WHEN CHARINDEX('D:\', i.DocItemFilePath) > 0 OR CHARINDEX('e:\', i.DocItemFilePath) > 0 
		THEN '' ELSE 'D:\WebFiles\Advisor\' END + i.DocItemFilePath + '\' + DocItemFileName) as DocItemFilePath,
	DocItemFilePath [FilePath],
	DocItemFileName [FileName]

FROM DocItemAttach a 
JOIN DocItems i ON a.DocItemId = i.DocItemId
JOIN PFTWO p ON p.PFTWOId = a.GuidKeyId
LEFT JOIN FixedAssets f ON f.FixedAssetId = p.FixedAssetId
LEFT JOIN Users u ON u.UserId = i.UploadedBy
--WHERE 1 = 2
UNION 

-- CAL (Calibration)
SELECT 
	WCCDocId,DocItemAttachId,
	DocItemTitle										[dDocTitle],
	DocItemDesc											[DocDescription],
	null												[dDocType],
	CASE WHEN i.IsDeleted = 1 THEN 0 ELSE 1 END			[xActiveFlag], 
	null												[xBranchPlant], 
	i.DocItemDate										[xCaptureDate], 
	null												xDeliveryTicketNumber,
	CASE WHEN DocumentCategory IS NULL 
			THEN 'Misc Document' ELSE DocumentCategory 
	END													[xDocumentType],
	null												[xDocumentType2],
	fa.InventoryItemNum									[xGenericNumber05],
	fa.RNItemNum										[xGenericNumber06],
	null												[xGrade],
	null												[xJDEAssetNumber],
	null												[xLegacyWorkOrderNumber],
	null												[xRegion],					-----?????
	null												[xSerialNumber],
	DocItemFileSize										[xSize],
	u.WftUserName										[xUserId],
	null												[xWorkOrderNumber],
	'MyAdvisor'											[xInputSource],
	'Calibration'										[xScreenName],
	null												[xApplicationGroupId],
	CONVERT(varchar(36), e.CalibId)						[xApplicationId],
	OriginalFileName,
	(CASE WHEN CHARINDEX('D:\', i.DocItemFilePath) > 0 OR CHARINDEX('e:\', i.DocItemFilePath) > 0 
		THEN '' ELSE 'e:\WebFiles\MCDocs\' END + i.DocItemFilePath + '\' + DocItemFileName),
	DocItemFilePath [FilePath],
	DocItemFileName [FileName]
FROM DocItemAttach a 
JOIN DocItems i ON a.DocItemId = i.DocItemId
JOIN Calibrations e ON a.KeyId = e.CalibId
LEFT JOIN FixedAssets fa ON fa.AssetNumber = e.AssetNumber
LEFT JOIN Users u ON u.UserId = i.UploadedBy
WHERE DocItemAttachType ='CAL' --and 1 = 2

UNION 

-- CAPA Requests
SELECT 
	WCCDocId,DocItemAttachId,
	DocItemTitle										[dDocTitle],
	DocItemDesc											[DocDescription],
	null												[dDocType],
	CASE WHEN i.IsDeleted = 1 THEN 0 ELSE 1 END			[xActiveFlag], 
	null												[xBranchPlant], 
	i.DocItemDate										[xCaptureDate], 
	null												xDeliveryTicketNumber,
	CASE WHEN DocumentCategory IS NULL 
			THEN 'Misc Document' ELSE DocumentCategory 
	END													[xDocumentType],
	null												[xDocumentType2],
	null												[xGenericNumber05],
	null												[xGenericNumber06],
	null												[xGrade],
	null												[xJDEAssetNumber],
	null												[xLegacyWorkOrderNumber],
	null												[xRegion],					-----?????
	null												[xSerialNumber],
	DocItemFileSize										[xSize],
	u.WftUserName										[xUserId],
	null												[xWorkOrderNumber],
	'MyAdvisor'											[xInputSource],
	'CAPA Requests'										[xScreenName],
	null												[xApplicationGroupId],
	CONVERT(varchar(36), e.RequestId)					[xApplicationId],
	OriginalFileName,
	(CASE WHEN CHARINDEX('D:\', i.DocItemFilePath) > 0 OR CHARINDEX('e:\', i.DocItemFilePath) > 0 
		THEN '' ELSE 'D:\WebFiles\Advisor\' END + i.DocItemFilePath + '\' + DocItemFileName) as DocItemFilePath,
	DocItemFilePath [FilePath],
	DocItemFileName [FileName]
FROM DocItemAttach a 
JOIN DocItems i ON a.DocItemId = i.DocItemId
JOIN CAPARequests e ON a.KeyId = e.RequestId
LEFT JOIN Users u ON u.UserId = i.UploadedBy
WHERE DocItemAttachType ='CAPA' --and 1 = 2

UNION

-- ECN Process
SELECT 
	WCCDocId,DocItemAttachId,
	DocItemTitle										[dDocTitle],
	DocItemDesc											[DocDescription],
	null												[dDocType],
	CASE WHEN i.IsDeleted = 1 THEN 0 ELSE 1 END			[xActiveFlag], 
	null												[xBranchPlant], 
	i.DocItemDate										[xCaptureDate], 
	null												xDeliveryTicketNumber,
	CASE WHEN DocumentCategory IS NULL 
			THEN 'Misc Document' ELSE DocumentCategory 
	END													[xDocumentType],
	null												[xDocumentType2],
	null												[xGenericNumber05],
	null												[xGenericNumber06],
	null												[xGrade],
	null												[xJDEAssetNumber],
	null												[xLegacyWorkOrderNumber],
	null												[xRegion],					-----?????
	null												[xSerialNumber],
	DocItemFileSize										[xSize],
	u.WftUserName										[xUserId],
	null												[xWorkOrderNumber],
	'MyAdvisor'											[xInputSource],
	'ECN Process'										[xScreenName],
	null												[xApplicationGroupId],
	CONVERT(varchar(36), i.DocItemId)					[xApplicationId],
	OriginalFileName,
	'E:\WebFiles\' + REPLACE(i.DocItemFilePath, 'e:\WebFiles\', '') + '\' + DocItemFileName,
	DocItemFilePath [FilePath],
	DocItemFileName [FileName]
FROM DocItemAttach a 
JOIN DocItems i ON a.DocItemId = i.DocItemId
LEFT JOIN Users u ON u.UserId = i.UploadedBy
WHERE DocItemAttachType ='ECN Process' --and 1 = 2


UNION

-- ECR
SELECT 
	WCCDocId,DocItemAttachId,
	DocItemTitle										[dDocTitle],
	DocItemDesc											[DocDescription],
	null												[dDocType],
	CASE WHEN i.IsDeleted = 1 THEN 0 ELSE 1 END			[xActiveFlag], 
	null												[xBranchPlant], 
	i.DocItemDate										[xCaptureDate], 
	null												xDeliveryTicketNumber,
	CASE WHEN DocumentCategory IS NULL 
			THEN 'Misc Document' ELSE DocumentCategory 
	END													[xDocumentType],
	null												[xDocumentType2],
	null												[xGenericNumber05],
	null												[xGenericNumber06],
	null												[xGrade],
	null												[xJDEAssetNumber],
	null												[xLegacyWorkOrderNumber],
	null												[xRegion],					-----?????
	null												[xSerialNumber],
	DocItemFileSize										[xSize],
	u.WftUserName										[xUserId],
	null												[xWorkOrderNumber],
	'MyAdvisor'											[xInputSource],
	'ECR'												[xScreenName],
	null												[xApplicationGroupId],
	CONVERT(varchar(36), e.ECRId)						[xApplicationId],
	OriginalFileName,
	'D:\WebFiles\Advisor\' + REPLACE(i.DocItemFilePath, 'e:\WebFiles\', '') + '\' + DocItemFileName,
	DocItemFilePath [FilePath],
	DocItemFileName [FileName]
FROM DocItemAttach a 
JOIN DocItems i ON a.DocItemId = i.DocItemId
JOIN ECRs e ON a.GuidKeyId = e.ECRId
LEFT JOIN Users u ON u.UserId = i.UploadedBy
WHERE DocItemAttachType ='ECR' --and 1 = 2


UNION

-- GFA
SELECT 
	WCCDocId,DocItemAttachId,
	DocItemTitle										[dDocTitle],
	DocItemDesc											[DocDescription],
	null												[dDocType],
	CASE WHEN i.IsDeleted = 1 THEN 0 ELSE 1 END			[xActiveFlag], 
	null												[xBranchPlant], 
	i.DocItemDate										[xCaptureDate], 
	null												xDeliveryTicketNumber,
	CASE WHEN DocumentCategory IS NULL 
			THEN 'Misc Document' ELSE DocumentCategory 
	END													[xDocumentType],
	null												[xDocumentType2],
	null												[xGenericNumber05],
	null												[xGenericNumber06],
	null												[xGrade],
	null												[xJDEAssetNumber],
	null												[xLegacyWorkOrderNumber],
	null												[xRegion],					-----?????
	null												[xSerialNumber],
	DocItemFileSize										[xSize],
	u.WftUserName										[xUserId],
	null												[xWorkOrderNumber],
	'MyAdvisor'											[xInputSource],
	'GFA'										[xScreenName],
	null												[xApplicationGroupId],
	CONVERT(varchar(36), e.GFAId)						[xApplicationId],
	OriginalFileName,
	(CASE WHEN CHARINDEX('D:\', i.DocItemFilePath) > 0 OR CHARINDEX('e:\', i.DocItemFilePath) > 0 
		THEN '' ELSE 'D:\WebFiles\Advisor\' END + i.DocItemFilePath + '\' + DocItemFileName) as DocItemFilePath,
	DocItemFilePath [FilePath],
	DocItemFileName [FileName]
FROM DocItemAttach a 
JOIN DocItems i ON a.DocItemId = i.DocItemId
JOIN GFAIncidents e ON a.GuidKeyId = e.GFAId
LEFT JOIN Users u ON u.UserId = i.UploadedBy
WHERE DocItemAttachType ='GFA' --and 1 = 2


UNION

-- NCR 
SELECT 
	WCCDocId,DocItemAttachId,
	DocItemTitle										[dDocTitle],
	DocItemDesc											[DocDescription],
	null												[dDocType],
	CASE WHEN i.IsDeleted = 1 THEN 0 ELSE 1 END			[xActiveFlag], 
	null												[xBranchPlant], 
	i.DocItemDate										[xCaptureDate], 
	null												xDeliveryTicketNumber,
	CASE WHEN DocumentCategory IS NULL 
			THEN 'Misc Document' ELSE DocumentCategory 
	END													[xDocumentType],
	null												[xDocumentType2],
	null												[xGenericNumber05],
	e.RNItemNum											[xGenericNumber06],
	null												[xGrade],
	null												[xJDEAssetNumber],
	null												[xLegacyWorkOrderNumber],
	null												[xRegion],					-----?????
	null												[xSerialNumber],
	DocItemFileSize										[xSize],
	u.WftUserName										[xUserId],
	null												[xWorkOrderNumber],
	'MyAdvisor'											[xInputSource],
	'NCR'										[xScreenName],
	null												[xApplicationGroupId],
	CONVERT(varchar(36), e.RequestId)					[xApplicationId],
	OriginalFileName,
	(CASE WHEN CHARINDEX('D:\', i.DocItemFilePath) > 0 OR CHARINDEX('e:\', i.DocItemFilePath) > 0 
		THEN '' ELSE 'D:\WebFiles\Advisor\' END + i.DocItemFilePath + '\' + DocItemFileName) as DocItemFilePath,
	DocItemFilePath [FilePath],
	DocItemFileName [FileName]
FROM DocItemAttach a 
JOIN DocItems i ON a.DocItemId = i.DocItemId
JOIN NCRRequests e ON a.KeyId = e.RequestId
LEFT JOIN Users u ON u.UserId = i.UploadedBy
WHERE DocItemAttachType ='NCR' --and 1 = 2


UNION

-- NCR 
SELECT 
	WCCDocId,DocItemAttachId,
	DocItemTitle										[dDocTitle],
	DocItemDesc											[DocDescription],
	null												[dDocType],
	CASE WHEN i.IsDeleted = 1 THEN 0 ELSE 1 END			[xActiveFlag], 
	null												[xBranchPlant], 
	i.DocItemDate										[xCaptureDate], 
	null												xDeliveryTicketNumber,
	CASE WHEN DocumentCategory IS NULL 
			THEN 'Misc Document' ELSE DocumentCategory 
	END													[xDocumentType],
	null												[xDocumentType2],
	null												[xGenericNumber05],
	null												[xGenericNumber06],
	null												[xGrade],
	null												[xJDEAssetNumber],
	null												[xLegacyWorkOrderNumber],
	null												[xRegion],					-----?????
	null												[xSerialNumber],
	DocItemFileSize										[xSize],
	u.WftUserName										[xUserId],
	null												[xWorkOrderNumber],
	'MyAdvisor'											[xInputSource],
	'Request Form'										[xScreenName],
	null												[xApplicationGroupId],
	CONVERT(varchar(36), e.RequestFormId)				[xApplicationId],
	OriginalFileName,
	(CASE WHEN CHARINDEX('D:\', i.DocItemFilePath) > 0 OR CHARINDEX('e:\', i.DocItemFilePath) > 0 
		THEN '' ELSE 'D:\WebFiles\Advisor\' END + i.DocItemFilePath + '\' + DocItemFileName) as DocItemFilePath,
	DocItemFilePath [FilePath],
	DocItemFileName [FileName]
FROM DocItemAttach a 
JOIN DocItems i ON a.DocItemId = i.DocItemId
JOIN RequestForms e ON a.KeyId = e.RequestFormId
LEFT JOIN Users u ON u.UserId = i.UploadedBy
WHERE DocItemAttachType ='REQUEST_FORM' --and 1 = 2

UNION

--CR
SELECT 
	WCCDocId,DocItemAttachId,
	DocItemTitle										[dDocTitle],
	DocItemDesc											[DocDescription],
	null												[dDocType],
	CASE WHEN i.IsDeleted = 1 THEN 0 ELSE 1 END			[xActiveFlag], 
	null												[xBranchPlant], 
	i.DocItemDate										[xCaptureDate], 
	null												xDeliveryTicketNumber,
	CASE WHEN DocumentCategory IS NULL THEN 'Misc.' 
		WHEN DocumentCategory = 'Drawing' then 'Assembly Drawing'
		WHEN DocumentCategory = 'Damage Documentation' THEN 'Deviation'
		WHEN DocumentCategory = 'Drawing' THEN 'Drawing'
		WHEN DocumentCategory = 'Material Cert' THEN 'Material Certification'
		WHEN DocumentCategory = 'Misc Document' THEN 'Misc.'
		WHEN DocumentCategory = 'Pictures' then 'Photo Micro.'
		WHEN DocumentCategory = 'Test Results' THEN 'Load Test'
		ELSE 'Misc.' END [xDocumentType],
	null												[xDocumentType2],
	null												[xGenericNumber05],
	null												[xGenericNumber06],
	null												[xGrade],
	null												[xJDEAssetNumber],
	null												[xLegacyWorkOrderNumber],
	null												[xRegion],					-----?????
	null												[xSerialNumber],
	DocItemFileSize										[xSize],
	u.WftUserName										[xUserId],
	null												[xWorkOrderNumber],
	'MyAdvisor'											[xInputSource],
	'CR'										[xScreenName],
	null												[xApplicationGroupId],
	CONVERT(varchar(36), e.RequestId)				[xApplicationId],
	SUBSTRING(OriginalFileName,0, 200) [OriginalFileName],
	(CASE WHEN CHARINDEX('e:\Websites\', i.DocItemFilePath) > 0 THEN REPLACE(i.DocItemFilePath, 'e:\Websites\', 'Y:\')  
		WHEN CHARINDEX('e:\WebFiles\MCDocs\adveng\Requests\', i.DocItemFilePath) > 0 THEN REPLACE(i.DocItemFilePath, 'e:\WebFiles\', '\\515postoak\MyAdvisor\Prod\WebFiles\Advisor\')  
		ELSE '\\515postoak\MyAdvisor\Prod\WebFiles\Advisor\' + DocItemFilePath END + '\' + DocItemFileName) as DocItemFilePath,
	DocItemFilePath [FilePath],
	DocItemFileName [FileName]
FROM DocItemAttach a 
JOIN DocItems i ON a.DocItemId = i.DocItemId
JOIN ChangeRequests e ON a.KeyId = e.RequestId
LEFT JOIN Users u ON u.UserId = i.UploadedBy
WHERE DocItemAttachType ='CR'     
) A 
LEFT JOIN WCCMigration s ON a.DocItemAttachId = s.DocItemAttachId
GO
/****** Object:  View [dbo].[vwAIRTFailuresCodes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwAIRTFailuresCodes] AS
SELECT art.AssetRepairTrackId, art.ArtNumber,
		art.FailureCodeId,
		fcfc.FailureCategoryCode + scfc.FailureSubCategoryCode + fc.FailureCode As FailureCode,
		fc.FailureDesc As FailureCodeDesc,
		art.OutOfSpecCodeID,
		fcos.FailureCategoryCode + scos.FailureSubCategoryCode + os.FailureCode As OutOfSpecCode,
		os.FailureDesc As OutOfSpecCodeDesc,
		art.ProceduralCodeID,
		fcpr.FailureCategoryCode + scpr.FailureSubCategoryCode + pr.FailureCode As ProceduralCode,
		pr.FailureDesc As ProceduralCodeDesc
FROM AssetRepairTrack art WITH(NOLOCK)
LEFT JOIN FailureCodes fc WITH(NOLOCK) ON fc.FailureCodeID = art.FailureCodeId
LEFT JOIN FailureCategories fcfc WITH(NOLOCK) ON fcfc.FailureCategoryId = fc.FailureCategoryId 
LEFT JOIN FailureSubCategories scfc WITH(NOLOCK) ON scfc.FailureSubCategoryId = fc.FailureSubCategoryId
LEFT JOIN FailureCodes os WITH(NOLOCK) ON os.FailureCodeID = art.OutOfSpecCodeID
LEFT JOIN FailureCategories fcos WITH(NOLOCK) ON fcos.FailureCategoryId = os.FailureCategoryId 
LEFT JOIN FailureSubCategories scos WITH(NOLOCK) ON scos.FailureSubCategoryId = os.FailureSubCategoryId
LEFT JOIN FailureCodes pr WITH(NOLOCK) ON pr.FailureCodeID = art.ProceduralCodeID
LEFT JOIN FailureCategories fcpr WITH(NOLOCK) ON fcpr.FailureCategoryId = pr.FailureCategoryId 
LEFT JOIN FailureSubCategories scpr WITH(NOLOCK) ON scpr.FailureSubCategoryId = pr.FailureSubCategoryId
GO
/****** Object:  View [dbo].[VW_FailureCodeSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[VW_FailureCodeSearch]    
AS             
SELECT 1                   AS ObjectType,     
       FailureCategoryId   AS Id,     
       NULL                AS FailureCategoryId,     
       NULL                AS FailureSubCategoryId,     
       FailureCategoryCode AS [Code],     
       FailureCategoryDesc AS [Description],     
       FailureType,     
       fc.FailureType      AS ProductLine,     
       IsHistorical,     
       NULL                AS FailureCodeTypeId,     
       ''                  AS FailureCodeType,     
       fc.GLProductLineId,     
       gp.Code             AS GLProductLine,     
       CASE WHEN CreatedBy IS NULL THEN ''     
   ELSE Isnull(c.FirstName, '') + ', ' + Isnull(c.LastName, '')  END AS CreatedBy,     
       CreatedOn,     
       CASE WHEN fc.UpdatedBy IS NULL THEN NULL ELSE Isnull(u.FirstName, '') + ', '  + Isnull(u.LastName, '')  END UpdatedBy,     
       fc.UpdatedOn,     
       '' AS CategoryCode,     
       '' AS CategoryDesc,     
       '' AS SubCategoryCode,     
       '' AS SubCategoryDesc,fc.CreatedBy  as [Created]
FROM   dbo.FailureCategories fc     
       LEFT JOIN Users c ON fc.CreatedBy = c.WFTUserName     
       LEFT JOIN Users u ON fc.UpdatedBy = u.WFTUserName     
       JOIN GLProductLines gp ON gp.id = fc.GLProductLineId    
           
UNION    
SELECT 2                        AS ObjectType,     
       FailureSubCategoryId     AS Id,     
       NULL                     AS FailureCategoryId,     
       NULL                     AS FailureSubCategoryId,     
       FailureSubCategoryCode   AS [Code],     
       FailureSubCategoryDesc   AS [Description],     
       FailureType,     
       fc.FailureType           AS ProductLine,     
       IsHistorical,     
       NULL                     AS FailureCodeTypeId,     
       ''                       AS FailureCodeType,     
       fc.GLProductLineId,     
       gp.Code                  AS GLProductLine,     
       CASE WHEN C.UserId IS NULL THEN '' ELSE ISNULL(c.FirstName, '') + ', ' + ISNULL(c.LastName, '') END AS CreatedBy,     
       CreatedOn,    
       CASE WHEN fc.UpdatedBy IS NULL THEN NULL ELSE Isnull(u.FirstName, '') + ', ' + Isnull(u.LastName, '') END UpdatedBy,     
       fc.UpdatedOn,    
       '' AS CategoryCode,    
       '' AS CategoryDesc,    
       '' AS SubCategoryCode,    
       '' AS SubCategoryDesc,
       fc.CreatedBy  as [Created]
FROM   dbo.FailureSubCategories fc    
       LEFT JOIN Users c ON fc.CreatedBy = c.WFTUserName    
       LEFT JOIN Users u ON fc.updatedby = u.WFTUserName    
       JOIN GLProductLines gp ON gp.id = fc.GLProductLineId    
    
UNION     
    
SELECT 3                                              AS ObjectType,     
       FailureCodeId                                  AS Id,     
       f.FailureCategoryId,     
       f.FailureSubCategoryId,     
       FailureCode                                    AS [Code],     
       FailureDesc                                    AS [Description],     
       f.FailureType,     
       f.FailureType                                  AS ProductLine,     
       f.IsHistorical,     
       FailureCodeTypeId,     
       (SELECT OptionLabel     
        FROM   SelectOptions     
        WHERE  SelectName = 'FailureCodeType'     
               AND OptionValue = f.FailureCodeTypeId) AS FailureCodeType,     
       f.GLProductLineId,     
       gp.Code  AS GLProductLine,     
       CASE WHEN c.UserId IS NULL THEN '' ELSE ISNULL(c.FirstName, '') + ', ' + ISNULL(c.LastName, '') END AS CreatedBy,     
       f.CreatedOn,     
       CASE WHEN f.updatedby IS NULL THEN NULL ELSE Isnull(u.firstname, '') + ', ' + Isnull(u.lastname, '')  END UpdatedBy,     
       f.UpdatedOn,     
       CASE WHEN FailureCodeTypeId = 3 THEN 'OS'     
   WHEN FailureCodeTypeId = 2 THEN 'PR'     
   ELSE fc.FailureCategoryCode  END AS CategoryCode,     
    CASE WHEN FailureCodeTypeId = 3 THEN 'Out Of Spec'     
   WHEN FailureCodeTypeId = 2 THEN 'Procedural'     
   ELSE fc.FailureCategoryDesc  END AS CategoryDesc,     
       fsc.FailureSubCategoryCode                     AS SubCategoryCode,     
       fsc.FailureSubCategoryDesc                     AS SubCategoryDesc,
       f.CreatedBy  as [Created]
FROM   dbo.FailureCodes f     
       LEFT JOIN Users c ON f.CreatedBy = c.WFTUserName    
       LEFT JOIN Users u ON f.UpdatedBy = u.WFTUserName    
       JOIN GLProductLines gp ON gp.Id = f.GLProductLineId     
       LEFT JOIN FailureCategories fc ON fc.FailureCategoryId = f.FailureCategoryId     
       JOIN FailureSubCategories fsc ON fsc.FailureSubCategoryId = f.FailureSubCategoryId
GO
/****** Object:  View [dbo].[VW_FailureCodes_WPTS]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[VW_FailureCodes_WPTS]        
AS           
  SELECT   p.Code as [SegmentProductLine],     
  p.id as [ProductLineId],       
   fc.FailureCodeId,         
   c.FailureCategoryId,        
   sc.FailureSubCategoryId,         
   fc.FailureCode,          
   fc.FailureDesc,          
   c.FailureCategoryCode,          
   c.FailureCategoryDesc,
   sc.FailureSubCategoryCode,          
   sc.FailureSubCategoryDesc,          
   fc.FailureType,                  
   fc.FailureCodeTypeId [FailureTypeId],        
  fc.IsHistorical [IsDeleted],          
  GETDATE() [LastUpdatedOn]          
from dbo.FailureCodes fc (NOLOCK)          
join dbo.FailureCategories c (NOLOCK) on fc.FailureCategoryId = c.FailureCategoryId          
join dbo.FailureSubCategories sc (NOLOCK) on sc.FailureSubCategoryId = fc.FailureSubCategoryId  
JOIN GLProductLines p ON p.Id = fc.GLProductLineId
GO
/****** Object:  View [dbo].[vwWorkOrderMaterialRequests]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE VIEW [dbo].[vwWorkOrderMaterialRequests] as

SELECT	WorkOrderMaterialRequestId, 
		MaterialRequestNum,
		m.[Status],
		w.WorkOrderId,
		w.WorkOrderNum,
		w.JDEWorkOrderNum,
		w.SerialNum,
		w.InventoryItemNum,
		i.DescShort,
		w.Status as WorkOrderStatus,
		w.BranchPlant,
		ISNULL(u.LASTNAME,'')+','+ISNULL(u.FIRSTNAME,'')  AS AddedByUserName,
		m.DateAdded,
		m.PFTWOId,
		j.WorkOrderStatusCode,
		pl.[Description],
		pl.Id AS [GLProductLineId],
		i.EcnRestriction
FROM WorkOrderMaterialRequests m WITH(NOLOCK)
LEFT JOIN WorkOrders w WITH(NOLOCK) on w.WorkOrderId = m.WorkOrderId
LEFT JOIN ItemNums i WITH(NOLOCK) ON i.ItemNum = w.InventoryItemNum
LEFT JOIN Users u WITH(NOLOCK) ON u.UserId = m.UserIdAdded
LEFT JOIN JDEWorkOrders j ON j.WorkOrderNumber=w.JDEWorkOrderNum
LEFT JOIN FixedAssets fa ON fa.FixedAssetId=w.FixedAssetId
Left JOIN BusinessUnits bu ON bu.BusinessUnit=fa.BusinessUnit
LEFT JOIN GLCodes glc ON glc.GLCode=bu.GLCode
LEFT JOIN GLProductLines pl On pl.Id=glc.GLProductLineId



GO
/****** Object:  View [dbo].[vwMaterialRequest]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[vwMaterialRequest] AS    
     
SELECT      
f.SerialNum AS [SerialNum],     
i.DescShort  AS [AssetDescription],    
br.branchplant AS [BranchPlant],    
br.companyname AS [BranchPlantName],    
CONVERT(VARCHAR(10), p.dateadded, 101) AS  [DateofSRPFT],     
i.ToolCode AS [ToolCode],    
i.toolpanel AS [ToolPanel],    
a.ARTNumber AS [ARTNumber],     
a.ASsetRepairTrackId,    
b.WorkOrderNum [MAWO],    
b.WorkOrderId,    
b.Status  AS [MAWOStatus],     
B.JDEWorkOrderNum  AS [JDEWO],    
j2.WorkOrderStatusCode  AS [JDEWOStatus],     
b.ItemNum  AS [MRItem],    
b.descshort  AS [ItemNumDescription],    
B.MRQty AS [MRQty],    
c.InventoryItemNum AS [IssuedItem],    
c.IssueQty AS [IssueQty] ,    
b.StdUnitCost AS [StdUnitCost] ,    
r.Region ,     
r.RegionDesc ,
b.WorkOrderMaterialRequestId,
b.PFTWOId,
b.MRStatus AS MaterialRequestStatus   
FROM (    
SELECT w1.FixedASsetId,w1.BranchPlant,w1.workorderid, w1.WorkOrderNum, w1.JDEWorkOrderNum, mri1.ItemNum,w1.Status, SUM(mri1.QtyRequired) [MRQty],    
i.descshort,ib.StdUnitCost, mri1.WorkOrderMaterialRequestId, mr1.PFTWOId,mr1.Status as MRStatus    
FROM WorkOrders w1    
INNER JOIN WorkOrderMaterialRequests mr1 ON mr1.WorkOrderId = w1.WorkOrderId    
INNER JOIN WorkOrderMaterialRequestItems mri1 ON mri1.WorkOrderMaterialRequestId = mr1.WorkOrderMaterialRequestId    
INNER JOIN ItemNums i ON i.ItemNum = mri1.ItemNum    
LEFT JOIN ItemNumBranchPlants ib ON ib.branchplant = w1.BranchPlant and ib.ItemNum = mri1.ItemNum    
GROUP BY w1.FixedASsetId,w1.BranchPlant,w1.workorderid, w1.WorkOrderNum, w1.JDEWorkOrderNum, mri1.ItemNum,w1.Status,    
i.DescShort,ib.StdUnitCost,mri1.WorkOrderMaterialRequestId,mr1.PFTWOId,mr1.Status      
) b      
LEFT JOIN      
(     
SELECT j1.WorkOrderStatusCode,j1.workordernumber[JDEWorkOrder] , js1.InventoryItemNum, ABS(SUM(js1.Quantity)) [IssueQty]    
FROM JDEWorkOrders j1    
INNER JOIN JDEWOSwapInFeeds js1 ON js1.WorkOrderNum = j1.WorkOrderNumber    
group by    j1.WorkOrderStatusCode,j1.workordernumber, js1.InventoryItemNum    
) c ON b.JDEWorkOrderNum = c.JDEWorkOrder and b.ItemNum = c.InventoryItemNum    
INNER JOIN FixedASsets(NOLOCK) f ON f.fixedASsetid = b.FixedASsetId    
LEFT JOIN ItemNums(NOLOCK) i ON i.ItemNum = f.inventoryItemNum    
LEFT JOIN PFTWO(NOLOCK) p ON p.WorkOrderId = b.WorkOrderId    
LEFT JOIN ASsetRepairTrack(NOLOCK) a ON a.SRPFTWOId = p.PFTWOId    
LEFT JOIN JDEWorkOrders(NOLOCK) j2 ON j2.WorkOrderNumber = b.JDEWorkOrderNum    
LEFT JOIN branchplants(NOLOCK) br ON br.branchplant = p.branchplant    
LEFT JOIN dbo.Regions(NOLOCK) r ON r.Region = br.Region                  
-- where br.branchplant in ('110200','21752')    


GO
/****** Object:  View [dbo].[VwWorkOrderJDERequestItems]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[VwWorkOrderJDERequestItems] AS
SELECT
    distinct
    r.WorkOrderMaterialRequestId,
     w.WorkOrderId,
     w.JDEWorkOrderNum, 
     w.WorkOrderNum,
     ri.ItemNum, 
     ri.QtyRequired, 
     ib.BranchPlant, 
     Isnull(j.WorkOrderStatusCode,'EZ') WorkOrderStatus,
     j.OrderType, 
     r.MaterialRequestNum,
     w.[Status],
	 ri.ParentItemnum,
	 ri.LineNum

FROM 
[dbo].[WorkOrderMaterialRequests] r 
JOIN [dbo].[WorkOrderMaterialRequestItems]  ri ON ri.WorkOrderMaterialRequestId = r.WorkOrderMaterialRequestId
JOIN workorders w ON w.WorkOrderId = r.WorkOrderId
LEFT JOIN ItemNumBranchPlants ib ON ib.ItemNum = ri.ItemNum and w.BranchPlant = ib.BranchPlant
JOIN JDEWorkOrders j ON j.WorkOrderNumber = w.JDEWorkOrderNum



GO
/****** Object:  View [dbo].[VwMaterialRequestDashboard]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[VwMaterialRequestDashboard]
AS
	SELECT 
		mr.WorkOrderMaterialRequestId,
		b.BranchPlant, 
		b.CompanyName, 
		--a.ARTNumber, 
		j.WorkOrderNumber [JDEWorkOrderNumber], 
		j.WorkOrderStatusCode, 
		mr.MaterialRequestNum, 
		CASE WHEN mr.WorkflowStatus IS NULL THEN 1 
			WHEN mr.WorkflowStatus = 'In Progress' THEN 2 
			WHEN mr.WorkflowStatus = 'On Hold' THEN 3 
			WHEN mr.WorkflowStatus = 'Complete' THEN 4 
			WHEN mr.WorkflowStatus = 'Cancel' THEN 5 
			END [WorkflowSequence],
		CASE WHEN mr.Status = 'Completed' THEN  ISNULL(mr.WorkflowStatus,'Unprocessed') END [WorkflowStatus],
		 mr.WorkflowUpdatedOn [WorkflowUpdatedOn],
		CASE WHEN mr.Status = 'Completed' THEN 
				CASE WHEN mr.WorkflowStatus IN ('Complete', 'Cancel') THEN mr.WorkflowUpdatedOn ELSE NULL END 
			END [WorkflowCompletedOn],

		mr.DateLastEdit [LastUpdatedOn],
		mr.DateAdded
		--c.[Count of Parts Requested] [CountOfPartsRequested],
		--c2.[Count of parts issued] [CountOfPartsIssued]

	FROM WorkOrders w
	JOIN JDEWorkOrders j on j.WorkOrderNumber = w.JDEWorkOrderNum
	JOIN WorkOrderMaterialRequests mr on mr.WorkOrderId = w.WorkOrderId
	JOIN BranchPlants b on b.BranchPlant = w.BranchPlant
	--LEFT JOIN PFTWO pw on pw.WorkOrderId = w.WorkOrderId
	--LEFT JOIN AssetRepairTrack a on a.AssetRepairTrackId = pw.AssetRepairTrackId
	--LEFT JOIN (
 --      select count(*) [Count of Parts Requested],WorkOrderMaterialRequestId
 --      from 
 --            (
 --            select wi.itemnum, wi.WorkOrderMaterialRequestId
 --            from WorkOrderMaterialRequestItems wi)a
 --      group by WorkOrderMaterialRequestId) C on c.WorkOrderMaterialRequestId = mr.WorkOrderMaterialRequestId
	--LEFT JOIN (
 --      select count(*) [Count of parts issued], workordernum
 --            from (
 --            select inventoryitemnum, workordernum
 --            from JDEWOSwapInFeeds ) A1
 --            group by a1.WorkOrderNum ) C2 on c2.WorkOrderNum = w.JDEWorkOrderNum

	WHERE mr.Status = 'Completed' AND w.Status = 'Open' AND ISNULL(mr.WorkflowStatus,'Unprocessed') NOT IN ('Complete', 'Cancel')



GO
/****** Object:  View [dbo].[vwWorkOrders]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwWorkOrders] as

SELECT w.WorkOrderId, w.WorkOrderNum, w.WorkOrderType, w.BranchPlant, w.InventoryItemNum,
	w.StartRNItemNum, w.SerialNum, w.AssetNumber, w.AddedBy, w.DateAdded,EndRNItemNum,
	w.DateClosed, s.OptionLabel as WorkOrderTypeName, w.Status,
	p.WO_NO as PFTNumber, p.PFTWOId, w.JDEWorkOrderNum, w.JDEParentWorkOrderNum,
	w.NCRRequestId, CONVERT(varchar(12), w.NCRRequestId) AS NCRRequestNum, bp.CompanyName as BranchPlantName,
	a.FromBranchPlant as OriginatingBranchPlant,
	abp.CompanyName as OriginatingBranchPlantName,
	a.ARTNumber,
	a.AssetRepairTrackId,
	f.LegacySerialNumber,
	ISNULL(ri.ItemNum3, i.ItemNum3) as ItemNum3,
	f.NetBookValue as CurrentNBV,
	ISNULL(i.DescShort, ri.DescShort) as AssetDescription,
	w.Comments,
	w.EngComments,
	w.EstimatedLabor,
	w.EstimatedMaterial,
	jd.EstimatedOtherAmount,
	jd.WorkOrderStatusCode,
	jd.ExchangeRate,
	jd.ActaulLaborInUSD,
	jd.ActualMaterialAmount,
	jd.CompletionDate,
	jd.ActualLaborAmount,
	jd.ActualMaterialInUSD,
	jd.ActaulMiscCostInUSD,
	jd.ActualAmount,
	w.EndRevision,
	w.FixedAssetId,
	CASE WHEN (SELECT COUNT(WorkOrderMaterialRequestId) FROM WorkOrderMaterialRequests MR WHERE
                        MR.WorkOrderId=w.WorkOrderId and  MR.status  in('Completed','Void')) > 0 THEN 'false'
                ELSE 'true' END AS [StatusOfPRMR],
    CASE
                WHEN (SELECT COUNT(WorkOrderMaterialRequestId) from WorkOrderMaterialRequests MR WHERE 
                        status IN ('Open', 'Submitted', 'Approved', 'Rejected') AND MR.WorkOrderId=w.WorkOrderId) = 0 THEN 'Create'
                ELSE --'Edit'
                        (select top 1 convert(varchar(50),WorkOrderMaterialRequestId) FROM WorkOrderMaterialRequests MR WHERE
                            status  in('Open', 'Submitted', 'Approved', 'Rejected') AND  
                            MR.WorkOrderId=w.WorkOrderId)
                END AS [StatusOfMRAction]
				
FROM WorkOrders (NOLOCK) w
LEFT JOIN SelectOptions s (NOLOCK) on s.OptionValue =  w.WorkOrderType and SelectName = 'WorkOrderType'
LEFT JOIN PFTWO p (NOLOCK) on w.WorkOrderId = p.WorkOrderId
LEFT JOIN BranchPlants bp (NOLOCK) on bp.BranchPlant = w.BranchPlant
LEFT JOIN FixedAssets f (NOLOCK) on f.FixedAssetId = w.FixedAssetId
LEFT JOIN AssetRepairTrack a (NOLOCK) on a.WorkOrderNum = w.WorkOrderNum
LEFT JOIN BranchPlants abp (NOLOCK) on abp.BranchPlant = a.FromBranchPlant
LEFT JOIN ItemNums i (NOLOCK) on i.ItemNum = f.InventoryItemNum
LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = f.RNItemNum
LEFT JOIN JDEWorkOrders(NOLOCK) jd ON jd.WorkOrderNumber=w.JDEWorkOrderNum









GO
/****** Object:  View [dbo].[vwRequestFormApproversName]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwRequestFormApproversName] as
	Select UserName,LocId,ApprovalCode,mca.ProductLine,mca.ApproverType,u.Active from MCApprovers mca (NOLOCK)
Join Users u (NOLOCK) on u.UserId = mca.UserId
GO
/****** Object:  View [dbo].[vwMCApprovers]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwMCApprovers]
AS

SELECT  mca.ApproverId, mca.ApprovalCode, mca.LocId, mca.UserId, u.UserName, u.LastName + ', ' + u.FirstName AS FullName,
		mca.ApproverType, s.OptionValue + ' - ' + s.OptionLabel AS ApproverTypeName, mca.DateAdded, mca.Amount,'USD' AS CurrencyCode, 
		mca.IsDefault, mca.ProductLine, mca.DeptCode, u.Active, bp.CompanyName

FROM dbo.MCApprovers (NOLOCK) mca 
LEFT OUTER JOIN dbo.Users (NOLOCK) u ON u.UserId = mca.UserId
LEFT OUTER JOIN dbo.SelectOptions (NOLOCK) s ON s.SelectName='ApprovalLevels' AND s.OptionValue = mca.ApproverType
LEFT OUTER JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = mca.LocId


GO
/****** Object:  View [dbo].[vw_PFTobjectMappItemNumReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_PFTobjectMappItemNumReport]
 AS
SELECT
	i.itemnum As [ItemNum],
	descshort As [ItemNumDesc],
	toolcode As [ToolCode], toolpanel As [ToolPanel],
	i.PartClassification,
	g.Description [Segment PL],	g.Id [SegmentPLId],				
	a.[New Build], a.[Inspection & Testing], a.[Service & Repair],						
	B.PFTOBJECTS [PMs],C.Forms [Forms]						
FROM itemnums i						
LEFT JOIN (						
		 SELECT   *	
		 FROM (	
		 SELECT itemnum,po.ProductLineId,					
			(SELECT OptionLabel FROM SelectOptions WHERE OptionValue = pd.PFTType AND SelectName ='PFTConfigType') As PFTTYpe 				
			 ,pc.ObjectNumber 				
		 FROM PartDescPFTConfigs pd 					
			 JOIN PFTConfig pc ON pc.PFTConfigId = pd.PFTConfigID  AND pc.IsObsolete=0					
			 JOIN pftobjects po ON po.ObjectNumber = pc.ObjectNumber					
		  ) d					
 		   pivot					
		(					
		  max(ObjectNumber)					
		  for PFTTYpe in ("New Build","Inspection & Testing","Service & Repair")					
		) piv) A on a.itemnum = i.itemnum					
 LEFT JOIN GLProductLines g ON g.Id = a.ProductLineId	 					
 LEFT JOIN (-----CBM Subquery find out PM attched to itemnum						
		 SELECT * FROM 					
				(SELECT i.ItemNum,			
					   STUFF((SELECT ', ' + CONVERT(varchar(10),cm.objectnumber)   AS [text()]		
					   FROM CBMMonitorAssetItemNums ca		
					   JOIN CBMMonitor cm on cm.CBMMonitorId = ca.CBMMonitorId		
						  WHERE ca.ItemNum = i.ItemNum AND ca.IsParent = 1 AND cm.Active = 1 	
							   FOR XML PATH ('')), 1, 2, '') AS [PFTOBJECTS]
				FROM itemnums i			
				GROUP BY i.itemnum 			
				) A			
			WHERE a.PFTOBJECTS is not null) B ON b.ItemNum  = i.itemnum				
 LEFT JOIN ( ----Forms Subquery	find out forms attched to forms					
			 SELECT * FROM 					
					(SELECT i.ItemNum,			
						   STUFF((SELECT ', ' + CONVERT(VARCHAR(10),pc.objectnumber) AS [text()]		
								FROM PartDescPFTConfigs pd						
						   JOIN pftconfig pc on pc.PFTConfigId = pd.PFTConfigID						
							   WHERE pd.ItemNum = i.ItemNum and  pc.IsObsolete = '0' and 
							   pd.pfttype = '6'	FOR XML PATH ('')), 1, 2, '') AS [Forms]
					FROM itemnums i			
					GROUP BY i.itemnum 			
					) A			
				WHERE a.Forms is not null) c ON c.ItemNum  = i.itemnum						
WHERE isasset = '1'	

GO
/****** Object:  View [dbo].[vw_PFTobjectSuperceededChildReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* Query for determining which Released PFTs or Forms have old revision objects tied to them*/	
/* Name: Superceeded child object report */	
/* Create new submenu under AIRT PFT called "Admin" - place report there*/	
CREATE VIEW [dbo].[vw_PFTobjectSuperceededChildReport]
 AS	
SELECT 	
	g.description [SegmentPL],
	g.Id [SegmentPLId],
	p1.ObjectNumber [ChildObject],
	CASE	
		WHEN p1.[type] = '4' THEN 'Message'
		WHEN p1.[type] = '2' THEN 'Step'
		WHEN p1.[type] = '3' THEN 'Picture'
		WHEN p1.[type] = '5' THEN 'Form Field'
		WHEN p1.[type] = '7' THEN 'Form Field Collection'
		ELSE 'error' END AS [ChildObjectType],
	p1.[Name] AS [ChildObjectName],
	len(p1.[Description]) as [Kl],
	CASE WHEN len(p1.[Description]) > 200 then SUBSTRING(p1.[Description], 1, 200) + '...(more)' Else p1.[Description] END AS [ChildObjectDescription],
	p2.ObjectNumber AS [ParentObjectNumber],
	p2.[Name] AS [ParentObjectName]	
	
FROM PFTOBJECTS P1	
	JOIN PFTOBJECTMAPPINGS PM ON PM.OBJECTID = P1.OBJECTID	
	JOIN PFTOBJECTS P2 ON P2.OBJECTID = PM.PARENTID	
	JOIN glproductlines g on g.id = p1.productlineid	
WHERE 	
	p2.state = '3' AND --- Parent state is released	
	p1.state = '4' ---- child is superceeded	

GO
/****** Object:  View [dbo].[VW_PFTObjectSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[VW_PFTObjectSearch]          
AS                  
SELECT p.ObjectId,                  
 p.ObjectNumber,                  
 p.Revision,            
 p.Type [ObjectType],                  
 t.OptionLabel [ObjectTypeName],                  
 p.Name [PFTObjectName],                  
 p.Description [PFTObjectDescription],                
 p.ProductLineId,                  
 gp.Code [ProductlineName],                  
 p.State [ObjectState],          
(SELECT MAX(p1.ObjectId) FROM PFTObjects p1 WHERE ObjectNumber = p.ObjectNumber) [LatestVersionObjectId],          
  CASE WHEN p.State = 4 THEN 3           
      ELSE (SELECT MIN(p1.State) FROM PFTObjects p1 WHERE ObjectNumber = p.ObjectNumber) END [LatestVersionState],          
 s.OptionLabel [ObjectStateName],                  
 Field1,                  
 Field1Name,                  
 p.Field2,
 CASE  
      WHEN (p.type = 5 and Field1Name='Number') THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = p.Field2)                        
  Else Null END [Field2Name],              
 p.Field3,                  
 p.Field4, 
 CASE  
      WHEN p.type = 5 AND p.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'MathSign' and OptionValue = p.Field4)                        
  Else p.Field4 END [Field4Name],                  
 p.Field5,
 CASE  
      WHEN p.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = p.Field5)                        
  Else p.Field5 END [Field5Name],          
 p.Field6,
 p.Field7,
 p.Field8,
 p.Field9,
 p.Field10,
 p.Field11,
CASE  
      WHEN p.type = 5 AND p.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = p.Field11)                        
  Else p.Field11 END [Field11Name], 
 p.Field12,
 CASE  
      WHEN p.type = 5 AND p.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = p.Field12)                        
  Else p.Field12 END [Field12Name], 
 p.Field13,
 CASE  
      WHEN p.type = 5 AND p.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = p.Field13)                        
  Else p.Field13 END [Field13Name], 
p.Field14,
p.Field15,
 CASE WHEN p.Type = 2 OR p.Type = 5 OR p.Type = 7 THEN (Select  top 1 'Yes' from PFTObjectMappings PM,PFTObjects PFTO where PM.ObjectId=PFTO.ObjectId and PM.ParentId = p.ObjectId and PFTO.Type=3)          
   ELSE NULL END [PicField],          
 CASE WHEN p.Type = 2 OR p.Type = 5 OR p.Type = 7 THEN (Select  top 1 'Yes' from PFTObjectMappings PM,PFTObjects PFTO where PM.ObjectId=PFTO.ObjectId and PM.ParentId = p.ObjectId and PFTO.Type=4)          
   ELSE NULL END [MsgField],          
           
  CASE WHEN p.Type = 2 THEN (SELECT    top 1 '1'   FROM PFTObjectMappings AS PM     
             INNER JOIN PFTObjects AS PO1 ON PM.ObjectId = PO1.ObjectId     
             JOIN  PFTObjects As PO2 ON PO2.ObjectNumber = PO1.ObjectNumber     
             WHERE     (PM.ParentId = p.ObjectId) and PO2.State < 2) else null End [ChildIsInProgress],        
 p.CreatedBy,                  
 ISNULL(c.FirstName,'') + ', ' + ISNULL(c.LastName,'') CreatedByName,                  
 CreatedOn,                  
 p.UpdatedBy,                  
 CASE WHEN p.UpdatedBy IS NULL THEN NULL ELSE ISNULL(u.FirstName,'') + ', ' + ISNULL(u.LastName,'') END UpdatedByName,                  
 p.UpdatedOn,                  
 p.ReasonForChange
 FROM PFTObjects p                   
JOIN Users c on p.CreatedBy = c.WFTUserName                  
LEFT JOIN Users u on p.UpdatedBy = u.WFTUserName                  
JOIN GLProductLines gp ON gp.Id = p.ProductLineId                  
JOIN SelectOptions s ON p.[State] = s.OptionValue and s.SelectName = 'PFTObjectState'                  
JOIN SelectOptions t ON p.[Type] = t.OptionValue and t.SelectName = 'PFTObjectType' 

--- For Field Name 
cross APPLY (select CASE WHEN p.Type = 1 THEN 
  (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'PFTConfigType' AND OptionValue = p.Field1 )                   
           WHEN p.type = 2 THEN (SELECT LabName FROM PFTLabs WHERE PFTLabId = p.Field1)                   
      WHEN p.type = 4 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'MessageIcon' AND OptionValue = p.Field1  ) 
      WHEN p.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldType' AND OptionValue = p.Field1  )                        
  Else p.Field1 END [Field1Name]  )   as Field1Name
GO
/****** Object:  View [dbo].[vw_PFTMassReleasePFTs]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
View select PFT object those are child revise  or update 
User pass child object id and get affected mapped parents.
Only view release state child and parents 
*/
CREATE VIEW [dbo].[vw_PFTMassReleasePFTs]
 AS
SELECT   
  oldPFT.ObjectId,
  oldPFT.ObjectNumber,
  oldPFT.PFTObjectName,
  oldPFT.PFTObjectDescription,
  oldPFT.Revision,
  oldPFT.ProductlineName,
  oldPFT.UpdatedByName,
  oldPFT.UpdatedOn,
  newPftSteps.ObjectId  ReleaseStepObjectId
 from PFTObjects As steps
JOIN PFTObjects newPftSteps  ON steps.ObjectId = newPftSteps.ObjectId --and steps.[Type] = 2
JOIN PFTObjects oldPftSteps ON oldPftSteps.ObjectNumber = newPftSteps.ObjectNumber and oldPftSteps.[State] = 4 -- superseded
JOIN PFTObjectMappings oldMapping ON oldMapping.ObjectId = oldPftSteps.ObjectId
JOIN VW_PFTObjectSearch oldPFT ON oldPFT.ObjectId = oldMapping.ParentId AND oldPFT.[ObjectState] = 3 -- released
LEFT JOIN PFTObjects inWorkPFT on oldPFT.ObjectNumber = inWorkPFT.ObjectNumber AND inWorkPFT.[State] < 3 -- In Work Or submitted
WHERE inWorkPFT.ObjectId IS NULL
  


GO
/****** Object:  View [dbo].[VwPFTWOForms]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[VwPFTWOForms]
AS
SELECT        TOP (100) PERCENT Froms.PFTWOId,Froms.PFTWOFormId,Froms.PFTWOFormCollectionId,Froms.FormObjectId,obj.[Name] AS FormName, Froms.FormResult,Froms.PFTConfigSeqId,Froms.SeqName, Froms.Seq, FormFields.Field5Name AS UOM, 
                   FormFields.FieldResult, FormFields.Field7 AS Field1, 
                   FormFields.TextResult1 As Value1, FormFields.Field8 AS Field2, 
				   FormFields.TextResult2 As Value2, FormFields.Field9 AS Field3, 
				   FormFields.TextResult3 Value3
FROM             dbo.VW_PFTWOFormCollections AS Froms INNER JOIN
                         dbo.VW_PFTObjectFormCollectionFields AS FormFields 
						 ON Froms.PFTWOFormCollectionId = FormFields.PFTWOFormCollectionId AND FormFields.ObjectType = 5 INNER JOIN
                         dbo.PFTObjects AS obj ON Froms.FormObjectId = obj.ObjectId
ORDER BY Froms.PFTWOId, Froms.FormObjectId, Froms.PFTWOFormId, Froms.Seq

GO
/****** Object:  View [dbo].[vw_GetRevisePFTObject]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 -- =============================================================================================================
-- Author:		Mangesh Taware
-- Description:	Select pft child objects those are revise and mapped with only release child object 
-- This view use mass release Step and form collection
-- ===============================================================================================================
Create  VIEW [dbo].[vw_GetRevisePFTObject]
 AS
SELECT   distinct 
	reviseObject.ObjectId,
	reviseObject.ObjectNumber,
	reviseObject.PFTObjectName,
	reviseObject.PFTObjectDescription,
	reviseObject.Revision,
	reviseObject.ProductlineName,
	reviseObject.UpdatedByName,
	reviseObject.ObjectType,
	reviseObject.ObjectTypeName,
	reviseObject.CreatedByName,
	reviseObject.ObjectState,
	reviseObject.ObjectStateName

FROM 
	VW_PFTObjectSearch reviseObject  
	JOIN PFTObjects  oldPftSteps ON  oldPftSteps.ObjectNumber = reviseObject.ObjectNumber and reviseObject.ObjectState=3
		JOIN PFTObjectMappings oldMapping ON oldMapping.ObjectId = oldPftSteps.ObjectId and oldPftSteps.[State] = 4 
		JOIN PFTObjects oldPFT ON oldPFT.ObjectId = oldMapping.ParentId AND oldPFT.State = 3 -- released
		LEFT JOIN PFTObjects inWorkPFT on oldPFT.ObjectNumber = inWorkPFT.ObjectNumber AND inWorkPFT.[State] < 3 -- In Work Or submitted parents 
	WHERE inWorkPFT.ObjectId IS NULL 
		
GO
/****** Object:  View [dbo].[vwPartDescPFTConfigs]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwPartDescPFTConfigs]    
AS    
  SELECT   
   pc.PartDescPFTConfigID  ,  
   pc.ItemNum,     
   pc.PFTConfigID,   
   pc.PFTType ,  
   i.DescShort,     
   p.PFTObjectId  
FROM PFTObjects po (NOLOCK)     
Right JOIN PFTConfig p (NOLOCK) ON po.ObjectId = p.PFTObjectId and p.IsObsolete = 0
JOIN PartDescPFTConfigs pc (NOLOCK) ON pc.PFTConfigID = p.PFTConfigId    
JOIN ItemNums i (NOLOCK) ON pc.ItemNum = i.ItemNum
GO
/****** Object:  Table [dbo].[BuildSheetTemplatesPFTMapping]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildSheetTemplatesPFTMapping](
	[TemplatePFTMappingID] [uniqueidentifier] NOT NULL,
	[TemplateID] [int] NOT NULL,
	[PFTObjectNumber] [int] NOT NULL,
	[PFTType] [tinyint] NOT NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_BuildSheetTemplatesPFTMapping] PRIMARY KEY CLUSTERED 
(
	[TemplatePFTMappingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vw_BuildSheetTemplatesPFTMapping]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_BuildSheetTemplatesPFTMapping]    

AS    

  SELECT   
   pc.TemplatePFTMappingID,  
   pc.PFTObjectNumber,   
   pc.PFTType,
   i.TemplateID,
   i.TemplateName,
   i.Description,
   po.ObjectId As PFTObjectId
FROM PFTObjects po (NOLOCK)     
JOIN BuildSheetTemplatesPFTMapping pc (NOLOCK) ON pc.PFTObjectNumber = po.ObjectNumber    
JOIN BuildSheetTemplates i (NOLOCK) ON pc.TemplateID = i.TemplateID
where po.State in (3,4)


GO
/****** Object:  View [dbo].[vw_PFTMassUpdatePFTs]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_PFTMassUpdatePFTs]
 AS
SELECT   
 distinct  oldPFT.ObjectId,
  oldPFT.ObjectNumber,
  oldPFT.PFTObjectName,
  oldPFT.PFTObjectDescription,
  oldPFT.Revision,
  oldPFT.ProductlineName,
  oldPFT.UpdatedByName,
  oldPFT.UpdatedOn,
  newPftSteps.ObjectId  UpdateStepObjectId

 from PFTObjects As steps
JOIN PFTObjects newPftSteps  ON steps.ObjectId = newPftSteps.ObjectId and steps.[Type] = 2
JOIN PFTObjects oldPftSteps ON oldPftSteps.ObjectNumber = newPftSteps.ObjectNumber  
JOIN PFTObjectMappings oldMapping ON oldMapping.ObjectId = oldPftSteps.ObjectId
JOIN VW_PFTObjectSearch oldPFT ON oldPFT.ObjectId = oldMapping.ParentId AND oldPFT.[ObjectState] = 3 -- released
LEFT JOIN PFTObjects inWorkPFT on oldPFT.ObjectNumber = inWorkPFT.ObjectNumber AND inWorkPFT.[State] < 3 -- In Work Or submitted
WHERE inWorkPFT.ObjectId IS NULL  

 
   



GO
/****** Object:  Table [dbo].[PFTMultilingualObject]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTMultilingualObject](
	[PFTObjectMultilingualId] [bigint] IDENTITY(1,1) NOT NULL,
	[Language] [varchar](20) NOT NULL,
	[PFTObjectId] [int] NULL,
	[TranslatedObjectName] [nvarchar](1024) NOT NULL,
	[TranslatedObjectDesc] [nvarchar](max) NULL,
	[TranslatedObjectByUser] [varchar](20) NOT NULL,
	[TranslationDate] [datetime] NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [varchar](20) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwPFTObjectTranslate]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwPFTObjectTranslate]
AS

SELECT 
	pft.ObjectId,
	pft.ObjectNumber,
	pft.Name,
	pft.Description,
	pft.Revision,
	pft.UpdatedOn,
	pft.UpdatedBy,
	pft.ProductLineId,
	pft.[Type] as [ObjectType],
	t.OptionLabel [ObjectTypeName],   
	CASE WHEN pftm.PFTObjectMultilingualId IS NULL THEN 0 ELSE 1  END   as IsTranslate,
	tt.OptionValue [Language],
	pftm.TranslatedObjectByUser FROM
PFTObjects pft
cross join (select * from SelectOptions where SelectName='PFTLanguages') As tt
left join PFTMultilingualObject pftm on pftm.PFTObjectId = pft.ObjectId and tt.OptionValue = pftm.Language
JOIN SelectOptions t ON pft.[Type] = t.OptionValue and t.SelectName = 'PFTObjectType' 
WHERE pft.Type in (2,4)  and pft.[State] = 3
GO
/****** Object:  View [dbo].[vwFindPMPFTName]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwFindPMPFTName]
AS
SELECT 
 PFTConfigId ,ProcessName  ,ProcessDesc 
FROM PFTConfig pc  (NOLOCK) JOIN PFTObjects po (NOLOCK) ON pc.PFTObjectId = po.ObjectId
WHERE  pc.isObsolete = 0 AND po.Type = 1 AND po.Field1 = '3'
GO
/****** Object:  View [dbo].[vwActionItemPortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwActionItemPortlet]
AS

SELECT ai.ActionItemId, ai.RequestId, ai.UserIdAdded, ai.AssigneeUserId, ai.DueDate, ai.ActionDescription, 
	ai.AssigneeComments, ai.IsComplete, ai.CompletionDate, ai.DateAdded, ai.LastEditDate, ai.LastEditBy,
	ISNULL(uAdd.FirstName, '') + ' ' + ISNULL(uAdd.LastName, '') AS CreatorFullName,
	ISNULL(uAss.FirstName, '') + ' ' + ISNULL(uAss.LastName, '') AS AssigneeFullName
	
FROM ActionItem (NOLOCK) ai
LEFT JOIN Users (NOLOCK) uAdd ON uAdd.UserId = ai.UserIdAdded
LEFT JOIN Users (NOLOCK) uAss ON uAss.UserId = ai.AssigneeUserId
LEFT JOIN Requests (NOLOCK) r ON r.RequestId = ai.RequestId
WHERE --r.OpenClosed <> 'C' AND 
ai.IsComplete = 0






GO
/****** Object:  View [dbo].[vwActionItems]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwActionItems]
AS
SELECT ai.ActionItemId
      ,ai.RequestId
      ,ai.UserIdAdded
      ,ai.AssigneeUserId
      ,ai.DueDate
      ,ai.ActionDescription
      ,ai.AssigneeComments
      ,ai.IsComplete
      ,ai.CompletionDate
      ,ai.DateAdded
      ,ai.LastEditDate
      ,ai.LastEditBy

      , creator.UserName as CreatorUserName
      , creator.FirstName as CreatorFirstName
      , creator.LastName as CreatorLastName

      , assignee.UserName as AssigneeUserName
      , assignee.FirstName as AssigneeFirstName
      , assignee.LastName as AssigneeLastName
FROM ActionItem ai (NOLOCK)
LEFT JOIN Users creator (NOLOCK) on creator.UserId = ai.UserIdAdded
LEFT JOIN Users assignee (NOLOCK) on assignee.UserId = ai.AssigneeUserId
GO
/****** Object:  View [dbo].[vwJDEWorkOrderLookup]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwJDEWorkOrderLookup]
AS
SELECT 
	j.WorkOrderNumber [JDEWorkOrderNumber], 
	j.AssetItemNumber [AssetNumber], 
	j.Reference2 [SerialNumber], 
	j.Branch [BranchPlant],
	j.Description [Description],
	j.DateAdded,
	j.OrderType,
	j.TypeWO
FROM JDEWorkOrders J (NOLOCK)
LEFT JOIN WorkOrders W (NOLOCK) on j.WorkOrderNumber = w.JDEWorkOrderNum
Where w.JDEWorkOrderNum is null and WorkOrderStatusCode != 'EZ'
GO
/****** Object:  View [dbo].[vwRMDistrictAssetReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[vwRMDistrictAssetReport] AS

SELECT 
	art.AssetRepairTrackId,
	art.ARTNumber,
	art.Status,
	art.IsRedTag,
	art.IncidentId,
	art.IsAssetFromField,
	art.FromBranchPlant, 
	bp.CompanyName AS FromBranchPlantName, 
	art.ShipToBranchPlant,
	bpshipto.CompanyName as ShipToBranchPlantName,
	fa.BranchPlant,
	bpfa.CompanyName as BranchPlantName,
	art.WorkOrderNum, 
	wo.JDEWorkOrderNum,
	fa.LastStatusChangeDate,
	fa.EquipmentStatus,
	ps.Status AS StatusDesc,
	DATEDIFF(day, fa.LastStatusChangeDate, GetDate()) as DaysInStatus, 
	art.FailureType,
	sof.OptionLabel AS FailureTypeDesc,
	art.SerialNum,
	art.AssetNumber,
	ISNULL(ri.ToolCode, i.ToolCode) as ToolCode,
	art.ItemNum,
	art.ItemDesc,
	pfa.AssetNumber AS ParentNumber,
	art.AddedBy,
	(Select TOP 1 d.DispositionId from vwARTDispositions d Where d.AssetRepairTrackId = art.AssetRepairTrackId ORDER by DispositionId DESC) as CurrentDispositionId,
	(Select TOP 1 d.DispositionDesc from vwARTDispositions d Where d.AssetRepairTrackId = art.AssetRepairTrackId ORDER by DispositionId DESC) as CurrentDispositionDesc,
	(Select TOP 1 d.Status from vwARTDispositions d Where d.AssetRepairTrackId = art.AssetRepairTrackId ORDER by DispositionId DESC) as CurrentDispositionStatus,
	(Select TOP 1 d.DispositionDate from vwARTDispositions d Where d.AssetRepairTrackId = art.AssetRepairTrackId ORDER by DispositionId DESC) as CurrentDispositionDate,
	rg.RegionDesc,
	cn.CountryDesc
FROM AssetRepairTrack art WITH(NOLOCK) 
LEFT OUTER JOIN BranchPlants bp WITH(NOLOCK) ON bp.BranchPlant = art.FromBranchPlant
LEFT OUTER JOIN BranchPlants bpshipto WITH(NOLOCK) ON bpshipto.BranchPlant = art.ShipToBranchPlant
LEFT OUTER JOIN WorkOrders wo WITH(NOLOCK) ON wo.WorkOrderNum = art.WorkOrderNum
LEFT OUTER JOIN FixedAssets fa WITH(NOLOCK) ON fa.FixedAssetId = art.FixedAssetId
LEFT OUTER JOIN BranchPlants bpfa WITH(NOLOCK) ON bpfa.BranchPlant = fa.BranchPlant
LEFT OUTER JOIN FixedAssets pfa WITH(NOLOCK) ON pfa.FixedAssetId = fa.ParentFixedAssetId
LEFT OUTER JOIN ItemNums i WITH(NOLOCK)  ON i.ItemNum = fa.InventoryItemNum
LEFT OUTER JOIN ItemNums ri WITH(NOLOCK)  ON ri.ItemNum = fa.RNItemNum
LEFT OUTER JOIN PartStatus ps WITH(NOLOCK) ON ps.Code = fa.EquipmentStatus
LEFT OUTER JOIN SelectOptions sof WITH(NOLOCK) ON sof.OptionValue = art.FailureType and sof.SelectName = 'FailureType'
LEFT OUTER JOIN Regions rg WITH(NOLOCK) ON rg.Region = bp.Region
LEFT OUTER JOIN Countries cn WITH(NOLOCK) ON cn.Country = bp.Country





GO
/****** Object:  View [dbo].[vwRMGlobalAssetReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwRMGlobalAssetReport] AS

SELECT fa.FixedAssetId,
	ISNULL(ri.ToolPanel, i.ToolPanel) AS ToolPanel,
	ISNULL(ri.ToolCode, i.ToolCode) AS ToolCode,
	fa.BranchPlant,
	bp.CompanyName as BranchPlantName,
	(SELECT TOP 1 JDEWorkOrderNum from WorkOrders (NOLOCK) w WHERE w.FixedAssetId = fa.FixedAssetId
		ORDER BY DateAdded DESC) AS JDEWorkOrderNum,
	(SELECT TOP 1 WorkOrderNum from WorkOrders (NOLOCK) w WHERE w.FixedAssetId = fa.FixedAssetId
		ORDER BY DateAdded DESC) AS WorkOrderNum,
	fa.LastStatusChangeDate,
	fa.EquipmentStatus,
	ps.Status AS StatusDesc,
	DATEDIFF(day, fa.LastStatusChangeDate, GetDate()) as DaysInStatus,
	fa.SerialNum,
	fa.AssetNumber,
	fa.InventoryItemNum,
	ISNULL(i.DescShort, ri.DescShort) as AssetDescription,
	fap.AssetNumber AS ParentNumber,
	fa.Cost,
	fa.CurrencyCode,
	rg.RegionDesc,
	cn.CountryDesc
FROM FixedAssets (NOLOCK) fa
LEFT OUTER JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
LEFT OUTER JOIN FixedAssets (NOLOCK) fap ON fap.FixedAssetId = fa.ParentFixedAssetId
LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN ItemNums (NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
LEFT JOIN PartStatus (NOLOCK) ps ON ps.Code = fa.EquipmentStatus
LEFT OUTER JOIN Regions rg WITH(NOLOCK) ON rg.Region = bp.Region
LEFT OUTER JOIN Countries cn WITH(NOLOCK) ON cn.Country = bp.Country
WHERE ISNULL(ri.IsAsset, i.IsAsset) = 1




GO
/****** Object:  View [dbo].[vwJDEWOSwapInFeedPortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO



CREATE VIEW [dbo].[vwJDEWOSwapInFeedPortlet]
AS


Select Distinct 
		NEWID() as RowId,
		jdewo.WorkOrderNum as JDEWorkOrderNum,
		wo.WorkOrderId,
		wo.WorkOrderNum,
		(Select TOP 1 Users.UserName from JDEWOSwapInFeeds a WITH(NOLOCK) INNER JOIN Users WITH(NOLOCK) ON Users.UserId = a.ProcessedBy Where a.WorkOrderNum = jdewo.WorkOrderNum AND ProcessedDate IS NOT NULL ORDER by ProcessedDate DESC) as ProcessedBy,
		(Select TOP 1 ProcessedDate from JDEWOSwapInFeeds a WITH(NOLOCK) Where a.WorkOrderNum = jdewo.WorkOrderNum AND ProcessedDate IS NOT NULL ORDER by ProcessedDate DESC) as ProcessedDate
from JDEWOSwapInFeeds(NOLOCK) jdewo
LEFT OUTER JOIN WorkOrders(NOLOCK) wo ON wo.JDEWorkOrderNum = jdewo.WorkOrderNum
Where jdewo.ProcessedDate IS NULL AND ISNULL(jdewo.IsOnHold, 0) = 0
GROUP by jdewo.WorkOrderNum, wo.WorkOrderId, wo.WorkOrderNum


GO
/****** Object:  View [dbo].[vwGFAComponents]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwGFAComponents]
AS

SELECT c.GFAComponentId, 
		c.GFAId, 
		c.ToolStringId, 
		c.FixedAssetId, 
		c.PartTypeId,
		t.SerialNumber AS ToolString, 
		t.Type AS ToolType, 
		fa.SerialNum,
		fa.InventoryItemNum, 
		p.Name AS PartTypeName,
		c.IsDeleted
FROM GFAComponents (NOLOCK) c
LEFT JOIN PartTypes (NOLOCK) p ON p.PartTypeId = c.PartTypeId
LEFT JOIN ToolStrings (NOLOCK) t ON t.ToolStringId = c.ToolStringId
LEFT JOIN FixedAssets (NOLOCK) fa ON fa.FixedAssetId = c.FixedAssetId



GO
/****** Object:  Table [dbo].[ClientOrderLines]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ClientOrderLines](
	[ClientOrderLineId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ClientOrderId] [uniqueidentifier] NOT NULL,
	[CONum] [varchar](10) NOT NULL,
	[COLine] [varchar](5) NULL,
	[BranchPlant] [varchar](25) NOT NULL,
	[LineType] [varchar](1) NULL,
	[ItemNum] [varchar](30) NULL,
	[PartType] [varchar](1) NULL,
	[Used] [varchar](1) NULL,
	[Description] [varchar](70) NULL,
	[ServiceRequest] [varchar](1024) NULL,
	[SerialNums] [varchar](1024) NULL,
	[QtyOrdered] [int] NULL,
	[QtyDelivered] [int] NULL,
	[QtyBilled] [int] NULL,
	[Complete] [varchar](1) NULL,
	[UnitCost] [decimal](18, 2) NULL,
	[TotalCost] [decimal](18, 2) NULL,
	[GLAccount] [varchar](15) NULL,
	[NewLine] [int] NULL,
	[DateDepart] [datetime] NULL,
	[InvComplete] [varchar](1) NULL,
	[LastEdit] [datetime] NULL,
	[KeepRec] [tinyint] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[DateRequired] [datetime] NULL,
	[TotalCostIncludingTransfer] [decimal](18, 2) NULL,
	[CurrShortName] [varchar](3) NULL,
 CONSTRAINT [PK_ClientOrderLines] PRIMARY KEY CLUSTERED 
(
	[ClientOrderLineId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwClientOrderLines]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwClientOrderLines]
AS

SELECT  col.ClientOrderLineId, col.ClientOrderId, col.BranchPlant, col.COLine, col.QtyOrdered
		, col.ItemNum, col.Description, col.QtyDelivered, col.QtyBilled, col.UnitCost
		, i.DefaultSerialProfile, i.IsAsset
		, i.IsHazMat, inbp.PlndDeliveryTime, col.DateRequired, col.TotalCost, col.TotalCostIncludingTransfer
		, i.PartClassification, i.TEROrderMultiple, i.IsObsolete, i.IsRestrictPurchasing, inbp.IsProvidingLoc
		, (SELECT COUNT(*) FROM FixedAssets f WITH(NOLOCK) WHERE f.InventoryItemNum = col.ItemNum AND f.EquipmentStatus ='AV'
			AND f.BranchPlant = co.ToBranchPlant) AS QtyInStock
		, col.GLAccount, col.CurrShortName
FROM ClientOrderLines (NOLOCK) col
LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = col.ItemNum
LEFT JOIN ClientOrders (NOLOCK) co ON co.ClientOrderId = col.ClientOrderId 
LEFT JOIN ItemNumBranchPlants (NOLOCK) inbp ON inbp.ItemNum = i.ItemNum AND inbp.BranchPlant = co.ToBranchPlant


GO
/****** Object:  View [dbo].[vwClientOrderGVWSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwClientOrderGVWSearch]
AS
SELECT  a.ClientOrderLineId, b.ClientOrderId,a.CONum, b.DateAdded, b.BranchPlant, b.ToBranchPlant, a.ItemNum
		, a.UnitCost, a.TotalCost, b.DateRequired, a.QtyOrdered
  
FROM ClientOrderLines (NOLOCK) a 
INNER JOIN ClientOrders (NOLOCK) b on a.ClientOrderId = b.ClientOrderId



GO
/****** Object:  View [dbo].[vwClientOrders]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwClientOrders] as
SELECT co.ClientOrderId, co.CONum, co.BranchPlant, co.ToBranchPlant, co.COType, co.ClientNum, co.CODate, co.DateRequired, 
co.ConfirmBy, co.Station, co.RequisitionBy, co.FOBPoint, co.ShipVia, co.ShipPay, co.Remarks, co.CloseDate, co.LastEdit, 
co.Complete, co.IsApproved, co.AutoTransfer, co.UserIdUpload, co.DateAdded, co.KeepRec, co.IsHazMat, co.DateApproved, 
co.UserIdApproved, co.TotalCost, co.TotalCostIncludingTransfer, co.RequisitionByEmail, co.JDEApprovalNo, co.WhereToInvoice, 
co.IsUnApproved, co.Markup, co.IsVoid, co.ProductLine, co.Status, so.OptionLabel as StatusName 
FROM ClientOrders (NOLOCK) co
LEFT JOIN SelectOptions (NOLOCK) so ON co.Status = so.OptionValue WHERE so.SelectName = 'ClientOrderStatus' 

GO
/****** Object:  View [dbo].[vwPartsOnClientOrders]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE VIEW [dbo].[vwPartsOnClientOrders] AS
SELECT 
	col.ClientOrderLineId, co.ClientOrderId, col.CONum, col.LineType,
	col.ItemNum, col.[Description] AS Description1, col.BranchPlant, b.CompanyName AS ProvidingLocation,
	col.QtyOrdered, col.QtyDelivered, co.CODate, co.DateRequired, co.DateAdded, 
	col.UnitCost, col.CurrShortName, i.DescShort AS [Description],co.IsVoid,co.CloseDate
FROM ClientOrderLines (NOLOCK) col
LEFT JOIN ClientOrders (NOLOCK) co ON col.CONum = co.CONum AND col.BranchPlant = co.BranchPlant
LEFT JOIN BranchPlants (NOLOCK) b ON co.ToBranchPlant = b.BranchPlant
LEFT JOIN ItemNums (NOLOCK) i ON col.ItemNum = i.ItemNum 







GO
/****** Object:  Table [dbo].[CoreImport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CoreImport](
	[CoreImportID] [uniqueidentifier] NOT NULL,
	[FileName] [varchar](100) NOT NULL,
	[BranchPlant] [varchar](12) NULL,
	[IsUploaded] [tinyint] NOT NULL,
	[UploadUserID] [int] NULL,
	[UploadDate] [datetime] NULL,
	[IsImported] [tinyint] NOT NULL,
	[ImportUserID] [int] NULL,
	[ImportDate] [datetime] NULL,
	[ImportAttempts] [tinyint] NOT NULL,
	[IsImportFailure] [tinyint] NOT NULL,
	[Desc] [varchar](500) NULL,
	[JobNumber] [varchar](50) NULL,
	[VersionNumber] [varchar](10) NULL,
	[IsDeleted] [tinyint] NOT NULL,
	[DeleteUserID] [int] NULL,
	[DeleteDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[CoreImportID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwCoreImportAudit]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwCoreImportAudit]
AS
SELECT ci.CoreImportID
, ci.[FileName]
, ci.BranchPlant
, d.District
, d.DistrictDesc
, ci.JobNumber
, ci.IsUploaded
, ci.UploadUserID
, u1.FirstName + ' ' + u1.LastName As UploadUser
, ci.UploadDate
, ci.IsImported
, ci.ImportUserID
, u2.FirstName + ' ' + u2.LastName As ImportUser
, ci.ImportDate
, ci.ImportAttempts
, ci.IsImportFailure
, Case When ci.IsImportFailure = 1 Then '<span style="font-weight:bold;color:red;">FAILED:</span> ' + ci.[Desc] Else ci.[Desc] End As [Desc]
, ci.[Desc] As ExcelDesc
, ci.IsDeleted As IsArchived
, Case When ci.IsUploaded = 1 And ci.IsDeleted = 1 Then 'File Archived by ' + (Select FirstName + ' ' + LastName From Users WITH(NOLOCK) Where UserID = ci.DeleteUserID) + ' (' + Cast(ci.DeleteDate as varchar(20)) + ')' Else '' End As ArchiveInfo
, Case When ci.IsUploaded = 1 And ci.IsImported = 0 And ci.IsDeleted = 1 Then 'block' Else 'none' End As ReImportVisible
, ci.VersionNumber
FROM CoreImport ci WITH(NOLOCK)
LEFT JOIN Districts d WITH(NOLOCK) ON d.District = ci.BranchPlant
LEFT JOIN Users u1 WITH(NOLOCK) ON ci.UploadUserID = u1.UserID
LEFT JOIN Users u2 WITH(NOLOCK) ON ci.ImportUserID = u2.UserID

GO
/****** Object:  Table [dbo].[ChangeNoticeParts]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChangeNoticeParts](
	[CNPartId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[CNId] [uniqueidentifier] NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[NotApplicable] [bit] NOT NULL,
	[NotApplicableBy] [varchar](15) NULL,
	[DateCompleted] [datetime] NULL,
	[UserId] [int] NULL,
	[LastEdit] [datetime] NOT NULL,
	[SerialNum] [varchar](30) NULL,
 CONSTRAINT [PK_ChangeNoticeParts] PRIMARY KEY CLUSTERED 
(
	[CNPartId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwChangeNoticeParts]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwChangeNoticeParts] AS

SELECT 
	  cnp.CNPartId, cnp.CNId, cnp.FixedAssetId, cnp.NotApplicable, cnp.NotApplicableBy, cnp.DateCompleted, cnp.UserId
	  , fa.AssetNumber, fa.InventoryItemNum, cnp.SerialNum,fa.RNItemNum
	  , i.DescShort, ps.Status AS StatusDesc
	  , u.UserName
	  , cn.CNNum, cn.CNDesc
	  , cn.ECNNum, cn.CNType
	  , cn.CRNum
	  , r.RequestType,
	  fa.TopLevelFixedAssetId
FROM ChangeNoticeParts cnp (NOLOCK)
LEFT JOIN ChangeNotices cn (NOLOCK) on cn.CNId = cnp.CNId
LEFT JOIN Requests r (NOLOCK) On cn.CRNum = CONVERT(varchar(50), r.RequestId)
LEFT JOIN FixedAssets fa (NOLOCK) on fa.FixedAssetId = cnp.FixedAssetId
LEFT JOIN ItemNums i (NOLOCK) ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN PartStatus ps (NOLOCK) on ps.Code = fa.EquipmentStatus
LEFT JOIN Users u (NOLOCK) on u.UserId = cnp.UserId
GO
/****** Object:  View [dbo].[vwCNSearchByToolNumber]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE View [dbo].[vwCNSearchByToolNumber] AS

SELECT DISTINCT
	  fa.FixedAssetId, fa.AssetNumber, fa.InventoryItemNum, cnp.SerialNum, i.DescShort, ps.Status AS StatusDesc, i.Revision
FROM FixedAssets fa WITH (NOLOCK)
LEFT JOIN ItemNums i WITH (NOLOCK) ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN PartStatus ps WITH (NOLOCK) on ps.Code = fa.EquipmentStatus
INNER JOIN ChangeNoticeParts cnp (NOLOCK) on fa.FixedAssetId = cnp.FixedAssetId




GO
/****** Object:  View [dbo].[vwChangeNoticeChilds]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwChangeNoticeChilds] AS

SELECT cnp.CNPartId, cnp.CNId, cnp.FixedAssetId, cnp.NotApplicable, cnp.NotApplicableBy
		, cnp.DateCompleted , fa.AssetNumber, fa.InventoryItemNum, cnp.SerialNum,fa.RNItemNum
		, i.DescShort, ps.Status AS StatusDesc

FROM ChangeNoticeParts cnp (NOLOCK)
LEFT JOIN FixedAssets fa (NOLOCK) on fa.FixedAssetId = cnp.FixedAssetId
LEFT JOIN ItemNums i (NOLOCK) ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN PartStatus ps (NOLOCK) on ps.Code = fa.EquipmentStatus




GO
/****** Object:  Table [dbo].[BoardFirmwares]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BoardFirmwares](
	[BoardFirmwareId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[BoardItemNum] [varchar](30) NOT NULL,
	[FirmwareItemNum] [varchar](30) NOT NULL,
	[IsMaster] [bit] NOT NULL,
	[Component] [varchar](25) NULL,
	[ManufacturingOnly] [bit] NOT NULL,
	[IsFieldTest] [bit] NOT NULL,
	[FieldTestRevision] [varchar](50) NULL,
	[FieldTestRequestId] [int] NULL,
	[FieldTestCRNum] [int] NULL,
 CONSTRAINT [PK_BoardFirmwares] PRIMARY KEY CLUSTERED 
(
	[BoardFirmwareId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BoardItemNums]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BoardItemNums](
	[BoardId] [uniqueidentifier] NOT NULL,
	[BoardItemNum] [varchar](30) NOT NULL,
	[IsSoftware] [bit] NOT NULL,
	[SoftwareType] [varchar](5) NULL,
 CONSTRAINT [PK_BoardId] PRIMARY KEY CLUSTERED 
(
	[BoardId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SensorSlotBoards]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SensorSlotBoards](
	[SensorSlotBoardId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[SensorSlotId] [uniqueidentifier] NULL,
	[BoardItemNum] [varchar](30) NOT NULL,
	[IsSoftware] [bit] NOT NULL,
 CONSTRAINT [PK_SensorSlotBoards] PRIMARY KEY CLUSTERED 
(
	[SensorSlotBoardId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ItemNumRevisions]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ItemNumRevisions](
	[ItemNumRevisionId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[Revision] [varchar](20) NOT NULL,
	[ItemNum3] [varchar](30) NULL,
	[IsObsolete] [bit] NOT NULL,
	[Active] [bit] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
 CONSTRAINT [PK_ItemNumRevisions] PRIMARY KEY CLUSTERED 
(
	[ItemNumRevisionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Sensors]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Sensors](
	[SensorId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[SensorName] [varchar](50) NOT NULL,
	[ProductLine] [varchar](5) NULL,
	[IsNotDisplay] [bit] NOT NULL,
 CONSTRAINT [PK_Sensors] PRIMARY KEY CLUSTERED 
(
	[SensorId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SensorSlots]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SensorSlots](
	[SensorSlotId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[SensorId] [uniqueidentifier] NOT NULL,
	[SlotNumber] [int] NOT NULL,
	[IsRequired] [bit] NOT NULL,
	[Description] [varchar](50) NULL,
 CONSTRAINT [PK_SensorSlots] PRIMARY KEY CLUSTERED 
(
	[SensorSlotId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwBoardFirmwares]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwBoardFirmwares] 
AS  
SELECT  NEWID() as ID,
		s.SensorName, s.ProductLine, s.IsNotDisplay,ss.Description AS SensorSlot,bf.BoardItemNum, bi.IsSoftware, bi.SoftwareType,
		(SELECT     DescShort
        FROM          Itemnums WITH(NOLOCK)
        WHERE      (itemnum = bf.BoardItemNum)) AS BoardDesc, 
        bf.ManufacturingOnly, bf.FirmwareItemNum,     
        
        (SELECT     DescShort
        FROM          Itemnums WITH(NOLOCK)
        WHERE      (itemnum = bf.FirmwareItemNum)) AS FirmwareDesc,
        
		(SELECT  TOP 1 Revision
        FROM          ItemNumRevisions WITH(NOLOCK)
        WHERE      (ItemNum = bf.FirmwareItemNum)
        ORDER BY DateAdded DESC) AS FirmwareRevision,

		IsFieldTest, 
		FieldTestRevision                            
                            
FROM BoardFirmwares (NOLOCK) bf 
INNER JOIN BoardItemNums (NOLOCK) bi on bi.BoardItemNum = bf.BoardItemNum 
INNER JOIN  SensorSlotBoards (NOLOCK) ssb on ssb.BoardItemNum = bf.BoardItemNum 
INNER JOIN SensorSlots (NOLOCK) ss on ss.SensorSlotId = ssb.SensorSlotId 
INNER JOIN Sensors (NOLOCK) s on s.Sensorid = ss.Sensorid

GO
/****** Object:  Table [dbo].[PFTBoardFirmwares]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTBoardFirmwares](
	[PFTBoardFirmwareId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[PFTWOId] [uniqueidentifier] NOT NULL,
	[BoardItemNum] [varchar](30) NULL,
	[BoardSerialNum] [varchar](30) NULL,
	[SensorSlotBoardId] [uniqueidentifier] NULL,
	[BoardFirmwareId] [uniqueidentifier] NULL,
	[StartFirmwareRevision] [varchar](20) NULL,
	[EndFirmwareItemNum] [varchar](30) NOT NULL,
	[EndFirmwareRevision] [varchar](20) NULL,
	[Component] [varchar](25) NULL,
	[DateAdded] [datetime] NOT NULL,
	[IsMaster] [bit] NOT NULL,
 CONSTRAINT [PK_PFTBoardFirmwares] PRIMARY KEY CLUSTERED 
(
	[PFTBoardFirmwareId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwFirmwareTraceability]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwFirmwareTraceability] AS

Select NEWID() as Id, * from(
Select Distinct s.SensorId, s.SensorName, 
		ss.SensorSlotId, ss.SlotNumber, ss.Description as SlotDescription,
		ssb.SensorSlotBoardId, bi.BoardId, bi.BoardItemNum, bii.DescShort as BoardDesc,
		bf.BoardFirmwareId, bf.FirmwareItemNum, bfi.DescShort as FirmwareDesc,
		(Select TOP 1 SerialNum from PFTWO a WITH(NOLOCK) Where a.PFTWOId = pbf.PFTWOID) as SerialNum,
		(Select TOP 1 a.BoardSerialNum from PFTBoardFirmwares a WITH(NOLOCK)
			INNER JOIN PFTWO b WITH(NOLOCK) ON b.PFTWOId = a.PFTWOId 
			Where a.SensorSlotBoardId = ssb.SensorSlotBoardId 
			AND a.BoardFirmwareId = bf.BoardFirmwareId
			AND b.SerialNum  = (Select TOP 1 SerialNum from PFTWO a WITH(NOLOCK) Where a.PFTWOId = pbf.PFTWOID)
			ORDER by a.DateAdded DESC
		) as BoardSerialNum,
		(Select TOP 1 a.EndFirmwareRevision from PFTBoardFirmwares a WITH(NOLOCK)
			INNER JOIN PFTWO b WITH(NOLOCK) ON b.PFTWOId = a.PFTWOId 
			Where a.SensorSlotBoardId = ssb.SensorSlotBoardId 
			AND a.BoardFirmwareId = bf.BoardFirmwareId
			AND b.SerialNum  = (Select TOP 1 SerialNum from PFTWO a WITH(NOLOCK) Where a.PFTWOId = pbf.PFTWOID)
			ORDER by a.DateAdded DESC
		) as CurrentRevision
from Sensors(NOLOCK) s
INNER JOIN SensorSlots (NOLOCK) ss on ss.SensorId = s.SensorId
INNER JOIN SensorSlotBoards (NOLOCK) ssb on ssb.SensorSlotId = ss.SensorSlotId
INNER JOIN BoardItemNums (NOLOCK) bi on bi.BoardItemNum = ssb.BoardItemNum
INNER JOIN ItemNums bii (NOLOCK) on bii.ItemNum = bi.BoardItemNum
INNER JOIN BoardFirmwares (NOLOCK) bf on bf.BoardItemNum = bi.BoardItemNum
INNER JOIN ItemNums (NOLOCK) bfi on bfi.ItemNum = bf.FirmwareItemNum
INNER JOIN PFTBoardFirmwares (NOLOCK) pbf ON pbf.SensorSlotBoardId = ssb.SensorSlotBoardId AND pbf.BoardFirmwareId = bf.BoardFirmwareId AND pbf.BoardItemNum = bf.BoardItemNum
) a

GO
/****** Object:  View [dbo].[vwFixedAssetLookup]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwFixedAssetLookup]
AS

SELECT 
  fa.FixedAssetId, fa.AssetNumber, fap.AssetNumber as ParentNumber, fa.SerialNum
  , fa.CurrentItemQty, fa.EquipmentStatus, fa.BranchPlant
  , fa.FixedAssetBranchPlant
  , IsNull(i.DescShort, ri.DescShort) as AssetDescription
  , fa.InventoryItemNum, fa.RNItemNum
  , fa.ThirdItemNumber, i.ItemNum3, fa.LegacySerialNumber
  , fa.IsAdvisorOnly, fa.NotUsed, fa.IsAddByWorkOrder
  , i.ItemNumId, i.PartCode, i.DescShort
  , fa.Revision
  , IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) as IsAsset
  , CASE IsNull(ri.IsAsset, IsNUll(i.IsAsset, 0)) WHEN 1 THEN 'Y' ELSE 'N' END AS IsAssetDisplay
  , case i.DefaultSerialProfile when 'S' then 'N' else 'Y' end AS IsBatch
  , ps.[Status] AS StatusDesc
  , ISNULL(ri.ToolCode, i.ToolCode) as ToolCode
  , CASE WHEN isnull(so.optionvalue,'') = '' THEN 0 ELSE 1 END AS IsRadioActive
  , fatp.SerialNum as TopLevelSerialNum
  , bp.CompanyName as BranchPlantName
FROM FixedAssets fa (NOLOCK)
LEFT OUTER JOIN FixedAssets (NOLOCK) fap ON fap.FixedAssetId = fa.ParentFixedAssetId
LEFT OUTER JOIN FixedAssets (NOLOCK) fatp ON fatp.FixedAssetId = fa.TopLevelFixedAssetId
LEFT JOIN ItemNums i (NOLOCK) ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
LEFT JOIN PartStatus ps (NOLOCK) ON ps.Code = fa.EquipmentStatus
LEFT JOIN SelectOptions so (NOLOCK) on so.SelectName = 'AIRTRadioActive' AND so.OptionValue = ISNULL(ri.ToolCode, i.ToolCode)
LEFT JOIN BranchPlants bp (NOLOCK) on bp.BranchPlant =  fa.BranchPlant






GO
/****** Object:  View [dbo].[vwMergeFixedAssetsSerialLookup]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwMergeFixedAssetsSerialLookup]
AS

SELECT 
  fa.FixedAssetId
  , fa.AssetNumber 
  , fa.SerialNum
  , fa.InventoryItemNum
  , fa.RNItemNum
  , fa.EquipmentStatus
  , fa.BranchPlant
  , fa.Source
  , bp.CompanyName AS BranchPlantDesc
  , fa.FixedAssetBranchPlant  
  , IsNull(i.DescShort, ri.DescShort) as AssetDescription
  , (CASE WHEN ISNULL(fa.RNItemNum, '') <> '' THEN 'RN' ELSE 'I' END) as RNI
  , fa.ThirdItemNumber
  , fa.LegacySerialNumber
  , fa.Revision
  , i.Revision as ItemNumRevision
  , IsNull(ri.IsAsset, ISNULL(i.IsAsset, 0)) AS IsAsset
  , (CASE i.DefaultSerialProfile WHEN 'S' THEN 0 ELSE 1 END) AS IsBatch
  , ps.[Status] AS StatusDesc
FROM FixedAssets(NOLOCK) fa
LEFT JOIN dbo.ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN dbo.ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
LEFT JOIN BranchPlants(NOLOCK) bp on bp.BranchPlant = fa.BranchPlant
LEFT JOIN PartStatus(NOLOCK) ps ON ps.Code = fa.EquipmentStatus
GO
/****** Object:  UserDefinedFunction [dbo].[fnGetTopMostParent]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnGetTopMostParent] (@FixedAssetId uniqueidentifier)

RETURNS TABLE AS RETURN
(
  WITH RecursiveCTE
  ( 
		ParentFixedAssetId,
		ChildFixedAssetId,
		FixedAssetId,
		InventoryItemNum,
		RNItemNum,
		SerialNum,
		Revision,
		level1,
		EquipmentStatus
   )
   AS 
   ( 
		SELECT  
				fa.ParentFixedAssetId,
				fa.FixedAssetId as ChildFixedAssetId,
				fa.FixedAssetId,
				fa.InventoryItemNum,
				fa.RNItemNum,
				fa.SerialNum,
				fa.Revision,
				0 as level1,
				fa.EquipmentStatus

		FROM FixedAssets fa With (NOLOCK)

		WHERE fa.FixedAssetId = @FixedAssetId

		UNION ALL

		SELECT			
				pc.ParentFixedAssetId as ParentFixedAssetId,
				ct.FixedAssetId as ParentFixedAssetId,
				pc.FixedAssetId,
				pc.InventoryItemNum,
				pc.RNItemNum,
				pc.SerialNum,
				pc.Revision, 
				level1 + 1,
				pc.EquipmentStatus
		
		FROM FixedAssets  pc With (NOLOCK)
		
		INNER JOIN RecursiveCTE    ct 
			ON pc.FixedAssetId = ct.ParentFixedAssetId  
			AND ct.ParentFixedAssetId <> ct.FixedAssetId
   ) 
   
   SELECT top 1
			
			ParentFixedAssetId,
			ChildFixedAssetId,
			FixedAssetId,
			InventoryItemNum,
			RNItemNum,
			SerialNum,
			Revision,
			level1,
			EquipmentStatus, 
			ps.[Status] as EquipmentStatusDesc
  
  FROM RecursiveCTE c
  LEFT JOIN dbo.PartStatus (NOLOCK) ps 
			on ps.Code = c.EquipmentStatus
  
  where FixedAssetId <> @FixedAssetId order by level1 desc
)


GO
/****** Object:  View [dbo].[vwFixedAssetJobCapacityDetails]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwFixedAssetJobCapacityDetails]
AS
select 
--top 100
  fa.FixedAssetId
  , fa.AssetNumber
  , fa.BranchPlant  
  , fa.RNItemNum
  , fa.NetBookValue
  , fa.Cost
  , c.CountryDesc
  , r.RegionDesc
  , ps.Code

  , rn.ToolPanel
  , rn.ToolCode 
  , rn.Size
  , convert(int, ps.IsActive) as IsActive
  , convert(int, ps.IsAssigned) as IsAssigned
  , convert(int, ps.IsAvailable) as IsAvailable
  , convert(int, ps.IsTesting) as IsTesting

  , convert(int, ps.IsTransit) as IsTransit
  --, ps.IsMissing as TotalMissing
  , convert(int, ps.IsRepair) as IsRepair
  , convert(int, ps.IsParked) as IsParked
  , convert(int, ps.IsOther) as IsOther

from FixedAssets fa (NOLOCK)
join ItemNums rn (NOLOCK) on fa.RNItemNum = rn.ItemNum
join PartStatus ps (NOLOCK) on ps.Code = fa.EquipmentStatus
join BranchPlants bp (NOLOCK) on bp.BranchPlant = fa.BranchPlant
LEFT JOIN dbo.Regions (NOLOCK) r ON r.Region = bp.Region
LEFT JOIN dbo.Countries (NOLOCK) c ON c.Country = bp.Country
where
  rn.IsAsset = 1
GO
/****** Object:  View [dbo].[FixedAssetSnapshots]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[FixedAssetSnapshots]
AS
SELECT [FixedAssetSnaphotId]
      ,[FixedAssetId]
      ,[InventoryItemNum]
      ,[RNItemNum]
      ,[SerialNum]
      ,[AssetNumber]
      ,[Revision]
      ,[InventoryDate]
      ,[EquipmentStatus]
      ,[NumDaysInEquipmentStatus]
      ,[LastEquipmentStatus]
      ,[LastStatusChangeDate]
      ,[BranchPlant]
      ,[NumDaysInBranchPlant]
      ,[LastBranchPlant]
      ,[NetBookValue]
  FROM [AesWarehouse].[dbo].[FixedAssetSnapshots]
GO
/****** Object:  View [dbo].[vwFixedAssetBranchPlantHistoryReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwFixedAssetBranchPlantHistoryReport] as
SELECT 
	fs.FixedAssetSnaphotId, fs.FixedAssetId, fs.InventoryItemNum, fs.RNItemNum, 
	fs.SerialNum, fs.AssetNumber, fs.Revision, fs.InventoryDate as EndDate, fs.EquipmentStatus, 
	fs.NumDaysInEquipmentStatus, fs.LastEquipmentStatus, fs.LastStatusChangeDate, 
	fs.BranchPlant, fs.NumDaysInBranchPlant, fs.LastBranchPlant, 
	fs.LastBranchPlantChangeDate, fs.LastBillableBranchPlant, 
	fs.NetBookValue,i.ToolPanel,i.ToolCode,f.TechId,
	ps.[Status] as EquipmentStatusDesc,
	lps.[Status] as LastEquipmentStatusDesc,cbp.CompanyName as BranchPlantDesc,
	lbp.CompanyName as LastBranchPlantDesc,cr.Region, cr.RegionDesc,
	lr.Region as LastRegion, lr.RegionDesc as LastRegionDesc,cc.Country,
	cc.CountryDesc,lc.Country as LastCountry, lc.CountryDesc as LastCountryDesc,
	f.Cost,i.IsAsset
FROM FixedAssetSnapshots fs (NOLOCK)
LEFT JOIN FixedAssets as f (NOLOCK) on f.FixedAssetId = fs.FixedAssetId
LEFT JOIN ItemNums as i (NOLOCK) on i.ItemNum = f.InventoryItemNum
LEFT JOIN PartStatus ps (NOLOCK) ON ps.Code = fs.EquipmentStatus
LEFT JOIN PartStatus lps (NOLOCK) ON lps.Code = fs.LastEquipmentStatus
LEFT JOIN BranchPlants cbp (NOLOCK) on cbp.BranchPlant = fs.BranchPlant 
LEFT JOIN BranchPlants lbp (NOLOCK) on lbp.BranchPlant = fs.LastBranchPlant
LEFT JOIN Regions cr (NOLOCK) on cr.Region = cbp.Region
LEFT JOIN Regions lr (NOLOCK) on lr.Region = lbp.Region
LEFT JOIN Countries cc (NOLOCK) on cc.Country = cbp.Country
LEFT JOIN Countries lc (NOLOCK) on lc.Country = lbp.Country




GO
/****** Object:  View [dbo].[vwAssetHistoryReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwAssetHistoryReport] AS

SELECT 
  fas.FixedAssetSnaphotId, fas.SerialNum, fas.InventoryItemNum, fas.EquipmentStatus
  , fas.InventoryDate, fas.NumDaysInEquipmentStatus, fas.NumDaysInBranchPlant
  , fas.LastStatusChangeDate
  , fa.TechId, fa.SerialDescLong
  , fa.Cost AS AcquisitionValue
  , fa.LegacySerialNumber
  , ps.Status AS EquipmentStatusDesc
  , i.ToolPanel, i.ToolCode, i.IsAsset
  , bp.Region, r.RegionDesc, bp.Country, c.CountryDesc, bp.BranchPlant
  , bp.CompanyName as BranchPlantName 
  , NULL AS BillableRegion, NULL AS BillableRegionDesc
  , NULL AS BillableCountry, NULL AS BillableCountryDesc, NULL as LastBillableBranchPlant
  , NULL as LastBillableBranchPlantName
  , fas.NumDaysInEquipmentStatus AS DaysDiff  --  DATEDIFF(DAY, fas.LastStatusChangeDate, fas.InventoryDate)

FROM AesWarehouse.dbo.FixedAssetSnapshots (NOLOCK) fas
LEFT JOIN FixedAssets (NOLOCK) fa ON fa.FixedAssetId=fas.FixedAssetId
LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum=fas.InventoryItemNum
LEFT JOIN PartStatus (NOLOCK) ps ON ps.Code = fas.EquipmentStatus
LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant=fa.BranchPlant
LEFT JOIN Regions (NOLOCK) r ON r.Region=bp.Region
LEFT JOIN Countries (NOLOCK) c ON c.Country=bp.Country
--LEFT JOIN BranchPlants (NOLOCK) bbp ON bbp.BranchPlant=fas.LastBillableBranchPlant
--LEFT JOIN Regions (NOLOCK) br ON br.Region=bbp.Region
--LEFT JOIN Countries (NOLOCK) bc ON bc.Country=bbp.Country


GO
/****** Object:  View [dbo].[vwPartStatusHistoryReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwPartStatusHistoryReport] AS

SELECT fas.FixedAssetSnaphotId, fas.SerialNum, fas.InventoryItemNum, fa.TechId, fas.LastEquipmentStatus,
		ps1.[Status] AS LastEquipmentStatusDesc, fas.EquipmentStatus, ps2.[Status] AS EquipmentStatusDesc,
		i.ToolPanel, i.ToolCode, bp.Region, bp.Country, bp.BranchPlant, bp.CompanyName AS BranchPlantName, i.IsAsset, fas.InventoryDate,
		fas.InventoryDate-fas.NumDaysInEquipmentStatus AS StartDate, fas.InventoryDate AS EndDate,
		r.RegionDesc, c.CountryDesc

FROM FixedAssetSnapshots (NOLOCK) fas
LEFT JOIN FixedAssets (NOLOCK) fa ON fa.FixedAssetId=fas.FixedAssetId
LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum=fas.InventoryItemNum
LEFT JOIN PartStatus (NOLOCK) ps1 ON ps1.Code = fas.LastEquipmentStatus
LEFT JOIN PartStatus (NOLOCK) ps2 ON ps2.Code = fas.EquipmentStatus
LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
LEFT JOIN Regions (NOLOCK) r ON r.Region = bp.Region
LEFT JOIN Countries (NOLOCK) c ON c.Country = bp.Country



GO
/****** Object:  View [dbo].[vwWAMFixedAssetReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
CREATE view [dbo].[vwWAMFixedAssetReport]
AS
SELECT 
  fa.FixedAssetId
  , fa.AssetNumber
  , fa.BranchPlant  
  , bp.CompanyName AS BranchPlantName
  , fa.RNItemNum
  , fa.NetBookValue
  , fa.Cost
  , fa.CurrencyCode
  , fa.LastStatusChangeDate
  , CASE WHEN DATEDIFF(DAY, ISNULL(fa.LastStatusChangeDate,GETDATE()),GETDATE()) >90 AND ps.IsAssigned = 1 THEN 1 ELSE 0 END AS IsIdle
  , bp.IsGlobalRepair
  , c.Country
  , c.CountryDesc
  , r.Region
  , r.RegionDesc
  , ps.Code
  , ps.[Status]
  , rn.ToolPanel
  , rn.ToolCode 
  , rn.Size
  , CONVERT(INT, ps.IsActive) AS IsActive
  , CONVERT(INT, ps.IsAssigned) AS IsAssigned
  , CONVERT(INT, ps.IsAvailable) AS IsAvailable
  , CONVERT(INT, ps.IsTesting) AS IsTesting

  , CONVERT(INT, ps.IsTransit) AS IsTransit
  --, ps.IsMissing as TotalMissing
  , CONVERT(INT, ps.IsRepair) AS IsRepair
  , CONVERT(INT, ps.IsParked) AS IsParked
  , CONVERT(INT, ps.IsOther) AS IsOther

FROM FixedAssets fa (NOLOCK)
INNER JOIN ItemNums rn (NOLOCK) ON fa.RNItemNum = rn.ItemNum
LEFT OUTER JOIN PartStatus ps (NOLOCK) ON ps.Code = fa.EquipmentStatus
LEFT OUTER JOIN BranchPlants bp (NOLOCK) ON bp.BranchPlant = fa.BranchPlant
LEFT OUTER JOIN dbo.Regions (NOLOCK) r ON r.Region = bp.Region
LEFT OUTER JOIN dbo.Countries (NOLOCK) c ON c.Country = bp.Country
WHERE
  rn.IsAsset = 1
  

GO
/****** Object:  View [dbo].[vw_FixedAssetParentChildSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
----=========================================================================================            
-- Created BY: Mangesh V Taware        
-- Created ON : 08 Jan 2018        
-- DESCRIPTION: For Use Fixed Assets search         
----========================================================================================            
CREATE VIEW [dbo].[vw_FixedAssetParentChildSearch]  
 AS            
SELECT             
  fa.FixedAssetId,            
  fa.SerialNum,            
  fa.InventoryItemNum,            
  fa.AssetNumber,  
  fa.BranchPlant,            
  bp.CompanyName AS BranchPlantName,            
  fa.ParentNumber,    
  faa.SerialNum as TopLevelSerialNum,  
  fa.ParentFixedAssetId,    
  fa.EquipmentStatus,            
  fa.LegacySerialNumber,            
  fa.RNItemNum,            
  fa.AssetDescription AS FixedAssetDescription,            
  i.DescShort AS AssetDescription,            
  i.DescLong AS InventoryDescLong,            
  fa.FixedAssetBranchPlant,            
  fbp.CompanyName AS FixedAssetBranchPlantName,            
  fa.ManufacturersSerialNumber,            
  fa.Revision,            
  fa.CatCode16,            
  ps.[Status] AS StatusDesc,        
  ps.IsDisposed,       
  r.Region,            
  r.RegionDesc,            
  c.Country,            
  c.CountryDesc,        
  ISNULL(ri.ToolPanel, i.ToolPanel) AS ToolPanel,  
  ISNULL(ri.ToolCode, i.ToolCode) AS ToolCode,  
  gl.GLProductLineId AS ProductLineId,  
  ISNULL(ri.IsAsset, ISNULL(i.IsAsset, 0)) AS IsAsset,        
  CASE fa.EquipmentStatus  WHEN '50' THEN 'Y' ELSE 'N' END AS Is50Equipment,  
  (SELECT COUNT(*)   
 FROM FixedAssets fc (NOLOCK)  
  LEFT JOIN dbo.ItemNums(NOLOCK) i1 ON i1.ItemNum = fc.InventoryItemNum
  LEFT JOIN dbo.ItemNums(NOLOCK) ri1 ON ri1.ItemNum = fc.RNItemNum
 WHERE ParentFixedAssetId = fa.FixedAssetId AND ISNULL(fc.InventoryItemNum,'0') != '0'
   AND ISNULL(ri1.IsAsset, ISNULL(i1.IsAsset, 0)) = 1  
 ) AS ChildAssetCount  
FROM dbo.FixedAssets(NOLOCK) fa            
LEFT JOIN dbo.ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum            
LEFT JOIN dbo.ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum           
LEFT JOIN dbo.BranchPlants(NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant            
LEFT JOIN dbo.BranchPlants(NOLOCK) fbp ON fbp.BranchPlant = fa.FixedAssetBranchPlant            
LEFT JOIN dbo.PartStatus(NOLOCK) ps ON ps.Code = fa.EquipmentStatus            
LEFT JOIN dbo.Regions(NOLOCK) r ON r.Region = bp.Region            
LEFT JOIN dbo.Countries(NOLOCK) c ON c.Country = bp.Country          
LEFT JOIN GLCodes gl (NOLOCK) ON gl.GLCode = fa.ProductLineCode     
Left JOIN FixedAssets faa (NOLOCK) ON faa.FixedAssetId  = fa.TopLevelFixedAssetId  
WHERE ISNULL(ri.IsAsset, ISNULL(i.IsAsset, 0)) = 1
GO
/****** Object:  View [dbo].[vwPartStatusSummary]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwPartStatusSummary] 
AS
SELECT  NEWID() as Id, 'IsDisposed' as StatusKey, STUFF((SELECT ',' + s.Code FROM PartStatus s WHERE s.IsDisposed = 1 FOR XML PATH('')),1,1,'') AS Value
UNION ALL
SELECT  NEWID() as Id,'IsActive' as StatusKey, STUFF((SELECT ',' + s.Code FROM PartStatus s WHERE s.IsActive = 1 FOR XML PATH('')),1,1,'') AS Value
UNION ALL
SELECT  NEWID() as Id,'IsAssigned' as StatusKey, STUFF((SELECT ',' + s.Code FROM PartStatus s WHERE s.IsAssigned = 1 FOR XML PATH('')),1,1,'') AS Value
UNION ALL
SELECT  NEWID() as Id,'IsAvailable' as StatusKey, STUFF((SELECT ',' + s.Code FROM PartStatus s WHERE s.IsAvailable = 1 FOR XML PATH('')),1,1,'') AS Value
UNION ALL
SELECT  NEWID() as Id,'IsInActive' as StatusKey, STUFF((SELECT ',' + s.Code FROM PartStatus s WHERE s.IsInActive = 1 FOR XML PATH('')),1,1,'') AS Value
UNION ALL
SELECT  NEWID() as Id,'IsOther' as StatusKey, STUFF((SELECT ',' + s.Code FROM PartStatus s WHERE s.IsOther = 1 FOR XML PATH('')),1,1,'') AS Value
UNION ALL
SELECT  NEWID() as Id,'IsParked' as StatusKey, STUFF((SELECT ',' + s.Code FROM PartStatus s WHERE s.IsParked = 1 FOR XML PATH('')),1,1,'') AS Value
UNION ALL
SELECT  NEWID() as Id,'IsRepair' as StatusKey, STUFF((SELECT ',' + s.Code FROM PartStatus s WHERE s.IsRepair = 1 FOR XML PATH('')),1,1,'') AS Value
UNION ALL
SELECT  NEWID() as Id,'IsTesting' as StatusKey, STUFF((SELECT ',' + s.Code FROM PartStatus s WHERE s.IsTesting = 1 FOR XML PATH('')),1,1,'') AS Value
UNION ALL
SELECT  NEWID() as Id,'IsTransit' as StatusKey, STUFF((SELECT ',' + s.Code FROM PartStatus s WHERE s.IsTransit = 1 FOR XML PATH('')),1,1,'') AS Value






GO
/****** Object:  View [dbo].[vwFixedAssetException]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwFixedAssetException]
AS 
SELECT 
	fa.FixedAssetId
	, fa.AssetNumber
	, fa.SerialNum
	, fa.InventoryItemNum
	, fa.RNItemNum
	, fa.AssetDescription
	, fa.BranchPlant
	, bp.CompanyName AS BranchPlantName
	, r.RegionDesc
	, c.CountryDesc
	, fa.EquipmentStatus
	, ps.[Status] as StatusDesc
	, i.DefaultSerialProfile
	, so.OptionLabel as DefaultSerialProfileDesc
FROM FixedAssets (NOLOCK) fa 
LEFT OUTER JOIN ItemNums (NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT OUTER JOIN SelectOptions(NOLOCK) so ON so.SelectName = 'DefaultSerialProfile' AND so.OptionValue = i.DefaultSerialProfile
LEFT OUTER JOIN dbo.BranchPlants (NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
LEFT OUTER JOIN dbo.Regions (NOLOCK) r ON r.Region = bp.Region
LEFT OUTER JOIN dbo.Countries (NOLOCK) c ON c.Country = bp.Country
LEFT OUTER JOIN dbo.PartStatus (NOLOCK) ps ON ps.Code = fa.EquipmentStatus
WHERE fa.AssetNumber IS NOT NULL AND ISNULL(i.DefaultSerialProfile, '') <> 'S'

UNION

SELECT 
	fa.FixedAssetId
	, fa.AssetNumber
	, fa.SerialNum
	, fa.InventoryItemNum
	, fa.RNItemNum
	, fa.AssetDescription
	, fa.BranchPlant
	, bp.CompanyName AS BranchPlantName
	, r.RegionDesc
	, c.CountryDesc
	, fa.EquipmentStatus
	, ps.[Status] as StatusDesc
	, ri.DefaultSerialProfile
	, so.OptionLabel as DefaultSerialProfileDesc
FROM FixedAssets (NOLOCK) fa 
LEFT OUTER JOIN ItemNums (NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
LEFT OUTER JOIN SelectOptions(NOLOCK) so ON so.SelectName = 'DefaultSerialProfile' AND so.OptionValue = ri.DefaultSerialProfile
LEFT OUTER JOIN dbo.BranchPlants (NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
LEFT OUTER JOIN dbo.Regions (NOLOCK) r ON r.Region = bp.Region
LEFT OUTER JOIN dbo.Countries (NOLOCK) c ON c.Country = bp.Country
LEFT OUTER JOIN dbo.PartStatus (NOLOCK) ps ON ps.Code = fa.EquipmentStatus
WHERE fa.AssetNumber IS NOT NULL AND ISNULL(ri.DefaultSerialProfile, '') <> 'S'


GO
/****** Object:  View [dbo].[VwCIFixedAssets]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE View [dbo].[VwCIFixedAssets] AS

select 
techid,
serialnum,
InventoryItemNum as partnum,
a.ThirdItemNumber,
ps.status,
AssetDescription as serialdesc,
bp.CompanyName as functionallocation,
StdCost,
Cost as acquistionvalue,
NetBookValue,
dbo.fnGetUSDConversionFactor(a.CurrencyCode,NULL) as currratio,
ISNULL(ri.ToolPanel, i.ToolPanel) as ToolPanel,
ISNULL(ri.ToolCode, i.ToolCode) as ToolCode,
a.FixedAssetId as assetid,
a.MfgPartNum,
FixedAssetBranchPlant as ChargeLocationId,
a.Submt,
a.ParentPartId,
a.PartInternalStatus,
0 as ComplianceCROpen,
'' as HTSUSNo,
'' as ECCNNo
from FixedAssets a WITH (NOLOCK)
left join PartStatus ps WITH (NOLOCK) on ps.Code = a.EquipmentStatus
left join BranchPlants bp WITH (NOLOCK) on bp.BranchPlant = a.BranchPlant
--left join CurrencyConversionFactors cc WITH (NOLOCK) on cc.CurrShortName = a.CurrencyCode
left join ItemNums i WITH (NOLOCK) on i.ItemNum = a.InventoryItemNum
left join ItemNums ri WITH (NOLOCK) on ri.ItemNum = a.RNItemNum





















GO
/****** Object:  View [dbo].[vwCBMMeterReading]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwCBMMeterReading] 
AS    
SELECT 
		f.SerialNum, 
		f.InventoryItemNum,
		i.DescShort, 
		LastMeterReadingValue, 
		LifeTimeValue,
		cm.GlobalTrigger,
		ps.Status [EquipmentStatus], 
		f.LastStatusChangeDate,
		b.BranchPlant,
		CompanyName, 
		Region [GeoZone], 
		f1.SerialNum [TopLevelSerialNum],
		i2.DescShort [TopLevelPartDesc], 
		i2.ToolCode,
		i2.ToolPanel,
		a.Operhrs,
		gl.SegmentPL,
		gl.GLProductLineId AS ProductLineId
FROM 
		dbo.CBMCalculatedMeterReadings(NOLOCK) m
		JOIN FixedAssets(NOLOCK) f on f.fixedassetid = m.fixedassetid
		JOIN itemnums(NOLOCK) i on i.itemnum = f.inventoryitemnum
		JOIN BranchPlants(NOLOCK) b on b.branchplant = f.branchplant
		JOIN PartStatus(NOLOCK) ps on ps.Code = f.EquipmentStatus
		JOIN (
				SELECT 
						FixedAssetId, 
						TopLevelFixedAssetId,
						SUM(OperHrs)[Operhrs]
				FROM 
						CBMRunAssetMappings(NOLOCK) cam
				JOIN Runs(NOLOCK) r on r.runid = cam.runid
				GROUP BY fixedassetid, toplevelfixedassetid) a on a.FixedAssetId = m.FixedAssetId
		JOIN FixedAssets(NOLOCK) f1 on f1.FixedAssetId = a.TopLevelFixedAssetId
		JOIN CBMMonitorAssetItemNums(NOLOCK) ca1 on ca1.ItemNum = f1.InventoryItemNum and ca1.IsParent = 1
		JOIN CBMMonitorAssetItemNums(NOLOCK) ca2 on ca2.ItemNum = f.InventoryItemNum and ca2.IsParent = 0
		JOIN CBMMonitor(NOLOCK) cm on cm.CBMMonitorId = ca1.CBMMonitorId and cm.CBMMonitorId = ca2.CBMMonitorId and cm.MeterReadingTypeId = '3'
		JOIN ItemNums(NOLOCK) i2 on i2.ItemNum = f1.InventoryItemNum
		JOIN GLCodes(NOLOCK) gl on f1.ProductLineCode=gl.GLCode
WHERE m.MeterReadingTypeId = '3'
GO
/****** Object:  View [dbo].[vwToolStringFixedAssets_Shipment]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwToolStringFixedAssets_Shipment]
AS
SELECT f.ToolStringFixedAssetsId,
		f.ToolStringID,
		t.SerialNumber AS ToolString,
		f.PartTypeID,
		p.Name AS PartTypeName,
		t.Type AS ToolType,
		f.FixedAssetId,
		f.SerialNum, 
		f.RNItemNum,
		f.Revision,
		f.InventoryItemNum, 
		fa.EquipmentStatus,
		rn.DescShort,
		t.IsDeleted,
		t.Disassembled,
		ISNULL(bp.IsNonLiveLocation,0) AS IsNonLiveLocation,
		fa.BranchPlant, 
		bp.CompanyName AS BranchPlantDesc,
		IsNull(i.DescShort, ISNULL(rn.DescShort, fa.AssetDescription)) as AssetDescription,
		(CASE i.DefaultSerialProfile WHEN 'S' THEN 0 ELSE 1 END) AS IsBatch,
		ps.[Status] AS StatusDesc,
		fa.LastComments
FROM dbo.ToolStringFixedAssets (NOLOCK) f
LEFT JOIN dbo.FixedAssets (NOLOCK) fa on fa.FixedAssetId = f.FixedAssetID
LEFT JOIN dbo.ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN dbo.ItemNums (NOLOCK) rn ON rn.ItemNum = f.RNItemNum
LEFT JOIN PartTypes (NOLOCK) p ON p.PartTypeId = f.PartTypeID
LEFT JOIN ToolStrings (NOLOCK) t ON t.ToolStringId = f.ToolStringID
LEFT JOIN BranchPlants(NOLOCK) bp on bp.BranchPlant = fa.BranchPlant
LEFT JOIN PartStatus(NOLOCK) ps ON ps.Code = fa.EquipmentStatus




GO
/****** Object:  View [dbo].[VWFixedAssetInfo]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[VWFixedAssetInfo]
AS

	SELECT fa.FixedAssetId
			, fa.SerialNum
			, fa.AssetNumber
			, fa.RNItemNum
			, fa.InventoryItemNum

			, fp.SerialNum [ParentSerialNumber]
			, fa.ParentNumber -- Parent Asset Number
			, fp.RNItemNum [ParentRNItemNumber]
			, fp.InventoryItemNum [ParentInventoryItemNum]
			, (select Status+ ' (' + Code + ')' from dbo.partstatus where Code = fa.EquipmentStatus) As EquipmentStatus
			, fa.LastStatusChangeDate
			, fa.BranchPlant
			, b.CompanyName [BranchPlantDesc]
			, fa.FixedAssetBranchPlant
			, bf.CompanyName [FixedAssetBranchPlantDesc]

			, ISNULL(i.PartClassification, r.PartClassification) [PartClassification]
			, fa.MfgPartNum
			, ISNULL(i.ToolCode, r.ToolCode) [ToolCode]
			, ISNULL(i.ToolPanel, r.ToolPanel) [ToolPanel]
			, fa.ThirdItemNumber
			, null [ThirdItemNumberDesc]
			, ISNULL(i.DescShort, r.DescShort) [ItemNumberDesc]
			, fa.AssetDescription

			, fa.Ownership
			, fa.CatCode16
			, fa.LegacySerialNumber
			, dbo.GetLastBillableLocation(fa.FixedAssetId,'BranchPlant') AS LastBillableBranchPlant
			, dbo.GetLastBillableLocation(fa.FixedAssetId,'BranchPlantName') AS LastBillableBranchPlantDesc
			, ft.SerialNum [TopLevelSerialNum]
			, ft.AssetDescription [TopLevelAssetDesc]
			, ft.EquipmentStatus [TopLevelStatus]
			, fa.Cost
			, fa.NetBookValue
			, isnull(fa.NetBookValue,0) + (Select   isnull(sum(isnull(NetBookValue,0)),0)     from FixedAssets WHERE   (ParentFixedAssetId = fa.FixedAssetId OR TopLevelFixedAssetId = fa.FixedAssetId)) as NetBookValueWithChild
			, fa.AccumDepreciation
			, fa.DateAcquired
			, fa.CurrencyCode
			, fa.LifeMonths
			, fa.StartDepreciation_Date
			, fa.DateDisposed
			, fa.ModelYear
			, fa.FiscalYear
			, fa.LedgerType
			, fa.Manufacturer
			, fa.Comments
			, fa.AssetLifeRemaining
			, CAST(CASE WHEN i.EcnRestriction = 1 OR r.EcnRestriction = 1 THEN 1 ELSE 0 END AS BIT) [EcnRestriction]
	FROM FixedAssets fa (NOLOCK)
	LEFT JOIN FixedAssets fp (NOLOCK) ON fa.ParentFixedAssetId = fp.FixedAssetId
	LEFT JOIN FixedAssets ft (NOLOCK) ON fa.TopLevelFixedAssetId = ft.FixedAssetId
	LEFT JOIN BranchPlants b (NOLOCK) ON b.BranchPlant = fa.BranchPlant
	LEFT JOIN BranchPlants bf (NOLOCK) ON bf.BranchPlant = fa.FixedAssetBranchPlant
	LEFT JOIN ItemNums i (NOLOCK) ON i.ItemNum = fa.InventoryItemNum
	LEFT JOIN ItemNums r (NOLOCK) ON r.ItemNum = fa.RNItemNum





GO
/****** Object:  View [dbo].[vwFixedAssetJobCapacitySummaryBranchPlant]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwFixedAssetJobCapacitySummaryBranchPlant]
AS
select 
--top 100
  newid() as id
  , a.ToolPanel
  , a.ToolCode 
  , a.RegionDesc
  , a.CountryDesc
  , a.BranchPlant
  , a.Size as ToolSize
  
  , sum(a.IsActive) as TotalActive
  , sum(a.IsAssigned) as TotalAssigned
  , sum(a.IsAvailable) as TotalAvailable
  , sum(a.IsTesting) as TotalTesting

  , sum(a.IsActive) 
    + sum(a.IsAssigned)
    + sum(a.IsAvailable)
    + sum(a.IsTesting) as TotalCanUse
    
  , SUM(CASE WHEN a.IsActive=1 OR a.IsAssigned=1 OR a.IsAvailable=1 OR a.IsTesting=1 THEN a.NetBookValue ELSE 0 END) as TotalCanUseNetBookValue
  , SUM(CASE WHEN a.IsActive=1 OR a.IsAssigned=1 OR a.IsAvailable=1 OR a.IsTesting=1 THEN a.Cost ELSE 0 END) as TotalCanUseCost
  
  , sum(a.IsTransit) as TotalTransit
  --, sum(a.IsMissing) as TotalMissing
  , sum(a.IsRepair) as TotalRepair
  , sum(a.IsParked) as TotalParked
  , sum(a.IsOther) as TotalOther

  , sum(a.IsTransit)
    + sum(a.IsRepair)
    + sum(a.IsParked)
    + sum(a.IsOther) as TotalCannotUse
  
  , SUM(CASE WHEN a.IsTransit=1 OR a.IsRepair=1 OR a.IsParked=1 OR a.IsOther=1 THEN a.NetBookValue ELSE 0 END) as TotalCannotUseNetBookValue
  , SUM(CASE WHEN a.IsTransit=1 OR a.IsRepair=1 OR a.IsParked=1 OR a.IsOther=1 THEN a.Cost ELSE 0 END) as TotalCannotUseCost
  
  , sum(a.IsActive)
    + sum(a.IsAssigned)
    + sum(a.IsAvailable)
    + sum(a.IsTesting)
    + sum(a.IsTransit) 
    + sum(a.IsRepair)
    + sum(a.IsParked)
    + sum(a.IsOther) as TotalCount

  , SUM(a.NetBookValue) as TotalNetBookValue
  , SUM(a.Cost) as TotalCost

from vwFixedAssetJobCapacityDetails a
group by
  a.ToolPanel, a.ToolCode, a.RegionDesc, a.CountryDesc, a.BranchPlant, a.Size




GO
/****** Object:  View [dbo].[vwFixedAssetJobCapacitySummaryCountry]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwFixedAssetJobCapacitySummaryCountry]
AS
select 
--top 100
  a.ToolPanel
  , a.ToolCode 
  , a.RegionDesc
  , a.CountryDesc
  , a.Size
  
  , sum(a.IsActive) as TotalActive
  , sum(a.IsAssigned) as TotalAssigned
  , sum(a.IsAvailable) as TotalAvailable
  , sum(a.IsTesting) as TotalTesting

  , sum(a.IsActive) 
    + sum(a.IsAssigned)
    + sum(a.IsAvailable)
    + sum(a.IsTesting) as TotalCanUse
    
  , SUM(CASE WHEN a.IsActive=1 OR a.IsAssigned=1 OR a.IsAvailable=1 OR a.IsTesting=1 THEN a.NetBookValue ELSE 0 END) as TotalCanUseNetBookValue
  , SUM(CASE WHEN a.IsActive=1 OR a.IsAssigned=1 OR a.IsAvailable=1 OR a.IsTesting=1 THEN a.Cost ELSE 0 END) as TotalCanUseCost
  
  , sum(a.IsTransit) as TotalTransit
  --, sum(a.IsMissing) as TotalMissing
  , sum(a.IsRepair) as TotalRepair
  , sum(a.IsParked) as TotalParked
  , sum(a.IsOther) as TotalOther

  , sum(a.IsTransit)
    + sum(a.IsRepair)
    + sum(a.IsParked)
    + sum(a.IsOther) as TotalCannotUse
  
  , SUM(CASE WHEN a.IsTransit=1 OR a.IsRepair=1 OR a.IsParked=1 OR a.IsOther=1 THEN a.NetBookValue ELSE 0 END) as TotalCannotUseNetBookValue
  , SUM(CASE WHEN a.IsTransit=1 OR a.IsRepair=1 OR a.IsParked=1 OR a.IsOther=1 THEN a.Cost ELSE 0 END) as TotalCannotUseCost
  
  , sum(a.IsActive)
    + sum(a.IsAssigned)
    + sum(a.IsAvailable)
    + sum(a.IsTesting)
    + sum(a.IsTransit) 
    + sum(a.IsRepair)
    + sum(a.IsParked)
    + sum(a.IsOther) as TotalCount

  , SUM(a.NetBookValue) as TotalNetBookValue
  , SUM(a.Cost) as TotalCost

from vwFixedAssetJobCapacityDetails a
group by
  a.ToolPanel, a.ToolCode, a.RegionDesc, a.CountryDesc, a.Size




GO
/****** Object:  Table [dbo].[PortletsUser]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PortletsUser](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PortletID] [int] NULL,
	[UserID] [int] NULL,
	[Priority] [int] NOT NULL,
	[ModuleName] [varchar](50) NULL,
 CONSTRAINT [PK_PortletsUser] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwUserPortlets]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwUserPortlets]
AS

SELECT p.PortletId, p.PortletName, p.EntityName, p.IsDefault, pu.UserID, pu.Priority, 
		p.SortInfo, p.SortOrder, p.PortletType, p.BranchPlantColumnName, pu.ModuleName
FROM Portlets (NOLOCK) p
LEFT JOIN PortletsUser (NOLOCK) pu ON pu.PortletID = p.PortletId
WHERE p.IsDefault=0 AND p.Active=1

UNION

SELECT p.PortletId, p.PortletName, p.EntityName, p.IsDefault, NULL, 0, 
		p.SortInfo, p.SortOrder, p.PortletType, p.BranchPlantColumnName, NULL AS ModuleName
FROM Portlets (NOLOCK) p
WHERE p.IsDefault=1 AND p.Active=1







GO
/****** Object:  View [dbo].[vwPortletSubscription]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwPortletSubscription]
AS

SELECT p.PortletId, p.PortletName, p.EntityName, p.SortInfo, p.SortOrder, p.PortletType, p.IsDefault, u.UserId, 
	CASE WHEN (SELECT PortletID FROM PortletsUser pu WITH(NOLOCK) WHERE pu.PortletID = p.PortletId AND pu.UserID = u.UserId) IS NULL THEN 0 ELSE 1 END AS IsSubscribed,
	ISNULL((SELECT Priority FROM PortletsUser WITH(NOLOCK) WHERE PortletId = p.PortletId AND UserId=u.UserId),0) As Priority,
	(SELECT ModuleName FROM PortletsUser pu WITH(NOLOCK) WHERE pu.PortletID = p.PortletId AND pu.UserID = u.UserId) AS ModuleName
FROM Users (NOLOCK) u 
LEFT JOIN Portlets (NOLOCK) p ON 1=1
where p.Active=1



GO
/****** Object:  View [dbo].[vwECNs]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE View [dbo].[vwECNs] AS
	SELECT 
		e.ECNId,
		e.ECNNumber, 
		e.ECNDepartment, 
		e.ECNCategory, 
		e.ECNCreator,
		e.ECNCreatedDate, 
		e.ECNPriority, 
		e.ECNReason, 
		e.ECNStatus, 
		e.ECNStatusDate,
		e.ECNType,
		e.ECNName,
		e.ECNDescription,
		e.IsFromJDE
FROM [ECNs] e (NOLOCK)






GO
/****** Object:  Table [dbo].[ECNItems]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ECNItems](
	[ECNItemId] [int] IDENTITY(1,1) NOT NULL,
	[ECNId] [int] NOT NULL,
	[ItemNumber] [varchar](30) NULL,
	[Disposition] [varchar](255) NULL,
	[ChangeType] [varchar](30) NULL,
	[ChangeLevel] [varchar](5) NULL,
	[CreatedDate] [datetime] NULL,
	[PartState] [varchar](30) NULL,
 CONSTRAINT [PK_ECNItems] PRIMARY KEY CLUSTERED 
(
	[ECNItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwECNItems]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwECNItems]
AS
SELECT     
		ei.ECNItemId, 
		ei.ECNId, 
		ei.ItemNumber, 
		ei.Disposition, 
		ei.ChangeType, 
		ei.ChangeLevel, 
		ei.CreatedDate, 
		e.ECNNumber,
		ip.MetaValue as PrimaryLegacyNumber,
		(Select TOP 1 a.MetaValue from ItemNumMetadata a WITH(NOLOCK) Where a.ItemNum = ei.ItemNumber and a.MetaName = 'Secondary') as SecondaryLegacyNumber,
		ei.PartState
FROM ECNItems ei WITH(NOLOCK)
LEFT OUTER JOIN ECNs e WITH(NOLOCK) ON e.ECNId = ei.ECNId
LEFT OUTER JOIN ItemNumMetadata ip WITH(NOLOCK) on ip.ItemNum = ei.ItemNumber AND ip.MetaName = 'Primary'




GO
/****** Object:  View [dbo].[vwBoardItemNums]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE VIEW [dbo].[vwBoardItemNums]
AS

Select 
  bin.BoardId, bin.BoardItemNum as BoardItemNumber, bin.IsSoftware, bin.SoftwareType, it.DescShort as BoardDescription

from BoardItemNums (NOLOCK) bin 
LEFT OUTER JOIN ItemNums (NOLOCK) it on bin.BoardItemNum = it.ItemNum 


GO
/****** Object:  Table [dbo].[AuditCustomsInvoices]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditCustomsInvoices](
	[AuditActionId] [int] NOT NULL,
	[CustomsInvoiceId] [uniqueidentifier] NOT NULL,
	[CustomsInvoiceStatusId] [int] NOT NULL,
	[FromBranchPlant] [varchar](12) NOT NULL,
	[ToBranchPlant] [varchar](12) NOT NULL,
	[TitleText] [varchar](100) NULL,
	[TotalValueText] [varchar](100) NULL,
	[ShipperLine1] [varchar](256) NULL,
	[ShipperLine2] [varchar](256) NULL,
	[ShipperLine3] [varchar](256) NULL,
	[ShipperLine4] [varchar](256) NULL,
	[ShipperLine5] [varchar](256) NULL,
	[ShipperLine6] [varchar](256) NULL,
	[ShipperLine7] [varchar](256) NULL,
	[ConsigneeLine1] [varchar](256) NULL,
	[ConsigneeLine2] [varchar](256) NULL,
	[ConsigneeLine3] [varchar](256) NULL,
	[ConsigneeLine4] [varchar](256) NULL,
	[ConsigneeLine5] [varchar](256) NULL,
	[ConsigneeLine6] [varchar](256) NULL,
	[ConsigneeLine7] [varchar](256) NULL,
	[InvoiceAutoNumber] [int] NOT NULL,
	[InvoiceNumber] [varchar](35) NULL,
	[InvoiceDate] [datetime] NOT NULL,
	[ProcessedBy] [varchar](35) NOT NULL,
	[TrackingNumber] [varchar](50) NULL,
	[PackagingInformation] [varchar](100) NULL,
	[ShipmentMethod] [varchar](25) NULL,
	[TaxIdNumber] [varchar](25) NULL,
	[AirWaybillNumber] [varchar](50) NULL,
	[ConsigneeNumber] [varchar](50) NULL,
	[Comments] [varchar](4000) NULL,
	[DateAdded] [datetime] NOT NULL,
	[ShipperSignatureName] [varchar](100) NULL,
	[ShipperSignatureTitle] [varchar](100) NULL,
	[CreateDate] [datetime] NOT NULL,
	[CreatedUserName] [varchar](35) NOT NULL,
	[LastEditDate] [datetime] NOT NULL,
	[LastEditUserName] [varchar](35) NOT NULL,
	[Description] [varchar](1000) NULL,
	[Packer] [varchar](50) NULL,
	[PackerDate] [datetime] NULL,
	[DateSubmittedForApproval] [datetime] NULL,
	[ApprovalDate] [datetime] NULL,
	[IsAirlineApprovalReceived] [bit] NOT NULL,
	[IsImportLicenseReceived] [bit] NOT NULL,
	[IsNRCNotified] [bit] NOT NULL,
	[FreightForwarders] [varchar](50) NULL,
	[AWBNumber] [varchar](100) NULL,
	[ETA] [datetime] NULL,
	[IsShipmentComplete] [bit] NOT NULL,
	[AdditionalText] [varchar](4000) NULL,
	[IsDangerousGoods] [bit] NOT NULL,
	[IsAssetShipment] [bit] NOT NULL,
	[IsRepairShipment] [bit] NOT NULL,
	[AssetShipmentTitleText] [varchar](100) NULL,
	[AssetShipmentAdditionalText] [varchar](4000) NULL,
	[PackingCompleteDate] [datetime] NULL,
	[WorkflowId] [uniqueidentifier] NULL,
	[TotalValue] [numeric](18, 4) NULL,
	[AirFreightValue] [numeric](18, 4) NULL,
	[InsuranceValue] [numeric](18, 4) NULL,
	[CIFValue] [numeric](18, 4) NULL,
	[LocationId] [uniqueidentifier] NULL,
	[Units] [varchar](25) NULL,
	[ForwarderDate] [datetime] NULL,
	[ForwarderReleaseDate] [datetime] NULL,
	[CompleteDate] [datetime] NULL,
	[Notes] [varchar](8000) NULL,
	[FinalDestination1] [varchar](256) NULL,
	[FinalDestination2] [varchar](256) NULL,
	[FinalDestination3] [varchar](256) NULL,
	[FinalDestination4] [varchar](256) NULL,
	[FinalDestination5] [varchar](256) NULL,
	[FinalDestination6] [varchar](256) NULL,
	[FinalDestination7] [varchar](256) NULL,
	[SeaFreightValue] [numeric](18, 4) NULL,
	[PaymentTerms] [varchar](100) NULL,
	[VATNumber] [varchar](50) NULL,
	[EUNumber] [varchar](50) NULL,
	[BOLNumber] [varchar](50) NULL,
	[CMRNumber] [varchar](50) NULL,
	[ETA_Transit] [datetime] NULL,
	[ETA_FinalDestination] [datetime] NULL,
	[ATA_FinalDestination] [datetime] NULL,
	[ShipToDeliveryAddress] [varchar](2000) NULL,
	[IncotermFreightTerm] [varchar](256) NULL,
	[AirOceanFreight] [numeric](18, 4) NULL,
	[CratingPackingValue] [numeric](18, 4) NULL,
	[FreightPickupFee] [numeric](18, 4) NULL,
	[ShippingForwardingFee] [numeric](18, 4) NULL,
	[SecurityFuelSurcharge] [numeric](18, 4) NULL,
	[AirportTransferFee] [numeric](18, 4) NULL,
	[IsAcordeSubmitted] [bit] NULL,
	[EntryNumber] [varchar](255) NULL,
	[EntryDate] [datetime] NULL,
	[AccordeFileNo] [varchar](255) NULL,
	[FileBoxNo] [varchar](255) NULL,
	[ShippingCountry] [varchar](255) NULL,
	[CustomsBrokerCode] [varchar](255) NULL,
	[IsDomesticShipment] [bit] NOT NULL,
	[DomesticReceivedBy] [varchar](100) NULL,
	[RevisionNumber] [int] NULL,
	[ExportPrep] [numeric](18, 4) NULL,
	[ValueTerms] [varchar](150) NULL,
	[TermsLocation] [varchar](255) NULL,
	[TransitPort] [varchar](1024) NULL,
	[ATA_Transit] [datetime] NULL,
	[Import_Date] [datetime] NULL,
	[Import_Method] [varchar](50) NULL,
	[Required_Export_Date] [datetime] NULL,
	[ShipperAttnTo] [varchar](256) NULL,
	[ConsigneeAttnTo] [varchar](256) NULL,
	[StdCost] [varchar](50) NULL,
	[StdCostPercentage] [decimal](18, 2) NULL,
	[FreightType] [varchar](50) NULL,
	[FreightValue] [numeric](18, 4) NULL,
	[IsCancelled] [bit] NULL,
	[BillTo] [varchar](1000) NULL,
	[InvoiceNum] [varchar](50) NULL,
	[IsRedeployment] [bit] NOT NULL,
	[ToolPanel] [varchar](100) NULL,
	[BuyerText] [varchar](4000) NULL,
	[SellerText] [varchar](4000) NULL,
	[SLILine1] [varchar](256) NULL,
	[SLILine2] [varchar](256) NULL,
	[SLILine3] [varchar](256) NULL,
	[SLILine4] [varchar](256) NULL,
	[SLILine5] [varchar](256) NULL,
	[SLILine6] [varchar](256) NULL,
	[SLILine7] [varchar](256) NULL,
	[SLINotes] [varchar](4000) NULL,
	[DateShipped] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditActions]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditActions](
	[AuditActionId] [int] IDENTITY(1,1) NOT NULL,
	[AuditTypeId] [int] NOT NULL,
	[UserId] [int] NULL,
	[AuditId] [uniqueidentifier] NULL,
	[AuditTable] [varchar](255) NULL,
	[ActionDesc] [varchar](1024) NULL,
	[ActionDate] [datetime] NOT NULL,
	[RemoteAddr] [varchar](20) NULL,
	[RemoteHost] [varchar](25) NULL,
 CONSTRAINT [PK_AuditActions] PRIMARY KEY CLUSTERED 
(
	[AuditActionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[VwAuditCustomsInvoices]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[VwAuditCustomsInvoices]
AS
select a.UserId,a.ActionDate, a.ActionDesc, a.AuditActionId,u.UserName,
		u.LastName + ', ' + u.FirstName AS FullName, 
	   b.[CustomsInvoiceId]
      ,b.[CustomsInvoiceStatusId]
      ,b.[FromBranchPlant]
      ,b.[ToBranchPlant]
      ,b.[TitleText]
      ,b.[TotalValueText]
      ,b.[ShipperLine1]
      ,b.[ShipperLine2]
      ,b.[ShipperLine3]
      ,b.[ShipperLine4]
      ,b.[ShipperLine5]
      ,b.[ShipperLine6]
      ,b.[ShipperLine7]
      ,b.[ConsigneeLine1]
      ,b.[ConsigneeLine2]
      ,b.[ConsigneeLine3]
      ,b.[ConsigneeLine4]
      ,b.[ConsigneeLine5]
      ,b.[ConsigneeLine6]
      ,b.[ConsigneeLine7]
      ,b.[InvoiceAutoNumber]
      ,b.[InvoiceNumber]
      ,b.[InvoiceDate]
      ,b.[ProcessedBy]
      ,b.[TrackingNumber]
      ,b.[PackagingInformation]
      ,b.[ShipmentMethod]
      ,b.[TaxIdNumber]
      ,b.[AirWaybillNumber]
      ,b.[ConsigneeNumber]
      ,b.[Comments]
      ,b.[DateAdded]
      ,b.[ShipperSignatureName]
      ,b.[ShipperSignatureTitle]
      ,b.[CreateDate]
      ,b.[CreatedUserName]
      ,b.[LastEditDate]
      ,b.[LastEditUserName]
      ,b.[Description]
      ,b.[Packer]
      ,b.[PackerDate]
      ,b.[DateSubmittedForApproval]
      ,b.[ApprovalDate]
      ,b.[IsAirlineApprovalReceived]
      ,b.[IsImportLicenseReceived]
      ,b.[IsNRCNotified]
      ,b.[FreightForwarders]
      ,b.[AWBNumber]
      ,b.[ETA]
      ,b.[IsShipmentComplete]
      ,b.[AdditionalText]
      ,b.[IsDangerousGoods]
      ,b.[IsAssetShipment]
      ,b.[IsRepairShipment]
      ,b.[AssetShipmentTitleText]
      ,b.[AssetShipmentAdditionalText]
      ,b.[PackingCompleteDate]
      ,b.[WorkflowId]
      ,b.[TotalValue]
      ,b.[AirFreightValue]
      ,b.[InsuranceValue]
      ,b.[CIFValue]
      ,b.[LocationId]
      ,b.[Units]
      ,b.[ForwarderDate]
      ,b.[ForwarderReleaseDate]
      ,b.[CompleteDate]
      ,b.[Notes]
      ,b.[FinalDestination1]
      ,b.[FinalDestination2]
      ,b.[FinalDestination3]
      ,b.[FinalDestination4]
      ,b.[FinalDestination5]
      ,b.[FinalDestination6]
      ,b.[FinalDestination7]
      ,b.[SeaFreightValue]
      ,b.[PaymentTerms]
      ,b.[VATNumber]
      ,b.[EUNumber]
      ,b.[BOLNumber]
      ,b.[CMRNumber]
      ,b.[ETA_Transit]
      ,b.[ETA_FinalDestination]
      ,b.[ATA_FinalDestination]
      ,b.[ShipToDeliveryAddress]
      ,b.[IncotermFreightTerm]
      ,b.[AirOceanFreight]
      ,b.[CratingPackingValue]
      ,b.[FreightPickupFee]
      ,b.[ShippingForwardingFee]
      ,b.[SecurityFuelSurcharge]
      ,b.[AirportTransferFee]
      ,b.[IsAcordeSubmitted]
      ,b.[EntryNumber]
      ,b.[EntryDate]
      ,b.[AccordeFileNo]
      ,b.[FileBoxNo]
      ,b.[ShippingCountry]
      ,b.[CustomsBrokerCode]
      ,b.[IsDomesticShipment]
      ,b.[DomesticReceivedBy]
      ,b.[RevisionNumber]
      ,b.[ExportPrep]
      ,b.[ValueTerms]
      ,b.[TermsLocation]
      ,b.[TransitPort]
      ,b.[ATA_Transit]
      ,b.[Import_Date]
      ,b.[Import_Method]
      ,b.[Required_Export_Date]
      ,b.[ShipperAttnTo]
      ,b.[ConsigneeAttnTo]
      ,b.[StdCost]
      ,b.[StdCostPercentage]
      ,b.[FreightType]
      ,b.[FreightValue]
      ,b.[IsCancelled]
      ,b.[BillTo]
      ,b.[InvoiceNum]
      ,b.[IsRedeployment]
      ,b.[ToolPanel]
      ,b.[BuyerText]
      ,b.[SellerText]
      ,b.[SLILine1]
      ,b.[SLILine2]
      ,b.[SLILine3]
      ,b.[SLILine4]
      ,b.[SLILine5]
      ,b.[SLILine6]
      ,b.[SLILine7]
      ,b.[SLINotes]
      ,b.[DateShipped]
from auditactions a WITH(NOLOCK)
join AuditCustomsInvoices b WITH(NOLOCK) on b.AuditActionId = a.AuditActionId
join Users u WITH(NOLOCK) on u.UserId = a.UserId

GO
/****** Object:  View [dbo].[vwToolStrings]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE View [dbo].[vwToolStrings] as

select ToolStringId, SerialNumber, Description, 
	CreatedBy, SizeId, ToolYear, 
	District, BuildNumber, ToolMod, 
	Disassembled, DisassembledDate, 
	CheckSum, Type, Length, 
	LengthUOM, CollarID, CollarIDUOM, 
	CollarOD, CollarODUOM, StabilizerBladeOD, 
	StabilizerBladeODUOM, ConnectionTypeTop, ConnectionTypeBottom,
	t.KitNumber, IsLatestKitNumber, NULL AS JobId, 
	IsTurnaround, MotorType, MotorProperty, 
	WorkOrderNum, MotorSerial, ConnectionTopSize, 
	ConnectionTopSizeUOM, ConnectionBottomSize, 
	ConnectionBottomSizeUOM, Service, 
	BearingPackConfig, PowerSectionConfig, RMManufacturer, 
	RMType, RMMidBodyStabSize, RMSerialNum, RMLobes, 
	RMStages, t.CreateDate, t.CreateUserId, 
	t.UpdateDate, t.UpdateUserId, t.IsDeleted,
	s.Size, s.ShortName as SizeShortName, u.UserName,'' AS JobNumber

FROM ToolStrings t (NOLOCK)
LEFT JOIN ToolStringSize s (NOLOCK) on t.SizeId = s.ToolSizeID
LEFT JOIN dbo.Users (NOLOCK) u ON u.UserId = t.CreateUserId
WHERE t.IsDeleted=0 



GO
/****** Object:  View [dbo].[vwBitRunToolsUsed]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwBitRunToolsUsed]
AS
SELECT tsci.RunID
	, Case When t.Description = 'Rental Motor' Then 'Motor' Else t.SerialNumber End As ToolString 
	, Case When t.Description = 'Rental Motor' Then t.SerialNumber Else pt.[Name]  End As Component
	, tsci.SerialNum
	, Case tsci.IsUsed When 1 Then 'Yes' Else 'No' End As IsUsed 
FROM ToolStringComponentInfo tsci WITH(NOLOCK)
LEFT JOIN ToolStrings t WITH(NOLOCK) ON t.ToolStringID = tsci.ToolStringID
LEFT JOIN PartTypes pt WITH(NOLOCK) ON pt.PartTypeID = tsci.PartTypeID

GO
/****** Object:  Table [dbo].[DailyToolComponents]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DailyToolComponents](
	[DailyToolComponentID] [uniqueidentifier] NOT NULL,
	[DailyID] [uniqueidentifier] NOT NULL,
	[ToolStringID] [uniqueidentifier] NOT NULL,
	[FixedAssetID] [uniqueidentifier] NULL,
	[SerialNum] [varchar](30) NULL,
	[RNItemNum] [varchar](30) NULL,
	[InventoryItemNum] [varchar](30) NULL,
	[PartTypeID] [int] NULL,
	[EndingOperHrs] [varchar](50) NULL,
	[EndingCircHrs] [varchar](50) NULL,
	[EndingDrillHrs] [varchar](50) NULL,
	[IsUsed] [bit] NULL,
	[CustomProperty] [varchar](128) NULL,
 CONSTRAINT [PK_DailyToolComponents] PRIMARY KEY CLUSTERED 
(
	[DailyToolComponentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwDailyToolComponents]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwDailyToolComponents]
AS
SELECT (pt.Name + ' -SN: ' + dtc.SerialNum) AS ToolComponents, 
	dtc.endingOperHrs as Opr, 
	dtc.endingCircHrs as Circ, 
	dtc.endingDrillHrs as Drill,
	t.SerialNumber AS Tool,
	da.DailyID 
FROM Daily da WITH(NOLOCK)
LEFT JOIN DailyToolComponents dtc WITH(NOLOCK) ON da.dailyid = dtc.dailyid 
LEFT JOIN ToolStrings t WITH(NOLOCK) ON t.ToolStringID = dtc.ToolStringID 
LEFT JOIN PartTypes pt WITH(NOLOCK) ON pt.PartTypeID = dtc.PartTypeID

GO
/****** Object:  View [dbo].[vwIncidentRMComponents]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwIncidentRMComponents]
AS
SELECT tsci.IncidentID
	, t.SerialNumber As ToolString
	, Case When tsci.FailedNonPartName Is Not Null Then tsci.FailedNonPartName Else pt.[Name] End As Component
	, IsNull(tsci.SerialNum,'') As SerialNum
	, tsci.TFF
	, tsci.CSI
	, tsci.NCI
	, tsci.OS
	, tsci.PR
	, tsci.RC
	, tsci.CN
	, tsci.FA
	, (Select vFC.FailureCategoryCode + vFC.FailureSubCategoryCode + vFC.FailureCode From vwFailureCodes vFC Where vFC.FailureCodeID = tsci.CompFailureCodeID) As CompFailureCode
	, Case tsci.StatusCodeID When 1 Then 'Open' When 0 Then 'Closed' Else NULL End As StatusCode
    , Case tsci.GlobalStatusCodeID When 1 Then 'Open' When 0 Then 'Closed' Else NULL End As GlobalStatusCode
	, (Select Top 1 u.FirstName + ' ' + u.LastName + ' (' + Cast(ActionDate as varchar(30)) + ')' From AuditRMAnalysis a Left Join Users u ON u.UserID = a.UserID Where a.FieldID = 1 And a.IncidentID = tsci.IncidentID And a.ToolStringID = tsci.ToolStringID And a.FixedAssetID = tsci.FixedAssetID Order By a.ActionDate Desc) As LastSaved
FROM ToolStringComponentInfo tsci
LEFT JOIN ToolStrings t ON tsci.ToolStringID = t.ToolStringID
LEFT JOIN PartTypes pt ON pt.PartTypeID = tsci.PartTypeID
WHERE (tsci.StatusCodeID Is Not Null OR tsci.TFF = 1 OR tsci.CSI = 1)

GO
/****** Object:  View [dbo].[vwToolStringComponentInfo]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwToolStringComponentInfo] AS
SELECT
	t.ToolStringInfoID
	, t.ToolStringID
	, ts.SerialNumber as ToolString
	, ts.Type as ToolType
	, t.FixedAssetID
	, t.SerialNum
	, t.RNItemNum
	, t.InventoryItemNum
	, t.PartTypeID
	, pt.ShortName AS PartTypeShortName
	, pt.Name AS PartTypeName
	, w.JobID
	, t.RunID
	, r.RunNumber
	, r.ReportNumber AS RunReportNumber
	, r.WellID
	, w.Well AS WellName
	, t.IncidentID
	, i.IncidentNumber
	, t.EndingOperHrs
	, t.EndingCircHrs
	, t.EndingDrillHrs
	, t.BitRunValveCycles
	, t.CumulativeValveCycles
	, t.FailureDesc
	, t.IsUsed
	, t.StatusCodeID
	, t.GlobalStatusCodeID
	, t.CorrectiveAction
	, t.FieldSymptom
	, t.LostTime
	, t.TFF
	, t.CSI
	, t.NCI
	, t.OS
	, t.PR
	, t.FA
	, t.RC
	, t.CN
	, t.IncidentDate
	, t.CompFailureCodeID
	, t.OutOfSpecCodeID
	, t.ProceduralCodeID
	, t.TIPFT
	, t.ArtNumber
	, t.FailedNonPartName
FROM ToolStringComponentInfo t WITH(NOLOCK)
LEFT JOIN ToolStrings ts WITH(NOLOCK) on ts.ToolStringId = t.ToolStringID
LEFT JOIN dbo.Runs (NOLOCK) r ON t.RunID = r.RunID
LEFT JOIN dbo.Wells (NOLOCK) w ON w.WellID = r.WellID
LEFT JOIN dbo.Incidents (NOLOCK) i ON i.IncidentID = t.IncidentID
LEFT JOIN dbo.PartTypes (NOLOCK) pt ON pt.PartTypeId = t.PartTypeID

GO
/****** Object:  Table [dbo].[RMAnalysisComments]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RMAnalysisComments](
	[CommentID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NULL,
	[IncidentID] [uniqueidentifier] NULL,
	[ToolStringInfoID] [uniqueidentifier] NULL,
	[CommentTypeID] [int] NOT NULL,
	[Comment] [varchar](8000) NULL,
	[UserID] [int] NULL,
	[CreateDate] [smalldatetime] NULL,
	[UserDelete] [int] NULL,
	[DeleteDate] [smalldatetime] NULL,
	[IsDeleted] [bit] NULL,
 CONSTRAINT [PK_Comments_614745E4] PRIMARY KEY CLUSTERED 
(
	[CommentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RMAnalysisEmail]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RMAnalysisEmail](
	[RMAnalysisEmailID] [uniqueidentifier] NOT NULL,
	[IncidentID] [uniqueidentifier] NULL,
	[ToolStringInfoID] [uniqueidentifier] NULL,
	[Comment] [varchar](3000) NULL,
	[SendTo] [varchar](1000) NULL,
	[SendCc] [varchar](1000) NULL,
	[CreateDate] [datetime] NOT NULL,
	[FromUserID] [int] NULL,
 CONSTRAINT [PK_RMEmail_5A9CAA5A] PRIMARY KEY CLUSTERED 
(
	[RMAnalysisEmailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwRMAnalysisToolInfo]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--================================================================
--MODFIED BY :SUYEB MOHAMMAD
--MODIFIED ON :14 Jan 2016
--DESCRIPTION:To add new column LostTime 
--================================================================
CREATE VIEW [dbo].[vwRMAnalysisToolInfo]
AS

SELECT
  tsci.RunID,
  tsci.IncidentID,
  tsci.ToolStringInfoID,
  tsci.ToolStringID,
  tsci.FixedAssetID,
  t.SerialNumber AS ToolString,
  t.Type AS ToolType,
  tsci.SerialNum AS SerialNumber,
  ISNULL(tsci.FailedNonPartName, '') AS FailedNonPartName,
  ISNULL(tsci.FailedNonPartType, '') AS FailedNonPartType,
  CASE
    WHEN tsci.FailedNonPartName IS NOT NULL THEN tsci.FailedNonPartName
    ELSE pt.[Name]
  END AS [Name],
  tsci.PartTypeID,
  CASE tsci.StatusCodeID
    WHEN 1 THEN 'Open'
    WHEN 0 THEN 'Closed'
    ELSE NULL
  END AS StatusCode,
  CASE tsci.GlobalStatusCodeID
    WHEN 1 THEN 'Open'
    WHEN 0 THEN 'Closed'
    ELSE NULL
  END AS GlobalStatusCode,
  tsci.FailureDesc AS FieldFailureDesc,
  tsci.CorrectiveAction AS FieldCorrectiveAction,
  tsci.FieldSymptom,
  tsci.TFF,
  tsci.CSI,
  tsci.NCI,
  tsci.OS,
  tsci.PR,
  tsci.RC,
  tsci.CN,
  tsci.FA,
  tsci.CompFailureCodeID,
  (SELECT
    fc.FailureCategoryCode + fc.FailureSubCategoryCode + fc.FailureCode
  FROM vwFailureCodes fc
  WHERE fc.FailureCodeID = tsci.CompFailureCodeID)
  AS CompFailureCode,
  (SELECT
    fc.FailureDesc
  FROM vwFailureCodes fc
  WHERE fc.FailureCodeID = tsci.CompFailureCodeID)
  AS CompFailureCodeDesc,
  (SELECT
    fc.FailureCategoryCode + fc.FailureSubCategoryCode + fc.FailureCode
  FROM vwFailureCodes fc
  WHERE fc.FailureCodeID = tsci.OutOfSpecCodeID)
  AS OutOfSpecCode,
  (SELECT
    fc.FailureDesc
  FROM vwFailureCodes fc
  WHERE fc.FailureCodeID = tsci.OutOfSpecCodeID)
  AS OutOfSpecCodeDesc,
  (SELECT
    fc.FailureCategoryCode + fc.FailureSubCategoryCode + fc.FailureCode
  FROM vwFailureCodes fc
  WHERE fc.FailureCodeID = tsci.ProceduralCodeID)
  AS ProceduralCode,
  (SELECT
    fc.FailureDesc
  FROM vwFailureCodes fc
  WHERE fc.FailureCodeID = tsci.ProceduralCodeID)
  AS ProceduralCodeDesc,
  (SELECT TOP 1
    LEN(co.Comment)
  FROM RMAnalysisComments co WITH (NOLOCK)
  WHERE co.IsDeleted = 0
  AND co.CommentTypeID = 3
  AND co.IncidentID = tsci.IncidentID
  AND co.ToolStringInfoID = tsci.ToolStringInfoID)
  AS RMFailureDesc,
  (SELECT TOP 1
    LEN(co.Comment)
  FROM RMAnalysisComments co WITH (NOLOCK)
  WHERE co.IsDeleted = 0
  AND co.CommentTypeID = 4
  AND co.IncidentID = tsci.IncidentID
  AND co.ToolStringInfoID = tsci.ToolStringInfoID)
  AS CorrectiveAction,
  (SELECT TOP 1
    LEN(e.Comment)
  FROM RMAnalysisEmail e WITH (NOLOCK)
  WHERE e.IncidentID = tsci.IncidentID
  AND e.ToolStringInfoID = tsci.ToolStringInfoID)
  AS Email,
  tsci.TIPFT,
  tsci.ArtNumber,
  CAST(art.PartRepairCost AS decimal(18, 2)) AS ArtCost,
  art.AssetRepairTrackId AS ArtID,
  ta.OrderPosition,
  ISNULL(tsci.LostTime, 0) AS LostTime

FROM ToolstringComponentInfo tsci WITH (NOLOCK)

LEFT JOIN AssetRepairTrack art WITH (NOLOCK)
  ON tsci.ArtNumber = art.ArtNumber

LEFT JOIN ToolStringFixedAssets ta WITH (NOLOCK)
  ON tsci.ToolStringID = ta.ToolStringID
  AND tsci.SerialNum = ta.SerialNum
  AND tsci.PartTypeID = ta.PartTypeID

LEFT JOIN ToolStrings t WITH (NOLOCK)
  ON t.ToolStringID = tsci.ToolStringID

LEFT JOIN PartTypes pt WITH (NOLOCK)
  ON pt.PartTypeID = tsci.PartTypeID
GO
/****** Object:  View [dbo].[VwToolStringFixedAsset_DispatchItems]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=======================================================================
--MODIFIED BY : SUYEB MOHAMMAD
--MODIFED ON : 30 March 2017
--DESCRIPTION : To gget serialnum and in item num from fixed asset table
--========================================================================
CREATE VIEW [dbo].[VwToolStringFixedAsset_DispatchItems]
AS
SELECT f.ToolStringFixedAssetsId,
		f.ToolStringID,
		t.SerialNumber AS ToolString,
		f.PartTypeID,
		p.Name AS PartTypeName,
		t.Type AS ToolType,
		f.FixedAssetID,
		fa.SerialNum, 
		fa.RNItemNum,
		fa.Revision,
		fa.InventoryItemNum, 
		fa.EquipmentStatus,
		rn.DescShort,
		t.IsDeleted,
		t.Disassembled
FROM dbo.ToolStringFixedAssets (NOLOCK) f
LEFT JOIN dbo.FixedAssets (NOLOCK) fa on fa.FixedAssetId = f.FixedAssetID
LEFT JOIN dbo.ItemNums (NOLOCK) rn ON rn.ItemNum = f.RNItemNum
LEFT JOIN PartTypes (NOLOCK) p ON p.PartTypeId = f.PartTypeID
LEFT JOIN ToolStrings (NOLOCK) t ON t.ToolStringId = f.ToolStringID


GO
/****** Object:  View [dbo].[vwToolStringFixedAssets]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwToolStringFixedAssets]
AS
SELECT f.ToolStringFixedAssetsId,
		f.ToolStringID,
		t.SerialNumber AS ToolString,
		f.PartTypeID,
		p.Name AS PartTypeName,
		t.Type AS ToolType,
		f.FixedAssetID,
		f.SerialNum, 
		f.RNItemNum,
		f.Revision,
		f.InventoryItemNum, 
		fa.EquipmentStatus,
		rn.DescShort,
		t.IsDeleted,
		t.Disassembled
FROM dbo.ToolStringFixedAssets (NOLOCK) f
LEFT JOIN dbo.FixedAssets (NOLOCK) fa on fa.FixedAssetId = f.FixedAssetID
LEFT JOIN dbo.ItemNums (NOLOCK) rn ON rn.ItemNum = f.RNItemNum
LEFT JOIN PartTypes (NOLOCK) p ON p.PartTypeId = f.PartTypeID
LEFT JOIN ToolStrings (NOLOCK) t ON t.ToolStringId = f.ToolStringID



GO
/****** Object:  View [dbo].[vwOutstandingRequestItems]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==============================================================
--MODIFIED BY : SUYEB MOHAMMAD
--MODIFIED ON : 21 July 2016
--DESCRIPTION : To add RRS info in outstanding report
--=============================================================
CREATE VIEW [dbo].[vwOutstandingRequestItems]
AS

SELECT
  RequestFormDetailId,
  RequestFormId,
  ToBranchPlant,
  ToCompanyName,
  FromBranchPlant,
  FromCompanyName,
  RequestNumber,
  RequiredDate,
  ArchiveOn,
  Status,
  StatusName,
  StatusDesc,
  IsArchived,
  ToolPanel,
  ToolCode,
  ItemNum,
  ItemNum3,
  StandardCost,
  CurrShortName,
  QtyOrdered,
  TotalCost,
  QtyInProcess,
  QtyOutstanding,
  CapitalRequiredForItem,
  CreatedUserName,
  CreateDate,
  IsForecasted,
  ItemRequiredDate,
  ToRegion,
  FromRegion,
  ToCountry,
  FromCountry,
  IsActive,
  EstimatedDeliveryDateItem,
  JobNo,
  WellNo,
  Rig,
  CalledOutBy,
  CallOutDate,
  ContactNumber,
  ShippedDate,
  HoleSize,
  MWDLWDString,
  WellName,
  IsMotorised,
  Temperature1,
  Temperature2,
  Temperature3
FROM (SELECT
  rd.RequestFormDetailId,
  rd.RequestFormId,
  rf.ToBranchPlant,
  tl.CompanyName AS ToCompanyName,
  rf.FromBranchPlant,
  fl.CompanyName AS FromCompanyName,
  'AR-' + rf.ToBranchPlant + '-' + CAST(rf.RequestFormId AS varchar) AS RequestNumber,
  rf.RequiredDate,
  rf.ArchiveOn,
  rf.Status,
  rfs.OptionValue AS StatusName,
  rfs.OptionLabel AS StatusDesc,
  rf.IsArchived,
  i.ToolPanel,
  i.ToolCode,
  rd.ItemNum,
  i.ItemNum3,
  rd.StandardCost,
  rd.CurrShortName,
  rf.JobNo,
  rf.WellNo,
  rf.Rig,
  rf.CalledOutBy,
  rf.CallOutDate,
  rf.ContactNumber,
  rf.ShippedDate,
  rf.HoleSize,
  rf.MWDLWDString,
  rf.WellName,
  rf.IsMotorised,
  rf.Temperature1,
  rf.Temperature2,
  rf.Temperature3,
  SUM(ISNULL(Qty, 0)) AS QtyOrdered,
  SUM(ISNULL(Qty, 0) * ISNULL(rd.StandardCost, 0)) AS TotalCost,
  (SELECT
    SUM(ISNULL(sd.Qty, 0)) AS Expr1
  FROM ShipmentRequestFormDetails AS sd (NOLOCK)
  INNER JOIN ShipmentRequestForms AS sr (NOLOCK)
    ON sr.ShipmentRequestformId = sd.ShipmentRequestFormId
  WHERE (sd.RequestFormDetailId = rd.RequestFormDetailId)
  AND (sd.IsActive = 1)
  AND (sr.IsActive = 1))
  AS QtyInProcess,
  SUM(ISNULL(Qty, 0))
  - (SELECT
    ISNULL(SUM(ISNULL(sd.Qty, 0)), 0) AS Expr1
  FROM ShipmentRequestFormDetails AS sd (NOLOCK)
  INNER JOIN ShipmentRequestForms AS sr (NOLOCK)
    ON sr.ShipmentRequestformId = sd.ShipmentRequestFormId
  WHERE (sd.RequestFormDetailId = rd.RequestFormDetailId)
  AND (sd.IsActive = 1)
  AND (sr.IsActive = 1))
  AS QtyOutstanding,
  rd.CapitalRequiredForItem,
  rf.CreatedUserName,
  rf.CreateDate,
  ISNULL(rf.IsForecasted, 0) AS IsForecasted,
  rd.ItemRequiredDate,
  (SELECT
    r.RegionDesc
  FROM Regions AS r (NOLOCK)
  INNER JOIN BranchPlants b (NOLOCK)
    ON r.Region = b.Region and r.Active = 1
  WHERE b.BranchPlant = rf.ToBranchPlant)
  AS ToRegion,
  (SELECT
    r.RegionDesc
  FROM Regions AS r (NOLOCK)
  INNER JOIN BranchPlants b (NOLOCK)
    ON r.Region = b.Region
  WHERE b.BranchPlant = rf.FromBranchPlant)
  AS FromRegion,
  (SELECT
    c.CountryDesc
  FROM Countries AS c (NOLOCK)
  INNER JOIN BranchPlants(NOLOCK) b
    ON c.Country = b.Country
  WHERE b.BranchPlant = rf.ToBranchPlant)
  AS ToCountry,
  (SELECT
    c.CountryDesc
  FROM Countries AS c (NOLOCK)
  INNER JOIN BranchPlants(NOLOCK) b
    ON c.Country = b.Country
  WHERE b.BranchPlant = rf.FromBranchPlant)
  AS FromCountry,
  rf.IsActive,
  rd.EstimatedDeliveryDateItem
FROM RequestFormDetails AS rd (NOLOCK)
INNER JOIN RequestForms AS rf (NOLOCK)
  ON rd.RequestFormId = rf.RequestFormId
LEFT JOIN BranchPlants AS fl (NOLOCK)
  ON fl.BranchPlant = rf.FromBranchPlant
LEFT JOIN BranchPlants AS tl (NOLOCK)
  ON tl.BranchPlant = rf.ToBranchPlant
LEFT JOIN SelectOptions AS rfs (NOLOCK)
  ON rfs.SortOrder = rf.Status
  AND rfs.SelectName = 'RequestFormStatus'
LEFT JOIN ItemNums AS i (NOLOCK)
  ON rd.ItemNum = i.ItemNum
GROUP BY rd.RequestFormDetailId,
         rd.RequestFormId,
         rf.ToBranchPlant,
         tl.CompanyName,
         rf.FromBranchPlant,
         fl.CompanyName,
         'AR-' + rf.ToBranchPlant + '-' + CAST(rf.RequestFormId AS varchar),
         rf.RequiredDate,
         rf.ArchiveOn,
         rf.Status,
         rfs.OptionValue,
         rfs.OptionLabel,
         rf.IsArchived,
         rd.CapitalRequiredForItem,
         rd.StandardCost,
         rd.CurrShortName,
         rf.CreatedUserName,
         rf.CreateDate,
         rf.IsForecasted,
         rd.ItemRequiredDate,
         i.ToolPanel,
         i.ToolCode,
         rd.ItemNum,
         i.ItemNum3,
         rf.IsActive,
         rd.EstimatedDeliveryDateItem,
         rf.JobNo,
         rf.WellNo,
         rf.Rig,
         rf.CalledOutBy,
         rf.CallOutDate,
         rf.ContactNumber,
         rf.ShippedDate,
         rf.HoleSize,
         rf.MWDLWDString,
         rf.WellName,
         rf.IsMotorised,
         rf.Temperature1,
         rf.Temperature2,
         rf.Temperature3) AS qry
WHERE (QtyOutstanding > 0)


GO
/****** Object:  View [dbo].[vwRequestFormDetailCountReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vwRequestFormDetailCountReport] AS

SELECT    rfd.RequestFormDetailId, rfd.RequestFormId, rfd.ItemNum
			, rfd.Qty as QtyOrdered
			, (SELECT SUM(ISNULL(srfd.Qty, 0)) AS Expr1
				FROM ShipmentRequestFormDetails (NOLOCK) srfd 
				INNER JOIN ShipmentRequestForms AS srf WITH(NOLOCK) ON srf.ShipmentRequestformId = srfd.ShipmentRequestFormId
				WHERE srfd.RequestFormDetailId = rfd.RequestFormDetailId AND srfd.IsActive = 1 AND srf.IsActive = 1
				) as QtyInProcess
			, ISNULL(rfd.Qty, 0) - (SELECT ISNULL(SUM(ISNULL(srfd.Qty, 0)), 0) AS Expr1
				FROM ShipmentRequestFormDetails (NOLOCK) srfd 
				INNER JOIN ShipmentRequestForms AS srf WITH(NOLOCK) ON srf.ShipmentRequestformId = srfd.ShipmentRequestFormId
				WHERE srfd.RequestFormDetailId = rfd.RequestFormDetailId AND srfd.IsActive = 1 AND srf.IsActive = 1
				) as QtyOutstanding
			, rfd.StandardCost, rfd.CurrShortName, 
		  i.ToolPanel, i.ToolCode, i.ItemNum3, i.DescShort AS ToolDescription, 
		  'AR-' + rf.ToBranchPlant + '-' + CAST(rf.RequestFormId AS varchar) AS RequestNumber
		  , rf.IsArchived, 
		  fbp.CompanyName AS FromCompanyName, 
		  tbp.CompanyName  AS ToCompanyName, 
		  rf.FromBranchPlant, rf.ToBranchPlant, rf.CreateDate, rf.RequiredDate, 
		  rf.CreatedUserName, rf.Customer, rf.Project,
		  rf.Status, so.OptionLabel as StatusName, so.OptionValue AS StatusDesc, rf.IsForecasted, rf.IsActive,
		  fr.RegionDesc AS FromRegion,fc.CountryDesc AS FromCountry, tr.RegionDesc AS ToRegion, tc.CountryDesc AS ToCountry
FROM RequestFormDetails (NOLOCK) rfd 
INNER JOIN RequestForms (NOLOCK) rf ON rf.RequestFormId = rfd.RequestFormId
LEFT JOIN ItemNums (NOLOCK) i on rfd.ItemNum = i.ItemNum
LEFT JOIN BranchPlants (NOLOCK) fbp ON fbp.BranchPlant = rf.FromBranchPlant
LEFT JOIN BranchPlants (NOLOCK) tbp ON tbp.BranchPlant = rf.ToBranchPlant 
LEFT JOIN Regions AS fr (NOLOCK) ON fr.Region = fbp.Region
LEFT JOIN Regions AS tr (NOLOCK) ON tr.Region = tbp.Region
LEFT JOIN Countries AS fc (NOLOCK) ON fc.Country = fbp.Country
LEFT JOIN Countries AS tc (NOLOCK) ON tc.Country = tbp.Country
LEFT JOIN SelectOptions (NOLOCK) so ON so.SortOrder = rf.Status AND so.SelectName = 'RequestFormStatus'






GO
/****** Object:  Table [dbo].[ShipmentFormDetailAssets]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ShipmentFormDetailAssets](
	[ShipmentRequestFormDetailAssetId] [int] IDENTITY(1,1) NOT NULL,
	[ShipmentRequestFormDetailId] [int] NOT NULL,
	[CustomsInvoiceDetailId] [uniqueidentifier] NULL,
	[FixedAssetId] [uniqueidentifier] NULL,
	[SerialNum] [varchar](30) NULL,
	[ItemNum] [varchar](30) NULL,
	[Revision] [varchar](2) NULL,
	[RNItemNum] [varchar](30) NULL,
 CONSTRAINT [PK_ShipmentFormDetailAssets] PRIMARY KEY CLUSTERED 
(
	[ShipmentRequestFormDetailAssetId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwShipmentRequestFormDetailSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vwShipmentRequestFormDetailSearch]
AS
SELECT     rd.RequestFormDetailId, rd.RequestFormId, rd.Qty, 
						case rf.IsComplete when '1' then 'Yes' else 'No' end as IsCompleteYesNo, i.ToolPanel, i.ToolCode, srd.ItemNum, 
                      i.ItemNum3, i.DescShort as ToolDescription, srd.ShipmentRequestFormDetailId, srd.Qty AS ShipmentQty, srd.IsReturn, srd.NewUse,
                      srf.IsActive, srd.IsComplete AS ShipmentIsComplete, 
                      'SR-' + srf.ToBranchPlant + '-' + CAST(srf.ShipmentRequestformId AS varchar)  as RequestNumber,
                      srf.ShipmentRequestformId, srf.FromBranchPlant, srf.ToBranchPlant, srf.CreateDate, srf.RequiredDate,
                      srf.CreatedUserName, srf.Notes, 
                      srf.ShipmentMethod, srf.Customer, srf.Project, srf.LocalRefNumber, srf.LocalApprovalNumber,
                      srf.Status, srf.Comments, srf.LastEdit, srf.LastEditUserName, srf.ProcessToShipmentDate, 
                      srf.ProcessToShipmentUserName, srfs.OptionValue as StatusDesc, 
                      'AR-' + rf.ToBranchPlant + '-' + CAST(rf.RequestFormId AS varchar) as RequestFormRequestNumber,
                      fl.CompanyName as FromCompanyName, 
                      tl.CompanyName as ToCompanyName, srf.IsComplete AS ShipmentRequestFormIsComplete,
                      (case when srf.IsComplete = 1 then 'Yes' else 'No' end) AS ShipmentRequestFormIsCompleteString,
					  rd.StandardCost , rd.CurrShortName, i.Revision,srd.InvoiceNumber,
					  (SELECT     COUNT(*) AS Expr1
                            FROM          ShipmentFormDetailAssets (NOLOCK)
                            WHERE      (CustomsInvoiceDetailId IS NOT NULL) AND (ShipmentRequestFormDetailId = srd.ShipmentRequestFormDetailId)
                        ) AS QtyInInvoice
                      ,(SELECT     sum(isnull(f.Qty,0)) AS Expr1
                            FROM ShipmentRequestFormDetails (NOLOCK) f
                            INNER JOIN ShipmentRequestForms (NOLOCK) s on f.ShipmentRequestFormId = s.ShipmentRequestformId
                            WHERE f.RequestFormDetailId = srd.RequestFormDetailId AND f.IsActive = 1 AND s.IsActive = 1
                        ) AS QtyInProcess
                      , srd.S9Number, fr.RegionDesc AS FromRegion, fc.CountryDesc AS FromCountry, tr.RegionDesc AS ToRegion, tc.CountryDesc AS ToCountry
                      , STUFF (( SELECT DISTINCT ', ' + a.SerialNum FROM ShipmentFormDetailAssets a (NOLOCK)
						WHERE a.ShipmentRequestFormDetailId = srd.ShipmentRequestFormDetailId
						FOR XML PATH('')), 1, 2, '') AS SerialNumbers
					  , rf.Status AS RequestStatus
				      , rfs.OptionValue AS RequestStatusDesc
FROM ShipmentRequestFormDetails AS srd (NOLOCK)
INNER JOIN ShipmentRequestForms AS srf (NOLOCK) ON srf.ShipmentRequestformId = srd.ShipmentRequestFormId
INNER JOIN RequestFormDetails AS rd (NOLOCK) ON rd.RequestFormDetailId = srd.RequestFormDetailId
LEFT JOIN Requestforms as rf (NOLOCK) on srf.requestformid = rf.requestformid
LEFT JOIN  dbo.BranchPlants AS fl (NOLOCK) ON fl.BranchPlant = srf.FromBranchPlant
LEFT JOIN  dbo.BranchPlants AS tl (NOLOCK)  ON tl.BranchPlant = srf.ToBranchPlant 
LEFT JOIN  Regions AS fr (NOLOCK) ON fr.Region = fl.Region
LEFT JOIN  Regions AS tr (NOLOCK) ON tr.Region = tl.Region
LEFT JOIN  Countries AS fc (NOLOCK) ON fc.Country = fl.Country
LEFT JOIN  Countries AS tc (NOLOCK) ON tc.Country = tl.Country
LEFT JOIN  dbo.SelectOptions AS srfs (NOLOCK)  ON srfs.SortOrder = srf.Status and srfs.SelectName = 'RequestFormStatus'
LEFT JOIN  dbo.SelectOptions AS rfs (NOLOCK)  ON rfs.SortOrder = rf.Status and rfs.SelectName = 'RequestFormStatus'
LEFT JOIN ItemNums  as i (NOLOCK) ON i.ItemNum = srd.ItemNum












GO
/****** Object:  View [dbo].[vwCapitalRequiredForSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwCapitalRequiredForSearch]
AS

SELECT rd.RequestFormDetailId
	, rd.RequestFormId
	, rf.ToBranchPlant
	, tl.CompanyName AS ToBranchPlantName
	, rf.FromBranchPlant
	, fl.CompanyName AS FromBranchPlantName
    , 'AR-' + rf.ToBranchPlant + '-' + CAST(rf.RequestFormId AS varchar) AS RequestNumber
    , rf.RequiredDate
    , rf.Status
    , rfs.OptionValue as StatusName
    , rfs.OptionLabel as StatusDesc
    , rf.IsArchived
    , i.ToolPanel
    , i.ToolCode
    , rd.ItemNum
    , i.ItemNum3
    , (rd.StandardCost * dbo.fnGetUSDConversionFactor(rd.CurrShortName,NULL)) as StandardCost
    , 'USD' as CurrShortName
    , SUM(ISNULL(Qty, 0)) AS QtyOrdered
    , SUM(Qty * rd.StandardCost * dbo.fnGetUSDConversionFactor(rd.CurrShortName,NULL)) AS TotalCost
	, (SELECT     SUM(ISNULL(sd.Qty,0)) AS Expr1
        FROM ShipmentRequestFormDetails AS sd (NOLOCK) 
        INNER JOIN ShipmentRequestForms AS sr (NOLOCK) ON sr.ShipmentRequestformId = sd.ShipmentRequestFormId
        WHERE   (sd.RequestFormDetailId = rd.RequestFormDetailId) AND (sd.IsActive = 1) AND (sr.IsActive = 1)
    ) AS QtyInProcess
    , SUM(ISNULL(Qty, 0)) 
       - (SELECT ISNULL(SUM(ISNULL(sd.Qty,0)), 0) AS Expr1
           FROM ShipmentRequestFormDetails AS sd (NOLOCK) 
           INNER JOIN ShipmentRequestForms AS sr (NOLOCK) ON sr.ShipmentRequestformId = sd.ShipmentRequestFormId
           WHERE (sd.RequestFormDetailId = rd.RequestFormDetailId) AND (sd.IsActive = 1) AND (sr.IsActive = 1)) 
    AS QtyOutstanding
    , rd.CapitalRequiredForItem as CapitalRequiredFor
    , rf.CreatedUserName
    , rf.CreateDate
    , ISNULL(rf.IsForecasted,0) as IsForecasted
    , rd.ItemRequiredDate
    , (Select r.RegionDesc from Regions AS r (NOLOCK) inner join BranchPlants b on r.Region = b.Region Where b.BranchPlant = rf.ToBranchPlant) as ToRegion
    , (Select r.RegionDesc from Regions AS r (NOLOCK) inner join BranchPlants b on r.Region = b.Region Where b.BranchPlant = rf.FromBranchPlant) as FromRegion
    , (Select c.CountryDesc from Countries AS c (NOLOCK) inner join BranchPlants b on c.Country = b.Country Where b.BranchPlant = rf.ToBranchPlant) as ToCountry
    , (Select c.CountryDesc from Countries AS c (NOLOCK) inner join BranchPlants b on c.Country  = b.Country Where b.BranchPlant = rf.FromBranchPlant) as FromCountry
    , rf.IsActive
    , rd.EstimatedDeliveryDateItem
    
FROM   RequestFormDetails AS rd (NOLOCK) 
INNER JOIN RequestForms AS rf (NOLOCK) ON rd.RequestFormId = rf.RequestFormId   
LEFT JOIN BranchPlants AS fl (NOLOCK) ON fl.BranchPlant = rf.FromBranchPlant
LEFT JOIN BranchPlants AS tl (NOLOCK)  ON tl.BranchPlant = rf.ToBranchPlant 
LEFT JOIN SelectOptions AS rfs (NOLOCK)  ON rfs.SortOrder = rf.Status and rfs.SelectName = 'RequestFormStatus'
LEFT JOIN ItemNums AS i (NOLOCK) ON rd.ItemNum = i.ItemNum

GROUP BY rd.RequestFormDetailId, rd.RequestFormId, rf.ToBranchPlant,tl.CompanyName, rf.FromBranchPlant,fl.CompanyName, 
  'AR-' + rf.ToBranchPlant + '-' + CAST(rf.RequestFormId AS varchar), 
  rf.RequiredDate, rf.ArchiveOn, rf.Status, rfs.OptionValue, rfs.OptionLabel, rf.IsArchived, rd.CapitalRequiredForItem,
  rd.StandardCost,rd.CurrShortName, rf.CreatedUserName, rf.CreateDate, rf.IsForecasted, rd.ItemRequiredDate
  ,i.ToolPanel, i.ToolCode, rd.ItemNum, i.ItemNum3, rf.IsActive,rd.EstimatedDeliveryDateItem




GO
/****** Object:  Table [dbo].[RequestSubscriptions]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RequestSubscriptions](
	[SubscriptionId] [int] IDENTITY(1,1) NOT NULL,
	[RequestId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[AddedByUserId] [int] NULL,
	[AddedDateTime] [datetime] NOT NULL,
 CONSTRAINT [PK_RequestSubscriptions] PRIMARY KEY CLUSTERED 
(
	[SubscriptionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwRequestSubscriptions]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vwRequestSubscriptions]
AS
SELECT DISTINCT 
                      rs.SubscriptionId
                      , rs.RequestId
                      , rs.UserId
                      , rs.AddedByUserId
                      , rs.AddedDateTime
                      , r.RequestType
                      , r.BranchPlant
                      , u.UserName
                      , u.FirstName + ' ' + u.LastName AS FullName
                      , u.Email
                      
FROM         dbo.RequestSubscriptions AS rs WITH(NOLOCK) INNER JOIN
                      dbo.Users AS u WITH(NOLOCK) ON rs.UserID = u.UserId INNER JOIN
                      dbo.Requests AS r WITH(NOLOCK) ON rs.RequestID = r.RequestId



GO
/****** Object:  Table [dbo].[AssetLifeCycleReportDataset]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AssetLifeCycleReportDataset](
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[SerialNum] [varchar](50) NULL,
	[AssetNumber] [varchar](30) NULL,
	[EquipmentStatus] [varchar](2) NULL,
	[RNItemNum] [varchar](30) NULL,
	[InventoryItemNum] [varchar](30) NULL,
	[ProductLineId] [int] NULL,
	[DescShort] [varchar](60) NULL,
	[ToolCode] [varchar](30) NULL,
	[ToolPanel] [varchar](30) NULL,
	[CurrentBranchplant] [varchar](12) NULL,
	[CompanyName] [varchar](50) NULL,
	[Country] [varchar](25) NULL,
	[Region] [varchar](25) NULL,
	[LastBillableBranchPlant] [varchar](250) NOT NULL,
	[LastBillableBranchPlantName] [varchar](250) NOT NULL,
	[LastBillableCountry] [varchar](250) NOT NULL,
	[LastBillableRegion] [varchar](250) NOT NULL,
	[DateToolTransferedfromOpsBillable] [varchar](10) NOT NULL,
	[LatestAIRT] [varchar](25) NOT NULL,
	[BPcreatingAIRT] [varchar](12) NOT NULL,
	[BPrepairingAIRT] [varchar](12) NOT NULL,
	[CurrentAIRTStatus] [varchar](20) NOT NULL,
	[DateAIRTCreated] [varchar](10) NOT NULL,
	[DateAIRTClosed] [varchar](10) NOT NULL,
	[DispositionofAIRT] [varchar](19) NOT NULL,
	[AIRTDispositionComments] [varchar](2048) NOT NULL,
	[AIRTDispositionDate] [varchar](10) NOT NULL,
	[Agesincelastrun] [varchar](10) NOT NULL,
	[AgesincelastAIRTwasCreated] [varchar](10) NOT NULL,
	[AgesincelastTIPFTstep] [varchar](10) NOT NULL,
	[AgesinceAIRTwasDispositioned] [varchar](10) NOT NULL,
	[DatesincetoolwaslastinOpsBillableBP] [varchar](10) NOT NULL,
	[DateshippedtoAIRTshiptolocation] [varchar](10) NOT NULL,
	[DatereceivedinAIRTshiptolocation] [varchar](10) NOT NULL,
	[Dateoflastshipmentoftool] [varchar](10) NOT NULL,
	[Datereceiptoftool] [varchar](10) NOT NULL,
	[TransittimefromTesttoRepairlocation] [varchar](23) NOT NULL,
	[latestrunenddate] [varchar](10) NOT NULL,
	[latestjob] [varchar](50) NOT NULL,
	[latestrunnumber] [varchar](50) NOT NULL,
	[TotalLifetimeCSI] [int] NOT NULL,
	[TotalLifetimeTFF] [int] NOT NULL,
	[TotalLifetimeOperHrs] [float] NOT NULL,
	[TotalLifetimeCircHrs] [float] NOT NULL,
	[TotalLifetimeNPT] [decimal](18, 2) NOT NULL,
	[LifetimeMaxTempC] [int] NOT NULL,
	[LifetimeMaxTempF] [int] NOT NULL,
	[TotalCSISLT] [int] NOT NULL,
	[TotalTFFSLT] [int] NOT NULL,
	[OperHrsSLT] [float] NOT NULL,
	[CircHrsSLT] [float] NOT NULL,
	[NPTHrsSLT] [decimal](18, 2) NOT NULL,
	[MaxTempSLTC] [int] NOT NULL,
	[MaxTempSLTF] [int] NOT NULL,
	[AIRTCheck] [varchar](7) NOT NULL,
	[JobCheck] [varchar](11) NOT NULL,
	[MovementCheck] [varchar](16) NOT NULL,
	[Age_Since_Issued_To_DT] [int] NULL,
	[Age_Since_Returned_From_DT] [int] NULL,
	[CreatedOn] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwRMassetReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=======================================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 11 July 2016
--DESCRIPTION: To get RM asset report
--=======================================================================
CREATE VIEW [dbo].[vwRMassetReport]
AS
SELECT alrd.*, fa.AssetLifeRemaining 
FROM dbo.AssetLifeCycleReportDataset alrd (NOLOCK)
LEFT JOIN FixedAssets fa (NOLOCK) on alrd.FixedAssetId=fa.FixedAssetId
GO
/****** Object:  View [dbo].[VwAssetLifeRemaining]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[VwAssetLifeRemaining]
AS
SELECT fa.* 
FROM
	(
		SELECT	vf.*,		
				(100 - CONVERT(DECIMAL(10,2), a.[AssetLifeConsumed]))   [AssetLifeLeft],
				ROW_NUMBER() OVER(PARTITION BY vf.FixedAssetId ORDER BY vf.CreatedOn DESC) [RowNumber]
		FROM [dbo].[vwRMassetReport] vf (NOLOCK)
		LEFT JOIN (
					SELECT f1.FixedAssetId,
					
					MAX(CASE WHEN CONVERT(DECIMAL(10,2), m.LastMeterReadingValue) > CONVERT(INT, cm.GlobalTrigger) THEN '100.00'
						ELSE CONVERT(VARCHAR ,CONVERT(DECIMAL(10,2),CONVERT(DECIMAL(10,2), m.LastMeterReadingValue) / CONVERT(INT, cm.GlobalTrigger)*100) ,-2) end)  [AssetLifeConsumed]
					FROM dbo.CBMCalculatedMeterReadings m (NOLOCK)
					JOIN FixedAssets f (NOLOCK) ON f.FixedAssetId = m.FixedAssetId
					JOIN BranchPlants b (NOLOCK) ON b.BranchPlant = f.BranchPlant
					JOIN (
							SELECT FixedAssetId, TopLevelFixedAssetId
							FROM CBMRunAssetMappings cam (NOLOCK)
							JOIN Runs r (NOLOCK) ON r.runid = cam.runid
							GROUP BY FixedAssetId, TopLevelFixedAssetId
						 ) a ON a.FixedAssetId = m.FixedAssetId
					JOIN FixedAssetS f1 (NOLOCK) ON f1.FixedAssetId = a.TopLevelFixedAssetId
					JOIN CBMMonitorAssetItemNums ca1 (NOLOCK) ON ca1.ItemNum = f1.InventoryItemNum AND ca1.IsParent = 1
					JOIN CBMMonitorAssetItemNums ca2 (NOLOCK) ON ca2.ItemNum = f.InventoryItemNum AND ca2.IsParent = 0
					JOIN CBMMonitor cm (NOLOCK) ON cm.CBMMonitorId = ca1.CBMMonitorId AND cm.CBMMonitorId = ca2.CBMMonitorId AND m.MeterReadingTypeId = cm.MeterReadingTypeId
					GROUP by f1.FixedAssetId
				  ) a ON a.FixedAssetId = vf.FixedAssetId
		 WHERE ISNULL(a.[AssetLifeConsumed],'')!='' 
	) fa
WHERE  [RowNumber]=1 



GO
/****** Object:  View [dbo].[vwJarActivities]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[vwJarActivities] AS
SELECT ja.JarActivityId
		, ja.JobId
		, ja.RunNumber
		, ja.StartDate
		, ja.EndDate
		, ja.RevenueStatus
		, ja.Activity
		, ja.EstDayRate
		, ja.Comments
		, dbo.fnJarActivityPersonnel(ja.JarActivityId) As ActivityPersonnel
		,  stuff((
			SELECT 
				', ' + js.ServiceLine
			FROM JarActivityServices js WITH (NOLOCK)
			WHERE js.JarActivityId = ja.JarActivityId
			GROUP BY js.ServiceLine
		FOR XML PATH('')), 1, 1, '') As ServiceName
		, ja.WellName
		, ja.ToolSize
		, ja.BackupToolSize
		, ja.HoleDepth
		, ja.HoleDepthUOM
		, ja.MaxTemp
		, ja.MaxTempUOM
		, ja.DateLastEdit
		, ja.UserIdLastEdit
		, ja.DateAdded
		, ja.UserIdAdded
FROM JarActivities (NOLOCK) ja





GO
/****** Object:  View [dbo].[vwJarLatestActivityServices]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwJarLatestActivityServices] AS

SELECT 
	NEWID() as RowId, LastestJarActivity.JarActivityId as JarActivityId, JobId, 
	RunNumber, StartDate, EndDate, 
	Activity, EstDayRate, RevenueStatus, Comments, 
	js.ServiceLine, pl.OpsServiceLine
 FROM (
		SELECT  
			ja.JarActivityId, JobId, RunNumber, StartDate, EndDate, Activity, EstDayRate, RevenueStatus, Comments
			, DENSE_RANK() OVER(PARTITION BY ja.JobId ORDER BY EndDate DESC) AS RowRank
		FROM 
		JarActivities(NOLOCK) ja
	) AS LastestJarActivity
LEFT JOIN JarActivityServices(NOLOCK) js  ON js.JarActivityId =  LastestJarActivity.JarActivityId
LEFT JOIN ProductLines(NOLOCK) pl on pl.JarActivityServiceLine = js.ServiceLine
WHERE RowRank = 1
GROUP BY LastestJarActivity.JarActivityId, JobId, RunNumber, StartDate, EndDate, 
	Activity, EstDayRate, RevenueStatus, Comments, js.ServiceLine, pl.OpsServiceLine


GO
/****** Object:  View [dbo].[vwJarActivityDailies]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwJarActivityDailies] AS
SELECT 
		JarActivityId, JobId, 
		RunNumber, StartDate, EndDate, 
		Activity, EstDayRate, RevenueStatus, Comments, 
		LWD, EM, PP, DD, RSS, BEC, TEN, GEO, DMT, AMS
FROM (
		SELECT 
			LastestJarActivity.JarActivityId, JobId, 
			RunNumber, StartDate, EndDate, 
			Activity, EstDayRate, RevenueStatus, Comments, 
			js.ServiceLine, 1 AS ServiceValue
		 FROM (
				SELECT  
					ja.JarActivityId, JobId, RunNumber, StartDate, EndDate, Activity, EstDayRate, RevenueStatus, Comments
					, DENSE_RANK() OVER(PARTITION BY ja.JobId, CAST(EndDate AS DATE) ORDER BY EndDate DESC) AS RowRank
				FROM 
				JarActivities ja (NOLOCK)
			) AS
		LastestJarActivity
		LEFT JOIN JarActivityServices js (NOLOCK) ON js.JarActivityId =  LastestJarActivity.JarActivityId
		WHERE RowRank = 1
) AS src
PIVOT (
	Max(ServiceValue) FOR ServiceLine IN (LWD, EM, PP, DD, RSS, BEC, TEN, GEO, DMT, AMS)
) AS pvt




GO
/****** Object:  View [dbo].[vwOpsJarActivityDailies]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwOpsJarActivityDailies] AS
SELECT 
		JarActivityId, JobId, 
		RunNumber, StartDate, EndDate, 
		Activity, EstDayRate, RevenueStatus, Comments, 
		MAX(LWD) AS LWD, MAX(RSS) AS RSS, MAX(EM) AS EM, MAX(PP) AS PP, 
		(CASE WHEN MAX(MWD) = 1 THEN 1 WHEN MAX(EM) = 1 THEN 1 WHEN MAX(PP) = 1 THEN 1 ELSE 0 END) AS MWD, MAX(DD) AS DD, MAX(Survey) AS Survey
FROM (
		SELECT 
			LastestJarActivity.JarActivityId, JobId, 
			RunNumber, StartDate, EndDate, 
			Activity, EstDayRate, RevenueStatus, Comments, 
			js.ServiceLine, 1 AS ServiceValue, pl.OpsServiceLine, RowRank
		 FROM (
				SELECT  
					ja.JarActivityId, JobId, RunNumber, StartDate, EndDate, Activity, EstDayRate, RevenueStatus, Comments
					, DENSE_RANK() OVER(PARTITION BY ja.JobId, CAST(EndDate AS DATE) ORDER BY EndDate DESC) AS RowRank
				FROM 
				JarActivities ja (NOLOCK)
			) AS
		LastestJarActivity
		LEFT JOIN JarActivityServices js (NOLOCK) ON js.JarActivityId =  LastestJarActivity.JarActivityId
		LEFT JOIN ProductLines pl on pl.JarActivityServiceLine = js.ServiceLine
		WHERE RowRank = 1
) AS src
PIVOT (
	Max(ServiceValue) FOR OpsServiceLine IN (LWD, RSS, EM, PP, MWD, DD, Survey)
) AS pvt
GROUP BY
		JarActivityId, JobId, 
		RunNumber, StartDate, EndDate, 
		Activity, EstDayRate, RevenueStatus, Comments 


GO
/****** Object:  Table [dbo].[GVWEquipmentRequestDetails]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GVWEquipmentRequestDetails](
	[GVWEquipmentRequestDetailId] [int] IDENTITY(1,1) NOT NULL,
	[DetailLineNo] [int] NULL,
	[ItemNum] [varchar](30) NULL,
	[QtyRequested] [int] NULL,
	[PartCondition] [varchar](5) NULL,
	[GVWEquipmentRequestId] [int] NOT NULL,
	[SupplyStatus] [varchar](5) NULL,
	[BranchPlant] [varchar](12) NULL,
	[Notes] [varchar](120) NULL,
	[ParentGVWEquipmentRequestDetailId] [int] NULL,
	[DateRequired] [datetime] NULL,
	[OrderingLocation] [varchar](30) NULL,
	[PreviousAvgMonthlyConsumption] [decimal](18, 4) NULL,
	[ForecastAvgMonthlyConsumption] [decimal](18, 4) NULL,
	[UnitCost] [decimal](18, 4) NULL,
	[IsSupplying] [bit] NULL,
	[SupplyQty] [int] NULL,
	[SalesOrderNumber] [varchar](120) NULL,
	[IsVoid] [bit] NULL,
 CONSTRAINT [PK_GVWEquipmentRequestDetails] PRIMARY KEY CLUSTERED 
(
	[GVWEquipmentRequestDetailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwEquipmentRequestLineItemSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE View [dbo].[vwEquipmentRequestLineItemSearch] as 
select 
  d.GVWEquipmentRequestDetailId, d.DetailLineNo, d.ItemNum, 
  d.QtyRequested, d.PartCondition,  
  d.SupplyStatus, d.BranchPlant, d.Notes,
  d.ParentGVWEquipmentRequestDetailId, 
  i.DescShort as ItemDescription,
  m.GVWEquipmentRequestId, m.GVWEquipmentRequestNo, m.RequestBranchPlant, m.RequestedBy, 
  m.DateRequired, m.Remarks, m.JDELocalApproverNo, m.Priority, m.SubmitRequestedDate,
  m.SubmitRequestedBy
 , m.ProductLine
 , b.CompanyName as BranchPlantFullName
from GVWEquipmentRequestDetails d (nolock)
INNER join GVWEquipmentRequests m (nolock) on m.GVWEquipmentRequestId = d.GVWEquipmentRequestId
left join ItemNums i (nolock) on i.ItemNum = d.ItemNum
left join BranchPlants b (nolock) on b.BranchPlant = d.BranchPlant

GO
/****** Object:  View [dbo].[vwShipmentFormDetailAssets]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE VIEW [dbo].[vwShipmentFormDetailAssets]
AS
SELECT   
	sfda.ShipmentRequestFormDetailAssetId, 
	sfda.ShipmentRequestFormDetailId, 
	sfda.CustomsInvoiceDetailId, 
	sfda.FixedAssetId, 
	sfda.SerialNum,
	sfda.ItemNum,
	sfda.RNItemNum,
	sfda.Revision,
	fatp.SerialNum as TopLevelSerialNum,
	fa.ThirdItemNumber,
	i.ItemNum3,
	fa.LegacySerialNumber

FROM ShipmentFormDetailAssets(NOLOCK) sfda
LEFT JOIN FixedAssets(NOLOCK) fa ON fa.FixedAssetId = sfda.FixedAssetId
LEFT JOIN FixedAssets(NOLOCK) fatp ON fatp.FixedAssetId = fa.TopLevelFixedAssetId
LEFT JOIN ItemNums(NOLOCK) i ON i.ItemNum = sfda.ItemNum





GO
/****** Object:  View [dbo].[vwItemNumBranchPlants]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwItemNumBranchPlants]
AS
SELECT 
  ibp.ItemNumBranchPlantId, ibp.ItemNum, ibp.Version as Revision
  , ibp.BranchPlant
  , i.DefaultSerialProfile
  , ibp.[LotStatusCode]
  , ibp.[MinReorder]
  , ibp.[MaxInStock]
  , ibp.[OptimumStock]
  , ibp.[IsProvidingLoc]
  , ibp.[StdUnitCost]
  , bp.CurrencyCode AS [CurrShortName]
  , dbo.fnGetUSDConversionFactor(ibp.CurrShortName, NULL) as CurrencyConversionFactor
  , ibp.[MovingAverageCost]
  , ibp.[CostMethod]
  , ibp.[ECCN]
  , ibp.[HTSUS]
  , ibp.[LastEdit]
  , ibp.[DateAdded]
  , ibp.[PlndDeliveryTime]  
  , i.IsObsolete, i.ItemNum3
  , i.ItemNumId, i.ItemNum2, i.LegacyNum, i.DescShort, i.DescLong, i.DefaultUOM, i.PartClassification
  , i.DescDocNum, i.ToolPanel, i.ToolCode, i.PartCode
  , ISNULL(i.Critical, 0) as Critical, i.ToolPerJob
  , i.IsRestrictPurchasing, i.IsAsset
  , i.ProductLine, i.ServiceLine
  , i.PartTypeId, i.Active
  , case i.IsAsset when 1 then 'Y' else 'N' end as IsAssetDisplay
  , bp.CompanyName
  , so.OptionLabel as DefaultSerialProfileLabel
  , ibp.SerialProfile
FROM ItemNumBranchPlants ibp (NOLOCK)
JOIN ItemNums i (NOLOCK) on i.ItemNum = ibp.ItemNum
LEFT JOIN BranchPlants bp (NOLOCK) ON bp.BranchPlant = ibp.BranchPlant
LEFT JOIN SelectOptions (NOLOCK) so  ON so.SelectName = 'DefaultSerialProfile' AND so.OptionValue=i.DefaultSerialProfile
GO
/****** Object:  Table [dbo].[AuditECRs]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditECRs](
	[AuditActionId] [int] NOT NULL,
	[ECRId] [uniqueidentifier] NULL,
	[ECRNum] [varchar](25) NULL,
	[Originator] [varchar](50) NULL,
	[OriginatorEmail] [varchar](100) NULL,
	[Supervisor] [varchar](50) NULL,
	[ToolSize] [varchar](50) NULL,
	[BaseCode] [varchar](25) NULL,
	[ChangeDescription] [varchar](max) NULL,
	[CreateDate] [datetime] NULL,
	[DateAdded] [datetime] NULL,
	[UserIdAdded] [int] NULL,
	[DateLastEdit] [datetime] NULL,
	[UserIdLastEdit] [int] NULL,
	[CompletionDate] [datetime] NULL,
	[Priority] [varchar](50) NULL,
	[IsDevelopment] [bit] NULL,
	[IsTooling] [bit] NULL,
	[IsFastTrack] [bit] NULL,
	[IsImmediateInstruction] [bit] NULL,
	[IsTCNRequired] [bit] NULL,
	[ImpactTotalCost] [numeric](18, 2) NULL,
	[Weeks] [varchar](50) NULL,
	[FormStatus] [int] NULL,
	[IsRejected] [bit] NULL,
	[FirstRequiredCompletionDate] [datetime] NULL,
	[SecondRequiredCompletionDate] [datetime] NULL,
	[AppendEmailSubject] [varchar](250) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditECRActionItems]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditECRActionItems](
	[AuditActionId] [int] NOT NULL,
	[ECRActionItemId] [uniqueidentifier] NULL,
	[ECRId] [uniqueidentifier] NULL,
	[Creator] [varchar](50) NULL,
	[Assignee] [varchar](50) NULL,
	[DueDate] [datetime] NULL,
	[ActionText] [varchar](255) NULL,
	[ActionState] [varchar](50) NULL,
	[AssigneeComments] [varchar](max) NULL,
	[DateCompleted] [datetime] NULL,
	[DateAdded] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditECRDocuments]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditECRDocuments](
	[AuditActionId] [int] NOT NULL,
	[ECRDocumentId] [uniqueidentifier] NULL,
	[ECRId] [uniqueidentifier] NULL,
	[DocumentId] [varchar](50) NULL,
	[DocumentNumber] [varchar](50) NULL,
	[CurrentRevision] [varchar](20) NULL,
	[NewRevision] [varchar](20) NULL,
	[Description] [varchar](max) NULL,
	[ECRDocumentModLevelId] [int] NULL,
	[Comments] [varchar](max) NULL,
	[DateAdded] [datetime] NULL,
	[UserIdAdded] [int] NULL,
	[SAPNumber] [varchar](50) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditECRApprovalStatus]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditECRApprovalStatus](
	[AuditActionId] [int] NOT NULL,
	[ECRApprovalStatusId] [uniqueidentifier] NULL,
	[ECRId] [uniqueidentifier] NULL,
	[Stage] [int] NULL,
	[Status] [varchar](50) NULL,
	[Comments] [varchar](max) NULL,
	[DateAdded] [datetime] NULL,
	[ProcessedBy] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditMCComments]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditMCComments](
	[AuditActionId] [int] NOT NULL,
	[MCCommentId] [uniqueidentifier] ROWGUIDCOL  NULL,
	[RefName] [varchar](25) NULL,
	[RefId] [uniqueidentifier] NULL,
	[RefId2] [int] NULL,
	[UserId] [int] NULL,
	[Comment] [varchar](max) NULL,
	[CommentDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[EmailTo] [varchar](1024) NULL,
	[EmailCC] [varchar](1024) NULL,
	[ReplyToCommentId] [uniqueidentifier] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditTypes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditTypes](
	[AuditTypeId] [int] NOT NULL,
	[AuditDesc] [varchar](50) NOT NULL,
 CONSTRAINT [PK_AuditTypes] PRIMARY KEY CLUSTERED 
(
	[AuditTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwECRAuditSummary]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwECRAuditSummary]
AS

Select a.AuditActionId,a.AuditTypeId,at.AuditDesc, a.UserId, u.UserName, u.FullName, a.ActionDesc, a.ActionDate, ae.ECRId
from AuditActions a WITH(NOLOCK)
LEFT JOIN AuditTypes at WITH(NOLOCK) on a.AuditTypeId = at.AuditTypeId
INNER JOIN AuditECRs ae WITH(NOLOCK) on a.AuditActionId = ae.AuditActionId
INNER JOIN AppUserList u WITH(NOLOCK) on a.UserId = u.UserId

UNION ALL
Select a.AuditActionId,a.AuditTypeId,at.AuditDesc, a.UserId, u.UserName, u.FullName, a.ActionDesc, a.ActionDate, ac.RefId as ECRId
from AuditActions a WITH(NOLOCK)
LEFT JOIN AuditTypes at WITH(NOLOCK) on a.AuditTypeId = at.AuditTypeId
INNER JOIN AuditMCComments ac WITH(NOLOCK) on a.AuditActionId = ac.AuditActionId
INNER JOIN AppUserList u WITH(NOLOCK) on a.UserId = u.UserId

UNION ALL
Select a.AuditActionId,a.AuditTypeId,at.AuditDesc, a.UserId, u.UserName, u.FullName, a.ActionDesc, a.ActionDate, ai.ECRId as ECRId
from AuditActions a WITH(NOLOCK)
LEFT JOIN AuditTypes at WITH(NOLOCK) on a.AuditTypeId = at.AuditTypeId
INNER JOIN AuditECRActionItems ai WITH(NOLOCK) on a.AuditActionId = ai.AuditActionId
INNER JOIN AppUserList u WITH(NOLOCK) on a.UserId = u.UserId

UNION ALL
Select a.AuditActionId,a.AuditTypeId,at.AuditDesc, a.UserId, u.UserName, u.FullName, a.ActionDesc, a.ActionDate, ai.ECRId as ECRId
from AuditActions a WITH(NOLOCK)
LEFT JOIN AuditTypes at WITH(NOLOCK) on a.AuditTypeId = at.AuditTypeId
INNER JOIN AuditECRApprovalStatus ai WITH(NOLOCK) on a.AuditActionId = ai.AuditActionId
INNER JOIN AppUserList u WITH(NOLOCK) on a.UserId = u.UserId

UNION ALL
Select a.AuditActionId,a.AuditTypeId,at.AuditDesc, a.UserId, u.UserName, u.FullName, a.ActionDesc, a.ActionDate, ad.ECRId as ECRId
from AuditActions a WITH(NOLOCK)
LEFT JOIN AuditTypes at WITH(NOLOCK) on a.AuditTypeId = at.AuditTypeId
INNER JOIN AuditECRDocuments ad WITH(NOLOCK) on a.AuditActionId = ad.AuditActionId
INNER JOIN AppUserList u WITH(NOLOCK) on a.UserId = u.UserId


GO
/****** Object:  Table [dbo].[DailyDrilling]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DailyDrilling](
	[DailyDrillingID] [uniqueidentifier] NOT NULL,
	[DailyID] [uniqueidentifier] NOT NULL,
	[SurfaceTorque] [float] NULL,
	[SurfaceTorqueUOM] [varchar](10) NULL,
	[SurfaceRPM] [float] NULL,
	[SurfaceRPMUOM] [varchar](10) NULL,
	[WOBSliding] [float] NULL,
	[WOBSlidingUOM] [varchar](10) NULL,
	[WOBRotating] [float] NULL,
	[WOBRotatingUOM] [varchar](10) NULL,
	[DrillingFlowRate] [float] NULL,
	[StringWeightRotating] [float] NULL,
	[StringWeightRotatingUOM] [varchar](10) NULL,
	[StringWeightPickup] [float] NULL,
	[StringWeightPickupUOM] [varchar](10) NULL,
	[StringWeightSlackOff] [float] NULL,
	[StringWeightSlackOffUOM] [varchar](10) NULL,
	[RPMMotor] [float] NULL,
	[TorqueReam] [float] NULL,
	[TorqueReamUOM] [varchar](10) NULL,
	[MtrDeltaPOnBottom] [float] NULL,
	[MtrDeltaPOffBottom] [float] NULL,
	[MtrDeltaPUOM] [varchar](10) NULL,
	[SurvVerticalSection] [float] NULL,
	[SurvVerticalSectionUOM] [varchar](10) NULL,
	[SurvMaxInc] [float] NULL,
	[SurvMinInc] [float] NULL,
	[SurvIncUOM] [varchar](10) NULL,
	[BHATorque] [float] NULL,
	[BHATorqueUOM] [varchar](10) NULL,
	[BHAWOB] [float] NULL,
	[BHAWOBUOM] [varchar](10) NULL,
	[BHASurfaceRPM] [float] NULL,
 CONSTRAINT [PK_DailyDrilling] PRIMARY KEY CLUSTERED 
(
	[DailyDrillingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwDailyRptInfo]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwDailyRptInfo]
AS
SELECT da.DailyID
, substring(convert(varchar, da.ActivityStart, 100),0,20) AS StartDate
, '' AS StartDateTime
, substring(convert(varchar, da.ActivityEnd, 100),0,20) AS EndDate
, '' AS EndDateTime
, da.MDStart
, da.MDFinish
, da.MDUOM
, CASE WHEN da.MDUOM = 'm' THEN (dbo.lengthconvert(da.MDFinish, da.MDUOM, 'm') - dbo.lengthconvert(da.mdstart, da.MDUOM, 'm')) ELSE (dbo.lengthconvert(da.MDFinish, da.MDUOM, 'ft') - dbo.lengthconvert(da.mdstart, da.MDUOM, 'ft')) END AS MDDistance
, da.TVDStart
, da.TVDFinish
, da.TVDUOM
, CASE WHEN da.TVDUOM = 'm' THEN (dbo.lengthconvert(da.TVDFinish, da.TVDUOM, 'm') - dbo.lengthconvert(da.TVDStart, da.TVDUOM, 'm')) ELSE (dbo.lengthconvert(da.TVDFinish, da.TVDUOM, 'ft') - dbo.lengthconvert(da.tvdstart, da.TVDUOM, 'ft')) END AS TVDDistance
, da.OperatingHours AS Operating
, da.CircHrs AS Circulating
, da.DrillingHours AS Drilling
, da.RotatingHours AS Rotating
, Case When da.OperatingHours Is Not Null Then (24 - da.OperatingHours) Else 0 End AS [StandBy]
, da.AvgROP AS Average
, da.AvgROPUOM AS AverageUOM
, dd.MtrDeltaPOnBottom AS SPPOnBottom
, dd.MtrDeltaPUOM AS SPPOnBottomUOM
, dd.MtrDeltaPOnBottom AS SPPOffBottom
, dd.MtrDeltaPUOM AS SPPOffBottomUOM
, da.AzimuthStart AS AzimuthStart
, da.AzimuthUOM AS AzimuthStartUOM
, da.AzimuthFinish AS AzimuthEnd
, da.AzimuthUOM AS AzimuthEndUOM
, dd.BHATorque AS Torque
, dd.BHATorqueUOM AS TorqueUOM
, dd.BHAWOB AS WeightOnBit
, dd.BHAWOBUOM AS WeightOnBitUOM
, dd.SurfaceRPM AS SurfaceRPM
, dd.SurvMaxInc AS MaxInclination
, dd.SurvIncUOM AS MaxInclinationUOM
, dd.SurvMinInc AS MinInclination
, dd.SurvIncUOM AS MinInclinationUOM
, da.InclinationStart AS InclinationStart
, da.InclinationUOM AS InclinationStartUOM
, da.InclinationFinish AS InclinationEnd
, da.InclinationUOM AS InclinationEndUOM
, dd.SurvVerticalSection AS VerticalSection
, dd.SurvVerticalSectionUOM AS VerticalSectionUOM
, sd.MagneticDip AS SurvActualMagDip
, sd.MagneticDipUOM AS SurvActualMagDipUOM
, sd.BTotal AS SurvActualBTotal
, sd.BTotalUOM AS SurvActualBTotalUOM
, da.MaterialsRequestedLWD As MaterialsRequested
, len(da.MaterialsRequestedLWD) AS MaterialLength
, r.ServiceType
, da.CommentsLWD As Comments
, len(da.CommentsLWD) AS CommentsLength
FROM Runs r
LEFT JOIN Daily da ON r.RunID = da.RunID AND da.IsDeleted = 0
LEFT JOIN DailyDrilling dd ON dd.DailyID = da.DailyID
LEFT JOIN SurveyData sd ON r.RunID = sd.RunID
GO
/****** Object:  View [dbo].[VwToolsInUse]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[VwToolsInUse] AS
	SELECT DISTINCT tc.runid,i.toolpanel, tc.ToolCode , r.DateAdded
	FROM ToolStringComponentInfo tc         
		LEFT JOIN itemnums i ON i.itemnum = tc.InventoryItemNum            
		JOIN runs r ON r.runid = tc.runid
WHERE tc.runid in (       
      SELECT RunID FROM Daily d WHERE d.ImportDate  > '1-1-2020' 
	  )  
-- Order by runid     
GO
/****** Object:  Table [dbo].[ECRActionItems]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ECRActionItems](
	[ECRActionItemId] [uniqueidentifier] NOT NULL,
	[ECRId] [uniqueidentifier] NOT NULL,
	[Creator] [varchar](50) NOT NULL,
	[Assignee] [varchar](50) NOT NULL,
	[DueDate] [datetime] NOT NULL,
	[ActionText] [varchar](255) NOT NULL,
	[ActionState] [varchar](50) NOT NULL,
	[AssigneeComments] [varchar](max) NULL,
	[DateCompleted] [datetime] NULL,
	[DateAdded] [datetime] NOT NULL,
 CONSTRAINT [PK_ECRActionItems] PRIMARY KEY CLUSTERED 
(
	[ECRActionItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwECRActionItemPortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwECRActionItemPortlet]
AS

SELECT ai.ECRActionItemId, ai.ECRId, e.ECRNum, ai.Creator, ai.Assignee, 
	(SELECT ISNULL(FirstName, '') + ' ' + ISNULL(LastName, '') AS FullName FROM Users WITH(NOLOCK) WHERE UserName = ai.Creator) AS CreatorFullName,
	(SELECT ISNULL(FirstName, '') + ' ' + ISNULL(LastName, '') AS FullName FROM Users WITH(NOLOCK) WHERE UserName = ai.Assignee) AS AssigneeFullName,
	ai.DueDate, ai.ActionText, ai.ActionState, ai.AssigneeComments, ai.DateCompleted, ai.DateAdded
	
FROM ECRActionItems ai WITH(NOLOCK)
JOIN ECRs e WITH(NOLOCK) on e.ECRId = ai.ECRId



GO
/****** Object:  View [dbo].[vwECRPortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwECRPortlet]
AS

SELECT e.ECRId, e.ECRNum,
	STUFF((SELECT ', ' + PartNum FROM ECRPartNums p WITH(NOLOCK) WHERE p.ECRId = e.ECRId FOR XML PATH('')), 1, 1, '') as PartNum,
	e.ChangeDescription,
	(SELECT top 1 (ISNULL(u.FirstName, '') + ' ' + ISNULL(u.LastName, '')) AS FullName from MCApprovals mca WITH(NOLOCK), Users u WITH(NOLOCK) where mca.UserId = u.UserId and mca.ReferenceId = e.ECRId and mca.IsApproved = 'n' order by Stage asc) as NextApproverUserName,
	(SELECT top 1 username from MCApprovals mca WITH(NOLOCK), Users u WITH(NOLOCK) where mca.UserId = u.UserId and mca.ReferenceId = ECRId and mca.IsApproved = 'n' order by Stage asc) as NextApprover,
	e.ToolSize,
	e.BranchPlant,
	e.Originator,
	ISNULL(u.LastName, '') + ', ' + ISNULL(u.FirstName, '') as OriginatorName,
	e.Supervisor,
	es.StateDesc AS ApprovalStage,
	ua.UserName AS AddedByUserName
FROM ECRs e WITH (NOLOCK)
LEFT JOIN Users u WITH(NOLOCK) on e.Originator = u.Username
LEFT JOIN ECRStates es WITH(NOLOCK) ON es.ECRStateId = e.FormStatus
LEFT JOIN Users ua WITH(NOLOCK) ON ua.UserId = e.UserIdAdded
WHERE E.FormStatus NOT IN (15, 16)


GO
/****** Object:  View [dbo].[vwCAPASearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwCAPASearch]
AS
SELECT     r.RequestId, r.RequestType, r.Requestor, r.RequestStatus, r.UserIdEntered, 
                      r.DateEntered, r.DateClosed, 
                      r.OpenClosed,so.OptionLabel as OpenClosedDesc, r.Supervisor,
                      r.RequestorEmail,  r.BranchPlant,bp.CompanyName as BranchPlantDesc, r.IsDraft, r.Subject, 
                      r.StatusChangedBy,
                      cr.[Type] as CAPAType,
                      sop.OptionLabel AS Priority,
                      cr.Requirments,
                      cr.[Description],
                      cr.Evidence,
                      cr.ResponseDueDate,
                      cr.ShortTermSolution,
                      cr.RootCauseInvestigation,
                      cr.CAPreventRecurrence,
                      cr.PlannedCompletionDate,
                      cr.VerificationText,
                      (SELECT top 1 FullName FROM vwRequestApprovals WITH(NOLOCK) WHERE approvalstatus='X' AND RequestId = r.RequestId) AS NextApprover
                  
FROM Requests (NOLOCK) r
LEFT OUTER JOIN CAPARequests (NOLOCK) cr on r.RequestId = cr.RequestId 
LEFT OUTER JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = r.BranchPlant
LEFT OUTER JOIN SelectOptions (NOLOCK) so ON so.SelectName='RequestStatus' AND so.OptionValue=r.OpenClosed
LEFT OUTER JOIN SelectOptions (NOLOCK) sop ON sop.SelectName='Priority' AND sop.OptionValue=cr.Priority

--WHERE r.RequestType = 'CAPA'

GO
/****** Object:  View [dbo].[vwSearchRequestsNew]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwSearchRequestsNew]
As
SELECT     RequestId AS ID, RequestType AS TYPE, Requestor, RequestStatus, UserIdEntered, DateEntered, DateRequired, DateSubmitted, ChangeRequest, 
                      DetailedReason, ChangesRequired, SpecialNotes, DateClosed, OpenClosed, Supervisor, Regarding, RequestorEmail, Division, PartDesc, PartNumber, 
                      Qty, Vendor, PoNum, Line, MtNum, FailCode, HtNum, ProbDesc, Cause, Disposition, DispositionComments, DispositionedBy, SerialNumbers, LinkToNCR, BranchPlant, 
                      WorkOrderNum, NewbuildRepair, IsDraft, Subject, StatusChangedBy, Priority, SolutionComments, NULL AS Requirments, NULL AS Description, NULL 
                      AS Evidence, Solution, NULL AS ResponseDueDate, NULL AS CAPAStatus, OrigBranchPlant, NULL AS ShortTermSolution, NULL 
                      AS RootCauseInvestigation, NULL AS CAPreventRecurrence, NULL AS PlannedCompletionDate, NULL AS VerificationText,
					  Part_Number, CompPartDesc, SerialNum, FailureCode, FailureDesc, SupervisorID, ProductLine, DeptCode,
					  ActionItemCreator, ActionItemAssignee, ActionDescription, AssigneeComments, ActionItemDateAdded,
					  ExpectedCompletionDate, CompletionDate, IsActionItemComplete
					  , Cost
					  , CurrencyCode
					  , RNItemNum
					  , RNCost
					  , RNCurrencyCode
					  , InternalAnalysis
FROM         dbo.vwSearchRequests WITH(NOLOCK) 
GO
/****** Object:  View [dbo].[vwSearchRequestsNewWithNextApprover]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwSearchRequestsNewWithNextApprover]
AS

SELECT	request.ID, request.[TYPE], request.Requestor, request.RequestStatus, request.UserIdEntered, request.DateEntered, request.DateRequired, request.DateSubmitted, ChangeRequest, 
		request.DetailedReason, request.ChangesRequired, request.SpecialNotes, request.DateClosed, request.OpenClosed, request.Supervisor, request.Regarding, request.RequestorEmail
		, request.Division, request.PartDesc, request.PartNumber, 
		request.Qty, request.Vendor, request.PoNum, request.Line, request.MtNum, request.FailCode, request.HtNum
		, request.ProbDesc, request.Cause, request.Disposition, request.DispositionComments, request.DispositionedBy
		, request.LinkToNCR, request.BranchPlant, 
		request.WorkOrderNum, request.NewbuildRepair, request.IsDraft, request.[Subject], request.StatusChangedBy
		, request.Priority, request.SolutionComments, request.Requirments, request.[Description]
		, request.Evidence, request.Solution, request.ResponseDueDate, 
		request.CAPAStatus, request.OrigBranchPlant, request.ShortTermSolution, request.RootCauseInvestigation, request.CAPreventRecurrence
		, request.PlannedCompletionDate, request.VerificationText,
		request.Part_Number, request.CompPartDesc, request.SerialNum, request.FailureCode, request.FailureDesc, request.ProductLine, request.DeptCode,
		request.ActionItemCreator, request.ActionItemAssignee, request.ActionDescription, request.AssigneeComments, request.ActionItemDateAdded,
		request.ExpectedCompletionDate, request.CompletionDate, request.IsActionItemComplete,
		(SELECT top 1 vra.FullName FROM vwRequestApprovals vra WITH(NOLOCK) WHERE vra.approvalstatus='X' AND vra.RequestId = request.ID) AS NextApprover,
		STUFF((SELECT ', ' + rp.SerialNum
			from RequestParts rp WITH(NOLOCK)
			where rp.RequestId = request.ID ORDER BY rp.SerialNum
			FOR XML PATH('')), 1, 2, '') as SerialNumbers,
		so.OptionLabel AS OpenClosedDesc,
		bp.CompanyName
	  , request.Cost
	  , request.CurrencyCode
	  , request.RNItemNum
	  , request.RNCost
	  , request.RNCurrencyCode
	  , InternalAnalysis
FROM	vwSearchRequestsNew (NOLOCK) request
LEFT JOIN SelectOptions (NOLOCK) so ON so.SelectName='RequestStatus' AND so.OptionValue=request.OpenClosed
LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = request.BranchPlant
GO
/****** Object:  View [dbo].[vwCAPAPortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwCAPAPortlet] AS

SELECT     r.RequestId, 
		   r.RequestType, 
		   r.Requestor,
		   capar.Priority,
		   p.OptionLabel as PriorityDesc,
		   r.Subject, 
		   r.RequestStatus,
		   r.BranchPlant,
		   r.OpenClosed,
		   oc.OptionLabel  as OpenClosedDesc,
		   capar.Type,
		   (SELECT top 1 FullName FROM vwRequestApprovals WITH(NOLOCK) WHERE approvalstatus='X' AND vwRequestApprovals.RequestId = r.RequestId) AS NextApprover,
		   u.UserName AS AddedByUserName,
		   bp.CompanyName AS BranchPlantName
		   
FROM Requests (NOLOCK) r
LEFT OUTER JOIN CAPARequests (NOLOCK) capar ON r.RequestId = capar.RequestId 
LEFT JOIN SelectOptions (NOLOCK) oc ON oc.OptionValue = r.OpenClosed and oc.SelectName = 'RequestStatus'
LEFT JOIN SelectOptions (NOLOCK) p ON p.OptionValue = capar.Priority and p.SelectName = 'Priority'
LEFT JOIN Users (NOLOCK) u ON u.UserId = r.UserIdEntered
LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = r.BranchPlant
WHERE r.RequestType='CAPA' AND r.OpenClosed <> 'C'



GO
/****** Object:  View [dbo].[vwItemNumsSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE VIEW [dbo].[vwItemNumsSearch]
AS
SELECT i.ItemNumId, i.ItemNum, i.ItemNum2, i.ItemNum3, i.LegacyNum, i.DescShort, i.DescLong, i.DefaultUOM,
		i.PartClassification, i.Revision, i.DescDocNum, i.ToolPanel, i.ToolCode, i.PartCode, ISNULL(i.Critical, 0) as Critical, 
		i.IsObsolete, IsRestrictPurchasing, i.IsAsset, i.DefaultSerialProfile, 
		so.OptionLabel AS DefaultSerialProfileDesc, i.StockType, i.ProductLine, i.ServiceLine, i.NetWeight,
		i.PartTypeId, i.Active, i.DateAdded, i.TEROrderMultiple, ISNULL(i.IsHazMat, 0) as IsHazMat, i.ToolPerJob, i.Size, i.JDEGLCode,
		(CASE WHEN BOM.ParentItemNum IS NULL THEN 0 ELSE 1 END) AS HasBOM
FROM ItemNums (NOLOCK )i 
LEFT JOIN SelectOptions (NOLOCK) so  ON so.SelectName = 'DefaultSerialProfile' AND so.OptionValue=i.DefaultSerialProfile
LEFT OUTER JOIN (SELECT DISTINCT ParentItemNum FROM ItemNumConfigs (NOLOCK) WHERE IsNull(IsToolString, 0) = 0) AS BOM ON BOM.ParentItemNum = i.ItemNum





GO
/****** Object:  View [dbo].[vwItemNumRevisions]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwItemNumRevisions]
AS
SELECT 
  ir.ItemNumRevisionId, ir.ItemNum, ir.Revision
  , ir.IsObsolete, ir.ItemNum3, ir.DateAdded
  , i.ItemNumId, i.ItemNum2, i.LegacyNum, i.DescShort, i.DescLong, i.DefaultUOM, i.PartClassification
  , i.DescDocNum, i.ToolPanel, i.ToolCode, i.PartCode
  , ISNULL(i.Critical, 0) as Critical, i.ToolPerJob
  , i.IsRestrictPurchasing, i.IsAsset, i.DefaultSerialProfile
  , i.ProductLine, i.ServiceLine
  , i.PartTypeId, i.Active, i.LastEdit
  , case i.IsAsset when 1 then 'Yes' else 'No' end as IsAssetDisplay
  , s.OptionLabel as DefaultSerialProfileLabel
FROM ItemNumRevisions ir (NOLOCK)
JOIN ItemNums i (NOLOCK) on i.ItemNum = ir.ItemNum
LEFT JOIN SelectOptions s WITH(NOLOCK) on s.OptionValue = i.DefaultSerialProfile and s.SelectName = 'DefaultSerialProfile'




GO
/****** Object:  View [dbo].[vwItemNumRefExceptionReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[vwItemNumRefExceptionReport] AS

SELECT 
  i.ItemNumId
  , i.ItemNum
  , i.DescShort
  , i.ItemNum2
  , i.ItemNum3
  , i.LegacyNum
  , rn.ToolPanel
  , rn.ToolCode
  , i.Revision
  , i.DefaultSerialProfile
  , so.OptionLabel as DefaultSerialProfileLabel
  , inr.RefItemNum AS ReferenceItemNum
  , so2.OptionLabel AS ReferenceRefItemNum
  , inr.RefType 
FROM ItemNumReferences inr (NOLOCK) 
LEFT JOIN ItemNums i (NOLOCK) on i.ItemNum = inr.ItemNum
LEFT JOIN ItemNums rn (NOLOCK) on rn.ItemNum = inr.RefItemNum
LEFT JOIN SelectOptions(NOLOCK) so ON so.SelectName = 'DefaultSerialProfile' and so.OptionValue = i.DefaultSerialProfile
LEFT JOIN SelectOptions(NOLOCK) so2 ON so2.SelectName = 'DefaultSerialProfile' and so2.OptionValue = rn.DefaultSerialProfile


GO
/****** Object:  View [dbo].[VW_FixedAssets_WPTS]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[VW_FixedAssets_WPTS]
AS 
  select 
	f.FixedAssetId, 
	f.SerialNum [SerialNumber],
	f.InventoryItemNum [InventoryItemNumber],
	f.AssetNumber [JDEAssetNumber],
	f.ParentNumber [ParentAssetNumber],
	f.RNItemNum [RentalItemNumber],
	i.DescShort [PartDescription],
	f.AssetDescription [JDEAssetDescription],
	f.ProductLineCode [GLCode],
	i.ToolPanel [ToolPanel],
	i.ToolCode [ToolCode],
	f.BranchPlant,
	f.FixedAssetBranchPlant [OwnershipBranchPlant],
	p.Id [ProductLineId],
	i.IsAsset [IsAsset],
	f.LastStatusChangeDate [LastUpdatedOn]
	from FixedAssets f (NOLOCK)
	left join ItemNums i (NOLOCK) on i.ItemNum = f.inventoryitemnum
	left join ItemNums rn (NOLOCK) on rn.ItemNum = f.inventoryitemnum
	left join GLCodes gc (NOLOCK) on gc.GLCode = f.ProductLineCode
	left join GLProductLines p (NOLOCK) on p.Id = gc.GLProductLineId
--WHERE ISNULL(i.IsAsset, rn.IsAsset) = 1 OR f.Source = 'WPTS' 
GO
/****** Object:  View [dbo].[vwJobCapacitySizeLookup]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[vwJobCapacitySizeLookup]
as
select distinct Size as ToolSize from ItemNums
where 
  ToolPanel is not null 
  and ToolCode is not null 
  and IsAsset = 1
  --and Size is not null
  and Size <> 'SOURCE'
--order by Size
GO
/****** Object:  Table [dbo].[VirtualParts]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VirtualParts](
	[VirtualPartId] [int] IDENTITY(1,1) NOT NULL,
	[DataSource] [varchar](5) NULL,
	[PlantCode] [varchar](6) NULL,
	[BranchPlant] [varchar](12) NULL,
	[ItemNum] [varchar](30) NULL,
	[AvailableQty] [int] NULL,
	[QtyUsage12Months] [int] NULL,
	[InventoryDate] [datetime] NULL,
	[CurrencyFactor] [decimal](18, 7) NULL,
	[ReDeployable] [int] NULL,
 CONSTRAINT [PK_VirtualParts] PRIMARY KEY CLUSTERED 
(
	[VirtualPartId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwVirtualParts]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE View [dbo].[vwVirtualParts] AS  
SELECT p.VirtualPartId, p.DataSource, p.PlantCode, p.BranchPlant, p.ItemNum, p.AvailableQty, p.QtyUsage12Months, 
		p.InventoryDate, p.CurrencyFactor, p.ReDeployable, i.DescShort, i.ProductLine, i.ToolPanel, i.IsAsset,
		b.CompanyName, NULL AS MaterialGroup, NULL AS MaterialType, NULL AS AbcIndicator, NULL AS PriceControl, 
		NULL AS InHouseProdTime, NULL AS LeadTimeDays, NULL AS CumulativeLeadTimeDays, NULL AS SafetyStockQty, 
		NULL AS UnitPrice, NULL AS UnitPriceCurrency, NULL AS TotalPriceLocal, NULL AS TotalPriceUSD		
FROM VirtualParts p (NOLOCK)
INNER JOIN ItemNums i (NOLOCK) ON i.ItemNum = p.ItemNum
LEFT JOIN BranchPlants b (NOLOCK) ON b.BranchPlant = p.BranchPlant


GO
/****** Object:  View [dbo].[vwToolsCountPortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwToolsCountPortlet]
AS

SELECT ROW_NUMBER() OVER(ORDER BY ISNULL(ri.ToolPanel, i.ToolPanel)) as RowId,
	ISNULL(ri.ToolPanel, i.ToolPanel) as ToolPanel,
	fa.BranchPlant,
	fa.EquipmentStatus,
	COUNT(fa.FixedAssetId) AS Total
FROM FixedAssets (NOLOCK) fa
LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN ItemNums (NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
GROUP BY ISNULL(ri.ToolPanel, i.ToolPanel), fa.BranchPlant, fa.EquipmentStatus






GO
/****** Object:  View [dbo].[vwItemNumConfigurationSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE View [dbo].[vwItemNumConfigurationSearch] as

SELECT ItemNumConfigId, 
		ItemNum, 
		f.ToolSizeID,
		s.ShortName AS SizeShortName,
		s.Size AS Sizes,
		f.IsActive,
		f.ParentItemNum,
		f.IsToolString,
		ISNULL((SELECT  SUM(IsNull(tfsi.Qty, 0) * IsNull(i.StdUnitCost, 0))
			FROM ItemNumConfigs tfsi (NOLOCK) 
			INNER JOIN ItemNums i (NOLOCK) ON tfsi.ItemNum = i.ItemNum AND  
			tfsi.ParentItemNum = f.ItemNum and ISNULL(tfsi.ToolSizeID,0) = ISNULL(f.ToolSizeID,0) WHERE tfsi.IsToolString = 1),0) AS TotalCost,
		'USD' as CurrencyCode,
		(SELECT  SUM(IsNull(tfsi.Qty, 0))
			FROM ItemNumConfigs tfsi (NOLOCK) 
			WHERE tfsi.ParentItemNum = f.ItemNum AND ISNULL(tfsi.ToolSizeID,0) = ISNULL(f.ToolSizeID,0) AND tfsi.IsToolString = 1) AS NumOfComponents
FROM ItemNumConfigs f (NOLOCK)
LEFT JOIN ToolStringSize s (NOLOCK) ON f.ToolSizeID = s.ToolSizeID
WHERE f.ParentItemNum IS NULL AND f.IsToolString = 1

GO
/****** Object:  View [dbo].[vwInsertBreakdownReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwInsertBreakdownReport] as
SELECT 
	c.ItemNumConfigId, 
	c.ItemNum, 
	c.ParentItemNum,
	c.Qty, 
	c.IsToolString,
	c.ToolSizeID,
	i.StdUnitCost,
	s.ShortName as ShortSizeName,
	i.ToolCode,
	i.ToolPanel,
	i.DepreciationCost
from ItemNumConfigs c (NOLOCK)
LEFT JOIN ItemNums i (NOLOCK) on i.ItemNum = c.ItemNum
LEFT JOIN ToolStringSize s (NOLOCK) on s.ToolSizeID = c.ToolSizeID
where c.ParentItemNum is not null and c.IsToolString = 1 

GO
/****** Object:  Table [dbo].[SoftwareReleases]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SoftwareReleases](
	[SoftwareReleaseId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Description] [varchar](100) NOT NULL,
	[ProductLine] [varchar](10) NULL,
	[SoftwareType] [varchar](2) NULL,
	[ItemNum] [varchar](30) NULL,
 CONSTRAINT [PK_SoftwareReleases] PRIMARY KEY CLUSTERED 
(
	[SoftwareReleaseId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwSoftwareReleases]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE View [dbo].[vwSoftwareReleases] AS  
SELECT sr.SoftwareReleaseId, sr.Description,sr.ProductLine,sr.SoftwareType,sr.ItemNum,i.IsObsolete,
		(SELECT  TOP 1 Revision
        FROM          ItemNumRevisions
        WHERE      (ItemNum = sr.ItemNum)
        ORDER BY DateAdded DESC) AS SoftwareRevision 

FROM SoftwareReleases (NOLOCK) sr LEFT OUTER JOIN
ItemNums  (NOLOCK) i on i.ItemNum = sr.ItemNum


GO
/****** Object:  View [dbo].[vwItemNumStdCostLookup]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[vwItemNumStdCostLookup]
AS
SELECT 
  i.ItemNumId, i.ItemNum, i.ItemNum2, i.ItemNum3, i.LegacyNum
  , i.DescShort, i.DescLong, i.DefaultUOM, i.PartClassification
  , i.Revision, i.DescDocNum, i.ToolPanel, i.ToolCode, i.PartCode
  , ISNULL(i.Critical, 0) as Critical, i.ToolPerJob, i.IsObsolete
  , IsRestrictPurchasing, i.IsAsset, i.DefaultSerialProfile
  , i.ProductLine, i.ServiceLine
  , i.PartTypeId, i.Active, i.LastEdit, i.DateAdded
  , case i.IsAsset when 1 then 'Y' else 'N' end as IsAssetDisplay
  , so.OptionLabel as DefaultSerialProfileLabel
  , i.TEROrderMultiple, ISNULL(i.IsHazMat, 0) as IsHazMat,i.StdUnitCost, 'USD' as CurrShortName
FROM ItemNums i WITH (NOLOCK)
LEFT JOIN SelectOptions so (NOLOCK) on so.SelectName = 'DefaultSerialProfile' and so.OptionValue=i.DefaultSerialProfile





GO
/****** Object:  View [dbo].[vwItemNumToolCodes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwItemNumToolCodes]
AS
(
	Select Distinct ToolPanel, ToolCode from ItemNums
)
GO
/****** Object:  View [dbo].[VwItemNumFind]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[VwItemNumFind] AS 
SELECT 
    r.ItemNumReferenceId,
    r.itemnum AS  [ItemNum], 
    i.descshort AS [DescShort], 
    i.isasset AS [IsAsset], 
    i.defaultserialprofile AS [DefaultSerialProfile], 
    r.RefItemNum
FROM ItemNumReferences r 
JOIN itemnums i ON i.itemnum = r.ItemNum
WHERE  reftype = 'r' AND i.DefaultSerialProfile = 's' 


GO
/****** Object:  View [dbo].[vwRequestItemGroupDetails]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--================================================================================
--MODFIED BY : SUYEB MOHAMMAD
--MODFIED ON : 25 July 2016
--DESCRIPTION: To get request group item from itemnumconfigs table 
--================================================================================

CREATE VIEW [dbo].[vwRequestItemGroupDetails]
AS
SELECT

  ROW_NUMBER() OVER (ORDER BY (i.ItemNum)) AS [RequestItemGroupId],
  rig.ParentItemNum AS GroupItemNum,
  i.ItemNum,
  i.ItemNum2,
  i.ItemNum3,
  i.LegacyNum,
  i.ToolPanel,
  i.ToolCode,
  i.DescShort,
  i.DescLong,
  i.DefaultUOM,
  i.PartClassification,
  i.Revision,
  i.DescDocNum,
  i.PartCode,
  ISNULL(i.Critical, 0) AS Critical,
  i.IsObsolete,
  i.IsAsset,
  i.DefaultSerialProfile,
  i.ProductLine,
  CASE i.IsAsset
    WHEN 1 THEN 'Y'
    ELSE 'N'
  END AS IsAssetDisplay,
  i.StdUnitCost,
  'USD' AS CurrShortName,
  NULL AS DateLastEdit,
  0 AS UserIdLastEdit,
  rig.DateAdded,
  rig.UserIdAdded,
  0 AS DisplayOrder,
  NULL AS Name,
  NULL AS GroupToolPanel,
  NULL AS Description,
  0 AS ParentRequestItemGroupId

FROM ItemNumConfigs(NOLOCK) rig
LEFT JOIN ItemNums(NOLOCK) i
  ON i.ItemNum = rig.ItemNum
WHERE rig.ParentItemNum IS NOT NULL
AND rig.[IsToolString] = 1

GO
/****** Object:  View [dbo].[vwBOMTableSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE View [dbo].[vwBOMTableSearch] AS  

SELECT ic.ItemNumConfigId, 
	ParentItemNum AS BOMNum, 
	ib.DescShort AS BOMDesc, 
	ic.ItemNum,
	i.DescShort AS ItemDesc, 
	'' AS ItemRev, 
	ic.Qty,
	CASE WHEN (SELECT COUNT(*) FROM ItemNumConfigs WITH(NOLOCK) WHERE ParentItemNum = ic.ItemNum AND ISNULL(ic.IsToolString, 0) = 0) > 0 THEN 'Yes' ELSE 'No' END AS SubAssembly
FROM ItemNumConfigs (NOLOCK) ic 
LEFT OUTER JOIN ItemNums (NOLOCK) ib  ON ib.ItemNum = ic.ParentItemNum
LEFT OUTER JOIN ItemNums(NOLOCK) i ON i.ItemNum = ic.ItemNum
Where ISNULL(ic.IsToolString, 0) = 0






GO
/****** Object:  View [dbo].[vwPFTBoardFirmwares]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO



CREATE VIEW [dbo].[vwPFTBoardFirmwares]
AS

SELECT pbf.PFTBoardFirmwareId, pbf.PFTWOId, pbf.BoardItemNum, pbf.BoardSerialNum, pbf.SensorSlotBoardId, 
	pbf.BoardFirmwareId, pbf.StartFirmwareRevision, pbf.EndFirmwareItemNum as FirmwareItemNum, 
	pbf.EndFirmwareRevision, pbf.Component, pbf.DateAdded, it.Revision as ReleasedRevision, it.DescShort as FirmwareDescription,
	pbf.IsMaster
FROM PFTBoardFirmwares (NOLOCK) pbf 
LEFT OUTER JOIN ItemNums (NOLOCK) it ON pbf.EndFirmwareItemNum = it.ItemNum 


GO
/****** Object:  View [dbo].[vw_ToolCodes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=======================================================
--MODIFIED BY: SACHIN MHALUNGEKAR
--MODIFIED ON : 24 June 2020
--DESCRIPTION: To get the distinct tool codes
--=======================================================
--TFS 
--=======================================================
CREATE VIEW [dbo].[vw_ToolCodes]
AS	SELECT
	DISTINCT ToolCode FROM ItemNums;
GO
/****** Object:  View [dbo].[vwRequestParts]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwRequestParts]
AS
SELECT 
  a.RequestPartId, a.RequestId, a.PartNum, a.serialNum, a.AddedBy AS AddedByUserId
  , a.DateAdded
  , b.DescShort AS PartDesc
  , u.UserName AS AddedByUserName
  , fa.AssetNumber,a.RNItemNum
FROM RequestParts a WITH(NOLOCK) 
LEFT JOIN Users u WITH(NOLOCK) ON a.AddedBy = u.UserId
LEFT JOIN FixedAssets fa WITH(NOLOCK) ON fa.InventoryItemNum = a.PartNum and fa.SerialNum = a.SerialNum
LEFT JOIN ItemNums b WITH(NOLOCK) ON a.PartNum = b.ItemNum


GO
/****** Object:  View [dbo].[vwItemNumProductLines]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwItemNumProductLines]
AS
SELECT DISTINCT ProductLine
FROM ItemNums (NOLOCK)

GO
/****** Object:  View [dbo].[vw_ItemNums]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=======================================================
--MODIFIED BY: SACHIN MHALUNGEKAR
--MODIFIED ON : 2 July 2020
--DESCRIPTION: To get the Item nums
--=======================================================
--TFS 
--=======================================================
CREATE VIEW [dbo].[vw_ItemNums]
AS	SELECT
		  a.SerialNum  
		, a.RNItemNum 
	    , a.[InventoryItemNum]
		, ISNULL(inv.DescShort, rn.DescShort) DescShort
		, ISNULL(rn.ToolCode, inv.ToolCode) As ToolCode  
		, ISNULL(rn.ToolPanel, inv.ToolPanel) As ToolPanel 
		, a.EquipmentStatus 
FROM FixedAssets a WITH (NOLOCK)  
LEFT JOIN ItemNums rn WITH (NOLOCK) ON rn.ItemNum = a.RNItemNum   
LEFT JOIN ItemNums inv WITH (NOLOCK) ON inv.ItemNum = a.InventoryItemNum 
WHERE a.NotUsed = 0  
GO
/****** Object:  Table [dbo].[WorkflowCategory]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WorkflowCategory](
	[WorkflowCategoryId] [uniqueidentifier] NOT NULL,
	[CategoryDesc] [varchar](25) NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_WorkflowCategory] PRIMARY KEY CLUSTERED 
(
	[WorkflowCategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WorkflowTask]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WorkflowTask](
	[WorkflowTaskId] [uniqueidentifier] NOT NULL,
	[WorkflowId] [uniqueidentifier] NOT NULL,
	[ParentWorkflowTaskId] [uniqueidentifier] NULL,
	[TaskDesc] [varchar](256) NOT NULL,
	[TaskStatus] [varchar](1) NULL,
	[AdminComments] [text] NULL,
	[ApproverComments] [text] NULL,
	[LastUpdateUserId] [int] NULL,
	[IsIncluded] [bit] NOT NULL,
	[DisplayOrder] [int] NOT NULL,
 CONSTRAINT [PK_WorkflowTask] PRIMARY KEY CLUSTERED 
(
	[WorkflowTaskId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Workflow]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Workflow](
	[WorkflowId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[WorkflowCategoryId] [uniqueidentifier] NOT NULL,
	[AdminUserId] [int] NULL,
	[RequestId] [int] NULL,
	[RequestType] [varchar](3) NULL,
	[ECNProcessId] [int] IDENTITY(1,1) NOT NULL,
	[ECNNumber] [varchar](15) NULL,
	[Status] [varchar](1) NOT NULL,
	[Priority] [int] NOT NULL,
	[Tool] [int] NOT NULL,
	[Type] [int] NOT NULL,
	[IsCritical] [bit] NOT NULL,
	[TechnicalInfo] [varchar](4000) NULL,
	[Comments] [varchar](4000) NULL,
	[DateAdded] [datetime] NOT NULL,
	[AppendEmailSubject] [varchar](250) NULL,
 CONSTRAINT [PK_Workflow] PRIMARY KEY CLUSTERED 
(
	[WorkflowId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwWorkflowTasks]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vwWorkflowTasks] AS

Select wt.WorkflowTaskId, wt.TaskStatus, wt.TaskDesc, 
		w.WorkflowId, w.ECNProcessId, w.Status, w.DateAdded, w.Priority, w.AdminUserId, u.Email as AdminUserEmail,
		wc.WorkflowCategoryId, wc.CategoryDesc
from WorkflowTask(NOLOCK) wt
INNER JOIN Workflow(NOLOCK)  w on w.WorkflowId = wt.WorkflowId
INNER JOIN WorkflowCategory(NOLOCK)  wc ON wc.WorkflowCategoryId = w.WorkflowCategoryId
INNER JOIN Users(NOLOCK)  u ON w.AdminUserId = u.UserId


GO
/****** Object:  Table [dbo].[WorkflowCategoryAdmin]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WorkflowCategoryAdmin](
	[WorkflowCategoryId] [uniqueidentifier] NOT NULL,
	[UserId] [int] NOT NULL,
 CONSTRAINT [PK_WorkflowCategoryAdmin] PRIMARY KEY CLUSTERED 
(
	[WorkflowCategoryId] ASC,
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[WorkflowDeptAdmin]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE   view [dbo].[WorkflowDeptAdmin] as
select
	c.WorkflowCategoryId
	, c.CategoryDesc
	, c.IsActive
	, u.UserId
	, u.UserName
	, u.FirstName
	, u.LastName
	, u.Email
from WorkflowCategory c WITH(NOLOCK)
join WorkflowCategoryAdmin a WITH(NOLOCK) on c.WorkflowCategoryId = a.WorkflowCategoryId
join Users u WITH(NOLOCK) on a.UserId = u.UserId

GO
/****** Object:  View [dbo].[vwWorkflows]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwWorkflows] as
SELECT w.WorkflowId
      ,w.WorkflowCategoryId
      ,w.AdminUserId
      ,w.RequestId
      ,w.RequestType
      ,w.ECNProcessId
      ,w.ECNNumber
      ,w.Status
      ,w.Priority
      ,w.Tool
      ,w.Type
      ,w.IsCritical
      ,w.TechnicalInfo
      ,w.Comments
      ,w.DateAdded
      ,wc.CategoryDesc
      ,slTool.OptionLabel as ToolDesc
      ,slType.OptionLabel as TypeDesc
      , case Status when 'X' then 'Closed' else 'In Progress' end as StatusText
      , case IsNull(RequestId,0) when 0 then null else RequestType+cast(RequestId as varchar) end as RequestTypeRequestId
FROM Workflow w WITH(NOLOCK)
LEFT JOIN WorkflowCategory (NOLOCK) wc on wc.WorkflowCategoryId = w.WorkflowCategoryId 
LEFT JOIN SelectOptions (NOLOCK) slTool on slTool.SelectName = 'ECNTools' and slTool.OptionValue = w.Tool
LEFT JOIN SelectOptions (NOLOCK) slType on slType.SelectName = 'ECNTypes' and slType.OptionValue = CONVERT(VARCHAR(100), w.Type)





GO
/****** Object:  Table [dbo].[WorkflowTaskApprover]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WorkflowTaskApprover](
	[WorkflowTaskId] [uniqueidentifier] NOT NULL,
	[UserId] [int] NOT NULL,
	[IsNotifyOnly] [bit] NOT NULL,
 CONSTRAINT [PK_WorkflowTaskApprover] PRIMARY KEY CLUSTERED 
(
	[WorkflowTaskId] ASC,
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ECNProcessTaskReminder]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[ECNProcessTaskReminder] AS
SELECT w.WorkflowId, w.ECNProcessId, w.DateAdded, w.Priority, c.CategoryDesc, u.UserId, u.Email
  FROM workflow w WITH(NOLOCK)
  JOIN WorkflowCategory c WITH(NOLOCK) ON w.WorkflowCategoryId = c.WorkflowCategoryId
  JOIN WorkflowTask t WITH(NOLOCK)ON w.WorkflowId = t.WorkflowId
  JOIN WorkflowTaskApprover a WITH(NOLOCK) ON t.WorkflowTaskId = a.WorkflowTaskId
  JOIN Users u WITH(NOLOCK) ON a.UserId = u.UserId and u.Active = 1
 WHERE t.TaskStatus not in ('C','X')
   AND w.Status not in ('C','X')
   AND t.IsIncluded = 1
   AND a.IsNotifyOnly = 0
GO
/****** Object:  View [dbo].[vwCBMMonitor]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwCBMMonitor]
AS
SELECT c.CBMMonitorId, 
	   c.PFTConfigId, 
	   p.ProcessName [PFTConfigName],
	   p.ProcessDesc [PFTConfigDescription],
	   c.MeterReadingTypeId,
	   s.OptionLabel [MeterReadingTypeName],
	   c.CreateJDEWO,
	   c.Active, 
	   c.CreatedBy,
	   u.LastName + ', ' + u.FirstName [CreatedByName],
	   c.CreatedOn,
	   c.UpdatedBy,
	   CASE WHEN u1.UserId IS NULL THEN NULL ELSE u1.LastName + ', ' + u1.FirstName END [UpdatedByName],
	   c.UpdatedOn
FROM CBMMonitor c (NOLOCK)
INNER JOIN PFTConfig p (NOLOCK) ON c.PFTConfigId = p.PFTConfigId
INNER JOIN SelectOptions s (NOLOCK) ON s.OptionValue = c.MeterReadingTypeId AND s.SelectName = 'CBMMeterTypes'
INNER JOIN Users u (NOLOCK) ON c.CreatedBy = u.UserId
LEFT JOIN Users u1 (NOLOCK) ON c.UpdatedBy = u1.UserId
GO
/****** Object:  View [dbo].[vwFindPFTName]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwFindPFTName]
AS
SELECT 
 PFTConfigId ,ProcessName  ,ProcessDesc 
FROM PFTConfig  (NOLOCK)
WHERE  isObsolete = 0 
GO
/****** Object:  View [dbo].[vwJarRuns]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwJarRuns] AS

SELECT	r.JarRunId
		, r.JobId
		, r.RunNumber
		, r.StartDate
		, r.EndDate
		, r.HoleSize
		, r.ToolSize
		, r.BackupToolSize
		, r.HoleDepth
		, r.MaxTemp
		, r.OperHrs
		, r.CircHrs
		, r.DrillHrs
		, r.Comments
FROM JarRuns(NOLOCK) r


GO
/****** Object:  View [dbo].[vwFixedAssetSharepoint]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwFixedAssetSharepoint]
AS
Select
	SerialNum,
	AssetDescription,
	StatusDesc,
	InventoryItemNum,
	BranchPlant,
	BranchPlantName,
	LastBillableRegion,
	LastBillableCountry,
	LastBillableBranchPlant,
	ToolCode,
	EquipmentStatus,
	TopLevelSerialNum,
	TopLevelEquipmentStatus
FROM vwFixedAssetsSearch f
WHERE ProductLineId = '1' 
	AND IsDisposed = '0'  
	AND ToolCode In ('DRV4','BAP4','GR4','MFR4','MFR4(80)','NDTC4(5 11/16)','NDTC4(5 7/8)','NDTC4(5.53)'
	,'SGR4','PWFTC4','SSTC4','GWAR4','SMI4','UWI4','DRV4 (200C)','BAP4 (200C)','GR4 (200C)','MFR4 (200C)','NDT4 (200C)'
	,'DRV6','BAP6','GR6','MFR6','NDTC6',' NDTC6(9 5/8)','SGR6','PWFTC6','SSTC6','GWAR6','SMI6','UWI6','DRV6 (200C)','BAP6 (200C)'
	,'GR6 (200C)','MFR6 (200C)','NDT6 (200C)','DRV8','BAP8','GR8','GRS8','MFR825','MFR8','NDTC825','PWFTC8','SSTC8','PCO9','MFR9'
	,'SSTC9','KIT-HP','KIT-EMPP','KIT-EM','UGR','GR','BIAS4','BIAS4NGen','BIAS6','BIAS6 (MK4)','BIAS64 (MK4+)','BIAS64 (MK4+H)'
	,'BIAS6NGen','BIAS8','BIAS8NGen','BIAS9','BIAS912.25','BP290','BP3375','BP375','BP413','BP475','BP5','BP625','BP675','BP7'
	,'BP8','BP9','BP1125','DAG5','DAG6','DAG8')
GO
/****** Object:  Table [dbo].[ECRDocumentModLevels]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ECRDocumentModLevels](
	[ECRDocumentModLevelId] [int] NOT NULL,
	[ModLevelDesc] [varchar](50) NOT NULL,
 CONSTRAINT [PK_ECRDocumentModLevels] PRIMARY KEY CLUSTERED 
(
	[ECRDocumentModLevelId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwECRDocuments]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vwECRDocuments]
as
select d.ECRDocumentId, d.ECRId, d.DocumentId, d.DocumentNumber, d.CurrentRevision, d.NewRevision, d.Description,
	d.ECRDocumentModLevelId, m.ModLevelDesc, d.Comments, d.DateAdded, d.UserIdAdded, d.SAPNumber
from ECRDocuments d
	left join ECRDocumentModLevels m on m.ECRDocumentModLevelId = d.ECRDocumentModLevelId







GO
/****** Object:  Table [dbo].[JDEContactBranchPlants]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JDEContactBranchPlants](
	[JDEContactNameId] [int] NOT NULL,
	[BranchPlant] [varchar](12) NOT NULL,
 CONSTRAINT [PK_JDEContactBranchPlants] PRIMARY KEY CLUSTERED 
(
	[JDEContactNameId] ASC,
	[BranchPlant] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JDEContactNames]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JDEContactNames](
	[JDEContactNameID] [int] IDENTITY(1,1) NOT NULL,
	[Region] [varchar](25) NULL,
	[InventoryController] [varchar](500) NULL,
	[InventoryControllerSSDS] [varchar](5) NULL,
	[AssetController] [varchar](500) NULL,
	[AssetControllerSSDS] [varchar](5) NULL,
	[LogisticsController] [varchar](500) NULL,
	[LogisticsControllerSSDS] [varchar](5) NULL,
	[RegionalInventory] [varchar](500) NULL,
	[RegionalAssets] [varchar](500) NULL,
	[ADVISOR] [bit] NULL,
	[JDE] [bit] NULL,
	[PerformanceRating] [int] NULL,
	[FinanceContact] [varchar](500) NULL,
	[RBUM] [varchar](500) NULL,
	[Enode] [varchar](50) NULL,
	[CBUM] [varchar](500) NULL,
	[RMSupervisor] [varchar](500) NULL,
	[GVWPartsInquiryContact] [varchar](500) NULL,
	[RMManager] [varchar](500) NULL,
 CONSTRAINT [PK_Dummy] PRIMARY KEY CLUSTERED 
(
	[JDEContactNameID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwJDEContactNames]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwJDEContactNames] AS  

SELECT distinct j.JDEContactNameID, j.Region, j.InventoryController, j.InventoryControllerSSDS, j.AssetController, j.AssetControllerSSDS, 
	j.LogisticsController, j.LogisticsControllerSSDS, j.RegionalInventory, j.RegionalAssets, j.ADVISOR, j.JDE, 
	j.FinanceContact, j.RBUM, j.CBUM, j.Enode, 	stuff((select ','+ jb.BranchPlant as '*' from JDEContactBranchPlants jb (NOLOCK)
    where jb.JDEContactNameId = j.JDEContactNameID for xml path('')), 1, 1, '') as BranchPlant, 
    stuff((select ','+ bp.CompanyName as '*' from JDEContactBranchPlants jb (NOLOCK)
    left join BranchPlants bp on bp.BranchPlant = jb.BranchPlant 
    where jb.JDEContactNameId = j.JDEContactNameID for xml path('')), 1, 1, '') as CompanyName,	
    r.RegionDesc, j.RMSupervisor, j.GVWPartsInquiryContact, j.RMManager

FROM JDEContactNames j (NOLOCK)
LEFT JOIN Regions r (NOLOCK) ON r.Region = j.Region
LEFT JOIN JDEContactBranchPlants jb (NOLOCK) ON jb.JDEContactNameId = j.JDEContactNameID



GO
/****** Object:  View [dbo].[vwWorkflowTaskApprovers]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vwWorkflowTaskApprovers]
AS
Select 
  wta.WorkflowTaskId, wta.UserId, wta.IsNotifyOnly
  , wt.WorkflowId, wt.IsIncluded, wt.TaskStatus
From WorkflowTaskApprover wta (NOLOCK) 
Join WorkflowTask wt (NOLOCK) on wta.WorkflowTaskId = wt.WorkflowTaskId
GO
/****** Object:  View [dbo].[vwCountries]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[vwCountries] as

select [CountryId]
      ,Country as CountryName
      ,[CountryDesc]
      ,c.[Latitude]
      ,c.[Longitude]
      ,c.[Active]
      ,c.[LastEdit]
      ,c.[DateAdded]
      ,[RegionCode]
      ,r.RegionDesc
   FROM Countries c (NOLOCK) 
   LEFT OUTER JOIN Regions r (NOLOCK) on r.Region = c.RegionCode AND r.Active = 1

GO
/****** Object:  View [dbo].[vwBranchPlants]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO




CREATE VIEW [dbo].[vwBranchPlants]
AS

SELECT bp.BranchPlantId, bp.BranchPlant, bp.MCDL01, bp.CompanyName, bp.Description, bp.BaseCode, bp.RelBaseCode, 
bp.County, bp.City, bp.StateProvince, bp.Country, c.CountryDesc, bp.ZipCode, bp.Region, r.RegionDesc, bp.Hemisphere, bp.IsOps, bp.IsManufacturing, 
bp.IsRepair, bp.IsGlobalRepair, bp.Latitude, bp.Longitude, bp.Active, bp.LastEdit, bp.DateAdded, bp.SAPFuncLoc
, bp.CurrencyCode
FROM BranchPlants (NOLOCK) bp
LEFT OUTER JOIN Regions(NOLOCK) r on r.Region = bp.Region
LEFT OUTER JOIN Countries(NOLOCK) c on c.Country = bp.Country





GO
/****** Object:  View [dbo].[vwRegions]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE View [dbo].[vwRegions] As
/*
Select OptionText as RegionName, OptionValue as RegionCode From SelectLists
Where SelectListName = 'TrainingRegion'
*/
select
[RegionId]
      ,[Region] as RegionName
      ,[RegionDesc]
      ,[Latitude]
      ,[Longitude]
      ,[Active]
      ,[LastEdit]
      ,[DateAdded]
      ,[Hemisphere]
from Regions (NOLOCK)


GO
/****** Object:  View [dbo].[vwShipmentRequestFormSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwShipmentRequestFormSearch]
AS
SELECT     
		   'SR-' + srf.ToBranchPlant + '-' + CAST(srf.ShipmentRequestformId AS varchar) AS RequestNumber
		   ,srf.ShipmentRequestformId
           ,srf.FromBranchPlant 
		   ,srf.ToBranchPlant
           ,srf.CreateDate
		   ,srf.RequiredDate
           ,srf.CreatedUserName
		   ,srf.Notes
		   ,srf.ShipmentMethod
		   ,srf.Customer
		   ,srf.Project
		   ,srf.LocalRefNumber
		   ,srf.LocalApprovalNumber
		   ,srf.Status
		   ,srf.RequestFormId
		  ,srf.[Comments]
		  ,srf.[LastEdit]
		  ,srf.[LastEditUserName]
		  ,srf.[ProcessToShipmentDate]
		  ,srf.[ProcessToShipmentUserName]
		  ,srf.IsComplete
		  ,(case when srf.IsComplete = 1 then 'Yes' else 'No' end) IsCompleteString
          ,srfs.OptionValue as StatusDesc
		  ,'AR-' + rf.ToBranchPlant + '-' + CAST(rf.RequestFormId AS varchar) as RequestFormRequestNumber
		  ,fl.CompanyName AS FromCompanyName
		  ,tl.CompanyName AS ToCompanyName
		  ,srf.IsActive, fr.RegionDesc AS FromRegion, fc.CountryDesc AS FromCountry, tr.RegionDesc AS ToRegion, tc.CountryDesc AS ToCountry
		  ,STUFF (( SELECT DISTINCT ', ' + S9Number FROM ShipmentRequestFormDetails d (NOLOCK)
			WHERE d.ShipmentRequestFormId = srf.ShipmentRequestformId
			FOR XML PATH('')), 1, 1, '') AS S9Numbers
		  ,rf.Status AS RequestStatus
		  ,rfs.OptionValue AS RequestStatusDesc
			
FROM ShipmentRequestForms AS srf (NOLOCK) 
LEFT JOIN Requestforms as rf (NOLOCK) on srf.requestformid = rf.requestformid
LEFT JOIN  dbo.BranchPlants AS fl (NOLOCK) ON fl.BranchPlant = srf.FromBranchPlant
LEFT JOIN  dbo.BranchPlants AS tl (NOLOCK)  ON tl.BranchPlant = srf.ToBranchPlant 
LEFT JOIN  Regions AS fr (NOLOCK) ON fr.Region = fl.Region
LEFT JOIN  Regions AS tr (NOLOCK) ON tr.Region = tl.Region
LEFT JOIN  Countries AS fc (NOLOCK) ON fc.Country = fl.Country
LEFT JOIN  Countries AS tc (NOLOCK) ON tc.Country = tl.Country
LEFT JOIN  dbo.SelectOptions AS srfs (NOLOCK)  ON srfs.SortOrder = srf.Status and srfs.SelectName = 'RequestFormStatus'
LEFT JOIN  dbo.SelectOptions AS rfs (NOLOCK)  ON rfs.SortOrder = rf.Status and rfs.SelectName = 'RequestFormStatus'







GO
/****** Object:  Table [dbo].[ReportFields]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReportFields](
	[ReportFieldId] [int] IDENTITY(1,1) NOT NULL,
	[ReportName] [varchar](100) NOT NULL,
	[FieldName] [varchar](255) NULL,
	[DisplayName] [varchar](255) NULL,
	[DisplayOrder] [int] NULL,
	[CategoryName] [varchar](255) NULL,
	[CategoryDisplayName] [varchar](255) NULL,
	[CategoryDisplayNameShort] [varchar](255) NULL,
	[CategoryDisplayOrder] [int] NULL,
	[Symbol] [varchar](2) NULL,
	[Attribute1] [varchar](50) NULL,
 CONSTRAINT [PK_ReportFields] PRIMARY KEY CLUSTERED 
(
	[ReportFieldId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Scorecards]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Scorecards](
	[ScorecardId] [uniqueidentifier] NOT NULL,
	[DataYear] [int] NOT NULL,
	[DataMonth] [int] NOT NULL,
	[Region] [varchar](25) NOT NULL,
	[Country] [varchar](25) NULL,
	[ReportFieldId] [int] NOT NULL,
	[ActualValue] [decimal](18, 4) NULL,
	[BudgetValue] [decimal](18, 4) NULL,
	[DateLastEdit] [datetime] NOT NULL,
	[UserIdLastEdit] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[UserIdAdded] [int] NOT NULL,
 CONSTRAINT [PK_Scorecards] PRIMARY KEY CLUSTERED 
(
	[ScorecardId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwScorecards]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[vwScorecards] as
SELECT 
		s.ScorecardId
		, s.DataYear
		, s.DataMonth
		, DateName(MONTH , DateAdd(MONTH, s.DataMonth, -1)) as MonthDesc
		, s.Region
		, (CASE WHEN s.Region = 'Global' THEN s.Region ELSE r.RegionDesc END) as RegionDesc
		, s.Country
		, c.CountryDesc
		, s.ReportFieldId
		, rf.DisplayName
		, rf.CategoryDisplayName
		, s.ActualValue
		, s.BudgetValue
FROM Scorecards s WITH(NOLOCK)
LEFT JOIN ReportFields rf WITH(NOLOCK) ON rf.ReportFieldId = s.ReportFieldId
LEFT JOIN Regions r WITH(NOLOCK) ON r.Region = s.Region
LEFT JOIN Countries c WITH(NOLOCK) ON c.Country = s.Country




GO
/****** Object:  View [dbo].[vwJarLatestOpsActivityServices]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwJarLatestOpsActivityServices] AS
SELECT 
		JarActivityId, JobId, 
		RunNumber, StartDate, EndDate, 
		Activity, EstDayRate, RevenueStatus, Comments, 
		MAX(LWD) AS LWD, MAX(RSS) AS RSS, MAX(EM) AS EM, MAX(PP) AS PP, 
		(CASE WHEN MAX(MWD) = 1 THEN 1 WHEN MAX(EM) = 1 THEN 1 WHEN MAX(PP) = 1 THEN 1 ELSE 0 END) AS MWD, MAX(DD) AS DD, MAX(Survey) AS Survey
FROM (
		SELECT 
			JarActivityId, JobId, 
			RunNumber, StartDate, EndDate, 
			Activity, EstDayRate, RevenueStatus, Comments, 
			ServiceLine, OpsServiceLine
		 FROM vwJarLatestActivityServices
		 GROUP BY JarActivityId, JobId, RunNumber, StartDate, EndDate, Activity, EstDayRate, RevenueStatus, Comments, ServiceLine, OpsServiceLine
) AS src
PIVOT (
	COUNT(ServiceLine) FOR OpsServiceLine IN (LWD, RSS, EM, PP, MWD, DD, Survey)
) AS pvt
GROUP BY
		JarActivityId, JobId, 
		RunNumber, StartDate, EndDate, 
		Activity, EstDayRate, RevenueStatus, Comments 

GO
/****** Object:  Table [dbo].[RequestEmails]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RequestEmails](
	[EmailId] [int] IDENTITY(1,1) NOT NULL,
	[RequestId] [int] NULL,
	[UserIdAdded] [int] NOT NULL,
	[EmailTo] [varchar](1024) NULL,
	[EmailCC] [varchar](1024) NULL,
	[EmailBody] [text] NULL,
	[DateAdded] [datetime] NOT NULL,
	[ReplyToEmailId] [int] NULL,
	[RequestGuidId] [uniqueidentifier] NULL,
	[RequestType] [varchar](10) NULL,
 CONSTRAINT [PK_RequestEmails] PRIMARY KEY CLUSTERED 
(
	[EmailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwReplyToRequestEmails]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE View [dbo].[vwReplyToRequestEmails]
as
SELECT re.EmailId
		, re.RequestId
		, re.RequestGuidId
		, re.RequestType
		, re.UserIdAdded
		, re.EmailTo
		, re.EmailCC
		, re.EmailBody
		, re.DateAdded
		, u.UserName
		, u.Email
		, re.ReplyToEmailId
		, LTRIM(RTRIM(u.FirstName + ' ' + u.LastName)) AS FullName
FROM dbo.RequestEmails AS re WITH(NOLOCK) 
LEFT OUTER JOIN dbo.Users AS u WITH(NOLOCK) ON re.UserIdAdded = u.UserId
WHERE (re.ReplyToEmailId IS not NULL)


GO
/****** Object:  View [dbo].[vwRequestEmails]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwRequestEmails]
AS
SELECT re.EmailId
		, re.RequestId
		, re.RequestGuidId
		, re.RequestType
		, re.UserIdAdded
		, re.EmailTo
		, re.EmailCC
		, re.EmailBody
		, re.DateAdded
		, u.UserName
		, u.Email
		, LTRIM(RTRIM(u.FirstName + ' ' + u.LastName)) AS FullName
FROM dbo.RequestEmails AS re WITH(NOLOCK) 
LEFT OUTER JOIN dbo.Users AS u WITH(NOLOCK) ON re.UserIdAdded = u.UserId
WHERE (re.ReplyToEmailId IS NULL)


GO
/****** Object:  Table [dbo].[FixedAssetReserves]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FixedAssetReserves](
	[FixedAssetReserveId] [uniqueidentifier] NOT NULL,
	[SerialNum] [int] NOT NULL,
	[InventoryItemNum] [varchar](30) NULL,
	[RNItemNum] [varchar](30) NULL,
	[CreatedDate] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[RequestorBy] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwFixedAssetReserves]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwFixedAssetReserves]
AS
SELECT     far.FixedAssetReserveId AS FixedAssetReserveId, far.SerialNum, far.InventoryItemNum, far.RNItemNum, far.CreatedDate, far.CreatedBy, 
                      uc.UserName AS CreatedByUserName, far.RequestorBy AS RequestorBy, ur.UserName AS RequestorByUserName
FROM         dbo.FixedAssetReserves AS far WITH (NOLOCK) LEFT OUTER JOIN
                      dbo.Users AS uc WITH (NOLOCK) ON uc.UserId = far.CreatedBy LEFT OUTER JOIN
                      dbo.Users AS ur WITH (NOLOCK) ON ur.UserId = far.RequestorBy


GO
/****** Object:  View [dbo].[vwCustomers]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO






CREATE VIEW [dbo].[vwCustomers]
AS

select c1.CustomerId, c1.CustomerName, c1.CustomerNumber,c1.ParentNumber,c2.CustomerName as ParentName,
		c1.BillTo, c1.AddressType, c1.AddressLine1, c1.AddressLine2 ,c1.AddressLine3,c1.AddressLine4 ,
		c1.City, c1.State,c1.ZipCode, c1.County, c1.Country, c1.IsActive
from Customers (NOLOCK) c1 left outer join 
Customers (NOLOCK) c2 on c1.ParentNumber = c2.CustomerNumber 




GO
/****** Object:  View [dbo].[vwAllComponentsDropDown]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwAllComponentsDropDown]
AS
SELECT 
	PartTypeID, 
	[Name],
	Case When ShortName Is Not Null Then 0 Else 1 End As ShortNameShort,
	Case When ShortName Is Not Null Then '[' + ShortName + '] ' Else '' End + 
	[Name] + ' (' +
	Case When HEL_LWD = 1 Then 'HEL/LWD, ' Else '' End + 
	Case When HEL_EM = 1 Then 'HEL/EM, ' Else '' End + 
	Case When RSS = 1 Then 'RSS, ' Else '' End + 
	Case When EM = 1 Then 'EM, ' Else '' End + 
	Case When EM_TWINWELLS = 1 Then 'EM/Twin Wells, ' Else '' End + 
	Case When HYPERPULSE = 1 Then 'HyperPulse, ' Else '' End + 
	Case When AGS = 1 Then 'AGS/Stabiline, ' Else '' End + 
	Case When BECFIELD = 1 Then 'Becfield, ' Else '' End + 
	Case When GEOLINK = 1 Then 'Geolink, ' Else '' End + 
	Case When GWD = 1 Then 'GWD, ' Else '' End + 
	Case When MOTOR = 1 Then 'Motor, ' Else '' End + 
	Case When SURFACE = 1 Then 'Surface, ' Else '' End +
	Case When TENSOR = 1 Then 'Tensor, ' Else '' End + 
	Case When WPR = 1 Then 'WPR, ' Else '' End + 
	Case When DMT_AMS = 1 Then 'DMT/AMS, ' Else '' End AS Component,
	HEL_LWD, HEL_EM, RSS, EM, EM_TWINWELLS, HYPERPULSE, AGS, BECFIELD, DMT_AMS, GEOLINK, GWD, MOTOR, SURFACE, TENSOR, WPR
FROM PartTypes WITH(NOLOCK)
WHERE IsDeleted = 0

GO
/****** Object:  Table [dbo].[ToolCodePartTypes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ToolCodePartTypes](
	[ToolCodePartTypeId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ToolPanel] [varchar](30) NOT NULL,
	[ToolCode] [varchar](30) NOT NULL,
	[PartTypeId] [int] NULL,
 CONSTRAINT [PK_ToolCodePartTypes] PRIMARY KEY CLUSTERED 
(
	[ToolCodePartTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwToolCodePartTypes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwToolCodePartTypes] AS

SELECT ToolCodePartTypeId, ToolPanel, ToolCode, p.PartTypeId, p.Name
FROM ToolCodePartTypes t (NOLOCK)
LEFT JOIN PartTypes p (NOLOCK) on t.PartTypeId = p.PartTypeId

GO
/****** Object:  View [dbo].[vwPartTypeLookup]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwPartTypeLookup]
AS

SELECT 
	PartTypeID
	, [Name]
	, ShortName
	, [Description]
	, REPLACE(
		[Name] + ' (' +
		Case When HEL_LWD = 1 Then 'HEL/LWD, ' Else '' End + 
		Case When HEL_EM = 1 Then 'HEL/EM, ' Else '' End + 
		Case When RSS = 1 Then 'RSS, ' Else '' End + 
		Case When EM = 1 Then 'EM, ' Else '' End + 
		Case When EM_TWINWELLS = 1 Then 'EM/Twin Wells, ' Else '' End + 
		Case When HYPERPULSE = 1 Then 'HyperPulse, ' Else '' End + 
		Case When AGS = 1 Then 'AGS/Stabiline, ' Else '' End + 
		Case When BECFIELD = 1 Then 'Becfield, ' Else '' End + 
		Case When GEOLINK = 1 Then 'Geolink, ' Else '' End + 
		Case When GWD = 1 Then 'GWD, ' Else '' End + 
		Case When MOTOR = 1 Then 'Motor, ' Else '' End + 
		Case When SURFACE = 1 Then 'Surface, ' Else '' End +
		Case When TENSOR = 1 Then 'Tensor, ' Else '' End + 
		Case When WPR = 1 Then 'WPR, ' Else '' End + 
		Case When DMT_AMS = 1 Then 'DMT/AMS, ' Else '' 
	END + ')',', )',')') As Component
FROM PartTypes WITH(NOLOCK)
WHERE IsDeleted = 0


GO
/****** Object:  View [dbo].[vwMCComments]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwMCComments]
AS

	SELECT mcc.MCCommentId, mcc.RefName, mcc.RefId, mcc.RefId2, mcc.UserId, mcc.Comment, mcc.CommentDate, mcc.IsDeleted, 
		u.FirstName + ' ' + u.LastName AS FullName, u.Email
	FROM MCComments mcc (NOLOCK)
		LEFT JOIN Users u (NOLOCK) ON mcc.UserId = u.UserId

GO
/****** Object:  View [dbo].[vwItemConfigs]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--================================================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 25 July 2016
--DESCRIPTION: To get request group item from itemnumconfigs table 
--================================================================================
CREATE View [dbo].[vwItemConfigs] 
AS 
	SELECT	ROW_NUMBER() OVER(ORDER BY ([ItemNum])) AS [RequestItemGroupId], 
			[ItemNum] AS [Name], 
			'' AS [Toolpanel], 
			[ItemNum] AS [Description],
			NULL AS [ParentRequestItemGroupId], 
			[ItemNum], 
			0 AS [DisplayOrder], 
			GETDATE() AS [DateLastEdit], 
			0 AS [UserIdLastEdit], 
			[DateAdded], 
			[UserIdAdded]
	FROM	[ItemNumConfigs] 
	WHERE	[ParentItemNum] IS NULL AND [IsToolString] = 1


GO
/****** Object:  Table [dbo].[JarActivityPersonnel]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JarActivityPersonnel](
	[JarActivityPersonnelId] [uniqueidentifier] NOT NULL,
	[JobId] [uniqueidentifier] NOT NULL,
	[JarActivityId] [uniqueidentifier] NOT NULL,
	[JobPersonnelId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_JarActivityPersonnel] PRIMARY KEY CLUSTERED 
(
	[JarActivityPersonnelId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JobPersonnel]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobPersonnel](
	[JobPersonnelID] [uniqueidentifier] NOT NULL,
	[JobID] [uniqueidentifier] NULL,
	[EmployeeID] [varchar](10) NULL,
	[ProductLine] [varchar](15) NULL,
	[Shift] [varchar](15) NULL,
	[IsLead] [bit] NULL,
	[Company] [varchar](50) NULL,
	[ArriveDate] [datetime] NULL,
	[DepartDate] [datetime] NULL,
	[PhoneNumber] [varchar](15) NULL,
	[VehicleUnitID] [varchar](30) NULL,
	[VehiclePlateNumber] [varchar](30) NULL,
	[LastName] [varchar](30) NULL,
	[FirstName] [varchar](30) NULL,
 CONSTRAINT [PK_JobPersonnel] PRIMARY KEY CLUSTERED 
(
	[JobPersonnelID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwJarActivityPersonnel]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwJarActivityPersonnel] AS
SELECT ap.JarActivityPersonnelId
, ap.JarActivityId
, ap.JobId
, ap.JobPersonnelId
, p.LastName
, p.FirstName
, p.EmployeeID
, p.ProductLine
, p.Shift
, 0 As IsAssigned
FROM JarActivityPersonnel ap WITH(NOLOCK)
LEFT JOIN JobPersonnel p WITH(NOLOCK) ON p.JobPersonnelId = ap.JobPersonnelId


GO
/****** Object:  Table [dbo].[PFTTestData]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTTestData](
	[PFTTestDataId] [uniqueidentifier] NOT NULL,
	[PFTWOSeqId] [uniqueidentifier] NULL,
	[PFTWOId] [uniqueidentifier] NOT NULL,
	[TestName] [varchar](256) NOT NULL,
	[LimitMin] [varchar](100) NULL,
	[LimitMax] [varchar](100) NULL,
	[Duration] [varchar](100) NULL,
	[UserId] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
 CONSTRAINT [PK_PFTTestData] PRIMARY KEY CLUSTERED 
(
	[PFTTestDataId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwPFTTestData]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE VIEW [dbo].[vwPFTTestData]
AS

SELECT ptd.PFTTestDataId, ptd.PFTWOSeqId, ptd.PFTWOId, ptd.TestName, ptd.LimitMin, 
		ptd.LimitMax, ptd.Duration, ptd.UserId, ptd.DateAdded, pft.BranchPlant
		
FROM PFTTestData (NOLOCK) ptd
LEFT JOIN PFTWO (NOLOCK) pft ON pft.PFTWOId = ptd.PFTWOId



GO
/****** Object:  Table [dbo].[SensorItemNums]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SensorItemNums](
	[SensorItemNumId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[SensorId] [uniqueidentifier] NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
 CONSTRAINT [PK_SensorItemNums] PRIMARY KEY CLUSTERED 
(
	[SensorItemNumId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwSensorAssets]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwSensorAssets] AS

Select DISTINCT f.FixedAssetId, pft.SerialNum, pft.ItemNum, f.AssetDescription
from SensorItemNums(NOLOCK) si
INNER JOIN PFTWO (NOLOCK) pft ON pft.ItemNum = si.ItemNum
INNER JOIN FixedAssets (NOLOCK) f on f.SerialNum = pft.SerialNum


GO
/****** Object:  View [dbo].[vwIncidentRMAnalysisInfo]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwIncidentRMAnalysisInfo]
AS
SELECT IncidentID
	, Case IsOpen When 0 Then 'Closed' Else 'Open' End As IncidentStatus
	, FailureDate
	, MaxDoglegSeverity
	, MaxWhirl
	, MaxStickSlip
FROM Incidents WITH(NOLOCK)
WHERE IsDeleted = 0

GO
/****** Object:  View [dbo].[vwJDEWorkOrders]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vwJDEWorkOrders] AS


SELECT 
	JDEWorkOrderId,
	WorkOrderNumber,
	Source,
	Target,
	Method,
	TransactionUserId,
	TransactionId,
	TransactionName,
	EdgeKey,
	EquipmentStatus,
	OrderType,
	OrderSuffix,
	RelatedOrderType,
	RelatedWONumber,
	ParentWONumber,
	TypeWO,
	WorkOrderPriority,
	Description,
	StatusComment,
	Company,
	BusinessUnit,
	Branch,
	WorkOrderStatusCode,
	StatusChangedDate,
	Subsidiary,
	TransactionDate,
	StartDate,
	RequestedDate,
	CompletionDate,
	AssignedToDate,
	AssignedToInspectorDate,
	Reference,
	Reference2,
	EstimatedAmount,
	OriginalDollarsAmount,
	EstimatedHours,
	OriginalHours,
	ActualAmount,
	ActualHours,
	ShortItemNumber,
	SecondItemNumber,
	ThirdItemNumber,
	AssetItemNumber,
	PostingEdit,
	LotNumber,
	LotPotency,
	LotGrade,
	UpdatedDate,
	TimeOfDay,
	ParentNumber,
	WorkOrderCriticality,
	EstimatedDowntimeHours,
	ActualDowntimeHours,
	MeterPosition,
	EstimatedLaborAmount,
	EstimatedMaterialAmount,
	EstimatedOtherAmount,
	ActualLaborAmount,
	ActualMaterialAmount,
	WorkOrderStatus,
	DocumentType,
	so.OptionLabel as DocumentDesc,
	MiscCost,
	ExchangeRate,
	ActaulLaborInUSD,
	ActualMaterialInUSD,
	ActaulMiscCostInUSD,
	MiscCostInUSD,
	DateAdded,
	LastUpdatedDate
FROM JDEWorkOrders (NOLOCK) jwo
LEFT OUTER JOIN SelectOptions (NOLOCK) so ON so.OptionValue = jwo.DocumentType AND  so.SelectName = 'TransferDocumentType'	




GO
/****** Object:  View [dbo].[SelectLists]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create VIEW [dbo].[SelectLists]
AS
SELECT 
  SelectOptionId AS SelectListId, SelectName AS SelectListName
  , OptionValue, OptionLabel AS OptionText, SortOrder AS DisplayOrder
FROM SelectOptions WITH (NOLOCK)


GO
/****** Object:  View [dbo].[vwToolstringTemplateTypes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwToolstringTemplateTypes]
as
Select OptionValue as TemplateTypeId,
	OptionLabel as TemplateType
FROM SelectOptions
WHERE SelectName = 'ToolstringTemplateType'

GO
/****** Object:  Table [dbo].[AuditRequestForms]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditRequestForms](
	[AuditActionId] [int] NOT NULL,
	[RequestFormId] [int] NULL,
	[FromBranchPlant] [varchar](12) NULL,
	[ToBranchPlant] [varchar](12) NULL,
	[CreateDate] [datetime] NULL,
	[RequiredDate] [datetime] NULL,
	[CreatedUserName] [varchar](50) NULL,
	[Notes] [varchar](4000) NULL,
	[ShipmentMethod] [varchar](100) NULL,
	[Customer] [varchar](256) NULL,
	[Project] [varchar](256) NULL,
	[LocalRefNumber] [varchar](256) NULL,
	[Status] [int] NULL,
	[ToolPanel] [varchar](25) NULL,
	[LastEdit] [datetime] NULL,
	[LastEditUserName] [varchar](50) NULL,
	[DateSubmittedForApproval] [datetime] NULL,
	[ApprovalDate] [datetime] NULL,
	[ApprovalUserName] [varchar](100) NULL,
	[LocalApprovalNumber] [varchar](256) NULL,
	[IsComplete] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[IsArchived] [bit] NOT NULL,
	[JobNo] [varchar](255) NULL,
	[WellNo] [varchar](255) NULL,
	[Rig] [varchar](255) NULL,
	[CalledOutBy] [varchar](255) NULL,
	[CallOutDate] [datetime] NULL,
	[HoleSize] [varchar](50) NULL,
	[Temperature1] [varchar](50) NULL,
	[Temperature2] [varchar](50) NULL,
	[Temperature3] [varchar](50) NULL,
	[MWDLWDString] [varchar](255) NULL,
	[ShippedDate] [datetime] NULL,
	[ContactNumber] [varchar](255) NULL,
	[RequestItemGroupId] [int] NULL,
	[RequiredWithIn] [int] NULL,
	[ARL] [varchar](50) NULL,
	[RSTTemperature] [varchar](50) NULL,
	[LastViewDate] [datetime] NULL,
	[LastViewUserName] [varchar](255) NULL,
	[WellName] [varchar](255) NULL,
	[IsMotorised] [bit] NULL,
	[DateRequiredInCustom] [datetime] NULL,
	[IsForecasted] [bit] NULL,
	[NotRequiredBy] [varchar](50) NULL,
	[NotRequiredAt] [datetime] NULL,
	[NotRequiredComments] [varchar](256) NULL,
	[ArchiveDate] [datetime] NULL,
	[ArchiveOn] [datetime] NULL,
	[EstimatedDeliveryDate] [datetime] NULL,
	[CapitalRequiredFor] [varchar](50) NULL,
	[ArchivedUserName] [varchar](256) NULL,
	[UnArchivedUserName] [varchar](256) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwAuditRequestForms]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dbo].[vwAuditRequestForms]
AS
select a.UserId,a.ActionDate, a.ActionDesc, a.AuditActionId,u.UserName,
		u.LastName + ', ' + u.FirstName AS FullName, 
'AR-' + b.ToBranchPlant + '-' + CAST(b.RequestFormId AS varchar) AS RequestNumber, b.RequestFormId, b.FromBranchPlant, b.ToBranchPlant, b.CreateDate, 
                      b.RequiredDate, b.CreatedUserName, b.Notes, b.ShipmentMethod, b.Customer, b.Project, b.LocalRefNumber, b.LocalApprovalNumber, b.Status,
                      b.ToolPanel, b.LastEdit, b.LastEditUserName, b.DateSubmittedForApproval, b.ApprovalDate, b.ApprovalUserName, b.LastViewDate, b.LastViewUserName, 
                      b.IsComplete, b.IsArchived, fl.CompanyName AS FromCompanyName, 
                      tl.CompanyName AS ToCompanyName, rfs.OptionValue as StatusDesc, rfs.OptionLabel as StatusName,
                      b.DateRequiredInCustom, b.IsForecasted, b.NotRequiredBy, b.NotRequiredAt, 
                      b.NotRequiredComments, b.ArchiveDate, b.ArchiveOn, b.HoleSize, b.IsMotorised,b.Temperature1,
                      b.IsActive
from auditactions a WITH(NOLOCK)
join AuditRequestForms b WITH(NOLOCK) on b.AuditActionId = a.AuditActionId
join Users u WITH(NOLOCK) on u.UserId = a.UserId
LEFT JOIN  BranchPlants AS tl WITH(NOLOCK) ON tl.BranchPlant = b.ToBranchPlant 
LEFT JOIN  SelectOptions AS rfs WITH(NOLOCK) ON rfs.SortOrder = b.Status and rfs.SelectName = 'RequestFormStatus'
LEFT JOIN  BranchPlants AS fl WITH(NOLOCK) ON fl.BranchPlant = b.FromBranchPlant
GO
/****** Object:  Table [dbo].[PFTWOSeqFailures]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTWOSeqFailures](
	[PFTWOSeqId] [uniqueidentifier] NOT NULL,
	[PFTFailureCodeId] [int] NOT NULL,
 CONSTRAINT [PK_PFTWOSeqFailures] PRIMARY KEY CLUSTERED 
(
	[PFTWOSeqId] ASC,
	[PFTFailureCodeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTFailureCodes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTFailureCodes](
	[PFTFailureCodeId] [int] IDENTITY(1,1) NOT NULL,
	[FailCode] [varchar](50) NOT NULL,
	[FailDesc] [varchar](255) NULL,
	[BranchPlant] [varchar](12) NULL,
 CONSTRAINT [PK_PFTFailureCodes] PRIMARY KEY CLUSTERED 
(
	[PFTFailureCodeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwPFTWOSeqFailures]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwPFTWOSeqFailures] AS
Select s.PFTWOSeqId, s.PFTFailureCodeId, f.FailCode, f.FailDesc
From PFTWOSeqFailures s WITH(NOLOCK)
left join PFTFailureCodes f WITH(NOLOCK) on s.pftfailurecodeid=f.pftfailurecodeid

GO
/****** Object:  Table [dbo].[CalMeetings]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CalMeetings](
	[MeetingID] [int] IDENTITY(1,1) NOT NULL,
	[MeetingYear] [int] NOT NULL,
	[MeetingMonth] [int] NOT NULL,
	[MeetingDay] [int] NOT NULL,
	[MeetingStartTimeID] [int] NOT NULL,
	[MeetingEndTimeID] [int] NOT NULL,
	[RoomID] [int] NOT NULL,
	[MeetingDescription] [varchar](250) NOT NULL,
	[OrginizerID] [int] NOT NULL,
	[CreatedByID] [int] NOT NULL,
	[CreatedDateTime] [datetime] NULL,
 CONSTRAINT [PK_CalMeetings] PRIMARY KEY CLUSTERED 
(
	[MeetingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CalTimes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CalTimes](
	[TimeID] [int] IDENTITY(1,1) NOT NULL,
	[TimeValue] [varchar](6) NOT NULL,
	[TimeDescription] [varchar](50) NOT NULL,
 CONSTRAINT [PK_CalTimes] PRIMARY KEY CLUSTERED 
(
	[TimeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CalConferenceRooms]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CalConferenceRooms](
	[RoomID] [int] IDENTITY(1,1) NOT NULL,
	[RoomDescription] [varchar](100) NOT NULL,
	[RoomCategory] [varchar](25) NOT NULL,
 CONSTRAINT [PK_CalConferenceRooms] PRIMARY KEY CLUSTERED 
(
	[RoomID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwMeetings]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE VIEW [dbo].[vwMeetings]
AS
SELECT     m.MeetingID, m.MeetingYear, m.MeetingMonth, m.MeetingDay, m.MeetingStartTimeID, st.TimeValue AS MeetingStartTime, st.TimeDescription AS MeetingStartTimeDescription, 
                      m.MeetingEndTimeID, et.TimeValue AS MeetingEndTime, et.TimeDescription AS MeetingEndTimeDescription, m.RoomID, r.RoomDescription, m.MeetingDescription, m.OrginizerID AS OrganizerID, 
                      ou.UserName AS OrganizerUserName, ou.FirstName  AS OrganizerFirstName, ou.LastName AS OrganizerLastName, m.CreatedByID, cbu.UserName AS CreatedByUserName, 
                      cbu.FirstName AS CreatedByFirstName, cbu.LastName AS CreatedByLastName, m.CreatedDateTime
FROM         dbo.CalMeetings (NOLOCK) AS m
INNER JOIN dbo.CalConferenceRooms (NOLOCK) AS r ON m.RoomID = r.RoomID 
INNER JOIN dbo.CalTimes (NOLOCK) AS st ON m.MeetingStartTimeID = st.TimeID 
INNER JOIN dbo.CalTimes (NOLOCK) AS et ON m.MeetingEndTimeID = et.TimeID 
LEFT JOIN dbo.Users (NOLOCK) AS ou ON m.OrginizerID = ou.UserId 
LEFT JOIN dbo.Users (NOLOCK) AS cbu ON m.CreatedByID = cbu.UserId







GO
/****** Object:  Table [dbo].[WorkOrderChargeBranchPlants]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WorkOrderChargeBranchPlants](
	[WorkOrderChargeBranchPlantId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[WorkOrderId] [uniqueidentifier] NOT NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[Percentage] [int] NOT NULL,
 CONSTRAINT [PK_WorkOrderChargeBranchPlants] PRIMARY KEY CLUSTERED 
(
	[WorkOrderChargeBranchPlantId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwWorkOrderChargeBranchPlants]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create View [dbo].[vwWorkOrderChargeBranchPlants] as
select 
WorkOrderChargeBranchPlantId, WorkOrderId, b.BranchPlant, Percentage,
b.CompanyName
from WorkOrderChargeBranchPlants w (NOLOCK)
left join BranchPlants b (NOLOCK) on w.BranchPlant =  b.BranchPlant

GO
/****** Object:  View [dbo].[VW_GetToolSheetTemplates]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=======================================================
--MODIFIED BY: SACHIN MHALUNGEKAR
--MODIFIED ON : 30 APR 2020
--DESCRIPTION: TO GET ToolSheetTemplates
--=======================================================
CREATE VIEW [dbo].[VW_GetToolSheetTemplates]
AS
SELECT 
		tst.TemplateID,
		tst.ParentTemplateID,
		tst.TemplateName,
		--tst.ToolType,
		tst.AddedBy,
		CONVERT(VARCHAR(10),tst.DateAdded,101) DateAdded,
		--tstm.OrderPosition,
		--tstm.PartTypeID [RNItemNum],
		--tstm.TemplateMapID,
		CASE WHEN tst.ParentTemplateID IS NULL THEN 'Master' ELSE 'Child' END AS TemplateType,
		u.WFTUserName,
		tst.GLProductLineId,
		pl.Code [ProductLine],
		tst.BranchPlant
FROM		BuildSheetTemplates (NOLOCK) tst 
--JOIN		ToolSheetTemplatesMap (NOLOCK) tstm ON tst.TemplateID = tstm.TemplateID
LEFT JOIN	Users (NOLOCK) u					ON tst.AddedBy = u.UserId
LEFT JOIN	GLProductLines (NOLOCK) pl			ON pl.Id = tst.GLProductLineId
--where ToolType='NonDS'
GO
/****** Object:  View [dbo].[VW_BuildSheetTemplates]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[VW_BuildSheetTemplates]          

AS                  

SELECT TemplateID,TemplateName,Description, 
	ISNULL(c.FirstName,'') + ', ' + ISNULL(c.LastName,'') CreatedByName, 
	b.DateAdded As CreatedOn,                 
ISNULL(u.FirstName,'') + ', ' + ISNULL(u.LastName,'') UpdatedByName ,b.UpdatedOn
	from BuildSheetTemplates b
	JOIN Users c on b.AddedBy = c.UserId                  
LEFT JOIN Users u on b.UpdatedBy = u.UserId         
where isnull(b.ParentTemplateID,0) = 0
GO
/****** Object:  View [dbo].[vwBranchProductLine]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=========================================================================================
--CREATED BY: UMESH LADE
--CREATED ON :6 Sep 2016
--DESCRIPTION: view to load product line for Branch plant 
--========================================================================================
CREATE VIEW [dbo].[vwBranchProductLine]
AS
	SELECT 
		plbm.BranchPlant as BranchPlant
		,pl.Id as ProductLineId
		,pl.Code as ProductLineCode
		,pl.Description as ProdDescription
	FROM GLProductLineBranchPlantMappings plbm WITH (NOLOCK)
	JOIN BranchPlants bp WITH (NOLOCK) on  bp.BranchPlant= plbm.BranchPlant
	JOIN GLProductLines pl WITH (NOLOCK) on  pl.Id= plbm.GLProductLineId
GO
/****** Object:  View [dbo].[VW_Branchplants_WPTS]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[VW_Branchplants_WPTS] 
AS 
  SELECT 
		 b.BranchPlantId, 
		 b.BranchPlant, 
         companyname [BranchPlantName], 
         gp.Id [ProductLineId],
		 gp.Code [ProductLineCode],
		 gp.Description [ProductLineName],
         County, 
         City, 
         StateProvince, 
         Country, 
         ZipCode, 
         Region, 
         IsRepair, 
         IsGlobalRepair,
		 IsNonLiveLocation,
		 IsOperationsBillableLocation,
         Latitude, 
         Longitude, 
         Active, 
         LastEdit, 
         DateAdded
  FROM   BranchPlants (NOLOCK) b
  LEFT JOIN GLProductLineBranchPlantMappings (NOLOCK) bp on b.BranchPlant = bp.BranchPlant
  LEFT JOIN GLProductLines gp (NOLOCK) ON gp.Id = bp.GLProductLineId
GO
/****** Object:  Table [dbo].[UserBranchPlants]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserBranchPlants](
	[UserBranchPlantId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[UserId] [int] NOT NULL,
	[BranchPlant] [varchar](12) NULL,
	[IsDefault] [bit] NOT NULL,
	[CountryId] [uniqueidentifier] NULL,
	[RegionId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_UserBranchPlants_1] PRIMARY KEY CLUSTERED 
(
	[UserBranchPlantId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwUserBranchPlantLookup]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO



CREATE VIEW [dbo].[vwUserBranchPlantLookup]
AS

SELECT b.BranchPlantId, b.BranchPlant, b.CompanyName, b.Description, b.City, b.Country, Active, ub.UserId

FROM BranchPlants b (NOLOCK)
INNER JOIN UserBranchPlants ub (NOLOCK) ON ub.BranchPlant=b.BranchPlant



GO
/****** Object:  Table [dbo].[ProjectCodes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProjectCodes](
	[ProjectCodeId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Code] [varchar](35) NOT NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[ProjectDesc] [varchar](75) NULL,
	[DateClosed] [datetime] NULL,
	[Priority] [smallint] NULL,
	[WFTProjectCode] [varchar](35) NULL,
	[PLCode] [varchar](3) NULL,
	[ActivityType] [varchar](2) NULL,
	[TranType] [varchar](5) NOT NULL,
 CONSTRAINT [PK_ProjectCodes_1] PRIMARY KEY CLUSTERED 
(
	[ProjectCodeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwProjectCodes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwProjectCodes] as
SELECT 
		ProjectCodeId, Code, 
		pc.BranchPlant, bp.CompanyName as BranchPlantName,
		DateClosed, Priority, 
		WFTProjectCode, PLCode, 
		ActivityType,ProjectDesc
		, TranType
FROM ProjectCodes pc WITH(NOLOCK)
LEFT JOIN BranchPlants bp WITH(NOLOCK) on bp.BranchPlant = pc.BranchPlant
GO
/****** Object:  View [dbo].[vwBranchPlant]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 07 march 2016
--DESCRIPTION: To get branchplant and productline
--==================================================
CREATE VIEW [dbo].[vwBranchPlant]
AS
SELECT
  bp.BranchPlantId,
  bp.BranchPlant,
  bp.Region,
  bp.Country,
  bp.City,
  bp.CompanyName,
  glp.Code AS [ProductLineCode],
  glp.Id AS [ProductLineId],
  bp.BranchPlant + '-' + bp.CompanyName as BranchPlantFullName,
  bp.Active
FROM branchplants(NOLOCK) bp
LEFT JOIN GLProductLineBranchPlantMappings(NOLOCK) gp
  ON bp.BranchPlant = gp.BranchPlant
LEFT JOIN GLProductLines(NOLOCK) glp
  ON glp.Id = gp.GLProductLineId
GO
/****** Object:  View [dbo].[vwCalibrations]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwCalibrations]
AS
SELECT     Calibrations.CalibId, Calibrations.CalibType, Calibrations.AssetNumber, Calibrations.AssetType, Calibrations.Manufacturer, Calibrations.Model, 
			Calibrations.SerialNumber, Calibrations.Description, Calibrations.LastCalDate, Calibrations.CalInterval, Calibrations.Department, Calibrations.Company, 
			Calibrations.Owner, Calibrations.DateAdded, Calibrations.InServiceDate, Calibrations.Status, Calibrations.Comments, 
			Calibrations.UserIdAdded, Calibrations.Location, bp.CompanyName as LocationName,
			Calibrations.StandardCalibratedAgainst, Calibrations.AcceptanceCriteria,
			Calibrations.ConditionReceived, 
			ISNULL(Calibrations.IDLH,'0') as IDLH, (CASE WHEN ISNULL(Calibrations.IDLH,'0') = 0 THEN 'No' ELSE 'Yes' END) as IDLHDesc, 
			ISNULL(Calibrations.ReferenceOnlyEquipment,'0') as ReferenceOnlyEquipment, (CASE WHEN ISNULL(Calibrations.ReferenceOnlyEquipment,'0') = 0 THEN 'No' ELSE 'Yes' END) as ReferenceOnlyEquipmentDesc, 
			Calibrations.CalibrationCoordinator, Calibrations.Originator, Calibrations.IntervalType,
                      (CASE 
							WHEN Calibrations.IntervalType = 'Days' THEN DATEADD(d, ISNULL(Calibrations.CalInterval,0), Calibrations.LastCalDate) 
							WHEN Calibrations.IntervalType = 'Weeks' THEN DATEADD(wk, ISNULL(Calibrations.CalInterval,0), Calibrations.LastCalDate)
							WHEN Calibrations.IntervalType = 'Years' THEN DATEADD(yy, ISNULL(Calibrations.CalInterval,0), Calibrations.LastCalDate)
							WHEN Calibrations.IntervalType = 'Months' THEN DATEADD(m, ISNULL(Calibrations.CalInterval,0), Calibrations.LastCalDate)
						 END) as NextCalDate
FROM Calibrations WITH(NOLOCK)
LEFT OUTER JOIN BranchPlants bp WITH(NOLOCK) on Calibrations.Location = bp.BranchPlant



GO
/****** Object:  Table [dbo].[AuditCalibrations]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditCalibrations](
	[AuditActionId] [int] NOT NULL,
	[CalibId] [int] NOT NULL,
	[CalibType] [varchar](50) NULL,
	[AssetNumber] [varchar](25) NULL,
	[AssetType] [varchar](25) NULL,
	[Manufacturer] [varchar](50) NULL,
	[Model] [varchar](25) NULL,
	[SerialNumber] [varchar](25) NULL,
	[Description] [varchar](255) NULL,
	[LastCalDate] [datetime] NULL,
	[CalInterval] [int] NULL,
	[Company] [varchar](50) NULL,
	[Department] [varchar](25) NULL,
	[Owner] [varchar](25) NULL,
	[InServiceDate] [datetime] NULL,
	[Status] [varchar](25) NULL,
	[Comments] [varchar](4000) NULL,
	[UserIdAdded] [int] NULL,
	[DateAdded] [datetime] NULL,
	[Location] [varchar](50) NULL,
	[StandardCalibratedAgainst] [varchar](100) NULL,
	[AcceptanceCriteria] [varchar](50) NULL,
	[ConditionReceived] [varchar](50) NULL,
	[IDLH] [bit] NULL,
	[ReferenceOnlyEquipment] [bit] NULL,
	[CalibrationCoordinator] [varchar](50) NULL,
	[Originator] [varchar](50) NULL,
	[IntervalType] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwAuditCalibrations]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwAuditCalibrations]
AS
SELECT     ac.AuditActionId, ac.CalibId, ac.CalibType, ac.AssetNumber, ac.AssetType, ac.Manufacturer, ac.Model, 
			ac.SerialNumber, ac.Description, ac.LastCalDate, ac.CalInterval, ac.Company, 
			ac.Department, ac.Owner, ac.InServiceDate, ac.Status, ac.Comments, ac.UserIdAdded, ac.DateAdded, ac.Location, 
			bp.CompanyName as LocationName, 
			ac.StandardCalibratedAgainst, 
                      ac.AcceptanceCriteria, ac.ConditionReceived, ac.IDLH, ac.ReferenceOnlyEquipment, ac.CalibrationCoordinator, ac.Originator, ac.IntervalType, a.ActionDate, 
                      u.UserName, u.UserId
FROM AuditCalibrations ac WITH(NOLOCK)
JOIN AuditActions a WITH(NOLOCK) ON a.AuditActionId = ac.AuditActionId 
LEFT OUTER JOIN Users u WITH(NOLOCK) ON u.UserId = a.UserId
LEFT OUTER JOIN BranchPlants bp WITH(NOLOCK) on ac.Location = bp.BranchPlant


GO
/****** Object:  Table [dbo].[Vendors]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Vendors](
	[VendorId] [int] IDENTITY(1,1) NOT NULL,
	[VendorCode] [varchar](15) NULL,
	[VendorName] [varchar](50) NOT NULL,
	[VendorAddr1] [varchar](50) NULL,
	[VendorAddr2] [varchar](50) NULL,
	[VendorAddr3] [varchar](50) NULL,
	[VendorAddr4] [varchar](50) NULL,
	[VendorAttention] [varchar](50) NULL,
	[VendorCity] [varchar](50) NULL,
	[VendorState] [varchar](3) NULL,
	[VendorCounty] [varchar](50) NULL,
	[VendorCountry] [varchar](25) NULL,
	[VendorZip] [varchar](15) NULL,
	[VendorPhone] [varchar](25) NULL,
	[VendorFax] [varchar](25) NULL,
	[Active] [bit] NOT NULL,
	[BranchPlant] [varchar](25) NULL,
	[JDENumber] [varchar](100) NULL,
	[Reference] [varchar](100) NULL,
	[KeepRec] [tinyint] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
 CONSTRAINT [PK_Vendors] PRIMARY KEY CLUSTERED 
(
	[VendorId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwVendorSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwVendorSearch]
AS

SELECT v.VendorId, v.VendorName, v.VendorCode, v.BranchPlant, v.JDENumber, v.Reference, v.Active,
		bp.CompanyName

FROM Vendors (NOLOCK) v
LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = v.BranchPlant



GO
/****** Object:  View [dbo].[vwUserBranchPlants]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwUserBranchPlants]
AS

SELECT 
  ubp.UserBranchPlantId, ubp.UserId, ubp.BranchPlant, ubp.IsDefault, ubp.CountryId, ubp.RegionId
  , u.UserName, u.Email
  , bp.CompanyName
  , bp.IsNonLiveLocation
FROM UserBranchPlants ubp WITH (NOLOCK)
JOIN Users u WITH (NOLOCK) on u.UserId = ubp.UserId
JOIN BranchPlants bp WITH (NOLOCK) on bp.BranchPlant = ubp.BranchPlant



GO
/****** Object:  Table [dbo].[CustomsInvoiceConfigs]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CustomsInvoiceConfigs](
	[CustomsInvoiceConfigId] [uniqueidentifier] NOT NULL,
	[ToBranchPlant] [varchar](12) NOT NULL,
	[DefaultAddressId] [uniqueidentifier] NULL,
	[TitleText] [varchar](100) NULL,
	[TotalValueText] [varchar](100) NULL,
	[ShipmentMethod] [varchar](25) NULL,
	[TaxIdNumber] [varchar](25) NULL,
	[ShowAdditionalTotals] [bit] NOT NULL,
	[ShipperSignatureTitle] [varchar](128) NULL,
	[ShowAdditionalText] [bit] NOT NULL,
	[AdditionalText] [varchar](4000) NULL,
	[AssetShipmentTitleText] [varchar](100) NULL,
	[AssetShipmentAdditionalText] [varchar](4000) NULL,
	[ShowRepairCost] [bit] NOT NULL,
	[DisclaimerText] [varchar](4000) NULL,
	[EUNumber] [varchar](50) NULL,
	[VATNumber] [varchar](50) NULL,
	[BuyerText] [varchar](4000) NULL,
	[SellerText] [varchar](4000) NULL,
 CONSTRAINT [PK_CustomsInvoiceConfig] PRIMARY KEY CLUSTERED 
(
	[CustomsInvoiceConfigId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwCIConfigBranchPlant]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dbo].[vwCIConfigBranchPlant] as
select b.BranchPlant, b.CompanyName from CustomsInvoiceConfigs a WITH(NOLOCK)
join BranchPlants b WITH(NOLOCK) on a.ToBranchPlant = b.BranchPlant


GO
/****** Object:  View [dbo].[vwCustomsInvoiceConfigBranchPlants]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwCustomsInvoiceConfigBranchPlants] AS

SELECT DISTINCT b.BranchPlantId, b.BranchPlant, b.CompanyName, b.Country
FROM CustomsInvoiceConfigs c
JOIN BranchPlants b on c.ToBranchPlant = b.BranchPlant


GO
/****** Object:  Table [dbo].[JobCommentCodes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobCommentCodes](
	[JobCommentCodeID] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](4) NOT NULL,
	[Category] [varchar](100) NOT NULL,
	[Comment] [varchar](200) NOT NULL,
	[Display] [tinyint] NOT NULL,
	[OrderPosition] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[JobCommentCodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JobAudit]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobAudit](
	[JobAuditID] [uniqueidentifier] NOT NULL,
	[JobID] [uniqueidentifier] NULL,
	[CoreImportID] [uniqueidentifier] NULL,
	[CommentType] [varchar](20) NOT NULL,
	[Comment] [varchar](2000) NULL,
	[Code] [varchar](4) NULL,
	[CreateUserID] [int] NULL,
	[CreateDate] [smalldatetime] NULL,
	[DeleteUserID] [int] NULL,
	[DeleteDate] [smalldatetime] NULL,
	[IsDeleted] [tinyint] NOT NULL,
 CONSTRAINT [PK__JobAudit__4789D5E6] PRIMARY KEY CLUSTERED 
(
	[JobAuditID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwJobAudit]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwJobAudit]
AS
SELECT
	ja.JobAuditID,
	ja.JobID,
	Case ja.CommentType 
		When 'AUDIT' Then 1
		When 'STATUS' Then 2
		When 'IMPORT' Then 3
		Else 4
	End As Source,
	Case 
		When ja.IsDeleted = 1 Then ja.CommentType + ' (Archived)'
		Else ja.CommentType 
	End As CommentType,
	ja.Code,
	Case 
		When ja.CoreImportID is null Then jcc.Category + ': ' + jcc.Comment
		Else ci.[FileName]
	End As Category,
	ja.Comment,
	Case ja.IsDeleted
		When 0 Then (Select u.FirstName + ' ' + u.LastName From Users u WITH(NOLOCK) where u.UserID = ja.CreateUserID)
		Else (Select u.FirstName + ' ' + u.LastName From Users u WITH(NOLOCK) where u.UserID = ja.DeleteUserID)
	End As AuditUser,
	Case ja.IsDeleted
		When 0 Then ja.CreateDate
		Else ja.DeleteDate
	End As AuditDate,
	ja.IsDeleted
FROM JobAudit ja WITH(NOLOCK)
LEFT JOIN JobCommentCodes jcc WITH(NOLOCK) ON ja.Code = jcc.Code
LEFT JOIN CoreImport ci WITH(NOLOCK) ON ja.CoreImportID = ci.CoreImportID

GO
/****** Object:  Table [dbo].[TimeSheet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TimeSheet](
	[TimeSheetId] [uniqueidentifier] NOT NULL,
	[ProjectId] [varchar](25) NOT NULL,
	[Employee] [varchar](25) NULL,
	[DateWorked] [datetime] NULL,
	[DatePosted] [datetime] NULL,
	[RegularHours] [decimal](18, 2) NULL,
	[OvertimeHours] [decimal](18, 2) NULL,
	[TotalHours] [decimal](18, 2) NULL,
	[RegularPayRate] [money] NULL,
	[OvertimePayRate] [money] NULL,
	[TotalAmount] [money] NULL,
	[UserIdAdded] [int] NULL,
	[ProjectDesc] [varchar](150) NULL,
	[KeepRec] [tinyint] NOT NULL,
	[DateAdded] [datetime] NULL,
	[IsWorkOrder] [varchar](1) NULL,
	[Comment] [varchar](150) NULL,
	[WorkOrderNum] [varchar](15) NULL,
	[CostCenter] [varchar](50) NULL,
	[TimeSheetExportId] [int] IDENTITY(1,1) NOT NULL,
	[LastUpdatedBy] [int] NULL,
	[LastUpdateDate] [datetime] NULL,
 CONSTRAINT [PK_TimeSheet] PRIMARY KEY CLUSTERED 
(
	[TimeSheetId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwTimeSheetHourlyReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwTimeSheetHourlyReport] as
select 
  Employee, DateWorked
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId not in ('AD006', 'AD007', 'AD008', 'AD010', 'AD011', 'AD018')), 0) as RegHours
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD006'), 0) as Vacation
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD007'), 0) as JuryDuty
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD008'), 0) as Sick
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD010'), 0) as Holiday
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD011'), 0) as Bereavement
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD018'), 0) as BadWeatherDay
  , sum(TotalHours) as TotalHours
from TimeSheet t WITH(NOLOCK)
join Users u WITH(NOLOCK) on t.Employee = u.UserName
join UserProfile up WITH(NOLOCK) on up.UserId = u.UserId
where up.EmployeeType = 'Hourly'
group by Employee, DateWorked
--order by Employee, DateWorked

GO
/****** Object:  View [dbo].[vwTimeSheetHoursReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwTimeSheetHoursReport]
AS
Select
  ROW_NUMBER() OVER(ORDER BY Employee ASC, DateWorked DESC) AS ID,
  Employee, up.EmployeeType, DateWorked
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId not in ('AD006', 'AD007', 'AD008', 'AD010', 'AD011', 'AD018')), 0) as RegHours
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD006'), 0) as Vacation
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD007'), 0) as JuryDuty
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD008'), 0) as Sick
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD010'), 0) as Holiday
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD011'), 0) as Bereavement
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD018'), 0) as BadWeatherDay
  , sum(TotalHours) as TotalHours
From TimeSheet t WITH(NOLOCK)
INNER JOIN Users u WITH(NOLOCK) on t.Employee = u.UserName
INNER JOIN UserProfile up WITH(NOLOCK) on up.UserId = u.UserId
GROUP by Employee, up.EmployeeType, DateWorked

GO
/****** Object:  Table [dbo].[MCSubscribers]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MCSubscribers](
	[MCSubscriberId] [uniqueidentifier] NOT NULL,
	[RefName] [varchar](25) NOT NULL,
	[RefId] [uniqueidentifier] NOT NULL,
	[UserId] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[UserIdAdded] [int] NOT NULL,
 CONSTRAINT [PK_MCSubscribers] PRIMARY KEY CLUSTERED 
(
	[MCSubscriberId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwMCSubscribers]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwMCSubscribers]
AS
SELECT mcs.MCSubscriberId, mcs.RefName, mcs.RefId, mcs.UserId, mcs.DateAdded, mcs.UserIdAdded,
	s.FirstName + ' ' + s.LastName AS SubscriberFullName, s.Email,
	u.FirstName + ' ' + u.LastName AS FullNameAdded
FROM MCSubscribers mcs (NOLOCK)
LEFT JOIN Users s (NOLOCK) ON mcs.UserId = s.UserId
LEFT JOIN Users u (NOLOCK) ON mcs.UserIdAdded = u.UserId
GO
/****** Object:  View [dbo].[vwTimeSheetSalariedReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwTimeSheetSalariedReport] as
select 
  Employee, DateWorked
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId not in ('AD006', 'AD007', 'AD008', 'AD010', 'AD011', 'AD018')), 0) as RegHours
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD006'), 0) as Vacation
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD007'), 0) as JuryDuty
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD008'), 0) as Sick
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD010'), 0) as Holiday
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD011'), 0) as Bereavement
  , IsNull((select sum(TotalHours) from TimeSheet t1 WITH(NOLOCK)
     where t1.Employee = t.Employee and t1.DateWorked = t.DateWorked
       and t1.ProjectId = 'AD018'), 0) as BadWeatherDay
  , sum(TotalHours) as TotalHours
from TimeSheet t WITH(NOLOCK)
join Users u WITH(NOLOCK) on t.Employee = u.UserName
join UserProfile up WITH(NOLOCK) on up.UserId = u.UserId
where up.EmployeeType = 'Salaried'
group by Employee, DateWorked
--order by Employee, DateWorked

GO
/****** Object:  Table [dbo].[RequestAdmins]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RequestAdmins](
	[RequestAdminId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[RequestType] [varchar](25) NOT NULL,
	[AdminUserId] [int] NOT NULL,
	[BranchPlant] [varchar](12) NULL,
	[IsDefault] [bit] NOT NULL,
	[SendEmail] [bit] NOT NULL,
	[DeptCode] [varchar](10) NULL,
	[ProductLine] [varchar](10) NULL,
 CONSTRAINT [PK_RequestAdmins] PRIMARY KEY CLUSTERED 
(
	[RequestAdminId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwRequestAdmins]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vwRequestAdmins]
AS
SELECT DISTINCT    
		dbo.RequestAdmins.RequestType, dbo.RequestAdmins.AdminUserId, 
		dbo.RequestAdmins.BranchPlant, dbo.RequestAdmins.SendEmail, 
		dbo.Users.UserName, 
		dbo.Users.Email,dbo.RequestAdmins.IsDefault,
		dbo.RequestAdmins.DeptCode,dbo.RequestAdmins.ProductLine
		,dbo.RequestAdmins.RequestAdminId
		,dbo.Users.FirstName,dbo.Users.LastName
FROM         dbo.RequestAdmins WITH(NOLOCK) LEFT OUTER JOIN
                      dbo.Users WITH(NOLOCK) ON dbo.RequestAdmins.AdminUserId = dbo.Users.UserId




GO
/****** Object:  View [dbo].[AuditActionSummary]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[AuditActionSummary]
AS
SELECT     AA.AuditId, AA.AuditTypeId, AT.AuditDesc,  AA.UserId, U.UserName, U.FirstName, U.LastName, AA.AuditTable, AA.ActionDesc, AA.ActionDate, AA.RemoteAddr, 
                      AA.RemoteHost
FROM         dbo.AuditActions AS AA WITH(NOLOCK) INNER JOIN
                      dbo.AuditTypes AS AT WITH(NOLOCK) ON AA.AuditTypeId = AT.AuditTypeId LEFT JOIN
                      dbo.Users AS U WITH(NOLOCK) ON AA.UserId = U.UserId

GO
/****** Object:  Table [dbo].[DiscussionBoard]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DiscussionBoard](
	[DiscussionBoardId] [int] IDENTITY(1,1) NOT NULL,
	[DisplayText] [varchar](100) NULL,
	[DiscussionType] [varchar](50) NULL,
	[RefId] [varchar](255) NULL,
	[UserIdAdded] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
 CONSTRAINT [PK_DiscussionBoard] PRIMARY KEY CLUSTERED 
(
	[DiscussionBoardId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DiscussionBoardTopics]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DiscussionBoardTopics](
	[DiscussionBoardTopicId] [int] IDENTITY(1,1) NOT NULL,
	[DiscussionBoardId] [int] NOT NULL,
	[TopicName] [varchar](100) NULL,
	[TopicText] [text] NULL,
	[ParentDiscussionBoardTopicId] [int] NULL,
	[UserIdAdded] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
 CONSTRAINT [PK_DiscussionBoardTopics] PRIMARY KEY CLUSTERED 
(
	[DiscussionBoardTopicId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwDiscussionBoardTopics]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwDiscussionBoardTopics] AS

Select dbt.DiscussionBoardTopicId
		, dbt.DiscussionBoardId
		, dbt.TopicName
		, dbt.TopicText
		, dbt.ParentDiscussionBoardTopicId
		, dbt.UserIdAdded
		, u.UserName
		, u.FirstName + ' ' + u.LastName AS FullName
		, dbt.DateAdded
		, db.DisplayText
		, db.DiscussionType
		, db.RefId
		, (CASE WHEN ParentDiscussionBoardTopicId IS NOT NULL 
				THEN NULL 
				ELSE (Select COUNT(*) from  DiscussionBoardTopics(NOLOCK) dbt2 Where dbt2.ParentDiscussionBoardTopicId = dbt.DiscussionBoardTopicId)
			END) as TotalReply
		, (CASE WHEN ParentDiscussionBoardTopicId IS NOT NULL 
				THEN NULL 
				ELSE (Select Top 1 u2.UserName from  DiscussionBoardTopics(NOLOCK) dbt2 LEFT JOIN Users(NOLOCK) u2 ON u2.UserId = dbt2.UserIdAdded Where dbt2.ParentDiscussionBoardTopicId = dbt.DiscussionBoardTopicId ORDER by dbt2.DateAdded DESC)
			END) as LastReplyUserName
		, (Select Top 1 DateAdded from DiscussionBoardTopics(NOLOCK) dbt2 Where UserIdAdded = dbt.UserIdAdded ORDER by DateAdded DESC) as UserLastDateAdded
		, (Select COUNT(*) from DiscussionBoardTopics(NOLOCK) dbt2 Where UserIdAdded = dbt.UserIdAdded) as UserTotalPost
from DiscussionBoardTopics(NOLOCK) dbt
LEFT JOIN DiscussionBoard(NOLOCK) db ON db.DiscussionBoardId = dbt.DiscussionBoardId
LEFT JOIN Users(NOLOCK) u ON u.UserId = dbt.UserIdAdded
GO
/****** Object:  Table [dbo].[DocItemUserPermissions]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DocItemUserPermissions](
	[DocItemUserPermissionId] [int] IDENTITY(1,1) NOT NULL,
	[DocItemId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[HasWriteAccess] [bit] NOT NULL,
	[HasDeleteAccess] [bit] NOT NULL,
	[HasFullAccess] [bit] NOT NULL,
 CONSTRAINT [PK_DocItemUserPermissions] PRIMARY KEY CLUSTERED 
(
	[DocItemUserPermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwDocItemUserPermissions]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwDocItemUserPermissions]
AS

SELECT diup.DocItemUserPermissionId, diup.DocItemId, diup.UserId, diup.HasWriteAccess, diup.HasDeleteAccess, 
	diup.HasFullAccess, u.UserName, u.FirstName + ' ' + u.LastName AS FullName

FROM DocItemUserPermissions (NOLOCK) diup
LEFT JOIN Users (NOLOCK) u ON u.UserId=diup.UserId


GO
/****** Object:  Table [dbo].[MCUserGroups]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MCUserGroups](
	[UserGroupId] [uniqueidentifier] NOT NULL,
	[GroupId] [uniqueidentifier] NOT NULL,
	[UserId] [int] NULL,
	[RoleId] [int] NULL,
 CONSTRAINT [PK_EmailGroups] PRIMARY KEY CLUSTERED 
(
	[UserGroupId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwMCUserGroups]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwMCUserGroups]
AS

SELECT ug.UserGroupId, ug.GroupId, u.UserId, u.UserName, u.FirstName, u.LastName, u.Email, u.Active
FROM MCUserGroups ug (NOLOCK)
INNER JOIN Users u (NOLOCK) ON u.UserId = ug.UserId 
--WHERE u.Active=1

GO
/****** Object:  Table [dbo].[RequestItemGroups]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RequestItemGroups](
	[RequestItemGroupId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](250) NULL,
	[ToolPanel] [varchar](30) NULL,
	[Description] [varchar](max) NULL,
	[ParentRequestItemGroupId] [int] NULL,
	[ItemNum] [varchar](30) NULL,
	[DisplayOrder] [int] NULL,
	[DateLastEdit] [datetime] NOT NULL,
	[UserIdLastEdit] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[UserIdAdded] [int] NOT NULL,
 CONSTRAINT [PK_RequestItemGroups] PRIMARY KEY CLUSTERED 
(
	[RequestItemGroupId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwRequestItemGroups]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwRequestItemGroups] AS
SELECT  
		RequestItemGroupId
		, rig.Name
		, rig.ToolPanel as GroupToolPanel
		, rig.Description
		, rig.ParentRequestItemGroupId
		, rig.ItemNum
		, rig.DisplayOrder
		, rig.DateLastEdit
		, rig.UserIdLastEdit
		, rig.DateAdded
		, rig.UserIdAdded
FROM RequestItemGroups (NOLOCK) rig
WHERE rig.ParentRequestItemGroupId IS NULL




GO
/****** Object:  View [dbo].[vwVendorReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwVendorReport]
AS
    SELECT NEWID() as ID, ncr.Vendor, r.RequestStatus
      , SUM(CASE WHEN r.OpenClosed = 'H' THEN 1 ELSE 0 END) HoldCount
      , SUM(CASE WHEN r.OpenClosed = 'O' THEN 1 ELSE 0 END) OpenCount
      , SUM(CASE WHEN r.OpenClosed = 'C' THEN 1 ELSE 0 END) CloseCount
      , SUM(CASE WHEN r.OpenClosed = 'I' THEN 1 ELSE 0 END) InProgressCount

FROM Requests (NOLOCK) r
INNER JOIN NCRRequests (NOLOCK) ncr ON r.RequestId = ncr.RequestId AND r.RequestType='NCR'

GROUP BY ncr.Vendor, r.RequestStatus




GO
/****** Object:  View [dbo].[vwAssetUtilizationReportDaily]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--===============================================================
--CREATED BY : SUYEB MOHAMMAD/YogeshMane
--CREATED ON : 16 March 2017
--DESRCIPTION: To get daily utilization details
--===============================================================
CREATE VIEW [dbo].[vwAssetUtilizationReportDaily]
AS
	SELECT [AU].*, [GL].[GLProductLineId] AS [ProductLineId], [GLP].[Code] AS [ProductLineCode]
	FROM AesWarehouse.dbo.AssetUtilizationDaily [AU]
	LEFT JOIN GLCodes [GL] on [GL].[GLCode] = [AU].[GLCode]
	LEFT JOIN GLProductLines [GLP] ON [GLP].[Id] = [GL].[GLProductLineId]
GO
/****** Object:  View [dbo].[vwGLProductLinesWithAll]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE View [dbo].[vwGLProductLinesWithAll]
AS

	SELECT 0 [SortColumn], '*' [Id], 'All' [Code], 'All' [Description]
	UNION
	SELECT ROW_NUMBER() OVER(ORDER BY Code) [SortIndex], CONVERT(varchar(max), id), Code, Description from GLProductLines
GO
/****** Object:  View [dbo].[vwTimeSheetSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwTimeSheetSearch]
AS
SELECT      ts.TimeSheetId, 
			ts.ProjectId, 
			ts.Employee, 
			ts.DateWorked, 
			ts.DatePosted, 
			ts.RegularHours, 
			ts.OvertimeHours, 
			ts.TotalHours, 
			ts.RegularPayRate, 
			ts.OvertimePayRate, 
			ts.TotalAmount, 
			ts.UserIdAdded, 
			ts.ProjectDesc, 
			ts.KeepRec, 
			ts.DateAdded, 
			ts.IsWorkOrder, 
			ts.Comment, 
			ts.WorkOrderNum, 
			ts.CostCenter,
			u.DepartmentId,
			u.DepartmentName
			, u.JobPosition
			, up.SAPPersonnelNo
FROM dbo.TimeSheet ts WITH(NOLOCK)
LEFT OUTER JOIN AppUserList u WITH(NOLOCK) ON u.UserName = ts.Employee
LEFT OUTER JOIN UserProfile up WITH(NOLOCK) on up.UserId = u.UserId

GO
/****** Object:  View [dbo].[vwTimeSheetLastFourWeeksReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwTimeSheetLastFourWeeksReport]
AS
SELECT     TOP (100) PERCENT TimeSheetId, ProjectId, Employee, DateWorked, RegularHours, OvertimeHours, TotalHours, DateAdded, ProjectDesc, CONVERT(VARCHAR, 
                      DATEPART(WK, DateWorked)) + '-' + CONVERT(VARCHAR, YEAR(DateWorked)) AS WeekNumber, Comment, WorkOrderNum
FROM         dbo.TimeSheet WITH(NOLOCK)
ORDER BY DateWorked

GO
/****** Object:  View [dbo].[vwTimeSheetWeeksReport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwTimeSheetWeeksReport]
AS
SELECT  TimeSheetId, 
		ProjectId, 
		Employee, 
		DateWorked, 
		RegularHours, 
		OvertimeHours, 
		TotalHours, 
		DateAdded, 
		ProjectDesc, 
		CONVERT(VARCHAR, DATEPART(WK, DateWorked)) + '-' + CONVERT(VARCHAR, YEAR(DateWorked)) AS WeekNumber, 
		Comment, 
		WorkOrderNum
From TimeSheet WITH(NOLOCK)

GO
/****** Object:  View [dbo].[GroupMember]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[GroupMember] As
select RoleId as ParentGroupId, 1000000 + UserId as GroupId
From UserRoles WITH(NOLOCK)

GO
/****** Object:  View [dbo].[vwWorkFlowPortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create View [dbo].[vwWorkFlowPortlet] as
SELECT w.WorkflowId
      ,w.ECNNumber
      ,w.ECNProcessId
      ,w.DateAdded
      ,w.Status
       , case Status when 'X' then 'Closed' else 'In Progress' end as StatusText
       ,w.TechnicalInfo
FROM Workflow w (NOLOCK)
GO
/****** Object:  View [dbo].[vwDocItemTree]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwDocItemTree]
AS
SELECT     di.DocItemId, di.DocItemTitle, di.DocItemDesc, di.DocItemFilePath, di.DocItemFileName, di.ParentDocItemId, 
			di.DocItemType, di.DateAdded, di.DocItemFileSize, di.DocItemDate, di.OriginalFileName, di.UploadedBy, 
			di.IsControlled, di.Uncontrolled, di.IsDeleted,
			(SELECT TOP 1 DocItemId FROM DocItems WITH(NOLOCK) WHERE ParentDocItemId = di.DocItemId AND DocItemType = 0) AS ChildDocItemId					
			, dbo.FindDocumentPath(DocItemId) AS DocPath
FROM        DocItems di (NOLOCK)



GO
/****** Object:  View [dbo].[vwDocItemAttach]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE VIEW [dbo].[vwDocItemAttach]
AS

SELECT  
  a.DocItemAttachId, a.KeyId , a.DocItemId, a.DocItemAttachType, a.SubKeyId, a.SubKeyName, 
  b.DocItemFilePath, b.DocItemType, b.DocItemTitle, b.DocItemFileName, b.DocItemFileSize, 
  b.OriginalFileName, b.DocItemDate, b.DocItemDesc, a.GuidKeyId,b.DocumentCategory,b.WCCDocId,B.IsDeleted
FROM  DocItemAttach a WITH(NOLOCK)
LEFT JOIN DocItems b WITH(NOLOCK) On a.DocItemId = b.DocItemId


GO
/****** Object:  View [dbo].[vwTechAlertsPortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE View [dbo].[vwTechAlertsPortlet] as
SELECT DocItemId, 
	DocItemTitle, 
	DocItemFilePath, 
	DocItemFileName, 
	DateAdded, 
	Convert(varchar,Convert(numeric,round(ISNULL(DocItemFileSize,0) / 1024,0))) + ' KB' as DocItemFileSize,
	ParentDocItemId,
	DocItemType 
FROM DocItems WITH(NOLOCK) 
WHERE DocItemType=1



GO
/****** Object:  View [dbo].[vwToolPanels]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwToolPanels] as

SELECT DISTINCT ToolPanel FROM ToolCodePartTypes (NOLOCK)


GO
/****** Object:  View [dbo].[vwToolCodes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwToolCodes] as

SELECT DISTINCT ToolCode, ToolPanel FROM ToolCodePartTypes (NOLOCK)




GO
/****** Object:  View [dbo].[vwVendorsNCRSearch]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE View [dbo].[vwVendorsNCRSearch]
As
SELECT DISTINCT Vendor FROM NCRRequests WITH (NOLOCK) WHERE Vendor IS NOT NULL AND Vendor<>''



GO
/****** Object:  Table [dbo].[DiscussionBoardTopicLog]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DiscussionBoardTopicLog](
	[DiscussionBoardTopicLogId] [int] IDENTITY(1,1) NOT NULL,
	[DiscussionBoardTopicId] [int] NOT NULL,
	[ReadBy] [varchar](50) NOT NULL,
	[ReadAt] [datetime] NOT NULL,
 CONSTRAINT [PK_DiscussionBoardTopicLog] PRIMARY KEY CLUSTERED 
(
	[DiscussionBoardTopicLogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwDiscussionBoardTopicLog]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwDiscussionBoardTopicLog] AS

Select dbtl.DiscussionBoardTopicLogId
		, dbtl.DiscussionBoardTopicId
		, dbt.DiscussionBoardId
		, dbtl.ReadBy
		, dbtl.ReadAt
from DiscussionBoardTopicLog(NOLOCK) dbtl
LEFT JOIN DiscussionBoardTopics(NOLOCK) dbt on dbt.DiscussionBoardTopicId = dbtl.DiscussionBoardTopicId
GO
/****** Object:  View [dbo].[vwPFTFailureCodes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO

CREATE VIEW [dbo].[vwPFTFailureCodes]
AS

SELECT a.PFTFailureCodeId, a.FailCode, a.FailDesc, a.BranchPlant FROM dbo.PFTFailureCodes a (NOLOCK)


GO
/****** Object:  View [dbo].[vwSensors]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vwSensors]
AS
SELECT SensorId
      ,SensorName
      ,ProductLine
      ,IsNotDisplay
FROM Sensors WITH(NOLOCK)

GO
/****** Object:  View [dbo].[vwDeliveryTickets_JDEWorkOrders]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwDeliveryTickets_JDEWorkOrders] AS

SELECT 
	j.JDEWorkOrderId AS [JDEWorkOrderId],
	j.WorkOrderNumber AS [JDEWONumber],	
	j.OrderType AS [WorkOrderType],
	j.WorkOrderStatusCode AS [WorkOrderStatus],
	j.DateAdded AS [DateCreated],
	j.CompletionDate AS [DateClosed],
	'$'+CONVERT(VARCHAR, CAST(j.actaullaborinusd AS MONEY),1) [Labor], 
	'$'+CONVERT(VARCHAR, CAST(j.ActualMaterialInUSD AS MONEY),1) [Material],
	'$'+CONVERT(VARCHAR, CAST(j.MiscCostInUSD  AS MONEY),1) [Misc],
	'$'+CONVERT(VARCHAR, CAST(j.actaulmisccostinusd AS MONEY),1) [TotalCost],
	 j.Description  AS [Description],  
	 j.BusinessUnit AS [BusinessUnit],  
	 j.ParentWONumber AS [ParentWONumber],  
	 j.TypeWO AS [TypeWO],
	 j.AssetItemNumber As [AssetNumber],
	 j.DispatchNumber As [DispatchNumber]
FROM JDEWorkOrders j
GO
/****** Object:  View [dbo].[vwToolStingComponentInfoToolCodes]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwToolStingComponentInfoToolCodes]
AS
(
	SELECT Distinct ToolCode from ToolStringComponentInfo 
	Where ToolCode is not null or ToolCode <> ''  
)
GO
/****** Object:  View [dbo].[vwAssetUtilizationExport]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwAssetUtilizationExport]
AS
SELECT * FROM dbo.vwAssetUtilizationGlobalExport
UNION ALL
SELECT * FROM dbo.vwAssetUtilizationRegionExport
UNION ALL
SELECT * FROM dbo.vwAssetUtilizationBranchPlantExport
GO
/****** Object:  Table [dbo].[DailyHydraulics]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DailyHydraulics](
	[DailyHydraulicID] [uniqueidentifier] NOT NULL,
	[DailyID] [uniqueidentifier] NOT NULL,
	[DeltaPTotal] [float] NULL,
	[DeltaPTotalUOM] [varchar](10) NULL,
	[HydrostaticPressure] [float] NULL,
	[HydrostaticPressureUOM] [varchar](10) NULL,
	[MaxOperPressure] [float] NULL,
	[MaxOperPressureUOM] [varchar](10) NULL,
	[MaxObservedPressure] [float] NULL,
	[MaxObservedPressureUOM] [varchar](10) NULL,
	[StandPipePressureOnBottom] [float] NULL,
	[StandPipePressureOnBottomUOM] [varchar](10) NULL,
	[StandPipePressureOffBottom] [float] NULL,
	[StandPipePressureOffBottomUOM] [varchar](10) NULL,
	[UnderBalanced] [varchar](50) NULL,
	[GasFlowRate] [float] NULL,
	[GasFlowRateUOM] [varchar](10) NULL,
	[LiquidFlowRate] [float] NULL,
	[LiquidFlowRateUOM] [varchar](10) NULL,
	[OrientingDrillingFlowRate] [float] NULL,
	[OrientingDrillingFlowRateUOM] [varchar](10) NULL,
	[RotatingDrillingFlowRate] [float] NULL,
	[RotatingDrillingFlowRateUOM] [varchar](10) NULL,
	[RotaryDrillingFlowRate] [float] NULL,
	[RotaryDrillingFlowRateUOM] [varchar](10) NULL,
	[DrillingFlowRate] [float] NULL,
	[DrillingFlowRateUOM] [varchar](10) NULL,
	[PulseAmplitudeObserved] [float] NULL,
	[PulseAmplitudeObservedUOM] [varchar](10) NULL,
	[DetectionPercent] [float] NULL,
	[AnnularVelocity] [float] NULL,
	[AnnularVelocityUOM] [varchar](10) NULL,
	[CriticalVelocity] [float] NULL,
	[CriticalVelocityUOM] [varchar](10) NULL,
	[StrokeRate] [float] NULL,
	[StrokeRateUOM] [varchar](10) NULL,
	[DifferentialPressure] [float] NULL,
	[DifferentialPressureUOM] [varchar](10) NULL,
	[DeltaPBit] [float] NULL,
	[DeltaPBitUOM] [varchar](10) NULL,
	[PulseAmplitudeDownholeCalculated] [float] NULL,
	[PulseAmplitudeDownholeCalculatedUOM] [varchar](10) NULL,
	[OrificeSize] [float] NULL,
	[OrificeSizeUOM] [varchar](10) NULL,
	[OrificeSizeCanadian] [float] NULL,
	[OrificeSizeCanadianUOM] [varchar](10) NULL,
 CONSTRAINT [PK_tblDailyActivityHydraulics] PRIMARY KEY CLUSTERED 
(
	[DailyHydraulicID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DailyMudData]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DailyMudData](
	[DailyMudDataID] [uniqueidentifier] NOT NULL,
	[DailyID] [uniqueidentifier] NOT NULL,
	[BaseFluid] [varchar](50) NULL,
	[MudType] [varchar](50) NULL,
	[GasType] [varchar](50) NULL,
	[Density] [float] NULL,
	[DensityUOM] [varchar](10) NULL,
	[Viscosity] [float] NULL,
	[ViscosityUOM] [varchar](10) NULL,
	[WaterLoss] [float] NULL,
	[WaterLossUOM] [varchar](10) NULL,
	[PlasticViscosity] [float] NULL,
	[PlasticViscosityUOM] [varchar](10) NULL,
	[YieldPoint] [float] NULL,
	[YieldPointUOM] [varchar](10) NULL,
	[DownholeMaxTemp] [float] NULL,
	[DownholeMaxTempUOM] [varchar](10) NULL,
	[pH] [float] NULL,
	[SandPercent] [float] NULL,
	[SolidPercent] [float] NULL,
	[OilPercent] [float] NULL,
	[WaterPercent] [float] NULL,
	[LCMConcentration] [float] NULL,
	[LCMConcentrationUOM] [varchar](10) NULL,
	[LCMTypeGrade] [varchar](100) NULL,
	[GEL] [float] NULL,
	[GELUOM] [varchar](10) NULL,
	[KClConcentration] [float] NULL,
	[KClConcentrationUOM] [varchar](10) NULL,
	[NaCI] [float] NULL,
	[NaCIUOM] [varchar](10) NULL,
	[CaCI] [float] NULL,
	[CaCIUOM] [varchar](10) NULL,
	[TotalChlorides] [float] NULL,
	[TotalChloridesUOM] [varchar](10) NULL,
	[EquivalentNaCI] [float] NULL,
	[EquivalentNaCIUOM] [varchar](10) NULL,
	[Rm] [float] NULL,
	[RmTemp] [float] NULL,
	[Rmf] [float] NULL,
	[RmfTemp] [float] NULL,
	[Rmc] [float] NULL,
	[RmcTemp] [float] NULL,
	[RmTool] [float] NULL,
	[RmMaxToolTemp] [float] NULL,
	[RmGroupUOM] [varchar](10) NULL,
	[RmTempGroupUOM] [varchar](10) NULL,
 CONSTRAINT [PK_DailyMudData] PRIMARY KEY CLUSTERED 
(
	[DailyMudDataID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwDailyRptMudData]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwDailyRptMudData]
AS
SELECT md.DailyID,
	md.BaseFluid,
	md.Density as MudDensity,
	md.DensityUOM as MudDensityUnit,
	md.Viscosity as FunnelViscosity,
	md.ViscosityUOM as FunnelViscosityUnits,
	md.OilPercent as PercentageOil,
	md.WaterPercent as PercentageWater,
	md.SandPercent as PercentageSand,
	md.SolidPercent as PercentageSolid,
	md.pH,
	md.PlasticViscosity as PV,
	md.YieldPoint as YP,
	md.LCMConcentration as LCM,
	md.LCMConcentrationUOM as LCMUnits,
	md.LCMTypeGrade as LCMTypeGrade,
	md.KClConcentration as KCl,
	md.KClConcentrationUOM as KClUnits,
	md.NaCI as NaCl,
	md.NaCIUOM as NaClUnits,
	md.CaCI as CaCl,
	md.CaCIUOM as CaClUnits,
	md.TotalChlorides as TotalChlorides,
	md.TotalChloridesUOM as TotalChloridesUnits,
	md.EquivalentNaCI as EquivNaCl,
	md.EquivalentNaCIUOM as EquivNaClUnits,
	md.DownholeMaxTemp as BoreHole,
	md.DownholeMaxTempUOM as BoreHoleUnits,
	Cast(md.Rm as varchar(20)) + '@' + Cast(md.RmTemp as varchar(20)) As RmAtTemp,
	Cast(md.Rmf as varchar(20)) + '@' + Cast(md.RmfTemp as varchar(20)) As RmfAtTemp,
	Cast(md.Rmc as varchar(20)) +'@' + Cast(md.RmcTemp as varchar(20)) As RmcAtTemp,
	Cast(md.RmTool as varchar(20)) + '@' + Cast(md.RmMaxToolTemp as varchar(20)) As RmAtMaxTool,
	md.RmGroupUOM,
	md.RmTempGroupUOM,
	h.AnnularVelocity,
	h.AnnularVelocityUOM,
	h.CriticalVelocity,
	h.CriticalVelocityUOM
FROM DailyMudData md
LEFT JOIN DailyHydraulics h ON h.DailyID = md.DailyID
GO
/****** Object:  Table [dbo].[RunEMData]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RunEMData](
	[RunEMDataID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NULL,
	[DrillingStart] [datetime] NULL,
	[DrillingEnd] [datetime] NULL,
	[SignalLevelStart] [float] NULL,
	[SignalLevelStartUOM] [varchar](10) NULL,
	[SignalLevelEnd] [float] NULL,
	[SignalLevelEndUOM] [varchar](10) NULL,
	[NoiseLevelStart] [float] NULL,
	[NoiseLevelStartUOM] [varchar](10) NULL,
	[NoiseLevelEnd] [float] NULL,
	[NoiseLevelEndUOM] [varchar](10) NULL,
	[EmittingCurrentStart] [float] NULL,
	[EmittingCurrentStartUOM] [varchar](10) NULL,
	[EmittingCurrentEnd] [float] NULL,
	[EmittingCurrentEndUOM] [varchar](10) NULL,
	[ExtendedRangeCableLength] [float] NULL,
	[ExtendedRangeCableLengthUOM] [varchar](10) NULL,
	[GammaRayScaleFactorK1] [varchar](20) NULL,
	[TransceiverSNStart] [varchar](20) NULL,
	[TransceiverSNEnd] [varchar](20) NULL,
	[MainGroundStart] [varchar](20) NULL,
	[MainGroundEnd] [varchar](20) NULL,
	[MainGroundVoltageStart] [float] NULL,
	[MainGroundVoltageStartUOM] [varchar](10) NULL,
	[MainGroundVoltageEnd] [float] NULL,
	[MainGroundVoltageEndUOM] [varchar](10) NULL,
	[MainGroundCurrentStart] [float] NULL,
	[MainGroundCurrentStartUOM] [varchar](10) NULL,
	[MainGroundCurrentEnd] [float] NULL,
	[MainGroundCurrentEndUOM] [varchar](10) NULL,
	[MainGroundResistanceStart] [float] NULL,
	[MainGroundResistanceStartUOM] [varchar](10) NULL,
	[MainGroundResistanceEnd] [float] NULL,
	[MainGroundResistanceEndUOM] [varchar](10) NULL,
	[ReceptionStart] [varchar](20) NULL,
	[ReceptionEnd] [varchar](20) NULL,
	[ExtendedRangeRun] [varchar](20) NULL,
	[TBSTimeOn] [varchar](20) NULL,
	[TBSTimeOff] [varchar](20) NULL,
	[ConnectMWD] [datetime] NULL,
	[DisconnectMWD] [datetime] NULL,
	[ConnectGammaRay] [datetime] NULL,
	[DisconnectGammaRay] [datetime] NULL,
	[ConnectCSGX] [datetime] NULL,
	[DisconnectCSGX] [datetime] NULL,
	[ReceptionStartOther] [varchar](20) NULL,
	[ReceptionEndOther] [varchar](20) NULL,
	[ConnectGabis] [datetime] NULL,
	[DisconnectGabis] [datetime] NULL,
	[MainGroundStartOther] [varchar](20) NULL,
	[MainGroundEndOther] [varchar](20) NULL,
 CONSTRAINT [PK_RunEMData_RunEMDataID] PRIMARY KEY CLUSTERED 
(
	[RunEMDataID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwBitRunEM]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwBitRunEM]
AS
SELECT RunID,
	Cast(Left(DateName(mm,DrillingStart),3) as varchar(3)) + '-' + Cast(Day(DrillingStart) as varchar(2)) + '-' + Cast(Year(DrillingStart) as varchar(4)) As DrillingStart,
	Cast(DatePart(hh,DrillingStart) as varchar(2)) + ':' + Cast(DatePart(mi,DrillingStart) as varchar(2)) As DrillingStartTime, 
	Cast(Left(DateName(mm,DrillingEnd),3) as varchar(3)) + '-' + Cast(Day(DrillingEnd) as varchar(2)) + '-' + Cast(Year(DrillingEnd) as varchar(4)) As DrillingEnd,
	Cast(DatePart(hh,DrillingEnd) as varchar(2)) + ':' + Cast(DatePart(mi,DrillingEnd) as varchar(2)) As DrillingEndTime,
	SignalLevelStart,
	SignalLevelStartUOM,
	SignalLevelEnd,
	SignalLevelEndUOM,
	NoiseLevelStart,
	NoiseLevelStartUOM,
	NoiseLevelEnd,
	NoiseLevelEndUOM,
	EmittingCurrentStart,
	EmittingCurrentStartUOM,
	EmittingCurrentEnd,
	EmittingCurrentEndUOM,
	'' As SurfaceAntennaResistance,
	'' As SurfaceAntennaResistanceUOM,
	'' As SurfaceAntennaDescription,
	ExtendedRangeCableLength,
	ExtendedRangeCableLengthUOM,
	GammaRayScaleFactorK1,
	Cast(Left(DateName(mm,ConnectMWD),3) as varchar(3)) + '-' + Cast(Day(ConnectMWD) as varchar(2)) + '-' + Cast(Year(ConnectMWD) as varchar(4)) As ConnectMWD,
	Cast(DatePart(hh,ConnectMWD) as varchar(2)) + ':' + Cast(DatePart(mi,ConnectMWD) as varchar(2)) As ConnectMWDTime, 
	Cast(Left(DateName(mm,DisconnectMWD),3) as varchar(3)) + '-' + Cast(Day(DisconnectMWD) as varchar(2)) + '-' + Cast(Year(DisconnectMWD) as varchar(4)) As DisconnectMWD,
	Cast(DatePart(hh,DisconnectMWD) as varchar(2)) + ':' + Cast(DatePart(mi,DisconnectMWD) as varchar(2)) As DisconnectMWDTime,
	Cast(Left(DateName(mm,ConnectCSGX),3) as varchar(3)) + '-' + Cast(Day(ConnectCSGX) as varchar(2)) + '-' + Cast(Year(ConnectCSGX) as varchar(4)) As ConnectCSGX,
	Cast(DatePart(hh,ConnectCSGX) as varchar(2)) + ':' +
	Cast(DatePart(mi,ConnectCSGX) as varchar(2)) As ConnectCSGXTime, 
	Cast(Left(DateName(mm,DisconnectCSGX),3) as varchar(3)) + '-' + Cast(Day(DisconnectCSGX) as varchar(2)) + '-' + Cast(Year(DisconnectCSGX) as varchar(4)) As DisconnectCSGX,
	Cast(DatePart(hh,DisconnectCSGX) as varchar(2)) + ':' + Cast(DatePart(mi,DisconnectCSGX) as varchar(2)) As DisconnectCSGXTime,
	Cast(Left(DateName(mm,ConnectGammaRay),3) as varchar(3)) + '-' + Cast(Day(ConnectGammaRay) as varchar(2)) + '-' + Cast(Year(ConnectGammaRay) as varchar(4)) As ConnectGammaRay,
	Cast(DatePart(hh,ConnectGammaRay) as varchar(2)) + ':' + Cast(DatePart(mi,ConnectGammaRay) as varchar(2)) As ConnectGammaRayTime, 
	Cast(Left(DateName(mm,DisconnectGammaRay),3) as varchar(3)) + '-' + Cast(Day(DisconnectGammaRay) as varchar(2)) + '-' + Cast(Year(DisconnectGammaRay) as varchar(4)) As DisconnectGammaRay,
	Cast(DatePart(hh,DisconnectGammaRay) as varchar(2)) + ':' + Cast(DatePart(mi,DisconnectGammaRay) as varchar(2)) As DisconnectGammaRayTime 
FROM RunEMData

GO
/****** Object:  View [dbo].[vwAssetRequestPortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------X-------------------------------------------------------------------

--======================================================================
--MODIFIED BY : SUYEB MOHAMMAD
--MODIFIED ON : 21 July 2016
--DESCRIPTION : To add data with status  request endorsed
--======================================================================
CREATE VIEW [dbo].[vwAssetRequestPortlet] AS 
SELECT RequestFormId, FromBranchPlant, ToBranchPlant, CreateDate, ToolPanel, Status, IsComplete, CreatedUserName
FROM RequestForms WITH(NOLOCK)
WHERE (Status in (2,3,15) or IsComplete = 1) AND IsArchived =0 
GO
/****** Object:  View [dbo].[vwAssetRequestArchivePortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[vwAssetRequestArchivePortlet] AS

SELECT RequestFormId, FromBranchPlant, ToBranchPlant, CreateDate, ToolPanel, Status, IsComplete, CreatedUserName,
	(CASE
		WHEN ArchiveOn IS NOT NULL THEN DATEDIFF(d, GETDATE(), ArchiveOn) 
		WHEN ToolPanel = 'LWD' THEN DATEDIFF(d, GETDATE(), DATEADD(d, 21, RequiredDate))
		WHEN ToolPanel = 'RSA' THEN DATEDIFF(d, GETDATE(), DATEADD(d, 21, RequiredDate))
		WHEN ToolPanel = 'EM' OR ToolPanel = 'RSS' THEN DATEDIFF(d, GETDATE(), DATEADD(d, 28, RequiredDate))
		WHEN ToolPanel = 'DHM' OR ToolPanel = 'DIR' THEN DATEDIFF(d, GETDATE(), DATEADD(d, 60, RequiredDate))
		ELSE DATEDIFF(d, GETDATE(), DATEADD(d, 21, RequiredDate)) END
	) AS Days

FROM RequestForms (NOLOCK)
WHERE IsArchived = 0
AND IsActive = 1
AND (CASE
		WHEN ArchiveOn IS NOT NULL THEN DATEDIFF(d, GETDATE(), ArchiveOn) 
		WHEN ToolPanel = 'LWD' THEN DATEDIFF(d, GETDATE(), DATEADD(d, 21, RequiredDate))
		WHEN ToolPanel = 'RSA' THEN DATEDIFF(d, GETDATE(), DATEADD(d, 21, RequiredDate))
		WHEN ToolPanel = 'EM' OR ToolPanel = 'RSS' THEN DATEDIFF(d, GETDATE(), DATEADD(d, 28, RequiredDate))
		WHEN ToolPanel = 'DHM' OR ToolPanel = 'DIR' THEN DATEDIFF(d, GETDATE(), DATEADD(d, 60, RequiredDate))
		ELSE DATEDIFF(d, GETDATE(), DATEADD(d, 21, RequiredDate)) END
	) in (7, 14)








GO
/****** Object:  View [dbo].[vwAssetRequestArchivalNotification]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwAssetRequestArchivalNotification]
AS

SELECT RequestFormId, 'AR-' + ToBranchPlant + '-' + CAST(RequestFormId AS VARCHAR) AS RequestNumber,
ToolPanel, RequiredDate, FromBranchPlant, ToBranchPlant, CreatedUserName, ArchiveOn,
	(CASE
		WHEN ArchiveOn IS NOT NULL THEN DATEDIFF(d, GETDATE(), ArchiveOn) 
		WHEN ToolPanel = 'LWD' THEN DATEDIFF(d, GETDATE(), DATEADD(d, 21, RequiredDate))
		WHEN ToolPanel = 'RSA' THEN DATEDIFF(d, GETDATE(), DATEADD(d, 21, RequiredDate))
		WHEN ToolPanel = 'EM' OR ToolPanel = 'RSS' THEN DATEDIFF(d, GETDATE(), DATEADD(d, 28, RequiredDate))
		WHEN ToolPanel = 'DHM' OR ToolPanel = 'DIR' THEN DATEDIFF(d, GETDATE(), DATEADD(d, 60, RequiredDate))
		ELSE DATEDIFF(d, GETDATE(), DATEADD(d, 21, RequiredDate)) END
	) AS DaysToArchive

FROM RequestForms (NOLOCK)
WHERE IsArchived = 0 AND IsActive = 1




GO
/****** Object:  Table [dbo].[UnitCorePrefGroups]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UnitCorePrefGroups](
	[GUID] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](256) NULL,
	[Editable_Ind] [bit] NOT NULL,
	[Pref_Ind] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UnitCoreClasses]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UnitCoreClasses](
	[GUID] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[UnitsGUID] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UnitCoreSubclasses]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UnitCoreSubclasses](
	[GUID] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[ClassGUID] [uniqueidentifier] NOT NULL,
	[DefUnitsGUID] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UnitCoreClassColMapping]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UnitCoreClassColMapping](
	[ID] [uniqueidentifier] NOT NULL,
	[ClassGUID] [uniqueidentifier] NOT NULL,
	[SubclassGUID] [uniqueidentifier] NOT NULL,
	[Editor] [nvarchar](50) NOT NULL,
	[Table_Name] [nvarchar](50) NOT NULL,
	[Column_Name] [nvarchar](75) NOT NULL,
	[UOM_Field_Name] [nvarchar](75) NULL,
	[Grid_Name] [nvarchar](75) NULL,
	[Add_Date] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UnitCoreDefinitions]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UnitCoreDefinitions](
	[GUID] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Abbr] [nvarchar](10) NOT NULL,
	[ClassGUID] [uniqueidentifier] NOT NULL,
	[ConvMethod] [smallint] NOT NULL,
	[ConvParm1] [float] NULL,
	[ConvParm2] [float] NULL,
	[ConvParm3] [float] NULL,
	[ConvParm4] [float] NULL,
	[ConvParm5] [float] NULL,
	[Precision] [smallint] NULL,
PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UnitCorePreferences]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UnitCorePreferences](
	[GUID] [uniqueidentifier] NOT NULL,
	[PrefGroupGUID] [uniqueidentifier] NOT NULL,
	[SubclassGUID] [uniqueidentifier] NOT NULL,
	[UnitsGUID] [uniqueidentifier] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwCoreUomConversion]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwCoreUomConversion]
AS

SELECT m.Table_Name
, m.Column_Name
, c.Name As BaseUOM_Class
, u1.Name As BaseUOM_Name
, u1.Abbr As BaseUOM_Abbr
, s.Name As PrefUOM_Class
, u2.Name As PrefUOM_Name
, u2.Abbr As PrefUOM_Abbr
, u2.ConvMethod As PrefUOM_ConvMethod
, u2.ConvParm1 As PrefUOM_ConvParm1
, u2.ConvParm2 As PrefUOM_ConvParm2
, u2.ConvParm3 As PrefUOM_ConvParm3
, u2.[Precision] As PrefUOM_Precision
, u3.Name As UserUOM_Name
, u3.Abbr As UserUOM_Abbr
, u3.ConvMethod As UserUOM_ToBase_ConvMethod
, u3.ConvParm1 As UserUOM_ToBase_ConvParm1
, u3.ConvParm2 As UserUOM_ToBase_ConvParm2
, u3.ConvParm3 As UserUOM_ToBase_ConvParm3
, u3.[Precision] As UserUOM_Precision
, ug.Name As UserUOM_GroupName
, ug.[Description] As UserUOM_GroupDesc
, ug.Pref_Ind As UserUOM_GroupIndicator
FROM UnitCoreClassColMapping m
JOIN UnitCoreSubclasses s ON m.SubClassGUID = s.GUID
JOIN UnitCoreClasses c ON s.ClassGUID = c.GUID 
JOIN UnitCorePreferences up ON up.SubClassGUID = s.GUID 
JOIN UnitCoreDefinitions u1 ON c.UnitsGUID = u1.GUID 
JOIN UnitCoreDefinitions u2 ON s.DefUnitsGUID = u2.GUID 
JOIN UnitCoreDefinitions u3 ON up.UnitsGUID = u3.GUID 
JOIN UnitCorePrefGroups ug on up.prefgroupGUID = ug.guid 
WHERE m.Table_Name <> '' AND m.Column_Name <> ''
GROUP BY m.Table_Name, m.Column_Name, c.Name, u1.Name, u1.Abbr, s.Name, u2.Name
, u2.Abbr, u2.ConvMethod, u2.ConvParm1, u2.ConvParm2, u2.ConvParm3, u2.[Precision]
, u3.Name, u3.Abbr, u3.ConvMethod, u3.ConvParm1, u3.ConvParm2, u3.ConvParm3, u3.[Precision]
, ug.Name, ug.[Description], ug.Pref_Ind


GO
/****** Object:  View [dbo].[vwToolsInStatusPortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vwToolsInStatusPortlet]
AS

SELECT FixedAssetId, SerialNum, TechId, BranchPlant, AssetDescription, LastStatusChangeDate, EquipmentStatus
FROM FixedAssets (NOLOCK)





GO
/****** Object:  View [dbo].[vwFixedAssetOwnership]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[vwFixedAssetOwnership]
AS
SELECT distinct [Ownership]
FROM  FixedAssets WITH (NOLOCK)


GO
/****** Object:  View [dbo].[vwAIRTPortlet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vwAIRTPortlet] as

SELECT AssetRepairTrackId, ARTNumber, ShipToBranchPlant, DateAdded, AddedBy, SerialNum, AssetNumber, ItemNum, 
		Status, IsAssetFromField, IsRedTag, IncidentId, FromBranchPlant
FROM AssetRepairTrack (NOLOCK)




GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_AssetRepairTrack]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_AssetRepairTrack]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [AssetRepairTrackId], NULL as [ARTNumber], NULL as [ITPFTWOId], NULL as [SRPFTWOId], NULL as [FixedAssetId], NULL as [SerialNum], NULL as [ItemNum], NULL as [ItemDesc], NULL as [RNItemNum], NULL as [Revision], NULL as [AssetNumber], NULL as [IncidentId], NULL as [JobId], NULL as [ToolStringInfoId], NULL as [NCRNumber], NULL as [WorkOrderNum], NULL as [FromBranchPlant], NULL as [ShipToBranchPlant], NULL as [Comments], NULL as [Status], NULL as [DateClosed], NULL as [IsPFTWorkOrderRequired], NULL as [IsNCRRequired], NULL as [PartRepairCost], NULL as [IsAssetFromField], NULL as [IsRedTag], NULL as [FailureCodeId], NULL as [OutOfSpecCodeId], NULL as [ProceduralCodeId], NULL as [AddedBy], NULL as [DateAdded], NULL as [IsIRNotificationSent], NULL as [FailureType], NULL as [FailureDescriptionCommentId], NULL as [CorrectiveMaintenanceCommentId], NULL as [CloseStatus], NULL as [NeedsCustomerFeedback], NULL as [IsNeedsCustomerFeedbackEmailSent], NULL as [CPARId], NULL as [DispatchNumber], NULL as [CloseBy]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_AssetRepairTrack', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[AssetRepairTrackId], t.[ARTNumber], t.[ITPFTWOId], t.[SRPFTWOId], t.[FixedAssetId], t.[SerialNum], t.[ItemNum], t.[ItemDesc], t.[RNItemNum], t.[Revision], t.[AssetNumber], t.[IncidentId], t.[JobId], t.[ToolStringInfoId], t.[NCRNumber], t.[WorkOrderNum], t.[FromBranchPlant], t.[ShipToBranchPlant], t.[Comments], t.[Status], t.[DateClosed], t.[IsPFTWorkOrderRequired], t.[IsNCRRequired], t.[PartRepairCost], t.[IsAssetFromField], t.[IsRedTag], t.[FailureCodeId], t.[OutOfSpecCodeId], t.[ProceduralCodeId], t.[AddedBy], t.[DateAdded], t.[IsIRNotificationSent], t.[FailureType], t.[FailureDescriptionCommentId], t.[CorrectiveMaintenanceCommentId], t.[CloseStatus], t.[NeedsCustomerFeedback], t.[IsNeedsCustomerFeedbackEmailSent], t.[CPARId], t.[DispatchNumber], t.[CloseBy]
	from [cdc].[dbo_AssetRepairTrack_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_AssetRepairTrack', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[AssetRepairTrackId], t.[ARTNumber], t.[ITPFTWOId], t.[SRPFTWOId], t.[FixedAssetId], t.[SerialNum], t.[ItemNum], t.[ItemDesc], t.[RNItemNum], t.[Revision], t.[AssetNumber], t.[IncidentId], t.[JobId], t.[ToolStringInfoId], t.[NCRNumber], t.[WorkOrderNum], t.[FromBranchPlant], t.[ShipToBranchPlant], t.[Comments], t.[Status], t.[DateClosed], t.[IsPFTWorkOrderRequired], t.[IsNCRRequired], t.[PartRepairCost], t.[IsAssetFromField], t.[IsRedTag], t.[FailureCodeId], t.[OutOfSpecCodeId], t.[ProceduralCodeId], t.[AddedBy], t.[DateAdded], t.[IsIRNotificationSent], t.[FailureType], t.[FailureDescriptionCommentId], t.[CorrectiveMaintenanceCommentId], t.[CloseStatus], t.[NeedsCustomerFeedback], t.[IsNeedsCustomerFeedbackEmailSent], t.[CPARId], t.[DispatchNumber], t.[CloseBy]
	from [cdc].[dbo_AssetRepairTrack_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_AssetRepairTrack', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_BranchPlants]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_BranchPlants]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [BranchPlantId], NULL as [BranchPlant], NULL as [MCDL01], NULL as [CompanyName], NULL as [Description], NULL as [BaseCode], NULL as [RelBaseCode], NULL as [SAPFuncLoc], NULL as [County], NULL as [City], NULL as [StateProvince], NULL as [Country], NULL as [ZipCode], NULL as [Region], NULL as [Hemisphere], NULL as [IsOps], NULL as [IsManufacturing], NULL as [IsRepair], NULL as [IsGlobalRepair], NULL as [Latitude], NULL as [Longitude], NULL as [Active], NULL as [LastEdit], NULL as [DateAdded], NULL as [IsNonLiveLocation], NULL as [IsRemovedFromAR], NULL as [WptsWFDLocationId], NULL as [WptsRegionId], NULL as [WptsCountryId], NULL as [IsOperationsBillableLocation], NULL as [CurrencyCode], NULL as [IsSuperCenter]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_BranchPlants', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[BranchPlantId], t.[BranchPlant], t.[MCDL01], t.[CompanyName], t.[Description], t.[BaseCode], t.[RelBaseCode], t.[SAPFuncLoc], t.[County], t.[City], t.[StateProvince], t.[Country], t.[ZipCode], t.[Region], t.[Hemisphere], t.[IsOps], t.[IsManufacturing], t.[IsRepair], t.[IsGlobalRepair], t.[Latitude], t.[Longitude], t.[Active], t.[LastEdit], t.[DateAdded], t.[IsNonLiveLocation], t.[IsRemovedFromAR], t.[WptsWFDLocationId], t.[WptsRegionId], t.[WptsCountryId], t.[IsOperationsBillableLocation], t.[CurrencyCode], t.[IsSuperCenter]
	from [cdc].[dbo_BranchPlants_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_BranchPlants', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[BranchPlantId], t.[BranchPlant], t.[MCDL01], t.[CompanyName], t.[Description], t.[BaseCode], t.[RelBaseCode], t.[SAPFuncLoc], t.[County], t.[City], t.[StateProvince], t.[Country], t.[ZipCode], t.[Region], t.[Hemisphere], t.[IsOps], t.[IsManufacturing], t.[IsRepair], t.[IsGlobalRepair], t.[Latitude], t.[Longitude], t.[Active], t.[LastEdit], t.[DateAdded], t.[IsNonLiveLocation], t.[IsRemovedFromAR], t.[WptsWFDLocationId], t.[WptsRegionId], t.[WptsCountryId], t.[IsOperationsBillableLocation], t.[CurrencyCode], t.[IsSuperCenter]
	from [cdc].[dbo_BranchPlants_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_BranchPlants', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_CBMMonitor]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_CBMMonitor]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [CBMMonitorId], NULL as [MeterReadingTypeId], NULL as [PFTConfigId], NULL as [GlobalTrigger], NULL as [CreateJDEWO], NULL as [Active], NULL as [CreatedOn], NULL as [CreatedBy], NULL as [UpdatedOn], NULL as [UpdatedBy], NULL as [DefaultMeterReading], NULL as [EffectiveDate], NULL as [ObjectNumber]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_CBMMonitor', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[CBMMonitorId], t.[MeterReadingTypeId], t.[PFTConfigId], t.[GlobalTrigger], t.[CreateJDEWO], t.[Active], t.[CreatedOn], t.[CreatedBy], t.[UpdatedOn], t.[UpdatedBy], t.[DefaultMeterReading], t.[EffectiveDate], t.[ObjectNumber]
	from [cdc].[dbo_CBMMonitor_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_CBMMonitor', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[CBMMonitorId], t.[MeterReadingTypeId], t.[PFTConfigId], t.[GlobalTrigger], t.[CreateJDEWO], t.[Active], t.[CreatedOn], t.[CreatedBy], t.[UpdatedOn], t.[UpdatedBy], t.[DefaultMeterReading], t.[EffectiveDate], t.[ObjectNumber]
	from [cdc].[dbo_CBMMonitor_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_CBMMonitor', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_CBMMonitorAssetItemNums]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_CBMMonitorAssetItemNums]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [CBMMonitorAssetItemNumId], NULL as [CBMMonitorId], NULL as [ItemNum], NULL as [CreatedBy], NULL as [CreatedOn], NULL as [IsParent]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_CBMMonitorAssetItemNums', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[CBMMonitorAssetItemNumId], t.[CBMMonitorId], t.[ItemNum], t.[CreatedBy], t.[CreatedOn], t.[IsParent]
	from [cdc].[dbo_CBMMonitorAssetItemNums_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_CBMMonitorAssetItemNums', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[CBMMonitorAssetItemNumId], t.[CBMMonitorId], t.[ItemNum], t.[CreatedBy], t.[CreatedOn], t.[IsParent]
	from [cdc].[dbo_CBMMonitorAssetItemNums_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_CBMMonitorAssetItemNums', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_Dispatches]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_Dispatches]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [DispatchId], NULL as [DispatchNumber], NULL as [JDEJobNumber], NULL as [JDECustomerNumber], NULL as [BranchPlant], NULL as [WellName], NULL as [WellDetails1], NULL as [WellDetails3], NULL as [RigName], NULL as [DateLastEdit], NULL as [UserIdLastEdit], NULL as [DateAdded], NULL as [JobId]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_Dispatches', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[DispatchId], t.[DispatchNumber], t.[JDEJobNumber], t.[JDECustomerNumber], t.[BranchPlant], t.[WellName], t.[WellDetails1], t.[WellDetails3], t.[RigName], t.[DateLastEdit], t.[UserIdLastEdit], t.[DateAdded], t.[JobId]
	from [cdc].[dbo_Dispatches_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_Dispatches', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[DispatchId], t.[DispatchNumber], t.[JDEJobNumber], t.[JDECustomerNumber], t.[BranchPlant], t.[WellName], t.[WellDetails1], t.[WellDetails3], t.[RigName], t.[DateLastEdit], t.[UserIdLastEdit], t.[DateAdded], t.[JobId]
	from [cdc].[dbo_Dispatches_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_Dispatches', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_DispatchInstanceItems]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_DispatchInstanceItems]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [DispatchInstanceItemId], NULL as [DispatchInstanceId], NULL as [LineNumber], NULL as [FixedAssetId], NULL as [AssetNumber], NULL as [SerialNum], NULL as [ItemNum], NULL as [Description], NULL as [Revision], NULL as [Size], NULL as [QtyShipped], NULL as [TopConnection], NULL as [BottomConnection], NULL as [DateAdded], NULL as [QtyReturned], NULL as [DateReturned], NULL as [Comments], NULL as [Condition], NULL as [ReasonCode], NULL as [ToolStringId], NULL as [RNItemNum], NULL as [JDETxnNum], NULL as [AmountExtendedPrice], NULL as [ForeignExtendedPrice], NULL as [TrxnCurrency], NULL as [BaseCurrency], NULL as [QtySold], NULL as [DateBilled], NULL as [ParentId], NULL as [ReturnToBranchPlant], NULL as [AIRTBranchPlant], NULL as [ErrorMessage], NULL as [RevenueBusinessUnit]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_DispatchInstanceItems', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[DispatchInstanceItemId], t.[DispatchInstanceId], t.[LineNumber], t.[FixedAssetId], t.[AssetNumber], t.[SerialNum], t.[ItemNum], t.[Description], t.[Revision], t.[Size], t.[QtyShipped], t.[TopConnection], t.[BottomConnection], t.[DateAdded], t.[QtyReturned], t.[DateReturned], t.[Comments], t.[Condition], t.[ReasonCode], t.[ToolStringId], t.[RNItemNum], t.[JDETxnNum], t.[AmountExtendedPrice], t.[ForeignExtendedPrice], t.[TrxnCurrency], t.[BaseCurrency], t.[QtySold], t.[DateBilled], t.[ParentId], t.[ReturnToBranchPlant], t.[AIRTBranchPlant], t.[ErrorMessage], t.[RevenueBusinessUnit]
	from [cdc].[dbo_DispatchInstanceItems_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_DispatchInstanceItems', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[DispatchInstanceItemId], t.[DispatchInstanceId], t.[LineNumber], t.[FixedAssetId], t.[AssetNumber], t.[SerialNum], t.[ItemNum], t.[Description], t.[Revision], t.[Size], t.[QtyShipped], t.[TopConnection], t.[BottomConnection], t.[DateAdded], t.[QtyReturned], t.[DateReturned], t.[Comments], t.[Condition], t.[ReasonCode], t.[ToolStringId], t.[RNItemNum], t.[JDETxnNum], t.[AmountExtendedPrice], t.[ForeignExtendedPrice], t.[TrxnCurrency], t.[BaseCurrency], t.[QtySold], t.[DateBilled], t.[ParentId], t.[ReturnToBranchPlant], t.[AIRTBranchPlant], t.[ErrorMessage], t.[RevenueBusinessUnit]
	from [cdc].[dbo_DispatchInstanceItems_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_DispatchInstanceItems', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_DispatchInstances]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_DispatchInstances]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [DispatchInstanceId], NULL as [DispatchId], NULL as [SequenceNum], NULL as [ReturnSequenceNum], NULL as [ShipTo], NULL as [ShipType], NULL as [DateShipped], NULL as [DateDelivered], NULL as [DateLastEdit], NULL as [UserIdLastEdit], NULL as [DateAdded], NULL as [InvoiceSequenceNum], NULL as [InvoiceNum], NULL as [InvoiceType], NULL as [InvoiceCompany], NULL as [JobType]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_DispatchInstances', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[DispatchInstanceId], t.[DispatchId], t.[SequenceNum], t.[ReturnSequenceNum], t.[ShipTo], t.[ShipType], t.[DateShipped], t.[DateDelivered], t.[DateLastEdit], t.[UserIdLastEdit], t.[DateAdded], t.[InvoiceSequenceNum], t.[InvoiceNum], t.[InvoiceType], t.[InvoiceCompany], t.[JobType]
	from [cdc].[dbo_DispatchInstances_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_DispatchInstances', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[DispatchInstanceId], t.[DispatchId], t.[SequenceNum], t.[ReturnSequenceNum], t.[ShipTo], t.[ShipType], t.[DateShipped], t.[DateDelivered], t.[DateLastEdit], t.[UserIdLastEdit], t.[DateAdded], t.[InvoiceSequenceNum], t.[InvoiceNum], t.[InvoiceType], t.[InvoiceCompany], t.[JobType]
	from [cdc].[dbo_DispatchInstances_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_DispatchInstances', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_FixedAssets]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_FixedAssets]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [FixedAssetId], NULL as [AssetNumber], NULL as [Company], NULL as [BranchPlant], NULL as [FixedAssetBranchPlant], NULL as [AssetDescription], NULL as [ParentNumber], NULL as [ParentFixedAssetId], NULL as [ManufacturersSerialNumber], NULL as [BusinessUnit], NULL as [RNItemNum], NULL as [SerialNum], NULL as [CurrentItemQty], NULL as [CurrencyCode], NULL as [Cost], NULL as [AccumDepreciation], NULL as [NetBookValue], NULL as [ProductLineCode], NULL as [UnitNumber], NULL as [InventoryItemNum], NULL as [LegacySerialNumber], NULL as [AFENumber], NULL as [State], NULL as [ContractAccount], NULL as [Ownership], NULL as [DateAcquired], NULL as [LifeMonths], NULL as [StartDepreciation_Date], NULL as [NewUsed], NULL as [Manufacturer], NULL as [ModelYear], NULL as [ThirdItemNumber], NULL as [DateDisposed], NULL as [EquipmentStatus], NULL as [FiscalYear], NULL as [LedgerType], NULL as [CatCode16], NULL as [IsAdvisorOnly], NULL as [NotUsed], NULL as [IsAddByWorkOrder], NULL as [Revision], NULL as [LastEdit], NULL as [LastStatusChangeDate], NULL as [Source], NULL as [SystemStatus], NULL as [MaintPlant], NULL as [MaintPlantDesc], NULL as [FirmwareVersion], NULL as [ModelNum], NULL as [PhysicalLoc], NULL as [EquipTypeDesc], NULL as [ERPNotificationDate], NULL as [ERPNotificationNumber], NULL as [PartInternalStatus], NULL as [OriginalLocation], NULL as [OriginalStatus], NULL as [SerialDescLong], NULL as [Comments], NULL as [SAPLastEdit], NULL as [ParentPartId], NULL as [CustomsInvoiceDetailId], NULL as [Submt], NULL as [LeakTestDate], NULL as [RadioIsotope], NULL as [Activity], NULL as [SFC], NULL as [SourceModel], NULL as [LastComments], NULL as [PhysicalLocation], NULL as [VerifiedBy], NULL as [VerifiedDate], NULL as [VerifiedLocation], NULL as [StdCost], NULL as [StdCostCode], NULL as [OwnershipDesc], NULL as [Category], NULL as [CompanyCodeDesc], NULL as [CostCenterDesc], NULL as [CostCenterManager], NULL as [TechId], NULL as [MasterFirmwareItemNum], NULL as [MasterFirmwareRevision], NULL as [MfgPartNum], NULL as [DateAdded], NULL as [UserIdAdded], NULL as [UserIdLastEdit], NULL as [TopLevelFixedAssetId], NULL as [AcqCode], NULL as [MajorAccountingClass], NULL as [JournalingFlag], NULL as [ApplicationCode], NULL as [AssetLifeRemaining]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_FixedAssets', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[FixedAssetId], t.[AssetNumber], t.[Company], t.[BranchPlant], t.[FixedAssetBranchPlant], t.[AssetDescription], t.[ParentNumber], t.[ParentFixedAssetId], t.[ManufacturersSerialNumber], t.[BusinessUnit], t.[RNItemNum], t.[SerialNum], t.[CurrentItemQty], t.[CurrencyCode], t.[Cost], t.[AccumDepreciation], t.[NetBookValue], t.[ProductLineCode], t.[UnitNumber], t.[InventoryItemNum], t.[LegacySerialNumber], t.[AFENumber], t.[State], t.[ContractAccount], t.[Ownership], t.[DateAcquired], t.[LifeMonths], t.[StartDepreciation_Date], t.[NewUsed], t.[Manufacturer], t.[ModelYear], t.[ThirdItemNumber], t.[DateDisposed], t.[EquipmentStatus], t.[FiscalYear], t.[LedgerType], t.[CatCode16], t.[IsAdvisorOnly], t.[NotUsed], t.[IsAddByWorkOrder], t.[Revision], t.[LastEdit], t.[LastStatusChangeDate], t.[Source], t.[SystemStatus], t.[MaintPlant], t.[MaintPlantDesc], t.[FirmwareVersion], t.[ModelNum], t.[PhysicalLoc], t.[EquipTypeDesc], t.[ERPNotificationDate], t.[ERPNotificationNumber], t.[PartInternalStatus], t.[OriginalLocation], t.[OriginalStatus], t.[SerialDescLong], t.[Comments], t.[SAPLastEdit], t.[ParentPartId], t.[CustomsInvoiceDetailId], t.[Submt], t.[LeakTestDate], t.[RadioIsotope], t.[Activity], t.[SFC], t.[SourceModel], t.[LastComments], t.[PhysicalLocation], t.[VerifiedBy], t.[VerifiedDate], t.[VerifiedLocation], t.[StdCost], t.[StdCostCode], t.[OwnershipDesc], t.[Category], t.[CompanyCodeDesc], t.[CostCenterDesc], t.[CostCenterManager], t.[TechId], t.[MasterFirmwareItemNum], t.[MasterFirmwareRevision], t.[MfgPartNum], t.[DateAdded], t.[UserIdAdded], t.[UserIdLastEdit], t.[TopLevelFixedAssetId], t.[AcqCode], t.[MajorAccountingClass], t.[JournalingFlag], t.[ApplicationCode], t.[AssetLifeRemaining]
	from [cdc].[dbo_FixedAssets_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_FixedAssets', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[FixedAssetId], t.[AssetNumber], t.[Company], t.[BranchPlant], t.[FixedAssetBranchPlant], t.[AssetDescription], t.[ParentNumber], t.[ParentFixedAssetId], t.[ManufacturersSerialNumber], t.[BusinessUnit], t.[RNItemNum], t.[SerialNum], t.[CurrentItemQty], t.[CurrencyCode], t.[Cost], t.[AccumDepreciation], t.[NetBookValue], t.[ProductLineCode], t.[UnitNumber], t.[InventoryItemNum], t.[LegacySerialNumber], t.[AFENumber], t.[State], t.[ContractAccount], t.[Ownership], t.[DateAcquired], t.[LifeMonths], t.[StartDepreciation_Date], t.[NewUsed], t.[Manufacturer], t.[ModelYear], t.[ThirdItemNumber], t.[DateDisposed], t.[EquipmentStatus], t.[FiscalYear], t.[LedgerType], t.[CatCode16], t.[IsAdvisorOnly], t.[NotUsed], t.[IsAddByWorkOrder], t.[Revision], t.[LastEdit], t.[LastStatusChangeDate], t.[Source], t.[SystemStatus], t.[MaintPlant], t.[MaintPlantDesc], t.[FirmwareVersion], t.[ModelNum], t.[PhysicalLoc], t.[EquipTypeDesc], t.[ERPNotificationDate], t.[ERPNotificationNumber], t.[PartInternalStatus], t.[OriginalLocation], t.[OriginalStatus], t.[SerialDescLong], t.[Comments], t.[SAPLastEdit], t.[ParentPartId], t.[CustomsInvoiceDetailId], t.[Submt], t.[LeakTestDate], t.[RadioIsotope], t.[Activity], t.[SFC], t.[SourceModel], t.[LastComments], t.[PhysicalLocation], t.[VerifiedBy], t.[VerifiedDate], t.[VerifiedLocation], t.[StdCost], t.[StdCostCode], t.[OwnershipDesc], t.[Category], t.[CompanyCodeDesc], t.[CostCenterDesc], t.[CostCenterManager], t.[TechId], t.[MasterFirmwareItemNum], t.[MasterFirmwareRevision], t.[MfgPartNum], t.[DateAdded], t.[UserIdAdded], t.[UserIdLastEdit], t.[TopLevelFixedAssetId], t.[AcqCode], t.[MajorAccountingClass], t.[JournalingFlag], t.[ApplicationCode], t.[AssetLifeRemaining]
	from [cdc].[dbo_FixedAssets_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_FixedAssets', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_GLProductLines]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_GLProductLines]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [Code], NULL as [Description], NULL as [UpdatedBy], NULL as [UpdatedOn]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_GLProductLines', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[Code], t.[Description], t.[UpdatedBy], t.[UpdatedOn]
	from [cdc].[dbo_GLProductLines_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_GLProductLines', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[Code], t.[Description], t.[UpdatedBy], t.[UpdatedOn]
	from [cdc].[dbo_GLProductLines_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_GLProductLines', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_Incidents]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_Incidents]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [IncidentID], NULL as [RunID], NULL as [IncidentNumber], NULL as [CreateDate], NULL as [FailureDate], NULL as [FieldSummary], NULL as [FieldSurfCheckSummary], NULL as [IsOpen], NULL as [AcceptedLostTime], NULL as [Dist_LWD], NULL as [Dist_DD], NULL as [Dist_MWD], NULL as [Dist_RSS], NULL as [Global_LWD], NULL as [Global_DD], NULL as [Global_MWD], NULL as [Global_RSS], NULL as [Dist_SURVEY], NULL as [Global_SURVEY], NULL as [PreRunNumber], NULL as [MaxDoglegSeverity], NULL as [MaxWhirl], NULL as [MaxStickSlip], NULL as [RptPath], NULL as [CoreVersion], NULL as [IsHistorical], NULL as [IsDownHole], NULL as [ImportUserID], NULL as [ImportDate], NULL as [IsDeleted], NULL as [IsGFA], NULL as [Dist_SURFACE], NULL as [Global_SURFACE], NULL as [ClientNPT], NULL as [COF], NULL as [Criticality], NULL as [CPARId]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_Incidents', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[IncidentID], t.[RunID], t.[IncidentNumber], t.[CreateDate], t.[FailureDate], t.[FieldSummary], t.[FieldSurfCheckSummary], t.[IsOpen], t.[AcceptedLostTime], t.[Dist_LWD], t.[Dist_DD], t.[Dist_MWD], t.[Dist_RSS], t.[Global_LWD], t.[Global_DD], t.[Global_MWD], t.[Global_RSS], t.[Dist_SURVEY], t.[Global_SURVEY], t.[PreRunNumber], t.[MaxDoglegSeverity], t.[MaxWhirl], t.[MaxStickSlip], t.[RptPath], t.[CoreVersion], t.[IsHistorical], t.[IsDownHole], t.[ImportUserID], t.[ImportDate], t.[IsDeleted], t.[IsGFA], t.[Dist_SURFACE], t.[Global_SURFACE], t.[ClientNPT], t.[COF], t.[Criticality], t.[CPARId]
	from [cdc].[dbo_Incidents_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_Incidents', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[IncidentID], t.[RunID], t.[IncidentNumber], t.[CreateDate], t.[FailureDate], t.[FieldSummary], t.[FieldSurfCheckSummary], t.[IsOpen], t.[AcceptedLostTime], t.[Dist_LWD], t.[Dist_DD], t.[Dist_MWD], t.[Dist_RSS], t.[Global_LWD], t.[Global_DD], t.[Global_MWD], t.[Global_RSS], t.[Dist_SURVEY], t.[Global_SURVEY], t.[PreRunNumber], t.[MaxDoglegSeverity], t.[MaxWhirl], t.[MaxStickSlip], t.[RptPath], t.[CoreVersion], t.[IsHistorical], t.[IsDownHole], t.[ImportUserID], t.[ImportDate], t.[IsDeleted], t.[IsGFA], t.[Dist_SURFACE], t.[Global_SURFACE], t.[ClientNPT], t.[COF], t.[Criticality], t.[CPARId]
	from [cdc].[dbo_Incidents_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_Incidents', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_ItemNumReferences]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_ItemNumReferences]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [ItemNumReferenceId], NULL as [ItemNum], NULL as [RefItemNum], NULL as [RefType], NULL as [Source]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_ItemNumReferences', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[ItemNumReferenceId], t.[ItemNum], t.[RefItemNum], t.[RefType], t.[Source]
	from [cdc].[dbo_ItemNumReferences_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_ItemNumReferences', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[ItemNumReferenceId], t.[ItemNum], t.[RefItemNum], t.[RefType], t.[Source]
	from [cdc].[dbo_ItemNumReferences_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_ItemNumReferences', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_ItemNums]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_ItemNums]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [ItemNumId], NULL as [ItemNum], NULL as [ItemNum2], NULL as [ItemNum3], NULL as [LegacyNum], NULL as [DescShort], NULL as [DescLong], NULL as [DefaultUOM], NULL as [PartClassification], NULL as [Revision], NULL as [DescDocNum], NULL as [ToolPanel], NULL as [ToolCode], NULL as [PartCode], NULL as [Critical], NULL as [IsObsolete], NULL as [IsRestrictPurchasing], NULL as [IsAsset], NULL as [DefaultSerialProfile], NULL as [StockType], NULL as [ProductLine], NULL as [ServiceLine], NULL as [PartTypeId], NULL as [Active], NULL as [LastEdit], NULL as [DateAdded], NULL as [TEROrderMultiple], NULL as [IsHazMat], NULL as [ToolPerJob], NULL as [Size], NULL as [JDEGLCode], NULL as [StdUnitCost], NULL as [DepreciationCost], NULL as [NetWeight], NULL as [EcnRestriction]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_ItemNums', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[ItemNumId], t.[ItemNum], t.[ItemNum2], t.[ItemNum3], t.[LegacyNum], t.[DescShort], t.[DescLong], t.[DefaultUOM], t.[PartClassification], t.[Revision], t.[DescDocNum], t.[ToolPanel], t.[ToolCode], t.[PartCode], t.[Critical], t.[IsObsolete], t.[IsRestrictPurchasing], t.[IsAsset], t.[DefaultSerialProfile], t.[StockType], t.[ProductLine], t.[ServiceLine], t.[PartTypeId], t.[Active], t.[LastEdit], t.[DateAdded], t.[TEROrderMultiple], t.[IsHazMat], t.[ToolPerJob], t.[Size], t.[JDEGLCode], t.[StdUnitCost], t.[DepreciationCost], t.[NetWeight], t.[EcnRestriction]
	from [cdc].[dbo_ItemNums_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_ItemNums', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[ItemNumId], t.[ItemNum], t.[ItemNum2], t.[ItemNum3], t.[LegacyNum], t.[DescShort], t.[DescLong], t.[DefaultUOM], t.[PartClassification], t.[Revision], t.[DescDocNum], t.[ToolPanel], t.[ToolCode], t.[PartCode], t.[Critical], t.[IsObsolete], t.[IsRestrictPurchasing], t.[IsAsset], t.[DefaultSerialProfile], t.[StockType], t.[ProductLine], t.[ServiceLine], t.[PartTypeId], t.[Active], t.[LastEdit], t.[DateAdded], t.[TEROrderMultiple], t.[IsHazMat], t.[ToolPerJob], t.[Size], t.[JDEGLCode], t.[StdUnitCost], t.[DepreciationCost], t.[NetWeight], t.[EcnRestriction]
	from [cdc].[dbo_ItemNums_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_ItemNums', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_PartDescPFTConfigs]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_PartDescPFTConfigs]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [PartDescPFTConfigID], NULL as [ItemNum], NULL as [PFTConfigID], NULL as [PFTType], NULL as [CreatedOn]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_PartDescPFTConfigs', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[PartDescPFTConfigID], t.[ItemNum], t.[PFTConfigID], t.[PFTType], t.[CreatedOn]
	from [cdc].[dbo_PartDescPFTConfigs_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_PartDescPFTConfigs', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[PartDescPFTConfigID], t.[ItemNum], t.[PFTConfigID], t.[PFTType], t.[CreatedOn]
	from [cdc].[dbo_PartDescPFTConfigs_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_PartDescPFTConfigs', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_PartStatus]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_PartStatus]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [PartStatusId], NULL as [Status], NULL as [Code], NULL as [ErpStatusCode], NULL as [IsSrcWorkOrder], NULL as [IsDestWorkOrder], NULL as [IsSrcWorkOrderChild], NULL as [IsDestWorkOrderChild], NULL as [IsSrcDispatch], NULL as [IsDestDispatch], NULL as [IsSrcAIRT], NULL as [IsDestAIRT], NULL as [IsSrcPFT], NULL as [IsDestPFT], NULL as [IsSrcBuildSheet], NULL as [IsDestBuildSheet], NULL as [IsActive], NULL as [IsAssigned], NULL as [IsAvailable], NULL as [IsDisposed], NULL as [IsTesting], NULL as [IsRepair], NULL as [IsTransit], NULL as [IsParked], NULL as [IsOther], NULL as [IsSrcStatus], NULL as [IsDestStatus], NULL as [IsInActive], NULL as [IsTrend]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_PartStatus', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[PartStatusId], t.[Status], t.[Code], t.[ErpStatusCode], t.[IsSrcWorkOrder], t.[IsDestWorkOrder], t.[IsSrcWorkOrderChild], t.[IsDestWorkOrderChild], t.[IsSrcDispatch], t.[IsDestDispatch], t.[IsSrcAIRT], t.[IsDestAIRT], t.[IsSrcPFT], t.[IsDestPFT], t.[IsSrcBuildSheet], t.[IsDestBuildSheet], t.[IsActive], t.[IsAssigned], t.[IsAvailable], t.[IsDisposed], t.[IsTesting], t.[IsRepair], t.[IsTransit], t.[IsParked], t.[IsOther], t.[IsSrcStatus], t.[IsDestStatus], t.[IsInActive], t.[IsTrend]
	from [cdc].[dbo_PartStatus_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_PartStatus', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[PartStatusId], t.[Status], t.[Code], t.[ErpStatusCode], t.[IsSrcWorkOrder], t.[IsDestWorkOrder], t.[IsSrcWorkOrderChild], t.[IsDestWorkOrderChild], t.[IsSrcDispatch], t.[IsDestDispatch], t.[IsSrcAIRT], t.[IsDestAIRT], t.[IsSrcPFT], t.[IsDestPFT], t.[IsSrcBuildSheet], t.[IsDestBuildSheet], t.[IsActive], t.[IsAssigned], t.[IsAvailable], t.[IsDisposed], t.[IsTesting], t.[IsRepair], t.[IsTransit], t.[IsParked], t.[IsOther], t.[IsSrcStatus], t.[IsDestStatus], t.[IsInActive], t.[IsTrend]
	from [cdc].[dbo_PartStatus_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_PartStatus', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_PFTConfig]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_PFTConfig]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [PFTConfigId], NULL as [ProcessName], NULL as [ProcessDesc], NULL as [IsDynamic], NULL as [DateAdded], NULL as [IsObsolete], NULL as [PFTObjectId], NULL as [ObjectNumber]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTConfig', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[PFTConfigId], t.[ProcessName], t.[ProcessDesc], t.[IsDynamic], t.[DateAdded], t.[IsObsolete], t.[PFTObjectId], t.[ObjectNumber]
	from [cdc].[dbo_PFTConfig_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTConfig', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[PFTConfigId], t.[ProcessName], t.[ProcessDesc], t.[IsDynamic], t.[DateAdded], t.[IsObsolete], t.[PFTObjectId], t.[ObjectNumber]
	from [cdc].[dbo_PFTConfig_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTConfig', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_PFTObjects]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_PFTObjects]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [ObjectId], NULL as [ObjectNumber], NULL as [Revision], NULL as [Type], NULL as [Name], NULL as [Description], NULL as [ProductLineId], NULL as [State], NULL as [Field1], NULL as [Field2], NULL as [Field3], NULL as [Field4], NULL as [Field5], NULL as [CreatedBy], NULL as [CreatedOn], NULL as [UpdatedBy], NULL as [UpdatedOn], NULL as [ReasonForChange], NULL as [Field6], NULL as [Field7], NULL as [Field8], NULL as [Field9], NULL as [Field10], NULL as [Field11], NULL as [Field12], NULL as [Field13], NULL as [Field14], NULL as [Field15]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTObjects', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[ObjectId], t.[ObjectNumber], t.[Revision], t.[Type], t.[Name], t.[Description], t.[ProductLineId], t.[State], t.[Field1], t.[Field2], t.[Field3], t.[Field4], t.[Field5], t.[CreatedBy], t.[CreatedOn], t.[UpdatedBy], t.[UpdatedOn], t.[ReasonForChange], t.[Field6], t.[Field7], t.[Field8], t.[Field9], t.[Field10], t.[Field11], t.[Field12], t.[Field13], t.[Field14], t.[Field15]
	from [cdc].[dbo_PFTObjects_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTObjects', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[ObjectId], t.[ObjectNumber], t.[Revision], t.[Type], t.[Name], t.[Description], t.[ProductLineId], t.[State], t.[Field1], t.[Field2], t.[Field3], t.[Field4], t.[Field5], t.[CreatedBy], t.[CreatedOn], t.[UpdatedBy], t.[UpdatedOn], t.[ReasonForChange], t.[Field6], t.[Field7], t.[Field8], t.[Field9], t.[Field10], t.[Field11], t.[Field12], t.[Field13], t.[Field14], t.[Field15]
	from [cdc].[dbo_PFTObjects_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTObjects', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_PFTWO]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_PFTWO]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [PFTWOId], NULL as [WO_NO], NULL as [WorkOrderId], NULL as [BranchPlant], NULL as [FixedAssetId], NULL as [AssetNumber], NULL as [ItemNum], NULL as [PFTConfigId], NULL as [Active], NULL as [CurPFTWOSeqId], NULL as [UserIdAdded], NULL as [Revision], NULL as [IsDynamic], NULL as [ReferenceDocs], NULL as [SerialNum], NULL as [IncidentNum], NULL as [JobNum], NULL as [Combo], NULL as [IsDebug], NULL as [IsRTV], NULL as [DateAdded], NULL as [PFTType], NULL as [FWSensorId], NULL as [SensorName], NULL as [NCRRequestId], NULL as [JDEWorkOrderNum], NULL as [AssetRepairTrackId], NULL as [UpdatedBy], NULL as [ReasonForChange]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTWO', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[PFTWOId], t.[WO_NO], t.[WorkOrderId], t.[BranchPlant], t.[FixedAssetId], t.[AssetNumber], t.[ItemNum], t.[PFTConfigId], t.[Active], t.[CurPFTWOSeqId], t.[UserIdAdded], t.[Revision], t.[IsDynamic], t.[ReferenceDocs], t.[SerialNum], t.[IncidentNum], t.[JobNum], t.[Combo], t.[IsDebug], t.[IsRTV], t.[DateAdded], t.[PFTType], t.[FWSensorId], t.[SensorName], t.[NCRRequestId], t.[JDEWorkOrderNum], t.[AssetRepairTrackId], t.[UpdatedBy], t.[ReasonForChange]
	from [cdc].[dbo_PFTWO_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTWO', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[PFTWOId], t.[WO_NO], t.[WorkOrderId], t.[BranchPlant], t.[FixedAssetId], t.[AssetNumber], t.[ItemNum], t.[PFTConfigId], t.[Active], t.[CurPFTWOSeqId], t.[UserIdAdded], t.[Revision], t.[IsDynamic], t.[ReferenceDocs], t.[SerialNum], t.[IncidentNum], t.[JobNum], t.[Combo], t.[IsDebug], t.[IsRTV], t.[DateAdded], t.[PFTType], t.[FWSensorId], t.[SensorName], t.[NCRRequestId], t.[JDEWorkOrderNum], t.[AssetRepairTrackId], t.[UpdatedBy], t.[ReasonForChange]
	from [cdc].[dbo_PFTWO_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTWO', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_PFTWOSeq]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_PFTWOSeq]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [PFTWOSeqId], NULL as [PFTWOId], NULL as [PFTConfigSeqId], NULL as [PFTResult], NULL as [FailureCode], NULL as [FailureComponent], NULL as [Comment], NULL as [Hours], NULL as [UserName], NULL as [UserId], NULL as [NCRRequestId], NULL as [IsDebug], NULL as [IsRTV], NULL as [DateAdded]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTWOSeq', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[PFTWOSeqId], t.[PFTWOId], t.[PFTConfigSeqId], t.[PFTResult], t.[FailureCode], t.[FailureComponent], t.[Comment], t.[Hours], t.[UserName], t.[UserId], t.[NCRRequestId], t.[IsDebug], t.[IsRTV], t.[DateAdded]
	from [cdc].[dbo_PFTWOSeq_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTWOSeq', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[PFTWOSeqId], t.[PFTWOId], t.[PFTConfigSeqId], t.[PFTResult], t.[FailureCode], t.[FailureComponent], t.[Comment], t.[Hours], t.[UserName], t.[UserId], t.[NCRRequestId], t.[IsDebug], t.[IsRTV], t.[DateAdded]
	from [cdc].[dbo_PFTWOSeq_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTWOSeq', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_RelBusinessIntelligenceDataSet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_RelBusinessIntelligenceDataSet]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [RunId], NULL as [RunYear], NULL as [RunMonth], NULL as [RunMonthName], NULL as [Quarter], NULL as [MonthYear], NULL as [Region], NULL as [Country], NULL as [District], NULL as [CustomerID], NULL as [Hemisphere], NULL as [RegionDesc], NULL as [DistrictDesc], NULL as [CustomerName], NULL as [JobNumber], NULL as [Rig], NULL as [TFF], NULL as [CSI], NULL as [NCI], NULL as [OS], NULL as [PR], NULL as [Others], NULL as [GFA], NULL as [NonTFFRun], NULL as [NPT], NULL as [NPTRun], NULL as [NonNPTRun], NULL as [NPTRunNoTFF], NULL as [CIRunNoNPT], NULL as [GoodRun], NULL as [B2B], NULL as [MaxTempF], NULL as [MaxTempWindowF], NULL as [MaxTempC], NULL as [MaxTempWindowC], NULL as [OperHrs], NULL as [CircHrs], NULL as [DrillHrs], NULL as [CircHrsWindow], NULL as [Less30CircHrEvents], NULL as [Less30CircHr], NULL as [LWD], NULL as [HELEM], NULL as [EM], NULL as [PP], NULL as [RSS], NULL as [MotorWFT], NULL as [RentalMotor], NULL as [AllMWD], NULL as [BECFIELD], NULL as [TENSOR], NULL as [GEOLINK], NULL as [Well], NULL as [RunNumber], NULL as [RunNumberCnt], NULL as [OffShore], NULL as [InHoleDate], NULL as [EndDate], NULL as [OutHoleDate], NULL as [TFFToolString], NULL as [TFFComponentID], NULL as [TFFComponent], NULL as [TFFComponentDesc], NULL as [TFFSerialNumber], NULL as [Greater30HrsNPTEvents], NULL as [Greater30HrNPTHrs], NULL as [Is3030], NULL as [Non3030], NULL as [RMReportStatus], NULL as [MDStart], NULL as [MDEnd], NULL as [MDEndWindow], NULL as [MDDistance], NULL as [TVDStart], NULL as [TVDEnd], NULL as [HoleSize], NULL as [HoleSizeWindow], NULL as [MaxHydrostaticPressure], NULL as [MaxOperPressure], NULL as [MaxObservedPressure], NULL as [MudDensity], NULL as [BaseFluidEnd], NULL as [MaxDoglegRotating], NULL as [MaxDoglegRotatingWindow], NULL as [MaxDoglegSliding], NULL as [MaxDoglegSlidingWindow], NULL as [MaxInc], NULL as [FlowRate], NULL as [MotorSerialNumber], NULL as [MotorSize], NULL as [MotorLength], NULL as [MotorType], NULL as [Manufacturer], NULL as [LobesRS], NULL as [MotorRPM], NULL as [MotorOnBottom], NULL as [MotorOffBottom], NULL as [MotorDifferential], NULL as [Tools], NULL as [ToolSize], NULL as [CountryDesc], NULL as [FieldSymptom], NULL as [FieldSymptom2], NULL as [RSSFailureTFF], NULL as [RSSFailureCSI], NULL as [RSSNPTnonTFF], NULL as [TotalRSSNPTTFF], NULL as [RSSOT], NULL as [LWDFailureTFF], NULL as [LWDFailureCSI], NULL as [LWDNPTTFF], NULL as [LWDNPTnonTFF], NULL as [TotalLWDNPT], NULL as [LWDOT], NULL as [CompFailureCode], NULL as [CompFailureCodeDesc], NULL as [OutOfSpecCode], NULL as [OutOfSpecCodeDesc], NULL as [OSNPT], NULL as [ProceduralCode], NULL as [ProceduralCodeDesc], NULL as [PRModes], NULL as [PRNPT], NULL as [AverageROP], NULL as [RunLeadEngineers], NULL as [RunEngineers], NULL as [Pulser (AES)], NULL as [Driver Insert], NULL as [IDS], NULL as [Gamma Ray Insert], NULL as [HAGR], NULL as [SAGR], NULL as [LWDGammaCombine], NULL as [MFR Collar], NULL as [Azimuthal MFR], NULL as [MFRCombine], NULL as [Neutron Insert], NULL as [Density Insert], NULL as [NeutronDensityCombine], NULL as [Collar, SST Sensor], NULL as [BAP Insert], NULL as [Battery High Temp], NULL as [Battery IBM], NULL as [Battery Low Temp], NULL as [Battery Medium Temp], NULL as [LWDBatteryCombine], NULL as [Battery, Formation Tester], NULL as [Bias Unit], NULL as [Controller Insert], NULL as [Collar, Formation Tester], NULL as [Compensation Assembly], NULL as [TVM], NULL as [LWDDirOnly], NULL as [LWDDirGam], NULL as [LWDDirGamMFRCombo], NULL as [LWDTripleCombo], NULL as [LWDQuadCombo], NULL as [MWD Pulser (AES)], NULL as [MWD Pulser 2"], NULL as [MWDPulserCombine], NULL as [Control Module Sonde], NULL as [BTR], NULL as [CDS], NULL as [CDST (Clever Deviation Sonde Top Mounted)], NULL as [GRG4], NULL as [Oriented Gamma Ray], NULL as [UGR], NULL as [MWDGammaCombine], NULL as [MWD Battery High Temp], NULL as [MWD Battery Low Temp], NULL as [MWDBatteryCombine], NULL as [CSGX], NULL as [Gabis], NULL as [Gabis Battery], NULL as [Inclination Sonde], NULL as [EMDirOnly], NULL as [EMDirGam], NULL as [PPDirOnly], NULL as [PPDirGam], NULL as [TotalComponentCount], NULL as [TotalCSICount], NULL as [TotalNCICount], NULL as [SolidPercentageMax], NULL as [SandPercentageMax], NULL as [WaterPercentageMax], NULL as [OilPercentageMax], NULL as [pHMax], NULL as [RotatingHrs], NULL as [ReasonsForPooh], NULL as [WaterDepth], NULL as [BitDeltaP], NULL as [WeightOnBit], NULL as [Torque], NULL as [SurfaceRPM], NULL as [UnderBalanced], NULL as [GasFlowRate], NULL as [SPP], NULL as [OrificeSize], NULL as [Latitude], NULL as [Longitude], NULL as [LocationCountry], NULL as [LocationState], NULL as [LocationCounty], NULL as [MotorFailureTFF], NULL as [MotorFailureCSI], NULL as [MotorNPTTFF], NULL as [EMFailureTFF], NULL as [EMFailureCSI], NULL as [EMNPTTFF], NULL as [PPFailureTFF], NULL as [PPFailureCSI], NULL as [PPNPTTFF], NULL as [MWDFailureTFF], NULL as [MWDFailureCSI], NULL as [MWDNPTTFF], NULL as [MWDOT], NULL as [EMOT], NULL as [HPOT], NULL as [MotorOT], NULL as [IncidentId], NULL as [IncidentNumber], NULL as [FaultCodeLevelOne], NULL as [FaultCodeDescLevelOne], NULL as [FaultCodeLevelTwo], NULL as [FaultCodeDescLevelTwo], NULL as [FaultCodeLevelThree], NULL as [FaultCodeDescLevelThree], NULL as [FieldSummary], NULL as [FieldSymptomSummary], NULL as [LoadDate], NULL as [PulseCount], NULL as [RSSRevolutions], NULL as [GWD], NULL as [Crosswave], NULL as [CasingLink], NULL as [VMS], NULL as [DualIDS], NULL as [DualPulser], NULL as [ExtendedRange], NULL as [WPR], NULL as [DLC], NULL as [AdjustableGaugeStabilizer], NULL as [TBSMotorySteerable], NULL as [Geosteering], NULL as [RTOCMonitoring], NULL as [HeatWave], NULL as [HEX], NULL as [WptsReportId], NULL as [SMI], NULL as [AGS], NULL as [EMTwinwells], NULL as [JobStartDate], NULL as [JobEndDate], NULL as [JobEstEndDate], NULL as [Criticality], NULL as [TOTALRSSNPT], NULL as [X], NULL as [Y], NULL as [RssMagnus], NULL as [WptsCparId]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_RelBusinessIntelligenceDataSet', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[RunId], t.[RunYear], t.[RunMonth], t.[RunMonthName], t.[Quarter], t.[MonthYear], t.[Region], t.[Country], t.[District], t.[CustomerID], t.[Hemisphere], t.[RegionDesc], t.[DistrictDesc], t.[CustomerName], t.[JobNumber], t.[Rig], t.[TFF], t.[CSI], t.[NCI], t.[OS], t.[PR], t.[Others], t.[GFA], t.[NonTFFRun], t.[NPT], t.[NPTRun], t.[NonNPTRun], t.[NPTRunNoTFF], t.[CIRunNoNPT], t.[GoodRun], t.[B2B], t.[MaxTempF], t.[MaxTempWindowF], t.[MaxTempC], t.[MaxTempWindowC], t.[OperHrs], t.[CircHrs], t.[DrillHrs], t.[CircHrsWindow], t.[Less30CircHrEvents], t.[Less30CircHr], t.[LWD], t.[HELEM], t.[EM], t.[PP], t.[RSS], t.[MotorWFT], t.[RentalMotor], t.[AllMWD], t.[BECFIELD], t.[TENSOR], t.[GEOLINK], t.[Well], t.[RunNumber], t.[RunNumberCnt], t.[OffShore], t.[InHoleDate], t.[EndDate], t.[OutHoleDate], t.[TFFToolString], t.[TFFComponentID], t.[TFFComponent], t.[TFFComponentDesc], t.[TFFSerialNumber], t.[Greater30HrsNPTEvents], t.[Greater30HrNPTHrs], t.[Is3030], t.[Non3030], t.[RMReportStatus], t.[MDStart], t.[MDEnd], t.[MDEndWindow], t.[MDDistance], t.[TVDStart], t.[TVDEnd], t.[HoleSize], t.[HoleSizeWindow], t.[MaxHydrostaticPressure], t.[MaxOperPressure], t.[MaxObservedPressure], t.[MudDensity], t.[BaseFluidEnd], t.[MaxDoglegRotating], t.[MaxDoglegRotatingWindow], t.[MaxDoglegSliding], t.[MaxDoglegSlidingWindow], t.[MaxInc], t.[FlowRate], t.[MotorSerialNumber], t.[MotorSize], t.[MotorLength], t.[MotorType], t.[Manufacturer], t.[LobesRS], t.[MotorRPM], t.[MotorOnBottom], t.[MotorOffBottom], t.[MotorDifferential], t.[Tools], t.[ToolSize], t.[CountryDesc], t.[FieldSymptom], t.[FieldSymptom2], t.[RSSFailureTFF], t.[RSSFailureCSI], t.[RSSNPTnonTFF], t.[TotalRSSNPTTFF], t.[RSSOT], t.[LWDFailureTFF], t.[LWDFailureCSI], t.[LWDNPTTFF], t.[LWDNPTnonTFF], t.[TotalLWDNPT], t.[LWDOT], t.[CompFailureCode], t.[CompFailureCodeDesc], t.[OutOfSpecCode], t.[OutOfSpecCodeDesc], t.[OSNPT], t.[ProceduralCode], t.[ProceduralCodeDesc], t.[PRModes], t.[PRNPT], t.[AverageROP], t.[RunLeadEngineers], t.[RunEngineers], t.[Pulser (AES)], t.[Driver Insert], t.[IDS], t.[Gamma Ray Insert], t.[HAGR], t.[SAGR], t.[LWDGammaCombine], t.[MFR Collar], t.[Azimuthal MFR], t.[MFRCombine], t.[Neutron Insert], t.[Density Insert], t.[NeutronDensityCombine], t.[Collar, SST Sensor], t.[BAP Insert], t.[Battery High Temp], t.[Battery IBM], t.[Battery Low Temp], t.[Battery Medium Temp], t.[LWDBatteryCombine], t.[Battery, Formation Tester], t.[Bias Unit], t.[Controller Insert], t.[Collar, Formation Tester], t.[Compensation Assembly], t.[TVM], t.[LWDDirOnly], t.[LWDDirGam], t.[LWDDirGamMFRCombo], t.[LWDTripleCombo], t.[LWDQuadCombo], t.[MWD Pulser (AES)], t.[MWD Pulser 2"], t.[MWDPulserCombine], t.[Control Module Sonde], t.[BTR], t.[CDS], t.[CDST (Clever Deviation Sonde Top Mounted)], t.[GRG4], t.[Oriented Gamma Ray], t.[UGR], t.[MWDGammaCombine], t.[MWD Battery High Temp], t.[MWD Battery Low Temp], t.[MWDBatteryCombine], t.[CSGX], t.[Gabis], t.[Gabis Battery], t.[Inclination Sonde], t.[EMDirOnly], t.[EMDirGam], t.[PPDirOnly], t.[PPDirGam], t.[TotalComponentCount], t.[TotalCSICount], t.[TotalNCICount], t.[SolidPercentageMax], t.[SandPercentageMax], t.[WaterPercentageMax], t.[OilPercentageMax], t.[pHMax], t.[RotatingHrs], t.[ReasonsForPooh], t.[WaterDepth], t.[BitDeltaP], t.[WeightOnBit], t.[Torque], t.[SurfaceRPM], t.[UnderBalanced], t.[GasFlowRate], t.[SPP], t.[OrificeSize], t.[Latitude], t.[Longitude], t.[LocationCountry], t.[LocationState], t.[LocationCounty], t.[MotorFailureTFF], t.[MotorFailureCSI], t.[MotorNPTTFF], t.[EMFailureTFF], t.[EMFailureCSI], t.[EMNPTTFF], t.[PPFailureTFF], t.[PPFailureCSI], t.[PPNPTTFF], t.[MWDFailureTFF], t.[MWDFailureCSI], t.[MWDNPTTFF], t.[MWDOT], t.[EMOT], t.[HPOT], t.[MotorOT], t.[IncidentId], t.[IncidentNumber], t.[FaultCodeLevelOne], t.[FaultCodeDescLevelOne], t.[FaultCodeLevelTwo], t.[FaultCodeDescLevelTwo], t.[FaultCodeLevelThree], t.[FaultCodeDescLevelThree], t.[FieldSummary], t.[FieldSymptomSummary], t.[LoadDate], t.[PulseCount], t.[RSSRevolutions], t.[GWD], t.[Crosswave], t.[CasingLink], t.[VMS], t.[DualIDS], t.[DualPulser], t.[ExtendedRange], t.[WPR], t.[DLC], t.[AdjustableGaugeStabilizer], t.[TBSMotorySteerable], t.[Geosteering], t.[RTOCMonitoring], t.[HeatWave], t.[HEX], t.[WptsReportId], t.[SMI], t.[AGS], t.[EMTwinwells], t.[JobStartDate], t.[JobEndDate], t.[JobEstEndDate], t.[Criticality], t.[TOTALRSSNPT], t.[X], t.[Y], t.[RssMagnus], t.[WptsCparId]
	from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_RelBusinessIntelligenceDataSet', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[RunId], t.[RunYear], t.[RunMonth], t.[RunMonthName], t.[Quarter], t.[MonthYear], t.[Region], t.[Country], t.[District], t.[CustomerID], t.[Hemisphere], t.[RegionDesc], t.[DistrictDesc], t.[CustomerName], t.[JobNumber], t.[Rig], t.[TFF], t.[CSI], t.[NCI], t.[OS], t.[PR], t.[Others], t.[GFA], t.[NonTFFRun], t.[NPT], t.[NPTRun], t.[NonNPTRun], t.[NPTRunNoTFF], t.[CIRunNoNPT], t.[GoodRun], t.[B2B], t.[MaxTempF], t.[MaxTempWindowF], t.[MaxTempC], t.[MaxTempWindowC], t.[OperHrs], t.[CircHrs], t.[DrillHrs], t.[CircHrsWindow], t.[Less30CircHrEvents], t.[Less30CircHr], t.[LWD], t.[HELEM], t.[EM], t.[PP], t.[RSS], t.[MotorWFT], t.[RentalMotor], t.[AllMWD], t.[BECFIELD], t.[TENSOR], t.[GEOLINK], t.[Well], t.[RunNumber], t.[RunNumberCnt], t.[OffShore], t.[InHoleDate], t.[EndDate], t.[OutHoleDate], t.[TFFToolString], t.[TFFComponentID], t.[TFFComponent], t.[TFFComponentDesc], t.[TFFSerialNumber], t.[Greater30HrsNPTEvents], t.[Greater30HrNPTHrs], t.[Is3030], t.[Non3030], t.[RMReportStatus], t.[MDStart], t.[MDEnd], t.[MDEndWindow], t.[MDDistance], t.[TVDStart], t.[TVDEnd], t.[HoleSize], t.[HoleSizeWindow], t.[MaxHydrostaticPressure], t.[MaxOperPressure], t.[MaxObservedPressure], t.[MudDensity], t.[BaseFluidEnd], t.[MaxDoglegRotating], t.[MaxDoglegRotatingWindow], t.[MaxDoglegSliding], t.[MaxDoglegSlidingWindow], t.[MaxInc], t.[FlowRate], t.[MotorSerialNumber], t.[MotorSize], t.[MotorLength], t.[MotorType], t.[Manufacturer], t.[LobesRS], t.[MotorRPM], t.[MotorOnBottom], t.[MotorOffBottom], t.[MotorDifferential], t.[Tools], t.[ToolSize], t.[CountryDesc], t.[FieldSymptom], t.[FieldSymptom2], t.[RSSFailureTFF], t.[RSSFailureCSI], t.[RSSNPTnonTFF], t.[TotalRSSNPTTFF], t.[RSSOT], t.[LWDFailureTFF], t.[LWDFailureCSI], t.[LWDNPTTFF], t.[LWDNPTnonTFF], t.[TotalLWDNPT], t.[LWDOT], t.[CompFailureCode], t.[CompFailureCodeDesc], t.[OutOfSpecCode], t.[OutOfSpecCodeDesc], t.[OSNPT], t.[ProceduralCode], t.[ProceduralCodeDesc], t.[PRModes], t.[PRNPT], t.[AverageROP], t.[RunLeadEngineers], t.[RunEngineers], t.[Pulser (AES)], t.[Driver Insert], t.[IDS], t.[Gamma Ray Insert], t.[HAGR], t.[SAGR], t.[LWDGammaCombine], t.[MFR Collar], t.[Azimuthal MFR], t.[MFRCombine], t.[Neutron Insert], t.[Density Insert], t.[NeutronDensityCombine], t.[Collar, SST Sensor], t.[BAP Insert], t.[Battery High Temp], t.[Battery IBM], t.[Battery Low Temp], t.[Battery Medium Temp], t.[LWDBatteryCombine], t.[Battery, Formation Tester], t.[Bias Unit], t.[Controller Insert], t.[Collar, Formation Tester], t.[Compensation Assembly], t.[TVM], t.[LWDDirOnly], t.[LWDDirGam], t.[LWDDirGamMFRCombo], t.[LWDTripleCombo], t.[LWDQuadCombo], t.[MWD Pulser (AES)], t.[MWD Pulser 2"], t.[MWDPulserCombine], t.[Control Module Sonde], t.[BTR], t.[CDS], t.[CDST (Clever Deviation Sonde Top Mounted)], t.[GRG4], t.[Oriented Gamma Ray], t.[UGR], t.[MWDGammaCombine], t.[MWD Battery High Temp], t.[MWD Battery Low Temp], t.[MWDBatteryCombine], t.[CSGX], t.[Gabis], t.[Gabis Battery], t.[Inclination Sonde], t.[EMDirOnly], t.[EMDirGam], t.[PPDirOnly], t.[PPDirGam], t.[TotalComponentCount], t.[TotalCSICount], t.[TotalNCICount], t.[SolidPercentageMax], t.[SandPercentageMax], t.[WaterPercentageMax], t.[OilPercentageMax], t.[pHMax], t.[RotatingHrs], t.[ReasonsForPooh], t.[WaterDepth], t.[BitDeltaP], t.[WeightOnBit], t.[Torque], t.[SurfaceRPM], t.[UnderBalanced], t.[GasFlowRate], t.[SPP], t.[OrificeSize], t.[Latitude], t.[Longitude], t.[LocationCountry], t.[LocationState], t.[LocationCounty], t.[MotorFailureTFF], t.[MotorFailureCSI], t.[MotorNPTTFF], t.[EMFailureTFF], t.[EMFailureCSI], t.[EMNPTTFF], t.[PPFailureTFF], t.[PPFailureCSI], t.[PPNPTTFF], t.[MWDFailureTFF], t.[MWDFailureCSI], t.[MWDNPTTFF], t.[MWDOT], t.[EMOT], t.[HPOT], t.[MotorOT], t.[IncidentId], t.[IncidentNumber], t.[FaultCodeLevelOne], t.[FaultCodeDescLevelOne], t.[FaultCodeLevelTwo], t.[FaultCodeDescLevelTwo], t.[FaultCodeLevelThree], t.[FaultCodeDescLevelThree], t.[FieldSummary], t.[FieldSymptomSummary], t.[LoadDate], t.[PulseCount], t.[RSSRevolutions], t.[GWD], t.[Crosswave], t.[CasingLink], t.[VMS], t.[DualIDS], t.[DualPulser], t.[ExtendedRange], t.[WPR], t.[DLC], t.[AdjustableGaugeStabilizer], t.[TBSMotorySteerable], t.[Geosteering], t.[RTOCMonitoring], t.[HeatWave], t.[HEX], t.[WptsReportId], t.[SMI], t.[AGS], t.[EMTwinwells], t.[JobStartDate], t.[JobEndDate], t.[JobEstEndDate], t.[Criticality], t.[TOTALRSSNPT], t.[X], t.[Y], t.[RssMagnus], t.[WptsCparId]
	from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_RelBusinessIntelligenceDataSet', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_SelectOptions]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_SelectOptions]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [SelectOptionId], NULL as [SelectName], NULL as [OptionValue], NULL as [OptionLabel], NULL as [SortOrder], NULL as [Attribute1], NULL as [Attribute2], NULL as [Attribute3]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_SelectOptions', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[SelectOptionId], t.[SelectName], t.[OptionValue], t.[OptionLabel], t.[SortOrder], t.[Attribute1], t.[Attribute2], t.[Attribute3]
	from [cdc].[dbo_SelectOptions_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_SelectOptions', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[SelectOptionId], t.[SelectName], t.[OptionValue], t.[OptionLabel], t.[SortOrder], t.[Attribute1], t.[Attribute2], t.[Attribute3]
	from [cdc].[dbo_SelectOptions_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_SelectOptions', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_ToolStringFixedAssets]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_ToolStringFixedAssets]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [ToolStringFixedAssetsId], NULL as [ToolStringID], NULL as [FixedAssetID], NULL as [SerialNum], NULL as [RNItemNum], NULL as [InventoryItemNum], NULL as [PartTypeID], NULL as [OrderPosition], NULL as [SortNumber], NULL as [Revision], NULL as [ToolCode], NULL as [MasterFirmwareRevision], NULL as [CustomProperty], NULL as [DateAdded], NULL as [Description], NULL as [ContainerId], NULL as [Comments]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_ToolStringFixedAssets', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[ToolStringFixedAssetsId], t.[ToolStringID], t.[FixedAssetID], t.[SerialNum], t.[RNItemNum], t.[InventoryItemNum], t.[PartTypeID], t.[OrderPosition], t.[SortNumber], t.[Revision], t.[ToolCode], t.[MasterFirmwareRevision], t.[CustomProperty], t.[DateAdded], t.[Description], t.[ContainerId], t.[Comments]
	from [cdc].[dbo_ToolStringFixedAssets_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_ToolStringFixedAssets', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[ToolStringFixedAssetsId], t.[ToolStringID], t.[FixedAssetID], t.[SerialNum], t.[RNItemNum], t.[InventoryItemNum], t.[PartTypeID], t.[OrderPosition], t.[SortNumber], t.[Revision], t.[ToolCode], t.[MasterFirmwareRevision], t.[CustomProperty], t.[DateAdded], t.[Description], t.[ContainerId], t.[Comments]
	from [cdc].[dbo_ToolStringFixedAssets_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_ToolStringFixedAssets', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_ToolStrings]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_ToolStrings]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [ToolStringId], NULL as [SerialNumber], NULL as [Description], NULL as [CreatedBy], NULL as [SizeId], NULL as [ToolYear], NULL as [District], NULL as [BuildNumber], NULL as [ToolMod], NULL as [Disassembled], NULL as [DisassembledDate], NULL as [CheckSum], NULL as [Type], NULL as [Length], NULL as [LengthUOM], NULL as [CollarID], NULL as [CollarIDUOM], NULL as [CollarOD], NULL as [CollarODUOM], NULL as [StabilizerBladeOD], NULL as [StabilizerBladeODUOM], NULL as [ConnectionTypeTop], NULL as [ConnectionTypeBottom], NULL as [KitNumber], NULL as [IsLatestKitNumber], NULL as [IsTurnaround], NULL as [MotorType], NULL as [MotorProperty], NULL as [WorkOrderNum], NULL as [MotorSerial], NULL as [ConnectionTopSize], NULL as [ConnectionTopSizeUOM], NULL as [ConnectionBottomSize], NULL as [ConnectionBottomSizeUOM], NULL as [Service], NULL as [BearingPackConfig], NULL as [PowerSectionConfig], NULL as [RMManufacturer], NULL as [RMType], NULL as [RMMidBodyStabSize], NULL as [RMSerialNum], NULL as [RMLobes], NULL as [RMStages], NULL as [CreateDate], NULL as [CreateUserId], NULL as [UpdateDate], NULL as [UpdateUserId], NULL as [IsDeleted], NULL as [EDP], NULL as [LegacyCheckSum], NULL as [Comments], NULL as [ProductLineId], NULL as [TemplateId], NULL as [MasterTemplateID], NULL as [Status], NULL as [Name], NULL as [IsLocked], NULL as [LockedBy]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_ToolStrings', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[ToolStringId], t.[SerialNumber], t.[Description], t.[CreatedBy], t.[SizeId], t.[ToolYear], t.[District], t.[BuildNumber], t.[ToolMod], t.[Disassembled], t.[DisassembledDate], t.[CheckSum], t.[Type], t.[Length], t.[LengthUOM], t.[CollarID], t.[CollarIDUOM], t.[CollarOD], t.[CollarODUOM], t.[StabilizerBladeOD], t.[StabilizerBladeODUOM], t.[ConnectionTypeTop], t.[ConnectionTypeBottom], t.[KitNumber], t.[IsLatestKitNumber], t.[IsTurnaround], t.[MotorType], t.[MotorProperty], t.[WorkOrderNum], t.[MotorSerial], t.[ConnectionTopSize], t.[ConnectionTopSizeUOM], t.[ConnectionBottomSize], t.[ConnectionBottomSizeUOM], t.[Service], t.[BearingPackConfig], t.[PowerSectionConfig], t.[RMManufacturer], t.[RMType], t.[RMMidBodyStabSize], t.[RMSerialNum], t.[RMLobes], t.[RMStages], t.[CreateDate], t.[CreateUserId], t.[UpdateDate], t.[UpdateUserId], t.[IsDeleted], t.[EDP], t.[LegacyCheckSum], t.[Comments], t.[ProductLineId], t.[TemplateId], t.[MasterTemplateID], t.[Status], t.[Name], t.[IsLocked], t.[LockedBy]
	from [cdc].[dbo_ToolStrings_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_ToolStrings', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[ToolStringId], t.[SerialNumber], t.[Description], t.[CreatedBy], t.[SizeId], t.[ToolYear], t.[District], t.[BuildNumber], t.[ToolMod], t.[Disassembled], t.[DisassembledDate], t.[CheckSum], t.[Type], t.[Length], t.[LengthUOM], t.[CollarID], t.[CollarIDUOM], t.[CollarOD], t.[CollarODUOM], t.[StabilizerBladeOD], t.[StabilizerBladeODUOM], t.[ConnectionTypeTop], t.[ConnectionTypeBottom], t.[KitNumber], t.[IsLatestKitNumber], t.[IsTurnaround], t.[MotorType], t.[MotorProperty], t.[WorkOrderNum], t.[MotorSerial], t.[ConnectionTopSize], t.[ConnectionTopSizeUOM], t.[ConnectionBottomSize], t.[ConnectionBottomSizeUOM], t.[Service], t.[BearingPackConfig], t.[PowerSectionConfig], t.[RMManufacturer], t.[RMType], t.[RMMidBodyStabSize], t.[RMSerialNum], t.[RMLobes], t.[RMStages], t.[CreateDate], t.[CreateUserId], t.[UpdateDate], t.[UpdateUserId], t.[IsDeleted], t.[EDP], t.[LegacyCheckSum], t.[Comments], t.[ProductLineId], t.[TemplateId], t.[MasterTemplateID], t.[Status], t.[Name], t.[IsLocked], t.[LockedBy]
	from [cdc].[dbo_ToolStrings_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_ToolStrings', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_dbo_Users]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_dbo_Users]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [UserId], NULL as [UserName], NULL as [PasswordEnc], NULL as [FirstName], NULL as [LastName], NULL as [Active], NULL as [Email], NULL as [Notes], NULL as [PictureLink], NULL as [AdminLevel], NULL as [WorkPhone], NULL as [CellPhone], NULL as [HomePhone], NULL as [Division], NULL as [DepartmentId], NULL as [StartDate], NULL as [JobPosition], NULL as [ReportsTo], NULL as [LastLoginDate], NULL as [NumLoginAttempts], NULL as [ForceChangePassword], NULL as [DefGLExpense], NULL as [DateAdded], NULL as [WFTUserName], NULL as [DefaultProductLine], NULL as [DefaultModule], NULL as [JDEBadgeNum], NULL as [DefaultLanguage], NULL as [DefaultUOM], NULL as [EcnRestriction]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_Users', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[UserId], t.[UserName], t.[PasswordEnc], t.[FirstName], t.[LastName], t.[Active], t.[Email], t.[Notes], t.[PictureLink], t.[AdminLevel], t.[WorkPhone], t.[CellPhone], t.[HomePhone], t.[Division], t.[DepartmentId], t.[StartDate], t.[JobPosition], t.[ReportsTo], t.[LastLoginDate], t.[NumLoginAttempts], t.[ForceChangePassword], t.[DefGLExpense], t.[DateAdded], t.[WFTUserName], t.[DefaultProductLine], t.[DefaultModule], t.[JDEBadgeNum], t.[DefaultLanguage], t.[DefaultUOM], t.[EcnRestriction]
	from [cdc].[dbo_Users_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_Users', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[UserId], t.[UserName], t.[PasswordEnc], t.[FirstName], t.[LastName], t.[Active], t.[Email], t.[Notes], t.[PictureLink], t.[AdminLevel], t.[WorkPhone], t.[CellPhone], t.[HomePhone], t.[Division], t.[DepartmentId], t.[StartDate], t.[JobPosition], t.[ReportsTo], t.[LastLoginDate], t.[NumLoginAttempts], t.[ForceChangePassword], t.[DefGLExpense], t.[DateAdded], t.[WFTUserName], t.[DefaultProductLine], t.[DefaultModule], t.[JDEBadgeNum], t.[DefaultLanguage], t.[DefaultUOM], t.[EcnRestriction]
	from [cdc].[dbo_Users_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'dbo_Users', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_AssetRepairTrack]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_AssetRepairTrack]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [AssetRepairTrackId], NULL as [ARTNumber], NULL as [ITPFTWOId], NULL as [SRPFTWOId], NULL as [FixedAssetId], NULL as [SerialNum], NULL as [ItemNum], NULL as [ItemDesc], NULL as [RNItemNum], NULL as [Revision], NULL as [AssetNumber], NULL as [IncidentId], NULL as [JobId], NULL as [ToolStringInfoId], NULL as [NCRNumber], NULL as [WorkOrderNum], NULL as [FromBranchPlant], NULL as [ShipToBranchPlant], NULL as [Comments], NULL as [Status], NULL as [DateClosed], NULL as [IsPFTWorkOrderRequired], NULL as [IsNCRRequired], NULL as [PartRepairCost], NULL as [IsAssetFromField], NULL as [IsRedTag], NULL as [FailureCodeId], NULL as [OutOfSpecCodeId], NULL as [ProceduralCodeId], NULL as [AddedBy], NULL as [DateAdded], NULL as [IsIRNotificationSent], NULL as [FailureType], NULL as [FailureDescriptionCommentId], NULL as [CorrectiveMaintenanceCommentId], NULL as [CloseStatus], NULL as [NeedsCustomerFeedback], NULL as [IsNeedsCustomerFeedbackEmailSent], NULL as [CPARId], NULL as [DispatchNumber], NULL as [CloseBy]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_AssetRepairTrack', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_6D7C059C
	    when 1 then __$operation
	    else
			case __$min_op_6D7C059C 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [AssetRepairTrackId], [ARTNumber], [ITPFTWOId], [SRPFTWOId], [FixedAssetId], [SerialNum], [ItemNum], [ItemDesc], [RNItemNum], [Revision], [AssetNumber], [IncidentId], [JobId], [ToolStringInfoId], [NCRNumber], [WorkOrderNum], [FromBranchPlant], [ShipToBranchPlant], [Comments], [Status], [DateClosed], [IsPFTWorkOrderRequired], [IsNCRRequired], [PartRepairCost], [IsAssetFromField], [IsRedTag], [FailureCodeId], [OutOfSpecCodeId], [ProceduralCodeId], [AddedBy], [DateAdded], [IsIRNotificationSent], [FailureType], [FailureDescriptionCommentId], [CorrectiveMaintenanceCommentId], [CloseStatus], [NeedsCustomerFeedback], [IsNeedsCustomerFeedbackEmailSent], [CPARId], [DispatchNumber], [CloseBy]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_6D7C059C 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_AssetRepairTrack_CT] c with (nolock)   
			where  ( (c.[AssetRepairTrackId] = t.[AssetRepairTrackId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_6D7C059C, __$count_6D7C059C, t.[AssetRepairTrackId], t.[ARTNumber], t.[ITPFTWOId], t.[SRPFTWOId], t.[FixedAssetId], t.[SerialNum], t.[ItemNum], t.[ItemDesc], t.[RNItemNum], t.[Revision], t.[AssetNumber], t.[IncidentId], t.[JobId], t.[ToolStringInfoId], t.[NCRNumber], t.[WorkOrderNum], t.[FromBranchPlant], t.[ShipToBranchPlant], t.[Comments], t.[Status], t.[DateClosed], t.[IsPFTWorkOrderRequired], t.[IsNCRRequired], t.[PartRepairCost], t.[IsAssetFromField], t.[IsRedTag], t.[FailureCodeId], t.[OutOfSpecCodeId], t.[ProceduralCodeId], t.[AddedBy], t.[DateAdded], t.[IsIRNotificationSent], t.[FailureType], t.[FailureDescriptionCommentId], t.[CorrectiveMaintenanceCommentId], t.[CloseStatus], t.[NeedsCustomerFeedback], t.[IsNeedsCustomerFeedbackEmailSent], t.[CPARId], t.[DispatchNumber], t.[CloseBy] 
		from [cdc].[dbo_AssetRepairTrack_CT] t with (nolock) inner join 
		(	select  r.[AssetRepairTrackId],
		    count(*) as __$count_6D7C059C 
			from [cdc].[dbo_AssetRepairTrack_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[AssetRepairTrackId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_AssetRepairTrack_CT] c with (nolock) where  ( (c.[AssetRepairTrackId] = t.[AssetRepairTrackId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[AssetRepairTrackId] = m.[AssetRepairTrackId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_AssetRepairTrack', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_AssetRepairTrack_CT] c with (nolock) 
							where  ( (c.[AssetRepairTrackId] = t.[AssetRepairTrackId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_AssetRepairTrack_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[AssetRepairTrackId] = mo.[AssetRepairTrackId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_6D7C059C
	    when 1 then __$operation
	    else
			case __$min_op_6D7C059C 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_6D7C059C
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_6D7C059C 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [AssetRepairTrackId], [ARTNumber], [ITPFTWOId], [SRPFTWOId], [FixedAssetId], [SerialNum], [ItemNum], [ItemDesc], [RNItemNum], [Revision], [AssetNumber], [IncidentId], [JobId], [ToolStringInfoId], [NCRNumber], [WorkOrderNum], [FromBranchPlant], [ShipToBranchPlant], [Comments], [Status], [DateClosed], [IsPFTWorkOrderRequired], [IsNCRRequired], [PartRepairCost], [IsAssetFromField], [IsRedTag], [FailureCodeId], [OutOfSpecCodeId], [ProceduralCodeId], [AddedBy], [DateAdded], [IsIRNotificationSent], [FailureType], [FailureDescriptionCommentId], [CorrectiveMaintenanceCommentId], [CloseStatus], [NeedsCustomerFeedback], [IsNeedsCustomerFeedbackEmailSent], [CPARId], [DispatchNumber], [CloseBy]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_6D7C059C 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_AssetRepairTrack_CT] c with (nolock)
			where  ( (c.[AssetRepairTrackId] = t.[AssetRepairTrackId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_6D7C059C, __$count_6D7C059C, 
		m.__$update_mask , t.[AssetRepairTrackId], t.[ARTNumber], t.[ITPFTWOId], t.[SRPFTWOId], t.[FixedAssetId], t.[SerialNum], t.[ItemNum], t.[ItemDesc], t.[RNItemNum], t.[Revision], t.[AssetNumber], t.[IncidentId], t.[JobId], t.[ToolStringInfoId], t.[NCRNumber], t.[WorkOrderNum], t.[FromBranchPlant], t.[ShipToBranchPlant], t.[Comments], t.[Status], t.[DateClosed], t.[IsPFTWorkOrderRequired], t.[IsNCRRequired], t.[PartRepairCost], t.[IsAssetFromField], t.[IsRedTag], t.[FailureCodeId], t.[OutOfSpecCodeId], t.[ProceduralCodeId], t.[AddedBy], t.[DateAdded], t.[IsIRNotificationSent], t.[FailureType], t.[FailureDescriptionCommentId], t.[CorrectiveMaintenanceCommentId], t.[CloseStatus], t.[NeedsCustomerFeedback], t.[IsNeedsCustomerFeedbackEmailSent], t.[CPARId], t.[DispatchNumber], t.[CloseBy]
		from [cdc].[dbo_AssetRepairTrack_CT] t with (nolock) inner join 
		(	select  r.[AssetRepairTrackId],
		    count(*) as __$count_6D7C059C, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_AssetRepairTrack_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[AssetRepairTrackId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_AssetRepairTrack_CT] c with (nolock) where  ( (c.[AssetRepairTrackId] = t.[AssetRepairTrackId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[AssetRepairTrackId] = m.[AssetRepairTrackId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_AssetRepairTrack', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_AssetRepairTrack_CT] c with (nolock)
							where  ( (c.[AssetRepairTrackId] = t.[AssetRepairTrackId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_AssetRepairTrack_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[AssetRepairTrackId] = mo.[AssetRepairTrackId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[AssetRepairTrackId], t.[ARTNumber], t.[ITPFTWOId], t.[SRPFTWOId], t.[FixedAssetId], t.[SerialNum], t.[ItemNum], t.[ItemDesc], t.[RNItemNum], t.[Revision], t.[AssetNumber], t.[IncidentId], t.[JobId], t.[ToolStringInfoId], t.[NCRNumber], t.[WorkOrderNum], t.[FromBranchPlant], t.[ShipToBranchPlant], t.[Comments], t.[Status], t.[DateClosed], t.[IsPFTWorkOrderRequired], t.[IsNCRRequired], t.[PartRepairCost], t.[IsAssetFromField], t.[IsRedTag], t.[FailureCodeId], t.[OutOfSpecCodeId], t.[ProceduralCodeId], t.[AddedBy], t.[DateAdded], t.[IsIRNotificationSent], t.[FailureType], t.[FailureDescriptionCommentId], t.[CorrectiveMaintenanceCommentId], t.[CloseStatus], t.[NeedsCustomerFeedback], t.[IsNeedsCustomerFeedbackEmailSent], t.[CPARId], t.[DispatchNumber], t.[CloseBy]
		from [cdc].[dbo_AssetRepairTrack_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_AssetRepairTrack', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_AssetRepairTrack_CT] c with (nolock) where  ( (c.[AssetRepairTrackId] = t.[AssetRepairTrackId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_AssetRepairTrack_CT] c with (nolock)
							where  ( (c.[AssetRepairTrackId] = t.[AssetRepairTrackId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_AssetRepairTrack_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[AssetRepairTrackId] = mo.[AssetRepairTrackId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_BranchPlants]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_BranchPlants]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [BranchPlantId], NULL as [BranchPlant], NULL as [MCDL01], NULL as [CompanyName], NULL as [Description], NULL as [BaseCode], NULL as [RelBaseCode], NULL as [SAPFuncLoc], NULL as [County], NULL as [City], NULL as [StateProvince], NULL as [Country], NULL as [ZipCode], NULL as [Region], NULL as [Hemisphere], NULL as [IsOps], NULL as [IsManufacturing], NULL as [IsRepair], NULL as [IsGlobalRepair], NULL as [Latitude], NULL as [Longitude], NULL as [Active], NULL as [LastEdit], NULL as [DateAdded], NULL as [IsNonLiveLocation], NULL as [IsRemovedFromAR], NULL as [WptsWFDLocationId], NULL as [WptsRegionId], NULL as [WptsCountryId], NULL as [IsOperationsBillableLocation], NULL as [CurrencyCode], NULL as [IsSuperCenter]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_BranchPlants', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_15B0FD07
	    when 1 then __$operation
	    else
			case __$min_op_15B0FD07 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [BranchPlantId], [BranchPlant], [MCDL01], [CompanyName], [Description], [BaseCode], [RelBaseCode], [SAPFuncLoc], [County], [City], [StateProvince], [Country], [ZipCode], [Region], [Hemisphere], [IsOps], [IsManufacturing], [IsRepair], [IsGlobalRepair], [Latitude], [Longitude], [Active], [LastEdit], [DateAdded], [IsNonLiveLocation], [IsRemovedFromAR], [WptsWFDLocationId], [WptsRegionId], [WptsCountryId], [IsOperationsBillableLocation], [CurrencyCode], [IsSuperCenter]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_15B0FD07 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_BranchPlants_CT] c with (nolock)   
			where  ( (c.[BranchPlantId] = t.[BranchPlantId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_15B0FD07, __$count_15B0FD07, t.[BranchPlantId], t.[BranchPlant], t.[MCDL01], t.[CompanyName], t.[Description], t.[BaseCode], t.[RelBaseCode], t.[SAPFuncLoc], t.[County], t.[City], t.[StateProvince], t.[Country], t.[ZipCode], t.[Region], t.[Hemisphere], t.[IsOps], t.[IsManufacturing], t.[IsRepair], t.[IsGlobalRepair], t.[Latitude], t.[Longitude], t.[Active], t.[LastEdit], t.[DateAdded], t.[IsNonLiveLocation], t.[IsRemovedFromAR], t.[WptsWFDLocationId], t.[WptsRegionId], t.[WptsCountryId], t.[IsOperationsBillableLocation], t.[CurrencyCode], t.[IsSuperCenter] 
		from [cdc].[dbo_BranchPlants_CT] t with (nolock) inner join 
		(	select  r.[BranchPlantId],
		    count(*) as __$count_15B0FD07 
			from [cdc].[dbo_BranchPlants_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[BranchPlantId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_BranchPlants_CT] c with (nolock) where  ( (c.[BranchPlantId] = t.[BranchPlantId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[BranchPlantId] = m.[BranchPlantId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_BranchPlants', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_BranchPlants_CT] c with (nolock) 
							where  ( (c.[BranchPlantId] = t.[BranchPlantId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_BranchPlants_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[BranchPlantId] = mo.[BranchPlantId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_15B0FD07
	    when 1 then __$operation
	    else
			case __$min_op_15B0FD07 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_15B0FD07
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_15B0FD07 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [BranchPlantId], [BranchPlant], [MCDL01], [CompanyName], [Description], [BaseCode], [RelBaseCode], [SAPFuncLoc], [County], [City], [StateProvince], [Country], [ZipCode], [Region], [Hemisphere], [IsOps], [IsManufacturing], [IsRepair], [IsGlobalRepair], [Latitude], [Longitude], [Active], [LastEdit], [DateAdded], [IsNonLiveLocation], [IsRemovedFromAR], [WptsWFDLocationId], [WptsRegionId], [WptsCountryId], [IsOperationsBillableLocation], [CurrencyCode], [IsSuperCenter]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_15B0FD07 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_BranchPlants_CT] c with (nolock)
			where  ( (c.[BranchPlantId] = t.[BranchPlantId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_15B0FD07, __$count_15B0FD07, 
		m.__$update_mask , t.[BranchPlantId], t.[BranchPlant], t.[MCDL01], t.[CompanyName], t.[Description], t.[BaseCode], t.[RelBaseCode], t.[SAPFuncLoc], t.[County], t.[City], t.[StateProvince], t.[Country], t.[ZipCode], t.[Region], t.[Hemisphere], t.[IsOps], t.[IsManufacturing], t.[IsRepair], t.[IsGlobalRepair], t.[Latitude], t.[Longitude], t.[Active], t.[LastEdit], t.[DateAdded], t.[IsNonLiveLocation], t.[IsRemovedFromAR], t.[WptsWFDLocationId], t.[WptsRegionId], t.[WptsCountryId], t.[IsOperationsBillableLocation], t.[CurrencyCode], t.[IsSuperCenter]
		from [cdc].[dbo_BranchPlants_CT] t with (nolock) inner join 
		(	select  r.[BranchPlantId],
		    count(*) as __$count_15B0FD07, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_BranchPlants_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[BranchPlantId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_BranchPlants_CT] c with (nolock) where  ( (c.[BranchPlantId] = t.[BranchPlantId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[BranchPlantId] = m.[BranchPlantId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_BranchPlants', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_BranchPlants_CT] c with (nolock)
							where  ( (c.[BranchPlantId] = t.[BranchPlantId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_BranchPlants_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[BranchPlantId] = mo.[BranchPlantId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[BranchPlantId], t.[BranchPlant], t.[MCDL01], t.[CompanyName], t.[Description], t.[BaseCode], t.[RelBaseCode], t.[SAPFuncLoc], t.[County], t.[City], t.[StateProvince], t.[Country], t.[ZipCode], t.[Region], t.[Hemisphere], t.[IsOps], t.[IsManufacturing], t.[IsRepair], t.[IsGlobalRepair], t.[Latitude], t.[Longitude], t.[Active], t.[LastEdit], t.[DateAdded], t.[IsNonLiveLocation], t.[IsRemovedFromAR], t.[WptsWFDLocationId], t.[WptsRegionId], t.[WptsCountryId], t.[IsOperationsBillableLocation], t.[CurrencyCode], t.[IsSuperCenter]
		from [cdc].[dbo_BranchPlants_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_BranchPlants', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_BranchPlants_CT] c with (nolock) where  ( (c.[BranchPlantId] = t.[BranchPlantId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_BranchPlants_CT] c with (nolock)
							where  ( (c.[BranchPlantId] = t.[BranchPlantId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_BranchPlants_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[BranchPlantId] = mo.[BranchPlantId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_CBMMonitor]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_CBMMonitor]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [CBMMonitorId], NULL as [MeterReadingTypeId], NULL as [PFTConfigId], NULL as [GlobalTrigger], NULL as [CreateJDEWO], NULL as [Active], NULL as [CreatedOn], NULL as [CreatedBy], NULL as [UpdatedOn], NULL as [UpdatedBy], NULL as [DefaultMeterReading], NULL as [EffectiveDate], NULL as [ObjectNumber]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_CBMMonitor', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_4CD8C48A
	    when 1 then __$operation
	    else
			case __$min_op_4CD8C48A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [CBMMonitorId], [MeterReadingTypeId], [PFTConfigId], [GlobalTrigger], [CreateJDEWO], [Active], [CreatedOn], [CreatedBy], [UpdatedOn], [UpdatedBy], [DefaultMeterReading], [EffectiveDate], [ObjectNumber]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_4CD8C48A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_CBMMonitor_CT] c with (nolock)   
			where  ( (c.[CBMMonitorId] = t.[CBMMonitorId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_4CD8C48A, __$count_4CD8C48A, t.[CBMMonitorId], t.[MeterReadingTypeId], t.[PFTConfigId], t.[GlobalTrigger], t.[CreateJDEWO], t.[Active], t.[CreatedOn], t.[CreatedBy], t.[UpdatedOn], t.[UpdatedBy], t.[DefaultMeterReading], t.[EffectiveDate], t.[ObjectNumber] 
		from [cdc].[dbo_CBMMonitor_CT] t with (nolock) inner join 
		(	select  r.[CBMMonitorId],
		    count(*) as __$count_4CD8C48A 
			from [cdc].[dbo_CBMMonitor_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[CBMMonitorId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_CBMMonitor_CT] c with (nolock) where  ( (c.[CBMMonitorId] = t.[CBMMonitorId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[CBMMonitorId] = m.[CBMMonitorId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_CBMMonitor', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_CBMMonitor_CT] c with (nolock) 
							where  ( (c.[CBMMonitorId] = t.[CBMMonitorId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_CBMMonitor_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[CBMMonitorId] = mo.[CBMMonitorId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_4CD8C48A
	    when 1 then __$operation
	    else
			case __$min_op_4CD8C48A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_4CD8C48A
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_4CD8C48A 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [CBMMonitorId], [MeterReadingTypeId], [PFTConfigId], [GlobalTrigger], [CreateJDEWO], [Active], [CreatedOn], [CreatedBy], [UpdatedOn], [UpdatedBy], [DefaultMeterReading], [EffectiveDate], [ObjectNumber]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_4CD8C48A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_CBMMonitor_CT] c with (nolock)
			where  ( (c.[CBMMonitorId] = t.[CBMMonitorId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_4CD8C48A, __$count_4CD8C48A, 
		m.__$update_mask , t.[CBMMonitorId], t.[MeterReadingTypeId], t.[PFTConfigId], t.[GlobalTrigger], t.[CreateJDEWO], t.[Active], t.[CreatedOn], t.[CreatedBy], t.[UpdatedOn], t.[UpdatedBy], t.[DefaultMeterReading], t.[EffectiveDate], t.[ObjectNumber]
		from [cdc].[dbo_CBMMonitor_CT] t with (nolock) inner join 
		(	select  r.[CBMMonitorId],
		    count(*) as __$count_4CD8C48A, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_CBMMonitor_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[CBMMonitorId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_CBMMonitor_CT] c with (nolock) where  ( (c.[CBMMonitorId] = t.[CBMMonitorId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[CBMMonitorId] = m.[CBMMonitorId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_CBMMonitor', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_CBMMonitor_CT] c with (nolock)
							where  ( (c.[CBMMonitorId] = t.[CBMMonitorId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_CBMMonitor_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[CBMMonitorId] = mo.[CBMMonitorId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[CBMMonitorId], t.[MeterReadingTypeId], t.[PFTConfigId], t.[GlobalTrigger], t.[CreateJDEWO], t.[Active], t.[CreatedOn], t.[CreatedBy], t.[UpdatedOn], t.[UpdatedBy], t.[DefaultMeterReading], t.[EffectiveDate], t.[ObjectNumber]
		from [cdc].[dbo_CBMMonitor_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_CBMMonitor', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_CBMMonitor_CT] c with (nolock) where  ( (c.[CBMMonitorId] = t.[CBMMonitorId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_CBMMonitor_CT] c with (nolock)
							where  ( (c.[CBMMonitorId] = t.[CBMMonitorId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_CBMMonitor_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[CBMMonitorId] = mo.[CBMMonitorId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_CBMMonitorAssetItemNums]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_CBMMonitorAssetItemNums]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [CBMMonitorAssetItemNumId], NULL as [CBMMonitorId], NULL as [ItemNum], NULL as [CreatedBy], NULL as [CreatedOn], NULL as [IsParent]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_CBMMonitorAssetItemNums', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_10001D30
	    when 1 then __$operation
	    else
			case __$min_op_10001D30 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [CBMMonitorAssetItemNumId], [CBMMonitorId], [ItemNum], [CreatedBy], [CreatedOn], [IsParent]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_10001D30 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_CBMMonitorAssetItemNums_CT] c with (nolock)   
			where  ( (c.[CBMMonitorAssetItemNumId] = t.[CBMMonitorAssetItemNumId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_10001D30, __$count_10001D30, t.[CBMMonitorAssetItemNumId], t.[CBMMonitorId], t.[ItemNum], t.[CreatedBy], t.[CreatedOn], t.[IsParent] 
		from [cdc].[dbo_CBMMonitorAssetItemNums_CT] t with (nolock) inner join 
		(	select  r.[CBMMonitorAssetItemNumId],
		    count(*) as __$count_10001D30 
			from [cdc].[dbo_CBMMonitorAssetItemNums_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[CBMMonitorAssetItemNumId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_CBMMonitorAssetItemNums_CT] c with (nolock) where  ( (c.[CBMMonitorAssetItemNumId] = t.[CBMMonitorAssetItemNumId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[CBMMonitorAssetItemNumId] = m.[CBMMonitorAssetItemNumId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_CBMMonitorAssetItemNums', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_CBMMonitorAssetItemNums_CT] c with (nolock) 
							where  ( (c.[CBMMonitorAssetItemNumId] = t.[CBMMonitorAssetItemNumId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_CBMMonitorAssetItemNums_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[CBMMonitorAssetItemNumId] = mo.[CBMMonitorAssetItemNumId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_10001D30
	    when 1 then __$operation
	    else
			case __$min_op_10001D30 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_10001D30
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_10001D30 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [CBMMonitorAssetItemNumId], [CBMMonitorId], [ItemNum], [CreatedBy], [CreatedOn], [IsParent]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_10001D30 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_CBMMonitorAssetItemNums_CT] c with (nolock)
			where  ( (c.[CBMMonitorAssetItemNumId] = t.[CBMMonitorAssetItemNumId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_10001D30, __$count_10001D30, 
		m.__$update_mask , t.[CBMMonitorAssetItemNumId], t.[CBMMonitorId], t.[ItemNum], t.[CreatedBy], t.[CreatedOn], t.[IsParent]
		from [cdc].[dbo_CBMMonitorAssetItemNums_CT] t with (nolock) inner join 
		(	select  r.[CBMMonitorAssetItemNumId],
		    count(*) as __$count_10001D30, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_CBMMonitorAssetItemNums_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[CBMMonitorAssetItemNumId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_CBMMonitorAssetItemNums_CT] c with (nolock) where  ( (c.[CBMMonitorAssetItemNumId] = t.[CBMMonitorAssetItemNumId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[CBMMonitorAssetItemNumId] = m.[CBMMonitorAssetItemNumId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_CBMMonitorAssetItemNums', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_CBMMonitorAssetItemNums_CT] c with (nolock)
							where  ( (c.[CBMMonitorAssetItemNumId] = t.[CBMMonitorAssetItemNumId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_CBMMonitorAssetItemNums_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[CBMMonitorAssetItemNumId] = mo.[CBMMonitorAssetItemNumId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[CBMMonitorAssetItemNumId], t.[CBMMonitorId], t.[ItemNum], t.[CreatedBy], t.[CreatedOn], t.[IsParent]
		from [cdc].[dbo_CBMMonitorAssetItemNums_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_CBMMonitorAssetItemNums', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_CBMMonitorAssetItemNums_CT] c with (nolock) where  ( (c.[CBMMonitorAssetItemNumId] = t.[CBMMonitorAssetItemNumId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_CBMMonitorAssetItemNums_CT] c with (nolock)
							where  ( (c.[CBMMonitorAssetItemNumId] = t.[CBMMonitorAssetItemNumId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_CBMMonitorAssetItemNums_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[CBMMonitorAssetItemNumId] = mo.[CBMMonitorAssetItemNumId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_Dispatches]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_Dispatches]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [DispatchId], NULL as [DispatchNumber], NULL as [JDEJobNumber], NULL as [JDECustomerNumber], NULL as [BranchPlant], NULL as [WellName], NULL as [WellDetails1], NULL as [WellDetails3], NULL as [RigName], NULL as [DateLastEdit], NULL as [UserIdLastEdit], NULL as [DateAdded], NULL as [JobId]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_Dispatches', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_3A33BF2F
	    when 1 then __$operation
	    else
			case __$min_op_3A33BF2F 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [DispatchId], [DispatchNumber], [JDEJobNumber], [JDECustomerNumber], [BranchPlant], [WellName], [WellDetails1], [WellDetails3], [RigName], [DateLastEdit], [UserIdLastEdit], [DateAdded], [JobId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3A33BF2F 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_Dispatches_CT] c with (nolock)   
			where  ( (c.[DispatchId] = t.[DispatchId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_3A33BF2F, __$count_3A33BF2F, t.[DispatchId], t.[DispatchNumber], t.[JDEJobNumber], t.[JDECustomerNumber], t.[BranchPlant], t.[WellName], t.[WellDetails1], t.[WellDetails3], t.[RigName], t.[DateLastEdit], t.[UserIdLastEdit], t.[DateAdded], t.[JobId] 
		from [cdc].[dbo_Dispatches_CT] t with (nolock) inner join 
		(	select  r.[DispatchId],
		    count(*) as __$count_3A33BF2F 
			from [cdc].[dbo_Dispatches_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[DispatchId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_Dispatches_CT] c with (nolock) where  ( (c.[DispatchId] = t.[DispatchId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[DispatchId] = m.[DispatchId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_Dispatches', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_Dispatches_CT] c with (nolock) 
							where  ( (c.[DispatchId] = t.[DispatchId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_Dispatches_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[DispatchId] = mo.[DispatchId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_3A33BF2F
	    when 1 then __$operation
	    else
			case __$min_op_3A33BF2F 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_3A33BF2F
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_3A33BF2F 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [DispatchId], [DispatchNumber], [JDEJobNumber], [JDECustomerNumber], [BranchPlant], [WellName], [WellDetails1], [WellDetails3], [RigName], [DateLastEdit], [UserIdLastEdit], [DateAdded], [JobId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3A33BF2F 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_Dispatches_CT] c with (nolock)
			where  ( (c.[DispatchId] = t.[DispatchId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_3A33BF2F, __$count_3A33BF2F, 
		m.__$update_mask , t.[DispatchId], t.[DispatchNumber], t.[JDEJobNumber], t.[JDECustomerNumber], t.[BranchPlant], t.[WellName], t.[WellDetails1], t.[WellDetails3], t.[RigName], t.[DateLastEdit], t.[UserIdLastEdit], t.[DateAdded], t.[JobId]
		from [cdc].[dbo_Dispatches_CT] t with (nolock) inner join 
		(	select  r.[DispatchId],
		    count(*) as __$count_3A33BF2F, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_Dispatches_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[DispatchId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_Dispatches_CT] c with (nolock) where  ( (c.[DispatchId] = t.[DispatchId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[DispatchId] = m.[DispatchId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_Dispatches', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_Dispatches_CT] c with (nolock)
							where  ( (c.[DispatchId] = t.[DispatchId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_Dispatches_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[DispatchId] = mo.[DispatchId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[DispatchId], t.[DispatchNumber], t.[JDEJobNumber], t.[JDECustomerNumber], t.[BranchPlant], t.[WellName], t.[WellDetails1], t.[WellDetails3], t.[RigName], t.[DateLastEdit], t.[UserIdLastEdit], t.[DateAdded], t.[JobId]
		from [cdc].[dbo_Dispatches_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_Dispatches', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_Dispatches_CT] c with (nolock) where  ( (c.[DispatchId] = t.[DispatchId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_Dispatches_CT] c with (nolock)
							where  ( (c.[DispatchId] = t.[DispatchId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_Dispatches_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[DispatchId] = mo.[DispatchId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_DispatchInstanceItems]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_DispatchInstanceItems]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [DispatchInstanceItemId], NULL as [DispatchInstanceId], NULL as [LineNumber], NULL as [FixedAssetId], NULL as [AssetNumber], NULL as [SerialNum], NULL as [ItemNum], NULL as [Description], NULL as [Revision], NULL as [Size], NULL as [QtyShipped], NULL as [TopConnection], NULL as [BottomConnection], NULL as [DateAdded], NULL as [QtyReturned], NULL as [DateReturned], NULL as [Comments], NULL as [Condition], NULL as [ReasonCode], NULL as [ToolStringId], NULL as [RNItemNum], NULL as [JDETxnNum], NULL as [AmountExtendedPrice], NULL as [ForeignExtendedPrice], NULL as [TrxnCurrency], NULL as [BaseCurrency], NULL as [QtySold], NULL as [DateBilled], NULL as [ParentId], NULL as [ReturnToBranchPlant], NULL as [AIRTBranchPlant], NULL as [ErrorMessage], NULL as [RevenueBusinessUnit]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_DispatchInstanceItems', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_E3040614
	    when 1 then __$operation
	    else
			case __$min_op_E3040614 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [DispatchInstanceItemId], [DispatchInstanceId], [LineNumber], [FixedAssetId], [AssetNumber], [SerialNum], [ItemNum], [Description], [Revision], [Size], [QtyShipped], [TopConnection], [BottomConnection], [DateAdded], [QtyReturned], [DateReturned], [Comments], [Condition], [ReasonCode], [ToolStringId], [RNItemNum], [JDETxnNum], [AmountExtendedPrice], [ForeignExtendedPrice], [TrxnCurrency], [BaseCurrency], [QtySold], [DateBilled], [ParentId], [ReturnToBranchPlant], [AIRTBranchPlant], [ErrorMessage], [RevenueBusinessUnit]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_E3040614 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_DispatchInstanceItems_CT] c with (nolock)   
			where  ( (c.[DispatchInstanceItemId] = t.[DispatchInstanceItemId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_E3040614, __$count_E3040614, t.[DispatchInstanceItemId], t.[DispatchInstanceId], t.[LineNumber], t.[FixedAssetId], t.[AssetNumber], t.[SerialNum], t.[ItemNum], t.[Description], t.[Revision], t.[Size], t.[QtyShipped], t.[TopConnection], t.[BottomConnection], t.[DateAdded], t.[QtyReturned], t.[DateReturned], t.[Comments], t.[Condition], t.[ReasonCode], t.[ToolStringId], t.[RNItemNum], t.[JDETxnNum], t.[AmountExtendedPrice], t.[ForeignExtendedPrice], t.[TrxnCurrency], t.[BaseCurrency], t.[QtySold], t.[DateBilled], t.[ParentId], t.[ReturnToBranchPlant], t.[AIRTBranchPlant], t.[ErrorMessage], t.[RevenueBusinessUnit] 
		from [cdc].[dbo_DispatchInstanceItems_CT] t with (nolock) inner join 
		(	select  r.[DispatchInstanceItemId],
		    count(*) as __$count_E3040614 
			from [cdc].[dbo_DispatchInstanceItems_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[DispatchInstanceItemId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_DispatchInstanceItems_CT] c with (nolock) where  ( (c.[DispatchInstanceItemId] = t.[DispatchInstanceItemId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[DispatchInstanceItemId] = m.[DispatchInstanceItemId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_DispatchInstanceItems', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_DispatchInstanceItems_CT] c with (nolock) 
							where  ( (c.[DispatchInstanceItemId] = t.[DispatchInstanceItemId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_DispatchInstanceItems_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[DispatchInstanceItemId] = mo.[DispatchInstanceItemId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_E3040614
	    when 1 then __$operation
	    else
			case __$min_op_E3040614 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_E3040614
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_E3040614 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [DispatchInstanceItemId], [DispatchInstanceId], [LineNumber], [FixedAssetId], [AssetNumber], [SerialNum], [ItemNum], [Description], [Revision], [Size], [QtyShipped], [TopConnection], [BottomConnection], [DateAdded], [QtyReturned], [DateReturned], [Comments], [Condition], [ReasonCode], [ToolStringId], [RNItemNum], [JDETxnNum], [AmountExtendedPrice], [ForeignExtendedPrice], [TrxnCurrency], [BaseCurrency], [QtySold], [DateBilled], [ParentId], [ReturnToBranchPlant], [AIRTBranchPlant], [ErrorMessage], [RevenueBusinessUnit]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_E3040614 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_DispatchInstanceItems_CT] c with (nolock)
			where  ( (c.[DispatchInstanceItemId] = t.[DispatchInstanceItemId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_E3040614, __$count_E3040614, 
		m.__$update_mask , t.[DispatchInstanceItemId], t.[DispatchInstanceId], t.[LineNumber], t.[FixedAssetId], t.[AssetNumber], t.[SerialNum], t.[ItemNum], t.[Description], t.[Revision], t.[Size], t.[QtyShipped], t.[TopConnection], t.[BottomConnection], t.[DateAdded], t.[QtyReturned], t.[DateReturned], t.[Comments], t.[Condition], t.[ReasonCode], t.[ToolStringId], t.[RNItemNum], t.[JDETxnNum], t.[AmountExtendedPrice], t.[ForeignExtendedPrice], t.[TrxnCurrency], t.[BaseCurrency], t.[QtySold], t.[DateBilled], t.[ParentId], t.[ReturnToBranchPlant], t.[AIRTBranchPlant], t.[ErrorMessage], t.[RevenueBusinessUnit]
		from [cdc].[dbo_DispatchInstanceItems_CT] t with (nolock) inner join 
		(	select  r.[DispatchInstanceItemId],
		    count(*) as __$count_E3040614, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_DispatchInstanceItems_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[DispatchInstanceItemId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_DispatchInstanceItems_CT] c with (nolock) where  ( (c.[DispatchInstanceItemId] = t.[DispatchInstanceItemId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[DispatchInstanceItemId] = m.[DispatchInstanceItemId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_DispatchInstanceItems', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_DispatchInstanceItems_CT] c with (nolock)
							where  ( (c.[DispatchInstanceItemId] = t.[DispatchInstanceItemId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_DispatchInstanceItems_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[DispatchInstanceItemId] = mo.[DispatchInstanceItemId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[DispatchInstanceItemId], t.[DispatchInstanceId], t.[LineNumber], t.[FixedAssetId], t.[AssetNumber], t.[SerialNum], t.[ItemNum], t.[Description], t.[Revision], t.[Size], t.[QtyShipped], t.[TopConnection], t.[BottomConnection], t.[DateAdded], t.[QtyReturned], t.[DateReturned], t.[Comments], t.[Condition], t.[ReasonCode], t.[ToolStringId], t.[RNItemNum], t.[JDETxnNum], t.[AmountExtendedPrice], t.[ForeignExtendedPrice], t.[TrxnCurrency], t.[BaseCurrency], t.[QtySold], t.[DateBilled], t.[ParentId], t.[ReturnToBranchPlant], t.[AIRTBranchPlant], t.[ErrorMessage], t.[RevenueBusinessUnit]
		from [cdc].[dbo_DispatchInstanceItems_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_DispatchInstanceItems', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_DispatchInstanceItems_CT] c with (nolock) where  ( (c.[DispatchInstanceItemId] = t.[DispatchInstanceItemId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_DispatchInstanceItems_CT] c with (nolock)
							where  ( (c.[DispatchInstanceItemId] = t.[DispatchInstanceItemId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_DispatchInstanceItems_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[DispatchInstanceItemId] = mo.[DispatchInstanceItemId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_DispatchInstances]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_DispatchInstances]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [DispatchInstanceId], NULL as [DispatchId], NULL as [SequenceNum], NULL as [ReturnSequenceNum], NULL as [ShipTo], NULL as [ShipType], NULL as [DateShipped], NULL as [DateDelivered], NULL as [DateLastEdit], NULL as [UserIdLastEdit], NULL as [DateAdded], NULL as [InvoiceSequenceNum], NULL as [InvoiceNum], NULL as [InvoiceType], NULL as [InvoiceCompany], NULL as [JobType]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_DispatchInstances', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_F63CCF01
	    when 1 then __$operation
	    else
			case __$min_op_F63CCF01 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [DispatchInstanceId], [DispatchId], [SequenceNum], [ReturnSequenceNum], [ShipTo], [ShipType], [DateShipped], [DateDelivered], [DateLastEdit], [UserIdLastEdit], [DateAdded], [InvoiceSequenceNum], [InvoiceNum], [InvoiceType], [InvoiceCompany], [JobType]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_F63CCF01 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_DispatchInstances_CT] c with (nolock)   
			where  ( (c.[DispatchInstanceId] = t.[DispatchInstanceId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_F63CCF01, __$count_F63CCF01, t.[DispatchInstanceId], t.[DispatchId], t.[SequenceNum], t.[ReturnSequenceNum], t.[ShipTo], t.[ShipType], t.[DateShipped], t.[DateDelivered], t.[DateLastEdit], t.[UserIdLastEdit], t.[DateAdded], t.[InvoiceSequenceNum], t.[InvoiceNum], t.[InvoiceType], t.[InvoiceCompany], t.[JobType] 
		from [cdc].[dbo_DispatchInstances_CT] t with (nolock) inner join 
		(	select  r.[DispatchInstanceId],
		    count(*) as __$count_F63CCF01 
			from [cdc].[dbo_DispatchInstances_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[DispatchInstanceId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_DispatchInstances_CT] c with (nolock) where  ( (c.[DispatchInstanceId] = t.[DispatchInstanceId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[DispatchInstanceId] = m.[DispatchInstanceId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_DispatchInstances', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_DispatchInstances_CT] c with (nolock) 
							where  ( (c.[DispatchInstanceId] = t.[DispatchInstanceId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_DispatchInstances_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[DispatchInstanceId] = mo.[DispatchInstanceId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_F63CCF01
	    when 1 then __$operation
	    else
			case __$min_op_F63CCF01 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_F63CCF01
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_F63CCF01 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [DispatchInstanceId], [DispatchId], [SequenceNum], [ReturnSequenceNum], [ShipTo], [ShipType], [DateShipped], [DateDelivered], [DateLastEdit], [UserIdLastEdit], [DateAdded], [InvoiceSequenceNum], [InvoiceNum], [InvoiceType], [InvoiceCompany], [JobType]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_F63CCF01 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_DispatchInstances_CT] c with (nolock)
			where  ( (c.[DispatchInstanceId] = t.[DispatchInstanceId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_F63CCF01, __$count_F63CCF01, 
		m.__$update_mask , t.[DispatchInstanceId], t.[DispatchId], t.[SequenceNum], t.[ReturnSequenceNum], t.[ShipTo], t.[ShipType], t.[DateShipped], t.[DateDelivered], t.[DateLastEdit], t.[UserIdLastEdit], t.[DateAdded], t.[InvoiceSequenceNum], t.[InvoiceNum], t.[InvoiceType], t.[InvoiceCompany], t.[JobType]
		from [cdc].[dbo_DispatchInstances_CT] t with (nolock) inner join 
		(	select  r.[DispatchInstanceId],
		    count(*) as __$count_F63CCF01, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_DispatchInstances_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[DispatchInstanceId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_DispatchInstances_CT] c with (nolock) where  ( (c.[DispatchInstanceId] = t.[DispatchInstanceId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[DispatchInstanceId] = m.[DispatchInstanceId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_DispatchInstances', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_DispatchInstances_CT] c with (nolock)
							where  ( (c.[DispatchInstanceId] = t.[DispatchInstanceId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_DispatchInstances_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[DispatchInstanceId] = mo.[DispatchInstanceId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[DispatchInstanceId], t.[DispatchId], t.[SequenceNum], t.[ReturnSequenceNum], t.[ShipTo], t.[ShipType], t.[DateShipped], t.[DateDelivered], t.[DateLastEdit], t.[UserIdLastEdit], t.[DateAdded], t.[InvoiceSequenceNum], t.[InvoiceNum], t.[InvoiceType], t.[InvoiceCompany], t.[JobType]
		from [cdc].[dbo_DispatchInstances_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_DispatchInstances', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_DispatchInstances_CT] c with (nolock) where  ( (c.[DispatchInstanceId] = t.[DispatchInstanceId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_DispatchInstances_CT] c with (nolock)
							where  ( (c.[DispatchInstanceId] = t.[DispatchInstanceId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_DispatchInstances_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[DispatchInstanceId] = mo.[DispatchInstanceId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_FixedAssets]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_FixedAssets]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [FixedAssetId], NULL as [AssetNumber], NULL as [Company], NULL as [BranchPlant], NULL as [FixedAssetBranchPlant], NULL as [AssetDescription], NULL as [ParentNumber], NULL as [ParentFixedAssetId], NULL as [ManufacturersSerialNumber], NULL as [BusinessUnit], NULL as [RNItemNum], NULL as [SerialNum], NULL as [CurrentItemQty], NULL as [CurrencyCode], NULL as [Cost], NULL as [AccumDepreciation], NULL as [NetBookValue], NULL as [ProductLineCode], NULL as [UnitNumber], NULL as [InventoryItemNum], NULL as [LegacySerialNumber], NULL as [AFENumber], NULL as [State], NULL as [ContractAccount], NULL as [Ownership], NULL as [DateAcquired], NULL as [LifeMonths], NULL as [StartDepreciation_Date], NULL as [NewUsed], NULL as [Manufacturer], NULL as [ModelYear], NULL as [ThirdItemNumber], NULL as [DateDisposed], NULL as [EquipmentStatus], NULL as [FiscalYear], NULL as [LedgerType], NULL as [CatCode16], NULL as [IsAdvisorOnly], NULL as [NotUsed], NULL as [IsAddByWorkOrder], NULL as [Revision], NULL as [LastEdit], NULL as [LastStatusChangeDate], NULL as [Source], NULL as [SystemStatus], NULL as [MaintPlant], NULL as [MaintPlantDesc], NULL as [FirmwareVersion], NULL as [ModelNum], NULL as [PhysicalLoc], NULL as [EquipTypeDesc], NULL as [ERPNotificationDate], NULL as [ERPNotificationNumber], NULL as [PartInternalStatus], NULL as [OriginalLocation], NULL as [OriginalStatus], NULL as [SerialDescLong], NULL as [Comments], NULL as [SAPLastEdit], NULL as [ParentPartId], NULL as [CustomsInvoiceDetailId], NULL as [Submt], NULL as [LeakTestDate], NULL as [RadioIsotope], NULL as [Activity], NULL as [SFC], NULL as [SourceModel], NULL as [LastComments], NULL as [PhysicalLocation], NULL as [VerifiedBy], NULL as [VerifiedDate], NULL as [VerifiedLocation], NULL as [StdCost], NULL as [StdCostCode], NULL as [OwnershipDesc], NULL as [Category], NULL as [CompanyCodeDesc], NULL as [CostCenterDesc], NULL as [CostCenterManager], NULL as [TechId], NULL as [MasterFirmwareItemNum], NULL as [MasterFirmwareRevision], NULL as [MfgPartNum], NULL as [DateAdded], NULL as [UserIdAdded], NULL as [UserIdLastEdit], NULL as [TopLevelFixedAssetId], NULL as [AcqCode], NULL as [MajorAccountingClass], NULL as [JournalingFlag], NULL as [ApplicationCode], NULL as [AssetLifeRemaining]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_FixedAssets', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_1713118E
	    when 1 then __$operation
	    else
			case __$min_op_1713118E 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [FixedAssetId], [AssetNumber], [Company], [BranchPlant], [FixedAssetBranchPlant], [AssetDescription], [ParentNumber], [ParentFixedAssetId], [ManufacturersSerialNumber], [BusinessUnit], [RNItemNum], [SerialNum], [CurrentItemQty], [CurrencyCode], [Cost], [AccumDepreciation], [NetBookValue], [ProductLineCode], [UnitNumber], [InventoryItemNum], [LegacySerialNumber], [AFENumber], [State], [ContractAccount], [Ownership], [DateAcquired], [LifeMonths], [StartDepreciation_Date], [NewUsed], [Manufacturer], [ModelYear], [ThirdItemNumber], [DateDisposed], [EquipmentStatus], [FiscalYear], [LedgerType], [CatCode16], [IsAdvisorOnly], [NotUsed], [IsAddByWorkOrder], [Revision], [LastEdit], [LastStatusChangeDate], [Source], [SystemStatus], [MaintPlant], [MaintPlantDesc], [FirmwareVersion], [ModelNum], [PhysicalLoc], [EquipTypeDesc], [ERPNotificationDate], [ERPNotificationNumber], [PartInternalStatus], [OriginalLocation], [OriginalStatus], [SerialDescLong], [Comments], [SAPLastEdit], [ParentPartId], [CustomsInvoiceDetailId], [Submt], [LeakTestDate], [RadioIsotope], [Activity], [SFC], [SourceModel], [LastComments], [PhysicalLocation], [VerifiedBy], [VerifiedDate], [VerifiedLocation], [StdCost], [StdCostCode], [OwnershipDesc], [Category], [CompanyCodeDesc], [CostCenterDesc], [CostCenterManager], [TechId], [MasterFirmwareItemNum], [MasterFirmwareRevision], [MfgPartNum], [DateAdded], [UserIdAdded], [UserIdLastEdit], [TopLevelFixedAssetId], [AcqCode], [MajorAccountingClass], [JournalingFlag], [ApplicationCode], [AssetLifeRemaining]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_1713118E 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_FixedAssets_CT] c with (nolock)   
			where  ( (c.[FixedAssetId] = t.[FixedAssetId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_1713118E, __$count_1713118E, t.[FixedAssetId], t.[AssetNumber], t.[Company], t.[BranchPlant], t.[FixedAssetBranchPlant], t.[AssetDescription], t.[ParentNumber], t.[ParentFixedAssetId], t.[ManufacturersSerialNumber], t.[BusinessUnit], t.[RNItemNum], t.[SerialNum], t.[CurrentItemQty], t.[CurrencyCode], t.[Cost], t.[AccumDepreciation], t.[NetBookValue], t.[ProductLineCode], t.[UnitNumber], t.[InventoryItemNum], t.[LegacySerialNumber], t.[AFENumber], t.[State], t.[ContractAccount], t.[Ownership], t.[DateAcquired], t.[LifeMonths], t.[StartDepreciation_Date], t.[NewUsed], t.[Manufacturer], t.[ModelYear], t.[ThirdItemNumber], t.[DateDisposed], t.[EquipmentStatus], t.[FiscalYear], t.[LedgerType], t.[CatCode16], t.[IsAdvisorOnly], t.[NotUsed], t.[IsAddByWorkOrder], t.[Revision], t.[LastEdit], t.[LastStatusChangeDate], t.[Source], t.[SystemStatus], t.[MaintPlant], t.[MaintPlantDesc], t.[FirmwareVersion], t.[ModelNum], t.[PhysicalLoc], t.[EquipTypeDesc], t.[ERPNotificationDate], t.[ERPNotificationNumber], t.[PartInternalStatus], t.[OriginalLocation], t.[OriginalStatus], t.[SerialDescLong], t.[Comments], t.[SAPLastEdit], t.[ParentPartId], t.[CustomsInvoiceDetailId], t.[Submt], t.[LeakTestDate], t.[RadioIsotope], t.[Activity], t.[SFC], t.[SourceModel], t.[LastComments], t.[PhysicalLocation], t.[VerifiedBy], t.[VerifiedDate], t.[VerifiedLocation], t.[StdCost], t.[StdCostCode], t.[OwnershipDesc], t.[Category], t.[CompanyCodeDesc], t.[CostCenterDesc], t.[CostCenterManager], t.[TechId], t.[MasterFirmwareItemNum], t.[MasterFirmwareRevision], t.[MfgPartNum], t.[DateAdded], t.[UserIdAdded], t.[UserIdLastEdit], t.[TopLevelFixedAssetId], t.[AcqCode], t.[MajorAccountingClass], t.[JournalingFlag], t.[ApplicationCode], t.[AssetLifeRemaining] 
		from [cdc].[dbo_FixedAssets_CT] t with (nolock) inner join 
		(	select  r.[FixedAssetId],
		    count(*) as __$count_1713118E 
			from [cdc].[dbo_FixedAssets_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[FixedAssetId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_FixedAssets_CT] c with (nolock) where  ( (c.[FixedAssetId] = t.[FixedAssetId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[FixedAssetId] = m.[FixedAssetId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_FixedAssets', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_FixedAssets_CT] c with (nolock) 
							where  ( (c.[FixedAssetId] = t.[FixedAssetId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_FixedAssets_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[FixedAssetId] = mo.[FixedAssetId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_1713118E
	    when 1 then __$operation
	    else
			case __$min_op_1713118E 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_1713118E
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_1713118E 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [FixedAssetId], [AssetNumber], [Company], [BranchPlant], [FixedAssetBranchPlant], [AssetDescription], [ParentNumber], [ParentFixedAssetId], [ManufacturersSerialNumber], [BusinessUnit], [RNItemNum], [SerialNum], [CurrentItemQty], [CurrencyCode], [Cost], [AccumDepreciation], [NetBookValue], [ProductLineCode], [UnitNumber], [InventoryItemNum], [LegacySerialNumber], [AFENumber], [State], [ContractAccount], [Ownership], [DateAcquired], [LifeMonths], [StartDepreciation_Date], [NewUsed], [Manufacturer], [ModelYear], [ThirdItemNumber], [DateDisposed], [EquipmentStatus], [FiscalYear], [LedgerType], [CatCode16], [IsAdvisorOnly], [NotUsed], [IsAddByWorkOrder], [Revision], [LastEdit], [LastStatusChangeDate], [Source], [SystemStatus], [MaintPlant], [MaintPlantDesc], [FirmwareVersion], [ModelNum], [PhysicalLoc], [EquipTypeDesc], [ERPNotificationDate], [ERPNotificationNumber], [PartInternalStatus], [OriginalLocation], [OriginalStatus], [SerialDescLong], [Comments], [SAPLastEdit], [ParentPartId], [CustomsInvoiceDetailId], [Submt], [LeakTestDate], [RadioIsotope], [Activity], [SFC], [SourceModel], [LastComments], [PhysicalLocation], [VerifiedBy], [VerifiedDate], [VerifiedLocation], [StdCost], [StdCostCode], [OwnershipDesc], [Category], [CompanyCodeDesc], [CostCenterDesc], [CostCenterManager], [TechId], [MasterFirmwareItemNum], [MasterFirmwareRevision], [MfgPartNum], [DateAdded], [UserIdAdded], [UserIdLastEdit], [TopLevelFixedAssetId], [AcqCode], [MajorAccountingClass], [JournalingFlag], [ApplicationCode], [AssetLifeRemaining]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_1713118E 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_FixedAssets_CT] c with (nolock)
			where  ( (c.[FixedAssetId] = t.[FixedAssetId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_1713118E, __$count_1713118E, 
		m.__$update_mask , t.[FixedAssetId], t.[AssetNumber], t.[Company], t.[BranchPlant], t.[FixedAssetBranchPlant], t.[AssetDescription], t.[ParentNumber], t.[ParentFixedAssetId], t.[ManufacturersSerialNumber], t.[BusinessUnit], t.[RNItemNum], t.[SerialNum], t.[CurrentItemQty], t.[CurrencyCode], t.[Cost], t.[AccumDepreciation], t.[NetBookValue], t.[ProductLineCode], t.[UnitNumber], t.[InventoryItemNum], t.[LegacySerialNumber], t.[AFENumber], t.[State], t.[ContractAccount], t.[Ownership], t.[DateAcquired], t.[LifeMonths], t.[StartDepreciation_Date], t.[NewUsed], t.[Manufacturer], t.[ModelYear], t.[ThirdItemNumber], t.[DateDisposed], t.[EquipmentStatus], t.[FiscalYear], t.[LedgerType], t.[CatCode16], t.[IsAdvisorOnly], t.[NotUsed], t.[IsAddByWorkOrder], t.[Revision], t.[LastEdit], t.[LastStatusChangeDate], t.[Source], t.[SystemStatus], t.[MaintPlant], t.[MaintPlantDesc], t.[FirmwareVersion], t.[ModelNum], t.[PhysicalLoc], t.[EquipTypeDesc], t.[ERPNotificationDate], t.[ERPNotificationNumber], t.[PartInternalStatus], t.[OriginalLocation], t.[OriginalStatus], t.[SerialDescLong], t.[Comments], t.[SAPLastEdit], t.[ParentPartId], t.[CustomsInvoiceDetailId], t.[Submt], t.[LeakTestDate], t.[RadioIsotope], t.[Activity], t.[SFC], t.[SourceModel], t.[LastComments], t.[PhysicalLocation], t.[VerifiedBy], t.[VerifiedDate], t.[VerifiedLocation], t.[StdCost], t.[StdCostCode], t.[OwnershipDesc], t.[Category], t.[CompanyCodeDesc], t.[CostCenterDesc], t.[CostCenterManager], t.[TechId], t.[MasterFirmwareItemNum], t.[MasterFirmwareRevision], t.[MfgPartNum], t.[DateAdded], t.[UserIdAdded], t.[UserIdLastEdit], t.[TopLevelFixedAssetId], t.[AcqCode], t.[MajorAccountingClass], t.[JournalingFlag], t.[ApplicationCode], t.[AssetLifeRemaining]
		from [cdc].[dbo_FixedAssets_CT] t with (nolock) inner join 
		(	select  r.[FixedAssetId],
		    count(*) as __$count_1713118E, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_FixedAssets_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[FixedAssetId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_FixedAssets_CT] c with (nolock) where  ( (c.[FixedAssetId] = t.[FixedAssetId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[FixedAssetId] = m.[FixedAssetId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_FixedAssets', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_FixedAssets_CT] c with (nolock)
							where  ( (c.[FixedAssetId] = t.[FixedAssetId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_FixedAssets_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[FixedAssetId] = mo.[FixedAssetId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[FixedAssetId], t.[AssetNumber], t.[Company], t.[BranchPlant], t.[FixedAssetBranchPlant], t.[AssetDescription], t.[ParentNumber], t.[ParentFixedAssetId], t.[ManufacturersSerialNumber], t.[BusinessUnit], t.[RNItemNum], t.[SerialNum], t.[CurrentItemQty], t.[CurrencyCode], t.[Cost], t.[AccumDepreciation], t.[NetBookValue], t.[ProductLineCode], t.[UnitNumber], t.[InventoryItemNum], t.[LegacySerialNumber], t.[AFENumber], t.[State], t.[ContractAccount], t.[Ownership], t.[DateAcquired], t.[LifeMonths], t.[StartDepreciation_Date], t.[NewUsed], t.[Manufacturer], t.[ModelYear], t.[ThirdItemNumber], t.[DateDisposed], t.[EquipmentStatus], t.[FiscalYear], t.[LedgerType], t.[CatCode16], t.[IsAdvisorOnly], t.[NotUsed], t.[IsAddByWorkOrder], t.[Revision], t.[LastEdit], t.[LastStatusChangeDate], t.[Source], t.[SystemStatus], t.[MaintPlant], t.[MaintPlantDesc], t.[FirmwareVersion], t.[ModelNum], t.[PhysicalLoc], t.[EquipTypeDesc], t.[ERPNotificationDate], t.[ERPNotificationNumber], t.[PartInternalStatus], t.[OriginalLocation], t.[OriginalStatus], t.[SerialDescLong], t.[Comments], t.[SAPLastEdit], t.[ParentPartId], t.[CustomsInvoiceDetailId], t.[Submt], t.[LeakTestDate], t.[RadioIsotope], t.[Activity], t.[SFC], t.[SourceModel], t.[LastComments], t.[PhysicalLocation], t.[VerifiedBy], t.[VerifiedDate], t.[VerifiedLocation], t.[StdCost], t.[StdCostCode], t.[OwnershipDesc], t.[Category], t.[CompanyCodeDesc], t.[CostCenterDesc], t.[CostCenterManager], t.[TechId], t.[MasterFirmwareItemNum], t.[MasterFirmwareRevision], t.[MfgPartNum], t.[DateAdded], t.[UserIdAdded], t.[UserIdLastEdit], t.[TopLevelFixedAssetId], t.[AcqCode], t.[MajorAccountingClass], t.[JournalingFlag], t.[ApplicationCode], t.[AssetLifeRemaining]
		from [cdc].[dbo_FixedAssets_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_FixedAssets', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_FixedAssets_CT] c with (nolock) where  ( (c.[FixedAssetId] = t.[FixedAssetId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_FixedAssets_CT] c with (nolock)
							where  ( (c.[FixedAssetId] = t.[FixedAssetId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_FixedAssets_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[FixedAssetId] = mo.[FixedAssetId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_GLProductLines]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_GLProductLines]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [Code], NULL as [Description], NULL as [UpdatedBy], NULL as [UpdatedOn]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_GLProductLines', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_C79F4871
	    when 1 then __$operation
	    else
			case __$min_op_C79F4871 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [Code], [Description], [UpdatedBy], [UpdatedOn]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_C79F4871 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_GLProductLines_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_C79F4871, __$count_C79F4871, t.[Id], t.[Code], t.[Description], t.[UpdatedBy], t.[UpdatedOn] 
		from [cdc].[dbo_GLProductLines_CT] t with (nolock) inner join 
		(	select  r.[Id],
		    count(*) as __$count_C79F4871 
			from [cdc].[dbo_GLProductLines_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_GLProductLines_CT] c with (nolock) where  ( (c.[Id] = t.[Id]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_GLProductLines', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_GLProductLines_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_GLProductLines_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[Id] = mo.[Id]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_C79F4871
	    when 1 then __$operation
	    else
			case __$min_op_C79F4871 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_C79F4871
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_C79F4871 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [Code], [Description], [UpdatedBy], [UpdatedOn]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_C79F4871 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_GLProductLines_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_C79F4871, __$count_C79F4871, 
		m.__$update_mask , t.[Id], t.[Code], t.[Description], t.[UpdatedBy], t.[UpdatedOn]
		from [cdc].[dbo_GLProductLines_CT] t with (nolock) inner join 
		(	select  r.[Id],
		    count(*) as __$count_C79F4871, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_GLProductLines_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_GLProductLines_CT] c with (nolock) where  ( (c.[Id] = t.[Id]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_GLProductLines', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_GLProductLines_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_GLProductLines_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[Id] = mo.[Id]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[Code], t.[Description], t.[UpdatedBy], t.[UpdatedOn]
		from [cdc].[dbo_GLProductLines_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_GLProductLines', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_GLProductLines_CT] c with (nolock) where  ( (c.[Id] = t.[Id]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_GLProductLines_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_GLProductLines_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[Id] = mo.[Id]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_Incidents]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_Incidents]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [IncidentID], NULL as [RunID], NULL as [IncidentNumber], NULL as [CreateDate], NULL as [FailureDate], NULL as [FieldSummary], NULL as [FieldSurfCheckSummary], NULL as [IsOpen], NULL as [AcceptedLostTime], NULL as [Dist_LWD], NULL as [Dist_DD], NULL as [Dist_MWD], NULL as [Dist_RSS], NULL as [Global_LWD], NULL as [Global_DD], NULL as [Global_MWD], NULL as [Global_RSS], NULL as [Dist_SURVEY], NULL as [Global_SURVEY], NULL as [PreRunNumber], NULL as [MaxDoglegSeverity], NULL as [MaxWhirl], NULL as [MaxStickSlip], NULL as [RptPath], NULL as [CoreVersion], NULL as [IsHistorical], NULL as [IsDownHole], NULL as [ImportUserID], NULL as [ImportDate], NULL as [IsDeleted], NULL as [IsGFA], NULL as [Dist_SURFACE], NULL as [Global_SURFACE], NULL as [ClientNPT], NULL as [COF], NULL as [Criticality], NULL as [CPARId]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_Incidents', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_22EC2BF8
	    when 1 then __$operation
	    else
			case __$min_op_22EC2BF8 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [IncidentID], [RunID], [IncidentNumber], [CreateDate], [FailureDate], [FieldSummary], [FieldSurfCheckSummary], [IsOpen], [AcceptedLostTime], [Dist_LWD], [Dist_DD], [Dist_MWD], [Dist_RSS], [Global_LWD], [Global_DD], [Global_MWD], [Global_RSS], [Dist_SURVEY], [Global_SURVEY], [PreRunNumber], [MaxDoglegSeverity], [MaxWhirl], [MaxStickSlip], [RptPath], [CoreVersion], [IsHistorical], [IsDownHole], [ImportUserID], [ImportDate], [IsDeleted], [IsGFA], [Dist_SURFACE], [Global_SURFACE], [ClientNPT], [COF], [Criticality], [CPARId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_22EC2BF8 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_Incidents_CT] c with (nolock)   
			where  ( (c.[IncidentID] = t.[IncidentID]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_22EC2BF8, __$count_22EC2BF8, t.[IncidentID], t.[RunID], t.[IncidentNumber], t.[CreateDate], t.[FailureDate], t.[FieldSummary], t.[FieldSurfCheckSummary], t.[IsOpen], t.[AcceptedLostTime], t.[Dist_LWD], t.[Dist_DD], t.[Dist_MWD], t.[Dist_RSS], t.[Global_LWD], t.[Global_DD], t.[Global_MWD], t.[Global_RSS], t.[Dist_SURVEY], t.[Global_SURVEY], t.[PreRunNumber], t.[MaxDoglegSeverity], t.[MaxWhirl], t.[MaxStickSlip], t.[RptPath], t.[CoreVersion], t.[IsHistorical], t.[IsDownHole], t.[ImportUserID], t.[ImportDate], t.[IsDeleted], t.[IsGFA], t.[Dist_SURFACE], t.[Global_SURFACE], t.[ClientNPT], t.[COF], t.[Criticality], t.[CPARId] 
		from [cdc].[dbo_Incidents_CT] t with (nolock) inner join 
		(	select  r.[IncidentID],
		    count(*) as __$count_22EC2BF8 
			from [cdc].[dbo_Incidents_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[IncidentID]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_Incidents_CT] c with (nolock) where  ( (c.[IncidentID] = t.[IncidentID]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[IncidentID] = m.[IncidentID]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_Incidents', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_Incidents_CT] c with (nolock) 
							where  ( (c.[IncidentID] = t.[IncidentID]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_Incidents_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[IncidentID] = mo.[IncidentID]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_22EC2BF8
	    when 1 then __$operation
	    else
			case __$min_op_22EC2BF8 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_22EC2BF8
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_22EC2BF8 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [IncidentID], [RunID], [IncidentNumber], [CreateDate], [FailureDate], [FieldSummary], [FieldSurfCheckSummary], [IsOpen], [AcceptedLostTime], [Dist_LWD], [Dist_DD], [Dist_MWD], [Dist_RSS], [Global_LWD], [Global_DD], [Global_MWD], [Global_RSS], [Dist_SURVEY], [Global_SURVEY], [PreRunNumber], [MaxDoglegSeverity], [MaxWhirl], [MaxStickSlip], [RptPath], [CoreVersion], [IsHistorical], [IsDownHole], [ImportUserID], [ImportDate], [IsDeleted], [IsGFA], [Dist_SURFACE], [Global_SURFACE], [ClientNPT], [COF], [Criticality], [CPARId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_22EC2BF8 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_Incidents_CT] c with (nolock)
			where  ( (c.[IncidentID] = t.[IncidentID]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_22EC2BF8, __$count_22EC2BF8, 
		m.__$update_mask , t.[IncidentID], t.[RunID], t.[IncidentNumber], t.[CreateDate], t.[FailureDate], t.[FieldSummary], t.[FieldSurfCheckSummary], t.[IsOpen], t.[AcceptedLostTime], t.[Dist_LWD], t.[Dist_DD], t.[Dist_MWD], t.[Dist_RSS], t.[Global_LWD], t.[Global_DD], t.[Global_MWD], t.[Global_RSS], t.[Dist_SURVEY], t.[Global_SURVEY], t.[PreRunNumber], t.[MaxDoglegSeverity], t.[MaxWhirl], t.[MaxStickSlip], t.[RptPath], t.[CoreVersion], t.[IsHistorical], t.[IsDownHole], t.[ImportUserID], t.[ImportDate], t.[IsDeleted], t.[IsGFA], t.[Dist_SURFACE], t.[Global_SURFACE], t.[ClientNPT], t.[COF], t.[Criticality], t.[CPARId]
		from [cdc].[dbo_Incidents_CT] t with (nolock) inner join 
		(	select  r.[IncidentID],
		    count(*) as __$count_22EC2BF8, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_Incidents_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[IncidentID]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_Incidents_CT] c with (nolock) where  ( (c.[IncidentID] = t.[IncidentID]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[IncidentID] = m.[IncidentID]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_Incidents', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_Incidents_CT] c with (nolock)
							where  ( (c.[IncidentID] = t.[IncidentID]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_Incidents_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[IncidentID] = mo.[IncidentID]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[IncidentID], t.[RunID], t.[IncidentNumber], t.[CreateDate], t.[FailureDate], t.[FieldSummary], t.[FieldSurfCheckSummary], t.[IsOpen], t.[AcceptedLostTime], t.[Dist_LWD], t.[Dist_DD], t.[Dist_MWD], t.[Dist_RSS], t.[Global_LWD], t.[Global_DD], t.[Global_MWD], t.[Global_RSS], t.[Dist_SURVEY], t.[Global_SURVEY], t.[PreRunNumber], t.[MaxDoglegSeverity], t.[MaxWhirl], t.[MaxStickSlip], t.[RptPath], t.[CoreVersion], t.[IsHistorical], t.[IsDownHole], t.[ImportUserID], t.[ImportDate], t.[IsDeleted], t.[IsGFA], t.[Dist_SURFACE], t.[Global_SURFACE], t.[ClientNPT], t.[COF], t.[Criticality], t.[CPARId]
		from [cdc].[dbo_Incidents_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_Incidents', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_Incidents_CT] c with (nolock) where  ( (c.[IncidentID] = t.[IncidentID]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_Incidents_CT] c with (nolock)
							where  ( (c.[IncidentID] = t.[IncidentID]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_Incidents_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[IncidentID] = mo.[IncidentID]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_ItemNumReferences]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_ItemNumReferences]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [ItemNumReferenceId], NULL as [ItemNum], NULL as [RefItemNum], NULL as [RefType], NULL as [Source]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_ItemNumReferences', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_08A3CFCB
	    when 1 then __$operation
	    else
			case __$min_op_08A3CFCB 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [ItemNumReferenceId], [ItemNum], [RefItemNum], [RefType], [Source]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_08A3CFCB 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_ItemNumReferences_CT] c with (nolock)   
			where  ( (c.[ItemNumReferenceId] = t.[ItemNumReferenceId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_08A3CFCB, __$count_08A3CFCB, t.[ItemNumReferenceId], t.[ItemNum], t.[RefItemNum], t.[RefType], t.[Source] 
		from [cdc].[dbo_ItemNumReferences_CT] t with (nolock) inner join 
		(	select  r.[ItemNumReferenceId],
		    count(*) as __$count_08A3CFCB 
			from [cdc].[dbo_ItemNumReferences_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[ItemNumReferenceId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_ItemNumReferences_CT] c with (nolock) where  ( (c.[ItemNumReferenceId] = t.[ItemNumReferenceId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[ItemNumReferenceId] = m.[ItemNumReferenceId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_ItemNumReferences', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_ItemNumReferences_CT] c with (nolock) 
							where  ( (c.[ItemNumReferenceId] = t.[ItemNumReferenceId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_ItemNumReferences_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ItemNumReferenceId] = mo.[ItemNumReferenceId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_08A3CFCB
	    when 1 then __$operation
	    else
			case __$min_op_08A3CFCB 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_08A3CFCB
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_08A3CFCB 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [ItemNumReferenceId], [ItemNum], [RefItemNum], [RefType], [Source]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_08A3CFCB 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_ItemNumReferences_CT] c with (nolock)
			where  ( (c.[ItemNumReferenceId] = t.[ItemNumReferenceId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_08A3CFCB, __$count_08A3CFCB, 
		m.__$update_mask , t.[ItemNumReferenceId], t.[ItemNum], t.[RefItemNum], t.[RefType], t.[Source]
		from [cdc].[dbo_ItemNumReferences_CT] t with (nolock) inner join 
		(	select  r.[ItemNumReferenceId],
		    count(*) as __$count_08A3CFCB, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_ItemNumReferences_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[ItemNumReferenceId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_ItemNumReferences_CT] c with (nolock) where  ( (c.[ItemNumReferenceId] = t.[ItemNumReferenceId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[ItemNumReferenceId] = m.[ItemNumReferenceId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_ItemNumReferences', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_ItemNumReferences_CT] c with (nolock)
							where  ( (c.[ItemNumReferenceId] = t.[ItemNumReferenceId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_ItemNumReferences_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ItemNumReferenceId] = mo.[ItemNumReferenceId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[ItemNumReferenceId], t.[ItemNum], t.[RefItemNum], t.[RefType], t.[Source]
		from [cdc].[dbo_ItemNumReferences_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_ItemNumReferences', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_ItemNumReferences_CT] c with (nolock) where  ( (c.[ItemNumReferenceId] = t.[ItemNumReferenceId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_ItemNumReferences_CT] c with (nolock)
							where  ( (c.[ItemNumReferenceId] = t.[ItemNumReferenceId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_ItemNumReferences_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ItemNumReferenceId] = mo.[ItemNumReferenceId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_ItemNums]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_ItemNums]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [ItemNumId], NULL as [ItemNum], NULL as [ItemNum2], NULL as [ItemNum3], NULL as [LegacyNum], NULL as [DescShort], NULL as [DescLong], NULL as [DefaultUOM], NULL as [PartClassification], NULL as [Revision], NULL as [DescDocNum], NULL as [ToolPanel], NULL as [ToolCode], NULL as [PartCode], NULL as [Critical], NULL as [IsObsolete], NULL as [IsRestrictPurchasing], NULL as [IsAsset], NULL as [DefaultSerialProfile], NULL as [StockType], NULL as [ProductLine], NULL as [ServiceLine], NULL as [PartTypeId], NULL as [Active], NULL as [LastEdit], NULL as [DateAdded], NULL as [TEROrderMultiple], NULL as [IsHazMat], NULL as [ToolPerJob], NULL as [Size], NULL as [JDEGLCode], NULL as [StdUnitCost], NULL as [DepreciationCost], NULL as [NetWeight], NULL as [EcnRestriction]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_ItemNums', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_BD4E2EE0
	    when 1 then __$operation
	    else
			case __$min_op_BD4E2EE0 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [ItemNumId], [ItemNum], [ItemNum2], [ItemNum3], [LegacyNum], [DescShort], [DescLong], [DefaultUOM], [PartClassification], [Revision], [DescDocNum], [ToolPanel], [ToolCode], [PartCode], [Critical], [IsObsolete], [IsRestrictPurchasing], [IsAsset], [DefaultSerialProfile], [StockType], [ProductLine], [ServiceLine], [PartTypeId], [Active], [LastEdit], [DateAdded], [TEROrderMultiple], [IsHazMat], [ToolPerJob], [Size], [JDEGLCode], [StdUnitCost], [DepreciationCost], [NetWeight], [EcnRestriction]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_BD4E2EE0 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_ItemNums_CT] c with (nolock)   
			where  ( (c.[ItemNumId] = t.[ItemNumId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_BD4E2EE0, __$count_BD4E2EE0, t.[ItemNumId], t.[ItemNum], t.[ItemNum2], t.[ItemNum3], t.[LegacyNum], t.[DescShort], t.[DescLong], t.[DefaultUOM], t.[PartClassification], t.[Revision], t.[DescDocNum], t.[ToolPanel], t.[ToolCode], t.[PartCode], t.[Critical], t.[IsObsolete], t.[IsRestrictPurchasing], t.[IsAsset], t.[DefaultSerialProfile], t.[StockType], t.[ProductLine], t.[ServiceLine], t.[PartTypeId], t.[Active], t.[LastEdit], t.[DateAdded], t.[TEROrderMultiple], t.[IsHazMat], t.[ToolPerJob], t.[Size], t.[JDEGLCode], t.[StdUnitCost], t.[DepreciationCost], t.[NetWeight], t.[EcnRestriction] 
		from [cdc].[dbo_ItemNums_CT] t with (nolock) inner join 
		(	select  r.[ItemNumId],
		    count(*) as __$count_BD4E2EE0 
			from [cdc].[dbo_ItemNums_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[ItemNumId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_ItemNums_CT] c with (nolock) where  ( (c.[ItemNumId] = t.[ItemNumId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[ItemNumId] = m.[ItemNumId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_ItemNums', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_ItemNums_CT] c with (nolock) 
							where  ( (c.[ItemNumId] = t.[ItemNumId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_ItemNums_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ItemNumId] = mo.[ItemNumId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_BD4E2EE0
	    when 1 then __$operation
	    else
			case __$min_op_BD4E2EE0 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_BD4E2EE0
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_BD4E2EE0 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [ItemNumId], [ItemNum], [ItemNum2], [ItemNum3], [LegacyNum], [DescShort], [DescLong], [DefaultUOM], [PartClassification], [Revision], [DescDocNum], [ToolPanel], [ToolCode], [PartCode], [Critical], [IsObsolete], [IsRestrictPurchasing], [IsAsset], [DefaultSerialProfile], [StockType], [ProductLine], [ServiceLine], [PartTypeId], [Active], [LastEdit], [DateAdded], [TEROrderMultiple], [IsHazMat], [ToolPerJob], [Size], [JDEGLCode], [StdUnitCost], [DepreciationCost], [NetWeight], [EcnRestriction]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_BD4E2EE0 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_ItemNums_CT] c with (nolock)
			where  ( (c.[ItemNumId] = t.[ItemNumId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_BD4E2EE0, __$count_BD4E2EE0, 
		m.__$update_mask , t.[ItemNumId], t.[ItemNum], t.[ItemNum2], t.[ItemNum3], t.[LegacyNum], t.[DescShort], t.[DescLong], t.[DefaultUOM], t.[PartClassification], t.[Revision], t.[DescDocNum], t.[ToolPanel], t.[ToolCode], t.[PartCode], t.[Critical], t.[IsObsolete], t.[IsRestrictPurchasing], t.[IsAsset], t.[DefaultSerialProfile], t.[StockType], t.[ProductLine], t.[ServiceLine], t.[PartTypeId], t.[Active], t.[LastEdit], t.[DateAdded], t.[TEROrderMultiple], t.[IsHazMat], t.[ToolPerJob], t.[Size], t.[JDEGLCode], t.[StdUnitCost], t.[DepreciationCost], t.[NetWeight], t.[EcnRestriction]
		from [cdc].[dbo_ItemNums_CT] t with (nolock) inner join 
		(	select  r.[ItemNumId],
		    count(*) as __$count_BD4E2EE0, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_ItemNums_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[ItemNumId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_ItemNums_CT] c with (nolock) where  ( (c.[ItemNumId] = t.[ItemNumId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[ItemNumId] = m.[ItemNumId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_ItemNums', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_ItemNums_CT] c with (nolock)
							where  ( (c.[ItemNumId] = t.[ItemNumId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_ItemNums_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ItemNumId] = mo.[ItemNumId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[ItemNumId], t.[ItemNum], t.[ItemNum2], t.[ItemNum3], t.[LegacyNum], t.[DescShort], t.[DescLong], t.[DefaultUOM], t.[PartClassification], t.[Revision], t.[DescDocNum], t.[ToolPanel], t.[ToolCode], t.[PartCode], t.[Critical], t.[IsObsolete], t.[IsRestrictPurchasing], t.[IsAsset], t.[DefaultSerialProfile], t.[StockType], t.[ProductLine], t.[ServiceLine], t.[PartTypeId], t.[Active], t.[LastEdit], t.[DateAdded], t.[TEROrderMultiple], t.[IsHazMat], t.[ToolPerJob], t.[Size], t.[JDEGLCode], t.[StdUnitCost], t.[DepreciationCost], t.[NetWeight], t.[EcnRestriction]
		from [cdc].[dbo_ItemNums_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_ItemNums', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_ItemNums_CT] c with (nolock) where  ( (c.[ItemNumId] = t.[ItemNumId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_ItemNums_CT] c with (nolock)
							where  ( (c.[ItemNumId] = t.[ItemNumId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_ItemNums_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ItemNumId] = mo.[ItemNumId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_PartDescPFTConfigs]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_PartDescPFTConfigs]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [PartDescPFTConfigID], NULL as [ItemNum], NULL as [PFTConfigID], NULL as [PFTType], NULL as [CreatedOn]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_PartDescPFTConfigs', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_EF07EFAD
	    when 1 then __$operation
	    else
			case __$min_op_EF07EFAD 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [PartDescPFTConfigID], [ItemNum], [PFTConfigID], [PFTType], [CreatedOn]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_EF07EFAD 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_PartDescPFTConfigs_CT] c with (nolock)   
			where  ( (c.[PartDescPFTConfigID] = t.[PartDescPFTConfigID]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_EF07EFAD, __$count_EF07EFAD, t.[PartDescPFTConfigID], t.[ItemNum], t.[PFTConfigID], t.[PFTType], t.[CreatedOn] 
		from [cdc].[dbo_PartDescPFTConfigs_CT] t with (nolock) inner join 
		(	select  r.[PartDescPFTConfigID],
		    count(*) as __$count_EF07EFAD 
			from [cdc].[dbo_PartDescPFTConfigs_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[PartDescPFTConfigID]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PartDescPFTConfigs_CT] c with (nolock) where  ( (c.[PartDescPFTConfigID] = t.[PartDescPFTConfigID]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[PartDescPFTConfigID] = m.[PartDescPFTConfigID]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PartDescPFTConfigs', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PartDescPFTConfigs_CT] c with (nolock) 
							where  ( (c.[PartDescPFTConfigID] = t.[PartDescPFTConfigID]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PartDescPFTConfigs_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PartDescPFTConfigID] = mo.[PartDescPFTConfigID]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_EF07EFAD
	    when 1 then __$operation
	    else
			case __$min_op_EF07EFAD 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_EF07EFAD
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_EF07EFAD 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [PartDescPFTConfigID], [ItemNum], [PFTConfigID], [PFTType], [CreatedOn]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_EF07EFAD 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_PartDescPFTConfigs_CT] c with (nolock)
			where  ( (c.[PartDescPFTConfigID] = t.[PartDescPFTConfigID]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_EF07EFAD, __$count_EF07EFAD, 
		m.__$update_mask , t.[PartDescPFTConfigID], t.[ItemNum], t.[PFTConfigID], t.[PFTType], t.[CreatedOn]
		from [cdc].[dbo_PartDescPFTConfigs_CT] t with (nolock) inner join 
		(	select  r.[PartDescPFTConfigID],
		    count(*) as __$count_EF07EFAD, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_PartDescPFTConfigs_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[PartDescPFTConfigID]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PartDescPFTConfigs_CT] c with (nolock) where  ( (c.[PartDescPFTConfigID] = t.[PartDescPFTConfigID]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[PartDescPFTConfigID] = m.[PartDescPFTConfigID]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PartDescPFTConfigs', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PartDescPFTConfigs_CT] c with (nolock)
							where  ( (c.[PartDescPFTConfigID] = t.[PartDescPFTConfigID]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PartDescPFTConfigs_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PartDescPFTConfigID] = mo.[PartDescPFTConfigID]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[PartDescPFTConfigID], t.[ItemNum], t.[PFTConfigID], t.[PFTType], t.[CreatedOn]
		from [cdc].[dbo_PartDescPFTConfigs_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PartDescPFTConfigs', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PartDescPFTConfigs_CT] c with (nolock) where  ( (c.[PartDescPFTConfigID] = t.[PartDescPFTConfigID]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PartDescPFTConfigs_CT] c with (nolock)
							where  ( (c.[PartDescPFTConfigID] = t.[PartDescPFTConfigID]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PartDescPFTConfigs_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PartDescPFTConfigID] = mo.[PartDescPFTConfigID]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_PartStatus]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_PartStatus]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [PartStatusId], NULL as [Status], NULL as [Code], NULL as [ErpStatusCode], NULL as [IsSrcWorkOrder], NULL as [IsDestWorkOrder], NULL as [IsSrcWorkOrderChild], NULL as [IsDestWorkOrderChild], NULL as [IsSrcDispatch], NULL as [IsDestDispatch], NULL as [IsSrcAIRT], NULL as [IsDestAIRT], NULL as [IsSrcPFT], NULL as [IsDestPFT], NULL as [IsSrcBuildSheet], NULL as [IsDestBuildSheet], NULL as [IsActive], NULL as [IsAssigned], NULL as [IsAvailable], NULL as [IsDisposed], NULL as [IsTesting], NULL as [IsRepair], NULL as [IsTransit], NULL as [IsParked], NULL as [IsOther], NULL as [IsSrcStatus], NULL as [IsDestStatus], NULL as [IsInActive], NULL as [IsTrend]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_PartStatus', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_29A99890
	    when 1 then __$operation
	    else
			case __$min_op_29A99890 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [PartStatusId], [Status], [Code], [ErpStatusCode], [IsSrcWorkOrder], [IsDestWorkOrder], [IsSrcWorkOrderChild], [IsDestWorkOrderChild], [IsSrcDispatch], [IsDestDispatch], [IsSrcAIRT], [IsDestAIRT], [IsSrcPFT], [IsDestPFT], [IsSrcBuildSheet], [IsDestBuildSheet], [IsActive], [IsAssigned], [IsAvailable], [IsDisposed], [IsTesting], [IsRepair], [IsTransit], [IsParked], [IsOther], [IsSrcStatus], [IsDestStatus], [IsInActive], [IsTrend]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_29A99890 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_PartStatus_CT] c with (nolock)   
			where  ( (c.[PartStatusId] = t.[PartStatusId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_29A99890, __$count_29A99890, t.[PartStatusId], t.[Status], t.[Code], t.[ErpStatusCode], t.[IsSrcWorkOrder], t.[IsDestWorkOrder], t.[IsSrcWorkOrderChild], t.[IsDestWorkOrderChild], t.[IsSrcDispatch], t.[IsDestDispatch], t.[IsSrcAIRT], t.[IsDestAIRT], t.[IsSrcPFT], t.[IsDestPFT], t.[IsSrcBuildSheet], t.[IsDestBuildSheet], t.[IsActive], t.[IsAssigned], t.[IsAvailable], t.[IsDisposed], t.[IsTesting], t.[IsRepair], t.[IsTransit], t.[IsParked], t.[IsOther], t.[IsSrcStatus], t.[IsDestStatus], t.[IsInActive], t.[IsTrend] 
		from [cdc].[dbo_PartStatus_CT] t with (nolock) inner join 
		(	select  r.[PartStatusId],
		    count(*) as __$count_29A99890 
			from [cdc].[dbo_PartStatus_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[PartStatusId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PartStatus_CT] c with (nolock) where  ( (c.[PartStatusId] = t.[PartStatusId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[PartStatusId] = m.[PartStatusId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PartStatus', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PartStatus_CT] c with (nolock) 
							where  ( (c.[PartStatusId] = t.[PartStatusId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PartStatus_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PartStatusId] = mo.[PartStatusId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_29A99890
	    when 1 then __$operation
	    else
			case __$min_op_29A99890 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_29A99890
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_29A99890 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [PartStatusId], [Status], [Code], [ErpStatusCode], [IsSrcWorkOrder], [IsDestWorkOrder], [IsSrcWorkOrderChild], [IsDestWorkOrderChild], [IsSrcDispatch], [IsDestDispatch], [IsSrcAIRT], [IsDestAIRT], [IsSrcPFT], [IsDestPFT], [IsSrcBuildSheet], [IsDestBuildSheet], [IsActive], [IsAssigned], [IsAvailable], [IsDisposed], [IsTesting], [IsRepair], [IsTransit], [IsParked], [IsOther], [IsSrcStatus], [IsDestStatus], [IsInActive], [IsTrend]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_29A99890 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_PartStatus_CT] c with (nolock)
			where  ( (c.[PartStatusId] = t.[PartStatusId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_29A99890, __$count_29A99890, 
		m.__$update_mask , t.[PartStatusId], t.[Status], t.[Code], t.[ErpStatusCode], t.[IsSrcWorkOrder], t.[IsDestWorkOrder], t.[IsSrcWorkOrderChild], t.[IsDestWorkOrderChild], t.[IsSrcDispatch], t.[IsDestDispatch], t.[IsSrcAIRT], t.[IsDestAIRT], t.[IsSrcPFT], t.[IsDestPFT], t.[IsSrcBuildSheet], t.[IsDestBuildSheet], t.[IsActive], t.[IsAssigned], t.[IsAvailable], t.[IsDisposed], t.[IsTesting], t.[IsRepair], t.[IsTransit], t.[IsParked], t.[IsOther], t.[IsSrcStatus], t.[IsDestStatus], t.[IsInActive], t.[IsTrend]
		from [cdc].[dbo_PartStatus_CT] t with (nolock) inner join 
		(	select  r.[PartStatusId],
		    count(*) as __$count_29A99890, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_PartStatus_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[PartStatusId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PartStatus_CT] c with (nolock) where  ( (c.[PartStatusId] = t.[PartStatusId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[PartStatusId] = m.[PartStatusId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PartStatus', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PartStatus_CT] c with (nolock)
							where  ( (c.[PartStatusId] = t.[PartStatusId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PartStatus_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PartStatusId] = mo.[PartStatusId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[PartStatusId], t.[Status], t.[Code], t.[ErpStatusCode], t.[IsSrcWorkOrder], t.[IsDestWorkOrder], t.[IsSrcWorkOrderChild], t.[IsDestWorkOrderChild], t.[IsSrcDispatch], t.[IsDestDispatch], t.[IsSrcAIRT], t.[IsDestAIRT], t.[IsSrcPFT], t.[IsDestPFT], t.[IsSrcBuildSheet], t.[IsDestBuildSheet], t.[IsActive], t.[IsAssigned], t.[IsAvailable], t.[IsDisposed], t.[IsTesting], t.[IsRepair], t.[IsTransit], t.[IsParked], t.[IsOther], t.[IsSrcStatus], t.[IsDestStatus], t.[IsInActive], t.[IsTrend]
		from [cdc].[dbo_PartStatus_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PartStatus', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PartStatus_CT] c with (nolock) where  ( (c.[PartStatusId] = t.[PartStatusId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PartStatus_CT] c with (nolock)
							where  ( (c.[PartStatusId] = t.[PartStatusId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PartStatus_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PartStatusId] = mo.[PartStatusId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_PFTConfig]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_PFTConfig]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [PFTConfigId], NULL as [ProcessName], NULL as [ProcessDesc], NULL as [IsDynamic], NULL as [DateAdded], NULL as [IsObsolete], NULL as [PFTObjectId], NULL as [ObjectNumber]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTConfig', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_5F012F05
	    when 1 then __$operation
	    else
			case __$min_op_5F012F05 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [PFTConfigId], [ProcessName], [ProcessDesc], [IsDynamic], [DateAdded], [IsObsolete], [PFTObjectId], [ObjectNumber]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_5F012F05 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_PFTConfig_CT] c with (nolock)   
			where  ( (c.[PFTConfigId] = t.[PFTConfigId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_5F012F05, __$count_5F012F05, t.[PFTConfigId], t.[ProcessName], t.[ProcessDesc], t.[IsDynamic], t.[DateAdded], t.[IsObsolete], t.[PFTObjectId], t.[ObjectNumber] 
		from [cdc].[dbo_PFTConfig_CT] t with (nolock) inner join 
		(	select  r.[PFTConfigId],
		    count(*) as __$count_5F012F05 
			from [cdc].[dbo_PFTConfig_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[PFTConfigId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PFTConfig_CT] c with (nolock) where  ( (c.[PFTConfigId] = t.[PFTConfigId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[PFTConfigId] = m.[PFTConfigId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTConfig', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PFTConfig_CT] c with (nolock) 
							where  ( (c.[PFTConfigId] = t.[PFTConfigId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PFTConfig_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PFTConfigId] = mo.[PFTConfigId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_5F012F05
	    when 1 then __$operation
	    else
			case __$min_op_5F012F05 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_5F012F05
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_5F012F05 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [PFTConfigId], [ProcessName], [ProcessDesc], [IsDynamic], [DateAdded], [IsObsolete], [PFTObjectId], [ObjectNumber]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_5F012F05 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_PFTConfig_CT] c with (nolock)
			where  ( (c.[PFTConfigId] = t.[PFTConfigId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_5F012F05, __$count_5F012F05, 
		m.__$update_mask , t.[PFTConfigId], t.[ProcessName], t.[ProcessDesc], t.[IsDynamic], t.[DateAdded], t.[IsObsolete], t.[PFTObjectId], t.[ObjectNumber]
		from [cdc].[dbo_PFTConfig_CT] t with (nolock) inner join 
		(	select  r.[PFTConfigId],
		    count(*) as __$count_5F012F05, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_PFTConfig_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[PFTConfigId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PFTConfig_CT] c with (nolock) where  ( (c.[PFTConfigId] = t.[PFTConfigId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[PFTConfigId] = m.[PFTConfigId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTConfig', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PFTConfig_CT] c with (nolock)
							where  ( (c.[PFTConfigId] = t.[PFTConfigId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PFTConfig_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PFTConfigId] = mo.[PFTConfigId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[PFTConfigId], t.[ProcessName], t.[ProcessDesc], t.[IsDynamic], t.[DateAdded], t.[IsObsolete], t.[PFTObjectId], t.[ObjectNumber]
		from [cdc].[dbo_PFTConfig_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTConfig', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PFTConfig_CT] c with (nolock) where  ( (c.[PFTConfigId] = t.[PFTConfigId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PFTConfig_CT] c with (nolock)
							where  ( (c.[PFTConfigId] = t.[PFTConfigId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PFTConfig_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PFTConfigId] = mo.[PFTConfigId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_PFTObjects]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_PFTObjects]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [ObjectId], NULL as [ObjectNumber], NULL as [Revision], NULL as [Type], NULL as [Name], NULL as [Description], NULL as [ProductLineId], NULL as [State], NULL as [Field1], NULL as [Field2], NULL as [Field3], NULL as [Field4], NULL as [Field5], NULL as [CreatedBy], NULL as [CreatedOn], NULL as [UpdatedBy], NULL as [UpdatedOn], NULL as [ReasonForChange], NULL as [Field6], NULL as [Field7], NULL as [Field8], NULL as [Field9], NULL as [Field10], NULL as [Field11], NULL as [Field12], NULL as [Field13], NULL as [Field14], NULL as [Field15]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTObjects', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_A62F1151
	    when 1 then __$operation
	    else
			case __$min_op_A62F1151 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [ObjectId], [ObjectNumber], [Revision], [Type], [Name], [Description], [ProductLineId], [State], [Field1], [Field2], [Field3], [Field4], [Field5], [CreatedBy], [CreatedOn], [UpdatedBy], [UpdatedOn], [ReasonForChange], [Field6], [Field7], [Field8], [Field9], [Field10], [Field11], [Field12], [Field13], [Field14], [Field15]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_A62F1151 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_PFTObjects_CT] c with (nolock)   
			where  ( (c.[ObjectId] = t.[ObjectId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_A62F1151, __$count_A62F1151, t.[ObjectId], t.[ObjectNumber], t.[Revision], t.[Type], t.[Name], t.[Description], t.[ProductLineId], t.[State], t.[Field1], t.[Field2], t.[Field3], t.[Field4], t.[Field5], t.[CreatedBy], t.[CreatedOn], t.[UpdatedBy], t.[UpdatedOn], t.[ReasonForChange], t.[Field6], t.[Field7], t.[Field8], t.[Field9], t.[Field10], t.[Field11], t.[Field12], t.[Field13], t.[Field14], t.[Field15] 
		from [cdc].[dbo_PFTObjects_CT] t with (nolock) inner join 
		(	select  r.[ObjectId],
		    count(*) as __$count_A62F1151 
			from [cdc].[dbo_PFTObjects_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[ObjectId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PFTObjects_CT] c with (nolock) where  ( (c.[ObjectId] = t.[ObjectId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[ObjectId] = m.[ObjectId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTObjects', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PFTObjects_CT] c with (nolock) 
							where  ( (c.[ObjectId] = t.[ObjectId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PFTObjects_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ObjectId] = mo.[ObjectId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_A62F1151
	    when 1 then __$operation
	    else
			case __$min_op_A62F1151 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_A62F1151
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_A62F1151 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [ObjectId], [ObjectNumber], [Revision], [Type], [Name], [Description], [ProductLineId], [State], [Field1], [Field2], [Field3], [Field4], [Field5], [CreatedBy], [CreatedOn], [UpdatedBy], [UpdatedOn], [ReasonForChange], [Field6], [Field7], [Field8], [Field9], [Field10], [Field11], [Field12], [Field13], [Field14], [Field15]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_A62F1151 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_PFTObjects_CT] c with (nolock)
			where  ( (c.[ObjectId] = t.[ObjectId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_A62F1151, __$count_A62F1151, 
		m.__$update_mask , t.[ObjectId], t.[ObjectNumber], t.[Revision], t.[Type], t.[Name], t.[Description], t.[ProductLineId], t.[State], t.[Field1], t.[Field2], t.[Field3], t.[Field4], t.[Field5], t.[CreatedBy], t.[CreatedOn], t.[UpdatedBy], t.[UpdatedOn], t.[ReasonForChange], t.[Field6], t.[Field7], t.[Field8], t.[Field9], t.[Field10], t.[Field11], t.[Field12], t.[Field13], t.[Field14], t.[Field15]
		from [cdc].[dbo_PFTObjects_CT] t with (nolock) inner join 
		(	select  r.[ObjectId],
		    count(*) as __$count_A62F1151, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_PFTObjects_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[ObjectId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PFTObjects_CT] c with (nolock) where  ( (c.[ObjectId] = t.[ObjectId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[ObjectId] = m.[ObjectId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTObjects', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PFTObjects_CT] c with (nolock)
							where  ( (c.[ObjectId] = t.[ObjectId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PFTObjects_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ObjectId] = mo.[ObjectId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[ObjectId], t.[ObjectNumber], t.[Revision], t.[Type], t.[Name], t.[Description], t.[ProductLineId], t.[State], t.[Field1], t.[Field2], t.[Field3], t.[Field4], t.[Field5], t.[CreatedBy], t.[CreatedOn], t.[UpdatedBy], t.[UpdatedOn], t.[ReasonForChange], t.[Field6], t.[Field7], t.[Field8], t.[Field9], t.[Field10], t.[Field11], t.[Field12], t.[Field13], t.[Field14], t.[Field15]
		from [cdc].[dbo_PFTObjects_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTObjects', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PFTObjects_CT] c with (nolock) where  ( (c.[ObjectId] = t.[ObjectId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PFTObjects_CT] c with (nolock)
							where  ( (c.[ObjectId] = t.[ObjectId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PFTObjects_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ObjectId] = mo.[ObjectId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_PFTWO]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_PFTWO]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [PFTWOId], NULL as [WO_NO], NULL as [WorkOrderId], NULL as [BranchPlant], NULL as [FixedAssetId], NULL as [AssetNumber], NULL as [ItemNum], NULL as [PFTConfigId], NULL as [Active], NULL as [CurPFTWOSeqId], NULL as [UserIdAdded], NULL as [Revision], NULL as [IsDynamic], NULL as [ReferenceDocs], NULL as [SerialNum], NULL as [IncidentNum], NULL as [JobNum], NULL as [Combo], NULL as [IsDebug], NULL as [IsRTV], NULL as [DateAdded], NULL as [PFTType], NULL as [FWSensorId], NULL as [SensorName], NULL as [NCRRequestId], NULL as [JDEWorkOrderNum], NULL as [AssetRepairTrackId], NULL as [UpdatedBy], NULL as [ReasonForChange]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTWO', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_B0376223
	    when 1 then __$operation
	    else
			case __$min_op_B0376223 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [PFTWOId], [WO_NO], [WorkOrderId], [BranchPlant], [FixedAssetId], [AssetNumber], [ItemNum], [PFTConfigId], [Active], [CurPFTWOSeqId], [UserIdAdded], [Revision], [IsDynamic], [ReferenceDocs], [SerialNum], [IncidentNum], [JobNum], [Combo], [IsDebug], [IsRTV], [DateAdded], [PFTType], [FWSensorId], [SensorName], [NCRRequestId], [JDEWorkOrderNum], [AssetRepairTrackId], [UpdatedBy], [ReasonForChange]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_B0376223 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_PFTWO_CT] c with (nolock)   
			where  ( (c.[PFTWOId] = t.[PFTWOId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_B0376223, __$count_B0376223, t.[PFTWOId], t.[WO_NO], t.[WorkOrderId], t.[BranchPlant], t.[FixedAssetId], t.[AssetNumber], t.[ItemNum], t.[PFTConfigId], t.[Active], t.[CurPFTWOSeqId], t.[UserIdAdded], t.[Revision], t.[IsDynamic], t.[ReferenceDocs], t.[SerialNum], t.[IncidentNum], t.[JobNum], t.[Combo], t.[IsDebug], t.[IsRTV], t.[DateAdded], t.[PFTType], t.[FWSensorId], t.[SensorName], t.[NCRRequestId], t.[JDEWorkOrderNum], t.[AssetRepairTrackId], t.[UpdatedBy], t.[ReasonForChange] 
		from [cdc].[dbo_PFTWO_CT] t with (nolock) inner join 
		(	select  r.[PFTWOId],
		    count(*) as __$count_B0376223 
			from [cdc].[dbo_PFTWO_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[PFTWOId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PFTWO_CT] c with (nolock) where  ( (c.[PFTWOId] = t.[PFTWOId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[PFTWOId] = m.[PFTWOId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTWO', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PFTWO_CT] c with (nolock) 
							where  ( (c.[PFTWOId] = t.[PFTWOId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PFTWO_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PFTWOId] = mo.[PFTWOId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_B0376223
	    when 1 then __$operation
	    else
			case __$min_op_B0376223 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_B0376223
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_B0376223 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [PFTWOId], [WO_NO], [WorkOrderId], [BranchPlant], [FixedAssetId], [AssetNumber], [ItemNum], [PFTConfigId], [Active], [CurPFTWOSeqId], [UserIdAdded], [Revision], [IsDynamic], [ReferenceDocs], [SerialNum], [IncidentNum], [JobNum], [Combo], [IsDebug], [IsRTV], [DateAdded], [PFTType], [FWSensorId], [SensorName], [NCRRequestId], [JDEWorkOrderNum], [AssetRepairTrackId], [UpdatedBy], [ReasonForChange]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_B0376223 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_PFTWO_CT] c with (nolock)
			where  ( (c.[PFTWOId] = t.[PFTWOId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_B0376223, __$count_B0376223, 
		m.__$update_mask , t.[PFTWOId], t.[WO_NO], t.[WorkOrderId], t.[BranchPlant], t.[FixedAssetId], t.[AssetNumber], t.[ItemNum], t.[PFTConfigId], t.[Active], t.[CurPFTWOSeqId], t.[UserIdAdded], t.[Revision], t.[IsDynamic], t.[ReferenceDocs], t.[SerialNum], t.[IncidentNum], t.[JobNum], t.[Combo], t.[IsDebug], t.[IsRTV], t.[DateAdded], t.[PFTType], t.[FWSensorId], t.[SensorName], t.[NCRRequestId], t.[JDEWorkOrderNum], t.[AssetRepairTrackId], t.[UpdatedBy], t.[ReasonForChange]
		from [cdc].[dbo_PFTWO_CT] t with (nolock) inner join 
		(	select  r.[PFTWOId],
		    count(*) as __$count_B0376223, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_PFTWO_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[PFTWOId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PFTWO_CT] c with (nolock) where  ( (c.[PFTWOId] = t.[PFTWOId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[PFTWOId] = m.[PFTWOId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTWO', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PFTWO_CT] c with (nolock)
							where  ( (c.[PFTWOId] = t.[PFTWOId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PFTWO_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PFTWOId] = mo.[PFTWOId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[PFTWOId], t.[WO_NO], t.[WorkOrderId], t.[BranchPlant], t.[FixedAssetId], t.[AssetNumber], t.[ItemNum], t.[PFTConfigId], t.[Active], t.[CurPFTWOSeqId], t.[UserIdAdded], t.[Revision], t.[IsDynamic], t.[ReferenceDocs], t.[SerialNum], t.[IncidentNum], t.[JobNum], t.[Combo], t.[IsDebug], t.[IsRTV], t.[DateAdded], t.[PFTType], t.[FWSensorId], t.[SensorName], t.[NCRRequestId], t.[JDEWorkOrderNum], t.[AssetRepairTrackId], t.[UpdatedBy], t.[ReasonForChange]
		from [cdc].[dbo_PFTWO_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTWO', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PFTWO_CT] c with (nolock) where  ( (c.[PFTWOId] = t.[PFTWOId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PFTWO_CT] c with (nolock)
							where  ( (c.[PFTWOId] = t.[PFTWOId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PFTWO_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PFTWOId] = mo.[PFTWOId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_PFTWOSeq]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_PFTWOSeq]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [PFTWOSeqId], NULL as [PFTWOId], NULL as [PFTConfigSeqId], NULL as [PFTResult], NULL as [FailureCode], NULL as [FailureComponent], NULL as [Comment], NULL as [Hours], NULL as [UserName], NULL as [UserId], NULL as [NCRRequestId], NULL as [IsDebug], NULL as [IsRTV], NULL as [DateAdded]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTWOSeq', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_F5344620
	    when 1 then __$operation
	    else
			case __$min_op_F5344620 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [PFTWOSeqId], [PFTWOId], [PFTConfigSeqId], [PFTResult], [FailureCode], [FailureComponent], [Comment], [Hours], [UserName], [UserId], [NCRRequestId], [IsDebug], [IsRTV], [DateAdded]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_F5344620 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_PFTWOSeq_CT] c with (nolock)   
			where  ( (c.[PFTWOSeqId] = t.[PFTWOSeqId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_F5344620, __$count_F5344620, t.[PFTWOSeqId], t.[PFTWOId], t.[PFTConfigSeqId], t.[PFTResult], t.[FailureCode], t.[FailureComponent], t.[Comment], t.[Hours], t.[UserName], t.[UserId], t.[NCRRequestId], t.[IsDebug], t.[IsRTV], t.[DateAdded] 
		from [cdc].[dbo_PFTWOSeq_CT] t with (nolock) inner join 
		(	select  r.[PFTWOSeqId],
		    count(*) as __$count_F5344620 
			from [cdc].[dbo_PFTWOSeq_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[PFTWOSeqId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PFTWOSeq_CT] c with (nolock) where  ( (c.[PFTWOSeqId] = t.[PFTWOSeqId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[PFTWOSeqId] = m.[PFTWOSeqId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTWOSeq', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PFTWOSeq_CT] c with (nolock) 
							where  ( (c.[PFTWOSeqId] = t.[PFTWOSeqId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PFTWOSeq_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PFTWOSeqId] = mo.[PFTWOSeqId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_F5344620
	    when 1 then __$operation
	    else
			case __$min_op_F5344620 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_F5344620
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_F5344620 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [PFTWOSeqId], [PFTWOId], [PFTConfigSeqId], [PFTResult], [FailureCode], [FailureComponent], [Comment], [Hours], [UserName], [UserId], [NCRRequestId], [IsDebug], [IsRTV], [DateAdded]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_F5344620 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_PFTWOSeq_CT] c with (nolock)
			where  ( (c.[PFTWOSeqId] = t.[PFTWOSeqId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_F5344620, __$count_F5344620, 
		m.__$update_mask , t.[PFTWOSeqId], t.[PFTWOId], t.[PFTConfigSeqId], t.[PFTResult], t.[FailureCode], t.[FailureComponent], t.[Comment], t.[Hours], t.[UserName], t.[UserId], t.[NCRRequestId], t.[IsDebug], t.[IsRTV], t.[DateAdded]
		from [cdc].[dbo_PFTWOSeq_CT] t with (nolock) inner join 
		(	select  r.[PFTWOSeqId],
		    count(*) as __$count_F5344620, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_PFTWOSeq_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[PFTWOSeqId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PFTWOSeq_CT] c with (nolock) where  ( (c.[PFTWOSeqId] = t.[PFTWOSeqId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[PFTWOSeqId] = m.[PFTWOSeqId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTWOSeq', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PFTWOSeq_CT] c with (nolock)
							where  ( (c.[PFTWOSeqId] = t.[PFTWOSeqId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PFTWOSeq_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PFTWOSeqId] = mo.[PFTWOSeqId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[PFTWOSeqId], t.[PFTWOId], t.[PFTConfigSeqId], t.[PFTResult], t.[FailureCode], t.[FailureComponent], t.[Comment], t.[Hours], t.[UserName], t.[UserId], t.[NCRRequestId], t.[IsDebug], t.[IsRTV], t.[DateAdded]
		from [cdc].[dbo_PFTWOSeq_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_PFTWOSeq', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_PFTWOSeq_CT] c with (nolock) where  ( (c.[PFTWOSeqId] = t.[PFTWOSeqId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_PFTWOSeq_CT] c with (nolock)
							where  ( (c.[PFTWOSeqId] = t.[PFTWOSeqId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_PFTWOSeq_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[PFTWOSeqId] = mo.[PFTWOSeqId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_RelBusinessIntelligenceDataSet]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_RelBusinessIntelligenceDataSet]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [RunId], NULL as [RunYear], NULL as [RunMonth], NULL as [RunMonthName], NULL as [Quarter], NULL as [MonthYear], NULL as [Region], NULL as [Country], NULL as [District], NULL as [CustomerID], NULL as [Hemisphere], NULL as [RegionDesc], NULL as [DistrictDesc], NULL as [CustomerName], NULL as [JobNumber], NULL as [Rig], NULL as [TFF], NULL as [CSI], NULL as [NCI], NULL as [OS], NULL as [PR], NULL as [Others], NULL as [GFA], NULL as [NonTFFRun], NULL as [NPT], NULL as [NPTRun], NULL as [NonNPTRun], NULL as [NPTRunNoTFF], NULL as [CIRunNoNPT], NULL as [GoodRun], NULL as [B2B], NULL as [MaxTempF], NULL as [MaxTempWindowF], NULL as [MaxTempC], NULL as [MaxTempWindowC], NULL as [OperHrs], NULL as [CircHrs], NULL as [DrillHrs], NULL as [CircHrsWindow], NULL as [Less30CircHrEvents], NULL as [Less30CircHr], NULL as [LWD], NULL as [HELEM], NULL as [EM], NULL as [PP], NULL as [RSS], NULL as [MotorWFT], NULL as [RentalMotor], NULL as [AllMWD], NULL as [BECFIELD], NULL as [TENSOR], NULL as [GEOLINK], NULL as [Well], NULL as [RunNumber], NULL as [RunNumberCnt], NULL as [OffShore], NULL as [InHoleDate], NULL as [EndDate], NULL as [OutHoleDate], NULL as [TFFToolString], NULL as [TFFComponentID], NULL as [TFFComponent], NULL as [TFFComponentDesc], NULL as [TFFSerialNumber], NULL as [Greater30HrsNPTEvents], NULL as [Greater30HrNPTHrs], NULL as [Is3030], NULL as [Non3030], NULL as [RMReportStatus], NULL as [MDStart], NULL as [MDEnd], NULL as [MDEndWindow], NULL as [MDDistance], NULL as [TVDStart], NULL as [TVDEnd], NULL as [HoleSize], NULL as [HoleSizeWindow], NULL as [MaxHydrostaticPressure], NULL as [MaxOperPressure], NULL as [MaxObservedPressure], NULL as [MudDensity], NULL as [BaseFluidEnd], NULL as [MaxDoglegRotating], NULL as [MaxDoglegRotatingWindow], NULL as [MaxDoglegSliding], NULL as [MaxDoglegSlidingWindow], NULL as [MaxInc], NULL as [FlowRate], NULL as [MotorSerialNumber], NULL as [MotorSize], NULL as [MotorLength], NULL as [MotorType], NULL as [Manufacturer], NULL as [LobesRS], NULL as [MotorRPM], NULL as [MotorOnBottom], NULL as [MotorOffBottom], NULL as [MotorDifferential], NULL as [Tools], NULL as [ToolSize], NULL as [CountryDesc], NULL as [FieldSymptom], NULL as [FieldSymptom2], NULL as [RSSFailureTFF], NULL as [RSSFailureCSI], NULL as [RSSNPTnonTFF], NULL as [TotalRSSNPTTFF], NULL as [RSSOT], NULL as [LWDFailureTFF], NULL as [LWDFailureCSI], NULL as [LWDNPTTFF], NULL as [LWDNPTnonTFF], NULL as [TotalLWDNPT], NULL as [LWDOT], NULL as [CompFailureCode], NULL as [CompFailureCodeDesc], NULL as [OutOfSpecCode], NULL as [OutOfSpecCodeDesc], NULL as [OSNPT], NULL as [ProceduralCode], NULL as [ProceduralCodeDesc], NULL as [PRModes], NULL as [PRNPT], NULL as [AverageROP], NULL as [RunLeadEngineers], NULL as [RunEngineers], NULL as [Pulser (AES)], NULL as [Driver Insert], NULL as [IDS], NULL as [Gamma Ray Insert], NULL as [HAGR], NULL as [SAGR], NULL as [LWDGammaCombine], NULL as [MFR Collar], NULL as [Azimuthal MFR], NULL as [MFRCombine], NULL as [Neutron Insert], NULL as [Density Insert], NULL as [NeutronDensityCombine], NULL as [Collar, SST Sensor], NULL as [BAP Insert], NULL as [Battery High Temp], NULL as [Battery IBM], NULL as [Battery Low Temp], NULL as [Battery Medium Temp], NULL as [LWDBatteryCombine], NULL as [Battery, Formation Tester], NULL as [Bias Unit], NULL as [Controller Insert], NULL as [Collar, Formation Tester], NULL as [Compensation Assembly], NULL as [TVM], NULL as [LWDDirOnly], NULL as [LWDDirGam], NULL as [LWDDirGamMFRCombo], NULL as [LWDTripleCombo], NULL as [LWDQuadCombo], NULL as [MWD Pulser (AES)], NULL as [MWD Pulser 2"], NULL as [MWDPulserCombine], NULL as [Control Module Sonde], NULL as [BTR], NULL as [CDS], NULL as [CDST (Clever Deviation Sonde Top Mounted)], NULL as [GRG4], NULL as [Oriented Gamma Ray], NULL as [UGR], NULL as [MWDGammaCombine], NULL as [MWD Battery High Temp], NULL as [MWD Battery Low Temp], NULL as [MWDBatteryCombine], NULL as [CSGX], NULL as [Gabis], NULL as [Gabis Battery], NULL as [Inclination Sonde], NULL as [EMDirOnly], NULL as [EMDirGam], NULL as [PPDirOnly], NULL as [PPDirGam], NULL as [TotalComponentCount], NULL as [TotalCSICount], NULL as [TotalNCICount], NULL as [SolidPercentageMax], NULL as [SandPercentageMax], NULL as [WaterPercentageMax], NULL as [OilPercentageMax], NULL as [pHMax], NULL as [RotatingHrs], NULL as [ReasonsForPooh], NULL as [WaterDepth], NULL as [BitDeltaP], NULL as [WeightOnBit], NULL as [Torque], NULL as [SurfaceRPM], NULL as [UnderBalanced], NULL as [GasFlowRate], NULL as [SPP], NULL as [OrificeSize], NULL as [Latitude], NULL as [Longitude], NULL as [LocationCountry], NULL as [LocationState], NULL as [LocationCounty], NULL as [MotorFailureTFF], NULL as [MotorFailureCSI], NULL as [MotorNPTTFF], NULL as [EMFailureTFF], NULL as [EMFailureCSI], NULL as [EMNPTTFF], NULL as [PPFailureTFF], NULL as [PPFailureCSI], NULL as [PPNPTTFF], NULL as [MWDFailureTFF], NULL as [MWDFailureCSI], NULL as [MWDNPTTFF], NULL as [MWDOT], NULL as [EMOT], NULL as [HPOT], NULL as [MotorOT], NULL as [IncidentId], NULL as [IncidentNumber], NULL as [FaultCodeLevelOne], NULL as [FaultCodeDescLevelOne], NULL as [FaultCodeLevelTwo], NULL as [FaultCodeDescLevelTwo], NULL as [FaultCodeLevelThree], NULL as [FaultCodeDescLevelThree], NULL as [FieldSummary], NULL as [FieldSymptomSummary], NULL as [LoadDate], NULL as [PulseCount], NULL as [RSSRevolutions], NULL as [GWD], NULL as [Crosswave], NULL as [CasingLink], NULL as [VMS], NULL as [DualIDS], NULL as [DualPulser], NULL as [ExtendedRange], NULL as [WPR], NULL as [DLC], NULL as [AdjustableGaugeStabilizer], NULL as [TBSMotorySteerable], NULL as [Geosteering], NULL as [RTOCMonitoring], NULL as [HeatWave], NULL as [HEX], NULL as [WptsReportId], NULL as [SMI], NULL as [AGS], NULL as [EMTwinwells], NULL as [JobStartDate], NULL as [JobEndDate], NULL as [JobEstEndDate], NULL as [Criticality], NULL as [TOTALRSSNPT], NULL as [X], NULL as [Y], NULL as [RssMagnus], NULL as [WptsCparId]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_RelBusinessIntelligenceDataSet', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_A7DE9BB0
	    when 1 then __$operation
	    else
			case __$min_op_A7DE9BB0 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [RunId], [RunYear], [RunMonth], [RunMonthName], [Quarter], [MonthYear], [Region], [Country], [District], [CustomerID], [Hemisphere], [RegionDesc], [DistrictDesc], [CustomerName], [JobNumber], [Rig], [TFF], [CSI], [NCI], [OS], [PR], [Others], [GFA], [NonTFFRun], [NPT], [NPTRun], [NonNPTRun], [NPTRunNoTFF], [CIRunNoNPT], [GoodRun], [B2B], [MaxTempF], [MaxTempWindowF], [MaxTempC], [MaxTempWindowC], [OperHrs], [CircHrs], [DrillHrs], [CircHrsWindow], [Less30CircHrEvents], [Less30CircHr], [LWD], [HELEM], [EM], [PP], [RSS], [MotorWFT], [RentalMotor], [AllMWD], [BECFIELD], [TENSOR], [GEOLINK], [Well], [RunNumber], [RunNumberCnt], [OffShore], [InHoleDate], [EndDate], [OutHoleDate], [TFFToolString], [TFFComponentID], [TFFComponent], [TFFComponentDesc], [TFFSerialNumber], [Greater30HrsNPTEvents], [Greater30HrNPTHrs], [Is3030], [Non3030], [RMReportStatus], [MDStart], [MDEnd], [MDEndWindow], [MDDistance], [TVDStart], [TVDEnd], [HoleSize], [HoleSizeWindow], [MaxHydrostaticPressure], [MaxOperPressure], [MaxObservedPressure], [MudDensity], [BaseFluidEnd], [MaxDoglegRotating], [MaxDoglegRotatingWindow], [MaxDoglegSliding], [MaxDoglegSlidingWindow], [MaxInc], [FlowRate], [MotorSerialNumber], [MotorSize], [MotorLength], [MotorType], [Manufacturer], [LobesRS], [MotorRPM], [MotorOnBottom], [MotorOffBottom], [MotorDifferential], [Tools], [ToolSize], [CountryDesc], [FieldSymptom], [FieldSymptom2], [RSSFailureTFF], [RSSFailureCSI], [RSSNPTnonTFF], [TotalRSSNPTTFF], [RSSOT], [LWDFailureTFF], [LWDFailureCSI], [LWDNPTTFF], [LWDNPTnonTFF], [TotalLWDNPT], [LWDOT], [CompFailureCode], [CompFailureCodeDesc], [OutOfSpecCode], [OutOfSpecCodeDesc], [OSNPT], [ProceduralCode], [ProceduralCodeDesc], [PRModes], [PRNPT], [AverageROP], [RunLeadEngineers], [RunEngineers], [Pulser (AES)], [Driver Insert], [IDS], [Gamma Ray Insert], [HAGR], [SAGR], [LWDGammaCombine], [MFR Collar], [Azimuthal MFR], [MFRCombine], [Neutron Insert], [Density Insert], [NeutronDensityCombine], [Collar, SST Sensor], [BAP Insert], [Battery High Temp], [Battery IBM], [Battery Low Temp], [Battery Medium Temp], [LWDBatteryCombine], [Battery, Formation Tester], [Bias Unit], [Controller Insert], [Collar, Formation Tester], [Compensation Assembly], [TVM], [LWDDirOnly], [LWDDirGam], [LWDDirGamMFRCombo], [LWDTripleCombo], [LWDQuadCombo], [MWD Pulser (AES)], [MWD Pulser 2"], [MWDPulserCombine], [Control Module Sonde], [BTR], [CDS], [CDST (Clever Deviation Sonde Top Mounted)], [GRG4], [Oriented Gamma Ray], [UGR], [MWDGammaCombine], [MWD Battery High Temp], [MWD Battery Low Temp], [MWDBatteryCombine], [CSGX], [Gabis], [Gabis Battery], [Inclination Sonde], [EMDirOnly], [EMDirGam], [PPDirOnly], [PPDirGam], [TotalComponentCount], [TotalCSICount], [TotalNCICount], [SolidPercentageMax], [SandPercentageMax], [WaterPercentageMax], [OilPercentageMax], [pHMax], [RotatingHrs], [ReasonsForPooh], [WaterDepth], [BitDeltaP], [WeightOnBit], [Torque], [SurfaceRPM], [UnderBalanced], [GasFlowRate], [SPP], [OrificeSize], [Latitude], [Longitude], [LocationCountry], [LocationState], [LocationCounty], [MotorFailureTFF], [MotorFailureCSI], [MotorNPTTFF], [EMFailureTFF], [EMFailureCSI], [EMNPTTFF], [PPFailureTFF], [PPFailureCSI], [PPNPTTFF], [MWDFailureTFF], [MWDFailureCSI], [MWDNPTTFF], [MWDOT], [EMOT], [HPOT], [MotorOT], [IncidentId], [IncidentNumber], [FaultCodeLevelOne], [FaultCodeDescLevelOne], [FaultCodeLevelTwo], [FaultCodeDescLevelTwo], [FaultCodeLevelThree], [FaultCodeDescLevelThree], [FieldSummary], [FieldSymptomSummary], [LoadDate], [PulseCount], [RSSRevolutions], [GWD], [Crosswave], [CasingLink], [VMS], [DualIDS], [DualPulser], [ExtendedRange], [WPR], [DLC], [AdjustableGaugeStabilizer], [TBSMotorySteerable], [Geosteering], [RTOCMonitoring], [HeatWave], [HEX], [WptsReportId], [SMI], [AGS], [EMTwinwells], [JobStartDate], [JobEndDate], [JobEstEndDate], [Criticality], [TOTALRSSNPT], [X], [Y], [RssMagnus], [WptsCparId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_A7DE9BB0 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] c with (nolock)   
			where  ( (c.[RunId] = t.[RunId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_A7DE9BB0, __$count_A7DE9BB0, t.[RunId], t.[RunYear], t.[RunMonth], t.[RunMonthName], t.[Quarter], t.[MonthYear], t.[Region], t.[Country], t.[District], t.[CustomerID], t.[Hemisphere], t.[RegionDesc], t.[DistrictDesc], t.[CustomerName], t.[JobNumber], t.[Rig], t.[TFF], t.[CSI], t.[NCI], t.[OS], t.[PR], t.[Others], t.[GFA], t.[NonTFFRun], t.[NPT], t.[NPTRun], t.[NonNPTRun], t.[NPTRunNoTFF], t.[CIRunNoNPT], t.[GoodRun], t.[B2B], t.[MaxTempF], t.[MaxTempWindowF], t.[MaxTempC], t.[MaxTempWindowC], t.[OperHrs], t.[CircHrs], t.[DrillHrs], t.[CircHrsWindow], t.[Less30CircHrEvents], t.[Less30CircHr], t.[LWD], t.[HELEM], t.[EM], t.[PP], t.[RSS], t.[MotorWFT], t.[RentalMotor], t.[AllMWD], t.[BECFIELD], t.[TENSOR], t.[GEOLINK], t.[Well], t.[RunNumber], t.[RunNumberCnt], t.[OffShore], t.[InHoleDate], t.[EndDate], t.[OutHoleDate], t.[TFFToolString], t.[TFFComponentID], t.[TFFComponent], t.[TFFComponentDesc], t.[TFFSerialNumber], t.[Greater30HrsNPTEvents], t.[Greater30HrNPTHrs], t.[Is3030], t.[Non3030], t.[RMReportStatus], t.[MDStart], t.[MDEnd], t.[MDEndWindow], t.[MDDistance], t.[TVDStart], t.[TVDEnd], t.[HoleSize], t.[HoleSizeWindow], t.[MaxHydrostaticPressure], t.[MaxOperPressure], t.[MaxObservedPressure], t.[MudDensity], t.[BaseFluidEnd], t.[MaxDoglegRotating], t.[MaxDoglegRotatingWindow], t.[MaxDoglegSliding], t.[MaxDoglegSlidingWindow], t.[MaxInc], t.[FlowRate], t.[MotorSerialNumber], t.[MotorSize], t.[MotorLength], t.[MotorType], t.[Manufacturer], t.[LobesRS], t.[MotorRPM], t.[MotorOnBottom], t.[MotorOffBottom], t.[MotorDifferential], t.[Tools], t.[ToolSize], t.[CountryDesc], t.[FieldSymptom], t.[FieldSymptom2], t.[RSSFailureTFF], t.[RSSFailureCSI], t.[RSSNPTnonTFF], t.[TotalRSSNPTTFF], t.[RSSOT], t.[LWDFailureTFF], t.[LWDFailureCSI], t.[LWDNPTTFF], t.[LWDNPTnonTFF], t.[TotalLWDNPT], t.[LWDOT], t.[CompFailureCode], t.[CompFailureCodeDesc], t.[OutOfSpecCode], t.[OutOfSpecCodeDesc], t.[OSNPT], t.[ProceduralCode], t.[ProceduralCodeDesc], t.[PRModes], t.[PRNPT], t.[AverageROP], t.[RunLeadEngineers], t.[RunEngineers], t.[Pulser (AES)], t.[Driver Insert], t.[IDS], t.[Gamma Ray Insert], t.[HAGR], t.[SAGR], t.[LWDGammaCombine], t.[MFR Collar], t.[Azimuthal MFR], t.[MFRCombine], t.[Neutron Insert], t.[Density Insert], t.[NeutronDensityCombine], t.[Collar, SST Sensor], t.[BAP Insert], t.[Battery High Temp], t.[Battery IBM], t.[Battery Low Temp], t.[Battery Medium Temp], t.[LWDBatteryCombine], t.[Battery, Formation Tester], t.[Bias Unit], t.[Controller Insert], t.[Collar, Formation Tester], t.[Compensation Assembly], t.[TVM], t.[LWDDirOnly], t.[LWDDirGam], t.[LWDDirGamMFRCombo], t.[LWDTripleCombo], t.[LWDQuadCombo], t.[MWD Pulser (AES)], t.[MWD Pulser 2"], t.[MWDPulserCombine], t.[Control Module Sonde], t.[BTR], t.[CDS], t.[CDST (Clever Deviation Sonde Top Mounted)], t.[GRG4], t.[Oriented Gamma Ray], t.[UGR], t.[MWDGammaCombine], t.[MWD Battery High Temp], t.[MWD Battery Low Temp], t.[MWDBatteryCombine], t.[CSGX], t.[Gabis], t.[Gabis Battery], t.[Inclination Sonde], t.[EMDirOnly], t.[EMDirGam], t.[PPDirOnly], t.[PPDirGam], t.[TotalComponentCount], t.[TotalCSICount], t.[TotalNCICount], t.[SolidPercentageMax], t.[SandPercentageMax], t.[WaterPercentageMax], t.[OilPercentageMax], t.[pHMax], t.[RotatingHrs], t.[ReasonsForPooh], t.[WaterDepth], t.[BitDeltaP], t.[WeightOnBit], t.[Torque], t.[SurfaceRPM], t.[UnderBalanced], t.[GasFlowRate], t.[SPP], t.[OrificeSize], t.[Latitude], t.[Longitude], t.[LocationCountry], t.[LocationState], t.[LocationCounty], t.[MotorFailureTFF], t.[MotorFailureCSI], t.[MotorNPTTFF], t.[EMFailureTFF], t.[EMFailureCSI], t.[EMNPTTFF], t.[PPFailureTFF], t.[PPFailureCSI], t.[PPNPTTFF], t.[MWDFailureTFF], t.[MWDFailureCSI], t.[MWDNPTTFF], t.[MWDOT], t.[EMOT], t.[HPOT], t.[MotorOT], t.[IncidentId], t.[IncidentNumber], t.[FaultCodeLevelOne], t.[FaultCodeDescLevelOne], t.[FaultCodeLevelTwo], t.[FaultCodeDescLevelTwo], t.[FaultCodeLevelThree], t.[FaultCodeDescLevelThree], t.[FieldSummary], t.[FieldSymptomSummary], t.[LoadDate], t.[PulseCount], t.[RSSRevolutions], t.[GWD], t.[Crosswave], t.[CasingLink], t.[VMS], t.[DualIDS], t.[DualPulser], t.[ExtendedRange], t.[WPR], t.[DLC], t.[AdjustableGaugeStabilizer], t.[TBSMotorySteerable], t.[Geosteering], t.[RTOCMonitoring], t.[HeatWave], t.[HEX], t.[WptsReportId], t.[SMI], t.[AGS], t.[EMTwinwells], t.[JobStartDate], t.[JobEndDate], t.[JobEstEndDate], t.[Criticality], t.[TOTALRSSNPT], t.[X], t.[Y], t.[RssMagnus], t.[WptsCparId] 
		from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] t with (nolock) inner join 
		(	select  r.[RunId],
		    count(*) as __$count_A7DE9BB0 
			from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[RunId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] c with (nolock) where  ( (c.[RunId] = t.[RunId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[RunId] = m.[RunId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_RelBusinessIntelligenceDataSet', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] c with (nolock) 
							where  ( (c.[RunId] = t.[RunId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_RelBusinessIntelligenceDataSet_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[RunId] = mo.[RunId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_A7DE9BB0
	    when 1 then __$operation
	    else
			case __$min_op_A7DE9BB0 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_A7DE9BB0
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_A7DE9BB0 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [RunId], [RunYear], [RunMonth], [RunMonthName], [Quarter], [MonthYear], [Region], [Country], [District], [CustomerID], [Hemisphere], [RegionDesc], [DistrictDesc], [CustomerName], [JobNumber], [Rig], [TFF], [CSI], [NCI], [OS], [PR], [Others], [GFA], [NonTFFRun], [NPT], [NPTRun], [NonNPTRun], [NPTRunNoTFF], [CIRunNoNPT], [GoodRun], [B2B], [MaxTempF], [MaxTempWindowF], [MaxTempC], [MaxTempWindowC], [OperHrs], [CircHrs], [DrillHrs], [CircHrsWindow], [Less30CircHrEvents], [Less30CircHr], [LWD], [HELEM], [EM], [PP], [RSS], [MotorWFT], [RentalMotor], [AllMWD], [BECFIELD], [TENSOR], [GEOLINK], [Well], [RunNumber], [RunNumberCnt], [OffShore], [InHoleDate], [EndDate], [OutHoleDate], [TFFToolString], [TFFComponentID], [TFFComponent], [TFFComponentDesc], [TFFSerialNumber], [Greater30HrsNPTEvents], [Greater30HrNPTHrs], [Is3030], [Non3030], [RMReportStatus], [MDStart], [MDEnd], [MDEndWindow], [MDDistance], [TVDStart], [TVDEnd], [HoleSize], [HoleSizeWindow], [MaxHydrostaticPressure], [MaxOperPressure], [MaxObservedPressure], [MudDensity], [BaseFluidEnd], [MaxDoglegRotating], [MaxDoglegRotatingWindow], [MaxDoglegSliding], [MaxDoglegSlidingWindow], [MaxInc], [FlowRate], [MotorSerialNumber], [MotorSize], [MotorLength], [MotorType], [Manufacturer], [LobesRS], [MotorRPM], [MotorOnBottom], [MotorOffBottom], [MotorDifferential], [Tools], [ToolSize], [CountryDesc], [FieldSymptom], [FieldSymptom2], [RSSFailureTFF], [RSSFailureCSI], [RSSNPTnonTFF], [TotalRSSNPTTFF], [RSSOT], [LWDFailureTFF], [LWDFailureCSI], [LWDNPTTFF], [LWDNPTnonTFF], [TotalLWDNPT], [LWDOT], [CompFailureCode], [CompFailureCodeDesc], [OutOfSpecCode], [OutOfSpecCodeDesc], [OSNPT], [ProceduralCode], [ProceduralCodeDesc], [PRModes], [PRNPT], [AverageROP], [RunLeadEngineers], [RunEngineers], [Pulser (AES)], [Driver Insert], [IDS], [Gamma Ray Insert], [HAGR], [SAGR], [LWDGammaCombine], [MFR Collar], [Azimuthal MFR], [MFRCombine], [Neutron Insert], [Density Insert], [NeutronDensityCombine], [Collar, SST Sensor], [BAP Insert], [Battery High Temp], [Battery IBM], [Battery Low Temp], [Battery Medium Temp], [LWDBatteryCombine], [Battery, Formation Tester], [Bias Unit], [Controller Insert], [Collar, Formation Tester], [Compensation Assembly], [TVM], [LWDDirOnly], [LWDDirGam], [LWDDirGamMFRCombo], [LWDTripleCombo], [LWDQuadCombo], [MWD Pulser (AES)], [MWD Pulser 2"], [MWDPulserCombine], [Control Module Sonde], [BTR], [CDS], [CDST (Clever Deviation Sonde Top Mounted)], [GRG4], [Oriented Gamma Ray], [UGR], [MWDGammaCombine], [MWD Battery High Temp], [MWD Battery Low Temp], [MWDBatteryCombine], [CSGX], [Gabis], [Gabis Battery], [Inclination Sonde], [EMDirOnly], [EMDirGam], [PPDirOnly], [PPDirGam], [TotalComponentCount], [TotalCSICount], [TotalNCICount], [SolidPercentageMax], [SandPercentageMax], [WaterPercentageMax], [OilPercentageMax], [pHMax], [RotatingHrs], [ReasonsForPooh], [WaterDepth], [BitDeltaP], [WeightOnBit], [Torque], [SurfaceRPM], [UnderBalanced], [GasFlowRate], [SPP], [OrificeSize], [Latitude], [Longitude], [LocationCountry], [LocationState], [LocationCounty], [MotorFailureTFF], [MotorFailureCSI], [MotorNPTTFF], [EMFailureTFF], [EMFailureCSI], [EMNPTTFF], [PPFailureTFF], [PPFailureCSI], [PPNPTTFF], [MWDFailureTFF], [MWDFailureCSI], [MWDNPTTFF], [MWDOT], [EMOT], [HPOT], [MotorOT], [IncidentId], [IncidentNumber], [FaultCodeLevelOne], [FaultCodeDescLevelOne], [FaultCodeLevelTwo], [FaultCodeDescLevelTwo], [FaultCodeLevelThree], [FaultCodeDescLevelThree], [FieldSummary], [FieldSymptomSummary], [LoadDate], [PulseCount], [RSSRevolutions], [GWD], [Crosswave], [CasingLink], [VMS], [DualIDS], [DualPulser], [ExtendedRange], [WPR], [DLC], [AdjustableGaugeStabilizer], [TBSMotorySteerable], [Geosteering], [RTOCMonitoring], [HeatWave], [HEX], [WptsReportId], [SMI], [AGS], [EMTwinwells], [JobStartDate], [JobEndDate], [JobEstEndDate], [Criticality], [TOTALRSSNPT], [X], [Y], [RssMagnus], [WptsCparId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_A7DE9BB0 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] c with (nolock)
			where  ( (c.[RunId] = t.[RunId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_A7DE9BB0, __$count_A7DE9BB0, 
		m.__$update_mask , t.[RunId], t.[RunYear], t.[RunMonth], t.[RunMonthName], t.[Quarter], t.[MonthYear], t.[Region], t.[Country], t.[District], t.[CustomerID], t.[Hemisphere], t.[RegionDesc], t.[DistrictDesc], t.[CustomerName], t.[JobNumber], t.[Rig], t.[TFF], t.[CSI], t.[NCI], t.[OS], t.[PR], t.[Others], t.[GFA], t.[NonTFFRun], t.[NPT], t.[NPTRun], t.[NonNPTRun], t.[NPTRunNoTFF], t.[CIRunNoNPT], t.[GoodRun], t.[B2B], t.[MaxTempF], t.[MaxTempWindowF], t.[MaxTempC], t.[MaxTempWindowC], t.[OperHrs], t.[CircHrs], t.[DrillHrs], t.[CircHrsWindow], t.[Less30CircHrEvents], t.[Less30CircHr], t.[LWD], t.[HELEM], t.[EM], t.[PP], t.[RSS], t.[MotorWFT], t.[RentalMotor], t.[AllMWD], t.[BECFIELD], t.[TENSOR], t.[GEOLINK], t.[Well], t.[RunNumber], t.[RunNumberCnt], t.[OffShore], t.[InHoleDate], t.[EndDate], t.[OutHoleDate], t.[TFFToolString], t.[TFFComponentID], t.[TFFComponent], t.[TFFComponentDesc], t.[TFFSerialNumber], t.[Greater30HrsNPTEvents], t.[Greater30HrNPTHrs], t.[Is3030], t.[Non3030], t.[RMReportStatus], t.[MDStart], t.[MDEnd], t.[MDEndWindow], t.[MDDistance], t.[TVDStart], t.[TVDEnd], t.[HoleSize], t.[HoleSizeWindow], t.[MaxHydrostaticPressure], t.[MaxOperPressure], t.[MaxObservedPressure], t.[MudDensity], t.[BaseFluidEnd], t.[MaxDoglegRotating], t.[MaxDoglegRotatingWindow], t.[MaxDoglegSliding], t.[MaxDoglegSlidingWindow], t.[MaxInc], t.[FlowRate], t.[MotorSerialNumber], t.[MotorSize], t.[MotorLength], t.[MotorType], t.[Manufacturer], t.[LobesRS], t.[MotorRPM], t.[MotorOnBottom], t.[MotorOffBottom], t.[MotorDifferential], t.[Tools], t.[ToolSize], t.[CountryDesc], t.[FieldSymptom], t.[FieldSymptom2], t.[RSSFailureTFF], t.[RSSFailureCSI], t.[RSSNPTnonTFF], t.[TotalRSSNPTTFF], t.[RSSOT], t.[LWDFailureTFF], t.[LWDFailureCSI], t.[LWDNPTTFF], t.[LWDNPTnonTFF], t.[TotalLWDNPT], t.[LWDOT], t.[CompFailureCode], t.[CompFailureCodeDesc], t.[OutOfSpecCode], t.[OutOfSpecCodeDesc], t.[OSNPT], t.[ProceduralCode], t.[ProceduralCodeDesc], t.[PRModes], t.[PRNPT], t.[AverageROP], t.[RunLeadEngineers], t.[RunEngineers], t.[Pulser (AES)], t.[Driver Insert], t.[IDS], t.[Gamma Ray Insert], t.[HAGR], t.[SAGR], t.[LWDGammaCombine], t.[MFR Collar], t.[Azimuthal MFR], t.[MFRCombine], t.[Neutron Insert], t.[Density Insert], t.[NeutronDensityCombine], t.[Collar, SST Sensor], t.[BAP Insert], t.[Battery High Temp], t.[Battery IBM], t.[Battery Low Temp], t.[Battery Medium Temp], t.[LWDBatteryCombine], t.[Battery, Formation Tester], t.[Bias Unit], t.[Controller Insert], t.[Collar, Formation Tester], t.[Compensation Assembly], t.[TVM], t.[LWDDirOnly], t.[LWDDirGam], t.[LWDDirGamMFRCombo], t.[LWDTripleCombo], t.[LWDQuadCombo], t.[MWD Pulser (AES)], t.[MWD Pulser 2"], t.[MWDPulserCombine], t.[Control Module Sonde], t.[BTR], t.[CDS], t.[CDST (Clever Deviation Sonde Top Mounted)], t.[GRG4], t.[Oriented Gamma Ray], t.[UGR], t.[MWDGammaCombine], t.[MWD Battery High Temp], t.[MWD Battery Low Temp], t.[MWDBatteryCombine], t.[CSGX], t.[Gabis], t.[Gabis Battery], t.[Inclination Sonde], t.[EMDirOnly], t.[EMDirGam], t.[PPDirOnly], t.[PPDirGam], t.[TotalComponentCount], t.[TotalCSICount], t.[TotalNCICount], t.[SolidPercentageMax], t.[SandPercentageMax], t.[WaterPercentageMax], t.[OilPercentageMax], t.[pHMax], t.[RotatingHrs], t.[ReasonsForPooh], t.[WaterDepth], t.[BitDeltaP], t.[WeightOnBit], t.[Torque], t.[SurfaceRPM], t.[UnderBalanced], t.[GasFlowRate], t.[SPP], t.[OrificeSize], t.[Latitude], t.[Longitude], t.[LocationCountry], t.[LocationState], t.[LocationCounty], t.[MotorFailureTFF], t.[MotorFailureCSI], t.[MotorNPTTFF], t.[EMFailureTFF], t.[EMFailureCSI], t.[EMNPTTFF], t.[PPFailureTFF], t.[PPFailureCSI], t.[PPNPTTFF], t.[MWDFailureTFF], t.[MWDFailureCSI], t.[MWDNPTTFF], t.[MWDOT], t.[EMOT], t.[HPOT], t.[MotorOT], t.[IncidentId], t.[IncidentNumber], t.[FaultCodeLevelOne], t.[FaultCodeDescLevelOne], t.[FaultCodeLevelTwo], t.[FaultCodeDescLevelTwo], t.[FaultCodeLevelThree], t.[FaultCodeDescLevelThree], t.[FieldSummary], t.[FieldSymptomSummary], t.[LoadDate], t.[PulseCount], t.[RSSRevolutions], t.[GWD], t.[Crosswave], t.[CasingLink], t.[VMS], t.[DualIDS], t.[DualPulser], t.[ExtendedRange], t.[WPR], t.[DLC], t.[AdjustableGaugeStabilizer], t.[TBSMotorySteerable], t.[Geosteering], t.[RTOCMonitoring], t.[HeatWave], t.[HEX], t.[WptsReportId], t.[SMI], t.[AGS], t.[EMTwinwells], t.[JobStartDate], t.[JobEndDate], t.[JobEstEndDate], t.[Criticality], t.[TOTALRSSNPT], t.[X], t.[Y], t.[RssMagnus], t.[WptsCparId]
		from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] t with (nolock) inner join 
		(	select  r.[RunId],
		    count(*) as __$count_A7DE9BB0, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[RunId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] c with (nolock) where  ( (c.[RunId] = t.[RunId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[RunId] = m.[RunId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_RelBusinessIntelligenceDataSet', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] c with (nolock)
							where  ( (c.[RunId] = t.[RunId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_RelBusinessIntelligenceDataSet_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[RunId] = mo.[RunId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[RunId], t.[RunYear], t.[RunMonth], t.[RunMonthName], t.[Quarter], t.[MonthYear], t.[Region], t.[Country], t.[District], t.[CustomerID], t.[Hemisphere], t.[RegionDesc], t.[DistrictDesc], t.[CustomerName], t.[JobNumber], t.[Rig], t.[TFF], t.[CSI], t.[NCI], t.[OS], t.[PR], t.[Others], t.[GFA], t.[NonTFFRun], t.[NPT], t.[NPTRun], t.[NonNPTRun], t.[NPTRunNoTFF], t.[CIRunNoNPT], t.[GoodRun], t.[B2B], t.[MaxTempF], t.[MaxTempWindowF], t.[MaxTempC], t.[MaxTempWindowC], t.[OperHrs], t.[CircHrs], t.[DrillHrs], t.[CircHrsWindow], t.[Less30CircHrEvents], t.[Less30CircHr], t.[LWD], t.[HELEM], t.[EM], t.[PP], t.[RSS], t.[MotorWFT], t.[RentalMotor], t.[AllMWD], t.[BECFIELD], t.[TENSOR], t.[GEOLINK], t.[Well], t.[RunNumber], t.[RunNumberCnt], t.[OffShore], t.[InHoleDate], t.[EndDate], t.[OutHoleDate], t.[TFFToolString], t.[TFFComponentID], t.[TFFComponent], t.[TFFComponentDesc], t.[TFFSerialNumber], t.[Greater30HrsNPTEvents], t.[Greater30HrNPTHrs], t.[Is3030], t.[Non3030], t.[RMReportStatus], t.[MDStart], t.[MDEnd], t.[MDEndWindow], t.[MDDistance], t.[TVDStart], t.[TVDEnd], t.[HoleSize], t.[HoleSizeWindow], t.[MaxHydrostaticPressure], t.[MaxOperPressure], t.[MaxObservedPressure], t.[MudDensity], t.[BaseFluidEnd], t.[MaxDoglegRotating], t.[MaxDoglegRotatingWindow], t.[MaxDoglegSliding], t.[MaxDoglegSlidingWindow], t.[MaxInc], t.[FlowRate], t.[MotorSerialNumber], t.[MotorSize], t.[MotorLength], t.[MotorType], t.[Manufacturer], t.[LobesRS], t.[MotorRPM], t.[MotorOnBottom], t.[MotorOffBottom], t.[MotorDifferential], t.[Tools], t.[ToolSize], t.[CountryDesc], t.[FieldSymptom], t.[FieldSymptom2], t.[RSSFailureTFF], t.[RSSFailureCSI], t.[RSSNPTnonTFF], t.[TotalRSSNPTTFF], t.[RSSOT], t.[LWDFailureTFF], t.[LWDFailureCSI], t.[LWDNPTTFF], t.[LWDNPTnonTFF], t.[TotalLWDNPT], t.[LWDOT], t.[CompFailureCode], t.[CompFailureCodeDesc], t.[OutOfSpecCode], t.[OutOfSpecCodeDesc], t.[OSNPT], t.[ProceduralCode], t.[ProceduralCodeDesc], t.[PRModes], t.[PRNPT], t.[AverageROP], t.[RunLeadEngineers], t.[RunEngineers], t.[Pulser (AES)], t.[Driver Insert], t.[IDS], t.[Gamma Ray Insert], t.[HAGR], t.[SAGR], t.[LWDGammaCombine], t.[MFR Collar], t.[Azimuthal MFR], t.[MFRCombine], t.[Neutron Insert], t.[Density Insert], t.[NeutronDensityCombine], t.[Collar, SST Sensor], t.[BAP Insert], t.[Battery High Temp], t.[Battery IBM], t.[Battery Low Temp], t.[Battery Medium Temp], t.[LWDBatteryCombine], t.[Battery, Formation Tester], t.[Bias Unit], t.[Controller Insert], t.[Collar, Formation Tester], t.[Compensation Assembly], t.[TVM], t.[LWDDirOnly], t.[LWDDirGam], t.[LWDDirGamMFRCombo], t.[LWDTripleCombo], t.[LWDQuadCombo], t.[MWD Pulser (AES)], t.[MWD Pulser 2"], t.[MWDPulserCombine], t.[Control Module Sonde], t.[BTR], t.[CDS], t.[CDST (Clever Deviation Sonde Top Mounted)], t.[GRG4], t.[Oriented Gamma Ray], t.[UGR], t.[MWDGammaCombine], t.[MWD Battery High Temp], t.[MWD Battery Low Temp], t.[MWDBatteryCombine], t.[CSGX], t.[Gabis], t.[Gabis Battery], t.[Inclination Sonde], t.[EMDirOnly], t.[EMDirGam], t.[PPDirOnly], t.[PPDirGam], t.[TotalComponentCount], t.[TotalCSICount], t.[TotalNCICount], t.[SolidPercentageMax], t.[SandPercentageMax], t.[WaterPercentageMax], t.[OilPercentageMax], t.[pHMax], t.[RotatingHrs], t.[ReasonsForPooh], t.[WaterDepth], t.[BitDeltaP], t.[WeightOnBit], t.[Torque], t.[SurfaceRPM], t.[UnderBalanced], t.[GasFlowRate], t.[SPP], t.[OrificeSize], t.[Latitude], t.[Longitude], t.[LocationCountry], t.[LocationState], t.[LocationCounty], t.[MotorFailureTFF], t.[MotorFailureCSI], t.[MotorNPTTFF], t.[EMFailureTFF], t.[EMFailureCSI], t.[EMNPTTFF], t.[PPFailureTFF], t.[PPFailureCSI], t.[PPNPTTFF], t.[MWDFailureTFF], t.[MWDFailureCSI], t.[MWDNPTTFF], t.[MWDOT], t.[EMOT], t.[HPOT], t.[MotorOT], t.[IncidentId], t.[IncidentNumber], t.[FaultCodeLevelOne], t.[FaultCodeDescLevelOne], t.[FaultCodeLevelTwo], t.[FaultCodeDescLevelTwo], t.[FaultCodeLevelThree], t.[FaultCodeDescLevelThree], t.[FieldSummary], t.[FieldSymptomSummary], t.[LoadDate], t.[PulseCount], t.[RSSRevolutions], t.[GWD], t.[Crosswave], t.[CasingLink], t.[VMS], t.[DualIDS], t.[DualPulser], t.[ExtendedRange], t.[WPR], t.[DLC], t.[AdjustableGaugeStabilizer], t.[TBSMotorySteerable], t.[Geosteering], t.[RTOCMonitoring], t.[HeatWave], t.[HEX], t.[WptsReportId], t.[SMI], t.[AGS], t.[EMTwinwells], t.[JobStartDate], t.[JobEndDate], t.[JobEstEndDate], t.[Criticality], t.[TOTALRSSNPT], t.[X], t.[Y], t.[RssMagnus], t.[WptsCparId]
		from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_RelBusinessIntelligenceDataSet', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] c with (nolock) where  ( (c.[RunId] = t.[RunId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_RelBusinessIntelligenceDataSet_CT] c with (nolock)
							where  ( (c.[RunId] = t.[RunId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_RelBusinessIntelligenceDataSet_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[RunId] = mo.[RunId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_SelectOptions]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_SelectOptions]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [SelectOptionId], NULL as [SelectName], NULL as [OptionValue], NULL as [OptionLabel], NULL as [SortOrder], NULL as [Attribute1], NULL as [Attribute2], NULL as [Attribute3]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_SelectOptions', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_2826E18C
	    when 1 then __$operation
	    else
			case __$min_op_2826E18C 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [SelectOptionId], [SelectName], [OptionValue], [OptionLabel], [SortOrder], [Attribute1], [Attribute2], [Attribute3]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_2826E18C 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_SelectOptions_CT] c with (nolock)   
			where  ( (c.[SelectOptionId] = t.[SelectOptionId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_2826E18C, __$count_2826E18C, t.[SelectOptionId], t.[SelectName], t.[OptionValue], t.[OptionLabel], t.[SortOrder], t.[Attribute1], t.[Attribute2], t.[Attribute3] 
		from [cdc].[dbo_SelectOptions_CT] t with (nolock) inner join 
		(	select  r.[SelectOptionId],
		    count(*) as __$count_2826E18C 
			from [cdc].[dbo_SelectOptions_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[SelectOptionId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_SelectOptions_CT] c with (nolock) where  ( (c.[SelectOptionId] = t.[SelectOptionId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[SelectOptionId] = m.[SelectOptionId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_SelectOptions', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_SelectOptions_CT] c with (nolock) 
							where  ( (c.[SelectOptionId] = t.[SelectOptionId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_SelectOptions_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[SelectOptionId] = mo.[SelectOptionId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_2826E18C
	    when 1 then __$operation
	    else
			case __$min_op_2826E18C 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_2826E18C
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_2826E18C 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [SelectOptionId], [SelectName], [OptionValue], [OptionLabel], [SortOrder], [Attribute1], [Attribute2], [Attribute3]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_2826E18C 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_SelectOptions_CT] c with (nolock)
			where  ( (c.[SelectOptionId] = t.[SelectOptionId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_2826E18C, __$count_2826E18C, 
		m.__$update_mask , t.[SelectOptionId], t.[SelectName], t.[OptionValue], t.[OptionLabel], t.[SortOrder], t.[Attribute1], t.[Attribute2], t.[Attribute3]
		from [cdc].[dbo_SelectOptions_CT] t with (nolock) inner join 
		(	select  r.[SelectOptionId],
		    count(*) as __$count_2826E18C, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_SelectOptions_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[SelectOptionId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_SelectOptions_CT] c with (nolock) where  ( (c.[SelectOptionId] = t.[SelectOptionId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[SelectOptionId] = m.[SelectOptionId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_SelectOptions', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_SelectOptions_CT] c with (nolock)
							where  ( (c.[SelectOptionId] = t.[SelectOptionId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_SelectOptions_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[SelectOptionId] = mo.[SelectOptionId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[SelectOptionId], t.[SelectName], t.[OptionValue], t.[OptionLabel], t.[SortOrder], t.[Attribute1], t.[Attribute2], t.[Attribute3]
		from [cdc].[dbo_SelectOptions_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_SelectOptions', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_SelectOptions_CT] c with (nolock) where  ( (c.[SelectOptionId] = t.[SelectOptionId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_SelectOptions_CT] c with (nolock)
							where  ( (c.[SelectOptionId] = t.[SelectOptionId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_SelectOptions_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[SelectOptionId] = mo.[SelectOptionId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_ToolStringFixedAssets]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_ToolStringFixedAssets]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [ToolStringFixedAssetsId], NULL as [ToolStringID], NULL as [FixedAssetID], NULL as [SerialNum], NULL as [RNItemNum], NULL as [InventoryItemNum], NULL as [PartTypeID], NULL as [OrderPosition], NULL as [SortNumber], NULL as [Revision], NULL as [ToolCode], NULL as [MasterFirmwareRevision], NULL as [CustomProperty], NULL as [DateAdded], NULL as [Description], NULL as [ContainerId], NULL as [Comments]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_ToolStringFixedAssets', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_D6C9E5BA
	    when 1 then __$operation
	    else
			case __$min_op_D6C9E5BA 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [ToolStringFixedAssetsId], [ToolStringID], [FixedAssetID], [SerialNum], [RNItemNum], [InventoryItemNum], [PartTypeID], [OrderPosition], [SortNumber], [Revision], [ToolCode], [MasterFirmwareRevision], [CustomProperty], [DateAdded], [Description], [ContainerId], [Comments]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_D6C9E5BA 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_ToolStringFixedAssets_CT] c with (nolock)   
			where  ( (c.[ToolStringFixedAssetsId] = t.[ToolStringFixedAssetsId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_D6C9E5BA, __$count_D6C9E5BA, t.[ToolStringFixedAssetsId], t.[ToolStringID], t.[FixedAssetID], t.[SerialNum], t.[RNItemNum], t.[InventoryItemNum], t.[PartTypeID], t.[OrderPosition], t.[SortNumber], t.[Revision], t.[ToolCode], t.[MasterFirmwareRevision], t.[CustomProperty], t.[DateAdded], t.[Description], t.[ContainerId], t.[Comments] 
		from [cdc].[dbo_ToolStringFixedAssets_CT] t with (nolock) inner join 
		(	select  r.[ToolStringFixedAssetsId],
		    count(*) as __$count_D6C9E5BA 
			from [cdc].[dbo_ToolStringFixedAssets_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[ToolStringFixedAssetsId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_ToolStringFixedAssets_CT] c with (nolock) where  ( (c.[ToolStringFixedAssetsId] = t.[ToolStringFixedAssetsId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[ToolStringFixedAssetsId] = m.[ToolStringFixedAssetsId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_ToolStringFixedAssets', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_ToolStringFixedAssets_CT] c with (nolock) 
							where  ( (c.[ToolStringFixedAssetsId] = t.[ToolStringFixedAssetsId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_ToolStringFixedAssets_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ToolStringFixedAssetsId] = mo.[ToolStringFixedAssetsId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_D6C9E5BA
	    when 1 then __$operation
	    else
			case __$min_op_D6C9E5BA 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_D6C9E5BA
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_D6C9E5BA 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [ToolStringFixedAssetsId], [ToolStringID], [FixedAssetID], [SerialNum], [RNItemNum], [InventoryItemNum], [PartTypeID], [OrderPosition], [SortNumber], [Revision], [ToolCode], [MasterFirmwareRevision], [CustomProperty], [DateAdded], [Description], [ContainerId], [Comments]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_D6C9E5BA 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_ToolStringFixedAssets_CT] c with (nolock)
			where  ( (c.[ToolStringFixedAssetsId] = t.[ToolStringFixedAssetsId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_D6C9E5BA, __$count_D6C9E5BA, 
		m.__$update_mask , t.[ToolStringFixedAssetsId], t.[ToolStringID], t.[FixedAssetID], t.[SerialNum], t.[RNItemNum], t.[InventoryItemNum], t.[PartTypeID], t.[OrderPosition], t.[SortNumber], t.[Revision], t.[ToolCode], t.[MasterFirmwareRevision], t.[CustomProperty], t.[DateAdded], t.[Description], t.[ContainerId], t.[Comments]
		from [cdc].[dbo_ToolStringFixedAssets_CT] t with (nolock) inner join 
		(	select  r.[ToolStringFixedAssetsId],
		    count(*) as __$count_D6C9E5BA, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_ToolStringFixedAssets_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[ToolStringFixedAssetsId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_ToolStringFixedAssets_CT] c with (nolock) where  ( (c.[ToolStringFixedAssetsId] = t.[ToolStringFixedAssetsId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[ToolStringFixedAssetsId] = m.[ToolStringFixedAssetsId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_ToolStringFixedAssets', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_ToolStringFixedAssets_CT] c with (nolock)
							where  ( (c.[ToolStringFixedAssetsId] = t.[ToolStringFixedAssetsId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_ToolStringFixedAssets_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ToolStringFixedAssetsId] = mo.[ToolStringFixedAssetsId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[ToolStringFixedAssetsId], t.[ToolStringID], t.[FixedAssetID], t.[SerialNum], t.[RNItemNum], t.[InventoryItemNum], t.[PartTypeID], t.[OrderPosition], t.[SortNumber], t.[Revision], t.[ToolCode], t.[MasterFirmwareRevision], t.[CustomProperty], t.[DateAdded], t.[Description], t.[ContainerId], t.[Comments]
		from [cdc].[dbo_ToolStringFixedAssets_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_ToolStringFixedAssets', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_ToolStringFixedAssets_CT] c with (nolock) where  ( (c.[ToolStringFixedAssetsId] = t.[ToolStringFixedAssetsId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_ToolStringFixedAssets_CT] c with (nolock)
							where  ( (c.[ToolStringFixedAssetsId] = t.[ToolStringFixedAssetsId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_ToolStringFixedAssets_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ToolStringFixedAssetsId] = mo.[ToolStringFixedAssetsId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_ToolStrings]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_ToolStrings]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [ToolStringId], NULL as [SerialNumber], NULL as [Description], NULL as [CreatedBy], NULL as [SizeId], NULL as [ToolYear], NULL as [District], NULL as [BuildNumber], NULL as [ToolMod], NULL as [Disassembled], NULL as [DisassembledDate], NULL as [CheckSum], NULL as [Type], NULL as [Length], NULL as [LengthUOM], NULL as [CollarID], NULL as [CollarIDUOM], NULL as [CollarOD], NULL as [CollarODUOM], NULL as [StabilizerBladeOD], NULL as [StabilizerBladeODUOM], NULL as [ConnectionTypeTop], NULL as [ConnectionTypeBottom], NULL as [KitNumber], NULL as [IsLatestKitNumber], NULL as [IsTurnaround], NULL as [MotorType], NULL as [MotorProperty], NULL as [WorkOrderNum], NULL as [MotorSerial], NULL as [ConnectionTopSize], NULL as [ConnectionTopSizeUOM], NULL as [ConnectionBottomSize], NULL as [ConnectionBottomSizeUOM], NULL as [Service], NULL as [BearingPackConfig], NULL as [PowerSectionConfig], NULL as [RMManufacturer], NULL as [RMType], NULL as [RMMidBodyStabSize], NULL as [RMSerialNum], NULL as [RMLobes], NULL as [RMStages], NULL as [CreateDate], NULL as [CreateUserId], NULL as [UpdateDate], NULL as [UpdateUserId], NULL as [IsDeleted], NULL as [EDP], NULL as [LegacyCheckSum], NULL as [Comments], NULL as [ProductLineId], NULL as [TemplateId], NULL as [MasterTemplateID], NULL as [Status], NULL as [Name], NULL as [IsLocked], NULL as [LockedBy]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_ToolStrings', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_68CEE441
	    when 1 then __$operation
	    else
			case __$min_op_68CEE441 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [ToolStringId], [SerialNumber], [Description], [CreatedBy], [SizeId], [ToolYear], [District], [BuildNumber], [ToolMod], [Disassembled], [DisassembledDate], [CheckSum], [Type], [Length], [LengthUOM], [CollarID], [CollarIDUOM], [CollarOD], [CollarODUOM], [StabilizerBladeOD], [StabilizerBladeODUOM], [ConnectionTypeTop], [ConnectionTypeBottom], [KitNumber], [IsLatestKitNumber], [IsTurnaround], [MotorType], [MotorProperty], [WorkOrderNum], [MotorSerial], [ConnectionTopSize], [ConnectionTopSizeUOM], [ConnectionBottomSize], [ConnectionBottomSizeUOM], [Service], [BearingPackConfig], [PowerSectionConfig], [RMManufacturer], [RMType], [RMMidBodyStabSize], [RMSerialNum], [RMLobes], [RMStages], [CreateDate], [CreateUserId], [UpdateDate], [UpdateUserId], [IsDeleted], [EDP], [LegacyCheckSum], [Comments], [ProductLineId], [TemplateId], [MasterTemplateID], [Status], [Name], [IsLocked], [LockedBy]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_68CEE441 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_ToolStrings_CT] c with (nolock)   
			where  ( (c.[ToolStringId] = t.[ToolStringId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_68CEE441, __$count_68CEE441, t.[ToolStringId], t.[SerialNumber], t.[Description], t.[CreatedBy], t.[SizeId], t.[ToolYear], t.[District], t.[BuildNumber], t.[ToolMod], t.[Disassembled], t.[DisassembledDate], t.[CheckSum], t.[Type], t.[Length], t.[LengthUOM], t.[CollarID], t.[CollarIDUOM], t.[CollarOD], t.[CollarODUOM], t.[StabilizerBladeOD], t.[StabilizerBladeODUOM], t.[ConnectionTypeTop], t.[ConnectionTypeBottom], t.[KitNumber], t.[IsLatestKitNumber], t.[IsTurnaround], t.[MotorType], t.[MotorProperty], t.[WorkOrderNum], t.[MotorSerial], t.[ConnectionTopSize], t.[ConnectionTopSizeUOM], t.[ConnectionBottomSize], t.[ConnectionBottomSizeUOM], t.[Service], t.[BearingPackConfig], t.[PowerSectionConfig], t.[RMManufacturer], t.[RMType], t.[RMMidBodyStabSize], t.[RMSerialNum], t.[RMLobes], t.[RMStages], t.[CreateDate], t.[CreateUserId], t.[UpdateDate], t.[UpdateUserId], t.[IsDeleted], t.[EDP], t.[LegacyCheckSum], t.[Comments], t.[ProductLineId], t.[TemplateId], t.[MasterTemplateID], t.[Status], t.[Name], t.[IsLocked], t.[LockedBy] 
		from [cdc].[dbo_ToolStrings_CT] t with (nolock) inner join 
		(	select  r.[ToolStringId],
		    count(*) as __$count_68CEE441 
			from [cdc].[dbo_ToolStrings_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[ToolStringId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_ToolStrings_CT] c with (nolock) where  ( (c.[ToolStringId] = t.[ToolStringId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[ToolStringId] = m.[ToolStringId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_ToolStrings', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_ToolStrings_CT] c with (nolock) 
							where  ( (c.[ToolStringId] = t.[ToolStringId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_ToolStrings_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ToolStringId] = mo.[ToolStringId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_68CEE441
	    when 1 then __$operation
	    else
			case __$min_op_68CEE441 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_68CEE441
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_68CEE441 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [ToolStringId], [SerialNumber], [Description], [CreatedBy], [SizeId], [ToolYear], [District], [BuildNumber], [ToolMod], [Disassembled], [DisassembledDate], [CheckSum], [Type], [Length], [LengthUOM], [CollarID], [CollarIDUOM], [CollarOD], [CollarODUOM], [StabilizerBladeOD], [StabilizerBladeODUOM], [ConnectionTypeTop], [ConnectionTypeBottom], [KitNumber], [IsLatestKitNumber], [IsTurnaround], [MotorType], [MotorProperty], [WorkOrderNum], [MotorSerial], [ConnectionTopSize], [ConnectionTopSizeUOM], [ConnectionBottomSize], [ConnectionBottomSizeUOM], [Service], [BearingPackConfig], [PowerSectionConfig], [RMManufacturer], [RMType], [RMMidBodyStabSize], [RMSerialNum], [RMLobes], [RMStages], [CreateDate], [CreateUserId], [UpdateDate], [UpdateUserId], [IsDeleted], [EDP], [LegacyCheckSum], [Comments], [ProductLineId], [TemplateId], [MasterTemplateID], [Status], [Name], [IsLocked], [LockedBy]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_68CEE441 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_ToolStrings_CT] c with (nolock)
			where  ( (c.[ToolStringId] = t.[ToolStringId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_68CEE441, __$count_68CEE441, 
		m.__$update_mask , t.[ToolStringId], t.[SerialNumber], t.[Description], t.[CreatedBy], t.[SizeId], t.[ToolYear], t.[District], t.[BuildNumber], t.[ToolMod], t.[Disassembled], t.[DisassembledDate], t.[CheckSum], t.[Type], t.[Length], t.[LengthUOM], t.[CollarID], t.[CollarIDUOM], t.[CollarOD], t.[CollarODUOM], t.[StabilizerBladeOD], t.[StabilizerBladeODUOM], t.[ConnectionTypeTop], t.[ConnectionTypeBottom], t.[KitNumber], t.[IsLatestKitNumber], t.[IsTurnaround], t.[MotorType], t.[MotorProperty], t.[WorkOrderNum], t.[MotorSerial], t.[ConnectionTopSize], t.[ConnectionTopSizeUOM], t.[ConnectionBottomSize], t.[ConnectionBottomSizeUOM], t.[Service], t.[BearingPackConfig], t.[PowerSectionConfig], t.[RMManufacturer], t.[RMType], t.[RMMidBodyStabSize], t.[RMSerialNum], t.[RMLobes], t.[RMStages], t.[CreateDate], t.[CreateUserId], t.[UpdateDate], t.[UpdateUserId], t.[IsDeleted], t.[EDP], t.[LegacyCheckSum], t.[Comments], t.[ProductLineId], t.[TemplateId], t.[MasterTemplateID], t.[Status], t.[Name], t.[IsLocked], t.[LockedBy]
		from [cdc].[dbo_ToolStrings_CT] t with (nolock) inner join 
		(	select  r.[ToolStringId],
		    count(*) as __$count_68CEE441, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_ToolStrings_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[ToolStringId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_ToolStrings_CT] c with (nolock) where  ( (c.[ToolStringId] = t.[ToolStringId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[ToolStringId] = m.[ToolStringId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_ToolStrings', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_ToolStrings_CT] c with (nolock)
							where  ( (c.[ToolStringId] = t.[ToolStringId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_ToolStrings_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ToolStringId] = mo.[ToolStringId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[ToolStringId], t.[SerialNumber], t.[Description], t.[CreatedBy], t.[SizeId], t.[ToolYear], t.[District], t.[BuildNumber], t.[ToolMod], t.[Disassembled], t.[DisassembledDate], t.[CheckSum], t.[Type], t.[Length], t.[LengthUOM], t.[CollarID], t.[CollarIDUOM], t.[CollarOD], t.[CollarODUOM], t.[StabilizerBladeOD], t.[StabilizerBladeODUOM], t.[ConnectionTypeTop], t.[ConnectionTypeBottom], t.[KitNumber], t.[IsLatestKitNumber], t.[IsTurnaround], t.[MotorType], t.[MotorProperty], t.[WorkOrderNum], t.[MotorSerial], t.[ConnectionTopSize], t.[ConnectionTopSizeUOM], t.[ConnectionBottomSize], t.[ConnectionBottomSizeUOM], t.[Service], t.[BearingPackConfig], t.[PowerSectionConfig], t.[RMManufacturer], t.[RMType], t.[RMMidBodyStabSize], t.[RMSerialNum], t.[RMLobes], t.[RMStages], t.[CreateDate], t.[CreateUserId], t.[UpdateDate], t.[UpdateUserId], t.[IsDeleted], t.[EDP], t.[LegacyCheckSum], t.[Comments], t.[ProductLineId], t.[TemplateId], t.[MasterTemplateID], t.[Status], t.[Name], t.[IsLocked], t.[LockedBy]
		from [cdc].[dbo_ToolStrings_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_ToolStrings', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_ToolStrings_CT] c with (nolock) where  ( (c.[ToolStringId] = t.[ToolStringId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_ToolStrings_CT] c with (nolock)
							where  ( (c.[ToolStringId] = t.[ToolStringId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_ToolStrings_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[ToolStringId] = mo.[ToolStringId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_dbo_Users]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_dbo_Users]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [UserId], NULL as [UserName], NULL as [PasswordEnc], NULL as [FirstName], NULL as [LastName], NULL as [Active], NULL as [Email], NULL as [Notes], NULL as [PictureLink], NULL as [AdminLevel], NULL as [WorkPhone], NULL as [CellPhone], NULL as [HomePhone], NULL as [Division], NULL as [DepartmentId], NULL as [StartDate], NULL as [JobPosition], NULL as [ReportsTo], NULL as [LastLoginDate], NULL as [NumLoginAttempts], NULL as [ForceChangePassword], NULL as [DefGLExpense], NULL as [DateAdded], NULL as [WFTUserName], NULL as [DefaultProductLine], NULL as [DefaultModule], NULL as [JDEBadgeNum], NULL as [DefaultLanguage], NULL as [DefaultUOM], NULL as [EcnRestriction]
	where ( [sys].[fn_cdc_check_parameters]( N'dbo_Users', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_3F3F8530
	    when 1 then __$operation
	    else
			case __$min_op_3F3F8530 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [UserId], [UserName], [PasswordEnc], [FirstName], [LastName], [Active], [Email], [Notes], [PictureLink], [AdminLevel], [WorkPhone], [CellPhone], [HomePhone], [Division], [DepartmentId], [StartDate], [JobPosition], [ReportsTo], [LastLoginDate], [NumLoginAttempts], [ForceChangePassword], [DefGLExpense], [DateAdded], [WFTUserName], [DefaultProductLine], [DefaultModule], [JDEBadgeNum], [DefaultLanguage], [DefaultUOM], [EcnRestriction]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3F3F8530 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_Users_CT] c with (nolock)   
			where  ( (c.[UserId] = t.[UserId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_3F3F8530, __$count_3F3F8530, t.[UserId], t.[UserName], t.[PasswordEnc], t.[FirstName], t.[LastName], t.[Active], t.[Email], t.[Notes], t.[PictureLink], t.[AdminLevel], t.[WorkPhone], t.[CellPhone], t.[HomePhone], t.[Division], t.[DepartmentId], t.[StartDate], t.[JobPosition], t.[ReportsTo], t.[LastLoginDate], t.[NumLoginAttempts], t.[ForceChangePassword], t.[DefGLExpense], t.[DateAdded], t.[WFTUserName], t.[DefaultProductLine], t.[DefaultModule], t.[JDEBadgeNum], t.[DefaultLanguage], t.[DefaultUOM], t.[EcnRestriction] 
		from [cdc].[dbo_Users_CT] t with (nolock) inner join 
		(	select  r.[UserId],
		    count(*) as __$count_3F3F8530 
			from [cdc].[dbo_Users_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[UserId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_Users_CT] c with (nolock) where  ( (c.[UserId] = t.[UserId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[UserId] = m.[UserId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_Users', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_Users_CT] c with (nolock) 
							where  ( (c.[UserId] = t.[UserId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_Users_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[UserId] = mo.[UserId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_3F3F8530
	    when 1 then __$operation
	    else
			case __$min_op_3F3F8530 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_3F3F8530
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_3F3F8530 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [UserId], [UserName], [PasswordEnc], [FirstName], [LastName], [Active], [Email], [Notes], [PictureLink], [AdminLevel], [WorkPhone], [CellPhone], [HomePhone], [Division], [DepartmentId], [StartDate], [JobPosition], [ReportsTo], [LastLoginDate], [NumLoginAttempts], [ForceChangePassword], [DefGLExpense], [DateAdded], [WFTUserName], [DefaultProductLine], [DefaultModule], [JDEBadgeNum], [DefaultLanguage], [DefaultUOM], [EcnRestriction]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3F3F8530 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[dbo_Users_CT] c with (nolock)
			where  ( (c.[UserId] = t.[UserId]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$start_lsn, c.__$command_id, c.__$seqval) end __$min_op_3F3F8530, __$count_3F3F8530, 
		m.__$update_mask , t.[UserId], t.[UserName], t.[PasswordEnc], t.[FirstName], t.[LastName], t.[Active], t.[Email], t.[Notes], t.[PictureLink], t.[AdminLevel], t.[WorkPhone], t.[CellPhone], t.[HomePhone], t.[Division], t.[DepartmentId], t.[StartDate], t.[JobPosition], t.[ReportsTo], t.[LastLoginDate], t.[NumLoginAttempts], t.[ForceChangePassword], t.[DefGLExpense], t.[DateAdded], t.[WFTUserName], t.[DefaultProductLine], t.[DefaultModule], t.[JDEBadgeNum], t.[DefaultLanguage], t.[DefaultUOM], t.[EcnRestriction]
		from [cdc].[dbo_Users_CT] t with (nolock) inner join 
		(	select  r.[UserId],
		    count(*) as __$count_3F3F8530, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[dbo_Users_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[UserId]) m
		on t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_Users_CT] c with (nolock) where  ( (c.[UserId] = t.[UserId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ) and
		    ( (t.[UserId] = m.[UserId]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_Users', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_Users_CT] c with (nolock)
							where  ( (c.[UserId] = t.[UserId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_Users_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[UserId] = mo.[UserId]) ) 
				group by
					mo.__$seqval
			)	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[UserId], t.[UserName], t.[PasswordEnc], t.[FirstName], t.[LastName], t.[Active], t.[Email], t.[Notes], t.[PictureLink], t.[AdminLevel], t.[WorkPhone], t.[CellPhone], t.[HomePhone], t.[Division], t.[DepartmentId], t.[StartDate], t.[JobPosition], t.[ReportsTo], t.[LastLoginDate], t.[NumLoginAttempts], t.[ForceChangePassword], t.[DefGLExpense], t.[DateAdded], t.[WFTUserName], t.[DefaultProductLine], t.[DefaultModule], t.[JDEBadgeNum], t.[DefaultLanguage], t.[DefaultUOM], t.[EcnRestriction]
		from [cdc].[dbo_Users_CT] t  with (nolock)
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'dbo_Users', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and (t.__$seqval = ( select top 1 c.__$seqval from [cdc].[dbo_Users_CT] c with (nolock) where  ( (c.[UserId] = t.[UserId]) )  and c.__$start_lsn <= @to_lsn and c.__$start_lsn >= @from_lsn order by c.__$start_lsn desc, c.__$command_id desc, c.__$seqval desc ))
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[dbo_Users_CT] c with (nolock)
							where  ( (c.[UserId] = t.[UserId]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$start_lsn, c.__$command_id, c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
			and t.__$operation = (
				select
					max(mo.__$operation)
				from
					[cdc].[dbo_Users_CT] as mo with (nolock)
				where
					mo.__$seqval = t.__$seqval
					and 
					 ( (t.[UserId] = mo.[UserId]) ) 
				group by
					mo.__$seqval
			)
	 
GO
/****** Object:  UserDefinedFunction [dbo].[GenerateDateList]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh
-- Create date: 2/22/2017
-- Description:	Generate Number List
-- =============================================
CREATE FUNCTION [dbo].[GenerateDateList]
(	
	-- Add the parameters for the function here
	@From datetime, 
	@To datetime
)
RETURNS TABLE 
AS
RETURN 
(
	-- Add the SELECT statement with parameter references here
	WITH gen AS (
    SELECT @From AS Date
    UNION ALL
    SELECT DATEADD(DAY, 1, Date) FROM gen WHERE Date < @To)
	SELECT * FROM gen
)
GO
/****** Object:  View [dbo].[Vw_UnitConverters]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- =============================================  
-- Author:  Sachin Mhalungekar
-- Create date: 12/10/2019  
-- Description: Get the unit converters
-- =============================================  
CREATE VIEW [dbo].[Vw_UnitConverters]
AS
SELECT 
 'n * 25.4'			As 'InchesToMillimeters',
 'n * 2.54'			As 'InchesToCentimeters',
 'n / 25.4'			As 'MillimetersToInches',
 'n / 10'			As 'MillimetersToCentimeters',
 'n / 2.54'			As 'CentimetersToInches',
 'n * 10'			As 'CentimetersToMillimeters',
 'n * 0.453592'		AS 'Pounds(lb)ToKilograms(Kg)',
 'n / 0.453592'		AS 'Kilograms(Kg)ToPounds(lb)',
 'n * 0.0689476'	AS 'Pressure(PSI)ToPressure(BAR)',
 'n / 0.0689476'	AS 'Pressure(BAR)ToPressure(PSI)',
 '(n - 32) * 5/9'	AS 'Fahrenheit(F)ToCelsius(C)',
 'n * 9/5 + 32'		AS 'Celsius(C)ToFahrenheit(F)',
 'n/0.73756'		AS 'FootLbs(ftlb)ToNeutonMeters(NM)',
 'n*0.73756'		AS 'NeutonMeters(NM)ToFootLbs(ftlb)',
 'n*1000'			AS 'OhmsToMilliohms (m?)',
 'n/1000000'		AS 'OhmsToMega-Ohms (mO)',
 'n/1000'			AS 'OhmsToKilo-Ohms (KO)',
 'n/1000'			AS 'Milliohms (m?)ToOhms',
 'n/1000000'		AS 'Milliohms (m?)ToKilo-Ohms (KO)',
 'n/1000000000'		AS 'Milliohms (m?)ToMega-Ohms (mO)',
 'n*1000'			AS 'Kilo-Ohms (KO)ToOhms',
 'n*1000000'		AS 'Kilo-Ohms (KO)ToMilliohms (m?)',
 'n/1000'			AS 'Kilo-Ohms (KO)ToMega-Ohms (mO)'

GO
/****** Object:  Table [dbo].[AppNotices]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AppNotices](
	[AppNoticeId] [int] IDENTITY(1,1) NOT NULL,
	[AppNoticeApplicationName] [varchar](100) NOT NULL,
	[AppNoticeDesc] [varchar](4096) NOT NULL,
	[AppNoticeDate] [datetime] NOT NULL,
	[Active] [bit] NOT NULL,
 CONSTRAINT [PK_AppNotices] PRIMARY KEY CLUSTERED 
(
	[AppNoticeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AppValues]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AppValues](
	[AppValueId] [int] IDENTITY(1,1) NOT NULL,
	[KeyName] [varchar](100) NOT NULL,
	[KeyValue] [varchar](4096) NOT NULL,
	[KeyDesc] [varchar](1000) NULL,
 CONSTRAINT [PK_AppValue] PRIMARY KEY CLUSTERED 
(
	[AppValueId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_AppValue] UNIQUE NONCLUSTERED 
(
	[KeyName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Asset_List_Temp]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Asset_List_Temp](
	[Co] [varchar](100) NULL,
	[Branch] [varchar](100) NULL,
	[Order Number] [varchar](100) NULL,
	[Actual Dollars] [varchar](100) NULL,
	[Or Ty] [nvarchar](255) NULL,
	[WO St Description 1] [nvarchar](255) NULL,
	[W#O# Type] [varchar](100) NULL,
	[Asset Number] [varchar](100) NULL,
	[Currency Type] [nvarchar](255) NULL,
	[Country] [nvarchar](255) NULL,
	[Region] [nvarchar](255) NULL,
	[Exchange Rate to USD] [varchar](100) NULL,
	[Actual Dollars_USD] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AssetRepairTrackReferences]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AssetRepairTrackReferences](
	[AssetRepairTrackReferenceId] [uniqueidentifier] NOT NULL,
	[AssetRepairTrackId] [uniqueidentifier] NOT NULL,
	[RefType] [varchar](5) NOT NULL,
	[RefId] [uniqueidentifier] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[AddedBy] [varchar](15) NOT NULL,
 CONSTRAINT [PK_AssetRepairTrackReferences] PRIMARY KEY CLUSTERED 
(
	[AssetRepairTrackReferenceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Attachments]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Attachments](
	[AttachmentID] [uniqueidentifier] NOT NULL,
	[RunID] [varchar](38) NULL,
	[IncidentID] [varchar](38) NULL,
	[GFAID] [uniqueidentifier] NULL,
	[FileType] [varchar](100) NULL,
	[FilePath] [varchar](255) NULL,
	[FileSize] [varchar](30) NULL,
	[Comments] [varchar](1000) NULL,
	[Legacy] [tinyint] NULL,
	[ImageIcon] [varchar](20) NULL,
	[CreateDate] [datetime] NULL,
 CONSTRAINT [PK_Attachments_7D246A83] PRIMARY KEY CLUSTERED 
(
	[AttachmentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditActionItem]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditActionItem](
	[AuditActionId] [int] NOT NULL,
	[ActionItemId] [int] NULL,
	[RequestId] [int] NULL,
	[UserIdAdded] [int] NULL,
	[AssigneeUserId] [int] NULL,
	[DueDate] [datetime] NULL,
	[ActionDescription] [varchar](1024) NULL,
	[AssigneeComments] [varchar](1024) NULL,
	[IsComplete] [bit] NULL,
	[CompletionDate] [datetime] NULL,
	[DateAdded] [datetime] NULL,
	[LastEditDate] [datetime] NULL,
	[LastEditBy] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditARTDispositions]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditARTDispositions](
	[AuditActionId] [int] NOT NULL,
	[DispositionId] [int] NOT NULL,
	[AssetRepairTrackId] [uniqueidentifier] NOT NULL,
	[Disposition] [varchar](25) NOT NULL,
	[DispositionedById] [int] NULL,
	[DispositionDate] [datetime] NULL,
	[DispositionComments] [varchar](2048) NOT NULL,
	[Status] [varchar](20) NOT NULL,
	[ApproverId] [int] NOT NULL,
	[ApprovalLevel] [tinyint] NOT NULL,
	[ShipToLocation] [varchar](25) NULL,
	[UserIdAdded] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[ApprovalMethod] [smallint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditAssetRepairTrack]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditAssetRepairTrack](
	[AuditActionId] [int] NOT NULL,
	[AssetRepairTrackId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ARTNumber] [varchar](25) NOT NULL,
	[ITPFTWOId] [uniqueidentifier] NULL,
	[SRPFTWOId] [uniqueidentifier] NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[SerialNum] [varchar](30) NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[ItemDesc] [varchar](60) NULL,
	[RNItemNum] [varchar](30) NULL,
	[Revision] [varchar](2) NULL,
	[AssetNumber] [varchar](10) NULL,
	[IncidentId] [uniqueidentifier] NULL,
	[JobId] [uniqueidentifier] NULL,
	[ToolStringInfoId] [uniqueidentifier] NULL,
	[NCRNumber] [int] NULL,
	[WorkOrderNum] [varchar](30) NULL,
	[FromBranchPlant] [varchar](12) NULL,
	[ShipToBranchPlant] [varchar](12) NULL,
	[Comments] [text] NULL,
	[Status] [varchar](25) NOT NULL,
	[DateClosed] [datetime] NULL,
	[IsPFTWorkOrderRequired] [bit] NOT NULL,
	[IsNCRRequired] [bit] NOT NULL,
	[PartRepairCost] [decimal](18, 4) NULL,
	[IsAssetFromField] [bit] NOT NULL,
	[IsRedTag] [bit] NOT NULL,
	[FailureCodeId] [uniqueidentifier] NULL,
	[OutOfSpecCodeId] [uniqueidentifier] NULL,
	[ProceduralCodeId] [uniqueidentifier] NULL,
	[AddedBy] [varchar](15) NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[IsIRNotificationSent] [bit] NOT NULL,
	[FailureType] [varchar](1) NULL,
	[FailureDescriptionCommentId] [uniqueidentifier] NULL,
	[CorrectiveMaintenanceCommentId] [uniqueidentifier] NULL,
	[CloseStatus] [varchar](2) NULL,
	[NeedsCustomerFeedback] [bit] NULL,
	[IsNeedsCustomerFeedbackEmailSent] [bit] NULL,
	[CPARId] [int] NULL,
	[DispatchNumber] [int] NULL,
	[CloseBy] [varchar](15) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditAssetRepairTrackReferences]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditAssetRepairTrackReferences](
	[AuditActionId] [int] NOT NULL,
	[AssetRepairTrackReferenceId] [uniqueidentifier] NULL,
	[AssetRepairTrackId] [uniqueidentifier] NULL,
	[RefType] [varchar](5) NULL,
	[RefId] [uniqueidentifier] NULL,
	[DateAdded] [datetime] NULL,
	[AddedBy] [varchar](15) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditBoardFirmwares]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditBoardFirmwares](
	[AuditActionId] [int] NOT NULL,
	[BoardFirmwareId] [uniqueidentifier] NOT NULL,
	[BoardItemNum] [varchar](30) NOT NULL,
	[FirmwareItemNum] [varchar](30) NOT NULL,
	[IsMaster] [bit] NOT NULL,
	[Component] [varchar](25) NULL,
	[ManufacturingOnly] [bit] NOT NULL,
	[IsFieldTest] [bit] NOT NULL,
	[FieldTestRevision] [varchar](50) NULL,
	[FieldTestRequestId] [int] NULL,
	[FieldTestCRNum] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditBoardItemNums]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditBoardItemNums](
	[AuditActionId] [int] NOT NULL,
	[BoardId] [uniqueidentifier] NOT NULL,
	[BoardItemNum] [varchar](30) NOT NULL,
	[IsSoftware] [bit] NOT NULL,
	[SoftwareType] [varchar](5) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditBranchPlants]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditBranchPlants](
	[AuditActionId] [int] NOT NULL,
	[BranchPlantId] [uniqueidentifier] NOT NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[MCDL01] [varchar](30) NULL,
	[CompanyName] [varchar](50) NOT NULL,
	[Description] [varchar](150) NULL,
	[BaseCode] [varchar](25) NULL,
	[RelBaseCode] [varchar](10) NULL,
	[SAPFuncLoc] [varchar](50) NULL,
	[County] [varchar](25) NULL,
	[City] [varchar](10) NULL,
	[StateProvince] [varchar](3) NULL,
	[Country] [varchar](25) NULL,
	[ZipCode] [varchar](10) NULL,
	[Region] [varchar](25) NULL,
	[Hemisphere] [varchar](25) NULL,
	[IsOps] [bit] NOT NULL,
	[IsManufacturing] [bit] NOT NULL,
	[IsRepair] [bit] NOT NULL,
	[IsGlobalRepair] [bit] NOT NULL,
	[Latitude] [decimal](18, 4) NULL,
	[Longitude] [decimal](18, 4) NULL,
	[Active] [bit] NOT NULL,
	[LastEdit] [datetime] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[IsNonLiveLocation] [bit] NULL,
	[IsRemovedFromAR] [bit] NULL,
	[WptsWFDLocationId] [int] NULL,
	[WptsRegionId] [int] NULL,
	[WptsCountryId] [int] NULL,
	[IsOperationsBillableLocation] [bit] NULL,
	[CurrencyCode] [varchar](3) NULL,
	[IsSuperCenter] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditCAPARequests]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditCAPARequests](
	[AuditActionId] [int] NOT NULL,
	[RequestId] [int] NULL,
	[Type] [varchar](3) NULL,
	[Priority] [varchar](10) NULL,
	[Requirments] [text] NULL,
	[Description] [text] NULL,
	[Evidence] [text] NULL,
	[ResponseDueDate] [datetime] NULL,
	[ShortTermSolution] [varchar](1024) NULL,
	[RootCauseInvestigation] [text] NULL,
	[CAPreventRecurrence] [text] NULL,
	[PlannedCompletionDate] [datetime] NULL,
	[VerificationText] [varchar](1024) NULL,
	[CAPAId] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditCBMHistogramCurve]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditCBMHistogramCurve](
	[AuditId] [int] IDENTITY(1,1) NOT NULL,
	[Id] [int] NOT NULL,
	[ToolMnem] [varchar](100) NULL,
	[CurveName] [varchar](100) NOT NULL,
	[Priority] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NULL,
 CONSTRAINT [PK_AuditCBMHistogramCurve] PRIMARY KEY CLUSTERED 
(
	[AuditId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditCBMMonitor]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditCBMMonitor](
	[AuditActionId] [int] NULL,
	[CBMMonitorId] [int] NOT NULL,
	[MeterReadingTypeId] [int] NULL,
	[PFTConfigId] [uniqueidentifier] NULL,
	[GlobalTrigger] [int] NULL,
	[CreateJDEWO] [bit] NULL,
	[Active] [bit] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [varchar](25) NULL,
	[UpdatedOn] [datetime] NULL,
	[UpdatedBy] [varchar](25) NULL,
	[DefaultMeterReading] [decimal](18, 2) NULL,
	[EffectiveDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditCBMMonitorAssetItemNums]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditCBMMonitorAssetItemNums](
	[AuditActionId] [int] NULL,
	[ParentItemNumsDetailsId] [int] NULL,
	[CBMMonitorId] [int] NOT NULL,
	[ItemNum] [varchar](50) NOT NULL,
	[CreatedBy] [varchar](100) NULL,
	[CreatedOn] [datetime] NULL,
	[IsParent] [bit] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditCBMMonitorCustoms]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditCBMMonitorCustoms](
	[AuditActionId] [int] NULL,
	[CBMMonitorCustomsId] [int] NOT NULL,
	[PFTConfigId] [uniqueidentifier] NULL,
	[MeterReadingTypeId] [int] NULL,
	[TriggerType] [char](1) NULL,
	[TriggerName] [varchar](50) NULL,
	[TriggerValue] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ObjectNumber] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditChangeNoticeParts]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditChangeNoticeParts](
	[AuditActionId] [int] NOT NULL,
	[CNPartId] [uniqueidentifier] NULL,
	[CNId] [uniqueidentifier] NULL,
	[FixedAssetId] [uniqueidentifier] NULL,
	[NotApplicable] [bit] NOT NULL,
	[NotApplicableBy] [varchar](15) NULL,
	[DateCompleted] [datetime] NULL,
	[UserId] [int] NULL,
	[LastEdit] [datetime] NULL,
	[SerialNum] [varchar](30) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditChangeNotices]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditChangeNotices](
	[AuditActionId] [int] NOT NULL,
	[CNId] [uniqueidentifier] NULL,
	[CNNum] [varchar](10) NULL,
	[CNDesc] [varchar](4096) NULL,
	[CNSubject] [varchar](60) NULL,
	[CNSummary] [varchar](4096) NULL,
	[ECNNum] [varchar](15) NULL,
	[CRNum] [varchar](15) NULL,
	[CNType] [varchar](25) NULL,
	[DateAdded] [datetime] NULL,
	[CNStatus] [varchar](10) NULL,
	[CNDateClosed] [datetime] NULL,
	[EffectedPartNumber] [varchar](30) NULL,
	[ECRNum] [varchar](15) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditChangeRequests]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditChangeRequests](
	[AuditActionId] [int] NOT NULL,
	[RequestId] [int] NULL,
	[DateSubmitted] [datetime] NULL,
	[DateRequired] [datetime] NULL,
	[Division] [varchar](25) NULL,
	[Priority] [varchar](10) NULL,
	[ImpactLevel] [varchar](2) NULL,
	[ChangeRequest] [text] NULL,
	[DetailedReason] [text] NULL,
	[ChangesRequired] [text] NULL,
	[SpecialNotes] [text] NULL,
	[Solution] [varchar](50) NULL,
	[SolutionComments] [text] NULL,
	[ProductLine] [varchar](50) NULL,
	[DeptCode] [varchar](10) NULL,
	[Tool] [varchar](50) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditCountries]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditCountries](
	[AuditActionId] [int] NOT NULL,
	[CountryId] [uniqueidentifier] NOT NULL,
	[Country] [varchar](25) NOT NULL,
	[CountryDesc] [varchar](50) NULL,
	[Latitude] [decimal](18, 4) NULL,
	[Longitude] [decimal](18, 4) NULL,
	[Active] [bit] NOT NULL,
	[LastEdit] [datetime] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[RegionCode] [varchar](25) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditCustomsInvoiceDetails]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditCustomsInvoiceDetails](
	[AuditActionId] [int] NOT NULL,
	[CustomsInvoiceDetailId] [uniqueidentifier] NOT NULL,
	[CustomsInvoiceId] [uniqueidentifier] NOT NULL,
	[LineNumber] [int] NULL,
	[Quantity] [int] NULL,
	[Description] [varchar](255) NULL,
	[SerialNumber] [varchar](255) NULL,
	[PartNumber] [varchar](50) NULL,
	[NewUsed] [varchar](50) NULL,
	[Consumable] [varchar](50) NULL,
	[IsHeader] [bit] NOT NULL,
	[UnitCost] [money] NULL,
	[TotalCost] [money] NULL,
	[NetWeight] [varchar](18) NULL,
	[GrossWeight] [varchar](18) NULL,
	[CountryOfOrigin] [varchar](25) NULL,
	[DisplayOrder] [int] NOT NULL,
	[Size] [varchar](15) NULL,
	[Condition] [varchar](1) NULL,
	[Markup] [decimal](18, 4) NULL,
	[Asset] [varchar](50) NULL,
	[AssetId] [uniqueidentifier] NULL,
	[PartTransferId] [int] NULL,
	[TransferComplete] [bit] NOT NULL,
	[TERNumber] [varchar](64) NULL,
	[DeliveryNoteNumber] [varchar](64) NULL,
	[IsDeliveryNoteStart] [bit] NOT NULL,
	[IsDeliveryNoteEnd] [bit] NOT NULL,
	[TarriffCode] [varchar](50) NULL,
	[ECCNNumber] [varchar](50) NULL,
	[ScheduleB] [varchar](50) NULL,
	[CustomsStatus] [varchar](50) NULL,
	[ToolCode] [varchar](40) NULL,
	[Manufacturer] [varchar](100) NULL,
	[PrevPartStatusId] [int] NULL,
	[ParentCustomsInvoiceDetailId] [uniqueidentifier] NULL,
	[ICBNumber] [bit] NULL,
	[JDENumber] [bit] NULL,
	[ShipmentType] [varchar](20) NULL,
	[AIRT_Number] [varchar](100) NULL,
	[JDEItemNumber] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditDocItems]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditDocItems](
	[AuditId] [int] NOT NULL,
	[DocItemId] [int] NULL,
	[DocItemTitle] [varchar](512) NULL,
	[DocItemDesc] [varchar](1024) NULL,
	[DocItemFilePath] [varchar](1024) NULL,
	[DocItemFileName] [varchar](255) NULL,
	[DocItemFileSize] [numeric](18, 0) NULL,
	[DocItemType] [tinyint] NULL,
	[DocItemDate] [datetime] NULL,
	[ParentDocItemId] [int] NULL,
	[OriginalFileName] [varchar](255) NULL,
	[UploadedBy] [int] NULL,
	[DateAdded] [datetime] NULL,
	[IsControlled] [bit] NULL,
	[Uncontrolled] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[LegacyKeyId] [int] NULL,
	[LegacySource] [varchar](25) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditEmail]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditEmail](
	[AuditEmailId] [int] IDENTITY(1,1) NOT NULL,
	[EmailFrom] [varchar](8000) NULL,
	[EmailTo] [varchar](max) NULL,
	[EmailCC] [varchar](max) NULL,
	[EmailBcc] [varchar](max) NULL,
	[Subject] [varchar](8000) NULL,
	[Body] [varchar](max) NULL,
	[IsHtml] [bit] NULL,
	[SmtpServer] [varchar](255) NULL,
	[SmtpPort] [varchar](255) NULL,
	[SmtpUserName] [varchar](255) NULL,
	[SmtpPassword] [varchar](255) NULL,
	[Error] [varchar](max) NULL,
	[AddedDate] [datetime] NULL,
	[AuditUserName] [varchar](255) NULL,
 CONSTRAINT [PK_AuditEmail] PRIMARY KEY CLUSTERED 
(
	[AuditEmailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditEntity]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditEntity](
	[AuditEntityId] [int] IDENTITY(1,1) NOT NULL,
	[EntityName] [varchar](255) NOT NULL,
	[EntityID] [varchar](255) NOT NULL,
	[EntityState] [varchar](100) NOT NULL,
	[EntityData] [xml] NOT NULL,
	[AuditAt] [datetime] NOT NULL,
	[UserName] [varchar](256) NOT NULL,
 CONSTRAINT [PK_AuditEntity] PRIMARY KEY CLUSTERED 
(
	[AuditEntityId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditFixedAssets]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditFixedAssets](
	[AuditActionId] [int] NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[AssetNumber] [varchar](30) NULL,
	[Company] [varchar](5) NULL,
	[BranchPlant] [varchar](75) NULL,
	[FixedAssetBranchPlant] [varchar](75) NULL,
	[AssetDescription] [varchar](255) NULL,
	[ParentNumber] [varchar](260) NULL,
	[ParentFixedAssetId] [uniqueidentifier] NULL,
	[ManufacturersSerialNumber] [varchar](25) NULL,
	[BusinessUnit] [varchar](12) NULL,
	[RNItemNum] [varchar](30) NULL,
	[SerialNum] [varchar](50) NULL,
	[CurrentItemQty] [decimal](15, 2) NULL,
	[CurrencyCode] [varchar](3) NULL,
	[Cost] [decimal](15, 2) NULL,
	[AccumDepreciation] [decimal](15, 2) NULL,
	[NetBookValue] [decimal](15, 2) NULL,
	[ProductLineCode] [varchar](3) NULL,
	[UnitNumber] [varchar](12) NULL,
	[InventoryItemNum] [varchar](30) NULL,
	[LegacySerialNumber] [varchar](25) NULL,
	[AFENumber] [varchar](12) NULL,
	[State] [varchar](3) NULL,
	[ContractAccount] [varchar](25) NULL,
	[Ownership] [varchar](3) NULL,
	[DateAcquired] [date] NULL,
	[LifeMonths] [int] NULL,
	[StartDepreciation_Date] [date] NULL,
	[NewUsed] [char](1) NULL,
	[Manufacturer] [varchar](100) NULL,
	[ModelYear] [varchar](3) NULL,
	[ThirdItemNumber] [varchar](40) NULL,
	[DateDisposed] [date] NULL,
	[EquipmentStatus] [varchar](2) NULL,
	[FiscalYear] [int] NULL,
	[LedgerType] [varchar](2) NULL,
	[CatCode16] [varchar](3) NULL,
	[IsAdvisorOnly] [bit] NOT NULL,
	[NotUsed] [bit] NOT NULL,
	[IsAddByWorkOrder] [bit] NOT NULL,
	[Revision] [varchar](2) NULL,
	[LastEdit] [datetime] NULL,
	[LastStatusChangeDate] [datetime] NULL,
	[Source] [varchar](15) NULL,
	[SystemStatus] [varchar](470) NULL,
	[MaintPlant] [varchar](4) NULL,
	[MaintPlantDesc] [varchar](30) NULL,
	[FirmwareVersion] [varchar](40) NULL,
	[ModelNum] [varchar](20) NULL,
	[PhysicalLoc] [varchar](30) NULL,
	[EquipTypeDesc] [varchar](40) NULL,
	[ERPNotificationDate] [datetime] NULL,
	[ERPNotificationNumber] [varchar](30) NULL,
	[PartInternalStatus] [varchar](15) NULL,
	[OriginalLocation] [varchar](50) NULL,
	[OriginalStatus] [varchar](30) NULL,
	[SerialDescLong] [varchar](1024) NULL,
	[Comments] [varchar](8000) NULL,
	[SAPLastEdit] [datetime] NULL,
	[ParentPartId] [uniqueidentifier] NULL,
	[CustomsInvoiceDetailId] [uniqueidentifier] NULL,
	[Submt] [varchar](18) NULL,
	[LeakTestDate] [datetime] NULL,
	[RadioIsotope] [varchar](50) NULL,
	[Activity] [varchar](50) NULL,
	[SFC] [varchar](50) NULL,
	[SourceModel] [varchar](50) NULL,
	[LastComments] [varchar](8000) NULL,
	[PhysicalLocation] [varchar](150) NULL,
	[VerifiedBy] [varchar](15) NULL,
	[VerifiedDate] [datetime] NULL,
	[VerifiedLocation] [varchar](50) NULL,
	[StdCost] [money] NULL,
	[StdCostCode] [varchar](5) NULL,
	[OwnershipDesc] [varchar](20) NULL,
	[Category] [varchar](30) NULL,
	[CompanyCodeDesc] [varchar](25) NULL,
	[CostCenterDesc] [varchar](40) NULL,
	[CostCenterManager] [varchar](30) NULL,
	[TechId] [varchar](50) NULL,
	[MasterFirmwareItemNum] [varchar](30) NULL,
	[MasterFirmwareRevision] [varchar](12) NULL,
	[MfgPartNum] [varchar](30) NULL,
	[DateAdded] [datetime] NOT NULL,
	[UserIdAdded] [int] NULL,
	[UserIdLastEdit] [int] NULL,
	[TopLevelFixedAssetId] [uniqueidentifier] NULL,
	[AcqCode] [varchar](3) NULL,
	[MajorAccountingClass] [varchar](3) NULL,
	[JournalingFlag] [varchar](1) NULL,
	[ApplicationCode] [varchar](3) NULL,
	[AssetLifeRemaining] [decimal](6, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditGFAComponents]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditGFAComponents](
	[AuditActionId] [int] NOT NULL,
	[GFAComponentId] [uniqueidentifier] NULL,
	[GFAId] [uniqueidentifier] NULL,
	[ToolStringId] [uniqueidentifier] NULL,
	[FixedAssetId] [uniqueidentifier] NULL,
	[PartTypeId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[IncidentId] [uniqueidentifier] NULL,
	[NPT] [float] NULL,
	[TFF] [bit] NULL,
	[CI] [bit] NULL,
	[FieldSymptom] [varchar](200) NULL,
	[FailureDesc] [text] NULL,
	[CorrectiveAction] [varchar](3100) NULL,
	[Temp] [float] NULL,
	[TempUOM] [varchar](10) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditGFAIncidents]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditGFAIncidents](
	[AuditActionId] [int] NOT NULL,
	[GFAId] [uniqueidentifier] NULL,
	[JobId] [uniqueidentifier] NULL,
	[RunNumber] [varchar](30) NULL,
	[Activity] [varchar](50) NULL,
	[GFANumber] [varchar](50) NULL,
	[CreateDate] [datetime] NULL,
	[FailureDate] [datetime] NULL,
	[EmployeeId] [uniqueidentifier] NULL,
	[ProductLine] [varchar](50) NULL,
	[FieldSymptom] [varchar](200) NULL,
	[TFF] [bit] NULL,
	[CI] [bit] NULL,
	[NCI] [bit] NULL,
	[MudType] [varchar](50) NULL,
	[CircHrs] [varchar](25) NULL,
	[VibrationLevel] [bit] NULL,
	[CoordContacted] [bit] NULL,
	[GlobalContacted] [bit] NULL,
	[FailureDesc] [varchar](5000) NULL,
	[PossibleCauses] [varchar](5000) NULL,
	[ServiceLine] [varchar](10) NULL,
	[RunCircHrs] [float] NULL,
	[NPT] [float] NULL,
	[TotalCircHrs] [float] NULL,
	[Disposition] [varchar](20) NULL,
	[Summary] [varchar](5000) NULL,
	[IncidentId] [uniqueidentifier] NULL,
	[IncidentNumber] [varchar](50) NULL,
	[Is3030] [bit] NULL,
	[AcceptedFieldFailure] [varchar](200) NULL,
	[MaxTemp] [float] NULL,
	[MaxTempUOM] [varchar](2) NULL,
	[Depth] [float] NULL,
	[DepthUOM] [varchar](2) NULL,
	[EmailSent] [bit] NULL,
	[DateAdded] [datetime] NULL,
	[UserIdAdded] [int] NULL,
	[LastEdit] [datetime] NULL,
	[LastEditBy] [int] NULL,
	[IsDeleted] [bit] NULL,
	[WellName] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditGVWEquipmentRequestDetails]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditGVWEquipmentRequestDetails](
	[AuditActionId] [int] NOT NULL,
	[GVWEquipmentRequestDetailId] [int] NOT NULL,
	[DetailLineNo] [int] NULL,
	[ItemNum] [varchar](30) NULL,
	[QtyRequested] [int] NULL,
	[PartCondition] [varchar](5) NULL,
	[GVWEquipmentRequestId] [int] NOT NULL,
	[SupplyStatus] [varchar](5) NULL,
	[BranchPlant] [varchar](12) NULL,
	[Notes] [varchar](120) NULL,
	[ParentGVWEquipmentRequestDetailId] [int] NULL,
	[DateRequired] [datetime] NULL,
	[OrderingLocation] [varchar](30) NULL,
	[PreviousAvgMonthlyConsumption] [decimal](18, 4) NULL,
	[ForecastAvgMonthlyConsumption] [decimal](18, 4) NULL,
	[UnitCost] [decimal](18, 4) NULL,
	[IsSupplying] [bit] NULL,
	[SupplyQty] [int] NULL,
	[SalesOrderNumber] [varchar](120) NULL,
	[IsVoid] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditGVWEquipmentRequests]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditGVWEquipmentRequests](
	[AuditActionId] [int] NOT NULL,
	[GVWEquipmentRequestId] [int] NOT NULL,
	[GVWEquipmentRequestNo] [varchar](50) NULL,
	[RequestBranchPlant] [varchar](25) NULL,
	[RequestedBy] [varchar](50) NULL,
	[DateRequired] [datetime] NULL,
	[Remarks] [varchar](4096) NULL,
	[JDELocalApproverNo] [varchar](50) NULL,
	[Priority] [varchar](50) NULL,
	[SubmitRequestedDate] [datetime] NULL,
	[SubmitRequestedBy] [varchar](50) NULL,
	[ProductLine] [varchar](40) NULL,
	[LastEdit] [datetime] NULL,
	[LastEditBy] [int] NULL,
	[DateAdded] [datetime] NULL,
	[UserIdAdded] [int] NULL,
	[DateCompleted] [datetime] NULL,
	[DateApproved] [datetime] NULL,
	[Status] [varchar](25) NULL,
	[Stage] [smallint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditItemNumBranchPlants]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditItemNumBranchPlants](
	[AuditActionId] [int] NOT NULL,
	[ItemNumBranchPlantId] [uniqueidentifier] NOT NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[Version] [varchar](2) NULL,
	[SerialProfile] [varchar](1) NULL,
	[LotStatusCode] [varchar](1) NULL,
	[MinReorder] [decimal](18, 4) NULL,
	[MaxInStock] [decimal](18, 4) NULL,
	[OptimumStock] [decimal](18, 4) NULL,
	[IsProvidingLoc] [bit] NULL,
	[CurrShortName] [varchar](3) NULL,
	[StdUnitCost] [money] NULL,
	[MovingAverageCost] [money] NULL,
	[CostMethod] [varchar](2) NULL,
	[ECCN] [varchar](20) NULL,
	[HTSUS] [varchar](10) NULL,
	[LastEdit] [datetime] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[PlndDeliveryTime] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditItemNumConfigs]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditItemNumConfigs](
	[AuditActionId] [int] NOT NULL,
	[ItemNumConfigId] [uniqueidentifier] ROWGUIDCOL  NULL,
	[BranchPlant] [varchar](12) NULL,
	[LineNum] [numeric](4, 1) NULL,
	[ItemNum] [varchar](100) NULL,
	[ParentItemNum] [varchar](100) NULL,
	[OptionText] [varchar](50) NULL,
	[ECNNumber] [varchar](15) NULL,
	[LastDateModified] [datetime] NULL,
	[LastUserModified] [int] NULL,
	[Qty] [int] NULL,
	[Reference] [varchar](15) NULL,
	[EffectiveFromDate] [date] NULL,
	[EffectiveThruDate] [date] NULL,
	[ItemLevel] [varchar](2) NULL,
	[IsToolString] [bit] NULL,
	[ToolSizeID] [int] NULL,
	[IsActive] [bit] NULL,
	[IsMandatoryReplacement] [bit] NULL,
	[IsRequired] [bit] NULL,
	[UserIdAdded] [int] NULL,
	[DateAdded] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditItemNums]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditItemNums](
	[AuditActionId] [int] NOT NULL,
	[ItemNumId] [uniqueidentifier] NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[ItemNum2] [varchar](30) NULL,
	[ItemNum3] [varchar](30) NULL,
	[LegacyNum] [varchar](30) NULL,
	[DescShort] [varchar](60) NULL,
	[DescLong] [varchar](255) NULL,
	[DefaultUOM] [varchar](2) NULL,
	[PartClassification] [varchar](512) NULL,
	[Revision] [varchar](2) NULL,
	[DescDocNum] [varchar](20) NULL,
	[ToolPanel] [varchar](30) NULL,
	[ToolCode] [varchar](30) NULL,
	[PartCode] [varchar](30) NULL,
	[Critical] [bit] NULL,
	[IsObsolete] [bit] NOT NULL,
	[IsRestrictPurchasing] [bit] NOT NULL,
	[IsAsset] [bit] NOT NULL,
	[DefaultSerialProfile] [varchar](1) NULL,
	[StockType] [varchar](1) NULL,
	[ProductLine] [varchar](30) NULL,
	[ServiceLine] [varchar](30) NULL,
	[PartTypeId] [int] NULL,
	[Active] [bit] NOT NULL,
	[LastEdit] [datetime] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[TEROrderMultiple] [int] NOT NULL,
	[IsHazMat] [varchar](1) NULL,
	[ToolPerJob] [int] NULL,
	[Size] [varchar](20) NULL,
	[JDEGLCode] [varchar](15) NULL,
	[StdUnitCost] [money] NULL,
	[DepreciationCost] [money] NULL,
	[NetWeight] [varchar](30) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditJarActivities]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditJarActivities](
	[AuditActionId] [int] NOT NULL,
	[JarActivityId] [uniqueidentifier] NULL,
	[JobId] [uniqueidentifier] NULL,
	[RunNumber] [varchar](30) NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[Activity] [varchar](50) NULL,
	[EstDayRate] [float] NULL,
	[RevenueStatus] [varchar](50) NULL,
	[Comments] [varchar](5000) NULL,
	[ToolSize] [float] NULL,
	[BackupToolSize] [float] NULL,
	[WellName] [varchar](50) NULL,
	[HoleDepth] [decimal](18, 4) NULL,
	[HoleDepthUOM] [varchar](10) NULL,
	[MaxTemp] [decimal](18, 4) NULL,
	[MaxTempUOM] [varchar](10) NULL,
	[DateLastEdit] [datetime] NULL,
	[UserIdLastEdit] [int] NULL,
	[DateAdded] [datetime] NULL,
	[UserIdAdded] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditJarActivityPersonnel]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditJarActivityPersonnel](
	[AuditActionId] [int] NOT NULL,
	[JarActivityPersonnelId] [uniqueidentifier] NULL,
	[JobId] [uniqueidentifier] NULL,
	[JarActivityId] [uniqueidentifier] NULL,
	[JobPersonnelId] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditJarActivityServices]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditJarActivityServices](
	[AuditActionId] [int] NOT NULL,
	[JarActivityServiceId] [uniqueidentifier] NULL,
	[JarActivityId] [uniqueidentifier] NULL,
	[ServiceLine] [varchar](20) NOT NULL,
	[Sensor] [varchar](25) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditJarRunForecastTools]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditJarRunForecastTools](
	[AuditActionId] [int] NOT NULL,
	[JarRunForecastToolId] [uniqueidentifier] NOT NULL,
	[JarRunId] [uniqueidentifier] NOT NULL,
	[ItemNumConfigId] [uniqueidentifier] NOT NULL,
	[Qty] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditJarRuns]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditJarRuns](
	[AuditActionId] [int] NOT NULL,
	[JarRunId] [uniqueidentifier] NULL,
	[JobId] [uniqueidentifier] NULL,
	[RunNumber] [varchar](30) NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[HoleSize] [float] NULL,
	[ToolSize] [float] NULL,
	[BackupToolSize] [float] NULL,
	[HoleDepth] [float] NULL,
	[MaxTemp] [float] NULL,
	[OperHrs] [float] NULL,
	[CircHrs] [float] NULL,
	[DrillHrs] [float] NULL,
	[Comments] [varchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditJarRunTools]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditJarRunTools](
	[AuditActionId] [int] NOT NULL,
	[JarRunToolId] [uniqueidentifier] NULL,
	[JobId] [uniqueidentifier] NULL,
	[JarRunId] [uniqueidentifier] NULL,
	[ToolStringId] [uniqueidentifier] NULL,
	[IsBackup] [bit] NULL,
	[DateShipped] [datetime] NULL,
	[DateReturned] [datetime] NULL,
	[DateAdded] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditJobPersonnel]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditJobPersonnel](
	[AuditActionId] [int] NOT NULL,
	[JobPersonnelID] [uniqueidentifier] NULL,
	[JobID] [uniqueidentifier] NULL,
	[EmployeeID] [varchar](10) NULL,
	[ProductLine] [varchar](15) NULL,
	[Shift] [varchar](15) NULL,
	[IsLead] [bit] NULL,
	[Company] [varchar](50) NULL,
	[ArriveDate] [datetime] NULL,
	[DepartDate] [datetime] NULL,
	[PhoneNumber] [varchar](15) NULL,
	[VehicleUnitID] [varchar](30) NULL,
	[VehiclePlateNumber] [varchar](30) NULL,
	[LastName] [varchar](30) NULL,
	[FirstName] [varchar](30) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditJobs]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditJobs](
	[AuditActionId] [int] NOT NULL,
	[JobId] [uniqueidentifier] NULL,
	[Region] [varchar](30) NULL,
	[Country] [varchar](30) NULL,
	[BranchPlant] [varchar](12) NULL,
	[CustomerId] [uniqueidentifier] NULL,
	[JobNumber] [varchar](50) NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[EstDays] [datetime] NULL,
	[SpudDate] [datetime] NULL,
	[ImportStatus] [varchar](15) NULL,
	[LocationCountry] [varchar](50) NULL,
	[LocationState] [varchar](50) NULL,
	[LocationCounty] [varchar](50) NULL,
	[Field] [varchar](50) NULL,
	[RigType] [varchar](50) NULL,
	[Rig] [varchar](50) NULL,
	[Offshore] [bit] NULL,
	[Coordinator] [varchar](100) NULL,
	[ThirdPartyClient] [varchar](50) NULL,
	[X] [varchar](50) NULL,
	[Y] [varchar](50) NULL,
	[SurfaceSystem] [varchar](50) NULL,
	[SurfaceSystemVersion] [varchar](50) NULL,
	[RigPhone1] [varchar](50) NULL,
	[RigPhone2] [varchar](50) NULL,
	[Longitude] [varchar](50) NULL,
	[Latitude] [varchar](50) NULL,
	[API] [varchar](50) NULL,
	[UnitSerialNumber] [varchar](50) NULL,
	[DirectionalDrillingCompany] [varchar](50) NULL,
	[WellPlanRevision] [varchar](50) NULL,
	[CoreVersion] [varchar](10) NULL,
	[IsDS] [bit] NULL,
	[IsJarOnly] [bit] NULL,
	[JarWell] [varchar](50) NULL,
	[JarRunNumber] [varchar](50) NULL,
	[CreateDate] [datetime] NULL,
	[CreateUserID] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[UpdateUserID] [int] NULL,
	[DateProjected] [datetime] NULL,
	[DateActive] [datetime] NULL,
	[DatePending] [datetime] NULL,
	[DateClosed] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[RigName] [varchar](50) NULL,
	[PadProject] [varchar](3) NULL,
	[PadProjectName] [varchar](30) NULL,
	[ClientAFE] [varchar](20) NULL,
	[ClientPO] [varchar](20) NULL,
	[ClientWO] [varchar](20) NULL,
	[KOP] [varchar](20) NULL,
	[KitNumber] [varchar](20) NULL,
	[IPAddress] [varchar](25) NULL,
	[ReportId] [int] NULL,
	[DDRSSCoordinator] [varchar](100) NULL,
	[JarWellType] [varchar](25) NULL,
	[JarReservoirType] [varchar](15) NULL,
	[PreTravelTime] [int] NULL,
	[PostTravelTime] [int] NULL,
	[ConfirmedClosed] [bit] NULL,
	[Runs] [int] NULL,
	[DownholeFailures] [int] NULL,
	[DeckCheckFailures] [int] NULL,
	[SurfaceEquipmentFailures] [int] NULL,
	[DispatchNumber] [int] NULL,
	[OffshoreYN] [varchar](3) NULL,
	[JdeCustomerId] [uniqueidentifier] NULL,
	[SalesforceId] [varchar](20) NULL,
	[WFTUserName] [varchar](20) NULL,
	[SFCreatedDate] [datetime] NULL,
	[SFLastModifiedDate] [datetime] NULL,
	[RevenueStatus] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditNCRFailedComponents]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditNCRFailedComponents](
	[AuditActionId] [int] NOT NULL,
	[FailedComponentId] [uniqueidentifier] NULL,
	[RequestId] [int] NULL,
	[FixedAssetId] [uniqueidentifier] NULL,
	[SerialNum] [varchar](30) NULL,
	[InventoryItemNum] [varchar](30) NULL,
	[RNItemNum] [varchar](30) NULL,
	[AssetNumber] [varchar](10) NULL,
	[AssetDescription] [varchar](90) NULL,
	[ParentAssetNumber] [varchar](10) NULL,
	[NCRFailureCodeId] [int] NULL,
	[Comments] [varchar](4000) NULL,
	[AddedBy] [int] NULL,
	[DateAdded] [date] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditNCRRequests]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditNCRRequests](
	[AuditActionId] [int] NOT NULL,
	[RequestId] [int] NULL,
	[PartDesc] [varchar](120) NULL,
	[PartNumber] [varchar](30) NULL,
	[Qty] [int] NULL,
	[Vendor] [varchar](70) NULL,
	[PoNum] [varchar](25) NULL,
	[Line] [varchar](25) NULL,
	[MtNum] [varchar](20) NULL,
	[FailCode] [varchar](100) NULL,
	[HtNum] [varchar](50) NULL,
	[ProbDesc] [varchar](max) NULL,
	[Cause] [varchar](8000) NULL,
	[Disposition] [varchar](25) NULL,
	[DispositionComments] [varchar](8000) NULL,
	[DispositionedBy] [varchar](51) NULL,
	[DispositionDate] [datetime] NULL,
	[SerialNumbers] [varchar](max) NULL,
	[LinkToNCR] [int] NULL,
	[IncidentId] [uniqueidentifier] NULL,
	[WorkOrderNum] [varchar](25) NULL,
	[Category] [varchar](50) NULL,
	[RunNumber] [varchar](50) NULL,
	[JobNumber] [varchar](20) NULL,
	[NewbuildRepair] [varchar](10) NULL,
	[IsBasedOnMeridian] [bit] NULL,
	[Revision] [varchar](20) NULL,
	[RNItemNum] [varchar](30) NULL,
	[RNRevision] [varchar](20) NULL,
	[RNItemDesc] [varchar](120) NULL,
	[Cost] [money] NULL,
	[CurrencyCode] [varchar](3) NULL,
	[RNCost] [money] NULL,
	[RNCurrencyCode] [varchar](3) NULL,
	[JDEWorkOrderNum] [varchar](30) NULL,
	[InternalAnalysis] [varchar](50) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditPartDescPFTConfigs]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditPartDescPFTConfigs](
	[AuditActionID] [int] NOT NULL,
	[PartDescPFTConfigID] [uniqueidentifier] NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[PFTConfigID] [uniqueidentifier] NOT NULL,
	[PFTType] [tinyint] NOT NULL,
	[CreatedOn] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditPFTBoardFirmwares]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditPFTBoardFirmwares](
	[AuditActionId] [int] NOT NULL,
	[PFTBoardFirmwareId] [uniqueidentifier] NOT NULL,
	[PFTWOId] [uniqueidentifier] NOT NULL,
	[BoardItemNum] [varchar](30) NULL,
	[BoardSerialNum] [varchar](30) NULL,
	[SensorSlotBoardId] [uniqueidentifier] NULL,
	[BoardFirmwareId] [uniqueidentifier] NULL,
	[StartFirmwareRevision] [varchar](20) NULL,
	[EndFirmwareItemNum] [varchar](30) NOT NULL,
	[EndFirmwareRevision] [varchar](20) NULL,
	[Component] [varchar](25) NULL,
	[DateAdded] [datetime] NOT NULL,
	[IsMaster] [bit] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditPFTConfig]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditPFTConfig](
	[AuditActionId] [int] NOT NULL,
	[PFTConfigId] [uniqueidentifier] NULL,
	[ProcessName] [varchar](1024) NULL,
	[ProcessDesc] [varchar](1024) NULL,
	[IsDynamic] [tinyint] NULL,
	[DateAdded] [datetime] NULL,
	[IsObsolete] [tinyint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditPFTConfigFormPFT]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditPFTConfigFormPFT](
	[AuditActionID] [int] NOT NULL,
	[PFTConfigFormPFTId] [uniqueidentifier] NOT NULL,
	[PFTConfigFormId] [uniqueidentifier] NOT NULL,
	[ObjectNumber] [int] NOT NULL,
	[PFTObjectId] [int] NOT NULL,
	[DateAdded] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditPFTConfigSeq]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditPFTConfigSeq](
	[AuditActionId] [int] NOT NULL,
	[PFTConfigSeqId] [uniqueidentifier] NOT NULL,
	[PFTConfigId] [uniqueidentifier] NULL,
	[Seq] [int] NULL,
	[SeqName] [varchar](1024) NULL,
	[PFTLabId] [uniqueidentifier] NULL,
	[SeqDesc] [varchar](1024) NULL,
	[IsTestDataReq] [tinyint] NULL,
	[SendEmailOnPass] [varchar](1024) NULL,
	[DateAdded] [datetime] NULL,
	[IsCommentRequired] [tinyint] NULL,
	[IsCommentNumeric] [tinyint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditPFTMultilingualObject]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditPFTMultilingualObject](
	[AuditActionId] [int] NOT NULL,
	[PFTObjectMultilingualId] [bigint] NOT NULL,
	[Language] [varchar](20) NOT NULL,
	[PFTObjectId] [int] NULL,
	[TranslatedObjectName] [nvarchar](1024) NOT NULL,
	[TranslatedObjectDesc] [nvarchar](max) NULL,
	[TranslatedObjectByUser] [varchar](20) NOT NULL,
	[TranslationDate] [datetime] NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [varchar](20) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditPFTWO]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditPFTWO](
	[AuditActionId] [int] NOT NULL,
	[PFTWOId] [uniqueidentifier] ROWGUIDCOL  NULL,
	[WO_NO] [varchar](25) NULL,
	[WorkOrderId] [uniqueidentifier] NULL,
	[BranchPlant] [varchar](12) NULL,
	[FixedAssetId] [uniqueidentifier] NULL,
	[AssetNumber] [varchar](10) NULL,
	[ItemNum] [varchar](30) NULL,
	[PFTConfigId] [uniqueidentifier] NULL,
	[Active] [bit] NULL,
	[CurPFTWOSeqId] [uniqueidentifier] NULL,
	[UserIdAdded] [int] NULL,
	[Revision] [varchar](12) NULL,
	[IsDynamic] [bit] NULL,
	[ReferenceDocs] [varchar](4000) NULL,
	[SerialNum] [varchar](30) NULL,
	[IncidentNum] [varchar](50) NULL,
	[JobNum] [varchar](50) NULL,
	[Combo] [varchar](50) NULL,
	[IsDebug] [bit] NULL,
	[IsRTV] [bit] NULL,
	[DateAdded] [datetime] NULL,
	[PFTType] [tinyint] NULL,
	[FWSensorId] [uniqueidentifier] NULL,
	[SensorName] [varchar](50) NULL,
	[NCRRequestId] [int] NULL,
	[JDEWorkOrderNum] [varchar](30) NULL,
	[AssetRepairTrackId] [uniqueidentifier] NULL,
	[UpdatedBy] [int] NULL,
	[ReasonForChange] [nvarchar](4000) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditPFTWOFormCollectionFields]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditPFTWOFormCollectionFields](
	[AuditActionId] [int] NOT NULL,
	[PFTWOFormCollectionFieldId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[PFTWOFormCollectionId] [uniqueidentifier] NOT NULL,
	[ObjectId] [int] NULL,
	[UOM] [varchar](100) NULL,
	[Result] [varchar](100) NULL,
	[FieldResult] [varchar](1) NULL,
	[ResultInEmpirical] [varchar](100) NULL,
	[TextResult1] [varchar](100) NULL,
	[TextResult2] [varchar](100) NULL,
	[TextResult3] [varchar](100) NULL,
	[TextResult4] [varchar](100) NULL,
	[SequenceNumber] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[UpdatedBy] [int] NULL,
	[UpdatedOn] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditPFTWOSeq]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditPFTWOSeq](
	[AuditActionId] [int] NOT NULL,
	[PFTWOSeqId] [uniqueidentifier] NULL,
	[PFTWOId] [uniqueidentifier] NULL,
	[PFTConfigSeqId] [uniqueidentifier] NULL,
	[PFTResult] [varchar](1) NULL,
	[FailureCode] [varchar](255) NULL,
	[FailureComponent] [varchar](15) NULL,
	[Comment] [text] NULL,
	[Hours] [int] NULL,
	[UserName] [varchar](15) NULL,
	[UserId] [int] NULL,
	[NCRRequestId] [int] NULL,
	[IsDebug] [bit] NULL,
	[IsRTV] [bit] NULL,
	[DateAdded] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditPMChecks]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditPMChecks](
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[PFTConfigId] [uniqueidentifier] NOT NULL,
	[MeterReadingTypeId] [int] NOT NULL,
	[TriggerValue] [int] NOT NULL,
	[MeterReadingValue] [varchar](20) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ObjectNumber] [int] NULL,
	[PFTWOId] [uniqueidentifier] NULL,
	[CBMMonitorId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditPMDispositions]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditPMDispositions](
	[AuditActionId] [int] NOT NULL,
	[PMDispositionId] [uniqueidentifier] NOT NULL,
	[AssetRepairTrackId] [uniqueidentifier] NOT NULL,
	[PFTConfigId] [uniqueidentifier] NOT NULL,
	[Active] [bit] NOT NULL,
	[DispositionedById] [int] NULL,
	[DispositionOption] [int] NULL,
	[DispositionedOn] [datetime] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditRegions]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditRegions](
	[AuditActionId] [int] NOT NULL,
	[RegionId] [uniqueidentifier] NOT NULL,
	[Region] [varchar](25) NOT NULL,
	[RegionDesc] [varchar](50) NULL,
	[Latitude] [decimal](18, 4) NULL,
	[Longitude] [decimal](18, 4) NULL,
	[Active] [bit] NOT NULL,
	[LastEdit] [datetime] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[Hemisphere] [varchar](25) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditRequestApprovals]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditRequestApprovals](
	[AuditActionId] [int] NOT NULL,
	[ApprovalId] [int] NULL,
	[RequestId] [int] NULL,
	[UserId] [int] NULL,
	[DateApproved] [datetime] NULL,
	[DateEntered] [datetime] NULL,
	[ApprovalStatus] [varchar](1) NULL,
	[ApprovalOrder] [tinyint] NULL,
	[Comments] [text] NULL,
	[DateLastNotified] [datetime] NULL,
	[RemindInDays] [int] NULL,
	[DateLastReminded] [datetime] NULL,
	[IsInitialApprover] [bit] NULL,
	[DateLastModified] [datetime] NULL,
	[ModifiedBy] [int] NULL,
	[ApprovedBy] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditRequestFormDetails]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditRequestFormDetails](
	[AuditActionId] [int] NOT NULL,
	[RequestFormDetailId] [int] NULL,
	[RequestFormId] [int] NULL,
	[ItemNum] [varchar](30) NULL,
	[Qty] [int] NOT NULL,
	[QtyFilled] [int] NULL,
	[IsComplete] [bit] NOT NULL,
	[Comments] [varchar](4000) NULL,
	[SourceComments] [varchar](4000) NULL,
	[StandardCost] [decimal](18, 4) NULL,
	[ItemRequiredDate] [datetime] NULL,
	[DateCreated] [datetime] NULL,
	[CreatedBy] [varchar](50) NULL,
	[EstimatedDeliveryDateItem] [datetime] NULL,
	[CanSupply] [varchar](20) NULL,
	[EstimatedNumOfWeeks] [int] NULL,
	[CapitalRequiredForItem] [varchar](50) NULL,
	[RefRequestFormDetailId] [int] NULL,
	[CurrShortName] [varchar](3) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditRequestParts]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditRequestParts](
	[AuditActionId] [int] NOT NULL,
	[RequestPartId] [uniqueidentifier] NULL,
	[RequestId] [int] NULL,
	[PartNum] [varchar](30) NULL,
	[RNItemNum] [varchar](30) NULL,
	[SerialNum] [varchar](30) NULL,
	[AddedBy] [int] NULL,
	[DateAdded] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditRequests]    Script Date: 3/24/2023 7:52:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditRequests](
	[AuditActionId] [int] NOT NULL,
	[RequestId] [int] NULL,
	[RequestType] [varchar](5) NOT NULL,
	[Requestor] [varchar](51) NULL,
	[RequestorEmail] [varchar](100) NULL,
	[RequestStatus] [varchar](2) NULL,
	[UserIdEntered] [int] NULL,
	[DateEntered] [datetime] NULL,
	[Regarding] [varchar](30) NULL,
	[Supervisor] [varchar](50) NULL,
	[OpenClosed] [varchar](1) NULL,
	[DateClosed] [datetime] NULL,
	[BranchPlant] [varchar](12) NULL,
	[StatusChangedBy] [varchar](50) NULL,
	[IsDraft] [bit] NULL,
	[Subject] [varchar](255) NULL,
	[OrigBranchPlant] [varchar](12) NULL,
	[SupervisorID] [int] NULL,
	[LastEdit] [datetime] NULL,
	[LastEditBy] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditRequestSubscriptions]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditRequestSubscriptions](
	[AuditActionId] [int] NOT NULL,
	[SubscriptionId] [int] NULL,
	[RequestId] [int] NULL,
	[UserId] [int] NULL,
	[AddedByUserId] [int] NULL,
	[AddedDateTime] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditRMFields]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditRMFields](
	[FieldID] [int] NOT NULL,
	[FieldName] [varchar](50) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditScorecards]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditScorecards](
	[AuditActionId] [int] NOT NULL,
	[ScorecardId] [uniqueidentifier] NULL,
	[DataYear] [int] NULL,
	[DataMonth] [int] NULL,
	[Region] [varchar](25) NULL,
	[Country] [varchar](25) NULL,
	[ReportFieldId] [int] NULL,
	[ActualValue] [decimal](18, 4) NULL,
	[BudgetValue] [decimal](18, 4) NULL,
	[DateLastEdit] [datetime] NULL,
	[UserIdLastEdit] [int] NULL,
	[DateAdded] [datetime] NULL,
	[UserIdAdded] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditSensorItemNums]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditSensorItemNums](
	[AuditActionId] [int] NOT NULL,
	[SensorItemNumId] [uniqueidentifier] NOT NULL,
	[SensorId] [uniqueidentifier] NOT NULL,
	[ItemNum] [varchar](30) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditSensors]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditSensors](
	[AuditActionId] [int] NOT NULL,
	[SensorId] [uniqueidentifier] NOT NULL,
	[SensorName] [varchar](50) NOT NULL,
	[ProductLine] [varchar](5) NULL,
	[IsNotDisplay] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditSensorSlotBoards]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditSensorSlotBoards](
	[AuditActionId] [int] NOT NULL,
	[SensorSlotBoardId] [uniqueidentifier] NOT NULL,
	[SensorSlotId] [uniqueidentifier] NULL,
	[BoardItemNum] [varchar](30) NOT NULL,
	[IsSoftware] [bit] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditSensorSlots]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditSensorSlots](
	[AuditActionId] [int] NOT NULL,
	[SensorSlotId] [uniqueidentifier] NOT NULL,
	[SensorId] [uniqueidentifier] NOT NULL,
	[SlotNumber] [int] NOT NULL,
	[IsRequired] [bit] NOT NULL,
	[Description] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditSoftwareReleases]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditSoftwareReleases](
	[AuditActionId] [int] NOT NULL,
	[SoftwareReleaseId] [uniqueidentifier] NOT NULL,
	[Description] [varchar](100) NULL,
	[ProductLine] [varchar](10) NULL,
	[SoftwareType] [varchar](2) NULL,
	[ItemNum] [varchar](30) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditToolModParts]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditToolModParts](
	[AuditActionId] [int] NOT NULL,
	[ToolModPartsId] [uniqueidentifier] NOT NULL,
	[ToolModId] [uniqueidentifier] NOT NULL,
	[InventoryItemNum] [varchar](30) NULL,
	[Revision] [varchar](2) NULL,
	[UserIdAdded] [int] NULL,
	[DateAdded] [datetime] NOT NULL,
	[IsTool] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditToolMods]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditToolMods](
	[AuditActionId] [int] NOT NULL,
	[ToolModId] [uniqueidentifier] NOT NULL,
	[ModNum] [varchar](50) NOT NULL,
	[ModSubject] [varchar](128) NOT NULL,
	[ModDesc] [varchar](4096) NULL,
	[UserIdAdded] [int] NULL,
	[DateAdded] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditUserBranchPlants]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditUserBranchPlants](
	[AuditActionId] [int] NOT NULL,
	[UserBranchPlantId] [uniqueidentifier] NULL,
	[UserId] [int] NULL,
	[BranchPlant] [varchar](12) NULL,
	[IsDefault] [bit] NOT NULL,
	[CountryId] [uniqueidentifier] NULL,
	[RegionId] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditUserRoles]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditUserRoles](
	[AuditActionId] [int] NOT NULL,
	[RoleId] [int] NULL,
	[UserId] [int] NULL,
	[Source] [varchar](50) NULL,
	[CreatedOn] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditUsers]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditUsers](
	[AuditActionId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[UserName] [varchar](15) NULL,
	[PasswordEnc] [varbinary](255) NULL,
	[FirstName] [varchar](25) NULL,
	[LastName] [varchar](25) NULL,
	[Active] [tinyint] NULL,
	[Email] [varchar](100) NULL,
	[Notes] [varchar](500) NULL,
	[PictureLink] [varchar](50) NULL,
	[AdminLevel] [tinyint] NOT NULL,
	[WorkPhone] [varchar](25) NULL,
	[CellPhone] [varchar](25) NULL,
	[HomePhone] [varchar](25) NULL,
	[Division] [varchar](50) NULL,
	[DepartmentId] [int] NULL,
	[StartDate] [datetime] NULL,
	[JobPosition] [varchar](100) NULL,
	[ReportsTo] [int] NULL,
	[LastLoginDate] [datetime] NULL,
	[NumLoginAttempts] [smallint] NULL,
	[ForceChangePassword] [tinyint] NULL,
	[DefGLExpense] [varchar](35) NULL,
	[DateAdded] [datetime] NULL,
	[WFTUserName] [varchar](50) NULL,
	[DefaultProductLine] [int] NULL,
	[DefaultModule] [varchar](25) NULL,
	[JDEBadgeNum] [varchar](10) NULL,
	[DefaultLanguage] [varchar](20) NULL,
	[DefaultUOM] [varchar](100) NULL,
	[EcnRestriction] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditWorkOrderFixedAssets]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditWorkOrderFixedAssets](
	[AuditActionId] [int] NOT NULL,
	[WorkOrderFixedAssetId] [uniqueidentifier] NULL,
	[WorkOrderId] [uniqueidentifier] NULL,
	[FixedAssetId] [uniqueidentifier] NULL,
	[StartRevision] [varchar](2) NULL,
	[EndRevision] [varchar](2) NULL,
	[DateLastEdit] [datetime] NULL,
	[UserIdLastEdit] [int] NULL,
	[DateAdded] [datetime] NULL,
	[UserIdAdded] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditWorkOrderMaterialRequests]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditWorkOrderMaterialRequests](
	[AuditActionId] [int] NOT NULL,
	[WorkOrderMaterialRequestId] [uniqueidentifier] NOT NULL,
	[WorkOrderId] [uniqueidentifier] NOT NULL,
	[MaterialRequestNum] [varchar](30) NOT NULL,
	[Status] [varchar](25) NULL,
	[DateLastEdit] [datetime] NULL,
	[UserIdLastEdit] [int] NULL,
	[DateAdded] [datetime] NOT NULL,
	[UserIdAdded] [int] NOT NULL,
	[WorkflowStatus] [varchar](100) NULL,
	[WorkflowUpdatedOn] [datetime] NULL,
	[PFTWOId] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditWorkOrders]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditWorkOrders](
	[AuditActionId] [int] NOT NULL,
	[WorkOrderId] [uniqueidentifier] NOT NULL,
	[WorkOrderNum] [varchar](30) NOT NULL,
	[WorkOrderType] [tinyint] NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[InventoryItemNum] [varchar](30) NOT NULL,
	[SerialNum] [varchar](30) NOT NULL,
	[AssetNumber] [varchar](10) NULL,
	[AddedBy] [varchar](15) NULL,
	[DateAdded] [datetime] NULL,
	[DateClosed] [datetime] NULL,
	[EndRNItemNum] [varchar](30) NULL,
	[StartRevision] [varchar](2) NULL,
	[EndRevision] [varchar](2) NULL,
	[OpenedBy] [varchar](15) NULL,
	[StartDate] [datetime] NULL,
	[Comments] [varchar](1024) NULL,
	[EngComments] [varchar](1024) NULL,
	[Status] [varchar](15) NULL,
	[Quantity] [decimal](18, 4) NULL,
	[EstimatedRepairCost] [decimal](18, 4) NULL,
	[EstimatedHours] [decimal](18, 4) NULL,
	[EstimatedLabor] [decimal](18, 4) NULL,
	[EstimatedMaterial] [decimal](18, 4) NULL,
	[LaborCost] [decimal](18, 4) NULL,
	[MaterialCost] [decimal](18, 4) NULL,
	[StartRNItemNum] [varchar](30) NULL,
	[CurrencyCode] [varchar](3) NULL,
	[TotalHours] [decimal](18, 4) NULL,
	[ParentWorkOrderNum] [varchar](30) NULL,
	[JDEWorkOrderNum] [varchar](30) NULL,
	[JDEParentWorkOrderNum] [varchar](30) NULL,
	[NCRRequestId] [int] NULL,
	[EndInventoryItemNum] [varchar](30) NULL,
	[HasException] [bit] NULL,
	[ClosedBy] [varchar](15) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AuditWorkOrderValues]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditWorkOrderValues](
	[AuditActionId] [int] NOT NULL,
	[WorkOrderValueId] [int] NULL,
	[WorkOrderId] [uniqueidentifier] NULL,
	[DataFieldId] [int] NULL,
	[StringValue] [varchar](8000) NULL,
	[DateValue] [datetime] NULL,
	[NumberValue] [decimal](18, 4) NULL,
	[BooleanValue] [bit] NULL,
	[GuidValue] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Batteries]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Batteries](
	[BatteryID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NULL,
	[SerialNumber] [varchar](50) NULL,
	[StartAmpHrs] [float] NULL,
	[EndAmpHrs] [float] NULL,
	[UsedAmpHrs] [float] NULL,
	[Type] [varchar](50) NULL,
	[ToolStringSN] [varchar](50) NULL,
	[PreVoltage] [float] NULL,
	[PreVoltageUOM] [varchar](5) NULL,
	[PostVoltage] [float] NULL,
	[PostVoltageUOM] [varchar](5) NULL,
	[ToolStringID] [uniqueidentifier] NULL,
	[FixedAssetID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_Batteries] PRIMARY KEY CLUSTERED 
(
	[BatteryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BearingPacks]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BearingPacks](
	[BearingPackID] [uniqueidentifier] NOT NULL,
	[BearingPackName] [varchar](50) NULL,
 CONSTRAINT [PK_BearingPacks] PRIMARY KEY CLUSTERED 
(
	[BearingPackID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BHAComponents]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BHAComponents](
	[BHACompID] [uniqueidentifier] NOT NULL,
	[BHAID] [uniqueidentifier] NOT NULL,
	[SerialNumber] [varchar](50) NULL,
	[Component] [varchar](50) NULL,
	[OrderPosition] [int] NOT NULL,
	[IsNonMagDrillCollar] [bit] NULL,
	[InsideDiameter] [varchar](50) NULL,
	[InsideDiameterUOM] [varchar](10) NULL,
	[OutsideDiameter] [varchar](50) NULL,
	[OutsideDiameterUOM] [varchar](10) NULL,
	[Length] [varchar](50) NULL,
	[LengthUOM] [varchar](10) NULL,
	[StabilizerBladeOD] [varchar](50) NULL,
	[StabilizerBladeODUOM] [varchar](10) NULL,
	[Type] [varchar](50) NULL,
	[FishNeck] [float] NULL,
	[FishNeckUOM] [varchar](5) NULL,
	[TopConnectionType] [varchar](50) NULL,
	[BottomConnectionType] [varchar](50) NULL,
	[QuantityOnRig] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[BHACompID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BitDataGrading]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BitDataGrading](
	[BitDataGradingID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[BitDataID] [uniqueidentifier] NOT NULL,
	[InnerRowsIn] [varchar](50) NULL,
	[OuterRowsIn] [varchar](50) NULL,
	[DullCharacteristicsIn] [varchar](50) NULL,
	[LocationLIn] [varchar](50) NULL,
	[BearingSeatBIn] [varchar](50) NULL,
	[OtherDullOIn] [varchar](50) NULL,
	[ReasonPulledRIn] [varchar](50) NULL,
	[GaugeGIn] [varchar](50) NULL,
	[InnerRowsOut] [varchar](50) NULL,
	[OuterRowsOut] [varchar](50) NULL,
	[DullCharacteristicsOut] [varchar](50) NULL,
	[LocationLOut] [varchar](50) NULL,
	[BearingSeatBOut] [varchar](50) NULL,
	[OtherDullOOut] [varchar](50) NULL,
	[ReasonPulledROut] [varchar](50) NULL,
	[GaugeGOut] [varchar](50) NULL,
 CONSTRAINT [PK_BitDataGrading] PRIMARY KEY CLUSTERED 
(
	[BitDataGradingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BitDataNozzles]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BitDataNozzles](
	[BitDataNozzleID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[Quantity] [int] NULL,
	[Size] [float] NULL,
	[SizeUOM] [varchar](10) NULL,
	[Area] [float] NULL,
	[AreaUOM] [varchar](10) NULL,
 CONSTRAINT [PK_BitDataNozzles] PRIMARY KEY CLUSTERED 
(
	[BitDataNozzleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BoreholeCasing]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BoreholeCasing](
	[BoreholeCasingID] [uniqueidentifier] NOT NULL,
	[WellID] [uniqueidentifier] NOT NULL,
	[OD] [float] NULL,
	[ODUOM] [varchar](10) NULL,
	[Weight] [float] NULL,
	[WeightUOM] [varchar](10) NULL,
	[DepthFrom] [float] NULL,
	[DepthFromUOM] [varchar](10) NULL,
	[DepthTo] [float] NULL,
	[DepthToUOM] [varchar](10) NULL,
	[ID] [float] NULL,
	[IDUOM] [varchar](5) NULL,
	[HoleSize] [float] NULL,
	[HoleSizeUOM] [varchar](5) NULL,
PRIMARY KEY CLUSTERED 
(
	[BoreholeCasingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BoreholeDevRecs]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BoreholeDevRecs](
	[BoreholeDevRecID] [uniqueidentifier] NOT NULL,
	[WellID] [uniqueidentifier] NOT NULL,
	[RunBHAName] [varchar](50) NULL,
	[BHAType] [varchar](50) NULL,
	[HoleSize] [float] NULL,
	[HoleSizeUOM] [varchar](10) NULL,
	[HoleMDStart] [float] NULL,
	[HoleMDStartUOM] [varchar](5) NULL,
	[HoleMDEnd] [float] NULL,
	[HoleMDEndUOM] [varchar](5) NULL,
	[MinInc] [float] NULL,
	[MinIncUOM] [varchar](10) NULL,
	[MaxInc] [float] NULL,
	[MaxIncUOM] [varchar](10) NULL,
PRIMARY KEY CLUSTERED 
(
	[BoreholeDevRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BoreholeRecs]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BoreholeRecs](
	[BoreholeRecID] [uniqueidentifier] NOT NULL,
	[WellID] [uniqueidentifier] NOT NULL,
	[Section] [varchar](50) NULL,
	[HoleSize] [float] NULL,
	[HoleSizeUOM] [varchar](10) NULL,
	[DepthFrom] [float] NULL,
	[DepthFromUOM] [varchar](10) NULL,
	[DepthTo] [float] NULL,
	[DepthToUOM] [varchar](10) NULL,
	[IncStart] [float] NULL,
	[IncStartUOM] [varchar](5) NULL,
	[IncEnd] [float] NULL,
	[IncEndUOM] [varchar](5) NULL,
PRIMARY KEY CLUSTERED 
(
	[BoreholeRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BranchPlantAddress]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BranchPlantAddress](
	[BranchPlantAddressId] [uniqueidentifier] NOT NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[AddressType] [int] NOT NULL,
	[InvoiceNumPrefix] [varchar](10) NULL,
	[Line1] [varchar](256) NULL,
	[Line2] [varchar](256) NULL,
	[Line3] [varchar](256) NULL,
	[Line4] [varchar](256) NULL,
	[Line5] [varchar](256) NULL,
	[Line6] [varchar](256) NULL,
	[Line7] [varchar](256) NULL,
 CONSTRAINT [PK_BranchPlantAddress] PRIMARY KEY CLUSTERED 
(
	[BranchPlantAddressId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BranchPlantSettings]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BranchPlantSettings](
	[BranchPlant] [varchar](12) NOT NULL,
	[KeyName] [varchar](25) NOT NULL,
	[KeyValue] [varchar](1024) NOT NULL,
	[IsCached] [tinyint] NOT NULL,
 CONSTRAINT [PK_BaseCodeSettings] PRIMARY KEY CLUSTERED 
(
	[BranchPlant] ASC,
	[KeyName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BuildNumber]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildNumber](
	[BuildNumberId] [int] IDENTITY(1,1) NOT NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[BuildYear] [int] NOT NULL,
	[BuildNumber] [int] NOT NULL,
 CONSTRAINT [PK_BuildNumber] PRIMARY KEY CLUSTERED 
(
	[BuildNumberId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BuildSheetTemplateAttributes]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildSheetTemplateAttributes](
	[AttributeId] [int] IDENTITY(1,1) NOT NULL,
	[TemplateMapID] [int] NOT NULL,
	[Attribute] [varchar](100) NOT NULL,
	[AttributeTypeId] [int] NOT NULL,
 CONSTRAINT [PK_BuildSheetTemplateAttributes] PRIMARY KEY CLUSTERED 
(
	[AttributeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BuildSheetTemplateAttributeTypes]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildSheetTemplateAttributeTypes](
	[AttributeTypeId] [int] NOT NULL,
	[Attribute] [varchar](50) NOT NULL,
 CONSTRAINT [PK_BuildSheetTemplateAttributeTypes] PRIMARY KEY CLUSTERED 
(
	[AttributeTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BuildSheetTemplatesMap]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BuildSheetTemplatesMap](
	[TemplateMapID] [int] IDENTITY(1,1) NOT NULL,
	[TemplateID] [int] NOT NULL,
	[Description] [varchar](400) NULL,
	[OrderPosition] [int] NOT NULL,
	[SequencePosition] [int] NOT NULL,
 CONSTRAINT [PK_BuildSheetTemplatesMap] PRIMARY KEY CLUSTERED 
(
	[TemplateMapID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CAPASolutionHistory]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CAPASolutionHistory](
	[HistoryId] [uniqueidentifier] NOT NULL,
	[RequestId] [int] NOT NULL,
	[ShortTermSolution] [varchar](1024) NULL,
	[RootCauseInvestigation] [text] NULL,
	[CAPreventRecurrence] [text] NULL,
	[PlannedCompletionDate] [datetime] NULL,
	[AddedBy] [varchar](50) NULL,
	[AddedOn] [datetime] NULL,
 CONSTRAINT [PK_CAPASolutionHistory] PRIMARY KEY CLUSTERED 
(
	[HistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CBMCalculatedMeterReadings_7Feb23]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CBMCalculatedMeterReadings_7Feb23](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[MeterReadingTypeId] [int] NULL,
	[LastMeterReadingValue] [varchar](50) NULL,
	[LifeTimeValue] [varchar](20) NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[LastPFTWOId] [uniqueidentifier] NULL,
	[CBMMonitorId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CBMHistogramCurve]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CBMHistogramCurve](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ToolMnem] [varchar](100) NULL,
	[CurveName] [varchar](100) NOT NULL,
	[Priority] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedBy] [int] NULL,
	[UpdatedOn] [datetime] NULL,
	[UpdatedBy] [int] NULL,
 CONSTRAINT [PK_CBMHistogramCurve] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CBMHistogramRunTools]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CBMHistogramRunTools](
	[CBMHistogramRunId] [uniqueidentifier] NULL,
	[Name] [varchar](100) NULL,
	[SerialNumber] [varchar](100) NULL,
	[PartTypeId] [int] NULL,
	[Units] [varchar](100) NULL,
	[SensorDistance] [decimal](10, 2) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CBMMonitorCustoms]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CBMMonitorCustoms](
	[CBMMonitorCustomsId] [int] IDENTITY(1,1) NOT NULL,
	[PFTConfigId] [uniqueidentifier] NULL,
	[MeterReadingTypeId] [int] NULL,
	[TriggerType] [char](1) NULL,
	[TriggerName] [varchar](50) NULL,
	[TriggerValue] [int] NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ObjectNumber] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ConocoJobDataXml]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ConocoJobDataXml](
	[ConocoJobDataId] [uniqueidentifier] NOT NULL,
	[JobID] [uniqueidentifier] NOT NULL,
	[DateGenerated] [datetime] NOT NULL,
	[Desc] [varchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ConocoJobDataId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CoreFiles]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CoreFiles](
	[CoreId] [uniqueidentifier] NOT NULL,
	[FileName] [varchar](100) NOT NULL,
	[InputXML] [xml] NULL,
	[BaseXML] [xml] NULL,
	[Messages] [xml] NULL,
	[IgnoreValidation] [bit] NULL,
	[Status] [bit] NULL,
	[Version] [varchar](25) NULL,
	[CreatedBy] [varchar](25) NULL,
	[CreatedOn] [datetime] NULL,
	[Type] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CustomsInvoiceConfigDetails]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CustomsInvoiceConfigDetails](
	[CustomsInvoiceConfigDetailId] [uniqueidentifier] NOT NULL,
	[CustomsInvoiceConfigId] [uniqueidentifier] NOT NULL,
	[ColumnName] [varchar](35) NOT NULL,
	[DisplayName] [varchar](35) NOT NULL,
	[InputType] [varchar](15) NULL,
	[DataType] [varchar](15) NULL,
	[IsRequired] [bit] NOT NULL,
	[InputAlign] [varchar](10) NULL,
	[InputSize] [int] NOT NULL,
	[InputMaxLength] [int] NOT NULL,
	[IsHeaderInput] [bit] NOT NULL,
	[DisplayOrder] [int] NOT NULL,
	[AssetShipmentDisplay] [bit] NOT NULL,
	[PartShipmentDisplay] [bit] NOT NULL,
	[PackingSlipDisplay] [bit] NOT NULL,
 CONSTRAINT [PK_CustomsInvoiceConfigDetails] PRIMARY KEY CLUSTERED 
(
	[CustomsInvoiceConfigDetailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CustomsInvoiceSli]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CustomsInvoiceSli](
	[CustomsInvoiceId] [uniqueidentifier] NOT NULL,
	[ConsigneeLine1] [varchar](256) NULL,
	[ConsigneeLine2] [varchar](256) NULL,
	[ConsigneeLine3] [varchar](256) NULL,
	[ConsigneeLine4] [varchar](256) NULL,
	[ConsigneeLine5] [varchar](256) NULL,
	[ConsigneeLine6] [varchar](256) NULL,
	[ConsigneeLine7] [varchar](256) NULL,
	[SLINotes] [varchar](4000) NULL,
 CONSTRAINT [PK_CustomsInvoiceSli] PRIMARY KEY CLUSTERED 
(
	[CustomsInvoiceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DailyEM]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DailyEM](
	[DailyEMID] [uniqueidentifier] NOT NULL,
	[DailyID] [uniqueidentifier] NOT NULL,
	[DrillingStart] [datetime] NULL,
	[DrillingEnd] [datetime] NULL,
	[SignalLevelStart] [float] NULL,
	[SignalLevelStartUOM] [varchar](10) NULL,
	[SignalLevelEnd] [float] NULL,
	[SignalLevelEndUOM] [varchar](10) NULL,
	[NoiseLevelStart] [float] NULL,
	[NoiseLevelStartUOM] [varchar](10) NULL,
	[NoiseLevelEnd] [float] NULL,
	[NoiseLevelEndUOM] [varchar](10) NULL,
	[EmittingCurrentStart] [float] NULL,
	[EmittingCurrentStartUOM] [varchar](10) NULL,
	[EmittingCurrentEnd] [float] NULL,
	[EmittingCurrentEndUOM] [varchar](10) NULL,
	[MainGroundStart] [varchar](50) NULL,
	[MainGroundEnd] [varchar](50) NULL,
	[ReceptionStart] [varchar](50) NULL,
	[ReceptionEnd] [varchar](50) NULL,
	[MainGroundVoltageStart] [float] NULL,
	[MainGroundVoltageStartUOM] [varchar](10) NULL,
	[MainGroundVoltageEnd] [float] NULL,
	[MainGroundVoltageEndUOM] [varchar](10) NULL,
	[MainGroundCurrentStart] [float] NULL,
	[MainGroundCurrentStartUOM] [varchar](10) NULL,
	[MainGroundCurrentEnd] [float] NULL,
	[MainGroundCurrentEndUOM] [varchar](10) NULL,
	[MainGroundResistanceStart] [float] NULL,
	[MainGroundResistanceStartUOM] [varchar](10) NULL,
	[MainGroundResistanceEnd] [float] NULL,
	[MainGroundResistanceEndUOM] [varchar](10) NULL,
	[Transceiversn] [varchar](50) NULL,
	[ExtendedRangeRun] [varchar](50) NULL,
	[ExtendedRangeCableLength] [float] NULL,
	[ExtendedRangeCableLengthUOM] [varchar](10) NULL,
 CONSTRAINT [PK_DailyEM] PRIMARY KEY CLUSTERED 
(
	[DailyEMID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DailyRigData]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DailyRigData](
	[DailyRigDataID] [uniqueidentifier] NOT NULL,
	[DailyID] [uniqueidentifier] NOT NULL,
	[Date] [datetime] NULL,
	[StartTime] [datetime] NULL,
	[EndTime] [datetime] NULL,
	[TimeInterval] [float] NULL,
	[BRT] [bit] NULL,
	[ActivityMode] [varchar](50) NULL,
	[Activity] [varchar](50) NULL,
	[Comments] [varchar](255) NULL,
 CONSTRAINT [PK_DailyRigData] PRIMARY KEY CLUSTERED 
(
	[DailyRigDataID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DataDictionary]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DataDictionary](
	[DataDictionaryID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[ShortName] [varchar](20) NULL,
	[Bits] [float] NULL,
	[Parity] [float] NULL,
	[NumErrorCodes] [float] NULL,
	[HexCodes] [varchar](50) NULL,
	[Mnemonic] [varchar](50) NULL,
	[DecimalPlaces] [float] NULL,
	[Units] [float] NULL,
	[Scale] [float] NULL,
	[Offset] [float] NULL,
	[DHScale] [float] NULL,
	[DHOffset] [float] NULL,
	[CommTies] [float] NULL,
	[RetryDelay] [float] NULL,
	[RTParameter] [float] NULL,
	[Tool] [varchar](50) NULL,
	[DownloadDataID] [uniqueidentifier] NULL,
	[ItemIndex] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[DataDictionaryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DocCategories]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DocCategories](
	[DocCategoryId] [int] IDENTITY(1,1) NOT NULL,
	[DocCategoryName] [varchar](100) NOT NULL,
 CONSTRAINT [PK_DocCategories] PRIMARY KEY CLUSTERED 
(
	[DocCategoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DocItemsBkUp]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DocItemsBkUp](
	[DocItemId] [int] IDENTITY(1,1) NOT NULL,
	[DocItemTitle] [varchar](512) NOT NULL,
	[DocItemDesc] [varchar](1024) NULL,
	[DocItemFilePath] [varchar](1024) NULL,
	[DocItemFileName] [varchar](255) NULL,
	[DocItemFileSize] [numeric](18, 0) NULL,
	[DocItemType] [tinyint] NOT NULL,
	[DocItemDate] [datetime] NULL,
	[ParentDocItemId] [int] NULL,
	[OriginalFileName] [varchar](255) NULL,
	[UploadedBy] [int] NULL,
	[DateAdded] [datetime] NULL,
	[IsControlled] [bit] NOT NULL,
	[Uncontrolled] [bit] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[LegacyKeyId] [int] NULL,
	[LegacySource] [varchar](25) NULL,
	[DocumentCategory] [varchar](20) NULL,
 CONSTRAINT [PK_DocItemsBkup] PRIMARY KEY CLUSTERED 
(
	[DocItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DocItemSubscriptions]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DocItemSubscriptions](
	[DocItemId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
 CONSTRAINT [PK_DocItemSubscriptions] PRIMARY KEY CLUSTERED 
(
	[DocItemId] ASC,
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DownloadData]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DownloadData](
	[DownloadDataID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[Version] [float] NULL,
	[PrimaryMode] [float] NULL,
	[PrimaryFreq] [float] NULL,
	[ModeSwitchWindowStart] [float] NULL,
	[ModeSwitchWindowStop] [float] NULL,
	[FreqSwitchWindowStart] [float] NULL,
	[FreqSwitchWindowStop] [float] NULL,
	[XmitDelay] [float] NULL,
	[SurveyDelay] [float] NULL,
	[NumFreqs] [float] NULL,
	[NumModes] [float] NULL,
PRIMARY KEY CLUSTERED 
(
	[DownloadDataID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DownloadFrequencies]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DownloadFrequencies](
	[DownloadFrequencyID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[On] [float] NULL,
	[Off] [float] NULL,
	[TD] [float] NULL,
	[DownloadDataID] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[DownloadFrequencyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DownloadLists]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DownloadLists](
	[DownloadListID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[Cycles] [float] NULL,
	[ShortName] [varchar](20) NULL,
	[DownloadModeID] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[DownloadListID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DownloadModes]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DownloadModes](
	[DownloadModeID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[ModeName] [varchar](50) NULL,
	[NumLists] [int] NULL,
	[Cycles] [float] NULL,
	[DownloadDataID] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[DownloadModeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ECRApprovalStatus]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ECRApprovalStatus](
	[ECRApprovalStatusId] [uniqueidentifier] NOT NULL,
	[ECRId] [uniqueidentifier] NOT NULL,
	[Stage] [int] NOT NULL,
	[Status] [varchar](50) NOT NULL,
	[Comments] [varchar](max) NULL,
	[DateAdded] [datetime] NOT NULL,
	[ProcessedBy] [int] NOT NULL,
 CONSTRAINT [PK_ECRApprovalStatus] PRIMARY KEY CLUSTERED 
(
	[ECRApprovalStatusId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ECRECNs]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ECRECNs](
	[ECREcnId] [uniqueidentifier] NOT NULL,
	[ECRId] [uniqueidentifier] NOT NULL,
	[ECNNumber] [varchar](15) NULL,
	[DateAdded] [datetime] NOT NULL,
	[UserIdAdded] [int] NOT NULL,
 CONSTRAINT [PK_ECRECNs] PRIMARY KEY CLUSTERED 
(
	[ECREcnId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ECREmails]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ECREmails](
	[ECREmailId] [uniqueidentifier] NOT NULL,
	[ECRId] [uniqueidentifier] NOT NULL,
	[EmailTo] [varchar](1024) NULL,
	[EmailCC] [varchar](1024) NULL,
	[EmailBody] [varchar](4000) NULL,
	[ReplyToEmailId] [uniqueidentifier] NULL,
	[UserIdAdded] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
 CONSTRAINT [PK_ECREmails_1] PRIMARY KEY CLUSTERED 
(
	[ECREmailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Employees]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Employees](
	[ID] [uniqueidentifier] NOT NULL,
	[EmployeeID] [varchar](10) NOT NULL,
	[FirstName] [varchar](50) NOT NULL,
	[LastName] [varchar](50) NOT NULL,
	[Title] [varchar](50) NULL,
 CONSTRAINT [PK_Employees_1] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EngineersOnDuty]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EngineersOnDuty](
	[EmpID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NULL,
	[DailyID] [uniqueidentifier] NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[IsLead] [bit] NOT NULL,
	[Description] [varchar](255) NULL,
	[CoreID] [varchar](10) NULL,
	[ProductLine] [varchar](30) NULL,
	[DailyActivityID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_Employees] PRIMARY KEY CLUSTERED 
(
	[EmpID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ErrorLog]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ErrorLog](
	[ErrorLogId] [int] IDENTITY(1,1) NOT NULL,
	[ErrorDate] [datetime] NOT NULL,
	[ErrorMessage] [nvarchar](max) NULL,
	[Exception] [text] NOT NULL,
	[UserName] [nvarchar](256) NOT NULL,
	[ApplicationName] [nvarchar](256) NOT NULL,
	[URI] [varchar](4096) NULL,
 CONSTRAINT [PK_ErrorLog] PRIMARY KEY CLUSTERED 
(
	[ErrorLogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ErrorLogHistory]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ErrorLogHistory](
	[ErrorLogId] [int] IDENTITY(1,1) NOT NULL,
	[ErrorDate] [datetime] NOT NULL,
	[ErrorMessage] [nvarchar](max) NULL,
	[Exception] [text] NOT NULL,
	[UserName] [nvarchar](256) NOT NULL,
	[ApplicationName] [nvarchar](256) NOT NULL,
	[URI] [varchar](4096) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ETLStoredProcedures]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ETLStoredProcedures](
	[ETLStoredProcedureId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ProcedureName] [varchar](255) NOT NULL,
	[Sequence] [int] NOT NULL,
 CONSTRAINT [PK_ETLSProcedures] PRIMARY KEY CLUSTERED 
(
	[ETLStoredProcedureId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FailureCategories_Temp]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FailureCategories_Temp](
	[FailureCategoryId] [uniqueidentifier] NOT NULL,
	[FailureCategoryCode] [varchar](7) NOT NULL,
	[FailureCategoryDesc] [varchar](255) NULL,
	[FailureType] [varchar](250) NULL,
	[IsHistorical] [bit] NOT NULL,
	[GLProductLineId] [int] NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FailureSubCategories_Temp]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FailureSubCategories_Temp](
	[FailureSubCategoryId] [uniqueidentifier] NOT NULL,
	[FailureSubCategoryCode] [varchar](7) NOT NULL,
	[FailureSubCategoryDesc] [varchar](255) NULL,
	[FailureType] [varchar](250) NULL,
	[IsHistorical] [bit] NOT NULL,
	[GLProductLineId] [int] NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FaultCodeTapRoots]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FaultCodeTapRoots](
	[TapRootId] [uniqueidentifier] NOT NULL,
	[TapRootDesc] [varchar](255) NOT NULL,
	[ParentTapRootId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_FaultCodeTapRoots] PRIMARY KEY CLUSTERED 
(
	[TapRootId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FixedAssetHistory]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FixedAssetHistory](
	[FixedAssetHistoryId] [uniqueidentifier] NOT NULL,
	[WorkOrderId] [uniqueidentifier] NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[InventoryItemNum] [varchar](30) NULL,
	[RNItemNum] [varchar](30) NULL,
	[SerialNum] [varchar](50) NULL,
	[AssetNumber] [varchar](30) NULL,
	[Qty] [int] NULL,
	[Revision] [varchar](2) NULL,
	[ParentFixedAssetId] [uniqueidentifier] NOT NULL,
	[AddedBy] [varchar](15) NULL,
	[DatedAdded] [datetime] NULL,
 CONSTRAINT [PK_FixedAssetHistory] PRIMARY KEY CLUSTERED 
(
	[FixedAssetHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FixedAssetImport_Temp]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FixedAssetImport_Temp](
	[Order Number] [float] NULL,
	[Lot Serial Number] [nvarchar](255) NULL,
	[2nd Item Number] [nvarchar](255) NULL,
	[3rd Item Number] [nvarchar](255) NULL,
	[Description] [nvarchar](255) NULL,
	[2nd Item Number1] [nvarchar](255) NULL,
	[3rd Item Number1] [nvarchar](255) NULL,
	[Description1] [nvarchar](255) NULL,
	[Description Line 2] [nvarchar](255) NULL,
	[SUM( (Transaction Quantity) ) * - 1] [float] NULL,
	[Location] [nvarchar](255) NULL,
	[Lot Serial Number1] [nvarchar](255) NULL,
	[LC Src] [nvarchar](255) NULL,
	[Description2] [nvarchar](255) NULL,
	[Rev Lev] [nvarchar](255) NULL,
	[Lot Grd] [nvarchar](255) NULL,
	[Source] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FracasAudit]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FracasAudit](
	[FracasAudit] [uniqueidentifier] NOT NULL,
	[FracasID] [uniqueidentifier] NULL,
	[FracasComponentID] [uniqueidentifier] NULL,
	[CommentBox] [varchar](20) NOT NULL,
	[UserID] [int] NOT NULL,
	[CommentDate] [datetime] NOT NULL,
 CONSTRAINT [PK_FracasAudit] PRIMARY KEY CLUSTERED 
(
	[FracasAudit] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FracasComponentAttachments]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FracasComponentAttachments](
	[FracasComponentAttachmentID] [uniqueidentifier] NOT NULL,
	[FracasComponentID] [uniqueidentifier] NOT NULL,
	[AttachmentID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_FracasComponentAttachments] PRIMARY KEY CLUSTERED 
(
	[FracasComponentAttachmentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FracasOwners]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FracasOwners](
	[FracasComponentID] [uniqueidentifier] NOT NULL,
	[UserID] [int] NOT NULL,
 CONSTRAINT [PK_FracasOwners] PRIMARY KEY CLUSTERED 
(
	[FracasComponentID] ASC,
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FracasPTCRunMap]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FracasPTCRunMap](
	[FracasPTCRunMapID] [uniqueidentifier] NOT NULL,
	[FracasPTCID] [varchar](30) NOT NULL,
	[HpiID] [varchar](30) NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[IncidentID] [uniqueidentifier] NULL,
	[ApiCallDate] [datetime] NOT NULL,
 CONSTRAINT [PK_PTCFracasRunMap] PRIMARY KEY CLUSTERED 
(
	[FracasPTCRunMapID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Glcodes_ETL_d]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Glcodes_ETL_d](
	[DATA_KEY_NO] [int] NULL,
	[CY_NO] [int] NOT NULL,
	[FY_NO] [int] NOT NULL,
	[GL_PER_NO] [int] NOT NULL,
	[SRC_KEY_CD] [varchar](75) NOT NULL,
	[SRC_DESC] [varchar](75) NULL,
	[TGT_KEY_CD] [varchar](75) NULL,
	[GROUPPL] [varchar](500) NULL,
	[GROUP_ABBR] [varchar](500) NULL,
	[GROUP_CODE] [varchar](500) NULL,
	[SEGMENTPL] [varchar](500) NULL,
	[SEGMENT_ABBR] [varchar](500) NULL,
	[SEGMENT_CODE] [varchar](500) NULL,
	[PRODUCT_LINE] [varchar](500) NULL,
	[PRODUCT_LINE_CODE] [varchar](500) NULL,
	[PRODUCT_SERVICE] [varchar](500) NULL,
	[BASE_CODE] [varchar](500) NULL,
	[PRIMARY_CODE] [varchar](500) NULL,
	[VIEW_TYPE] [varchar](500) NULL,
	[MGMTMETRIC] [varchar](500) NULL,
	[DateModified] [datetime] NULL,
	[DateAdded] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Help]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Help](
	[HelpID] [int] NOT NULL,
	[HelpItemDescription] [varchar](50) NOT NULL,
	[HelpText] [text] NOT NULL,
 CONSTRAINT [PK_Help] PRIMARY KEY CLUSTERED 
(
	[HelpID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[HelpDialog]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HelpDialog](
	[HelpDialogId] [int] IDENTITY(1,1) NOT NULL,
	[PageId] [int] NOT NULL,
	[ControlId] [varchar](75) NOT NULL,
	[DialogTitle] [varchar](100) NOT NULL,
	[HelpTitleText] [varchar](150) NOT NULL,
	[HelpContentText] [ntext] NOT NULL,
	[DialogWidth] [int] NULL,
	[DialogHeight] [int] NULL,
 CONSTRAINT [PK_HelpDialog] PRIMARY KEY CLUSTERED 
(
	[HelpDialogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ItemNumConfigHistory]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ItemNumConfigHistory](
	[ItemNumConfigHistoryId] [uniqueidentifier] NOT NULL,
	[BranchPlant] [varchar](12) NULL,
	[LineNum] [numeric](15, 2) NULL,
	[ItemNum] [varchar](100) NOT NULL,
	[ParentItemNum] [varchar](100) NULL,
	[OptionText] [varchar](100) NULL,
	[ECNNumber] [varchar](15) NULL,
	[LastDateModified] [datetime] NULL,
	[LastUserModified] [int] NULL,
	[LastModifiedUserName] [varchar](15) NULL,
	[Qty] [int] NULL,
	[Reference] [varchar](15) NULL,
	[EffectiveFromDate] [date] NULL,
	[EffectiveThruDate] [date] NULL,
	[ItemLevel] [varchar](2) NULL,
	[IsMandatoryReplacement] [bit] NULL,
	[IsRequired] [bit] NOT NULL,
	[DateAdded] [datetime] NULL,
	[UserIdAdded] [int] NULL,
	[AddedByUserName] [varchar](15) NULL,
	[HistoryDateAdded] [datetime] NULL,
 CONSTRAINT [PK_ItemNumConfigHistory_1] PRIMARY KEY CLUSTERED 
(
	[ItemNumConfigHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JarServiceSensors]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JarServiceSensors](
	[JarServiceSensorId] [int] IDENTITY(1,1) NOT NULL,
	[ServiceLine] [varchar](20) NOT NULL,
	[Sensor] [varchar](25) NOT NULL,
	[Ordinal] [smallint] NOT NULL,
 CONSTRAINT [PK_JarServiceSensors] PRIMARY KEY CLUSTERED 
(
	[JarServiceSensorId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JDE_slv_Sanctions_ECCN_US]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JDE_slv_Sanctions_ECCN_US](
	[ITM_NO_SHRT] [float] NULL,
	[CNTRY_CD] [varchar](8000) NULL,
	[US_EXPT_CMDTY_CTRL_NO] [varchar](8000) NULL,
	[HRMNZD_TRF_BEG_DGTS] [varchar](8000) NULL,
	[HRMNZD_TRF_END_DGTS] [varchar](8000) NULL,
	[HTS_ECCN_DESC] [varchar](8000) NULL,
	[PGM_ID] [varchar](8000) NULL,
	[USR_ID] [varchar](8000) NULL,
	[WRK_STA_ID] [varchar](8000) NULL,
	[SRC_DT_UPD] [float] NULL,
	[DT_UPD] [datetime2](7) NULL,
	[SRC_TM_LST_UPD] [float] NULL,
	[TM_LST_UPD] [datetime2](7) NULL,
	[EDI_SUCC_PROC_FLAG] [varchar](8000) NULL,
	[CUST_UOM1] [varchar](8000) NULL,
	[CUST_UOM2] [varchar](8000) NULL,
	[CREAT_DTTM] [datetime2](7) NULL,
	[CREAT_USR_ID] [varchar](8000) NULL,
	[LST_MOD_DTTM] [datetime2](7) NULL,
	[LST_MOD_USR_ID] [varchar](8000) NULL,
	[LST_CAPXUSER] [varchar](8000) NULL,
	[LST_CAPXTIMESTAMP] [varchar](8000) NULL,
	[LST_CAPXACTION] [varchar](8000) NULL,
	[LST_CAPXRRN] [float] NULL,
	[ACTV_IND] [varchar](8000) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JDEWorkOrderComponents]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JDEWorkOrderComponents](
	[WorkOrderId] [uniqueidentifier] NOT NULL,
	[WorkOrderNum] [varchar](30) NULL,
	[WorkOrderType] [varchar](10) NULL,
	[ParentSerialNum] [varchar](50) NULL,
	[ParentItemNum] [varchar](50) NULL,
	[ParentRevision] [varchar](10) NULL,
	[ChildSerialNum] [varchar](50) NULL,
	[ChildItemNum] [varchar](50) NULL,
	[ChildRevision] [varchar](10) NULL,
	[ChildQty] [int] NULL,
	[DateAdded] [datetime] NULL,
	[ParentFixedAssetId] [uniqueidentifier] NULL,
	[TopLevelFixedAssetId] [uniqueidentifier] NULL,
	[FixedAssetId] [uniqueidentifier] NULL,
	[InstallDate] [datetime] NULL,
	[RemoveDate] [datetime] NULL,
	[RemoveWO] [varchar](30) NULL,
	[InstallBy] [varchar](15) NULL,
	[RemovedBy] [varchar](15) NULL,
 CONSTRAINT [PK_JDEWorkOrderComponents] PRIMARY KEY CLUSTERED 
(
	[WorkOrderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Job]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Job](
	[JobId] [int] NOT NULL,
	[Name] [varchar](255) NOT NULL,
	[ObjectName] [varchar](200) NOT NULL,
	[ConfigXml] [xml] NULL,
	[AutoRetryCount] [int] NULL,
	[Active] [bit] NOT NULL,
 CONSTRAINT [PK_Job] PRIMARY KEY CLUSTERED 
(
	[JobId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JobCapacityReportConfig]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobCapacityReportConfig](
	[JobCapacityReportConfigId] [int] IDENTITY(1,1) NOT NULL,
	[ReportName] [varchar](50) NOT NULL,
	[GroupName] [varchar](50) NOT NULL,
	[ToolCode] [varchar](50) NOT NULL,
	[DisplayOrder] [int] NULL,
	[ToolPanel] [varchar](25) NOT NULL,
 CONSTRAINT [PK_JobCapacityReportConfig] PRIMARY KEY CLUSTERED 
(
	[JobCapacityReportConfigId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JobInventory]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobInventory](
	[JobInventoryID] [uniqueidentifier] NOT NULL,
	[JobID] [uniqueidentifier] NOT NULL,
	[SerialNumber] [varchar](50) NULL,
	[Comments] [varchar](100) NULL,
	[Length] [varchar](15) NULL,
	[LengthUOM] [varchar](10) NULL,
	[OD] [varchar](10) NULL,
	[ODUOM] [varchar](10) NULL,
	[ID] [varchar](10) NULL,
	[IDUOM] [varchar](10) NULL,
	[ConnTypeA] [varchar](100) NULL,
	[ConnTypeSizeA] [varchar](20) NULL,
	[ConnTypeSizeAUOM] [varchar](10) NULL,
	[ConnTypeB] [varchar](100) NULL,
	[ConnTypeSizeB] [varchar](20) NULL,
	[ConnTypeSizeBUOM] [varchar](10) NULL,
	[IsUsed] [bit] NULL,
	[OnRigDate] [datetime] NULL,
	[OffRigDate] [datetime] NULL,
 CONSTRAINT [PK_JobInventory_3691F209] PRIMARY KEY CLUSTERED 
(
	[JobInventoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JobLog]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobLog](
	[JobLogId] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [int] NOT NULL,
	[RunStart] [datetime] NOT NULL,
	[RunEnd] [datetime] NULL,
	[RequestXml] [xml] NULL,
	[JobLogStatusId] [int] NOT NULL,
	[JobQueueId] [int] NOT NULL,
	[Exception] [varchar](max) NULL,
	[RetryNumber] [int] NULL,
 CONSTRAINT [PK_JobLog] PRIMARY KEY CLUSTERED 
(
	[JobLogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JobLogStatus]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobLogStatus](
	[JobLogStatusId] [int] NOT NULL,
	[Description] [varchar](50) NOT NULL,
 CONSTRAINT [PK_JobLogStatus] PRIMARY KEY CLUSTERED 
(
	[JobLogStatusId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JobQueueHistory]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobQueueHistory](
	[JobQueueId] [int] IDENTITY(1,1) NOT NULL,
	[JobId] [nchar](10) NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[RunStart] [datetime] NULL,
	[RunEnd] [datetime] NULL,
	[RequestXml] [xml] NOT NULL,
	[JobQueueStatusId] [int] NOT NULL,
	[CurrentRetry] [int] NOT NULL,
	[AutoRetryCount] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JobQueueStatus]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobQueueStatus](
	[JobQueueStatusId] [int] NOT NULL,
	[Description] [varchar](50) NULL,
 CONSTRAINT [PK_JobStatus] PRIMARY KEY CLUSTERED 
(
	[JobQueueStatusId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JobSiteCountries]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JobSiteCountries](
	[JobSiteCountryId] [int] IDENTITY(1,1) NOT NULL,
	[JobSiteCountry] [varchar](100) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[JobSiteCountryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Lookups]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Lookups](
	[LookupId] [int] IDENTITY(1,1) NOT NULL,
	[LookupName] [varchar](50) NOT NULL,
	[FilterExpression] [varchar](max) NULL,
	[IsDynamic] [bit] NOT NULL,
	[ParentLookupId] [int] NULL,
 CONSTRAINT [PK_Lookups] PRIMARY KEY CLUSTERED 
(
	[LookupId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LookupValues]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LookupValues](
	[LookupValueId] [int] IDENTITY(1,1) NOT NULL,
	[LookupId] [int] NOT NULL,
	[InputText] [varchar](1024) NOT NULL,
	[DisplayValue] [varchar](2048) NULL,
	[DisplayOrder] [smallint] NOT NULL,
	[IsDefault] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_LookupValues] PRIMARY KEY CLUSTERED 
(
	[LookupValueId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LostTime]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LostTime](
	[LostTimeID] [uniqueidentifier] NOT NULL,
	[IncidentID] [uniqueidentifier] NOT NULL,
	[TFF] [bit] NOT NULL,
	[CSI] [bit] NOT NULL,
	[Hours] [float] NULL,
	[Comments] [varchar](7000) NULL,
PRIMARY KEY CLUSTERED 
(
	[LostTimeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MaterialTradeInfos]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MaterialTradeInfos](
	[MaterialTradeInfoId] [int] IDENTITY(1,1) NOT NULL,
	[PartNum] [varchar](30) NOT NULL,
	[Plant] [varchar](4) NOT NULL,
	[ECCNNo] [varchar](30) NULL,
	[HTSUSNo] [varchar](30) NULL,
	[ScheduleBNo] [varchar](30) NULL,
 CONSTRAINT [PK_MaterialTradeInfo] PRIMARY KEY CLUSTERED 
(
	[MaterialTradeInfoId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MCGroups]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MCGroups](
	[GroupId] [uniqueidentifier] NOT NULL,
	[GroupName] [varchar](50) NOT NULL,
	[GroupDesc] [varchar](255) NULL,
 CONSTRAINT [PK_MCGroups] PRIMARY KEY CLUSTERED 
(
	[GroupId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MCRoles]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MCRoles](
	[RoleId] [int] NOT NULL,
	[RoleName] [varchar](50) NOT NULL,
	[RoleDesc] [varchar](255) NULL,
	[Application] [varchar](50) NULL,
	[IsBranchPlant] [bit] NOT NULL,
	[RoleGroup] [varchar](50) NULL,
	[RoleGroupDisplayName] [varchar](100) NULL,
	[Level] [int] NULL,
	[Active] [bit] NULL,
 CONSTRAINT [PK_MCRoles] PRIMARY KEY CLUSTERED 
(
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MudBases]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MudBases](
	[MudBaseID] [uniqueidentifier] NOT NULL,
	[MudBase] [varchar](30) NULL,
PRIMARY KEY CLUSTERED 
(
	[MudBaseID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MudDataRm]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MudDataRm](
	[MudDataRmID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[RmAtTempStart] [float] NULL,
	[RmAtTempEnd] [float] NULL,
	[RmAtTempMin] [float] NULL,
	[RmAtTempMax] [float] NULL,
	[RmAtTempUnits] [varchar](10) NULL,
	[RmfAtTempStart] [float] NULL,
	[RmfAtTempEnd] [float] NULL,
	[RmfAtTempMin] [float] NULL,
	[RmfAtTempMax] [float] NULL,
	[RmfAtTempUnits] [varchar](10) NULL,
	[RmcAtTempStart] [float] NULL,
	[RmcAtTempEnd] [float] NULL,
	[RmcAtTempMin] [float] NULL,
	[RmcAtTempMax] [float] NULL,
	[RmcAtTempUnits] [varchar](10) NULL,
	[RmAtMaxToolTempStart] [float] NULL,
	[RmAtMaxToolTempEnd] [float] NULL,
	[RmAtMaxToolTempMin] [float] NULL,
	[RmAtMaxToolTempMax] [float] NULL,
	[RmAtMaxToolTempUnits] [varchar](10) NULL,
	[RmStart] [float] NULL,
	[RmEnd] [float] NULL,
	[RmMin] [float] NULL,
	[RmMax] [float] NULL,
	[RmUnits] [varchar](10) NULL,
	[RmfStart] [float] NULL,
	[RmfEnd] [float] NULL,
	[RmfMin] [float] NULL,
	[RmfMax] [float] NULL,
	[RmfUnits] [varchar](10) NULL,
	[RmcStart] [float] NULL,
	[RmcEnd] [float] NULL,
	[RmcMin] [float] NULL,
	[RmcMax] [float] NULL,
	[RmcUnits] [varchar](10) NULL,
	[RmToolStart] [float] NULL,
	[RmToolEnd] [float] NULL,
	[RmToolMin] [float] NULL,
	[RmToolMax] [float] NULL,
	[RmToolUnits] [varchar](10) NULL,
 CONSTRAINT [PK_MudDataRm] PRIMARY KEY CLUSTERED 
(
	[MudDataRmID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MudRecs]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MudRecs](
	[MudRecID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[Type] [varchar](50) NULL,
	[Weight] [varchar](20) NULL,
	[WeightUOM] [varchar](10) NULL,
	[DepthFrom] [varchar](20) NULL,
	[DepthFromUOM] [varchar](10) NULL,
	[DepthTo] [varchar](20) NULL,
	[DepthToUOM] [varchar](10) NULL,
PRIMARY KEY CLUSTERED 
(
	[MudRecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MyAdvisorProcedureLogs]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MyAdvisorProcedureLogs](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ProcedureName] [varchar](150) NOT NULL,
	[Activity] [varchar](500) NOT NULL,
	[StartDateTime] [datetime] NOT NULL,
	[EndDateTime] [datetime] NOT NULL,
	[RunId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_MyAdvisorProcedureLogs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MyAdvisorUtilization]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MyAdvisorUtilization](
	[Instance] [sql_variant] NULL,
	[Max Server Memory] [sql_variant] NULL,
	[SQL Server Memory Usage (MB)] [bigint] NULL,
	[Physical Memory (MB)] [bigint] NULL,
	[Available Memory (MB)] [bigint] NULL,
	[System Memory State] [nvarchar](256) NULL,
	[Page Life Expectancy] [bigint] NULL,
	[SQLProcessUtilization30] [int] NULL,
	[SQLProcessUtilization15] [int] NULL,
	[SQLProcessUtilization10] [int] NULL,
	[SQLProcessUtilization5] [int] NULL,
	[Data Sample Timestamp] [datetime] NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OneViewCBMRunAssetMappings]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OneViewCBMRunAssetMappings](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[RunId] [uniqueidentifier] NOT NULL,
	[CbmMonitorId] [int] NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[DurationInMinutes] [float] NOT NULL,
	[ImportDate] [datetime] NOT NULL,
	[ParentFixedAssetId] [uniqueidentifier] NULL,
	[TopLevelFixedAssetId] [uniqueidentifier] NULL,
	[CreatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_OneViewCBMRunAssetMappings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PartClassifications]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PartClassifications](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PartClassification] [varchar](1000) NULL,
	[Level1] [varchar](200) NULL,
	[Level2] [varchar](200) NULL,
	[Level3] [varchar](200) NULL,
	[Level4] [varchar](200) NULL,
	[Level5] [varchar](200) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PartDescPFTConfigs_UAT_TO_PROD]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PartDescPFTConfigs_UAT_TO_PROD](
	[PartDescPFTConfigID] [uniqueidentifier] NOT NULL,
	[ItemNum] [varchar](30) NOT NULL,
	[PFTConfigID] [uniqueidentifier] NOT NULL,
	[PFTType] [tinyint] NOT NULL,
	[CreatedOn] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PartDescPFTConfigsObsolete]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PartDescPFTConfigsObsolete](
	[partdescpftconfigid] [uniqueidentifier] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PassThru]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PassThru](
	[PassThruId] [int] IDENTITY(1,1) NOT NULL,
	[SessionId] [varchar](255) NOT NULL,
	[UserName] [varchar](255) NOT NULL,
	[ClientIP] [varchar](255) NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[CurrentBaseCode] [varchar](25) NULL,
	[CurrentBaseName] [varchar](30) NULL,
 CONSTRAINT [PK_PassThru] PRIMARY KEY CLUSTERED 
(
	[PassThruId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTBlobObjects_backup_072021]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTBlobObjects_backup_072021](
	[BlobObjectId] [int] IDENTITY(1,1) NOT NULL,
	[ObjectId] [int] NOT NULL,
	[BlobContent] [varbinary](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTBlobObjects_UAT_TO_PROD]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTBlobObjects_UAT_TO_PROD](
	[BlobObjectId] [int] IDENTITY(1,1) NOT NULL,
	[ObjectId] [int] NOT NULL,
	[BlobContent] [varbinary](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTConfig_UAT_TO_PROD]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTConfig_UAT_TO_PROD](
	[PFTConfigId] [uniqueidentifier] NOT NULL,
	[ProcessName] [varchar](1024) NOT NULL,
	[ProcessDesc] [varchar](1024) NULL,
	[IsDynamic] [tinyint] NOT NULL,
	[DateAdded] [datetime] NULL,
	[IsObsolete] [tinyint] NOT NULL,
	[PFTObjectId] [int] NULL,
	[ObjectNumber] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTConfigFormPFT]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTConfigFormPFT](
	[PFTConfigFormPFTId] [uniqueidentifier] NULL,
	[PFTConfigFormId] [uniqueidentifier] NOT NULL,
	[ObjectNumber] [int] NOT NULL,
	[PFTObjectId] [int] NOT NULL,
	[DateAdded] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTConfigFormPFT_UAT_TO_PROD]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTConfigFormPFT_UAT_TO_PROD](
	[PFTConfigFormPFTId] [uniqueidentifier] NULL,
	[PFTConfigFormId] [uniqueidentifier] NOT NULL,
	[ObjectNumber] [int] NOT NULL,
	[PFTObjectId] [int] NOT NULL,
	[DateAdded] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTConfigFormSeq]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTConfigFormSeq](
	[PFTConfigSeqId] [uniqueidentifier] NULL,
	[PFTConfigFormId] [uniqueidentifier] NOT NULL,
	[SequenceNumber] [int] NOT NULL,
	[SequenceName] [varchar](1024) NOT NULL,
	[SequenceDesc] [varchar](8000) NULL,
	[FormFieldType] [int] NOT NULL,
	[NumberType] [varchar](50) NULL,
	[StratCriteria] [varchar](50) NULL,
	[EndCriteria] [varchar](50) NULL,
	[UOM] [int] NULL,
	[IsRequired] [tinyint] NULL,
	[TextCriteria3] [varchar](50) NULL,
	[TextCriteria4] [varchar](50) NULL,
	[ObjectId] [int] NULL,
	[DateAdded] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTConfigSeq_13052021]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTConfigSeq_13052021](
	[PFTConfigSeqId] [uniqueidentifier] NOT NULL,
	[PFTConfigId] [uniqueidentifier] NOT NULL,
	[Seq] [int] NOT NULL,
	[SeqName] [varchar](1024) NOT NULL,
	[PFTLabId] [uniqueidentifier] NULL,
	[SeqDesc] [varchar](8000) NULL,
	[IsTestDataReq] [tinyint] NULL,
	[SendEmailOnPass] [varchar](1024) NULL,
	[DateAdded] [datetime] NULL,
	[IsCommentRequired] [tinyint] NULL,
	[IsCommentNumeric] [tinyint] NULL,
	[EstimatedHours] [decimal](18, 2) NULL,
	[IsLabourHrRequired] [tinyint] NULL,
	[ObjectId] [int] NULL,
	[isSupervisorSignOff] [tinyint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTConfigSeq_UAT_TO_PROD]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTConfigSeq_UAT_TO_PROD](
	[PFTConfigSeqId] [uniqueidentifier] NOT NULL,
	[PFTConfigId] [uniqueidentifier] NOT NULL,
	[Seq] [int] NOT NULL,
	[SeqName] [varchar](1024) NOT NULL,
	[PFTLabId] [uniqueidentifier] NULL,
	[SeqDesc] [varchar](8000) NULL,
	[IsTestDataReq] [tinyint] NULL,
	[SendEmailOnPass] [varchar](1024) NULL,
	[DateAdded] [datetime] NULL,
	[IsCommentRequired] [tinyint] NULL,
	[IsCommentNumeric] [tinyint] NULL,
	[EstimatedHours] [decimal](18, 2) NULL,
	[IsLabourHrRequired] [tinyint] NULL,
	[ObjectId] [int] NULL,
	[isSupervisorSignOff] [tinyint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTConfigSequenceObjects_13052021]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTConfigSequenceObjects_13052021](
	[PFTConfigSequenceObjectId] [int] IDENTITY(1,1) NOT NULL,
	[PFTConfigSequenceId] [uniqueidentifier] NULL,
	[PFTObjectId] [int] NULL,
	[DateAdded] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTConfigSequenceObjects_UAT_TO_PROD]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTConfigSequenceObjects_UAT_TO_PROD](
	[PFTConfigSequenceObjectId] [int] IDENTITY(1,1) NOT NULL,
	[PFTConfigSequenceId] [uniqueidentifier] NULL,
	[PFTObjectId] [int] NULL,
	[DateAdded] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTObjectFormFieldList]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTObjectFormFieldList](
	[FormFieldListId] [int] IDENTITY(1,1) NOT NULL,
	[ObjectId] [int] NOT NULL,
	[ListSeqNo] [int] NOT NULL,
	[ListValue] [varchar](50) NOT NULL,
	[CreatedBy] [varchar](20) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_PFTObjectFormFieldList] PRIMARY KEY CLUSTERED 
(
	[FormFieldListId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 100) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTObjectFormFieldList_backup_072021]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTObjectFormFieldList_backup_072021](
	[FormFieldListId] [int] IDENTITY(1,1) NOT NULL,
	[ObjectId] [int] NOT NULL,
	[ListSeqNo] [int] NOT NULL,
	[ListValue] [varchar](50) NOT NULL,
	[CreatedBy] [varchar](20) NOT NULL,
	[CreatedOn] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTObjectFormFieldList_UAT_TO_PROD]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTObjectFormFieldList_UAT_TO_PROD](
	[FormFieldListId] [int] IDENTITY(1,1) NOT NULL,
	[ObjectId] [int] NOT NULL,
	[ListSeqNo] [int] NOT NULL,
	[ListValue] [varchar](50) NOT NULL,
	[CreatedBy] [varchar](20) NOT NULL,
	[CreatedOn] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTObjectMappings_UAT_TO_PROD]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTObjectMappings_UAT_TO_PROD](
	[ObjectMappingId] [int] IDENTITY(1,1) NOT NULL,
	[ParentId] [int] NOT NULL,
	[ObjectId] [int] NOT NULL,
	[SequenceNumber] [int] NOT NULL,
	[CreatedBy] [varchar](20) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL,
	[ParentIdNew] [int] NULL,
	[ObjectIdNew] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTObjects_20210521]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTObjects_20210521](
	[ObjectId] [int] IDENTITY(1,1) NOT NULL,
	[ObjectNumber] [int] NOT NULL,
	[Revision] [int] NOT NULL,
	[Type] [int] NOT NULL,
	[Name] [varchar](1024) NULL,
	[Description] [varchar](8000) NULL,
	[ProductLineId] [int] NOT NULL,
	[State] [int] NOT NULL,
	[Field1] [varchar](100) NULL,
	[Field2] [varchar](100) NULL,
	[Field3] [varchar](100) NULL,
	[Field4] [varchar](100) NULL,
	[Field5] [varchar](100) NULL,
	[CreatedBy] [varchar](20) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL,
	[ReasonForChange] [varchar](4000) NULL,
	[Field6] [varchar](100) NULL,
	[Field7] [varchar](100) NULL,
	[Field8] [varchar](100) NULL,
	[Field9] [varchar](100) NULL,
	[Field10] [varchar](100) NULL,
	[Field11] [varchar](100) NULL,
	[Field12] [varchar](100) NULL,
	[Field13] [varchar](100) NULL,
	[Field14] [varchar](100) NULL,
	[Field15] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTObjects_backup_072021]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTObjects_backup_072021](
	[ObjectId] [int] IDENTITY(1,1) NOT NULL,
	[ObjectNumber] [int] NOT NULL,
	[Revision] [int] NOT NULL,
	[Type] [int] NOT NULL,
	[Name] [varchar](1024) NULL,
	[Description] [varchar](8000) NULL,
	[ProductLineId] [int] NOT NULL,
	[State] [int] NOT NULL,
	[Field1] [varchar](100) NULL,
	[Field2] [varchar](100) NULL,
	[Field3] [varchar](100) NULL,
	[Field4] [varchar](100) NULL,
	[Field5] [varchar](100) NULL,
	[CreatedBy] [varchar](20) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL,
	[ReasonForChange] [varchar](4000) NULL,
	[Field6] [varchar](100) NULL,
	[Field7] [varchar](100) NULL,
	[Field8] [varchar](100) NULL,
	[Field9] [varchar](100) NULL,
	[Field10] [varchar](100) NULL,
	[Field11] [varchar](100) NULL,
	[Field12] [varchar](100) NULL,
	[Field13] [varchar](100) NULL,
	[Field14] [varchar](100) NULL,
	[Field15] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTObjects_UAT_TO_PROD]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTObjects_UAT_TO_PROD](
	[ObjectId] [int] NOT NULL,
	[ObjectNumber] [int] NOT NULL,
	[Revision] [int] NOT NULL,
	[Type] [int] NOT NULL,
	[Name] [varchar](1024) NULL,
	[Description] [varchar](8000) NULL,
	[ProductLineId] [int] NOT NULL,
	[State] [int] NOT NULL,
	[Field1] [varchar](100) NULL,
	[Field2] [varchar](100) NULL,
	[Field3] [varchar](100) NULL,
	[Field4] [varchar](100) NULL,
	[Field5] [varchar](100) NULL,
	[CreatedBy] [varchar](20) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL,
	[ReasonForChange] [varchar](4000) NULL,
	[Field6] [varchar](100) NULL,
	[Field7] [varchar](100) NULL,
	[Field8] [varchar](100) NULL,
	[Field9] [varchar](100) NULL,
	[Field10] [varchar](100) NULL,
	[Field11] [varchar](100) NULL,
	[Field12] [varchar](100) NULL,
	[Field13] [varchar](100) NULL,
	[Field14] [varchar](100) NULL,
	[Field15] [varchar](100) NULL,
	[ObjectNumberNew] [int] NULL,
	[ObjectIdNew] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTTransfer]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTTransfer](
	[OldPFTObjectId] [int] NULL,
	[NewPFTObjectId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTWOForms_Delete_30920203]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTWOForms_Delete_30920203](
	[PFTWOFormId] [uniqueidentifier] NOT NULL,
	[PFTWOId] [uniqueidentifier] NOT NULL,
	[PFTConfigId] [uniqueidentifier] NOT NULL,
	[ObjectId] [int] NULL,
	[Result] [varchar](1) NULL,
	[UserId] [int] NOT NULL,
	[DateAdded] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTWOForms_Delete_310820203]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTWOForms_Delete_310820203](
	[PFTWOId] [uniqueidentifier] NULL,
	[ObjectNumber] [int] NULL,
	[PFTWOFormId] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PFTWOLaborHour]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PFTWOLaborHour](
	[ID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[PFTWOID] [uniqueidentifier] NULL,
	[WorkCenter] [varchar](30) NULL,
	[JDEWorkorderNum] [varchar](30) NULL,
	[StartDateTime] [datetime] NULL,
	[StopDateTime] [datetime] NULL,
	[UserID] [int] NULL,
	[JDEState] [bit] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PftWoSeqCommentBackup]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PftWoSeqCommentBackup](
	[PFTWOSeqId] [uniqueidentifier] NOT NULL,
	[Comment] [text] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PMDispositionItems]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PMDispositionItems](
	[AssetRepairTrackId] [uniqueidentifier] NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[PFTConfigId] [uniqueidentifier] NOT NULL,
	[MeterReadingTypeId] [int] NOT NULL,
	[TriggerValue] [int] NOT NULL,
	[MeterReadingValue] [varchar](20) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ObjectNumber] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PMDispositions]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PMDispositions](
	[PMDispositionId] [uniqueidentifier] NOT NULL,
	[AssetRepairTrackId] [uniqueidentifier] NOT NULL,
	[PFTConfigId] [uniqueidentifier] NOT NULL,
	[Active] [bit] NOT NULL,
	[DispositionedById] [int] NULL,
	[DispositionOption] [int] NULL,
	[DispositionedOn] [datetime] NULL,
	[CreatedBy] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PMFix]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PMFix](
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[CBMMonitorId] [int] NOT NULL,
	[PFTWOId] [uniqueidentifier] NOT NULL,
	[Correct Meter Reading Date] [varchar](10) NULL,
	[Actual Date in DB] [varchar](10) NULL,
	[Has Issue] [int] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PowerConfigs]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PowerConfigs](
	[PowerConfigID] [uniqueidentifier] NOT NULL,
	[PowerConfig] [varchar](50) NULL,
 CONSTRAINT [PK_PowerConfigs] PRIMARY KEY CLUSTERED 
(
	[PowerConfigID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ProductLineToolTypeMappings]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProductLineToolTypeMappings](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProductLine] [varchar](250) NULL,
	[ToolType] [nvarchar](100) NULL,
 CONSTRAINT [PK_ProductLineToolTypeMappings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PulseCountData]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PulseCountData](
	[PulseCountDataID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NULL,
	[PulseCountEnd] [varchar](30) NULL,
	[Sensor] [varchar](50) NULL,
	[SerialNumber] [varchar](50) NULL,
	[OrificeSize] [float] NULL,
	[OrificeSizeUOM] [varchar](10) NULL,
	[PoppetSize] [float] NULL,
	[PoppetSizeUOM] [varchar](5) NULL,
	[EOR] [varchar](50) NULL,
	[EORUOM] [varchar](5) NULL,
	[TotalNumberOfPulses] [float] NULL,
	[ToolStringID] [uniqueidentifier] NULL,
	[FixedAssetID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_PulseCountData] PRIMARY KEY CLUSTERED 
(
	[PulseCountDataID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Pumps]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Pumps](
	[PumpID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NULL,
	[Model] [varchar](50) NULL,
	[Type] [varchar](50) NULL,
	[StrokeLength] [float] NULL,
	[StrokeLengthUOM] [varchar](10) NULL,
	[LinerSize] [float] NULL,
	[LinerSizeUOM] [varchar](10) NULL,
	[DampenerCharge] [float] NULL,
	[DampenerChargeUOM] [varchar](10) NULL,
	[DampenerType] [varchar](50) NULL,
	[StrokeVolume] [float] NULL,
	[StrokeVolumeUOM] [varchar](10) NULL,
	[Efficiency] [varchar](50) NULL,
	[Manufacturer] [varchar](50) NULL,
	[DampenerManufacturer] [varchar](50) NULL,
	[PressureRating] [varchar](20) NULL,
	[PressureRatingUOM] [varchar](10) NULL,
 CONSTRAINT [PK_Pumps] PRIMARY KEY CLUSTERED 
(
	[PumpID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RelCustomers]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RelCustomers](
	[RelCustomerID] [uniqueidentifier] NOT NULL,
	[CustomerName] [varchar](50) NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_tblCompanies] PRIMARY KEY CLUSTERED 
(
	[RelCustomerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RelHomeGlobalTotals]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RelHomeGlobalTotals](
	[RelHomeGlobalTotalID] [uniqueidentifier] NOT NULL,
	[RunType] [varchar](12) NULL,
	[TotalOperHrs] [decimal](12, 2) NULL,
	[TotalCircHrs] [decimal](12, 2) NULL,
	[RunCnt] [int] NULL,
	[CI] [int] NULL,
	[TFF] [int] NULL,
	[TotalFootage] [decimal](12, 2) NULL,
 CONSTRAINT [PK_RelHomeGlobalTotals] PRIMARY KEY CLUSTERED 
(
	[RelHomeGlobalTotalID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RelHomeMaxValues]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RelHomeMaxValues](
	[RelHomeMaxValueID] [uniqueidentifier] NOT NULL,
	[RunType] [varchar](20) NULL,
	[MaxTempID] [uniqueidentifier] NULL,
	[MaxTemp] [decimal](10, 2) NULL,
	[MaxOperPressureID] [uniqueidentifier] NULL,
	[MaxOperPressure] [decimal](10, 2) NULL,
	[MaxObservedPressureID] [uniqueidentifier] NULL,
	[MaxObservedPressure] [decimal](10, 2) NULL,
	[MaxDogLegID] [uniqueidentifier] NULL,
	[MaxDogLeg] [decimal](10, 2) NULL,
	[MaxOperHrsID] [uniqueidentifier] NULL,
	[MaxOperHrs] [decimal](10, 2) NULL,
	[MaxIncID] [uniqueidentifier] NULL,
	[MaxInc] [decimal](10, 2) NULL,
	[MaxDistanceID] [uniqueidentifier] NULL,
	[MaxDistance] [decimal](10, 2) NULL,
	[LastUpdate] [datetime] NOT NULL,
 CONSTRAINT [PK_RelHomeMaxValues] PRIMARY KEY CLUSTERED 
(
	[RelHomeMaxValueID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RelHomeMTBF]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RelHomeMTBF](
	[RelHomeMTBFID] [uniqueidentifier] NOT NULL,
	[RunType] [varchar](20) NULL,
	[RunDate] [smalldatetime] NULL,
	[RunYear] [int] NULL,
	[RunMonth] [tinyint] NULL,
	[NumberOfRuns] [int] NULL,
	[MDDistance] [int] NULL,
	[TotalOperHrs] [int] NULL,
	[TotalCircHrs] [int] NULL,
	[TotalDrillHrs] [int] NULL,
	[TFF] [smallint] NULL,
	[CI] [smallint] NULL,
	[MTBF_OperHrs] [int] NULL,
	[MTBF_CircHrs] [int] NULL,
	[MTBF_DrillHrs] [int] NULL,
	[MovingAvg_OperHrs] [int] NULL,
	[MovingAvg_CircHrs] [int] NULL,
	[MovingAvg_DrillHrs] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[RelHomeMTBFID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RelHomeRegionalTotals]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RelHomeRegionalTotals](
	[RelHomeRegionTotalID] [uniqueidentifier] NOT NULL,
	[RunType] [varchar](20) NULL,
	[RegionDesc] [varchar](50) NULL,
	[RunCnt] [int] NULL,
	[OperHrs] [decimal](12, 2) NULL,
	[CircHrs] [decimal](12, 2) NULL,
 CONSTRAINT [PK_RelHomeRegionalTotals] PRIMARY KEY CLUSTERED 
(
	[RelHomeRegionTotalID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RelUserDistrictMap]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RelUserDistrictMap](
	[RelUserDistrictMapID] [uniqueidentifier] NOT NULL,
	[UserID] [int] NOT NULL,
	[District] [varchar](38) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[RelUserDistrictMapID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RelUserSettings]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RelUserSettings](
	[RelUserSettingID] [uniqueidentifier] NOT NULL,
	[UserID] [int] NOT NULL,
	[RunType] [varchar](20) NOT NULL,
	[HEL_LWD] [tinyint] NOT NULL,
	[HEL_EM] [tinyint] NOT NULL,
	[EM] [tinyint] NOT NULL,
	[HYPERPULSE] [tinyint] NOT NULL,
	[RSS] [tinyint] NOT NULL,
	[BECFIELD] [tinyint] NOT NULL,
	[DD] [tinyint] NOT NULL,
	[GEOLINK] [tinyint] NOT NULL,
	[TENSOR] [tinyint] NOT NULL,
	[StatusGroup] [varchar](20) NULL,
	[IsCoordinator] [tinyint] NOT NULL,
	[FieldHand] [tinyint] NOT NULL,
	[DistrictSupport] [tinyint] NOT NULL,
	[SURVEY] [tinyint] NOT NULL,
	[LocationType] [varchar](10) NULL,
	[Location] [varchar](50) NULL,
	[isDeleted] [tinyint] NOT NULL,
 CONSTRAINT [PK_RelUserSettings_34749F6D] PRIMARY KEY CLUSTERED 
(
	[RelUserSettingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[restricted_parts]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[restricted_parts](
	[ITM_NO_SHRT] [float] NULL,
	[CNTRY_CD] [nvarchar](255) NULL,
	[US_EXPT_CMDTY_CTRL_NO] [nvarchar](255) NULL,
	[HRMNZD_TRF_BEG_DGTS] [float] NULL,
	[HRMNZD_TRF_END_DGTS] [float] NULL,
	[HTS_ECCN_DESC] [nvarchar](255) NULL,
	[PGM_ID] [nvarchar](255) NULL,
	[USR_ID] [nvarchar](255) NULL,
	[WRK_STA_ID] [nvarchar](255) NULL,
	[SRC_DT_UPD] [float] NULL,
	[DT_UPD] [datetime] NULL,
	[SRC_TM_LST_UPD] [float] NULL,
	[TM_LST_UPD] [datetime] NULL,
	[EDI_SUCC_PROC_FLAG] [nvarchar](255) NULL,
	[CUST_UOM1] [nvarchar](255) NULL,
	[CUST_UOM2] [nvarchar](255) NULL,
	[CREAT_DTTM] [datetime] NULL,
	[CREAT_USR_ID] [nvarchar](255) NULL,
	[LST_MOD_DTTM] [datetime] NULL,
	[LST_MOD_USR_ID] [nvarchar](255) NULL,
	[LST_CAPXUSER] [nvarchar](255) NULL,
	[LST_CAPXTIMESTAMP] [float] NULL,
	[LST_CAPXACTION] [nvarchar](255) NULL,
	[LST_CAPXRRN] [float] NULL,
	[ACTV_IND] [nvarchar](255) NULL,
	[RestrictedStatus] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RibbonCommand]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RibbonCommand](
	[RibbonCommandId] [int] IDENTITY(1,1) NOT NULL,
	[CommandName] [varchar](255) NOT NULL,
	[WorkspaceName] [varchar](255) NULL,
	[FunctionName] [varchar](255) NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_RibbonCommand] PRIMARY KEY CLUSTERED 
(
	[RibbonCommandId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RibbonCommandGroup]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RibbonCommandGroup](
	[RibbonCommandId] [int] NOT NULL,
	[GroupId] [int] NOT NULL,
 CONSTRAINT [PK_RibbonCommandGroup] PRIMARY KEY CLUSTERED 
(
	[RibbonCommandId] ASC,
	[GroupId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RigActivities]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RigActivities](
	[RigActivityID] [uniqueidentifier] NOT NULL,
	[DailyID] [uniqueidentifier] NOT NULL,
	[StartActivity] [datetime] NULL,
	[EndActivity] [datetime] NULL,
	[Activity] [varchar](1000) NULL,
PRIMARY KEY CLUSTERED 
(
	[RigActivityID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RigViewJobs]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RigViewJobs](
	[RigViewJobId] [int] IDENTITY(1,1) NOT NULL,
	[JobNumber] [varchar](50) NOT NULL,
	[CurrentWellName] [varchar](50) NULL,
	[Latitude] [decimal](18, 4) NULL,
	[Longitude] [decimal](18, 4) NULL,
	[LastUpdate] [datetime] NULL,
	[RunNumber] [varchar](50) NULL,
	[MD] [decimal](18, 4) NULL,
	[MDUOM] [varchar](10) NULL,
	[TVD] [decimal](18, 4) NULL,
	[TVDUOM] [varchar](10) NULL,
	[MaxTemperature] [decimal](18, 4) NULL,
	[MaxTempUOM] [varchar](1) NULL,
	[CoreXmlPath] [varchar](4000) NULL,
	[IncidentCount] [int] NULL,
	[LastIncidentDate] [datetime] NULL,
 CONSTRAINT [PK_RigViewJobs] PRIMARY KEY CLUSTERED 
(
	[RigViewJobId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RMAcceptedFieldSymptoms]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RMAcceptedFieldSymptoms](
	[RMAcceptedFieldSymptomID] [uniqueidentifier] NOT NULL,
	[AcceptedFieldSymptom] [varchar](100) NOT NULL,
	[ServiceType] [varchar](15) NULL,
 CONSTRAINT [PK_RMAcceptedFieldSymptoms] PRIMARY KEY CLUSTERED 
(
	[RMAcceptedFieldSymptomID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RMAnalysisCommentTypes]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RMAnalysisCommentTypes](
	[CommentTypeID] [int] IDENTITY(1,1) NOT NULL,
	[CommentType] [varchar](100) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[CommentTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RMAnalysisStatusCodes]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RMAnalysisStatusCodes](
	[RMStatusCodeID] [int] NOT NULL,
	[RMStatusCode] [varchar](50) NOT NULL,
	[RMStatusDesc] [varchar](75) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[RMStatusCodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RSSConnectTimes]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RSSConnectTimes](
	[RSSConnectTimeID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[ToolStringSN] [varchar](50) NULL,
	[BatteryType] [varchar](50) NULL,
	[SerialNumber] [varchar](50) NULL,
	[BatteryInsert] [datetime] NULL,
	[BatteryInitialized] [datetime] NULL,
	[ToolRead] [datetime] NULL,
	[ConnectToHEL] [datetime] NULL,
	[ToolStringID] [uniqueidentifier] NULL,
	[FixedAssetID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_tblRSSConnectTimes] PRIMARY KEY CLUSTERED 
(
	[RSSConnectTimeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RunActivity]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RunActivity](
	[RunActivityID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[MDMin] [float] NULL,
	[MDMinUOM] [varchar](5) NULL,
	[MDMax] [float] NULL,
	[MDMaxUOM] [varchar](5) NULL,
	[TVDMin] [float] NULL,
	[TVDMinUOM] [varchar](5) NULL,
	[TVDMax] [float] NULL,
	[TVDMaxUOM] [varchar](5) NULL,
	[DrillOutofShoe] [bit] NULL,
	[MaxBuildRate] [float] NULL,
	[MaxBuildRateUOM] [varchar](10) NULL,
	[MaxDogLeg] [float] NULL,
	[MaxDogLegUOM] [varchar](10) NULL,
	[AvgROP_DD] [float] NULL,
	[AvgROP_DDUOM] [varchar](5) NULL,
	[AvgROP_RSS] [float] NULL,
	[AvgROP_RSSUOM] [varchar](5) NULL,
	[GammaRayScaleFactorK1] [float] NULL,
	[BouyancyFactor] [float] NULL,
	[WeightInAir] [float] NULL,
	[WeightBouyancyFactorApplied] [float] NULL,
	[MinStringID] [float] NULL,
	[EstimatedMudWeight] [float] NULL,
	[PMTT] [float] NULL,
	[PMTTUOM] [varchar](5) NULL,
 CONSTRAINT [PK_RunActivity] PRIMARY KEY CLUSTERED 
(
	[RunActivityID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RunBhaJarDetails]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RunBhaJarDetails](
	[RunBhaJarDetailID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[SerialNumber] [varchar](50) NULL,
	[JarHitsRun] [int] NULL,
	[NonMag] [bit] NULL,
	[OuterDTop] [float] NULL,
	[OuterDTopUOM] [varchar](5) NULL,
	[OuterDBottom] [float] NULL,
	[OuterDBottomUOM] [varchar](5) NULL,
	[MaxOuterD] [float] NULL,
	[MaxOuterDUOM] [varchar](5) NULL,
	[InnerD] [float] NULL,
	[InnerDUOM] [varchar](5) NULL,
	[FishNeck] [float] NULL,
	[FishNeckUOM] [varchar](5) NULL,
	[Length] [float] NULL,
	[LengthUOM] [varchar](5) NULL,
	[JarType] [varchar](50) NULL,
	[JarForceUp] [float] NULL,
	[JarForceUpUOM] [varchar](10) NULL,
	[JarForceDown] [float] NULL,
	[JarForceDownUOM] [varchar](10) NULL,
	[JarDelay] [float] NULL,
	[InitialJarHits] [float] NULL,
	[TopConnectionType] [varchar](30) NULL,
	[BottomConnectionType] [varchar](30) NULL,
 CONSTRAINT [PK_RunBhaJarDetails] PRIMARY KEY CLUSTERED 
(
	[RunBhaJarDetailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RunComments]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RunComments](
	[RunCommentID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[DD_ReasonForPOOH] [varchar](2000) NULL,
	[DD_MotorEvaluationComments] [varchar](2000) NULL,
	[DD_JarEvaluationComments] [varchar](2000) NULL,
	[DD_SideTrackingProcedureComments] [varchar](2000) NULL,
	[DD_RunBHASummary] [varchar](2000) NULL,
	[DD_SurveyType] [varchar](2000) NULL,
	[DD_FormationCharacteristics] [varchar](2000) NULL,
	[RSS_ReasonForPOOH] [varchar](2000) NULL,
	[RSS_Incident] [varchar](2000) NULL,
	[RSS_RunBHASummary] [varchar](2000) NULL,
 CONSTRAINT [PK_RunComments] PRIMARY KEY CLUSTERED 
(
	[RunID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RunConnectTimes]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RunConnectTimes](
	[RunConnectTimeID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[ToolStringID] [uniqueidentifier] NULL,
	[FixedAssetID] [uniqueidentifier] NULL,
	[PartTypeName] [varchar](50) NULL,
	[SerialNumber] [varchar](50) NULL,
	[ConnectTime] [datetime] NULL,
	[DisconnectTime] [datetime] NULL,
	[ElapsedTime] [varchar](15) NULL,
 CONSTRAINT [PK_RunConnectTimes] PRIMARY KEY CLUSTERED 
(
	[RunConnectTimeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RunDrilling]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RunDrilling](
	[RunDrillingID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[SurfaceTorqueStart] [float] NULL,
	[SurfaceTorqueEnd] [float] NULL,
	[SurfaceTorqueMin] [float] NULL,
	[SurfaceTorqueMax] [float] NULL,
	[SurfaceTorqueUOM] [varchar](10) NULL,
	[SurfaceRPMStart] [float] NULL,
	[SurfaceRPMEnd] [float] NULL,
	[SurfaceRPMMin] [float] NULL,
	[SurfaceRPMMax] [float] NULL,
	[WOBSlidingStart] [float] NULL,
	[WOBSlidingEnd] [float] NULL,
	[WOBSlidingMin] [float] NULL,
	[WOBSlidingMax] [float] NULL,
	[WOBSlidingUOM] [varchar](10) NULL,
	[WOBRotatingStart] [float] NULL,
	[WOBRotatingEnd] [float] NULL,
	[WOBRotatingMin] [float] NULL,
	[WOBRotatingMax] [float] NULL,
	[WOBRotatingUOM] [varchar](10) NULL,
	[StringWeightRotatingStart] [float] NULL,
	[StringWeightRotatingEnd] [float] NULL,
	[StringWeightRotatingMin] [float] NULL,
	[StringWeightRotatingMax] [float] NULL,
	[StringWeightRotatingUOM] [varchar](10) NULL,
	[StringWeightPickupStart] [float] NULL,
	[StringWeightPickupEnd] [float] NULL,
	[StringWeightPickupMin] [float] NULL,
	[StringWeightPickupMax] [float] NULL,
	[StringWeightPickupUOM] [varchar](10) NULL,
	[StringWeightSlackoffStart] [float] NULL,
	[StringWeightSlackoffEnd] [float] NULL,
	[StringWeightSlackoffMin] [float] NULL,
	[StringWeightSlackoffMax] [float] NULL,
	[StringWeightSlackoffUOM] [varchar](10) NULL,
	[RPMMotorStart] [float] NULL,
	[RPMMotorEnd] [float] NULL,
	[RPMMotorMin] [float] NULL,
	[RPMMotorMax] [float] NULL,
	[TorqueReamStart] [float] NULL,
	[TorqueReamEnd] [float] NULL,
	[TorqueReamMin] [float] NULL,
	[TorqueReamMax] [float] NULL,
	[TorqueReamUOM] [varchar](10) NULL,
 CONSTRAINT [PK_RunDrilling] PRIMARY KEY CLUSTERED 
(
	[RunDrillingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SavedColumn]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SavedColumn](
	[SavedColumnId] [uniqueidentifier] NOT NULL,
	[DisplayName] [varchar](100) NOT NULL,
	[UserName] [varchar](256) NOT NULL,
	[PageTitle] [varchar](256) NOT NULL,
	[BaseUrl] [varchar](1024) NOT NULL,
	[IsPublic] [bit] NOT NULL,
	[ColumnData] [xml] NULL,
 CONSTRAINT [PK_SavedColumn] PRIMARY KEY CLUSTERED 
(
	[SavedColumnId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SavedSearch]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SavedSearch](
	[SavedSearchId] [uniqueidentifier] NOT NULL,
	[DisplayName] [varchar](100) NOT NULL,
	[UserName] [varchar](256) NOT NULL,
	[PageTitle] [varchar](256) NOT NULL,
	[BaseUrl] [varchar](1024) NOT NULL,
	[IsPublic] [bit] NOT NULL,
	[LastRunDate] [datetime] NULL,
	[SearchValues] [xml] NULL,
	[ModuleName] [varchar](50) NULL,
 CONSTRAINT [PK_SavedSearch] PRIMARY KEY CLUSTERED 
(
	[SavedSearchId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SavedSearchValue]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SavedSearchValue](
	[SavedSearchValueId] [uniqueidentifier] NOT NULL,
	[SavedSearchId] [uniqueidentifier] NOT NULL,
	[KeyName] [varchar](1024) NOT NULL,
	[KeyValue] [varchar](4000) NOT NULL,
 CONSTRAINT [PK_SavedSearchValue] PRIMARY KEY CLUSTERED 
(
	[SavedSearchValueId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ScorecardTargetLimits]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ScorecardTargetLimits](
	[ScorecardTargetLimitId] [int] IDENTITY(1,1) NOT NULL,
	[ReportFieldId] [int] NOT NULL,
	[Region] [varchar](25) NOT NULL,
	[TargetLimitStart] [varchar](10) NULL,
	[TargetLimitBetween1] [varchar](10) NULL,
	[TargetLimitBetween2] [varchar](10) NULL,
	[TargetLimitEnd] [varchar](10) NULL,
	[TargetLimitExtra] [varchar](10) NULL,
	[ApplyTargetLimitTo] [varchar](10) NULL,
	[CalculateRevenue] [bit] NULL,
	[CalculateActualVsBudget] [bit] NULL,
	[ActualVsBudgetLimitStart] [varchar](10) NULL,
	[ActualVsBudgetLimitBetween1] [varchar](10) NULL,
	[ActualVsBudgetLimitBetween2] [varchar](10) NULL,
	[ActualVsBudgetLimitEnd] [varchar](10) NULL,
	[ActualVsBudgetLimitExtra] [varchar](10) NULL,
 CONSTRAINT [PK_ScorecardConfigs] PRIMARY KEY CLUSTERED 
(
	[ScorecardTargetLimitId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SensorConnectTimes]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SensorConnectTimes](
	[SensorConnectTimeID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[Sensor] [varchar](50) NULL,
	[SerialNumber] [varchar](50) NULL,
	[ConnectTime] [datetime] NULL,
	[DisconnectTime] [datetime] NULL,
	[ElapsedTime] [varchar](15) NULL,
	[ToolStringID] [uniqueidentifier] NULL,
	[FixedAssetID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_tblSensorConnectTimes] PRIMARY KEY CLUSTERED 
(
	[SensorConnectTimeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SensorToBitOffsets]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SensorToBitOffsets](
	[SensorToBitOffsetID] [uniqueidentifier] NOT NULL,
	[RunID] [uniqueidentifier] NOT NULL,
	[PartTypeName] [varchar](50) NULL,
	[SerialNumber] [varchar](50) NULL,
	[Offset] [float] NULL,
	[OffsetUOM] [varchar](10) NULL,
	[Rate] [float] NULL,
	[RateUOM] [varchar](10) NULL,
	[ToolStringID] [uniqueidentifier] NULL,
	[FixedAssetID] [uniqueidentifier] NULL,
PRIMARY KEY CLUSTERED 
(
	[SensorToBitOffsetID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 95) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SOAAuditInformation]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SOAAuditInformation](
	[RequestId] [bigint] IDENTITY(1,1) NOT NULL,
	[AuditTypeId] [int] NULL,
	[AuditGuid] [uniqueidentifier] NULL,
	[RequestXml] [xml] NULL,
	[ResponseXml] [xml] NULL,
	[RequestedBy] [varchar](20) NULL,
	[RequestedOn] [datetime] NULL,
	[RequestDuration] [decimal](18, 2) NULL,
	[ResponseStatus] [varchar](50) NULL,
	[ResponseCode] [varchar](50) NULL,
	[Exception] [varchar](max) NULL,
	[StatusId] [bit] NULL,
	[CreatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK__SOAAudit__33A8517A3C95AF79] PRIMARY KEY CLUSTERED 
(
	[RequestId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SOAAuditType]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SOAAuditType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AuditTypeId] [int] NOT NULL,
	[AuditDesc] [varchar](250) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[AvgDailyCountFrom] [int] NULL,
	[AvgDailyCountTo] [int] NULL,
	[AvgMaxTimeTaken] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SOAWorkOrderRequest]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SOAWorkOrderRequest](
	[RequestId] [uniqueidentifier] NOT NULL,
	[WorkOrderNum] [varchar](30) NULL,
	[OrderType] [varchar](2) NULL,
	[ParentWONumber] [varchar](30) NULL,
	[TypeWO] [varchar](1) NULL,
	[PriorityWO] [varchar](1) NULL,
	[Description] [varchar](30) NULL,
	[ItemNumber] [varchar](25) NULL,
	[Branch] [varchar](12) NULL,
	[BusinessUnit] [varchar](12) NULL,
	[TransactionDate] [varchar](20) NULL,
	[StartDate] [varchar](20) NULL,
	[RequestedDate] [varchar](20) NULL,
	[FixedAssetId] [uniqueidentifier] NULL,
	[AssetItemNumber] [varchar](10) NULL,
	[Subsidiary] [varchar](8) NULL,
	[LotNumber] [varchar](30) NULL,
	[UserId] [varchar](10) NULL,
	[CreatedOn] [datetime] NULL,
 CONSTRAINT [PK_SOAWorkOrderRequest] PRIMARY KEY CLUSTERED 
(
	[RequestId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SOAWorkOrderResponseHeader]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SOAWorkOrderResponseHeader](
	[ResponseHeaderId] [uniqueidentifier] NOT NULL,
	[RequestId] [uniqueidentifier] NULL,
	[EdgeKey] [varchar](30) NULL,
	[AssetNumber] [varchar](10) NULL,
	[WorkOrderNum] [varchar](30) NULL,
	[ResponseStatus] [varchar](50) NULL,
	[ResponseCode] [varchar](50) NULL,
	[ResponseJson] [varchar](max) NULL,
	[StatusCode] [varchar](10) NULL,
	[ExceptionMessage] [varchar](400) NULL,
	[Exception] [varchar](8000) NULL,
	[TimeTaken] [float] NULL,
 CONSTRAINT [PK_SOAWorkOrderResponseHeader] PRIMARY KEY CLUSTERED 
(
	[ResponseHeaderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SOAWorkOrderResponseMessages]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SOAWorkOrderResponseMessages](
	[ResponseMessageId] [uniqueidentifier] NOT NULL,
	[ResponseHeaderId] [uniqueidentifier] NULL,
	[ResponseCode] [varchar](200) NULL,
	[ResponseMessage] [varchar](200) NULL,
 CONSTRAINT [PK_SOAWorkOrderResponseMessages] PRIMARY KEY CLUSTERED 
(
	[ResponseMessageId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[StatusUpdateRules]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[StatusUpdateRules](
	[StatusUpdateRuleId] [int] IDENTITY(1,1) NOT NULL,
	[Source] [varchar](10) NULL,
	[Dest] [varchar](10) NULL,
	[State] [varchar](100) NULL,
	[Description] [varchar](250) NULL,
	[Islive] [bit] NULL,
	[Sort] [int] NULL,
	[CreatedBy] [varchar](200) NULL,
	[CreatedOn] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[StoreProcedureLogs]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[StoreProcedureLogs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureName] [varchar](250) NULL,
	[Activity] [varchar](max) NULL,
	[ActivityDateTime] [datetime] NULL,
	[Status] [varchar](10) NULL,
	[Error] [varchar](max) NULL,
	[ErrorStackTrace] [varchar](max) NULL,
 CONSTRAINT [PK_StoreProcedureLogs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TariffCodes]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TariffCodes](
	[TariffCodeId] [int] IDENTITY(1,1) NOT NULL,
	[HTSNo] [varchar](32) NULL,
	[StatSuffix] [varchar](1024) NULL,
	[LevelNumber] [varchar](1024) NULL,
	[Description] [varchar](2048) NULL,
	[UnitOfQty] [varchar](1024) NULL,
	[ColRate] [varchar](1024) NULL,
	[SpecialRate] [varchar](1024) NULL,
	[ColRate2] [varchar](1024) NULL,
	[Comment] [varchar](1024) NULL,
	[TariffCodeNo] [varchar](32) NULL,
 CONSTRAINT [PK_TarriffCode] PRIMARY KEY CLUSTERED 
(
	[TariffCodeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TEMP_GLCodes]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TEMP_GLCodes](
	[GLCode] [varchar](20) NULL,
	[Description] [varchar](250) NULL,
	[GLProductLineId] [int] NULL,
	[UpdatedBy] [varchar](10) NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[GroupPL] [varchar](250) NULL,
	[GroupPLShort] [varchar](250) NULL,
	[SegmentPL] [varchar](250) NULL,
	[SegmentPLShort] [varchar](250) NULL,
	[ProductLine] [varchar](250) NULL,
	[ProductLineService] [varchar](250) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TEMP_GLProductLines]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TEMP_GLProductLines](
	[Id] [int] NOT NULL,
	[Code] [varchar](50) NOT NULL,
	[Description] [varchar](250) NULL,
	[UpdatedBy] [varchar](10) NULL,
	[UpdatedOn] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TempDocumentRetry]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TempDocumentRetry](
	[RowIndex] [bigint] NULL,
	[DocItemAttachId] [uniqueidentifier] NOT NULL,
	[RequestedOn] [datetime] NULL,
	[OriginalFileName] [varchar](255) NULL,
	[xScreenName] [varchar](13) NOT NULL,
	[AppId] [varchar](100) NULL,
	[FilePath] [varchar](1024) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TempEquipmentStructure]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TempEquipmentStructure](
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[ParentFixedAssetId] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tempGLProductLineBranchPlantMappings]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tempGLProductLineBranchPlantMappings](
	[GLProductLineId] [int] NULL,
	[BranchPlant] [varchar](12) NOT NULL,
	[UpdatedBy] [varchar](10) NULL,
	[UpdatedOn] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tempjdeworkorders]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tempjdeworkorders](
	[JDEWorkOrderId] [uniqueidentifier] NOT NULL,
	[WorkOrderNumber] [varchar](30) NOT NULL,
	[Source] [varchar](15) NULL,
	[Target] [varchar](30) NULL,
	[Method] [varchar](30) NULL,
	[TransactionUserId] [varchar](30) NULL,
	[TransactionId] [varchar](30) NULL,
	[TransactionName] [varchar](30) NULL,
	[EdgeKey] [varchar](30) NULL,
	[EquipmentStatus] [varchar](4) NULL,
	[OrderType] [varchar](4) NULL,
	[OrderSuffix] [varchar](30) NULL,
	[RelatedOrderType] [varchar](4) NULL,
	[RelatedWONumber] [varchar](30) NULL,
	[ParentWONumber] [varchar](30) NULL,
	[TypeWO] [varchar](6) NULL,
	[WorkOrderPriority] [int] NULL,
	[Description] [varchar](255) NULL,
	[StatusComment] [varchar](255) NULL,
	[Company] [varchar](50) NULL,
	[BusinessUnit] [varchar](30) NULL,
	[Branch] [varchar](12) NULL,
	[WorkOrderStatusCode] [varchar](4) NULL,
	[StatusChangedDate] [datetime] NULL,
	[Subsidiary] [varchar](30) NULL,
	[TransactionDate] [datetime] NULL,
	[StartDate] [datetime] NULL,
	[RequestedDate] [datetime] NULL,
	[CompletionDate] [datetime] NULL,
	[AssignedToDate] [datetime] NULL,
	[AssignedToInspectorDate] [datetime] NULL,
	[Reference] [varchar](50) NULL,
	[Reference2] [varchar](50) NULL,
	[EstimatedAmount] [float] NULL,
	[OriginalDollarsAmount] [float] NULL,
	[EstimatedHours] [float] NULL,
	[OriginalHours] [float] NULL,
	[ActualAmount] [float] NULL,
	[ActualHours] [float] NULL,
	[ShortItemNumber] [varchar](30) NULL,
	[SecondItemNumber] [varchar](30) NULL,
	[ThirdItemNumber] [varchar](30) NULL,
	[AssetItemNumber] [varchar](30) NULL,
	[PostingEdit] [varchar](30) NULL,
	[LotNumber] [varchar](30) NULL,
	[LotPotency] [varchar](30) NULL,
	[LotGrade] [varchar](30) NULL,
	[UpdatedDate] [datetime] NULL,
	[TimeOfDay] [varchar](30) NULL,
	[ParentNumber] [varchar](30) NULL,
	[WorkOrderCriticality] [varchar](30) NULL,
	[EstimatedDowntimeHours] [float] NULL,
	[ActualDowntimeHours] [float] NULL,
	[MeterPosition] [varchar](30) NULL,
	[EstimatedLaborAmount] [float] NULL,
	[EstimatedMaterialAmount] [float] NULL,
	[EstimatedOtherAmount] [float] NULL,
	[ActualLaborAmount] [float] NULL,
	[ActualMaterialAmount] [float] NULL,
	[WorkOrderStatus] [varchar](6) NULL,
	[DocumentType] [varchar](6) NULL,
	[MiscCost] [float] NULL,
	[ExchangeRate] [float] NULL,
	[ActaulLaborInUSD] [float] NULL,
	[ActualMaterialInUSD] [float] NULL,
	[ActaulMiscCostInUSD] [float] NULL,
	[MiscCostInUSD] [float] NULL,
	[DateAdded] [datetime] NULL,
	[LastUpdatedDate] [datetime] NULL,
	[WorkOrderId] [uniqueidentifier] NULL,
	[DispatchNumber] [int] NULL,
	[CustomerNumber] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ToolDetail]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ToolDetail](
	[ToolDetailID] [uniqueidentifier] NOT NULL,
	[ToolStringID] [uniqueidentifier] NOT NULL,
	[ArriveDate] [datetime] NULL,
	[DepartDate] [datetime] NULL,
	[InitialFieldDate] [datetime] NULL,
	[NonMag] [varchar](3) NULL,
	[OuterDTop] [float] NULL,
	[OuterDTopUOM] [varchar](10) NULL,
	[OuterDBottom] [float] NULL,
	[OuterDBottomUOM] [varchar](10) NULL,
	[MaxOuterD] [float] NULL,
	[MaxOuterDUOM] [varchar](10) NULL,
	[InnerD] [float] NULL,
	[InnerDUOM] [varchar](10) NULL,
	[BladeDiameter] [float] NULL,
	[BladeDiameterUOM] [varchar](10) NULL,
	[BladeType] [varchar](10) NULL,
	[FullGaugeLength] [float] NULL,
	[FullGaugeLengthUOM] [varchar](10) NULL,
	[FishNeck] [float] NULL,
	[FishNeckUOM] [varchar](10) NULL,
	[Length] [float] NULL,
	[LengthUOM] [varchar](10) NULL,
	[Weight] [float] NULL,
	[WeightUOM] [varchar](10) NULL,
	[WeightPerFM] [float] NULL,
	[WeightPerFMUOM] [varchar](10) NULL,
	[TopConnectionType] [varchar](50) NULL,
	[BottomConnectionType] [varchar](50) NULL,
	[WFTEquipment] [bit] NULL,
	[InitialOperatingHours] [float] NULL,
	[TotalOperatingHours] [float] NULL,
	[InitialCirculatingHours] [float] NULL,
	[TotalCirculatingHours] [float] NULL,
	[InitialDrillHours] [float] NULL,
	[TotalDrillHours] [float] NULL,
	[InitialKRevs] [float] NULL,
	[TotalKRevs] [float] NULL,
	[BitToBend] [float] NULL,
	[NoLoadRPMFlowUnit] [float] NULL,
	[BearingPackConfiguration] [varchar](50) NULL,
	[PowerSectionConfiguration] [varchar](50) NULL,
	[MotorType] [varchar](50) NULL,
	[MotorNominalSize] [float] NULL,
	[MotorNominalSizeUOM] [varchar](10) NULL,
	[AdjustableHousing] [varchar](50) NULL,
	[CutForFloat] [varchar](50) NULL,
	[JarForceUp] [float] NULL,
	[JarForceUpUOM] [varchar](10) NULL,
	[JarForceDown] [float] NULL,
	[JarForceDownUOM] [varchar](10) NULL,
	[JarDelay] [float] NULL,
	[JarType] [varchar](50) NULL,
	[InitialJarHits] [float] NULL,
	[TotalJarHits] [float] NULL,
	[BitSize] [float] NULL,
	[BitSizeUOM] [varchar](10) NULL,
	[BitModel] [varchar](50) NULL,
	[InnerRows] [varchar](50) NULL,
	[OuterRows] [varchar](50) NULL,
	[DullCharacteristics] [varchar](50) NULL,
	[LocationL] [varchar](50) NULL,
	[BearingSeatB] [varchar](50) NULL,
	[GaugeG] [varchar](50) NULL,
	[OtherDullO] [varchar](50) NULL,
	[ReasonPulledR] [varchar](50) NULL,
	[GaugeLength] [float] NULL,
	[GaugeLengthUOM] [varchar](10) NULL,
	[ActivePassive] [varchar](50) NULL,
	[NumberOfBlades] [float] NULL,
	[PDCCutterSize] [float] NULL,
	[PDCCutterSizeUOM] [varchar](10) NULL,
	[BitManufacturer] [varchar](50) NULL,
	[QuantityOnRig] [float] NULL,
	[PumpManufacturer] [varchar](50) NULL,
	[PumpModel] [varchar](50) NULL,
	[PumpType] [varchar](50) NULL,
	[PumpStrokeLength] [float] NULL,
	[PumpStrokeLengthUOM] [varchar](10) NULL,
	[PumpEfficiency] [varchar](50) NULL,
	[PumpPressureRating] [varchar](50) NULL,
	[PumpPressureRatingUOM] [varchar](10) NULL,
	[DampenerType] [varchar](50) NULL,
	[PressureDampenerManufacturer] [varchar](50) NULL,
	[MotorProperty] [varchar](100) NULL,
	[FixedBendAngle] [float] NULL,
	[Manufacturer] [varchar](100) NULL,
	[BitState] [varchar](15) NULL,
 CONSTRAINT [PK_ToolDetail] PRIMARY KEY CLUSTERED 
(
	[ToolDetailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ToolModFixedAssets]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ToolModFixedAssets](
	[ToolModFixedAssetId] [uniqueidentifier] NOT NULL,
	[ToolModId] [uniqueidentifier] NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_ToolModFixedAssets] PRIMARY KEY CLUSTERED 
(
	[ToolModFixedAssetId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ToolModParts]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ToolModParts](
	[ToolModPartsId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ToolModId] [uniqueidentifier] NOT NULL,
	[ItemNum] [varchar](30) NULL,
	[Revision] [varchar](2) NULL,
	[UserIdAdded] [int] NULL,
	[DateAdded] [datetime] NOT NULL,
	[IsTool] [bit] NULL,
 CONSTRAINT [PK_ToolModParts] PRIMARY KEY CLUSTERED 
(
	[ToolModPartsId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ToolMods]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ToolMods](
	[ToolModId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ModNum] [varchar](50) NOT NULL,
	[ModSubject] [varchar](128) NOT NULL,
	[ModDesc] [varchar](4096) NULL,
	[UserIdAdded] [int] NULL,
	[DateAdded] [datetime] NOT NULL,
 CONSTRAINT [PK_ToolMods] PRIMARY KEY CLUSTERED 
(
	[ToolModId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ToolSheetTemplates]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ToolSheetTemplates](
	[TemplateID] [uniqueidentifier] NOT NULL,
	[TemplateName] [varchar](50) NOT NULL,
	[ToolSizeID] [varchar](10) NULL,
	[ToolType] [varchar](20) NULL,
	[CreateDate] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[LastUpdate] [datetime] NULL,
	[UpdateBy] [int] NULL,
	[ProductLineId] [int] NULL,
	[BranchPlant] [varchar](20) NULL,
 CONSTRAINT [PK_ToolSheetTemplates] PRIMARY KEY CLUSTERED 
(
	[TemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ToolSheetTemplatesMap]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ToolSheetTemplatesMap](
	[TemplateMapID] [uniqueidentifier] NOT NULL,
	[TemplateID] [uniqueidentifier] NOT NULL,
	[PartTypeID] [int] NOT NULL,
	[OrderPosition] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[TemplateMapID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ToolStringContainers]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ToolStringContainers](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ContainerId] [int] NOT NULL,
	[ToolStringId] [uniqueidentifier] NOT NULL,
	[Name] [varchar](100) NULL,
	[SerialNum] [varchar](400) NULL,
	[Description] [varchar](400) NULL,
	[Weight] [varchar](50) NULL,
	[Dimension] [nvarchar](100) NULL,
 CONSTRAINT [PK_ToolStringContainers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ToolStringFixedAssetAttributes]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ToolStringFixedAssetAttributes](
	[AttributeId] [int] IDENTITY(1,1) NOT NULL,
	[ToolStringFixedAssetsId] [uniqueidentifier] NOT NULL,
	[ToolStringID] [uniqueidentifier] NOT NULL,
	[Attribute] [varchar](100) NOT NULL,
	[AttributeTypeId] [int] NOT NULL,
 CONSTRAINT [PK_ToolStringFixedAssetAttributes] PRIMARY KEY CLUSTERED 
(
	[AttributeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ToolStringNonSerialParts]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ToolStringNonSerialParts](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ContainerId] [int] NULL,
	[ToolStringId] [uniqueidentifier] NOT NULL,
	[Description] [varchar](400) NULL,
	[Quantity] [int] NULL,
	[DateAdded] [datetime] NOT NULL,
	[SerialNum] [varchar](50) NULL,
	[Comments] [varchar](500) NULL,
 CONSTRAINT [PK_ToolStringNonSerialParts] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[trunck_PFTObjects_20200222]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[trunck_PFTObjects_20200222](
	[ObjectId] [int] IDENTITY(1,1) NOT NULL,
	[ObjectNumber] [int] NOT NULL,
	[Revision] [int] NOT NULL,
	[Type] [int] NOT NULL,
	[Name] [varchar](1024) NULL,
	[Description] [varchar](8000) NULL,
	[ProductLineId] [int] NOT NULL,
	[State] [int] NOT NULL,
	[Field1] [varchar](100) NULL,
	[Field2] [varchar](100) NULL,
	[Field3] [varchar](100) NULL,
	[Field4] [varchar](100) NULL,
	[Field5] [varchar](100) NULL,
	[CreatedBy] [varchar](20) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL,
	[ReasonForChange] [varchar](4000) NULL,
	[Field6] [varchar](100) NULL,
	[Field7] [varchar](100) NULL,
	[Field8] [varchar](100) NULL,
	[Field9] [varchar](100) NULL,
	[Field10] [varchar](100) NULL,
	[Field11] [varchar](100) NULL,
	[Field12] [varchar](100) NULL,
	[Field13] [varchar](100) NULL,
	[Field14] [varchar](100) NULL,
	[Field15] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserRoleBranchPlants]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserRoleBranchPlants](
	[UserRoleBranchPlantId] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[RoleId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[BranchPlant] [varchar](12) NULL,
 CONSTRAINT [PK_UserRoleBranchPlants] PRIMARY KEY CLUSTERED 
(
	[UserRoleBranchPlantId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserSessionLog]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserSessionLog](
	[UserSessionLogId] [uniqueidentifier] NOT NULL,
	[SessionId] [varchar](50) NOT NULL,
	[LoginDate] [datetime] NOT NULL,
	[LastAccessedDate] [datetime] NOT NULL,
	[UserId] [int] NOT NULL,
 CONSTRAINT [PK_UserSessionLog] PRIMARY KEY CLUSTERED 
(
	[UserSessionLogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserVacationHours]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserVacationHours](
	[UserId] [int] NOT NULL,
	[CalendarYear] [int] NOT NULL,
	[Hours] [int] NOT NULL,
 CONSTRAINT [PK_UserVacationHours] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[CalendarYear] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[USShipperLetterDetails]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[USShipperLetterDetails](
	[USShipperLetterDetailID] [uniqueidentifier] NOT NULL,
	[USShipperLetterID] [uniqueidentifier] NOT NULL,
	[LineNumber] [int] NULL,
	[DomesticForeign] [varchar](16) NULL,
	[HTSNumberDesc] [varchar](1024) NULL,
	[QuantityUOM] [varchar](64) NULL,
	[ShippingWeight] [varchar](64) NULL,
	[Amount] [float] NULL,
	[EccnEar] [varchar](64) NULL,
	[HTSNumber] [varchar](1024) NULL,
 CONSTRAINT [PK_USShipperLetterDetail] PRIMARY KEY CLUSTERED 
(
	[USShipperLetterDetailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[USShipperLetters]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[USShipperLetters](
	[USShipperLetterID] [uniqueidentifier] NOT NULL,
	[CustomsInvoiceId] [uniqueidentifier] NOT NULL,
	[ShipperLine1] [varchar](256) NULL,
	[ShipperLine2] [varchar](256) NULL,
	[ShipperLine3] [varchar](256) NULL,
	[ShipperLine4] [varchar](256) NULL,
	[ShipperLine5] [varchar](256) NULL,
	[ShipperLine6] [varchar](256) NULL,
	[ShipperLine7] [varchar](256) NULL,
	[ShipperZipCode] [varchar](64) NULL,
	[ShipperTaxId] [varchar](150) NULL,
	[IsRelated] [bit] NOT NULL,
	[FinalConsigneeLine1] [varchar](256) NULL,
	[FinalConsigneeLine2] [varchar](256) NULL,
	[FinalConsigneeLine3] [varchar](256) NULL,
	[FinalConsigneeLine4] [varchar](256) NULL,
	[FinalConsigneeLine5] [varchar](256) NULL,
	[FinalConsigneeLine6] [varchar](256) NULL,
	[FinalConsigneeLine7] [varchar](256) NULL,
	[UltimateDestinationCountry] [varchar](150) NULL,
	[ConsigneeLine1] [varchar](256) NULL,
	[ConsigneeLine2] [varchar](256) NULL,
	[ConsigneeLine3] [varchar](256) NULL,
	[ConsigneeLine4] [varchar](256) NULL,
	[ConsigneeLine5] [varchar](256) NULL,
	[ConsigneeLine6] [varchar](256) NULL,
	[ConsigneeLine7] [varchar](256) NULL,
	[ForwardingAgent] [varchar](64) NULL,
	[ForwarderLine1] [varchar](256) NULL,
	[ForwarderLine2] [varchar](256) NULL,
	[ForwarderLine3] [varchar](256) NULL,
	[ForwarderLine4] [varchar](256) NULL,
	[BookingNumber] [varchar](64) NULL,
	[ModeOfTransport] [varchar](64) NULL,
	[ExportingCarrier] [varchar](64) NULL,
	[PortOfExport] [varchar](150) NULL,
	[PortOfUnloading] [varchar](64) NULL,
	[IsContainerized] [bit] NOT NULL,
	[DateOfExport] [datetime] NULL,
	[BillOfLading] [varchar](64) NULL,
	[IsInsurance] [bit] NOT NULL,
	[InsuranceAmount] [float] NULL,
	[NotifyName] [varchar](150) NULL,
	[Phone] [varchar](64) NULL,
	[Fax] [varchar](64) NULL,
	[Email] [varchar](64) NULL,
	[BillingAddress] [varchar](256) NULL,
	[ElectronicCopy] [varchar](150) NULL,
	[PointOfOrigion] [varchar](64) NULL,
	[FTZNo] [varchar](64) NULL,
	[ShipperRefNum] [varchar](150) NULL,
	[IsRequiredEEI] [bit] NOT NULL,
	[SpecifyEEI] [varchar](150) NULL,
	[ITN] [varchar](150) NULL,
	[IsRoutedExportTransaction] [bit] NOT NULL,
	[IsPrepaid] [bit] NOT NULL,
	[IsCollect] [bit] NOT NULL,
	[IsCOD] [bit] NOT NULL,
	[CODDollar] [float] NULL,
	[IsAir] [bit] NOT NULL,
	[IsOcean] [bit] NOT NULL,
	[IsConsolidate] [bit] NOT NULL,
	[IsDirect] [bit] NOT NULL,
	[IsAbandon] [bit] NOT NULL,
	[IsReturnToShipper] [bit] NOT NULL,
	[IsNotifyShipper] [bit] NOT NULL,
	[IsHazardous] [bit] NOT NULL,
	[IsTransportedUnderBond] [bit] NOT NULL,
	[IsYourTruck] [bit] NOT NULL,
	[TruckLineName] [varchar](100) NULL,
	[ReceiptNum] [varchar](100) NULL,
	[IsLicenseRequired] [bit] NULL,
	[LicenseNo] [varchar](64) NULL,
	[AuthorizedOfficer] [varchar](150) NULL,
	[SignatureUserName] [varchar](150) NULL,
	[Title] [varchar](150) NULL,
	[ShipmentDate] [datetime] NULL,
	[DocumentEnclosed] [varchar](1024) NULL,
	[SpecialInstruction] [varchar](4000) NULL,
	[CreateDate] [datetime] NULL,
	[CreateUserName] [varchar](128) NULL,
	[LastEditDate] [datetime] NULL,
	[LastEditUserName] [varchar](128) NULL,
 CONSTRAINT [PK_USShipperLetter] PRIMARY KEY CLUSTERED 
(
	[USShipperLetterID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WellCoordinates]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WellCoordinates](
	[WellCoordinateID] [uniqueidentifier] NOT NULL,
	[WellID] [uniqueidentifier] NOT NULL,
	[Coordinate] [varchar](50) NULL,
	[CoordinateLoc] [int] NULL,
	[Type1] [varchar](50) NULL,
	[Type2] [varchar](50) NULL,
	[Type1Value1] [varchar](30) NULL,
	[Type1Value2] [varchar](30) NULL,
	[Type2Value1] [varchar](30) NULL,
	[Type2Value2] [varchar](30) NULL,
 CONSTRAINT [PK_tblWellCoordinates] PRIMARY KEY CLUSTERED 
(
	[WellCoordinateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WellTargets]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WellTargets](
	[WellTargetID] [uniqueidentifier] NOT NULL,
	[WellID] [uniqueidentifier] NOT NULL,
	[KickOffPoint] [float] NULL,
	[KickOffPointUOM] [varchar](5) NULL,
	[ProposedMaxAngle] [float] NULL,
	[ProposedMaxAngleUOM] [varchar](5) NULL,
 CONSTRAINT [PK_tblWellTargets] PRIMARY KEY CLUSTERED 
(
	[WellTargetID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WellTargetsChangeRequests]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WellTargetsChangeRequests](
	[WellTargetsChangeRequestID] [uniqueidentifier] NOT NULL,
	[WellID] [uniqueidentifier] NOT NULL,
	[TargetDate] [datetime] NULL,
	[TargetChangeRequestBy] [uniqueidentifier] NULL,
	[TargetChangeRecordedBy] [uniqueidentifier] NULL,
	[LastSurveyMD] [float] NULL,
	[LastSurveyMDUOM] [varchar](10) NULL,
	[LastSurveyInc] [float] NULL,
	[LastSurveyIncUOM] [nchar](10) NULL,
	[LastSurveyAzimuth] [float] NULL,
	[LastSurveyAzimuthUOM] [varchar](10) NULL,
	[LastSurveyTVD] [float] NULL,
	[LastSurveyTVDUOM] [varchar](10) NULL,
	[ETBMD] [float] NULL,
	[ETBMDUOM] [varchar](10) NULL,
	[ETBInc] [float] NULL,
	[ETBIncUOM] [varchar](10) NULL,
	[ETBAzimuth] [float] NULL,
	[ETBAzimuthUOM] [varchar](10) NULL,
	[ETBTVD] [float] NULL,
	[ETBTVDUOM] [varchar](10) NULL,
	[ETBNSCoordinates] [float] NULL,
	[ETBNSCoordinatesUOM] [varchar](10) NULL,
	[ETBEWCoordinates] [float] NULL,
	[ETBEWCoordinatesUOM] [varchar](10) NULL,
	[ETBVerticalSection] [float] NULL,
	[ETBVerticalSectionUOM] [varchar](10) NULL,
	[ETBDogleg] [float] NULL,
	[ETBDoglegUOM] [varchar](10) NULL,
	[NewMD] [float] NULL,
	[NewMDUOM] [varchar](10) NULL,
	[NewInc] [float] NULL,
	[NewIncUOM] [varchar](10) NULL,
	[NewAzimuth] [float] NULL,
	[NewAzimuthUOM] [varchar](10) NULL,
	[NewTVD] [float] NULL,
	[NewTVDUOM] [varchar](10) NULL,
	[NewNSCoordinates] [float] NULL,
	[NewNSCoordinatesUOM] [varchar](10) NULL,
	[NewEWCoordinates] [float] NULL,
	[NewEWCoordinatesUOM] [varchar](10) NULL,
	[NewVerticalSection] [float] NULL,
	[NewVerticalSectionUOM] [varchar](10) NULL,
	[NewDogleg] [float] NULL,
	[NewDoglegUOM] [varchar](10) NULL,
	[Comments] [varchar](2000) NULL,
 CONSTRAINT [PK_tblWellTargetsChangeRequests] PRIMARY KEY CLUSTERED 
(
	[WellTargetsChangeRequestID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WellTargetsPlanned]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WellTargetsPlanned](
	[WellTargetPlannedID] [uniqueidentifier] NOT NULL,
	[WellID] [uniqueidentifier] NOT NULL,
	[Target] [varchar](50) NULL,
	[Type] [varchar](50) NULL,
	[Radius] [float] NULL,
	[RadiusUOM] [varchar](5) NULL,
	[Formation] [varchar](50) NULL,
	[Latitude] [float] NULL,
	[LatitudeUOM] [varchar](5) NULL,
	[Departure] [float] NULL,
	[DepartureUOM] [varchar](5) NULL,
	[Azimuth] [float] NULL,
	[AzimuthUOM] [varchar](10) NULL,
	[VerticalSection] [float] NULL,
	[VerticalSectionUOM] [varchar](5) NULL,
	[TVD] [float] NULL,
	[TVDUOM] [varchar](5) NULL,
	[MaxBuildRate] [float] NULL,
	[MaxBuildRateUOM] [varchar](50) NULL,
 CONSTRAINT [PK_tblWellTargetsPlanned] PRIMARY KEY CLUSTERED 
(
	[WellTargetPlannedID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WorkflowReminderLog]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WorkflowReminderLog](
	[WorkflowReminderLogId] [uniqueidentifier] NOT NULL,
	[WorkflowId] [uniqueidentifier] NOT NULL,
	[UserId] [int] NOT NULL,
	[Email] [varchar](1000) NOT NULL,
	[DateSent] [datetime] NOT NULL,
 CONSTRAINT [PK_WorkflowReminderLog] PRIMARY KEY CLUSTERED 
(
	[WorkflowReminderLogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WorkflowTaskApproverConfig]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WorkflowTaskApproverConfig](
	[WorkflowTaskConfigId] [uniqueidentifier] NOT NULL,
	[UserId] [int] NOT NULL,
	[IsNotifyOnly] [bit] NOT NULL,
 CONSTRAINT [PK_WorkflowTaskApproverConfig] PRIMARY KEY CLUSTERED 
(
	[WorkflowTaskConfigId] ASC,
	[UserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WorkflowTaskConfig]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WorkflowTaskConfig](
	[WorkflowTaskConfigId] [uniqueidentifier] NOT NULL,
	[WorkflowCategoryId] [uniqueidentifier] NOT NULL,
	[ParentWorkflowTaskConfigId] [uniqueidentifier] NULL,
	[TaskDesc] [varchar](256) NOT NULL,
	[DisplayOrder] [int] NOT NULL,
 CONSTRAINT [PK_WorkflowTaskConfig] PRIMARY KEY CLUSTERED 
(
	[WorkflowTaskConfigId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WorkOrderFixedAssets]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WorkOrderFixedAssets](
	[WorkOrderFixedAssetId] [uniqueidentifier] NOT NULL,
	[WorkOrderId] [uniqueidentifier] NOT NULL,
	[FixedAssetId] [uniqueidentifier] NOT NULL,
	[StartRevision] [varchar](2) NULL,
	[EndRevision] [varchar](2) NULL,
	[DateLastEdit] [datetime] NULL,
	[UserIdLastEdit] [int] NULL,
	[DateAdded] [datetime] NOT NULL,
	[UserIdAdded] [int] NOT NULL,
 CONSTRAINT [PK_WorkOrderFixedAssets] PRIMARY KEY CLUSTERED 
(
	[WorkOrderFixedAssetId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WorkOrderValues]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WorkOrderValues](
	[WorkOrderValueId] [int] IDENTITY(1,1) NOT NULL,
	[WorkOrderId] [uniqueidentifier] NOT NULL,
	[DataFieldId] [int] NOT NULL,
	[StringValue] [varchar](8000) NULL,
	[DateValue] [datetime] NULL,
	[NumberValue] [decimal](18, 4) NULL,
	[BooleanValue] [bit] NULL,
	[GuidValue] [uniqueidentifier] NULL,
 CONSTRAINT [PK_WorkOrderValue] PRIMARY KEY CLUSTERED 
(
	[WorkOrderValueId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WRTN_Load]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WRTN_Load](
	[User ID] [nvarchar](255) NULL,
	[Batch Number] [nvarchar](255) NULL,
	[Transaction Number] [float] NULL,
	[Line Number] [float] NULL,
	[Doc Ty] [nvarchar](255) NULL,
	[Trans Type] [nvarchar](255) NULL,
	[Translation Format] [nvarchar](255) NULL,
	[Tran Date] [datetime] NULL,
	[Dir Ind] [nvarchar](255) NULL,
	[# Lines] [float] NULL,
	[S P] [nvarchar](255) NULL,
	[Trading Partner] [nvarchar](255) NULL,
	[Tr Ac] [nvarchar](255) NULL,
	[Order Co] [nvarchar](255) NULL,
	[Order Number] [float] NULL,
	[Or Ty] [nvarchar](255) NULL,
	[Line Number1] [float] NULL,
	[Business Unit] [nvarchar](255) NULL,
	[Address Number] [float] NULL,
	[Ship To Number] [float] NULL,
	[Referance 2] [nvarchar](255) NULL,
	[Request Date] [datetime] NULL,
	[Ordered By] [nvarchar](255) NULL,
	[Address Line 4] [nvarchar](255) NULL,
	[Creation Date] [datetime] NULL,
	[Seq No#] [float] NULL,
	[Header Business Unit] [nvarchar](255) NULL,
	[Land/ Offshore] [nvarchar](255) NULL,
	[Description] [nvarchar](255) NULL,
	[Hd Cd] [nvarchar](255) NULL,
	[Description1] [nvarchar](255) NULL,
	[Actual Ship Date] [datetime] NULL,
	[Job Number] [nvarchar](255) NULL,
	[Job Type] [nvarchar](255) NULL,
	[Description2] [nvarchar](255) NULL,
	[Cost Center] [nvarchar](255) NULL,
	[Salesprsn Code] [float] NULL,
	[Slsprsn 2 Code] [float] NULL,
	[Salesprsn Code1] [float] NULL,
	[Invoice Date] [datetime] NULL,
	[Hd CD1] [nvarchar](255) NULL,
	[Description3] [nvarchar](255) NULL,
	[Lot Serial Number] [nvarchar](255) NULL,
	[Memo Lot 1] [nvarchar](255) NULL,
	[Memo Lot 2] [nvarchar](255) NULL,
	[Memo Lot 3] [nvarchar](255) NULL,
	[2nd Item Number] [nvarchar](255) NULL,
	[Asset Number] [float] NULL,
	[Eq St] [nvarchar](255) NULL,
	[Quantity Shipped] [float] NULL,
	[Display Line] [float] NULL,
	[Location] [nvarchar](255) NULL,
	[Description4] [nvarchar](255) NULL,
	[Description Line 2] [nvarchar](255) NULL,
	[Unit Weight] [float] NULL,
	[IV Bill Type] [nvarchar](255) NULL,
	[Description5] [nvarchar](255) NULL,
	[Ln Ty] [nvarchar](255) NULL,
	[Line Type Description] [nvarchar](255) NULL,
	[User Quantity] [float] NULL,
	[Origin Country] [nvarchar](255) NULL,
	[Description6] [nvarchar](255) NULL,
	[Extended Price] [float] NULL,
	[Foreign Extended Price] [float] NULL,
	[RC] [nvarchar](255) NULL,
	[Description7] [nvarchar](255) NULL,
	[Return Date] [datetime] NULL,
	[Returned By] [nvarchar](255) NULL,
	[Number] [float] NULL,
	[Units Returned] [float] NULL,
	[Quantity LostOrSold] [float] NULL,
	[Date Entered] [datetime] NULL,
	[Tran Time] [float] NULL,
	[User Code] [nvarchar](255) NULL,
	[User Date] [datetime] NULL,
	[User Amount] [float] NULL,
	[User Number] [float] NULL,
	[User Reference] [nvarchar](255) NULL,
	[User ID1] [nvarchar](255) NULL,
	[Program ID] [nvarchar](255) NULL,
	[Work Stn ID] [nvarchar](255) NULL,
	[Date Updated] [datetime] NULL,
	[Time of Day] [float] NULL,
	[To Curr] [nvarchar](255) NULL,
	[Cur Cod] [nvarchar](255) NULL,
	[Document Number] [float] NULL,
	[Do Ty] [nvarchar](255) NULL,
	[Doc Co] [float] NULL,
	[Invoice Sequence] [float] NULL,
	[Address Line 1] [nvarchar](255) NULL,
	[Address Line 3] [nvarchar](255) NULL,
	[Address Line 2] [nvarchar](255) NULL,
	[Original Line Number] [float] NULL,
	[Flag] [smallint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E220932].[TempAIRTRecords]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E220932].[TempAIRTRecords](
	[AssetRepairTrackId] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E220932].[TempPFTWORecords]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E220932].[TempPFTWORecords](
	[PFTWOId] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E220932].[TempWorkOrderRecords]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E220932].[TempWorkOrderRecords](
	[WorkOrderId] [uniqueidentifier] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E220932].[ToolStrings_09282021]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E220932].[ToolStrings_09282021](
	[ToolStringId] [uniqueidentifier] NOT NULL,
	[SerialNumber] [varchar](50) NOT NULL,
	[Description] [varchar](50) NOT NULL,
	[CreatedBy] [tinyint] NOT NULL,
	[SizeId] [int] NULL,
	[ToolYear] [smallint] NULL,
	[District] [varchar](12) NULL,
	[BuildNumber] [nvarchar](6) NULL,
	[ToolMod] [varchar](5) NULL,
	[Disassembled] [bit] NULL,
	[DisassembledDate] [datetime] NULL,
	[CheckSum] [varchar](15) NULL,
	[Type] [varchar](20) NULL,
	[Length] [float] NULL,
	[LengthUOM] [varchar](10) NULL,
	[CollarID] [float] NULL,
	[CollarIDUOM] [varchar](10) NULL,
	[CollarOD] [float] NULL,
	[CollarODUOM] [varchar](10) NULL,
	[StabilizerBladeOD] [float] NULL,
	[StabilizerBladeODUOM] [varchar](20) NULL,
	[ConnectionTypeTop] [varchar](30) NULL,
	[ConnectionTypeBottom] [varchar](30) NULL,
	[KitNumber] [int] NULL,
	[IsLatestKitNumber] [tinyint] NULL,
	[IsTurnaround] [tinyint] NULL,
	[MotorType] [varchar](15) NULL,
	[MotorProperty] [varchar](30) NULL,
	[WorkOrderNum] [varchar](15) NULL,
	[MotorSerial] [varchar](50) NULL,
	[ConnectionTopSize] [float] NULL,
	[ConnectionTopSizeUOM] [varchar](5) NULL,
	[ConnectionBottomSize] [float] NULL,
	[ConnectionBottomSizeUOM] [varchar](5) NULL,
	[Service] [varchar](25) NULL,
	[BearingPackConfig] [varchar](50) NULL,
	[PowerSectionConfig] [varchar](50) NULL,
	[RMManufacturer] [varchar](20) NULL,
	[RMType] [varchar](20) NULL,
	[RMMidBodyStabSize] [float] NULL,
	[RMSerialNum] [varchar](25) NULL,
	[RMLobes] [varchar](10) NULL,
	[RMStages] [varchar](10) NULL,
	[CreateDate] [datetime] NOT NULL,
	[CreateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[EDP] [varchar](30) NULL,
	[LegacyCheckSum] [varchar](15) NULL,
	[Comments] [varchar](500) NULL,
	[ProductLineId] [int] NULL,
	[TemplateId] [int] NULL,
	[MasterTemplateID] [int] NULL,
	[Status] [tinyint] NULL,
	[Name] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E249496].[Backup_ToolStrings_20210813]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E249496].[Backup_ToolStrings_20210813](
	[ToolStringId] [uniqueidentifier] NOT NULL,
	[SerialNumber] [varchar](50) NOT NULL,
	[Description] [varchar](50) NOT NULL,
	[CreatedBy] [tinyint] NOT NULL,
	[SizeId] [int] NULL,
	[ToolYear] [smallint] NULL,
	[District] [varchar](12) NULL,
	[BuildNumber] [nvarchar](6) NULL,
	[ToolMod] [varchar](5) NULL,
	[Disassembled] [bit] NULL,
	[DisassembledDate] [datetime] NULL,
	[CheckSum] [varchar](15) NULL,
	[Type] [varchar](20) NULL,
	[Length] [float] NULL,
	[LengthUOM] [varchar](10) NULL,
	[CollarID] [float] NULL,
	[CollarIDUOM] [varchar](10) NULL,
	[CollarOD] [float] NULL,
	[CollarODUOM] [varchar](10) NULL,
	[StabilizerBladeOD] [float] NULL,
	[StabilizerBladeODUOM] [varchar](20) NULL,
	[ConnectionTypeTop] [varchar](30) NULL,
	[ConnectionTypeBottom] [varchar](30) NULL,
	[KitNumber] [int] NULL,
	[IsLatestKitNumber] [tinyint] NULL,
	[IsTurnaround] [tinyint] NULL,
	[MotorType] [varchar](15) NULL,
	[MotorProperty] [varchar](30) NULL,
	[WorkOrderNum] [varchar](15) NULL,
	[MotorSerial] [varchar](50) NULL,
	[ConnectionTopSize] [float] NULL,
	[ConnectionTopSizeUOM] [varchar](5) NULL,
	[ConnectionBottomSize] [float] NULL,
	[ConnectionBottomSizeUOM] [varchar](5) NULL,
	[Service] [varchar](25) NULL,
	[BearingPackConfig] [varchar](50) NULL,
	[PowerSectionConfig] [varchar](50) NULL,
	[RMManufacturer] [varchar](20) NULL,
	[RMType] [varchar](20) NULL,
	[RMMidBodyStabSize] [float] NULL,
	[RMSerialNum] [varchar](25) NULL,
	[RMLobes] [varchar](10) NULL,
	[RMStages] [varchar](10) NULL,
	[CreateDate] [datetime] NOT NULL,
	[CreateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[EDP] [varchar](30) NULL,
	[LegacyCheckSum] [varchar](15) NULL,
	[Comments] [varchar](500) NULL,
	[ProductLineId] [int] NULL,
	[TemplateId] [int] NULL,
	[MasterTemplateID] [int] NULL,
	[Status] [tinyint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E249496].[Bck_FailureCategories_20210506]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E249496].[Bck_FailureCategories_20210506](
	[FailureCategoryId] [uniqueidentifier] NOT NULL,
	[FailureCategoryCode] [varchar](7) NOT NULL,
	[FailureCategoryDesc] [varchar](255) NULL,
	[FailureType] [varchar](250) NULL,
	[IsHistorical] [bit] NOT NULL,
	[GLProductLineId] [int] NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E249496].[Bck_FailureCodes_20210506]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E249496].[Bck_FailureCodes_20210506](
	[FailureCodeId] [uniqueidentifier] NOT NULL,
	[FailureCategoryId] [uniqueidentifier] NULL,
	[FailureSubCategoryId] [uniqueidentifier] NULL,
	[FailureCode] [varchar](7) NULL,
	[FailureDesc] [varchar](255) NULL,
	[FailureType] [varchar](250) NULL,
	[IsHistorical] [bit] NOT NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL,
	[FailureCodeTypeId] [int] NULL,
	[GLProductLineId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E249496].[Bck_FailureSubCategories_20210506]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E249496].[Bck_FailureSubCategories_20210506](
	[FailureSubCategoryId] [uniqueidentifier] NOT NULL,
	[FailureSubCategoryCode] [varchar](7) NOT NULL,
	[FailureSubCategoryDesc] [varchar](255) NULL,
	[FailureType] [varchar](250) NULL,
	[IsHistorical] [bit] NOT NULL,
	[GLProductLineId] [int] NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E249496].[junk_PFTConfigSeq30Oct2020]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E249496].[junk_PFTConfigSeq30Oct2020](
	[PFTConfigSeqId] [uniqueidentifier] NOT NULL,
	[PFTConfigId] [uniqueidentifier] NOT NULL,
	[Seq] [int] NOT NULL,
	[SeqName] [varchar](1024) NOT NULL,
	[PFTLabId] [uniqueidentifier] NULL,
	[SeqDesc] [varchar](8000) NULL,
	[IsTestDataReq] [tinyint] NULL,
	[SendEmailOnPass] [varchar](1024) NULL,
	[DateAdded] [datetime] NULL,
	[IsCommentRequired] [tinyint] NULL,
	[IsCommentNumeric] [tinyint] NULL,
	[EstimatedHours] [decimal](18, 2) NULL,
	[IsLabourHrRequired] [tinyint] NULL,
	[ObjectId] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E249496].[junk_ToolStringContainers_6March2021]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E249496].[junk_ToolStringContainers_6March2021](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ContainerId] [int] NOT NULL,
	[ToolStringId] [uniqueidentifier] NOT NULL,
	[Name] [varchar](100) NULL,
	[SerialNum] [varchar](400) NULL,
	[Description] [varchar](400) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E249496].[Junk_ToolStringFixedAssets_20210123]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E249496].[Junk_ToolStringFixedAssets_20210123](
	[ToolStringFixedAssetsId] [uniqueidentifier] NOT NULL,
	[ToolStringID] [uniqueidentifier] NOT NULL,
	[FixedAssetID] [uniqueidentifier] NOT NULL,
	[SerialNum] [varchar](30) NULL,
	[RNItemNum] [varchar](30) NULL,
	[InventoryItemNum] [varchar](30) NULL,
	[PartTypeID] [int] NULL,
	[OrderPosition] [int] NULL,
	[SortNumber] [int] NULL,
	[Revision] [varchar](2) NULL,
	[ToolCode] [varchar](40) NULL,
	[MasterFirmwareRevision] [varchar](12) NULL,
	[CustomProperty] [varchar](128) NULL,
	[DateAdded] [datetime] NULL,
	[Description] [varchar](400) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E249496].[Junk_ToolStrings_20210122]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E249496].[Junk_ToolStrings_20210122](
	[ToolStringId] [uniqueidentifier] NOT NULL,
	[SerialNumber] [varchar](50) NOT NULL,
	[Description] [varchar](50) NOT NULL,
	[CreatedBy] [tinyint] NOT NULL,
	[SizeId] [int] NULL,
	[ToolYear] [smallint] NULL,
	[District] [varchar](12) NULL,
	[BuildNumber] [nvarchar](6) NULL,
	[ToolMod] [varchar](5) NULL,
	[Disassembled] [bit] NULL,
	[DisassembledDate] [datetime] NULL,
	[CheckSum] [varchar](15) NULL,
	[Type] [varchar](20) NULL,
	[Length] [float] NULL,
	[LengthUOM] [varchar](10) NULL,
	[CollarID] [float] NULL,
	[CollarIDUOM] [varchar](10) NULL,
	[CollarOD] [float] NULL,
	[CollarODUOM] [varchar](10) NULL,
	[StabilizerBladeOD] [float] NULL,
	[StabilizerBladeODUOM] [varchar](20) NULL,
	[ConnectionTypeTop] [varchar](30) NULL,
	[ConnectionTypeBottom] [varchar](30) NULL,
	[KitNumber] [int] NULL,
	[IsLatestKitNumber] [tinyint] NULL,
	[IsTurnaround] [tinyint] NULL,
	[MotorType] [varchar](15) NULL,
	[MotorProperty] [varchar](30) NULL,
	[WorkOrderNum] [varchar](15) NULL,
	[MotorSerial] [varchar](50) NULL,
	[ConnectionTopSize] [float] NULL,
	[ConnectionTopSizeUOM] [varchar](5) NULL,
	[ConnectionBottomSize] [float] NULL,
	[ConnectionBottomSizeUOM] [varchar](5) NULL,
	[Service] [varchar](25) NULL,
	[BearingPackConfig] [varchar](50) NULL,
	[PowerSectionConfig] [varchar](50) NULL,
	[RMManufacturer] [varchar](20) NULL,
	[RMType] [varchar](20) NULL,
	[RMMidBodyStabSize] [float] NULL,
	[RMSerialNum] [varchar](25) NULL,
	[RMLobes] [varchar](10) NULL,
	[RMStages] [varchar](10) NULL,
	[CreateDate] [datetime] NOT NULL,
	[CreateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[EDP] [varchar](30) NULL,
	[LegacyCheckSum] [varchar](15) NULL,
	[Comments] [varchar](500) NULL,
	[ProductLineId] [int] NULL,
	[TemplateId] [int] NULL,
	[MasterTemplateID] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E249496].[Junk_ToolStrings2feb2021]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E249496].[Junk_ToolStrings2feb2021](
	[ToolStringId] [uniqueidentifier] NOT NULL,
	[SerialNumber] [varchar](50) NOT NULL,
	[Description] [varchar](50) NOT NULL,
	[CreatedBy] [tinyint] NOT NULL,
	[SizeId] [int] NULL,
	[ToolYear] [smallint] NULL,
	[District] [varchar](12) NULL,
	[BuildNumber] [nvarchar](6) NULL,
	[ToolMod] [varchar](5) NULL,
	[Disassembled] [bit] NULL,
	[DisassembledDate] [datetime] NULL,
	[CheckSum] [varchar](15) NULL,
	[Type] [varchar](20) NULL,
	[Length] [float] NULL,
	[LengthUOM] [varchar](10) NULL,
	[CollarID] [float] NULL,
	[CollarIDUOM] [varchar](10) NULL,
	[CollarOD] [float] NULL,
	[CollarODUOM] [varchar](10) NULL,
	[StabilizerBladeOD] [float] NULL,
	[StabilizerBladeODUOM] [varchar](20) NULL,
	[ConnectionTypeTop] [varchar](30) NULL,
	[ConnectionTypeBottom] [varchar](30) NULL,
	[KitNumber] [int] NULL,
	[IsLatestKitNumber] [tinyint] NULL,
	[IsTurnaround] [tinyint] NULL,
	[MotorType] [varchar](15) NULL,
	[MotorProperty] [varchar](30) NULL,
	[WorkOrderNum] [varchar](15) NULL,
	[MotorSerial] [varchar](50) NULL,
	[ConnectionTopSize] [float] NULL,
	[ConnectionTopSizeUOM] [varchar](5) NULL,
	[ConnectionBottomSize] [float] NULL,
	[ConnectionBottomSizeUOM] [varchar](5) NULL,
	[Service] [varchar](25) NULL,
	[BearingPackConfig] [varchar](50) NULL,
	[PowerSectionConfig] [varchar](50) NULL,
	[RMManufacturer] [varchar](20) NULL,
	[RMType] [varchar](20) NULL,
	[RMMidBodyStabSize] [float] NULL,
	[RMSerialNum] [varchar](25) NULL,
	[RMLobes] [varchar](10) NULL,
	[RMStages] [varchar](10) NULL,
	[CreateDate] [datetime] NOT NULL,
	[CreateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[EDP] [varchar](30) NULL,
	[LegacyCheckSum] [varchar](15) NULL,
	[Comments] [varchar](500) NULL,
	[ProductLineId] [int] NULL,
	[TemplateId] [int] NULL,
	[MasterTemplateID] [int] NULL,
	[Status] [tinyint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E249496].[Junk_ToolStrings31012021]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E249496].[Junk_ToolStrings31012021](
	[ToolStringId] [uniqueidentifier] NOT NULL,
	[SerialNumber] [varchar](50) NOT NULL,
	[Description] [varchar](50) NOT NULL,
	[CreatedBy] [tinyint] NOT NULL,
	[SizeId] [int] NULL,
	[ToolYear] [smallint] NULL,
	[District] [varchar](12) NULL,
	[BuildNumber] [nvarchar](6) NULL,
	[ToolMod] [varchar](5) NULL,
	[Disassembled] [bit] NULL,
	[DisassembledDate] [datetime] NULL,
	[CheckSum] [varchar](15) NULL,
	[Type] [varchar](20) NULL,
	[Length] [float] NULL,
	[LengthUOM] [varchar](10) NULL,
	[CollarID] [float] NULL,
	[CollarIDUOM] [varchar](10) NULL,
	[CollarOD] [float] NULL,
	[CollarODUOM] [varchar](10) NULL,
	[StabilizerBladeOD] [float] NULL,
	[StabilizerBladeODUOM] [varchar](20) NULL,
	[ConnectionTypeTop] [varchar](30) NULL,
	[ConnectionTypeBottom] [varchar](30) NULL,
	[KitNumber] [int] NULL,
	[IsLatestKitNumber] [tinyint] NULL,
	[IsTurnaround] [tinyint] NULL,
	[MotorType] [varchar](15) NULL,
	[MotorProperty] [varchar](30) NULL,
	[WorkOrderNum] [varchar](15) NULL,
	[MotorSerial] [varchar](50) NULL,
	[ConnectionTopSize] [float] NULL,
	[ConnectionTopSizeUOM] [varchar](5) NULL,
	[ConnectionBottomSize] [float] NULL,
	[ConnectionBottomSizeUOM] [varchar](5) NULL,
	[Service] [varchar](25) NULL,
	[BearingPackConfig] [varchar](50) NULL,
	[PowerSectionConfig] [varchar](50) NULL,
	[RMManufacturer] [varchar](20) NULL,
	[RMType] [varchar](20) NULL,
	[RMMidBodyStabSize] [float] NULL,
	[RMSerialNum] [varchar](25) NULL,
	[RMLobes] [varchar](10) NULL,
	[RMStages] [varchar](10) NULL,
	[CreateDate] [datetime] NOT NULL,
	[CreateUserId] [int] NULL,
	[UpdateDate] [datetime] NULL,
	[UpdateUserId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[EDP] [varchar](30) NULL,
	[LegacyCheckSum] [varchar](15) NULL,
	[Comments] [varchar](500) NULL,
	[ProductLineId] [int] NULL,
	[TemplateId] [int] NULL,
	[MasterTemplateID] [int] NULL,
	[Status] [tinyint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E249496].[Junk_UserRoles_28Sep2020]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E249496].[Junk_UserRoles_28Sep2020](
	[RoleId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[Source] [varchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E249496].[Truncate_PFTConfig_20210605]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E249496].[Truncate_PFTConfig_20210605](
	[PFTConfigId] [uniqueidentifier] NOT NULL,
	[ProcessName] [varchar](1024) NOT NULL,
	[ProcessDesc] [varchar](1024) NULL,
	[IsDynamic] [tinyint] NOT NULL,
	[DateAdded] [datetime] NULL,
	[IsObsolete] [tinyint] NOT NULL,
	[PFTObjectId] [int] NULL,
	[ObjectNumber] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E249496].[Truncate_PFTObject_20210605]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E249496].[Truncate_PFTObject_20210605](
	[ObjectId] [int] IDENTITY(1,1) NOT NULL,
	[ObjectNumber] [int] NOT NULL,
	[Revision] [int] NOT NULL,
	[Type] [int] NOT NULL,
	[Name] [varchar](1024) NULL,
	[Description] [varchar](8000) NULL,
	[ProductLineId] [int] NOT NULL,
	[State] [int] NOT NULL,
	[Field1] [varchar](100) NULL,
	[Field2] [varchar](100) NULL,
	[Field3] [varchar](100) NULL,
	[Field4] [varchar](100) NULL,
	[Field5] [varchar](100) NULL,
	[CreatedBy] [varchar](20) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL,
	[ReasonForChange] [varchar](4000) NULL,
	[Field6] [varchar](100) NULL,
	[Field7] [varchar](100) NULL,
	[Field8] [varchar](100) NULL,
	[Field9] [varchar](100) NULL,
	[Field10] [varchar](100) NULL,
	[Field11] [varchar](100) NULL,
	[Field12] [varchar](100) NULL,
	[Field13] [varchar](100) NULL,
	[Field14] [varchar](100) NULL,
	[Field15] [varchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [WFT\E249496].[Truncate_PFTObjectmappings_20210605]    Script Date: 3/24/2023 7:52:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [WFT\E249496].[Truncate_PFTObjectmappings_20210605](
	[ObjectMappingId] [int] IDENTITY(1,1) NOT NULL,
	[ParentId] [int] NOT NULL,
	[ObjectId] [int] NOT NULL,
	[SequenceNumber] [int] NOT NULL,
	[CreatedBy] [varchar](20) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedBy] [varchar](20) NULL,
	[UpdatedOn] [datetime] NULL
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[AssetRepairTrack] ADD  CONSTRAINT [DF_AssetRepairTrack_AssetRepairTrackId]  DEFAULT (newid()) FOR [AssetRepairTrackId]
GO
ALTER TABLE [dbo].[AssetRepairTrack] ADD  CONSTRAINT [DF_AssetRepairTrack_IsPFTWorkOrderRequired]  DEFAULT ((0)) FOR [IsPFTWorkOrderRequired]
GO
ALTER TABLE [dbo].[AssetRepairTrack] ADD  CONSTRAINT [DF_AssetRepairTrack_IsNCRRequired]  DEFAULT ((0)) FOR [IsNCRRequired]
GO
ALTER TABLE [dbo].[AssetRepairTrack] ADD  CONSTRAINT [DF_AssetRepairTrack_IsAssetFromField]  DEFAULT ((0)) FOR [IsAssetFromField]
GO
ALTER TABLE [dbo].[AssetRepairTrack] ADD  CONSTRAINT [DF_AssetRepairTrack_IsRedTag]  DEFAULT ((0)) FOR [IsRedTag]
GO
ALTER TABLE [dbo].[AssetRepairTrack] ADD  CONSTRAINT [DF_AssetRepairTrack_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[AssetRepairTrack] ADD  CONSTRAINT [DF_AssetRepairTrack_IsIRNotificationSent]  DEFAULT ((0)) FOR [IsIRNotificationSent]
GO
ALTER TABLE [dbo].[AssetRepairTrack] ADD  CONSTRAINT [DF_AssetRepairTrack_NeedsCustomerFeedback]  DEFAULT ((0)) FOR [NeedsCustomerFeedback]
GO
ALTER TABLE [dbo].[AssetRepairTrack] ADD  CONSTRAINT [DF_AssetRepairTrack_IsNeedsCustomerFeedbackEmailSent]  DEFAULT ((0)) FOR [IsNeedsCustomerFeedbackEmailSent]
GO
ALTER TABLE [dbo].[Attachments] ADD  CONSTRAINT [DF_Attachments_7E188EBC]  DEFAULT (newid()) FOR [AttachmentID]
GO
ALTER TABLE [dbo].[Attachments] ADD  CONSTRAINT [DF_Attach_Legac_2902ECC1]  DEFAULT ((0)) FOR [Legacy]
GO
ALTER TABLE [dbo].[Attachments] ADD  CONSTRAINT [DF_Attachments_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [dbo].[AuditBoardItemNums] ADD  CONSTRAINT [DF_AuditBoardItemNums_BoardId]  DEFAULT (newid()) FOR [BoardId]
GO
ALTER TABLE [dbo].[AuditBoardItemNums] ADD  CONSTRAINT [DF_AuditBoardItemNums_IsSoftware]  DEFAULT ((0)) FOR [IsSoftware]
GO
ALTER TABLE [dbo].[AuditCBMMonitorAssetItemNums] ADD  CONSTRAINT [DF__AuditCBMM__IsPar__5CCD74E1]  DEFAULT ((1)) FOR [IsParent]
GO
ALTER TABLE [dbo].[AuditChangeNoticeParts] ADD  CONSTRAINT [DF_AuditChangeNoticeParts_NotApplicable]  DEFAULT ((0)) FOR [NotApplicable]
GO
ALTER TABLE [dbo].[AuditGFAIncidents] ADD  CONSTRAINT [DF_AuditGFAIncidents_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[AuditPFTConfig] ADD  CONSTRAINT [DF_AuditPFTConfig_PFTConfigId]  DEFAULT (newid()) FOR [PFTConfigId]
GO
ALTER TABLE [dbo].[AuditPFTConfig] ADD  CONSTRAINT [DF_AuditPFTConfig_IsDynamic]  DEFAULT ((0)) FOR [IsDynamic]
GO
ALTER TABLE [dbo].[AuditPFTConfig] ADD  CONSTRAINT [DF_AuditPFTConfig_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[AuditPFTConfig] ADD  CONSTRAINT [DF_AuditPFTConfig_IsObsolete]  DEFAULT ((0)) FOR [IsObsolete]
GO
ALTER TABLE [dbo].[AuditPFTConfigFormPFT] ADD  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[AuditPMDispositions] ADD  CONSTRAINT [AuditPMDispositions_PMDispositionId_DEF]  DEFAULT (newid()) FOR [PMDispositionId]
GO
ALTER TABLE [dbo].[AuditPMDispositions] ADD  CONSTRAINT [AuditPMDispositions_Active_DEF]  DEFAULT ((1)) FOR [Active]
GO
ALTER TABLE [dbo].[AuditPMDispositions] ADD  CONSTRAINT [AuditPMDispositions_CreatedOn_DEF]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[AuditRMAnalysis] ADD  CONSTRAINT [DF_AuditR_Audit_5A9A4855]  DEFAULT (newid()) FOR [AuditRMAnalysisID]
GO
ALTER TABLE [dbo].[AuditWorkOrders] ADD  CONSTRAINT [DF_AuditWorkOrders_HasException]  DEFAULT ((0)) FOR [HasException]
GO
ALTER TABLE [dbo].[Batteries] ADD  CONSTRAINT [DF_Batteries_BatteryID]  DEFAULT (newid()) FOR [BatteryID]
GO
ALTER TABLE [dbo].[BHA] ADD  CONSTRAINT [DF_BHA_BHAID]  DEFAULT (newid()) FOR [BHAID]
GO
ALTER TABLE [dbo].[BHAComponents] ADD  CONSTRAINT [DF_BHAComponents_BHACompID]  DEFAULT (newid()) FOR [BHACompID]
GO
ALTER TABLE [dbo].[BitData] ADD  CONSTRAINT [DF_BitData_BitDataID]  DEFAULT (newid()) FOR [BitDataID]
GO
ALTER TABLE [dbo].[BoardFirmwares] ADD  CONSTRAINT [DF_BoardFirmwares_BoardFirmwareId]  DEFAULT (newid()) FOR [BoardFirmwareId]
GO
ALTER TABLE [dbo].[BoardFirmwares] ADD  CONSTRAINT [DF_BoardFirmwares_IsMaster]  DEFAULT ((0)) FOR [IsMaster]
GO
ALTER TABLE [dbo].[BoardFirmwares] ADD  CONSTRAINT [DF_BoardFirmwares_ManufacturingOnly]  DEFAULT ((0)) FOR [ManufacturingOnly]
GO
ALTER TABLE [dbo].[BoardFirmwares] ADD  CONSTRAINT [DF_BoardFirmwares_IsFieldTest]  DEFAULT ((0)) FOR [IsFieldTest]
GO
ALTER TABLE [dbo].[BoardItemNums] ADD  CONSTRAINT [DF_BoardItemNums_BoardID]  DEFAULT (newid()) FOR [BoardId]
GO
ALTER TABLE [dbo].[BoardItemNums] ADD  CONSTRAINT [DF_BoardItemNums_IsSoftware]  DEFAULT ((0)) FOR [IsSoftware]
GO
ALTER TABLE [dbo].[BoreholeCasing] ADD  CONSTRAINT [DF_BoreholeCasing_BoreholeCasingID]  DEFAULT (newid()) FOR [BoreholeCasingID]
GO
ALTER TABLE [dbo].[BoreholeDevRecs] ADD  CONSTRAINT [DF_BoreholeDevRecs_BoreholeDevRecID]  DEFAULT (newid()) FOR [BoreholeDevRecID]
GO
ALTER TABLE [dbo].[BoreholeRecs] ADD  CONSTRAINT [DF_BoreholeRecs_BoreholeRecID]  DEFAULT (newid()) FOR [BoreholeRecID]
GO
ALTER TABLE [dbo].[BranchPlants] ADD  CONSTRAINT [DF_BranchPlants_BranchPlantId]  DEFAULT (newid()) FOR [BranchPlantId]
GO
ALTER TABLE [dbo].[BranchPlants] ADD  CONSTRAINT [DF_BranchPlants_IsOps]  DEFAULT ((0)) FOR [IsOps]
GO
ALTER TABLE [dbo].[BranchPlants] ADD  CONSTRAINT [DF_BranchPlants_IsManufacturing]  DEFAULT ((0)) FOR [IsManufacturing]
GO
ALTER TABLE [dbo].[BranchPlants] ADD  CONSTRAINT [DF_BranchPlants_Active]  DEFAULT ((0)) FOR [Active]
GO
ALTER TABLE [dbo].[BranchPlants] ADD  CONSTRAINT [DF_BranchPlants_IsNonLiveLocation]  DEFAULT ((0)) FOR [IsNonLiveLocation]
GO
ALTER TABLE [dbo].[BranchPlants] ADD  CONSTRAINT [DF_BranchPlants_IsRemovedFromAR]  DEFAULT ((0)) FOR [IsRemovedFromAR]
GO
ALTER TABLE [dbo].[BranchPlants] ADD  CONSTRAINT [DF_BranchPlants_IsOperationsBillableLocation]  DEFAULT ((0)) FOR [IsOperationsBillableLocation]
GO
ALTER TABLE [dbo].[BranchPlants] ADD  DEFAULT ((0)) FOR [IsSuperCenter]
GO
ALTER TABLE [dbo].[BranchPlantSettings] ADD  CONSTRAINT [DF_BranchPlantSettings_IsCached]  DEFAULT ((0)) FOR [IsCached]
GO
ALTER TABLE [dbo].[BusinessUnits] ADD  CONSTRAINT [DF_BusinessUnits_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Calibrations] ADD  CONSTRAINT [DF_Calibrations_CalibType]  DEFAULT ('Calibration') FOR [CalibType]
GO
ALTER TABLE [dbo].[Calibrations] ADD  CONSTRAINT [DF_Calibrations_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[Calibrations] ADD  CONSTRAINT [DF_Calibrations_IntervalType]  DEFAULT ('Months') FOR [IntervalType]
GO
ALTER TABLE [dbo].[CAPASolutionHistory] ADD  CONSTRAINT [DF_CAPASolutionHistory_HistoryId]  DEFAULT (newid()) FOR [HistoryId]
GO
ALTER TABLE [dbo].[CBMMonitorAssetItemNums] ADD  CONSTRAINT [DF__CBMMonito__IsPar__5BD950A8]  DEFAULT ((1)) FOR [IsParent]
GO
ALTER TABLE [dbo].[CBMRunAssetMappings] ADD  CONSTRAINT [DF__CBMRunAss__Creat__54382EE0]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[ChangeNoticeParts] ADD  CONSTRAINT [DF_ChangeNoticeParts_CNPartId]  DEFAULT (newid()) FOR [CNPartId]
GO
ALTER TABLE [dbo].[ChangeNoticeParts] ADD  CONSTRAINT [DF_ChangeNoticeParts_NotApplicable]  DEFAULT ((0)) FOR [NotApplicable]
GO
ALTER TABLE [dbo].[ChangeNoticeParts] ADD  CONSTRAINT [DF_ChangeNoticeParts_LastEdit]  DEFAULT (getdate()) FOR [LastEdit]
GO
ALTER TABLE [dbo].[ChangeNotices] ADD  CONSTRAINT [DF_ChangeNotices_CNId]  DEFAULT (newid()) FOR [CNId]
GO
ALTER TABLE [dbo].[ChangeNotices] ADD  CONSTRAINT [DF_ChangeNotices_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[ChangeRequests] ADD  CONSTRAINT [DF_ChangeRequests_DateSubmitted]  DEFAULT (getdate()) FOR [DateSubmitted]
GO
ALTER TABLE [dbo].[ClientOrderFixedAssets] ADD  CONSTRAINT [DF_ClientOrderFixedAssets_ClientOrderFixedAssetId]  DEFAULT (newid()) FOR [ClientOrderFixedAssetId]
GO
ALTER TABLE [dbo].[ClientOrderFixedAssets] ADD  CONSTRAINT [DF_ClientOrderFixedAssets_DateFilled]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[ClientOrderLines] ADD  CONSTRAINT [DF_ClientOrderLines_ClientOrderLineId]  DEFAULT (newid()) FOR [ClientOrderLineId]
GO
ALTER TABLE [dbo].[ClientOrderLines] ADD  CONSTRAINT [DF_ClientOrderLines_QTY_DELIVERED]  DEFAULT ((0)) FOR [QtyDelivered]
GO
ALTER TABLE [dbo].[ClientOrderLines] ADD  CONSTRAINT [DF_ClientOrderLines_Qty_Billed]  DEFAULT ((0)) FOR [QtyBilled]
GO
ALTER TABLE [dbo].[ClientOrderLines] ADD  CONSTRAINT [DF_ClientOrderLines_KeepRec]  DEFAULT ((1)) FOR [KeepRec]
GO
ALTER TABLE [dbo].[ClientOrderLines] ADD  CONSTRAINT [DF_ClientOrderLines_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[ClientOrders] ADD  CONSTRAINT [DF_ClientOrders_ClientOrderId]  DEFAULT (newid()) FOR [ClientOrderId]
GO
ALTER TABLE [dbo].[ClientOrders] ADD  CONSTRAINT [DF_ClientOrders_COMPLETE]  DEFAULT ((0)) FOR [Complete]
GO
ALTER TABLE [dbo].[ClientOrders] ADD  CONSTRAINT [DF_ClientOrders_IsApproved]  DEFAULT ((1)) FOR [IsApproved]
GO
ALTER TABLE [dbo].[ClientOrders] ADD  CONSTRAINT [DF_ClientOrders_AutoTransfer]  DEFAULT ((1)) FOR [AutoTransfer]
GO
ALTER TABLE [dbo].[ClientOrders] ADD  CONSTRAINT [DF_ClientOrders_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[ClientOrders] ADD  CONSTRAINT [DF_ClientOrders_KeepRec]  DEFAULT ((1)) FOR [KeepRec]
GO
ALTER TABLE [dbo].[ClientOrders] ADD  CONSTRAINT [DF_ClientOrders_TotalCost]  DEFAULT ((0)) FOR [TotalCost]
GO
ALTER TABLE [dbo].[ClientOrders] ADD  CONSTRAINT [DF_ClientOrders_TotalCostIncludingTransfer]  DEFAULT ((0)) FOR [TotalCostIncludingTransfer]
GO
ALTER TABLE [dbo].[ClientOrders] ADD  CONSTRAINT [DF_ClientOrders_Markup]  DEFAULT ((5)) FOR [Markup]
GO
ALTER TABLE [dbo].[ClientOrders] ADD  CONSTRAINT [DF__ClientOrd__IsVoi__30B91D22]  DEFAULT ((0)) FOR [IsVoid]
GO
ALTER TABLE [dbo].[Comments] ADD  CONSTRAINT [DF_Comments_CommentId]  DEFAULT (newid()) FOR [CommentId]
GO
ALTER TABLE [dbo].[ComponentProperties] ADD  CONSTRAINT [DF_PartProperties_ComponentPropertyID]  DEFAULT (newid()) FOR [ComponentPropertyID]
GO
ALTER TABLE [dbo].[ConocoJobDataXml] ADD  CONSTRAINT [DF_ConocoJobDataXml_ConocoJobDataId]  DEFAULT (newid()) FOR [ConocoJobDataId]
GO
ALTER TABLE [dbo].[Countries] ADD  CONSTRAINT [DF_Countries_CountryId]  DEFAULT (newid()) FOR [CountryId]
GO
ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_CustomerId]  DEFAULT (newid()) FOR [CustomerId]
GO
ALTER TABLE [dbo].[CustomsInvoiceConfigDetails] ADD  DEFAULT ((0)) FOR [IsRequired]
GO
ALTER TABLE [dbo].[CustomsInvoiceConfigDetails] ADD  DEFAULT ((0)) FOR [InputSize]
GO
ALTER TABLE [dbo].[CustomsInvoiceConfigDetails] ADD  DEFAULT ((0)) FOR [InputMaxLength]
GO
ALTER TABLE [dbo].[CustomsInvoiceConfigDetails] ADD  DEFAULT ((0)) FOR [IsHeaderInput]
GO
ALTER TABLE [dbo].[CustomsInvoiceConfigDetails] ADD  DEFAULT ((0)) FOR [DisplayOrder]
GO
ALTER TABLE [dbo].[CustomsInvoiceConfigDetails] ADD  DEFAULT ((0)) FOR [AssetShipmentDisplay]
GO
ALTER TABLE [dbo].[CustomsInvoiceConfigDetails] ADD  DEFAULT ((0)) FOR [PartShipmentDisplay]
GO
ALTER TABLE [dbo].[CustomsInvoiceConfigDetails] ADD  DEFAULT ((0)) FOR [PackingSlipDisplay]
GO
ALTER TABLE [dbo].[CustomsInvoiceConfigs] ADD  DEFAULT ((0)) FOR [ShowAdditionalTotals]
GO
ALTER TABLE [dbo].[CustomsInvoiceConfigs] ADD  DEFAULT ((0)) FOR [ShowAdditionalText]
GO
ALTER TABLE [dbo].[CustomsInvoiceConfigs] ADD  DEFAULT ((0)) FOR [ShowRepairCost]
GO
ALTER TABLE [dbo].[CustomsInvoiceDetails] ADD  DEFAULT ((0)) FOR [IsHeader]
GO
ALTER TABLE [dbo].[CustomsInvoiceDetails] ADD  DEFAULT ((0)) FOR [TransferComplete]
GO
ALTER TABLE [dbo].[CustomsInvoiceDetails] ADD  DEFAULT ((0)) FOR [IsDeliveryNoteStart]
GO
ALTER TABLE [dbo].[CustomsInvoiceDetails] ADD  DEFAULT ((0)) FOR [IsDeliveryNoteEnd]
GO
ALTER TABLE [dbo].[CustomsInvoiceDetails] ADD  DEFAULT ((0)) FOR [ICBNumber]
GO
ALTER TABLE [dbo].[CustomsInvoiceDetails] ADD  DEFAULT ((0)) FOR [JDENumber]
GO
ALTER TABLE [dbo].[CustomsInvoices] ADD  DEFAULT ((0)) FOR [IsAirlineApprovalReceived]
GO
ALTER TABLE [dbo].[CustomsInvoices] ADD  DEFAULT ((0)) FOR [IsImportLicenseReceived]
GO
ALTER TABLE [dbo].[CustomsInvoices] ADD  DEFAULT ((0)) FOR [IsNRCNotified]
GO
ALTER TABLE [dbo].[CustomsInvoices] ADD  DEFAULT ((0)) FOR [IsShipmentComplete]
GO
ALTER TABLE [dbo].[CustomsInvoices] ADD  DEFAULT ((0)) FOR [IsDangerousGoods]
GO
ALTER TABLE [dbo].[CustomsInvoices] ADD  DEFAULT ((0)) FOR [IsAssetShipment]
GO
ALTER TABLE [dbo].[CustomsInvoices] ADD  DEFAULT ((0)) FOR [IsRepairShipment]
GO
ALTER TABLE [dbo].[CustomsInvoices] ADD  DEFAULT ((0)) FOR [IsAcordeSubmitted]
GO
ALTER TABLE [dbo].[CustomsInvoices] ADD  DEFAULT ((0)) FOR [IsDomesticShipment]
GO
ALTER TABLE [dbo].[CustomsInvoices] ADD  DEFAULT ((0)) FOR [IsCancelled]
GO
ALTER TABLE [dbo].[CustomsInvoiceStatus] ADD  CONSTRAINT [DF_CustomsInvoiceStatus_CustomsInvoiceStatusId]  DEFAULT ((0)) FOR [CustomsInvoiceStatusId]
GO
ALTER TABLE [dbo].[Daily] ADD  CONSTRAINT [DF_tblDaily_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [dbo].[Daily] ADD  CONSTRAINT [DF_tblDaily_ImportDate]  DEFAULT (getdate()) FOR [ImportDate]
GO
ALTER TABLE [dbo].[Daily] ADD  CONSTRAINT [DF_tblDaily_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[DailyToolComponents] ADD  CONSTRAINT [DF_DailyT_IsUse_030B59BE]  DEFAULT ((0)) FOR [IsUsed]
GO
ALTER TABLE [dbo].[DataDictionary] ADD  CONSTRAINT [DF_DataDi_DataD_691D71D6]  DEFAULT (newid()) FOR [DataDictionaryID]
GO
ALTER TABLE [dbo].[DataFields] ADD  CONSTRAINT [DF_DataFields_NumDisplayRows]  DEFAULT ((1)) FOR [NumDisplayRows]
GO
ALTER TABLE [dbo].[DataFields] ADD  CONSTRAINT [DF_DataFields_IsRequired]  DEFAULT ((0)) FOR [IsRequired]
GO
ALTER TABLE [dbo].[DataFields] ADD  CONSTRAINT [DF_DataFields_IsReadOnly]  DEFAULT ((0)) FOR [IsReadOnly]
GO
ALTER TABLE [dbo].[DataFields] ADD  CONSTRAINT [DF_DataFields_IsReportCriteria]  DEFAULT ((0)) FOR [IsReportCriteria]
GO
ALTER TABLE [dbo].[DataFields] ADD  CONSTRAINT [DF_DataFields_DefaultDisplayOrder]  DEFAULT ((0)) FOR [DefaultDisplayOrder]
GO
ALTER TABLE [dbo].[DataFields] ADD  CONSTRAINT [DF_DataFields_ISACTIVE]  DEFAULT ((0)) FOR [IsActive]
GO
ALTER TABLE [dbo].[DataFields] ADD  CONSTRAINT [DF_DataFields_IsCustomProperty]  DEFAULT ((0)) FOR [IsCustomProperty]
GO
ALTER TABLE [dbo].[DataFields] ADD  CONSTRAINT [DF_DataFields_IsAllowWorkOrder]  DEFAULT ((0)) FOR [IsAllowWorkOrder]
GO
ALTER TABLE [dbo].[Dispatches] ADD  CONSTRAINT [DF_Dispatch_DispatchId]  DEFAULT (newid()) FOR [DispatchId]
GO
ALTER TABLE [dbo].[DispatchInstanceItems] ADD  CONSTRAINT [DF_DispatchInstanceItem_DispatchInstanceItemId]  DEFAULT (newid()) FOR [DispatchInstanceItemId]
GO
ALTER TABLE [dbo].[DispatchInstances] ADD  CONSTRAINT [DF_DispatchInstance_DispatchInstanceId]  DEFAULT (newid()) FOR [DispatchInstanceId]
GO
ALTER TABLE [dbo].[DocItemAttach] ADD  CONSTRAINT [DF_DocItemAttach_DocItemAttachId]  DEFAULT (newid()) FOR [DocItemAttachId]
GO
ALTER TABLE [dbo].[DocItems] ADD  CONSTRAINT [DF_DocItems_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[DocItemUserPermissions] ADD  CONSTRAINT [DF_DocItemUserPermissions_HasWriteAccess]  DEFAULT ((0)) FOR [HasWriteAccess]
GO
ALTER TABLE [dbo].[DocItemUserPermissions] ADD  CONSTRAINT [DF_DocItemUserPermissions_HasDeleteAccess]  DEFAULT ((0)) FOR [HasDeleteAccess]
GO
ALTER TABLE [dbo].[DocItemUserPermissions] ADD  CONSTRAINT [DF_DocItemUserPermissions_HasFullAccess]  DEFAULT ((0)) FOR [HasFullAccess]
GO
ALTER TABLE [dbo].[DownloadData] ADD  CONSTRAINT [DF_Downlo_Downl_6458BCB9]  DEFAULT (newid()) FOR [DownloadDataID]
GO
ALTER TABLE [dbo].[DownloadFrequencies] ADD  CONSTRAINT [DF_Downlo_Downl_6DE226F3]  DEFAULT (newid()) FOR [DownloadFrequencyID]
GO
ALTER TABLE [dbo].[DownloadLists] ADD  CONSTRAINT [DF_DownloadLists_DownloadModeID]  DEFAULT (newid()) FOR [DownloadListID]
GO
ALTER TABLE [dbo].[DownloadModes] ADD  CONSTRAINT [DF_Downlo_Downl_72A6DC10]  DEFAULT (newid()) FOR [DownloadModeID]
GO
ALTER TABLE [dbo].[ECNs] ADD  CONSTRAINT [DF_ECNs_ECNType]  DEFAULT ((1)) FOR [ECNType]
GO
ALTER TABLE [dbo].[ECNs] ADD  CONSTRAINT [DF_ECNs_IsFromJDE]  DEFAULT ((0)) FOR [IsFromJDE]
GO
ALTER TABLE [dbo].[ECRActionItems] ADD  CONSTRAINT [DF_ECRActionItems_ECRActionItemId]  DEFAULT (newid()) FOR [ECRActionItemId]
GO
ALTER TABLE [dbo].[ECRApprovalStatus] ADD  CONSTRAINT [DF_ECRApprovalStatus_ECRApprovalStatusId]  DEFAULT (newid()) FOR [ECRApprovalStatusId]
GO
ALTER TABLE [dbo].[ECRApprovalStatus] ADD  CONSTRAINT [DF_ECRApprovalStatus_ProcessedBy]  DEFAULT ((0)) FOR [ProcessedBy]
GO
ALTER TABLE [dbo].[ECRDocuments] ADD  CONSTRAINT [DF_ECRDocuments_ECRDocumentId]  DEFAULT (newid()) FOR [ECRDocumentId]
GO
ALTER TABLE [dbo].[ECREmails] ADD  CONSTRAINT [DF_ECREmails_ECREmailId]  DEFAULT (newid()) FOR [ECREmailId]
GO
ALTER TABLE [dbo].[ECREmails] ADD  CONSTRAINT [DF_ECREmails_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[ECRPartNums] ADD  CONSTRAINT [DF_ECRPartNums_ECRPartNumId]  DEFAULT (newid()) FOR [ECRPartNumId]
GO
ALTER TABLE [dbo].[Employees] ADD  CONSTRAINT [DF_Employees_ID]  DEFAULT (newid()) FOR [ID]
GO
ALTER TABLE [dbo].[EngineersOnDuty] ADD  CONSTRAINT [DF_Employees_EmpID]  DEFAULT (newid()) FOR [EmpID]
GO
ALTER TABLE [dbo].[EngineersOnDuty] ADD  DEFAULT ((0)) FOR [IsLead]
GO
ALTER TABLE [dbo].[ETLStoredProcedures] ADD  CONSTRAINT [DF_ETLSProcedures_ETLSProcedureId]  DEFAULT (newid()) FOR [ETLStoredProcedureId]
GO
ALTER TABLE [dbo].[ETLStoredProcedures] ADD  CONSTRAINT [DF_ETLStoredProcedures_Sequence]  DEFAULT ((0)) FOR [Sequence]
GO
ALTER TABLE [dbo].[FailureCategories] ADD  CONSTRAINT [DF_FailureCategories_FailureCategoryId]  DEFAULT (newid()) FOR [FailureCategoryId]
GO
ALTER TABLE [dbo].[FailureCategories] ADD  DEFAULT ((0)) FOR [IsHistorical]
GO
ALTER TABLE [dbo].[FailureCodes] ADD  CONSTRAINT [DF_FailureCodes_FailureCodeId]  DEFAULT (newid()) FOR [FailureCodeId]
GO
ALTER TABLE [dbo].[FailureCodes] ADD  DEFAULT ((0)) FOR [IsHistorical]
GO
ALTER TABLE [dbo].[FailureSubCategories] ADD  CONSTRAINT [DF_FailureSubCategories_FailureSubCategoryId]  DEFAULT (newid()) FOR [FailureSubCategoryId]
GO
ALTER TABLE [dbo].[FailureSubCategories] ADD  DEFAULT ((0)) FOR [IsHistorical]
GO
ALTER TABLE [dbo].[FixedAssets] ADD  CONSTRAINT [DF_FixedAssets_FixedAssetId]  DEFAULT (newid()) FOR [FixedAssetId]
GO
ALTER TABLE [dbo].[FixedAssets] ADD  CONSTRAINT [DF_FixedAssets_IsAdvisorOnly]  DEFAULT ((0)) FOR [IsAdvisorOnly]
GO
ALTER TABLE [dbo].[FixedAssets] ADD  CONSTRAINT [DF_FixedAssets_NotUsed]  DEFAULT ((0)) FOR [NotUsed]
GO
ALTER TABLE [dbo].[FixedAssets] ADD  CONSTRAINT [DF_FixedAssets_IsAddByWorkOrder]  DEFAULT ((0)) FOR [IsAddByWorkOrder]
GO
ALTER TABLE [dbo].[FixedAssets] ADD  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[FracasAudit] ADD  CONSTRAINT [DF_FracasAudit_tblFracasAudit]  DEFAULT (newid()) FOR [FracasAudit]
GO
ALTER TABLE [dbo].[FracasAudit] ADD  CONSTRAINT [DF_FracasAudit_CommentDate]  DEFAULT (getdate()) FOR [CommentDate]
GO
ALTER TABLE [dbo].[FracasBHA] ADD  CONSTRAINT [DF_FracasBHA_FracasID]  DEFAULT (newid()) FOR [FracasID]
GO
ALTER TABLE [dbo].[FracasBHA] ADD  CONSTRAINT [DF_FracasBHA_Dist_LWD]  DEFAULT ((0)) FOR [Dist_LWD]
GO
ALTER TABLE [dbo].[FracasBHA] ADD  CONSTRAINT [DF_FracasBHA_Dist_DD]  DEFAULT ((0)) FOR [Dist_DD]
GO
ALTER TABLE [dbo].[FracasBHA] ADD  CONSTRAINT [DF_FracasBHA_Dist_MWD]  DEFAULT ((0)) FOR [Dist_MWD]
GO
ALTER TABLE [dbo].[FracasBHA] ADD  CONSTRAINT [DF_FracasBHA_Dist_RSS]  DEFAULT ((0)) FOR [Dist_RSS]
GO
ALTER TABLE [dbo].[FracasBHA] ADD  CONSTRAINT [DF_FracasBHA_Dist_SURVEY]  DEFAULT ((0)) FOR [Dist_SURVEY]
GO
ALTER TABLE [dbo].[FracasBHA] ADD  CONSTRAINT [DF_FracasBHA_Global_LWD]  DEFAULT ((0)) FOR [Global_LWD]
GO
ALTER TABLE [dbo].[FracasBHA] ADD  CONSTRAINT [DF_FracasBHA_Global_DD]  DEFAULT ((0)) FOR [Global_DD]
GO
ALTER TABLE [dbo].[FracasBHA] ADD  CONSTRAINT [DF_FracasBHA_Global_MWD]  DEFAULT ((0)) FOR [Global_MWD]
GO
ALTER TABLE [dbo].[FracasBHA] ADD  CONSTRAINT [DF_FracasBHA_Global_RSS]  DEFAULT ((0)) FOR [Global_RSS]
GO
ALTER TABLE [dbo].[FracasBHA] ADD  CONSTRAINT [DF_FracasBHA_Global_SURVEY]  DEFAULT ((0)) FOR [Global_SURVEY]
GO
ALTER TABLE [dbo].[FracasBHA] ADD  CONSTRAINT [DF_Fracas_Stage_2E2AC1ED]  DEFAULT ((0)) FOR [StageCount]
GO
ALTER TABLE [dbo].[FracasBHA] ADD  CONSTRAINT [DF_FracasBHA_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[FracasComponents] ADD  CONSTRAINT [DF_FracasComponents_FracasComponentID]  DEFAULT (newid()) FOR [FracasComponentID]
GO
ALTER TABLE [dbo].[FracasComponents] ADD  CONSTRAINT [DF_FracasComponents_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[FracasComponents] ADD  DEFAULT ((0)) FOR [StageCount]
GO
ALTER TABLE [dbo].[FracasPTCRunMap] ADD  CONSTRAINT [DF__Fracas__DateL__1BA1FD5E]  DEFAULT (getdate()) FOR [ApiCallDate]
GO
ALTER TABLE [dbo].[GFAComponents] ADD  CONSTRAINT [DF_GFAComponentInfo_GFAComponentInfoID]  DEFAULT (newid()) FOR [GFAComponentId]
GO
ALTER TABLE [dbo].[GFAComponents] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[GFAIncidents] ADD  CONSTRAINT [DF_GFAIncidents_GFAID]  DEFAULT (newid()) FOR [GFAId]
GO
ALTER TABLE [dbo].[GFAIncidents] ADD  CONSTRAINT [DF__GFAIncident__TFF__54376389]  DEFAULT ((0)) FOR [TFF]
GO
ALTER TABLE [dbo].[GFAIncidents] ADD  CONSTRAINT [DF__GFAIncidents__CI__552B87C2]  DEFAULT ((0)) FOR [CI]
GO
ALTER TABLE [dbo].[GFAIncidents] ADD  CONSTRAINT [DF__GFAIncident__NCI__561FABFB]  DEFAULT ((0)) FOR [NCI]
GO
ALTER TABLE [dbo].[GFAIncidents] ADD  CONSTRAINT [DF__GFAIncide__Vibra__5713D034]  DEFAULT ((0)) FOR [VibrationLevel]
GO
ALTER TABLE [dbo].[GFAIncidents] ADD  CONSTRAINT [DF__GFAIncide__Coord__5807F46D]  DEFAULT ((0)) FOR [CoordContacted]
GO
ALTER TABLE [dbo].[GFAIncidents] ADD  CONSTRAINT [DF__GFAIncide__Globa__58FC18A6]  DEFAULT ((0)) FOR [GlobalContacted]
GO
ALTER TABLE [dbo].[GFAIncidents] ADD  CONSTRAINT [DF__GFAIncide__Is303__59F03CDF]  DEFAULT ((0)) FOR [Is3030]
GO
ALTER TABLE [dbo].[GFAIncidents] ADD  CONSTRAINT [DF__GFAIncide__Email__5AE46118]  DEFAULT ((0)) FOR [EmailSent]
GO
ALTER TABLE [dbo].[GFAIncidents] ADD  CONSTRAINT [DF__GFAIncide__IsDel__5CCCA98A]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[GLCodes] ADD  DEFAULT (getdate()) FOR [UpdatedOn]
GO
ALTER TABLE [dbo].[GLProductLineBranchPlantMappings] ADD  DEFAULT (getdate()) FOR [UpdatedOn]
GO
ALTER TABLE [dbo].[GLProductLines] ADD  DEFAULT (getdate()) FOR [UpdatedOn]
GO
ALTER TABLE [dbo].[Hydraulics] ADD  CONSTRAINT [DF_Hydraulics_HydraulicID]  DEFAULT (newid()) FOR [HydraulicID]
GO
ALTER TABLE [dbo].[IncidentFaultCodes] ADD  CONSTRAINT [DF_IncidentFaultCodes_IncidentFaultCodeId]  DEFAULT (newid()) FOR [IncidentFaultCodeId]
GO
ALTER TABLE [dbo].[Incidents] ADD  DEFAULT ((0)) FOR [Dist_LWD]
GO
ALTER TABLE [dbo].[Incidents] ADD  DEFAULT ((0)) FOR [Dist_DD]
GO
ALTER TABLE [dbo].[Incidents] ADD  DEFAULT ((0)) FOR [Dist_MWD]
GO
ALTER TABLE [dbo].[Incidents] ADD  DEFAULT ((0)) FOR [Dist_RSS]
GO
ALTER TABLE [dbo].[Incidents] ADD  DEFAULT ((0)) FOR [Global_LWD]
GO
ALTER TABLE [dbo].[Incidents] ADD  DEFAULT ((0)) FOR [Global_DD]
GO
ALTER TABLE [dbo].[Incidents] ADD  DEFAULT ((0)) FOR [Global_MWD]
GO
ALTER TABLE [dbo].[Incidents] ADD  DEFAULT ((0)) FOR [Global_RSS]
GO
ALTER TABLE [dbo].[Incidents] ADD  DEFAULT ((0)) FOR [Dist_SURVEY]
GO
ALTER TABLE [dbo].[Incidents] ADD  DEFAULT ((0)) FOR [Global_SURVEY]
GO
ALTER TABLE [dbo].[Incidents] ADD  DEFAULT ((0)) FOR [IsHistorical]
GO
ALTER TABLE [dbo].[Incidents] ADD  DEFAULT ((0)) FOR [IsDownHole]
GO
ALTER TABLE [dbo].[Incidents] ADD  DEFAULT ((0)) FOR [Dist_SURFACE]
GO
ALTER TABLE [dbo].[Incidents] ADD  DEFAULT ((0)) FOR [Global_SURFACE]
GO
ALTER TABLE [dbo].[Incidents] ADD  CONSTRAINT [DF_Incidents_Criticality]  DEFAULT ((0)) FOR [Criticality]
GO
ALTER TABLE [dbo].[ItemNumBranchPlants] ADD  CONSTRAINT [DF_ItemNumBranchPlants_ItemNumBranchPlantId]  DEFAULT (newid()) FOR [ItemNumBranchPlantId]
GO
ALTER TABLE [dbo].[ItemNumConfigHistory] ADD  CONSTRAINT [DF_ItemNumConfigHistory_ItemNumConfigId_1]  DEFAULT (newid()) FOR [ItemNumConfigHistoryId]
GO
ALTER TABLE [dbo].[ItemNumConfigHistory] ADD  CONSTRAINT [DF_ItemNumConfigHistory_IsRequired]  DEFAULT ((0)) FOR [IsRequired]
GO
ALTER TABLE [dbo].[ItemNumConfigs] ADD  CONSTRAINT [DF_ItemNumConfigs_ItemNumConfigId]  DEFAULT (newid()) FOR [ItemNumConfigId]
GO
ALTER TABLE [dbo].[ItemNumConfigs] ADD  CONSTRAINT [DF_ItemNumConfigs_IsRequired]  DEFAULT ((0)) FOR [IsRequired]
GO
ALTER TABLE [dbo].[ItemNumMetadata] ADD  CONSTRAINT [DF_ItemNumMetadata_ItemNumMetaDataId]  DEFAULT (newid()) FOR [ItemNumMetaDataId]
GO
ALTER TABLE [dbo].[ItemNumReferences] ADD  DEFAULT (newid()) FOR [ItemNumReferenceId]
GO
ALTER TABLE [dbo].[ItemNumReferences] ADD  DEFAULT ('R') FOR [RefType]
GO
ALTER TABLE [dbo].[ItemNumRevisions] ADD  CONSTRAINT [DF_ItemNumRevisions_ItemNumRevisionId]  DEFAULT (newid()) FOR [ItemNumRevisionId]
GO
ALTER TABLE [dbo].[ItemNums] ADD  CONSTRAINT [DF_ItemNums_ItemNumId]  DEFAULT (newid()) FOR [ItemNumId]
GO
ALTER TABLE [dbo].[ItemNums] ADD  CONSTRAINT [DF_ItemNums_IsObsolete]  DEFAULT ((0)) FOR [IsObsolete]
GO
ALTER TABLE [dbo].[ItemNums] ADD  CONSTRAINT [DF_ItemNums_IsRestrictPurchasing]  DEFAULT ((0)) FOR [IsRestrictPurchasing]
GO
ALTER TABLE [dbo].[ItemNums] ADD  CONSTRAINT [DF_ItemNums_IsAsset]  DEFAULT ((0)) FOR [IsAsset]
GO
ALTER TABLE [dbo].[ItemNums] ADD  CONSTRAINT [DF_ItemNums_Active]  DEFAULT ((0)) FOR [Active]
GO
ALTER TABLE [dbo].[ItemNums] ADD  CONSTRAINT [DF_ItemNums_TEROrderMultiple]  DEFAULT ((1)) FOR [TEROrderMultiple]
GO
ALTER TABLE [dbo].[ItemNums] ADD  CONSTRAINT [DF_ItemNums_EcnRestriction]  DEFAULT ((0)) FOR [EcnRestriction]
GO
ALTER TABLE [dbo].[JarActivities] ADD  CONSTRAINT [DF_JarActivities_JarActivityId]  DEFAULT (newid()) FOR [JarActivityId]
GO
ALTER TABLE [dbo].[JarActivityPersonnel] ADD  CONSTRAINT [DF_JarActivityPersonnel_JarActivityPersonnelId]  DEFAULT (newid()) FOR [JarActivityPersonnelId]
GO
ALTER TABLE [dbo].[JarRuns] ADD  CONSTRAINT [DF_JarRuns_JarRunId]  DEFAULT (newid()) FOR [JarRunId]
GO
ALTER TABLE [dbo].[JarRunTools] ADD  CONSTRAINT [DF_JarRunTools_JarRunToolId]  DEFAULT (newid()) FOR [JarRunToolId]
GO
ALTER TABLE [dbo].[JarRunTools] ADD  CONSTRAINT [DF_JarRunTools_IsBackup]  DEFAULT ((0)) FOR [IsBackup]
GO
ALTER TABLE [dbo].[JarRunTools] ADD  CONSTRAINT [DF_JarRunTools_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[JDEWorkOrderComponents] ADD  CONSTRAINT [DF_JDEWorkOrderComponents_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[JDEWOSwapInFeeds] ADD  CONSTRAINT [DF_JDEWOSwapInFeeds_ProcessState]  DEFAULT ((0)) FOR [ProcessState]
GO
ALTER TABLE [dbo].[Job] ADD  DEFAULT ((1)) FOR [Active]
GO
ALTER TABLE [dbo].[JobAudit] ADD  CONSTRAINT [DF__JobAud__JobAu__16CF2DED]  DEFAULT (newid()) FOR [JobAuditID]
GO
ALTER TABLE [dbo].[JobAudit] ADD  CONSTRAINT [DF__JobAud__IsDel__17C35226]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[JobCapacityReportConfig] ADD  CONSTRAINT [DF_JobCapacityReportConfig_ToolPanel]  DEFAULT ('') FOR [ToolPanel]
GO
ALTER TABLE [dbo].[JobCommentCodes] ADD  DEFAULT ((1)) FOR [Display]
GO
ALTER TABLE [dbo].[JobInventory] ADD  CONSTRAINT [DF_JobInvent_Inven_37861642]  DEFAULT (newid()) FOR [JobInventoryID]
GO
ALTER TABLE [dbo].[JobPersonnel] ADD  CONSTRAINT [DF_JobPersonnel_JobPersonnelID]  DEFAULT (newid()) FOR [JobPersonnelID]
GO
ALTER TABLE [dbo].[JobPersonnel] ADD  CONSTRAINT [DF_JobPersonnel_IsLead]  DEFAULT ((0)) FOR [IsLead]
GO
ALTER TABLE [dbo].[JobQueue] ADD  CONSTRAINT [DF_JobQueue_Retries]  DEFAULT ((0)) FOR [CurrentRetry]
GO
ALTER TABLE [dbo].[JobQueue] ADD  CONSTRAINT [DF_JobQueue_AutoRetryCount]  DEFAULT ((0)) FOR [AutoRetryCount]
GO
ALTER TABLE [dbo].[Jobs] ADD  CONSTRAINT [DF_Jobs_JobID]  DEFAULT (newid()) FOR [JobId]
GO
ALTER TABLE [dbo].[Jobs] ADD  CONSTRAINT [DF_Jobs_ImportStatus]  DEFAULT ('Active') FOR [ImportStatus]
GO
ALTER TABLE [dbo].[Jobs] ADD  CONSTRAINT [DF_Jobs_IsDS]  DEFAULT ((1)) FOR [IsDS]
GO
ALTER TABLE [dbo].[Jobs] ADD  CONSTRAINT [DF_Jobs_IsJarOnly]  DEFAULT ((0)) FOR [IsJarOnly]
GO
ALTER TABLE [dbo].[Jobs] ADD  CONSTRAINT [DF_Jobs_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [dbo].[Jobs] ADD  CONSTRAINT [DF_Jobs_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Lookups] ADD  CONSTRAINT [DF_Lookups_IsDynamic]  DEFAULT ((0)) FOR [IsDynamic]
GO
ALTER TABLE [dbo].[LookupValues] ADD  CONSTRAINT [DF_LookupValues_DisplayOrder]  DEFAULT ((0)) FOR [DisplayOrder]
GO
ALTER TABLE [dbo].[LookupValues] ADD  CONSTRAINT [DF_LookupValues_IsDefault]  DEFAULT ((0)) FOR [IsDefault]
GO
ALTER TABLE [dbo].[LookupValues] ADD  CONSTRAINT [DF_LookupValues_IsActive]  DEFAULT ((0)) FOR [IsActive]
GO
ALTER TABLE [dbo].[LostTime] ADD  CONSTRAINT [DF_LostTime_LostTimeID]  DEFAULT (newid()) FOR [LostTimeID]
GO
ALTER TABLE [dbo].[LostTime] ADD  DEFAULT ((0)) FOR [TFF]
GO
ALTER TABLE [dbo].[LostTime] ADD  DEFAULT ((0)) FOR [CSI]
GO
ALTER TABLE [dbo].[MCApprovals] ADD  CONSTRAINT [DF_MCApprovals_ApprovalId]  DEFAULT (newid()) FOR [ApprovalId]
GO
ALTER TABLE [dbo].[MCApprovals] ADD  CONSTRAINT [DF_MCApprovals_IsApproved]  DEFAULT ('N') FOR [IsApproved]
GO
ALTER TABLE [dbo].[MCApprovals] ADD  CONSTRAINT [DF_MCApprovals_Stage]  DEFAULT ((0)) FOR [Stage]
GO
ALTER TABLE [dbo].[MCApprovals] ADD  CONSTRAINT [DF_MCApprovals_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[MCApprovers] ADD  CONSTRAINT [DF_MCApprovers_ApproverId]  DEFAULT (newid()) FOR [ApproverId]
GO
ALTER TABLE [dbo].[MCApprovers] ADD  CONSTRAINT [DF_MCApprovers_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[MCApprovers] ADD  CONSTRAINT [DF_MCApprovers_IsDefault]  DEFAULT ((0)) FOR [IsDefault]
GO
ALTER TABLE [dbo].[MCComments] ADD  CONSTRAINT [DF_MCComments_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[MCGroups] ADD  CONSTRAINT [DF_MCGroups_GroupId]  DEFAULT (newid()) FOR [GroupId]
GO
ALTER TABLE [dbo].[MCRoles] ADD  CONSTRAINT [DF_MCRoles_BranchPlantOnly]  DEFAULT ((0)) FOR [IsBranchPlant]
GO
ALTER TABLE [dbo].[MCUserGroups] ADD  CONSTRAINT [DF_EmailGroups_EmailGroupId]  DEFAULT (newid()) FOR [UserGroupId]
GO
ALTER TABLE [dbo].[MotorData] ADD  CONSTRAINT [DF_MotorData_MotorDataID]  DEFAULT (newid()) FOR [MotorDataID]
GO
ALTER TABLE [dbo].[MudBases] ADD  CONSTRAINT [DF_Mud_MudBases_MudBaseID]  DEFAULT (newid()) FOR [MudBaseID]
GO
ALTER TABLE [dbo].[MudData] ADD  CONSTRAINT [DF_MudData_MudDataID]  DEFAULT (newid()) FOR [MudDataID]
GO
ALTER TABLE [dbo].[MudData] ADD  CONSTRAINT [DF_tblMudData_TemperatureVerified]  DEFAULT ((0)) FOR [TemperatureVerified]
GO
ALTER TABLE [dbo].[MudRecs] ADD  CONSTRAINT [DF_MudRec_MudRe_56FEC19B]  DEFAULT (newid()) FOR [MudRecID]
GO
ALTER TABLE [dbo].[NCRFailedComponents] ADD  CONSTRAINT [DF_NCRFailedComponents_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[NCRRequests] ADD  CONSTRAINT [DF_NCRRequests_IsBasedOnMeridian]  DEFAULT ((0)) FOR [IsBasedOnMeridian]
GO
ALTER TABLE [dbo].[OneViewCBMRunAssetMappings] ADD  CONSTRAINT [DF_OneViewCBMRunAssetMappings_CreateOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[PartDescPFTConfigs] ADD  CONSTRAINT [DF_PartDescPFTConfigs_PartDescPFTConfigID]  DEFAULT (newid()) FOR [PartDescPFTConfigID]
GO
ALTER TABLE [dbo].[PartDescPFTConfigs] ADD  CONSTRAINT [DF_PartDescPFTConfigs_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsSrcWorkOrder]  DEFAULT ((0)) FOR [IsSrcWorkOrder]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsDestWorkOrder]  DEFAULT ((0)) FOR [IsDestWorkOrder]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsSrcWorkOrderChild]  DEFAULT ((0)) FOR [IsSrcWorkOrderChild]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsDestWorkOrderChild]  DEFAULT ((0)) FOR [IsDestWorkOrderChild]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsSrcDispatch]  DEFAULT ((0)) FOR [IsSrcDispatch]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsDestDispatch]  DEFAULT ((0)) FOR [IsDestDispatch]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsSrcAIRT]  DEFAULT ((0)) FOR [IsSrcAIRT]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsDestAIRT]  DEFAULT ((0)) FOR [IsDestAIRT]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsSrcPFT]  DEFAULT ((0)) FOR [IsSrcPFT]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsDestPFT]  DEFAULT ((0)) FOR [IsDestPFT]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsSrcBuildSheet]  DEFAULT ((0)) FOR [IsSrcBuildSheet]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsDestBuildSheet]  DEFAULT ((0)) FOR [IsDestBuildSheet]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsActive]  DEFAULT ((0)) FOR [IsActive]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsAssigned]  DEFAULT ((0)) FOR [IsAssigned]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsAvailable]  DEFAULT ((0)) FOR [IsAvailable]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsDisposed_1]  DEFAULT ((0)) FOR [IsDisposed]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsTesting]  DEFAULT ((0)) FOR [IsTesting]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsRepair]  DEFAULT ((0)) FOR [IsRepair]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsTransit]  DEFAULT ((0)) FOR [IsTransit]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsParked]  DEFAULT ((0)) FOR [IsParked]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsOther]  DEFAULT ((0)) FOR [IsOther]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsSrcStatus]  DEFAULT ((0)) FOR [IsSrcStatus]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsDestStatus]  DEFAULT ((0)) FOR [IsDestStatus]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsInActive]  DEFAULT ((0)) FOR [IsInActive]
GO
ALTER TABLE [dbo].[PartStatus] ADD  CONSTRAINT [DF_PartStatus_IsTrend]  DEFAULT ((0)) FOR [IsTrend]
GO
ALTER TABLE [dbo].[PartTransferDtl] ADD  CONSTRAINT [DF_PartTransferDtl_PartTransferDtlId]  DEFAULT (newid()) FOR [PartTransferDtlId]
GO
ALTER TABLE [dbo].[PartTransfers] ADD  CONSTRAINT [DF_PartTransfers_PartTransferId]  DEFAULT (newid()) FOR [PartTransferId]
GO
ALTER TABLE [dbo].[PartTypeProperties] ADD  CONSTRAINT [DF_PartTypeProperties_PartTypePropertyID]  DEFAULT (newid()) FOR [PartTypePropertyID]
GO
ALTER TABLE [dbo].[PartTypeProperties] ADD  DEFAULT ((0)) FOR [IsRequired]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [Occurrence]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [HEL_LWD]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [HEL_EM]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [RSS]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [EM]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [EM_TWINWELLS]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [HYPERPULSE]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [AGS]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [BECFIELD]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [DMT_AMS]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [GEOLINK]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [GWD]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [TENSOR]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [WPR]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [MOTOR]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [SURFACE]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [Primary]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ('N') FOR [IsValidated]
GO
ALTER TABLE [dbo].[PartTypes] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[PassThru] ADD  CONSTRAINT [DF_PassThru_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[PFTBoardFirmwares] ADD  CONSTRAINT [DF_Table_1_PFTFirmwareVersionId]  DEFAULT (newid()) FOR [PFTBoardFirmwareId]
GO
ALTER TABLE [dbo].[PFTBoardFirmwares] ADD  CONSTRAINT [DF_PFTBoardFirmwares_IsMaster]  DEFAULT ((0)) FOR [IsMaster]
GO
ALTER TABLE [dbo].[PFTConfig] ADD  CONSTRAINT [DF_ProcessFlows_ProcessFlowId]  DEFAULT (newid()) FOR [PFTConfigId]
GO
ALTER TABLE [dbo].[PFTConfig] ADD  CONSTRAINT [DF_PFTConfig_IsDynamic]  DEFAULT ((0)) FOR [IsDynamic]
GO
ALTER TABLE [dbo].[PFTConfig] ADD  CONSTRAINT [DF_ProcessFlows_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[PFTConfig] ADD  CONSTRAINT [DF_PFTConfig_IsObsolete]  DEFAULT ((0)) FOR [IsObsolete]
GO
ALTER TABLE [dbo].[PFTConfigFormPFT] ADD  DEFAULT (newid()) FOR [PFTConfigFormPFTId]
GO
ALTER TABLE [dbo].[PFTConfigFormPFT] ADD  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[PFTConfigFormSeq] ADD  DEFAULT (newid()) FOR [PFTConfigSeqId]
GO
ALTER TABLE [dbo].[PFTConfigFormSeq] ADD  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[PFTConfigSeq] ADD  CONSTRAINT [DF_PFSequences_PFSeqId]  DEFAULT (newid()) FOR [PFTConfigSeqId]
GO
ALTER TABLE [dbo].[PFTConfigSeq] ADD  CONSTRAINT [DF_PFSequences_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[PFTLabs] ADD  CONSTRAINT [DF_SequenceLocations_PFSeqLocId]  DEFAULT (newid()) FOR [PFTLabId]
GO
ALTER TABLE [dbo].[PFTLabs] ADD  CONSTRAINT [DF_SeqLocations_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[PFTTestData] ADD  CONSTRAINT [DF_PFTTestData_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[PFTWO] ADD  CONSTRAINT [DF_ProcessFlowWorkOrders_PFWOId]  DEFAULT (newid()) FOR [PFTWOId]
GO
ALTER TABLE [dbo].[PFTWO] ADD  CONSTRAINT [DF_PFVisits_Active]  DEFAULT ((1)) FOR [Active]
GO
ALTER TABLE [dbo].[PFTWO] ADD  CONSTRAINT [DF_PFTWO_IsDynamic]  DEFAULT ((0)) FOR [IsDynamic]
GO
ALTER TABLE [dbo].[PFTWO] ADD  CONSTRAINT [DF_PFTWO_IsDebug]  DEFAULT ((0)) FOR [IsDebug]
GO
ALTER TABLE [dbo].[PFTWO] ADD  CONSTRAINT [DF_PFTWO_IsRTV]  DEFAULT ((0)) FOR [IsRTV]
GO
ALTER TABLE [dbo].[PFTWO] ADD  CONSTRAINT [DF_PFVisits_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[PFTWOFormCollectionFields] ADD  CONSTRAINT [DF_PFTWOFormCollectionFields_PFTWOFormCollectionFieldId]  DEFAULT (newid()) FOR [PFTWOFormCollectionFieldId]
GO
ALTER TABLE [dbo].[PFTWOFormCollectionFields] ADD  CONSTRAINT [DF_PFTWOFormCollectionFields_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[PFTWOFormCollections] ADD  CONSTRAINT [DF_PFTWOFormCollections_PFTWOFormCollectionId]  DEFAULT (newid()) FOR [PFTWOFormCollectionId]
GO
ALTER TABLE [dbo].[PFTWOFormCollections] ADD  CONSTRAINT [DF_PFTWOFormCollections_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[PFTWOForms] ADD  CONSTRAINT [DF_PFTWOForms_PFTWOFormCollectionId]  DEFAULT (newid()) FOR [PFTWOFormId]
GO
ALTER TABLE [dbo].[PFTWOForms] ADD  CONSTRAINT [DF_PFTWOForms_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[PFTWOSeq] ADD  CONSTRAINT [DF_PFWOSequences_PFWOSeqId]  DEFAULT (newid()) FOR [PFTWOSeqId]
GO
ALTER TABLE [dbo].[PFTWOSeq] ADD  CONSTRAINT [DF_PFTWOSeq_IsDebug]  DEFAULT ((0)) FOR [IsDebug]
GO
ALTER TABLE [dbo].[PFTWOSeq] ADD  CONSTRAINT [DF_PFTWOSeq_IsRTV]  DEFAULT ((0)) FOR [IsRTV]
GO
ALTER TABLE [dbo].[PFTWOSeq] ADD  CONSTRAINT [DF_PFWOSequences_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[PFTWOSeqFields] ADD  CONSTRAINT [DF_PFWOSeqField_PFTWOSeqFieldId]  DEFAULT (newid()) FOR [PFTWOSeqFieldId]
GO
ALTER TABLE [dbo].[PFTWOSeqFields] ADD  CONSTRAINT [DF_PFWOSeqFields_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[PMDispositionItems] ADD  CONSTRAINT [DF_PMDispositionItems_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[PMDispositions] ADD  CONSTRAINT [PMDispositions_PMDispositionId_DEF]  DEFAULT (newid()) FOR [PMDispositionId]
GO
ALTER TABLE [dbo].[PMDispositions] ADD  CONSTRAINT [PMDispositions_Active_DEF]  DEFAULT ((1)) FOR [Active]
GO
ALTER TABLE [dbo].[PMDispositions] ADD  CONSTRAINT [PMDispositions_CreatedOn_DEF]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[PortletColumns] ADD  CONSTRAINT [DF_PortletColumns_IsSortable]  DEFAULT ((1)) FOR [IsSortable]
GO
ALTER TABLE [dbo].[PortletColumns] ADD  CONSTRAINT [DF_PortletColumns_IsHidden]  DEFAULT ((0)) FOR [IsHidden]
GO
ALTER TABLE [dbo].[PortletColumns] ADD  CONSTRAINT [DF_PortletColumns_IsHideable]  DEFAULT ((0)) FOR [IsHideable]
GO
ALTER TABLE [dbo].[PortletColumns] ADD  CONSTRAINT [DF_PortletColumns_IsMenuDisabled]  DEFAULT ((0)) FOR [IsMenuDisabled]
GO
ALTER TABLE [dbo].[PortletColumns] ADD  CONSTRAINT [DF_PortletColumns_IsExportable]  DEFAULT ((0)) FOR [IsExportable]
GO
ALTER TABLE [dbo].[Portlets] ADD  CONSTRAINT [DF_Portlets_Active]  DEFAULT ((1)) FOR [Active]
GO
ALTER TABLE [dbo].[PressureSwitchOffData] ADD  CONSTRAINT [DF_Pressu_Press_5F94079C]  DEFAULT (newid()) FOR [PressureSwitchOffDataID]
GO
ALTER TABLE [dbo].[PressureSwitchOnData] ADD  CONSTRAINT [DF_Pressu_Press_5ACF527F]  DEFAULT (newid()) FOR [PressureSwitchOnDataID]
GO
ALTER TABLE [dbo].[ProductLines] ADD  CONSTRAINT [DF_ProductLines_UseAIRT]  DEFAULT ((0)) FOR [UseAIRT]
GO
ALTER TABLE [dbo].[ProductLines] ADD  CONSTRAINT [DF_ProductLines_OrderPosition]  DEFAULT ((0)) FOR [OrderPosition]
GO
ALTER TABLE [dbo].[ProductLines] ADD  CONSTRAINT [DF_ProductLines_Display]  DEFAULT ((0)) FOR [Display]
GO
ALTER TABLE [dbo].[ProjectCodes] ADD  CONSTRAINT [DF_ProjectCodes_ProjectCodeId]  DEFAULT (newid()) FOR [ProjectCodeId]
GO
ALTER TABLE [dbo].[ProjectCodes] ADD  CONSTRAINT [DF_ProjectCodes_TranType]  DEFAULT ('01') FOR [TranType]
GO
ALTER TABLE [dbo].[PulseCountData] ADD  CONSTRAINT [DF_PulseCountData_PulseCountDataID]  DEFAULT (newid()) FOR [PulseCountDataID]
GO
ALTER TABLE [dbo].[Pumps] ADD  CONSTRAINT [DF_Pumps_PumpID]  DEFAULT (newid()) FOR [PumpID]
GO
ALTER TABLE [dbo].[Regions] ADD  CONSTRAINT [DF_Regions_RegionId]  DEFAULT (newid()) FOR [RegionId]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT (getdate()) FOR [LoadDate]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [GWD]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [Crosswave]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [CasingLink]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [VMS]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [DualIDS]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [DualPulser]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [ExtendedRange]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [WPR]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [DLC]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [AdjustableGaugeStabilizer]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [TBSMotorySteerable]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [Geosteering]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [RTOCMonitoring]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [HeatWave]
GO
ALTER TABLE [dbo].[RelBusinessIntelligenceDataSet] ADD  DEFAULT ((0)) FOR [HEX]
GO
ALTER TABLE [dbo].[RelCustomers] ADD  CONSTRAINT [DF_RelCustomers_RelCustomerID]  DEFAULT (newid()) FOR [RelCustomerID]
GO
ALTER TABLE [dbo].[RelCustomers] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RelHomeMaxValues] ADD  CONSTRAINT [DF_RelHomeMaxValues_LastUpdate]  DEFAULT (getdate()) FOR [LastUpdate]
GO
ALTER TABLE [dbo].[RelHomeMTBF] ADD  CONSTRAINT [DF_RelHomeMTBF_RelHomeMTBFID]  DEFAULT (newid()) FOR [RelHomeMTBFID]
GO
ALTER TABLE [dbo].[RelHomeRegionalTotals] ADD  CONSTRAINT [DF_RelHomeRegionalTotals_RelHomeRegionTotalID]  DEFAULT (newid()) FOR [RelHomeRegionTotalID]
GO
ALTER TABLE [dbo].[RelUserDistrictMap] ADD  CONSTRAINT [DF_RelUserDi_UserD_0A495B77]  DEFAULT (newid()) FOR [RelUserDistrictMapID]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSe_UserS_3568C3A6]  DEFAULT (newid()) FOR [RelUserSettingID]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSe_RunTy_3939548A]  DEFAULT ('HEL') FOR [RunType]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSettings_HEL_LWD]  DEFAULT ((0)) FOR [HEL_LWD]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSettings_HEL_EM]  DEFAULT ((0)) FOR [HEL_EM]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSettings_EM]  DEFAULT ((0)) FOR [EM]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSettings_HYPERPULSE]  DEFAULT ((0)) FOR [HYPERPULSE]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSettings_RSS]  DEFAULT ((0)) FOR [RSS]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSettings_BECFIELD]  DEFAULT ((0)) FOR [BECFIELD]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSettings_CMP]  DEFAULT ((0)) FOR [DD]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSettings_GEOLINK]  DEFAULT ((0)) FOR [GEOLINK]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSettings_TENSOR]  DEFAULT ((0)) FOR [TENSOR]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSettings_IsCoordinator]  DEFAULT ((0)) FOR [IsCoordinator]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSe_Field_1AED04F0]  DEFAULT ((0)) FOR [FieldHand]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSe_Distr_1BE12929]  DEFAULT ((0)) FOR [DistrictSupport]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSe_SURVE_1CD54D62]  DEFAULT ((0)) FOR [SURVEY]
GO
ALTER TABLE [dbo].[RelUserSettings] ADD  CONSTRAINT [DF_RelUserSe_isDel_1DC9719B]  DEFAULT ((0)) FOR [isDeleted]
GO
ALTER TABLE [dbo].[RequestAdmins] ADD  CONSTRAINT [DF_RequestAdmins_RequestAdminId]  DEFAULT (newid()) FOR [RequestAdminId]
GO
ALTER TABLE [dbo].[RequestAdmins] ADD  CONSTRAINT [DF_RequestAdmins_IsDefault]  DEFAULT ((0)) FOR [IsDefault]
GO
ALTER TABLE [dbo].[RequestAdmins] ADD  CONSTRAINT [DF_RequestAdmins_SendEmail]  DEFAULT ((1)) FOR [SendEmail]
GO
ALTER TABLE [dbo].[RequestApprovals] ADD  CONSTRAINT [DF_RequestApprovals_DateEntered]  DEFAULT (getdate()) FOR [DateEntered]
GO
ALTER TABLE [dbo].[RequestApprovals] ADD  CONSTRAINT [DF_RequestApprovals_ApprovalStatus]  DEFAULT ('X') FOR [ApprovalStatus]
GO
ALTER TABLE [dbo].[RequestApprovals] ADD  CONSTRAINT [DF_RequestApprovals_ApprovalOrder]  DEFAULT ((0)) FOR [ApprovalOrder]
GO
ALTER TABLE [dbo].[RequestApprovals] ADD  CONSTRAINT [DF_RequestApprovals_DateLastNotified]  DEFAULT (getdate()) FOR [DateLastNotified]
GO
ALTER TABLE [dbo].[RequestApprovals] ADD  DEFAULT ((0)) FOR [RemindInDays]
GO
ALTER TABLE [dbo].[RequestedLogin] ADD  CONSTRAINT [DF_RequestedLogin_RequestID]  DEFAULT (newid()) FOR [RequestID]
GO
ALTER TABLE [dbo].[RequestEmails] ADD  CONSTRAINT [DF_RequestEmails_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[RequestFormDetails] ADD  CONSTRAINT [DF_RequestFormDetail_IsComplete]  DEFAULT ((0)) FOR [IsComplete]
GO
ALTER TABLE [dbo].[RequestFormDetails] ADD  CONSTRAINT [DF_RequestFormDetail_StandardCost]  DEFAULT ((0)) FOR [StandardCost]
GO
ALTER TABLE [dbo].[RequestFormDetails] ADD  CONSTRAINT [DF_RequestFormDetail_EstimatedNumOfWeeks]  DEFAULT ((0)) FOR [EstimatedNumOfWeeks]
GO
ALTER TABLE [dbo].[RequestForms] ADD  CONSTRAINT [DF_RequestForm_IsComplete]  DEFAULT ((0)) FOR [IsComplete]
GO
ALTER TABLE [dbo].[RequestForms] ADD  CONSTRAINT [DF_RequestForm_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[RequestForms] ADD  CONSTRAINT [DF_RequestForm_IsArchived]  DEFAULT ((0)) FOR [IsArchived]
GO
ALTER TABLE [dbo].[RequestParts] ADD  CONSTRAINT [DF_ChangeRequestParts_id]  DEFAULT (newid()) FOR [RequestPartId]
GO
ALTER TABLE [dbo].[RequestParts] ADD  CONSTRAINT [DF_ChangeRequestParts_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[Requests] ADD  CONSTRAINT [DF_Requests_RequestStatus]  DEFAULT ('AP') FOR [RequestStatus]
GO
ALTER TABLE [dbo].[Requests] ADD  CONSTRAINT [DF_Requests_DateEntered]  DEFAULT (getdate()) FOR [DateEntered]
GO
ALTER TABLE [dbo].[Requests] ADD  CONSTRAINT [DF_Requests_OpenClosed]  DEFAULT ('O') FOR [OpenClosed]
GO
ALTER TABLE [dbo].[Requests] ADD  CONSTRAINT [DF_Requests_BaseCode]  DEFAULT ('BI') FOR [BranchPlant]
GO
ALTER TABLE [dbo].[Requests] ADD  CONSTRAINT [DF__Requests__IsDraf__0DEF03D2]  DEFAULT ((0)) FOR [IsDraft]
GO
ALTER TABLE [dbo].[RequestSubscriptions] ADD  CONSTRAINT [DF_RequestSubscriptions_AddedDateTime]  DEFAULT (getdate()) FOR [AddedDateTime]
GO
ALTER TABLE [dbo].[RigActivities] ADD  CONSTRAINT [DF_RigAct_RigAc_07A1F8F6]  DEFAULT (newid()) FOR [RigActivityID]
GO
ALTER TABLE [dbo].[RMAnalysisComments] ADD  CONSTRAINT [DF_Commen_Comme_623B6A1D]  DEFAULT (newid()) FOR [CommentID]
GO
ALTER TABLE [dbo].[RMAnalysisComments] ADD  CONSTRAINT [DF_RMAnalysisComments_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[RMAnalysisEmail] ADD  CONSTRAINT [DF_RMEmai_RMEma_20589827]  DEFAULT (newid()) FOR [RMAnalysisEmailID]
GO
ALTER TABLE [dbo].[RMAnalysisEmail] ADD  DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [dbo].[RunActivity] ADD  CONSTRAINT [DF_RunActivity_DrillOutofShoe]  DEFAULT ((0)) FOR [DrillOutofShoe]
GO
ALTER TABLE [dbo].[RunEMData] ADD  CONSTRAINT [DF_RunEMData_RunEMDataID]  DEFAULT (newid()) FOR [RunEMDataID]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF_Runs_RunID]  DEFAULT (newid()) FOR [RunID]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__TBS__5AFD6864]  DEFAULT ((0)) FOR [TBS]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__Geostee__5BF18C9D]  DEFAULT ((0)) FOR [Geosteering]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__RTO_Mon__5CE5B0D6]  DEFAULT ((0)) FOR [RTOMonitoring]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__HEL_LWD__1CBD116D]  DEFAULT ((0)) FOR [HEL_LWD]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__HEL_EM__1DB135A6]  DEFAULT ((0)) FOR [HEL_EM]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__EM__1EA559DF]  DEFAULT ((0)) FOR [EM]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__PP__1F997E18]  DEFAULT ((0)) FOR [PP]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__RSS__208DA251]  DEFAULT ((0)) FOR [RSS]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__TENSOR__2B0B30C4]  DEFAULT ((0)) FOR [TENSOR]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__GEOLINK__2BFF54FD]  DEFAULT ((0)) FOR [GEOLINK]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__BECFIEL__2CF37936]  DEFAULT ((0)) FOR [BECFIELD]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__CMP__2DE79D6F]  DEFAULT ((0)) FOR [GWD]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__WPR__0063F73D]  DEFAULT ((0)) FOR [WPR]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__MOTOR__01581B76]  DEFAULT ((0)) FOR [MOTOR]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__AGS__04348821]  DEFAULT ((0)) FOR [AGS]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__DLC__5DD9D50F]  DEFAULT ((0)) FOR [DLC]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF_Runs_IsDownHole]  DEFAULT ((1)) FOR [IsDownHole]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF__Runs__IsTight__4250EAD4]  DEFAULT ((0)) FOR [IsTightHole]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF_Runs_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Runs] ADD  CONSTRAINT [DF_Runs_DMT_AMS]  DEFAULT ((0)) FOR [DMT_AMS]
GO
ALTER TABLE [dbo].[Runs] ADD  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[SavedColumn] ADD  CONSTRAINT [DF_SavedColumn_SavedColumnId]  DEFAULT (newid()) FOR [SavedColumnId]
GO
ALTER TABLE [dbo].[SavedSearch] ADD  CONSTRAINT [DF_SavedSearch_SavedSearchId]  DEFAULT (newid()) FOR [SavedSearchId]
GO
ALTER TABLE [dbo].[SavedSearchValue] ADD  CONSTRAINT [DF_SavedSearchValue_SavedSearchValueId]  DEFAULT (newid()) FOR [SavedSearchValueId]
GO
ALTER TABLE [dbo].[SelectOptions] ADD  CONSTRAINT [DF_SelectOptions_SelectOptionId]  DEFAULT (newid()) FOR [SelectOptionId]
GO
ALTER TABLE [dbo].[SensorItemNums] ADD  CONSTRAINT [DF_SensorItemNums_SensorItemNumId]  DEFAULT (newid()) FOR [SensorItemNumId]
GO
ALTER TABLE [dbo].[Sensors] ADD  CONSTRAINT [DF_Sensors_SensorId]  DEFAULT (newid()) FOR [SensorId]
GO
ALTER TABLE [dbo].[SensorSlotBoards] ADD  CONSTRAINT [DF_SensorSlotBoards_SensorSlotBoardId]  DEFAULT (newid()) FOR [SensorSlotBoardId]
GO
ALTER TABLE [dbo].[SensorSlotBoards] ADD  CONSTRAINT [DF_SensorSlotBoards_IsSoftware]  DEFAULT ((0)) FOR [IsSoftware]
GO
ALTER TABLE [dbo].[SensorSlots] ADD  CONSTRAINT [DF_SensorSlots_SensorSlotId]  DEFAULT (newid()) FOR [SensorSlotId]
GO
ALTER TABLE [dbo].[SensorSlots] ADD  CONSTRAINT [DF_SensorSlots_IsRequired]  DEFAULT ((0)) FOR [IsRequired]
GO
ALTER TABLE [dbo].[SensorToBitOffsets] ADD  CONSTRAINT [DF_SensorToBitOffsets_SensorToBitOffsetID]  DEFAULT (newid()) FOR [SensorToBitOffsetID]
GO
ALTER TABLE [dbo].[SOAAuditInformation] ADD  CONSTRAINT [DF__SOAAuditI__Audit__3E7DF7EB]  DEFAULT (newid()) FOR [AuditGuid]
GO
ALTER TABLE [dbo].[SOAAuditInformation] ADD  CONSTRAINT [DF__SOAAuditI__Creat__3F721C24]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[SOAAuditType] ADD  CONSTRAINT [DF__SOAAuditT__Creat__7D6F4E9D]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[SOAWorkOrderRequest] ADD  CONSTRAINT [DF_SOAWorkOrderRequest_RequestId]  DEFAULT (newid()) FOR [RequestId]
GO
ALTER TABLE [dbo].[SOAWorkOrderRequest] ADD  CONSTRAINT [DF_SOAWorkOrderRequest_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[SOAWorkOrderResponseHeader] ADD  CONSTRAINT [DF_SOAWorkOrderResponseHeader_ResponseHeaderId]  DEFAULT (newid()) FOR [ResponseHeaderId]
GO
ALTER TABLE [dbo].[SoftwareReleases] ADD  CONSTRAINT [DF_SoftwareReleases_SoftwareReleaseId]  DEFAULT (newid()) FOR [SoftwareReleaseId]
GO
ALTER TABLE [dbo].[SurveyData] ADD  CONSTRAINT [DF_SurveyData_SurveyDataID]  DEFAULT (newid()) FOR [SurveyDataID]
GO
ALTER TABLE [dbo].[TimeSheet] ADD  CONSTRAINT [DF_TimeSheet_TimeSheetId]  DEFAULT (newid()) FOR [TimeSheetId]
GO
ALTER TABLE [dbo].[ToolCodePartTypes] ADD  CONSTRAINT [DF_ToolCodePartTypes_ToolCodePartTypeId]  DEFAULT (newid()) FOR [ToolCodePartTypeId]
GO
ALTER TABLE [dbo].[ToolSheetTemplates] ADD  CONSTRAINT [DF_ToolSheetTemplates_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [dbo].[ToolStringComponentInfo] ADD  CONSTRAINT [DF__ToolStrin__IsUse__77DFC722]  DEFAULT ((0)) FOR [IsUsed]
GO
ALTER TABLE [dbo].[ToolStringComponentInfo] ADD  CONSTRAINT [DF__ToolStringC__TFF__78D3EB5B]  DEFAULT ((0)) FOR [TFF]
GO
ALTER TABLE [dbo].[ToolStringComponentInfo] ADD  CONSTRAINT [DF__ToolStringC__CSI__79C80F94]  DEFAULT ((0)) FOR [CSI]
GO
ALTER TABLE [dbo].[ToolStringComponentInfo] ADD  CONSTRAINT [DF__ToolStringC__NCI__7ABC33CD]  DEFAULT ((0)) FOR [NCI]
GO
ALTER TABLE [dbo].[ToolStringComponentInfo] ADD  CONSTRAINT [DF__ToolStringCo__OS__7BB05806]  DEFAULT ((0)) FOR [OS]
GO
ALTER TABLE [dbo].[ToolStringComponentInfo] ADD  CONSTRAINT [DF__ToolStringCo__PR__7CA47C3F]  DEFAULT ((0)) FOR [PR]
GO
ALTER TABLE [dbo].[ToolStringComponentInfo] ADD  CONSTRAINT [DF__ToolStringCo__FA__7D98A078]  DEFAULT ((0)) FOR [FA]
GO
ALTER TABLE [dbo].[ToolStringComponentInfo] ADD  CONSTRAINT [DF__ToolStringCo__RC__7E8CC4B1]  DEFAULT ((0)) FOR [RC]
GO
ALTER TABLE [dbo].[ToolStringComponentInfo] ADD  CONSTRAINT [DF__ToolStringCo__CN__7F80E8EA]  DEFAULT ((0)) FOR [CN]
GO
ALTER TABLE [dbo].[ToolStringFixedAssets] ADD  CONSTRAINT [DF_ToolStringFixedAssets_ToolStringFixedAssetsId]  DEFAULT (newid()) FOR [ToolStringFixedAssetsId]
GO
ALTER TABLE [dbo].[ToolStringFixedAssets] ADD  CONSTRAINT [DF__ToolStrin__DateA__24891BBE]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[ToolStrings] ADD  CONSTRAINT [DF_ToolStrings_CreatedBy]  DEFAULT ((0)) FOR [CreatedBy]
GO
ALTER TABLE [dbo].[ToolStrings] ADD  CONSTRAINT [DF_ToolStrings_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [dbo].[ToolStrings] ADD  CONSTRAINT [DF_ToolStrings_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[ToolStringSize] ADD  DEFAULT ((0)) FOR [IsTool]
GO
ALTER TABLE [dbo].[ToolStringSize] ADD  DEFAULT ((0)) FOR [IsMotor]
GO
ALTER TABLE [dbo].[UserBranchPlants] ADD  CONSTRAINT [DF_UserBranchPlants_UserBranchPlantId]  DEFAULT (newid()) FOR [UserBranchPlantId]
GO
ALTER TABLE [dbo].[UserRoleBranchPlants] ADD  CONSTRAINT [DF_UserRoleBranchPlants_UserRoleBranchPlantId]  DEFAULT (newid()) FOR [UserRoleBranchPlantId]
GO
ALTER TABLE [dbo].[Users] ADD  CONSTRAINT [DF_Users_NumLoginAttempts]  DEFAULT ((0)) FOR [NumLoginAttempts]
GO
ALTER TABLE [dbo].[UserSessionLog] ADD  CONSTRAINT [DF_UserSessionLog_UserSessionLogId]  DEFAULT (newid()) FOR [UserSessionLogId]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((1)) FOR [IsRelated]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsContainerized]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsInsurance]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsRoutedExportTransaction]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsPrepaid]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsCollect]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsCOD]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsAir]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsOcean]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsConsolidate]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsDirect]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsAbandon]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsReturnToShipper]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsNotifyShipper]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsHazardous]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsTransportedUnderBond]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsYourTruck]
GO
ALTER TABLE [dbo].[USShipperLetters] ADD  DEFAULT ((0)) FOR [IsLicenseRequired]
GO
ALTER TABLE [dbo].[Vendors] ADD  CONSTRAINT [DF_Vendors_Active]  DEFAULT ((1)) FOR [Active]
GO
ALTER TABLE [dbo].[Vendors] ADD  CONSTRAINT [DF_Vendors_KeepRec_1]  DEFAULT ((1)) FOR [KeepRec]
GO
ALTER TABLE [dbo].[Vendors] ADD  CONSTRAINT [DF_Vendors_DateAdded_1]  DEFAULT (getdate()) FOR [DateAdded]
GO
ALTER TABLE [dbo].[Wells] ADD  CONSTRAINT [DF__Wells__WellID__0BA79404]  DEFAULT (newid()) FOR [WellID]
GO
ALTER TABLE [dbo].[Workflow] ADD  CONSTRAINT [DF_Workflow_WorkflowId]  DEFAULT (newid()) FOR [WorkflowId]
GO
ALTER TABLE [dbo].[WorkflowCategory] ADD  CONSTRAINT [DF_WorkflowCategory_WorkflowCategoryId]  DEFAULT (newid()) FOR [WorkflowCategoryId]
GO
ALTER TABLE [dbo].[WorkflowReminderLog] ADD  CONSTRAINT [DF_WorkflowReminderLog_WorkflowReminderLogId]  DEFAULT (newid()) FOR [WorkflowReminderLogId]
GO
ALTER TABLE [dbo].[WorkflowTask] ADD  CONSTRAINT [DF_WorkflowTask_WorkflowTaskId]  DEFAULT (newid()) FOR [WorkflowTaskId]
GO
ALTER TABLE [dbo].[WorkflowTaskApproverConfig] ADD  CONSTRAINT [DF_WorkflowTaskApproverConfig_WorkflowTaskConfigId]  DEFAULT (newid()) FOR [WorkflowTaskConfigId]
GO
ALTER TABLE [dbo].[WorkOrders] ADD  DEFAULT ((0)) FOR [HasException]
GO
ALTER TABLE [dbo].[ActionItem]  WITH CHECK ADD  CONSTRAINT [FK_ActionItem_Assignee_Users] FOREIGN KEY([AssigneeUserId])
REFERENCES [dbo].[Users] ([UserId])
GO
ALTER TABLE [dbo].[ActionItem] CHECK CONSTRAINT [FK_ActionItem_Assignee_Users]
GO
ALTER TABLE [dbo].[ActionItem]  WITH CHECK ADD  CONSTRAINT [FK_ActionItem_Creator_Users] FOREIGN KEY([UserIdAdded])
REFERENCES [dbo].[Users] ([UserId])
GO
ALTER TABLE [dbo].[ActionItem] CHECK CONSTRAINT [FK_ActionItem_Creator_Users]
GO
ALTER TABLE [dbo].[ActionItem]  WITH CHECK ADD  CONSTRAINT [FK_ActionItem_Requests] FOREIGN KEY([RequestId])
REFERENCES [dbo].[Requests] ([RequestId])
GO
ALTER TABLE [dbo].[ActionItem] CHECK CONSTRAINT [FK_ActionItem_Requests]
GO
ALTER TABLE [dbo].[BuildSheetTemplateAttributes]  WITH CHECK ADD  CONSTRAINT [FK_BuildSheetTemplateAttributeTypes_BuildSheetTemplateAttributes] FOREIGN KEY([AttributeTypeId])
REFERENCES [dbo].[BuildSheetTemplateAttributeTypes] ([AttributeTypeId])
GO
ALTER TABLE [dbo].[BuildSheetTemplateAttributes] CHECK CONSTRAINT [FK_BuildSheetTemplateAttributeTypes_BuildSheetTemplateAttributes]
GO
ALTER TABLE [dbo].[BuildSheetTemplateAttributes]  WITH CHECK ADD  CONSTRAINT [FK_BuildSheetTemplatesMap_BuildSheetTemplateAttributes] FOREIGN KEY([TemplateMapID])
REFERENCES [dbo].[BuildSheetTemplatesMap] ([TemplateMapID])
GO
ALTER TABLE [dbo].[BuildSheetTemplateAttributes] CHECK CONSTRAINT [FK_BuildSheetTemplatesMap_BuildSheetTemplateAttributes]
GO
ALTER TABLE [dbo].[BuildSheetTemplatesMap]  WITH CHECK ADD  CONSTRAINT [FK_BuildSheetTemplates_BuildSheetTemplatesMap] FOREIGN KEY([TemplateID])
REFERENCES [dbo].[BuildSheetTemplates] ([TemplateID])
GO
ALTER TABLE [dbo].[BuildSheetTemplatesMap] CHECK CONSTRAINT [FK_BuildSheetTemplates_BuildSheetTemplatesMap]
GO
ALTER TABLE [dbo].[ChangeNoticeParts]  WITH NOCHECK ADD  CONSTRAINT [FK_ChangeNoticeParts_ChangeNotices] FOREIGN KEY([CNId])
REFERENCES [dbo].[ChangeNotices] ([CNId])
GO
ALTER TABLE [dbo].[ChangeNoticeParts] CHECK CONSTRAINT [FK_ChangeNoticeParts_ChangeNotices]
GO
ALTER TABLE [dbo].[ChangeRequests]  WITH NOCHECK ADD  CONSTRAINT [FK_ChangeRequests_Requests] FOREIGN KEY([RequestId])
REFERENCES [dbo].[Requests] ([RequestId])
GO
ALTER TABLE [dbo].[ChangeRequests] CHECK CONSTRAINT [FK_ChangeRequests_Requests]
GO
ALTER TABLE [dbo].[ClientOrderLines]  WITH NOCHECK ADD  CONSTRAINT [FK_ClientOrderLines_ClientOrders] FOREIGN KEY([ClientOrderId])
REFERENCES [dbo].[ClientOrders] ([ClientOrderId])
GO
ALTER TABLE [dbo].[ClientOrderLines] CHECK CONSTRAINT [FK_ClientOrderLines_ClientOrders]
GO
ALTER TABLE [dbo].[CustomsInvoiceConfigDetails]  WITH CHECK ADD  CONSTRAINT [FK_CustomsInvoiceConfigDetails_CustomsInvoiceConfigs] FOREIGN KEY([CustomsInvoiceConfigId])
REFERENCES [dbo].[CustomsInvoiceConfigs] ([CustomsInvoiceConfigId])
GO
ALTER TABLE [dbo].[CustomsInvoiceConfigDetails] CHECK CONSTRAINT [FK_CustomsInvoiceConfigDetails_CustomsInvoiceConfigs]
GO
ALTER TABLE [dbo].[CustomsInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_CustomsInvoiceDetails_CustomsInvoices] FOREIGN KEY([CustomsInvoiceId])
REFERENCES [dbo].[CustomsInvoices] ([CustomsInvoiceId])
GO
ALTER TABLE [dbo].[CustomsInvoiceDetails] CHECK CONSTRAINT [FK_CustomsInvoiceDetails_CustomsInvoices]
GO
ALTER TABLE [dbo].[ECNItems]  WITH CHECK ADD  CONSTRAINT [FK_ECNItems_ECNs] FOREIGN KEY([ECNId])
REFERENCES [dbo].[ECNs] ([ECNId])
GO
ALTER TABLE [dbo].[ECNItems] CHECK CONSTRAINT [FK_ECNItems_ECNs]
GO
ALTER TABLE [dbo].[FixedAssetValues]  WITH CHECK ADD  CONSTRAINT [FK_DataFields_FixedAssetValues] FOREIGN KEY([DataFieldId])
REFERENCES [dbo].[DataFields] ([DataFieldId])
GO
ALTER TABLE [dbo].[FixedAssetValues] CHECK CONSTRAINT [FK_DataFields_FixedAssetValues]
GO
ALTER TABLE [dbo].[GVWEquipmentRequestDetails]  WITH CHECK ADD  CONSTRAINT [FK_GVWEquipmentRequestDetails_GVWEquipmentRequests] FOREIGN KEY([GVWEquipmentRequestId])
REFERENCES [dbo].[GVWEquipmentRequests] ([GVWEquipmentRequestId])
GO
ALTER TABLE [dbo].[GVWEquipmentRequestDetails] CHECK CONSTRAINT [FK_GVWEquipmentRequestDetails_GVWEquipmentRequests]
GO
ALTER TABLE [dbo].[JobLog]  WITH CHECK ADD  CONSTRAINT [FK_JobLog_Job] FOREIGN KEY([JobId])
REFERENCES [dbo].[Job] ([JobId])
GO
ALTER TABLE [dbo].[JobLog] CHECK CONSTRAINT [FK_JobLog_Job]
GO
ALTER TABLE [dbo].[JobLog]  WITH CHECK ADD  CONSTRAINT [FK_JobLog_JobLogStatus] FOREIGN KEY([JobLogStatusId])
REFERENCES [dbo].[JobLogStatus] ([JobLogStatusId])
GO
ALTER TABLE [dbo].[JobLog] CHECK CONSTRAINT [FK_JobLog_JobLogStatus]
GO
ALTER TABLE [dbo].[JobLog]  WITH CHECK ADD  CONSTRAINT [FK_JobLog_JobQueue] FOREIGN KEY([JobId])
REFERENCES [dbo].[Job] ([JobId])
GO
ALTER TABLE [dbo].[JobLog] CHECK CONSTRAINT [FK_JobLog_JobQueue]
GO
ALTER TABLE [dbo].[JobQueue]  WITH CHECK ADD  CONSTRAINT [FK_JobQueue_JobStatus] FOREIGN KEY([JobQueueStatusId])
REFERENCES [dbo].[JobQueueStatus] ([JobQueueStatusId])
GO
ALTER TABLE [dbo].[JobQueue] CHECK CONSTRAINT [FK_JobQueue_JobStatus]
GO
ALTER TABLE [dbo].[LookupValues]  WITH CHECK ADD  CONSTRAINT [FK_Lookups_LookupValues] FOREIGN KEY([LookupId])
REFERENCES [dbo].[Lookups] ([LookupId])
GO
ALTER TABLE [dbo].[LookupValues] CHECK CONSTRAINT [FK_Lookups_LookupValues]
GO
ALTER TABLE [dbo].[PartDescPFTConfigs]  WITH CHECK ADD  CONSTRAINT [FK_PartDescPFTConfigs_PFTConfig] FOREIGN KEY([PFTConfigID])
REFERENCES [dbo].[PFTConfig] ([PFTConfigId])
GO
ALTER TABLE [dbo].[PartDescPFTConfigs] CHECK CONSTRAINT [FK_PartDescPFTConfigs_PFTConfig]
GO
ALTER TABLE [dbo].[PFTBlobObjects]  WITH CHECK ADD  CONSTRAINT [FK_PFTBlobObjects_PFTBlobObjects] FOREIGN KEY([BlobObjectId])
REFERENCES [dbo].[PFTBlobObjects] ([BlobObjectId])
GO
ALTER TABLE [dbo].[PFTBlobObjects] CHECK CONSTRAINT [FK_PFTBlobObjects_PFTBlobObjects]
GO
ALTER TABLE [dbo].[PFTObjectFormFieldList]  WITH CHECK ADD  CONSTRAINT [FK_PFTObjectFormFieldList_PFTObjects] FOREIGN KEY([ObjectId])
REFERENCES [dbo].[PFTObjects] ([ObjectId])
GO
ALTER TABLE [dbo].[PFTObjectFormFieldList] CHECK CONSTRAINT [FK_PFTObjectFormFieldList_PFTObjects]
GO
ALTER TABLE [dbo].[PFTObjectMappings]  WITH CHECK ADD  CONSTRAINT [FK_PFTObjectMappings_PFTObjects] FOREIGN KEY([ParentId])
REFERENCES [dbo].[PFTObjects] ([ObjectId])
GO
ALTER TABLE [dbo].[PFTObjectMappings] CHECK CONSTRAINT [FK_PFTObjectMappings_PFTObjects]
GO
ALTER TABLE [dbo].[PFTTestData]  WITH NOCHECK ADD  CONSTRAINT [FK_PFTTestData_PFTWO] FOREIGN KEY([PFTWOId])
REFERENCES [dbo].[PFTWO] ([PFTWOId])
GO
ALTER TABLE [dbo].[PFTTestData] CHECK CONSTRAINT [FK_PFTTestData_PFTWO]
GO
ALTER TABLE [dbo].[PFTWO]  WITH NOCHECK ADD  CONSTRAINT [FK_PFTWO_PFTConfig] FOREIGN KEY([PFTConfigId])
REFERENCES [dbo].[PFTConfig] ([PFTConfigId])
GO
ALTER TABLE [dbo].[PFTWO] CHECK CONSTRAINT [FK_PFTWO_PFTConfig]
GO
ALTER TABLE [dbo].[PFTWOFormCollectionFields]  WITH NOCHECK ADD  CONSTRAINT [FK_PFTWOFormCollectionFields_PFTWOFormCollections] FOREIGN KEY([PFTWOFormCollectionId])
REFERENCES [dbo].[PFTWOFormCollections] ([PFTWOFormCollectionId])
GO
ALTER TABLE [dbo].[PFTWOFormCollectionFields] CHECK CONSTRAINT [FK_PFTWOFormCollectionFields_PFTWOFormCollections]
GO
ALTER TABLE [dbo].[PFTWOFormCollections]  WITH NOCHECK ADD  CONSTRAINT [FK_PFTWOFormCollections_PFTWOForms] FOREIGN KEY([PFTWOFormId])
REFERENCES [dbo].[PFTWOForms] ([PFTWOFormId])
GO
ALTER TABLE [dbo].[PFTWOFormCollections] CHECK CONSTRAINT [FK_PFTWOFormCollections_PFTWOForms]
GO
ALTER TABLE [dbo].[PFTWOSeq]  WITH NOCHECK ADD  CONSTRAINT [FK_PFTWOSeq_PFTWO] FOREIGN KEY([PFTWOId])
REFERENCES [dbo].[PFTWO] ([PFTWOId])
GO
ALTER TABLE [dbo].[PFTWOSeq] CHECK CONSTRAINT [FK_PFTWOSeq_PFTWO]
GO
ALTER TABLE [dbo].[PFTWOSeqFailures]  WITH CHECK ADD  CONSTRAINT [FK_PFTWOSeqFailures_PFTFailureCodes] FOREIGN KEY([PFTFailureCodeId])
REFERENCES [dbo].[PFTFailureCodes] ([PFTFailureCodeId])
GO
ALTER TABLE [dbo].[PFTWOSeqFailures] CHECK CONSTRAINT [FK_PFTWOSeqFailures_PFTFailureCodes]
GO
ALTER TABLE [dbo].[RequestApprovals]  WITH NOCHECK ADD  CONSTRAINT [FK_RequestApprovals_Requests] FOREIGN KEY([RequestId])
REFERENCES [dbo].[Requests] ([RequestId])
GO
ALTER TABLE [dbo].[RequestApprovals] CHECK CONSTRAINT [FK_RequestApprovals_Requests]
GO
ALTER TABLE [dbo].[RequestFormDetails]  WITH CHECK ADD  CONSTRAINT [FK_RequestFormDetail_RequestForm] FOREIGN KEY([RequestFormId])
REFERENCES [dbo].[RequestForms] ([RequestFormId])
GO
ALTER TABLE [dbo].[RequestFormDetails] CHECK CONSTRAINT [FK_RequestFormDetail_RequestForm]
GO
ALTER TABLE [dbo].[RequestFormDetailSources]  WITH CHECK ADD  CONSTRAINT [FK_RequestFormDetailSource_RequestFormDetail] FOREIGN KEY([RequestFormDetailId])
REFERENCES [dbo].[RequestFormDetails] ([RequestFormDetailId])
GO
ALTER TABLE [dbo].[RequestFormDetailSources] CHECK CONSTRAINT [FK_RequestFormDetailSource_RequestFormDetail]
GO
ALTER TABLE [dbo].[ToolModParts]  WITH CHECK ADD  CONSTRAINT [FK_ToolModParts_ToolMods] FOREIGN KEY([ToolModId])
REFERENCES [dbo].[ToolMods] ([ToolModId])
GO
ALTER TABLE [dbo].[ToolModParts] CHECK CONSTRAINT [FK_ToolModParts_ToolMods]
GO
ALTER TABLE [dbo].[ToolStringContainers]  WITH NOCHECK ADD  CONSTRAINT [FK_ToolStrings_ToolStringContainers] FOREIGN KEY([ToolStringId])
REFERENCES [dbo].[ToolStrings] ([ToolStringId])
GO
ALTER TABLE [dbo].[ToolStringContainers] CHECK CONSTRAINT [FK_ToolStrings_ToolStringContainers]
GO
ALTER TABLE [dbo].[ToolStringFixedAssetAttributes]  WITH CHECK ADD  CONSTRAINT [FK_BuildSheetTemplateAttributeTypes_ToolStringFixedAssetAttributes] FOREIGN KEY([AttributeTypeId])
REFERENCES [dbo].[BuildSheetTemplateAttributeTypes] ([AttributeTypeId])
GO
ALTER TABLE [dbo].[ToolStringFixedAssetAttributes] CHECK CONSTRAINT [FK_BuildSheetTemplateAttributeTypes_ToolStringFixedAssetAttributes]
GO
ALTER TABLE [dbo].[ToolStringNonSerialParts]  WITH NOCHECK ADD  CONSTRAINT [FK_ToolStrings_ToolStringNonSerialParts] FOREIGN KEY([ToolStringId])
REFERENCES [dbo].[ToolStrings] ([ToolStringId])
GO
ALTER TABLE [dbo].[ToolStringNonSerialParts] CHECK CONSTRAINT [FK_ToolStrings_ToolStringNonSerialParts]
GO
ALTER TABLE [dbo].[WorkOrderValues]  WITH CHECK ADD  CONSTRAINT [FK_DataFields_WorkOrderValues] FOREIGN KEY([DataFieldId])
REFERENCES [dbo].[DataFields] ([DataFieldId])
GO
ALTER TABLE [dbo].[WorkOrderValues] CHECK CONSTRAINT [FK_DataFields_WorkOrderValues]
GO
/****** Object:  StoredProcedure [dbo].[dsp_Import_SensorToBitOffsetCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[dsp_Import_SensorToBitOffsetCreate] (
	@sRunID as uniqueidentifier,
	@sToolString varchar(50),
	@sPartTypeID as int,
	@sSensor as varchar(50),
	@sSerialNumber as varchar(50),
	@sOffset as varchar(20),
	@sOffsetUOM as varchar(10),
	@sRate as varchar(20),
	@sRateUOM as varchar(10)) 

AS
SET NOCOUNT ON

Declare @sSensorToBitOffsetID uniqueidentifier
Set @sSensorToBitOffsetID = newid()

Declare @sToolStringID uniqueidentifier
Set @sToolStringID = (Select ToolStringID From ToolStrings Where SerialNumber = @sToolString)

Declare @sFixedAssetID uniqueidentifier
Set @sFixedAssetID = (Select Top 1 FixedAssetID From ToolStringFixedAssets Where ToolStringID = @sToolStringID And PartTypeID = @sPartTypeID And SerialNum = @sSerialNumber)

if (Len(@sFixedAssetID) = 0)
BEGIN
	Set @sFixedAssetID = '00000000-0000-0000-0000-000000000000'
END

INSERT INTO SensorToBitOffsets (SensorToBitOffsetID, RunID, PartTypeName, SerialNumber, Offset, OffsetUOM, Rate, RateUOM, ToolStringID, FixedAssetID)
VALUES (@sSensorToBitOffsetID, @sRunID, @sSensor, @sSerialNumber, @sOffset, @sOffsetUOM, @sRate, @sRateUOM, @sToolStringID, @sFixedAssetID)

SELECT @sSensorToBitOffsetID

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[GenerateShipperLetterReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GenerateShipperLetterReport]
	@customsInvoiceId uniqueidentifier,
	@userName varchar(128)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		
	declare @newId uniqueidentifier
	set @newId = NEWID()
	
	Insert into UsShipperLetters(
[USShipperLetterID]
      ,[CustomsInvoiceId]
      ,[ShipperLine1]
      ,[ShipperLine2]
      ,[ShipperLine3]
      ,[ShipperLine4]
      ,[ShipperLine5]
      ,[ShipperLine6]
      ,[ShipperLine7]
      ,[ShipperTaxId]
      ,[IsRelated]
      ,[FinalConsigneeLine1]
      ,[FinalConsigneeLine2]
      ,[FinalConsigneeLine3]
      ,[FinalConsigneeLine4]
      ,[FinalConsigneeLine5]
      ,[FinalConsigneeLine6]
      ,[FinalConsigneeLine7]
      ,[UltimateDestinationCountry]
      ,[ConsigneeLine1]
      ,[ConsigneeLine2]
      ,[ConsigneeLine3]
      ,[ConsigneeLine4]
      ,[ConsigneeLine5]
      ,[ConsigneeLine6]
      ,[ConsigneeLine7]
      ,[ModeOfTransport]
      ,[DateOfExport]
      ,[BillOfLading]
      ,[IsInsurance]
      ,[NotifyName]
      ,[Phone]
      ,[Email]
      ,[BillingAddress]
      ,[ElectronicCopy]
      ,[ShipperRefNum]
      ,[IsRequiredEEI]
      ,[AuthorizedOfficer]
      ,[SignatureUserName]
      ,[Title]
      ,[ShipmentDate]
      ,[CreateDate]
      ,[CreateUserName]
      ,[LastEditDate]
      ,[LastEditUserName])
	select 
		@newId
		,@customsInvoiceId
		,[ShipperLine1]
		,[ShipperLine2]
		,[ShipperLine3]
		,[ShipperLine4]
		,[ShipperLine5]
		,[ShipperLine6]
		,[ShipperLine7]
		,[TaxIdNumber]
		, 1
		,d.[ConsigneeLine1]
		,d.[ConsigneeLine2]
		,d.[ConsigneeLine3]
		,d.[ConsigneeLine4]
		,d.[ConsigneeLine5]
		,d.[ConsigneeLine6]
		,d.[ConsigneeLine7]
		,''--,[ToCountry]
		,a.[ConsigneeLine1]
		,a.[ConsigneeLine2]
		,a.[ConsigneeLine3]
		,a.[ConsigneeLine4]
		,a.[ConsigneeLine5]
		,a.[ConsigneeLine6]
		,a.[ConsigneeLine7]
		,[ShipmentMethod]
		,[DateShipped]
		,[AirWaybillNumber]
		,0
		,FirstName + ' ' + LastName
		,WorkPhone
		,Email
		,[ShipperLine1] + '/' + [ShipperLine2] + '/' + [ShipperLine3]
		,Email
		,a.InvoiceNumber
		,0
		,FirstName + ' ' + LastName
		,CreatedUserName
		,ShipperSignatureTitle
		,[DateShipped]
		,getdate()
		,@userName
		,getdate()
		,@userName
		from CustomsInvoiceSearch a
		left join Users b on b.UserName = a.CreatedUserName 
		left join CustomsInvoiceSLI d on d.CustomsInvoiceId = a.CustomsInvoiceId
		where a.CustomsInvoiceId = @customsInvoiceId

END
    
GO
/****** Object:  StoredProcedure [dbo].[GetVwCIFixedAssets]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[GetVwCIFixedAssets]
	@xmlData xml
AS

select T.c.value('.', 'uniqueidentifier') as PartId
into #AssetIds
from 
@xmlData.nodes('/Filters/AssetIds/Id') T(c)

select T.c.value('.', 'uniqueidentifier') as PartId
into #ParentAssetIds
from 
@xmlData.nodes('/Filters/ParentAssetIds/Id') T(c)


select 
techid,
serialnum,
InventoryItemNum as partnum,
a.ThirdItemNumber,
ps.status,
AssetDescription as serialdesc,
bp.CompanyName as functionallocation,
--(select top 1 StdUnitCost from ItemNumBranchPlants ibp
--	join BranchPlants bp on bp.BranchPlant = ibp.BranchPlant
--	where bp.IsManufacturing = 1
--	and ibp.ItemNum = a.InventoryItemNum
--	order by StdUnitCost desc
--) as StdCost,

CASE WHEN ri.StdUnitCost IS NOT NULL AND ri.StdUnitCost > 0 THEN ri.StdUnitCost ELSE ISNULL(i.StdUnitCost,0) END AS StdCost,
(ISNULL(Cost,0) * dbo.fnGetUSDConversionFactor(a.CurrencyCode,NULL)) AS AcquistionValue,
(ISNULL(NetBookValue,0) * dbo.fnGetUSDConversionFactor(a.CurrencyCode,NULL)) AS NetBookValue,
dbo.fnGetUSDConversionFactor(a.CurrencyCode,NULL) as CurrRatio,
ISNULL(ri.ToolPanel,i.ToolPanel) as ToolPanel,
ISNULL(ri.ToolCode,i.ToolCode) as ToolCode,
a.FixedAssetId as assetid,
a.MfgPartNum,
FixedAssetBranchPlant as ChargeLocationId,
a.Submt,
a.ParentPartId,
a.PartInternalStatus,
(Select top 1 r.RequestId 
	from Requests (NOLOCK) r
	JOIN RequestParts (NOLOCK) rp on r.RequestId = rp.RequestId 
	join  FixedAssets (NOLOCK) ip on ip.InventoryItemNum = rp.PartNum
	Where r.RequestType = 'CR' AND Regarding = 'Compliance' 
	AND r.OpenClosed = 'O' AND ip.SerialNum = a.SerialNum) as CRCount
into #TempPart
from FixedAssets (NOLOCK) a
left join PartStatus (NOLOCK) ps on ps.Code = a.EquipmentStatus
left join BranchPlants (NOLOCK) bp on bp.BranchPlant = a.BranchPlant
left join ItemNums (NOLOCK) i on i.ItemNum = a.InventoryItemNum
left join ItemNums (NOLOCK) ri on ri.ItemNum = a.RNItemNum
where  a.FixedAssetId in (Select PartId from #AssetIds) 
OR a.ParentPartId in (Select PartId from #ParentAssetIds)

/*
insert into #TempPart
select p.*,
(Select top 1 ISNULL(JDENum,'') from 
 Imarks.dbo.Parts AS ip  WITH(NOLOCK) 
 LEFT JOIN Imarks.dbo.PartDesc AS pd  WITH(NOLOCK) ON ip.PartNum = pd.PartNum 
 where ip.SAPEquipmentId = p.SerialNum) as JdeNumber,
(Select Count(*) from Adveng.dbo.Requests r WITH(NOLOCK)
JOIN Adveng.dbo.ChangeRequestParts rp WITH(NOLOCK) on r.RequestId = rp.Reqid 
Where r.RequestType = 'CR' AND Regarding = 'Compliance' 
AND r.OpenClosed = 'O' AND PartNum IN ( Select PartNum from IMarks.dbo.Parts Where SAPEquipmentID = p.SerialNum)) as CRCount
from Part p WITH(NOLOCK)
where p.ParentPartId in (Select PartId from #ParentAssetIds) 
*/


Alter table #TempPart Add
ComplianceCROpen bit default(0) not null,
ECCNNo varchar(30),
HTSUSNo varchar(30)

Update #TempPart set ComplianceCROpen = (case when ISNULL(CRCount, 0) = 0 then 0 else 1 end)


Select p.assetid as PartId, max(mi.ECCN) as ECCNNo, max(mi.HTSUS) as HTSUSNo 
into #MaterialTemp
from #TempPart p
left join ItemNumBranchPlants  (NOLOCK) mi
on (mi.ItemNum = p.partnum or mi.ItemNum = p.Submt)
where (mi.ECCN is not null and mi.ECCN <> '' and mi.ECCN <> '*')
or (mi.HTSUS is not null and mi.HTSUS <> '' and mi.HTSUS <> '*')
group by assetid



Update #TempPart set ECCNNo = a.ECCNNo, HTSUSNo = a.HTSUSNo
from #MaterialTemp a 
where a.PartId = #TempPart.assetid
/*
Update #TempPart set ECCNNo = a.ECCNNo
from 
(
Select PartId, 
	(select top 1 ECCNNo from MaterialTradeInfo with (nolock) where 
	( (PartNum = pn.PartNum OR PartNum = p.Submt) OR PartNum IN 
	(select PartNum from Imarks.dbo.PartDesc  with (nolock) Where PartNum = pn.PartNum) 
	OR PartNum IN (select SAPMaterialNum from Imarks.dbo.PartDesc  with (nolock) Where PartNum = pn.PartNum) )
	and ECCNNo is not null and ECCNNo <> '' and ECCNNo <> '*') as ECCNNo
	from #TempPart p
	join PartNum pn WITH(NOLOCK) on pn.PartNumId = p.PartNumId 
) a
where a.PartId = #TempPart.PartId

Update #TempPart set HTSUSNo = a.HTSUSNo
from 
(
Select PartId, 
	(select top 1 HTSUSNo from MaterialTradeInfo  with (nolock) where 
	( (PartNum = pn.PartNum OR PartNum = p.Submt) OR PartNum IN 
	(select PartNum from Imarks.dbo.PartDesc  with (nolock) Where PartNum = pn.PartNum) 
	OR PartNum IN (select SAPMaterialNum from Imarks.dbo.PartDesc  with (nolock) Where PartNum = pn.PartNum) )
	and HTSUSNo is not null and HTSUSNo <> '' and HTSUSNo <> '*') as HTSUSNo
	from #TempPart p
	join PartNum pn WITH(NOLOCK) on pn.PartNumId = p.PartNumId 
) a
where a.PartId = #TempPart.PartId

*/
select p.* from #TempPart p





/****** Object:  StoredProcedure [dbo].[spDeliveryTicketToDispatch]    Script Date: 08/05/2014 20:54:13 ******/
SET ANSI_NULLS ON



GO
/****** Object:  StoredProcedure [dbo].[InsertMyAdvisorUtilization]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[InsertMyAdvisorUtilization]
As
Begin
WITH SQLProcessCPU
AS(
   SELECT TOP(30) SQLProcessUtilization AS 'CPU_Usage', ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) AS 'row_number'
   FROM ( 
         SELECT 
           record.value('(./Record/@id)[1]', 'int') AS record_id,
           record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') AS [SystemIdle],
           record.value('(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int') AS [SQLProcessUtilization], 
           [timestamp] 
         FROM ( 
              SELECT [timestamp], CONVERT(xml, record) AS [record] 
              FROM sys.dm_os_ring_buffers 
              WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR' 
              AND record LIKE '%<SystemHealth>%'
              ) AS x 
        ) AS y
) 

INSERT INTO  dbo.MyAdvisorUtilization
SELECT 
   SERVERPROPERTY('SERVERNAME') AS 'Instance',
   (SELECT value_in_use FROM sys.configurations WHERE name like '%max server memory%') AS 'Max Server Memory',
   (SELECT physical_memory_in_use_kb/1024 FROM sys.dm_os_process_memory) AS 'SQL Server Memory Usage (MB)',
   (SELECT total_physical_memory_kb/1024 FROM sys.dm_os_sys_memory) AS 'Physical Memory (MB)',
   (SELECT available_physical_memory_kb/1024 FROM sys.dm_os_sys_memory) AS 'Available Memory (MB)',
   (SELECT system_memory_state_desc FROM sys.dm_os_sys_memory) AS 'System Memory State',
   (SELECT [cntr_value] FROM sys.dm_os_performance_counters WHERE [object_name] LIKE '%Manager%' AND [counter_name] = 'Page life expectancy') AS 'Page Life Expectancy',
   (SELECT AVG(CPU_Usage) FROM SQLProcessCPU WHERE row_number BETWEEN 1 AND 30) AS 'SQLProcessUtilization30',
   (SELECT AVG(CPU_Usage) FROM SQLProcessCPU WHERE row_number BETWEEN 1 AND 15) AS 'SQLProcessUtilization15',
   (SELECT AVG(CPU_Usage) FROM SQLProcessCPU WHERE row_number BETWEEN 1 AND 10) AS 'SQLProcessUtilization10',
   (SELECT AVG(CPU_Usage) FROM SQLProcessCPU WHERE row_number BETWEEN 1 AND 5)  AS 'SQLProcessUtilization5',
   GETDATE() AS 'Data Sample Timestamp'
   
End
GO
/****** Object:  StoredProcedure [dbo].[RunToolStringReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[RunToolStringReport]
	@xmlData xml
AS
BEGIN

SET NOCOUNT ON;

Declare @whereClause as varchar(max)

select @whereClause = T.c.value('.', 'varchar(max)') from  @xmlData.nodes('/Filters/WhereClause') T(c);
IF(ISNULL(@whereClause, '') = '')
BEGIN
	SET @whereClause = ' 1=1 '
END

--populate status data...
Select LTRIM(RTRIM(T.c.value('.', 'varchar(2)'))) as StatusCode
INTO #Status
from @xmlData.nodes('/Filters/Status/Code') T(c)

Delete from #Status Where ISNULL(StatusCode, '') = ''

--Find Configuration Data
CREATE TABLE #ItemNumConfig(
	ItemNumConfigId uniqueidentifier,
	ItemNum varchar(100),
	ToolSizeID INT NULL,
	Size varchar(20),
	QtyRequired INT
)

INSERT INTO #ItemNumConfig(ItemNumConfigId, QtyRequired)
Select T.c.value('ItemNumConfigId[1]', 'uniqueidentifier') as ItemNumConfigId, T.c.value('QtyRequired[1]', 'int') as QtyRequired
from @xmlData.nodes('/Filters/ItemNumConfigs/ItemNumConfig') T(c)

Update a
	Set a.ItemNum = b.ItemNum,
		a.ToolSizeID = b.ToolSizeID,
		a.Size = s.ShortName
From #ItemNumConfig a
INNER JOIN ItemNumConfigs b ON a.ItemNumConfigId = b.ItemNumConfigId
LEFT JOIN ToolStringSize s (NOLOCK) ON s.ToolSizeID = b.ToolSizeID

--Find Configuration Detail Data
CREATE TABLE #ItemNumConfigDetail(
	ItemNumConfigId uniqueidentifier,
	ParentItemNum varchar(100),
	ItemNum varchar(100),
	Description varchar(100),
	Qty INT,
	QtyRequired INT,
	TotalQtyRequired INT,
	TotalAssets INT,
	CanBeMade INT
)

INSERT INTO #ItemNumConfigDetail
Select b.ItemNumConfigId,
		b.ItemNum,
		a.ItemNum,
		a.DescShort,
		a.Qty as Qty,
		b.QtyRequired as QtyRequired,
		(a.Qty * b.QtyRequired) as TotalQtyRequired,
		0 as TotalAssets,
		0 as CanBeMade
from vwItemNumConfigs a
INNER JOIN #ItemNumConfig b ON b.ItemNum = a.ParentItemNum AND ISNULL(b.ToolSizeID, -1) = ISNULL(a.ToolSizeID, -1)
ORDER by b.ItemNum

-- populate FA data...
CREATE TABLE #FixedAssets(
	FixedAssetId uniqueidentifier,
	RNItemNum varchar(30),
	StatusCode varchar(2),
	StatusDesc varchar(50),
	CurrentItemQty INT
)

EXEC('
INSERT INTO #FixedAssets
Select fa.FixedAssetId, fa.RNItemNum, Code as StatusCode, Status as StatusDesc, 1 as CurrentItemQty
from vwWAMFixedAssetReport fa
Where ' + @whereClause + '
')

Update a
	Set a.TotalAssets = (Select SUM(ISNULL(CurrentItemQty, 0)) from #FixedAssets fa Where fa.RNItemNum = a.ItemNum)
from #ItemNumConfigDetail a

Update #ItemNumConfigDetail Set CanBeMade = TotalAssets / Qty Where Qty > 0

Update a
	Set a.CanBeMade = (Select MIN(b.CanBeMade) from #ItemNumConfigDetail b Where b.ItemNumConfigId = a.ItemNumConfigId)
from #ItemNumConfigDetail a

Update #ItemNumConfigDetail Set CanBeMade = QtyRequired Where CanBeMade > QtyRequired

-- Start Creating Data.
CREATE TABLE #tblData(
	id int IDENTITY(1,1) NOT NULL,	
	ItemNum varchar(100),
	Description varchar(100),
	GrandTotal int default(0),
	GrandDifference int default(0),
	UnitCost decimal(18, 2) default(0),
	OverageCost decimal(18, 2) default(0),
	ShortageCost decimal(18, 2) default(0)
)

INSERT INTO #tblData(ItemNum, Description, GrandTotal)
Select distinct ItemNum, Description, TotalAssets 
from #ItemNumConfigDetail
ORDER by ItemNum

IF EXISTS(Select top 1 ItemNum from #ItemNumConfigDetail)
BEGIN
	INSERT INTO #tblData(ItemNum, Description) VALUES('-1', 'Total')
END

-- craete status columns and data....
IF EXISTS(Select top 1 StatusCode from #Status)
BEGIN
	-- Add Status Columns....
	DECLARE @statusSql as varchar(MAX)
	SET @statusSql = ''
	
	Select @statusSql = @statusSql + ' Alter table #tblData Add [' + StatusCode + '] int default(0); '
	From #Status
	
	EXEC(@statusSql)
	
	--Add Status Column Data...
	SET @statusSql = ''
	
	Select @statusSql = @statusSql + ' Update #tblData Set [' + StatusCode + '] = (Select SUM(ISNULL(CurrentItemQty, 0)) from #FixedAssets Where StatusCode = ''' + StatusCode + ''' AND #tblData.ItemNum = #FixedAssets.RNItemNum); '
	From #Status
	
	EXEC(@statusSql)
	
	--Add Status Column Total Data...
	SET @statusSql = ''
	
	Select @statusSql = @statusSql + ' Update #tblData Set [' + StatusCode + '] = (Select SUM(ISNULL([' + StatusCode + '], 0)) from #tblData) Where ItemNum = ''-1''; '
	From #Status
	
	EXEC(@statusSql)
END

-- Add Cost/Total Columns...
Update a
	Set a.[UnitCost] = (Select top 1 i.StdUnitCost from ItemNums i Where i.ItemNum = a.ItemNum)
From #tblData a

-- craete ToolString columns and data....
IF EXISTS(Select top 1 ItemNumConfigId from #ItemNumConfig)
BEGIN
	-- Add ToolString Columns....
	DECLARE @toolstringSql as varchar(MAX)
	SET @toolstringSql = ''
	
	Select @toolstringSql = @toolstringSql + ' Alter table #tblData Add [' + CONVERT(VARCHAR(50), ItemNumConfigId) + '] int '
	From #ItemNumConfig
	
	EXEC(@toolstringSql)
	
	--Add ToolString Column Data...
	SET @toolstringSql = ''
	
	Select @toolstringSql = @toolstringSql + ' Update #tblData Set [' + CONVERT(VARCHAR(50), ItemNumConfigId) + '] = (Select SUM(ISNULL(TotalQtyRequired, 0)) from #ItemNumConfigDetail Where ItemNumConfigId = ''' + CONVERT(VARCHAR(50), ItemNumConfigId) + ''' AND #tblData.ItemNum = #ItemNumConfigDetail.ItemNum); '
	From #ItemNumConfig
	
	EXEC(@toolstringSql)
	
	-- Update ToolString CanBeMade Columns Data....
	SET @toolstringSql = ''
	
	Select @toolstringSql = @toolstringSql + ' Update #tblData SET [' + CONVERT(VARCHAR(50), ItemNumConfigId) + '] = ISNULL((Select MIN(CanBeMade) from #ItemNumConfigDetail Where ItemNumConfigId = ''' + CONVERT(VARCHAR(50), ItemNumConfigId) + '''), 0) Where ItemNum = ''-1'' '
	From #ItemNumConfig
	
	EXEC(@toolstringSql)
	
	--Update Grand Difference
	SET @toolstringSql = '0'
	
	Select @toolstringSql = @toolstringSql + ' + ISNULL([' + CONVERT(VARCHAR(50), ItemNumConfigId) + '], 0) '
	From #ItemNumConfig
	
	EXEC('Update #tblData set [GrandDifference] = ISNULL(GrandTotal, 0) - (' + @toolstringSql + ') Where ItemNum <> ''-1'' ')
	
	--Update Overage Cost
	EXEC('Update #tblData set [OverageCost] = (ISNULL(UnitCost, 0) * ISNULL(GrandTotal, 0)) - (ISNULL(UnitCost, 0) * (' + @toolstringSql + ')) Where GrandDifference >= 0 AND ItemNum <> ''-1'' ')
	EXEC('Update #tblData set [ShortageCost] = (ISNULL(UnitCost, 0) * ISNULL(GrandTotal, 0)) - (ISNULL(UnitCost, 0) * (' + @toolstringSql + ')) Where GrandDifference < 0 AND ItemNum <> ''-1'' ')
END

--update total for Difference/Cost
EXEC('Update #tblData set [GrandTotal] = (Select SUM(ISNULL(GrandTotal, 0)) from #tblData b Where b.ItemNum <> ''-1'') Where ItemNum = ''-1'' ')
EXEC('Update #tblData set [GrandDifference] = (Select SUM(ISNULL(GrandDifference, 0)) from #tblData b Where b.ItemNum <> ''-1'') Where ItemNum = ''-1'' ')
EXEC('Update #tblData set [OverageCost] = (Select SUM(ISNULL(OverageCost, 0)) from #tblData b Where b.ItemNum <> ''-1'') Where ItemNum = ''-1'' ')
EXEC('Update #tblData set [ShortageCost] = (Select SUM(ISNULL(ShortageCost, 0)) from #tblData b Where b.ItemNum <> ''-1'') Where ItemNum = ''-1'' ')

Select s.StatusCode, ps.Status as StatusDesc
from #Status s
LEFT JOIN PartStatus ps ON ps.Code = s.StatusCode

Select * from #ItemNumConfig
Select * from #tblData ORDER by id


DROP TABLE #Status
DROP TABLE #ItemNumConfig
DROP TABLE #ItemNumConfigDetail
DROP TABLE #FixedAssets
DROP TABLE #tblData

END

GO
/****** Object:  StoredProcedure [dbo].[Save_SOAAuditInformation]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--==================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 11th Feb 2016
--DESCRIPTION: To save audit details for SOA call
--==================================================
CREATE PROC [dbo].[Save_SOAAuditInformation]
	@AuditGuid UNIQUEIDENTIFIER = NULL,
	@AuditTypeId INT,
	@RequestXml XML = NULL,
	@ResponseXml XML = NULL, 
	@RequestedBy VARCHAR(20) = NULL,
	@RequestedOn DATETIME,
	@RequestDuration DECIMAL(18,2), 
	@ResponseStatus VARCHAR(50),
	@ResponseCode VARCHAR(50),
	@Exception VARCHAR(MAX) = NULL,
	@Status BIT
AS
BEGIN
	BEGIN TRY
		BEGIN TRAN
	
		IF (@AuditGuid IS NULL)
			SET @AuditGuid = NEWID()

		INSERT INTO [SOAAuditInformation]([AuditGuid], [AuditTypeId], [RequestXML], [ResponseXML], [RequestedBy], [RequestedOn], [RequestDuration], [ResponseStatus], [ResponseCode], [Exception], [StatusId])
		VALUES		(@AuditGuid, @AuditTypeId,  @RequestXml, @ResponseXml, @RequestedBy, @RequestedOn, @RequestDuration, @ResponseStatus, @ResponseCode, @Exception, @Status)

		SELECT	1
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION;
		DECLARE @ErrorMessage VARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[sp_cdc_wdf_GetNetChanges]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Create stored procedure
CREATE PROCEDURE [dbo].[sp_cdc_wdf_GetNetChanges]
	@schema as sysname = 'dbo',
	@table as sysname,
	@begin_time as datetime,
	@end_time as datetime
AS
BEGIN
	DECLARE @sqlcommand nvarchar(max); 
	DECLARE @fn_net_change_name nvarchar(max);
	DECLARE @from_lsn binary(10);
	DECLARE @to_lsn binary(10);
	
	SET @from_lsn = sys.fn_cdc_map_time_to_lsn('smallest greater than or equal', @begin_time);  
	SET @from_lsn = ISNULL(sys.fn_cdc_map_time_to_lsn('smallest greater than or equal', @begin_time), [sys].[fn_cdc_get_min_lsn](CONCAT(@schema, '_', @table)) );
	SET @to_lsn = sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time);
	SET @fn_net_change_name = 'select * from cdc.fn_cdc_get_net_changes_' + CONCAT(@schema, '_', @table) ;
	SET @sqlcommand = @fn_net_change_name + '(' + convert( nvarchar(max),@from_lsn, 1)+ ',' + convert( nvarchar(max),@to_lsn,1) +',' + '''all with merge'')'
	EXEC sp_executesql @sqlcommand
END
GO
/****** Object:  StoredProcedure [dbo].[SP_PMSchedularJob]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Vivek Bhati>
-- Create date: <4/7/2022>
-- Description:	<SP For PM Schedular Job>
-- Changes By Mangesh Remove PFT WO Create 
-- =============================================
CREATE PROCEDURE [dbo].[SP_PMSchedularJob]
	
AS
BEGIN
	DECLARE @AssetListForPMChecks TABLE
	(
      ParentFixedAssetId UNIQUEIDENTIFIER,
	  MeterReadingTypeId int,
	  PFTConfigId UNIQUEIDENTIFIER,
	  ObjectNumber INT,
	  FixedAssetDateAdded DATETIME,
	  CBMMonitorId INT
	)
-----------------------------------------------------------------------------------------------------------------------------
-- Find Fixasset with meter reding type
-----------------------------------------------------------------------------------------------------------------------------
INSERT INTO @AssetListForPMChecks
	SELECT	Distinct fa.FixedAssetId, m.MeterReadingTypeId, pc.PFTConfigId, m.ObjectNumber, fa.DateAdded, m.CBMMonitorId
	FROM	CBMMonitor m   
	JOIN	CBMMonitorAssetItemNums p on p.CBMMonitorId = m.CBMMonitorId and p.IsParent = 1  and m.Active = 1 
	JOIN	FixedAssets fa ON  fa.InventoryItemNum = p.ItemNum  
	JOIN	PFTConfig pc ON pc.ObjectNumber = m.ObjectNumber AND pc.IsObsolete = 0
	JOIN	PartStatus ps  on ps.Code=fa.EquipmentStatus
	Where  ps.IsDisposed = '0' and   fa.MajorAccountingClass = 30
	

----------------------------------------------------------------------------------------------------------------------------------------- 
---- For AIRT Count 
-----------------------------------------------------------------------------------------------------------------------------------------
	INSERT INTO AuditPMChecks
	SELECT FixedAssetId,PFTConfigId,
		   MeterReadingTypeId,TriggerValue,MeterReadingValue,[CreatedOn],ObjectNumber,PFTWOId,CBMMonitorId
	FROM   (SELECT pmc.parentfixedassetid  [FixedAssetId],
               pmc.pftconfigid,pmc.meterreadingtypeid,
               dbo.Getcbmmonitortriggervalue_test(pmc.parentfixedassetid,pmc.pftconfigid,pmc.meterreadingtypeid) [TriggerValue],
               CASE WHEN ---check active airt count pmpft
               (SELECT Count(pw.pftwoid) FROM   pftwo pw
                WHERE  pw.fixedassetid = pmc.parentfixedassetid
                       AND pw.pfttype = 3  AND pw.pftconfigid = pmc.pftconfigid
                       AND pmc.meterreadingtypeid = 8
                       AND pw.active = 1) >= 1 THEN 0
                 WHEN --check latest airt count pmpft
               (SELECT Count(pw.pftwoid)
                FROM   pftwo pw
                WHERE  pw.fixedassetid = pmc.parentfixedassetid
                       AND pw.pfttype = 3
                       AND pw.pftconfigid = pmc.pftconfigid) >= 1 THEN (SELECT
                 Count(art.fixedassetid) FROM assetrepairtrack art WHERE art.fixedassetid = pmc.parentfixedassetid
                 AND art.dateadded >= (SELECT Max(pws.dateadded) [DateAdded] FROM   pftwo pw JOIN pftwoseq pws
                                                ON pw.pftwoid = pws.pftwoid
                                       WHERE pw.fixedassetid = pmc.parentfixedassetid AND pw.pfttype = 3
									   AND pw.pftconfigid = pmc.pftconfigid AND pmc.meterreadingtypeid = 8
									   AND pw.active = 0))
                 ELSE (SELECT Count(art.fixedassetid) FROM   assetrepairtrack art WHERE  art.fixedassetid = pmc.parentfixedassetid)
				 END  [MeterReadingValue],Getdate() [CreatedOn],pmc.objectnumber,NULL  [PFTWOId],
               pmc.cbmmonitorid
        FROM   @AssetListForPMChecks pmc
               LEFT JOIN AuditPMChecks APM
                      ON APM.FixedAssetId = pmc.ParentFixedAssetId
                         AND APM.PFTConfigId = pmc.PFTConfigId
        WHERE  pmc.MeterReadingTypeId = 8 -- AIRT Count
               AND APM.FixedAssetId IS NULL
               AND APM.PFTConfigId IS NULL) C
WHERE  c.MeterReadingValue >= c.TriggerValue 
--------------------------------------------------------------------------------------------------------------------------------------- 
--------------------------------------------------------------------------------------------------------------------------------------- 
-- for meter reading type (1, 2, 3, 6, 7, 9)  
---------------------------------------------------------------------------------------------------------------------------------------
	 INSERT INTO AuditPMChecks
		SELECT FixedAssetId, PFTConfigId, MeterReadingTypeId, TriggerValue, MeterReadingValue,[CreatedOn], ObjectNumber, PFTWOId, CBMMonitorId
		FROM
		(
		SELECT distinct pmc.ParentFixedAssetId [FixedAssetId], pmc.MeterReadingTypeId,pc.PFTConfigId [PFTConfigId],
				dbo.ufn_CBMMonitor_GetTriggerValue_Test( pmc.ParentFixedAssetId, pc.PFTConfigId, pmc.MeterReadingTypeId) [TriggerValue],   
				CONVERT(INT, ROUND(CASE WHEN pmc.MeterReadingTypeId != 5 THEN cr.LastMeterReadingValue END, 0)) [MeterReadingValue],   
				GETDATE() [CreatedOn],
				pmc.ObjectNumber [ObjectNumber], NULL [PFTWOId], pmc.CBMMonitorId [CBMMonitorId]
		FROM  @AssetListForPMChecks pmc  
			  JOIN PFTConfig PC (NOLOCK) ON pmc.ObjectNumber =pc.ObjectNumber AND pc.IsObsolete = 0
			  JOIN CBMMonitor cbm (NOLOCK) ON cbm.ObjectNumber =pc.ObjectNumber
			  JOIN CBMCalculatedMeterReadings cr (NOLOCK) ON cr.FixedAssetId = pmc.ParentFixedAssetId 
					AND pmc.MeterReadingTypeId = cr.MeterReadingTypeId  AND pmc.CBMMonitorId = cr.CBMMonitorId
			-- For checking when last time PM PFT created for the component  
			LEFT JOIN (SELECT pdi.FixedAssetId  
							  FROM PFTWO p (NOLOCK) JOIN AuditPMChecks pdi ON pdi.PFTConfigId = p.PFTConfigId and p.PFTType = 3  
					  ) dm ON dm.FixedAssetId = pmc.ParentFixedAssetId  
			-- For checking when first time part is installed on any component  
			LEFT JOIN (SELECT FixedAssetId, MIN(DateofTransaction) [InstallDate]   
							  FROM PartTransferDtl (NOLOCK) WHERE Dest = 'IN' GROUP BY FixedAssetId) part ON part.FixedAssetId = pmc.ParentFixedAssetId  
			LEFT JOIN AuditPMChecks APM on APM.FixedAssetId = pmc.ParentFixedAssetId AND APM.PFTConfigId = pmc.PFTConfigId
			WHERE pmc.MeterReadingTypeId IN (1, 2, 3, 6, 7, 9) AND APM.FixedAssetId IS NULL AND APM.PFTConfigId IS NULL
		) E  
		WHERE  e.MeterReadingValue > = e.[TriggerValue]  
----------------------------------------------------------------------------------------------------------------------------------------- 
----------------------------------------------------------------------------------------------------------------------------------------- 
---- Scheduled
-----------------------------------------------------------------------------------------------------------------------------------------
	INSERT INTO AuditPMChecks
	SELECT fixedassetid,pftconfigid,  meterreadingtypeid,triggervalue, meterreadingvalue,[createdon],objectnumber, pftwoid,cbmmonitorid
	FROM   (SELECT DISTINCT pmc.parentfixedassetid [FixedAssetId],pmc.pftconfigid,
							pmc.meterreadingtypeid,
		   dbo.Getcbmmonitortriggervalue_test(pmc.parentfixedassetid, pmc.pftconfigid, pmc.meterreadingtypeid) [TriggerValue],
		   Datediff(dd, COALESCE( (CASE   WHEN ISDATE(cr.lastmeterreadingvalue) = 1 THEN cr.lastmeterreadingvalue ELSE null END ) ,
						(SELECT Max(pws.dateadded) [DateAdded] FROM   pftwo pw JOIN
								pftwoseq pws ON pw.pftwoid = pws.pftwoid WHERE pw.fixedassetid = pmc.parentfixedassetid
								 AND pw.pftconfigid = CASE WHEN Isnull(Cast(APM.pftconfigid AS NVARCHAR (50)), '') != ''
								 THEN APM.pftconfigid  ELSE pmc.pftconfigid   END AND pmc.meterreadingtypeid = 5 AND pw.pfttype = 3
								AND pw.active = 0), --Last PMPFT  is closed date 
		   (SELECT MIN(dateoftransaction) [DateofTransaction]  FROM   parttransferdtl p (nolock) WHERE  dest = 'IN'
		   AND p.fixedassetid = pmc.parentfixedassetid),pmc.fixedassetdateadded), Getdate()) [MeterReadingValue], -- install date 
		   Getdate() [CreatedOn],
		   pmc.objectnumber, NULL [PFTWOId], pmc.cbmmonitorid
			FROM   @AssetListForPMChecks pmc
				   JOIN PFTConfig PC (nolock)
					 ON pmc.objectnumber = pc.objectnumber AND pc.IsObsolete = 0
				   JOIN CBMMonitor cbm (nolock)
					 ON cbm.objectnumber = pc.objectnumber AND pc.IsObsolete = 0
				   LEFT JOIN CBMCalculatedMeterReadings cr (nolock)
						  ON cr.FixedAssetId = pmc.ParentFixedAssetId
							 AND cr.CBMMonitorId = cbm.cbmmonitorid
							 AND CBM.meterreadingtypeid = cbm.MeterReadingTypeId
							 AND cr.meterreadingtypeid = pmc.meterreadingtypeid
							 AND cr.cbmmonitorid = pmc.cbmmonitorid
				   LEFT JOIN AuditPMChecks APM (nolock)
						  ON APM.FixedAssetId = pmc.ParentFixedAssetId
							 AND APM.PFTConfigId = pmc.PFTConfigId
			WHERE  pmc.MeterReadingTypeId = 5 -- Scheduled
				   AND APM.FixedAssetId IS NULL
				   AND APM.PFTConfigId IS NULL) A
		WHERE  a.MeterReadingValue >= a.TriggerValue 
---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
-- For Days Since DT Return 
---------------------------------------------------------------------------------------------------------------------------------------
	INSERT INTO AuditPMChecks
	SELECT FixedAssetId,PFTConfigId,
		   MeterReadingTypeId,TriggerValue,MeterReadingValue,[CreatedOn],ObjectNumber,PFTWOId,CBMMonitorId
	FROM   (SELECT pmc.parentfixedassetid  [FixedAssetId],
				   pmc.PFTConfigId, pmc.MeterReadingTypeId,
				   dbo.Getcbmmonitortriggervalue_test(pmc.parentfixedassetid,pmc.PFTConfigId, pmc.MeterReadingTypeId) [TriggerValue],
				   dbo.Ufn_cbmmonitor_getdtlastmeterreadingvalue(pmc.parentfixedassetid,pmc.cbmmonitorid) AS [MeterReadingValue],
				   Getdate() [CreatedOn],
				   pmc.ObjectNumber,NULL [PFTWOId],
				   pmc.CBMMonitorId
			FROM   @AssetListForPMChecks pmc
				   JOIN PFTWO pw
					 ON pmc.ParentFixedAssetId = pw.FixedAssetId
						AND pw.PFTType = 3
						AND pw.Active = 0
				   LEFT JOIN AuditPMChecks APM
						  ON APM.FixedAssetId = pmc.ParentFixedAssetId
							 AND APM.PFTConfigId = pmc.PFTConfigId
			WHERE  pmc.MeterReadingTypeId IN ( 10, 11 ) -- Days Since DT Return
				   AND APM.FixedAssetId IS NULL
				   AND APM.PFTConfigId IS NULL) D
	WHERE  d.MeterReadingValue > d.TriggerValue 
---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------

--One time mendatory
--INSERT INTO AuditPMChecks
--SELECT FixedAssetId, PFTConfigId, MeterReadingTypeId, TriggerValue, MeterReadingValue,[CreatedOn], ObjectNumber, PFTWOId, CBMMonitorId
--	FROM   
--	(
--SELECT f1.FixedAssetId, pc.PFTConfigId, m.MeterReadingTypeId, 1 [TriggerValue], null [MeterReadingValue], GETDATE() [CreatedOn], m.ObjectNumber ,NULL [PFTWOId],m.CBMMonitorId
-- FROM		CBMMonitor m   
--			JOIN  CBMMonitorAssetItemNums p on p.CBMMonitorId = m.CBMMonitorId and p.IsParent = 1  and m.Active = 1 and  m.MeterReadingTypeId=5
--			JOIN  FixedAssets f1 ON  f1.InventoryItemNum = p.ItemNum  
--			JOIN  PFTConfig pc ON pc.ObjectNumber = m.ObjectNumber AND pc.IsObsolete = 0
--			JOIN  PartStatus ps  on ps.Code=f1.EquipmentStatus
--			JOIN   PFTWO pw on pw.FixedAssetId = f1.FixedAssetId and pw.PFTType = 3 -- PM PFT  
-- LEFT JOIN AuditPMChecks APM on APM.FixedAssetId = f1.FixedAssetId and APM.PFTConfigId = pc.PFTConfigId
-- WHERE m.MeterReadingTypeId = 4 -- One Time Mandatory  
-- AND PW.PFTWOId is null   and APM.FixedAssetId is null and APM.PFTConfigId is null  ) B

 ---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
END



GO
/****** Object:  StoredProcedure [dbo].[sp_ProcessAll_Insert]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ProcessAll_Insert]
AS
BEGIN
  SET NOCOUNT ON

  EXEC sp_ProcessItemNums_Insert
  EXEC sp_ProcessInventoryRNItemNums_Insert
  EXEC sp_ProcessItemCrossReference_Insert
  
  SET NOCOUNT OFF
END

GO
/****** Object:  StoredProcedure [dbo].[sp_ProcessAll_Update]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ProcessAll_Update]
AS
BEGIN
  SET NOCOUNT ON

  EXEC sp_ProcessItemNums_Update
  EXEC sp_ProcessInventoryRNItemNums_Update
  EXEC sp_ProcessItemCrossReference_Update  
  
  SET NOCOUNT OFF
END

GO
/****** Object:  StoredProcedure [dbo].[sp_ProcessInventoryRNItemNums_Insert]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ProcessInventoryRNItemNums_Insert]
AS
BEGIN
	SET NOCOUNT ON

	delete from AesOps.dbo.ItemNumReferences where RefType = 'R' and Source='J'

	insert into AesOps.dbo.ItemNumReferences (ItemNum, RefItemNum, RefType, Source)
	select LTRIM(RTRIM(a.From_Item_number)), LTRIM(RTRIM(a.To_Item_number)), 'R', 'J'
	from AesImport.dbo.InventoryRNItemNumImport a	
	  
	SET NOCOUNT OFF
END








GO
/****** Object:  StoredProcedure [dbo].[sp_ProcessInventoryRNItemNums_Update]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ProcessInventoryRNItemNums_Update]
AS
BEGIN
	SET NOCOUNT ON	
	
	update AesOps.dbo.ItemNums
	set IsAsset = 1
	where ItemNum in (select ItemNum from AesOps.dbo.ItemNumReferences where RefType = 'R')

	update AesOps.dbo.ItemNums
	set IsAsset = 1
	where ItemNum in (select RefItemNum from AesOps.dbo.ItemNumReferences where RefType = 'R')

	-- changed 03/04/2016
	UPDATE AesOps.dbo.ItemNums SET IsAsset = 1 
	WHERE ItemNum IN ( Select i.ItemNum from AesOps.dbo.ItemNums i  where i.PartClassification like 'RENTALS%' and i.IsAsset = 0)

/*
	update AesOps.dbo.ItemNums
	set IsAsset = 0
	where ItemNum in not (select RefItemNum from AesOps.dbo.ItemNumReferences where RefType = 'R')
	  and ItemNum in (select ItemNum from AesOps.dbo.ItemNumReferences where RefType = 'R')
*/

	update i 
		set i.ToolPanel = rn.ToolPanel
		, i.ToolCode = rn.ToolCode
	from AesOps.dbo.ItemNums i
		left join AesOps.dbo.ItemNumReferences ir on ir.ItemNum = i.ItemNum
		left join AesOps.dbo.ItemNums rn on rn.ItemNum = ir.RefItemNum
	where ir.RefType = 'R'
	  and (i.ToolPanel <> rn.ToolPanel or (i.ToolPanel is null and rn.ToolPanel is not null))
	
	  
	update i 
		set i.ToolPanel = rn.ToolPanel
		, i.ToolCode = rn.ToolCode
	from AesOps.dbo.ItemNums i
		left join AesOps.dbo.ItemNumReferences ir on ir.ItemNum = i.ItemNum
		left join AesOps.dbo.ItemNums rn on rn.ItemNum = ir.RefItemNum
	where ir.RefType = 'R'
	  and (i.ToolCode <> rn.ToolCode or (i.ToolCode is null and rn.ToolCode is not null))
	  
	SET NOCOUNT OFF
END








GO
/****** Object:  StoredProcedure [dbo].[sp_ProcessItemCrossReference_Insert]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ProcessItemCrossReference_Insert]
AS
BEGIN
  SET NOCOUNT ON

	delete from AesOps.dbo.ItemNumReferences where RefType = 'U' and Source='J'

	insert into AesOps.dbo.ItemNumReferences (ItemNum, RefItemNum, RefType, Source)
	select LTRIM(RTRIM(a.LITM)), LTRIM(RTRIM(a.CITM)), 'U', 'J'
	from AesImport.dbo.ItemCrossReferenceImport a where a.CITM is not null	

	SET NOCOUNT OFF

END







GO
/****** Object:  StoredProcedure [dbo].[sp_ProcessItemCrossReference_Update]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ProcessItemCrossReference_Update]
AS
BEGIN
  SET NOCOUNT ON
  
	delete from AesOps.dbo.ItemNumReferences
	where ItemNumReferenceId in (
	select ir.ItemNumReferenceId from AesOps.dbo.ItemNumReferences ir
	left join AesOps.dbo.ItemNums i on i.ItemNum = ir.ItemNum
	where i.ItemNum is null
	)

	delete from AesOps.dbo.ItemNumReferences
	where ItemNumReferenceId in (
	select ir.ItemNumReferenceId from AesOps.dbo.ItemNumReferences ir
	left join AesOps.dbo.ItemNums i on i.ItemNum = ir.RefItemNum
	where i.ItemNum is null
	)

	SET NOCOUNT OFF

END







GO
/****** Object:  StoredProcedure [dbo].[sp_ProcessItemNumConfig_Cursor_ByItemNum]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ProcessItemNumConfig_Cursor_ByItemNum]
@ItemNumber VARCHAR(30)
AS
BEGIN
  SET NOCOUNT ON		
	
	------------- New Change to get the ItemNumMetadata from WindChill SQL database  -----------------

--DECLARE @LastModifiedDate datetime
DECLARE @ItemNum VARCHAR(30)
DECLARE @ItemNums table 
( ItemNum VARCHAR(30),
	[AttributeName] nvarchar(100),
	[AttributeValue] nvarchar(1500),
	[UOM] nvarchar(50)
)


--SELECT @LastModifiedDate = CAST(SUBSTRING(MAX(MetaValue), 0, 21) as datetime) FROM Aesops.dbo.ItemNumMetadata WITH (NOLOCK) WHERE MetaName = 'modifyTimestamp'

INSERT INTO @ItemNums
SELECT	si.Item, 
		si.[AttributeName], 
		si.[AttributeValue],
		si.[AttributeValueUOM]
FROM USDCSCDSQLPD001.windchill_data.dbo.ItemAttributes si WITH (NOLOCK) 
WHERE 
-- si.AttributeName = 'modifyTimestamp' AND si.item=@ItemNumber;
si.Item IN (SELECT Item 
					FROM USDCSCDSQLPD001.windchill_data.dbo.ItemAttributes si WITH (NOLOCK) 
					WHERE si.AttributeName = 'modifyTimestamp' AND si.item=@ItemNumber)
--si.Item IN (SELECT Item 
--					FROM USDCSCDSQLPD001.windchill_data.dbo.ItemAttributes si WITH (NOLOCK) 
--					WHERE si.AttributeName = 'modifyTimestamp' AND CAST(SUBSTRING(si.AttributeValue, 0, 21) as datetime)  >= '1-Jan-2017'
--					AND CAST(SUBSTRING(si.AttributeValue, 0, 21) as datetime) <= '28-Feb-2017')

print @ItemNumber;

DECLARE db_cursor1 CURSOR FOR  
SELECT ItemNum
	FROM @ItemNums
	WHERE AttributeName = 'modifyTimestamp'
	order by CAST(SUBSTRING(AttributeValue, 0, 21) as datetime) asc

OPEN db_cursor1   
FETCH NEXT FROM db_cursor1 INTO @ItemNum

WHILE @@FETCH_STATUS = 0
BEGIN   

	DELETE FROM Aesops.dbo.ItemNumMetadata
	WHERE ItemNum = @ItemNum
	
	INSERT INTO Aesops.dbo.ItemNumMetadata (ItemNumMetaDataId, ItemNum, MetaName, MetaValue, UOM)
	SELECT newid(), s.ItemNum, s.AttributeName, s.AttributeValue, s.UOM FROM @ItemNums s WHERE s.ItemNum = @ItemNum

	Update AesOps.dbo.ItemNums  SET IsObsolete = 1 FROM AesOps.dbo.ItemNums t WITH (NOLOCK) INNER JOIN @ItemNums s on t.ItemNum = s.ItemNum WHERE s.AttributeName = 'LIFE CYCLE STATE' AND s.[AttributeValue] = 'Obsolute' AND s.ItemNum = @ItemNum
	Update AesOps.dbo.ItemNums  SET ToolPanel = [AttributeValue]  FROM AesOps.dbo.ItemNums t WITH (NOLOCK) INNER JOIN @ItemNums s on t.ItemNum = s.ItemNum WHERE s.AttributeName = 'EQUIPMENT PANEL' AND s.ItemNum = @ItemNum
	Update AesOps.dbo.ItemNums  SET ToolCode = [AttributeValue]  FROM AesOps.dbo.ItemNums t WITH (NOLOCK) INNER JOIN @ItemNums s on t.ItemNum = s.ItemNum WHERE s.AttributeName = 'TOOL CODE' AND s.ItemNum = @ItemNum
	Update AesOps.dbo.ItemNums  SET Revision = [AttributeValue]  FROM AesOps.dbo.ItemNums t WITH (NOLOCK) INNER JOIN @ItemNums s on t.ItemNum = s.ItemNum WHERE s.AttributeName = 'VERSIONINFO' AND s.ItemNum = @ItemNum
	Update AesOps.dbo.ItemNums  SET NetWeight = [AttributeValue]  FROM AesOps.dbo.ItemNums t WITH (NOLOCK) INNER JOIN @ItemNums s on t.ItemNum = s.ItemNum WHERE s.AttributeName = 'WEIGHT' AND s.ItemNum = @ItemNum
	Update AesOps.dbo.ItemNums  SET PartClassification = [AttributeValue]  FROM AesOps.dbo.ItemNums t WITH (NOLOCK) INNER JOIN @ItemNums s on t.ItemNum = s.ItemNum WHERE s.AttributeName = 'CLASSIFICATION' AND s.ItemNum = @ItemNum
	
	Update AesOps.dbo.ItemNums  SET Revision = MetaValue  
	FROM AesOps.dbo.ItemNums t WITH (NOLOCK) 
	INNER JOIN Aesops.dbo.ItemNumMetadata s on t.ItemNum = s.ItemNum 
	WHERE s.MetaName = 'SOFTWARE VERSION' AND t.ItemNum IN (select distinct(firmwareitemnum) from aesops.dbo.boardfirmwares)

	--TODO : Need Confirmation on changing IsObsolete 
	--Update AesOps.dbo.ItemNums  SET IsObsolete = 1  FROM AesOps.dbo.ItemNums WHERE ItemNum IN (SELECT ItemNum FROM @ItemNums WHERE s.AttributeName = 'LIFE CYCLE STATE' and s.[AttributeValue] = 'Obsolute')


	------------- New Change to get the ItemNumConfigs (BillOfMaterial) from WindChill SQL database  -----------------

	-- Save REVISION IN HISTORY
	INSERT INTO aesops.dbo.ItemNumConfigHistory(
			BranchPlant ,LineNum, ItemNum, ParentItemNum, OptionText
           ,ECNNumber, LastDateModified, LastUserModified, LastModifiedUserName, Qty, Reference
           ,EffectiveFromDate, EffectiveThruDate, ItemLevel, IsMandatoryReplacement, IsRequired
           ,DateAdded, UserIdAdded, AddedByUserName, HistoryDateAdded)
    Select 
		c.BranchPlant, c.LineNum, c.ItemNum, c.ParentItemNum, c.OptionText
        ,c.ECNNumber, c.LastDateModified, c.LastUserModified, u.UserName, c.Qty, c.Reference
        ,c.EffectiveFromDate, c.EffectiveThruDate, c.ItemLevel, c.IsMandatoryReplacement, c.IsRequired
        ,c.DateAdded, c.UserIdAdded, ua.UserName, GETDATE()
    FROM aesops.dbo.ItemNumConfigs c (NOLOCK)
    LEFT JOIN aesops.dbo.users u (NOLOCK) on u.UserId = c.LastUserModified
    LEFT JOIN aesops.dbo.users ua (NOLOCK) on ua.UserId = c.UserIdAdded
    WHERE ParentItemNum = @ItemNum AND ISNULL(IsToolString, 0) = 0
    ORDER by LineNum
        
    --DELETE OLD CONFIGURATION RECORDS
	DELETE FROM  aesops.dbo.ItemNumConfigs WHERE ParentItemNum =  @ItemNum AND ISNULL(IsToolString, 0) = 0

	-- ADD NEW CHANGES
	INSERT INTO aesops.dbo.ItemNumConfigs
	(
		ItemNum, 
		ParentItemNum, 
		OptionText, 
		LineNum, 
		Qty, 
		IsToolString, 
		IsActive, 
		IsMandatoryReplacement, 
		IsRequired, 
		UserIdAdded, 
		DateAdded
	)
	SELECT
		b.[CompItem], 
		b.[ParentItem], 
		LTRIM(RTRIM(b.[FindNumber])), 
		b.[Sequence], 
		b.[Qty], 
		0 [ToolString], 
		1 [IsActive], 
		0 [IsMandatoryReplacement],  
		CASE WHEN (b.[Qty] > 0 
				  and b.[FindNumber] <> 'OPTIONAL' 
				  and b.[FindNumber] <> 'AR'
				  and b.[FindNumber] <> 'REF'
				  and (b.[FindNumber] like '%1' or b.[FindNumber] = ''))
			THEN 1 
			ELSE 0 
		END [IsRequired], 
		0 [UserIdAdded]
		, GETDATE() [DateAdded]
	FROM USDCSCDSQLPD001.windchill_data.dbo.BillOfMaterials b  WITH (NOLOCK) 
	WHERE ParentItem = @ItemNum

	UPDATE ItemNums set IsObsolete=1 WHERE ItemNum=@ItemNum 
	AND EXISTS(SELECT * FROM ItemNumMetadata WHERE metaname = 'life cycle state' AND metavalue = 'obsolete' AND ItemNum=@ItemNum)

	IF EXISTS(SELECT * FROM ItemNumMetadata WHERE metaname = 'life cycle state' AND (metavalue = 'obsolete' OR metavalue='inactive') AND ItemNum=@ItemNum)
	BEGIN
		UPDATE ItemNums set Active=0 WHERE ItemNum=@ItemNum 
	END
	ELSE 
	BEGIN
		UPDATE ItemNums set Active=1 WHERE ItemNum=@ItemNum  
	END
  FETCH NEXT FROM db_cursor1 INTO @ItemNum
END

CLOSE db_cursor1   
DEALLOCATE db_cursor1

  SET NOCOUNT OFF
END

GO
/****** Object:  StoredProcedure [dbo].[sp_ProcessItemNumConfig_Cursor_Manual]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ProcessItemNumConfig_Cursor_Manual]
AS
BEGIN
  SET NOCOUNT ON		
	
	------------- New Change to get the ItemNumMetadata from WindChill SQL database  -----------------

--DECLARE @LastModifiedDate datetime
DECLARE @ItemNum VARCHAR(30)
DECLARE @ItemNums table 
( ItemNum VARCHAR(30),
	[AttributeName] nvarchar(100),
	[AttributeValue] nvarchar(1500),
	[UOM] nvarchar(50)
)


--SELECT @LastModifiedDate = CAST(SUBSTRING(MAX(MetaValue), 0, 21) as datetime) FROM Aesops.dbo.ItemNumMetadata WITH (NOLOCK) WHERE MetaName = 'modifyTimestamp'

INSERT INTO @ItemNums
SELECT	si.Item, 
		si.[AttributeName], 
		si.[AttributeValue],
		si.[AttributeValueUOM]
FROM USDCSCDSQLPD001.windchill_data.dbo.ItemAttributes si WITH (NOLOCK) 
--LEFT JOIN ItemNumConfigs inc on  CONVERT(VARCHAR(50),inc.ParentItemNum) =  CONVERT(VARCHAR(50),si.item)
WHERE  
--si.AttributeName = 'modifyTimestamp' AND CAST(SUBSTRING(si.AttributeValue, 0, 21) as datetime) >= '1-Jan-2017'
--AND CAST(SUBSTRING(si.AttributeValue, 0, 21) as datetime) <= '28-Feb-2019' AND inc.ParentItemNum IS NULL ;
si.Item IN (SELECT Item 
					FROM USDCSCDSQLPD001.windchill_data.dbo.ItemAttributes si WITH (NOLOCK) 
					WHERE si.AttributeName = 'modifyTimestamp' AND CAST(SUBSTRING(si.AttributeValue, 0, 21) as datetime)  >= '1-Jan-2018'
					AND CAST(SUBSTRING(si.AttributeValue, 0, 21) as datetime) <= '30-Jun-2018')


DECLARE db_cursor1 CURSOR FOR  
SELECT ItemNum
	FROM @ItemNums
	WHERE AttributeName = 'modifyTimestamp'
	order by CAST(SUBSTRING(AttributeValue, 0, 21) as datetime) asc

OPEN db_cursor1   
FETCH NEXT FROM db_cursor1 INTO @ItemNum

WHILE @@FETCH_STATUS = 0
BEGIN   

	DELETE FROM Aesops.dbo.ItemNumMetadata
	WHERE ItemNum = @ItemNum
	
	INSERT INTO Aesops.dbo.ItemNumMetadata (ItemNumMetaDataId, ItemNum, MetaName, MetaValue, UOM)
	SELECT newid(), s.ItemNum, s.AttributeName, s.AttributeValue, s.UOM FROM @ItemNums s WHERE s.ItemNum = @ItemNum

	Update AesOps.dbo.ItemNums  SET IsObsolete = 1 FROM AesOps.dbo.ItemNums t WITH (NOLOCK) INNER JOIN @ItemNums s on t.ItemNum = s.ItemNum WHERE s.AttributeName = 'LIFE CYCLE STATE' AND s.[AttributeValue] = 'Obsolute' AND s.ItemNum = @ItemNum
	Update AesOps.dbo.ItemNums  SET ToolPanel = [AttributeValue]  FROM AesOps.dbo.ItemNums t WITH (NOLOCK) INNER JOIN @ItemNums s on t.ItemNum = s.ItemNum WHERE s.AttributeName = 'EQUIPMENT PANEL' AND s.ItemNum = @ItemNum
	Update AesOps.dbo.ItemNums  SET ToolCode = [AttributeValue]  FROM AesOps.dbo.ItemNums t WITH (NOLOCK) INNER JOIN @ItemNums s on t.ItemNum = s.ItemNum WHERE s.AttributeName = 'TOOL CODE' AND s.ItemNum = @ItemNum
	Update AesOps.dbo.ItemNums  SET Revision = [AttributeValue]  FROM AesOps.dbo.ItemNums t WITH (NOLOCK) INNER JOIN @ItemNums s on t.ItemNum = s.ItemNum WHERE s.AttributeName = 'VERSIONINFO' AND s.ItemNum = @ItemNum
	Update AesOps.dbo.ItemNums  SET NetWeight = [AttributeValue]  FROM AesOps.dbo.ItemNums t WITH (NOLOCK) INNER JOIN @ItemNums s on t.ItemNum = s.ItemNum WHERE s.AttributeName = 'WEIGHT' AND s.ItemNum = @ItemNum
	Update AesOps.dbo.ItemNums  SET PartClassification = [AttributeValue]  FROM AesOps.dbo.ItemNums t WITH (NOLOCK) INNER JOIN @ItemNums s on t.ItemNum = s.ItemNum WHERE s.AttributeName = 'CLASSIFICATION' AND s.ItemNum = @ItemNum
	
	Update AesOps.dbo.ItemNums  SET Revision = MetaValue  
	FROM AesOps.dbo.ItemNums t WITH (NOLOCK) 
	INNER JOIN Aesops.dbo.ItemNumMetadata s on t.ItemNum = s.ItemNum 
	WHERE s.MetaName = 'SOFTWARE VERSION' AND t.ItemNum IN (select distinct(firmwareitemnum) from aesops.dbo.boardfirmwares)

	--TODO : Need Confirmation on changing IsObsolete 
	--Update AesOps.dbo.ItemNums  SET IsObsolete = 1  FROM AesOps.dbo.ItemNums WHERE ItemNum IN (SELECT ItemNum FROM @ItemNums WHERE s.AttributeName = 'LIFE CYCLE STATE' and s.[AttributeValue] = 'Obsolute')


	------------- New Change to get the ItemNumConfigs (BillOfMaterial) from WindChill SQL database  -----------------

	-- Save REVISION IN HISTORY
	INSERT INTO aesops.dbo.ItemNumConfigHistory(
			BranchPlant ,LineNum, ItemNum, ParentItemNum, OptionText
           ,ECNNumber, LastDateModified, LastUserModified, LastModifiedUserName, Qty, Reference
           ,EffectiveFromDate, EffectiveThruDate, ItemLevel, IsMandatoryReplacement, IsRequired
           ,DateAdded, UserIdAdded, AddedByUserName, HistoryDateAdded)
    Select 
		c.BranchPlant, c.LineNum, c.ItemNum, c.ParentItemNum, c.OptionText
        ,c.ECNNumber, c.LastDateModified, c.LastUserModified, u.UserName, c.Qty, c.Reference
        ,c.EffectiveFromDate, c.EffectiveThruDate, c.ItemLevel, c.IsMandatoryReplacement, c.IsRequired
        ,c.DateAdded, c.UserIdAdded, ua.UserName, GETDATE()
    FROM aesops.dbo.ItemNumConfigs c (NOLOCK)
    LEFT JOIN aesops.dbo.users u (NOLOCK) on u.UserId = c.LastUserModified
    LEFT JOIN aesops.dbo.users ua (NOLOCK) on ua.UserId = c.UserIdAdded
    WHERE ParentItemNum = @ItemNum AND ISNULL(IsToolString, 0) = 0
    ORDER by LineNum
        
    --DELETE OLD CONFIGURATION RECORDS
	DELETE FROM  aesops.dbo.ItemNumConfigs WHERE ParentItemNum =  @ItemNum AND ISNULL(IsToolString, 0) = 0

	-- ADD NEW CHANGES
	INSERT INTO aesops.dbo.ItemNumConfigs
	(
		ItemNum, 
		ParentItemNum, 
		OptionText, 
		LineNum, 
		Qty, 
		IsToolString, 
		IsActive, 
		IsMandatoryReplacement, 
		IsRequired, 
		UserIdAdded, 
		DateAdded
	)
	SELECT
		b.[CompItem], 
		b.[ParentItem], 
		LTRIM(RTRIM(b.[FindNumber])), 
		b.[Sequence], 
		b.[Qty], 
		0 [ToolString], 
		1 [IsActive], 
		0 [IsMandatoryReplacement],  
		CASE WHEN (b.[Qty] > 0 
				  and b.[FindNumber] <> 'OPTIONAL' 
				  and b.[FindNumber] <> 'AR'
				  and b.[FindNumber] <> 'REF'
				  and (b.[FindNumber] like '%1' or b.[FindNumber] = ''))
			THEN 1 
			ELSE 0 
		END [IsRequired], 
		0 [UserIdAdded]
		, GETDATE() [DateAdded]
	FROM USDCSCDSQLPD001.windchill_data.dbo.BillOfMaterials b  WITH (NOLOCK) 
	WHERE ParentItem = @ItemNum

	UPDATE ItemNums set IsObsolete=1 WHERE ItemNum=@ItemNum 
	AND EXISTS(SELECT * FROM ItemNumMetadata WHERE metaname = 'life cycle state' AND metavalue = 'obsolete' AND ItemNum=@ItemNum)

	IF EXISTS(SELECT * FROM ItemNumMetadata WHERE metaname = 'life cycle state' AND (metavalue = 'obsolete' OR metavalue='inactive') AND ItemNum=@ItemNum)
	BEGIN
		UPDATE ItemNums set Active=0 WHERE ItemNum=@ItemNum 
	END
	ELSE 
	BEGIN
		UPDATE ItemNums set Active=1 WHERE ItemNum=@ItemNum  
	END
  FETCH NEXT FROM db_cursor1 INTO @ItemNum
END

CLOSE db_cursor1   
DEALLOCATE db_cursor1

  SET NOCOUNT OFF
END

GO
/****** Object:  StoredProcedure [dbo].[sp_ProcessItemNums_Insert]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ProcessItemNums_Insert]
AS
BEGIN
  SET NOCOUNT ON	

	insert into AesOps.dbo.ItemNums
	(
	   [ItemNum]
	   ,[ItemNum2]
	   ,[ItemNum3]
	   ,[DescShort]
	   ,[DescDocNum]
	   ,[Revision]
	   ,[DefaultUOM]
	   ,[DefaultSerialProfile]

	   ,[IsObsolete]
	   ,[IsRestrictPurchasing]
	   ,[IsAsset]

	   ,[PartClassification]
	   ,[ProductLine]
	   ,[ServiceLine]
		
	   ,StockType

	   ,[Active]
	   ,[LastEdit]
	   ,[DateAdded]
	)
	select 
		[ItemNum]
		,[ItemNum2]
		,[ItemNum3]
		,[DescShort]
		,[DescDocNum]
		,[Revision]
		,[DefaultUOM]
		,[DefaultSerialProfile]

		,0 --[IsObsolete] -- CASE WHEN ini.StockType IN ('O','U') THEN 1 ELSE 0 END
		,0 --[IsRestrictPurchasing]
		,0 --,case ini.IMLNTY when 'RN' then 1 else 0 end --[IsAsset]

		,IsNull(PC3Desc,'')+IsNull('\'+PC4Desc,'')+IsNull('\'+PC5Desc,'')+IsNull('\'+PC6Desc,'')+IsNull('\'+PC7Desc,'')

		,PC4Desc
		,PC5Desc
		,StockType

		,[Active]
		,[LastEdit]
		,GETDATE()

	from AesImport.dbo.ItemNumImport ini
	where ini.ItemNum NOT IN (SELECT i.ItemNum FROM AesOps.dbo.ItemNums i WHERE i.ItemNum = ini.ItemNum)	
	

	insert into AesOps.dbo.ItemNumRevisions
	( ItemNum, Revision, ItemNum3, IsObsolete, Active, DateAdded )
	select
	  in1.ItemNum, in1.Revision, in1.ItemNum3, in1.IsObsolete, in1.Active, GETDATE()
	from AesOps.dbo.ItemNums in1
	left join AesOps.dbo.ItemNumRevisions inr1 on inr1.ItemNum = in1.ItemNum and inr1.Revision = in1.Revision
	where 
	  inr1.ItemNumRevisionId is null and in1.Revision is not null and in1.Revision <> ''
	  and in1.PartClassification <> 'DRILLING SERVICES\SOFTWARE\FIRMWARE'	

	insert into AesOps.dbo.ItemNumBranchPlants
	(
		[BranchPlant]
	   ,[ItemNum]
	   ,[Version]
	   ,[SerialProfile]
	   ,LotStatusCode
	   ,[MinReorder]
	   ,[MaxInStock]
	   ,[OptimumStock]
	   ,[IsProvidingLoc]
	   ,[CurrShortName]
	   ,[StdUnitCost]
	   ,[MovingAverageCost]
	   , CostMethod
	   , ECCN
	   , HTSUS
	   ,[LastEdit]
	   ,[DateAdded]
	)
	select
	  ibci.branch_plant
	  , convert(varchar(8), ibci.item_number)
	  , null --IMRVNO
	  , ibci.Lot_Process_Type
	  , ibci.Lot_Status_Code
	  , ibci.Minimum_Reorder_Quantity
	  , ibci.Maximum_Reorder_Quantity
	  , ibci.Safety_Stock
	  , 0  -- is providing loc
	  , NULL  -- curr short name
	  , ibci.Cost
	  , null -- moving average cost
	  , ibci.Cost_Method
	  , ibci.Export_Commodity_Control_Number
	  , ibci.Harmonized_Tariff_Begin_Digits + IsNull(ibci.Harmonized_Tariff_End_Digits, '')
	  , isnull(ibci.Date_Changed, GETDATE())
	  , isnull(ibci.Date_Added, GETDATE())
	from AesImport.dbo.ItemBranchAndCostImport ibci
	left join AesOps.dbo.ItemNumBranchPlants x on x.BranchPlant=ibci.Branch_plant and x.ItemNum=ibci.Item_Number
	where 
	  x.ItemNumBranchPlantId is null
	

---- Update Part Classifications table

TRUNCATE TABLE aesops.dbo.PartClassifications

INSERT INTO aesops.dbo.PartClassifications(PartClassification, Level1, Level2, Level3, Level4, Level5)

SELECT DISTINCT SRP3 + (CASE WHEN ISNULL(SRP4,'') ='' THEN '' ELSE '/'+ SRP4 END) + (CASE WHEN ISNULL(SRP5,'') = '' THEN '' ELSE '/'+ SRP5 END) + (CASE WHEN ISNULL(SRP6,'') = '' THEN '' ELSE '/'+ SRP6 END),
SRP3, SRP4, SRP5, SRP6, NULL
FROM USDCSCDSQLPD001.[Windchill_Data].[dbo].[ClassPaths]
ORDER BY SRP3, SRP4, SRP5,SRP6

  SET NOCOUNT OFF
END

GO
/****** Object:  StoredProcedure [dbo].[sp_ProcessItemNums_Update]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ProcessItemNums_Update]
AS
BEGIN
  SET NOCOUNT ON

	UPDATE [AesOps].[dbo].ItemNums
	SET 
--	   [ItemNum] = ini.ItemNum,
	   [ItemNum2] = ini.ItemNum2
	   ,[ItemNum3] = ini.ItemNum3
	   ,[DescShort] = ini.DescShort
	   ,[DescDocNum] = ini.DescDocNum
	   ,[Revision] = ini.Revision
--	   ,[DefaultUOM] = ini.DefaultUOM
--	   ,[DefaultSerialProfile] = ini.DefaultSerialProfile

	   ,[IsObsolete] = 0 -- CASE WHEN ini.StockType IN ('O','U') THEN 1 ELSE 0 END
	   ,[IsRestrictPurchasing] = 0
	   --,[IsAsset] = case ini.IMLNTY when 'RN' then 1 else 0 end

	   --,[PartClassification] = IsNull(ini.PC3Desc,'')+IsNull('\'+ini.PC4Desc,'')+IsNull('\'+ini.PC5Desc,'')+IsNull('\'+ini.PC6Desc,'')+IsNull('\'+ini.PC7Desc,'')
	   ,[ProductLine] = ini.PC4Desc
	   ,[ServiceLine] = ini.PC5Desc
	   
	   ,StockType = ini.StockType

	   ,[Active] = ini.Active
	   --,[LastEdit] =  ini.LastEdit
	FROM AesImport.dbo.ItemNumImport ini
	WHERE [AesOps].[dbo].ItemNums.[ItemNum] = ini.[ItemNum]	

	
	update AesOps.dbo.ItemNums
	set DefaultSerialProfile = t.DefaultSerialProfile
	from (
	select i.ItemNum, i.DefaultSerialProfile 
	from AesImport.dbo.ItemNumImport i 
	where not exists (select FixedAssetId from AesOps.dbo.FixedAssets fa where fa.InventoryItemNum = i.ItemNum or fa.RNItemNum = i.ItemNum)
	) t
	where t.ItemNum = AesOps.dbo.ItemNums.ItemNum and t.DefaultSerialProfile <> AesOps.dbo.ItemNums.DefaultSerialProfile	

	update AesOps.dbo.ItemNumBranchPlants
	set
	   --,[Version]
	   [SerialProfile] = ibci.Lot_Process_Type
	   ,LotStatusCode = ibci.Lot_Status_Code
	   ,[MinReorder] = ibci.Minimum_Reorder_Quantity
	   ,[MaxInStock] = ibci.Maximum_Reorder_Quantity
	   ,[OptimumStock] = ibci.Safety_Stock
	   --,[IsProvidingLoc]
	   --,[CurrShortName]
	   ,[StdUnitCost] = ibci.Cost
	   --,[MovingAverageCost]
	   , CostMethod = ibci.Cost_Method
	   , ECCN = ibci.Export_Commodity_Control_Number
	   , HTSUS = ibci.Harmonized_Tariff_Begin_Digits + IsNull(ibci.Harmonized_Tariff_End_Digits, '')
	   ,[LastEdit] = isnull(ibci.Date_Changed, GETDATE())
	   ,[DateAdded] = isnull(ibci.Date_Added, GETDATE())
	FROM AesImport.dbo.ItemBranchAndCostImport ibci
	WHERE AesOps.dbo.ItemNumBranchPlants.[ItemNum] = convert(varchar(8), ibci.item_number)
	  and AesOps.dbo.ItemNumBranchPlants.BranchPlant = ibci.Branch_plant	

	
	Update a 
	set a.StdUnitCost = ISNULL((Select TOP 1 b.StdUnitCost from AesOps.dbo.ItemNumBranchPlants b 
		Where b.ItemNum = a.ItemNum 
		AND ISNULL(b.StdUnitCost, 0) <> 0 and b.CurrShortName = 'USD' ORDER by b.LastEdit DESC
	), a.StdUnitCost)
	FROM AesOps.dbo.ItemNums a

   delete from AesOps.dbo.ItemNumBranchPlants
	where ItemNumBranchPlantId in (
	select ir.ItemNumBranchPlantId from AesOps.dbo.ItemNumBranchPlants ir
	left join AesOps.dbo.ItemNums i on i.ItemNum = ir.ItemNum
	where i.ItemNum is null
	)

   delete from AesOps.dbo.ItemNumBranchPlants
	where ItemNumBranchPlantId in (
	select ir.ItemNumBranchPlantId from AesOps.dbo.ItemNumBranchPlants ir
	left join AesOps.dbo.BranchPlants bp on bp.BranchPlant = ir.BranchPlant
	where bp.BranchPlantId is null
	)

	-- Serialize parts changed on 3/4/2016	
	-- Changed below queries removed where condition and added isAsset update - 19/08/2019 -- Sachin M & Ken
	--1 it was second query
	UPDATE AesOps.dbo.ItemNums SET DefaultSerialProfile = 'S', IsAsset=1
	WHERE ItemNum IN 
	(
		Select i.ItemNum from AesOps.dbo.ItemNums i  
		where i.PartClassification like 'RENTALS%' and (i.DefaultSerialProfile <> 'S' OR i.IsAsset=0)
	) --and ItemNum NOT IN (SELECT ItemNum from AesImport.dbo.ItemNumImport Where [AllowDefaultSerialOverride] = 0)

	--2 -- it was first query
	--UPDATE AesOps.dbo.ItemNums SET DefaultSerialProfile = 'S', IsAsset=1
	--WHERE ItemNum IN 
	--(
	--	Select r.ItemNum
	--	from AesOps.dbo.ItemNums i  
	--	inner join AesOps.dbo.ItemNumReferences r on i.ItemNum = r.itemNum 
	--	where i.DefaultSerialProfile <> 'S' OR i.IsAsset = 0 -- i.PartClassification like 'RENTALS%' and
	--) --and ItemNum NOT IN (SELECT ItemNum from AesImport.dbo.ItemNumImport Where [AllowDefaultSerialOverride] = 0)

	-- Change made for RefType = 'U' should have IsAsset = 0
	UPDATE i
	SET DefaultSerialProfile = 'S', 
		IsAsset = 1
	FROM AesOps.dbo.ItemNums i
	JOIN Aesops.dbo.ItemNumReferences r on i.ItemNum = r.ItemNum
	WHERE i.DefaultSerialProfile != 'S' AND RefType ='R'
	
	UPDATE AesOps.dbo.ItemNums 
	SET DefaultSerialProfile = 'S'
	Where ItemNum IN 
	(
		select DISTINCT ParentItemNum from AesOps.dbo.ItemNumConfigs
	)
	AND DefaultSerialProfile <> 'S' 
	--and (ItemNum NOT IN (SELECT ItemNum from AesImport.dbo.ItemNumImport Where [AllowDefaultSerialOverride] = 0)
	--	OR IsAsset = '1')

	   	 
  SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[spAuditCustomsInvoice]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spAuditCustomsInvoice] 
@customsInvoiceId uniqueidentifier,
@userId int

AS

declare @AuditActionId int

insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
values (7000, @UserId, @customsInvoiceId, getdate(), null, 'AuditCustomsInvoice')

select @AuditActionId = @@Identity


INSERT INTO AuditCustomsInvoiceDetails
Select @AuditActionId,* from CustomsInvoiceDetails cid
Where CustomsInvoiceId = @customsInvoiceId


INSERT INTO AuditCustomsInvoices
Select @AuditActionId,* from CustomsInvoices Where CustomsInvoiceId = @customsInvoiceId

GO
/****** Object:  StoredProcedure [dbo].[spAuditRecords]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spAuditRecords] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId int,
	@TableName varchar(255),
	@KeyFieldName varchar(255),
	@AuditTable varchar(255),
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
/*
DECLARE @RC int
DECLARE @AuditTypeId int
DECLARE @UserId int
DECLARE @ActionDesc varchar(2048)
DECLARE @RemoteHost varchar(75)
DECLARE @KeyId int
DECLARE @TableName varchar(255)
DECLARE @KeyFieldName varchar(255)
DECLARE @AuditTable varchar(255)
DECLARE @AuditActionId int

set @AuditTypeId = 1
set @UserId = 1
set @ActionDesc = '2'
set @RemoteHost = null
set @KeyId = 2
set @TableName = 'Users'
set @KeyFieldName = 'UserId'
set @AuditTable = 'AuditUsers'

EXECUTE @RC = [AdvEng].[dbo].[spAuditRecords] 
   @AuditTypeId
  ,@UserId
  ,@ActionDesc
  ,@RemoteHost
  ,@KeyId
  ,@TableName
  ,@KeyFieldName
  ,@AuditTable
  ,@AuditActionId OUTPUT

select @AuditActionId
GO
*/
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, @AuditTable)

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		SET @sql = N'insert into ' + @AuditTable + N' select ' + convert(varchar(max), @AuditActionId) + N', * from ' 
			+ @TableName + N' where ' + @KeyFieldName + N' = ' + convert(varchar(max), @KeyId)
		exec sp_executesql @sql
	end

	SET NOCOUNT OFF;
	
END



GO
/****** Object:  StoredProcedure [dbo].[spAuditRecordsGuid]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spAuditRecordsGuid] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(1024),
	@RemoteHost varchar(75),
	@KeyId uniqueidentifier,
	@TableName varchar(255),
	@KeyFieldName varchar(255),
	@AuditTable varchar(255),
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, @AuditTable)

		Set @AuditActionId = @@IDENTITY
	end
	
	if @KeyId is not null
	begin
		SET @sql = N'insert into ' + @AuditTable + N' select ''' + convert(varchar(max), @AuditActionId) + N''', * from ' 
			+ @TableName + N' where ' + @KeyFieldName + N' = ''' + convert(varchar(max), @KeyId) + ''''
		EXEC sp_executesql @sql
	end

	SET NOCOUNT OFF;
	
END
GO
/****** Object:  StoredProcedure [dbo].[spAuditUsers]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spAuditUsers] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId int,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'Users')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditUsers
		select @AuditActionId, * from Users where UserId = @KeyId

		insert into AuditUserRoles
		select @AuditActionId, * from UserRoles where UserId = @KeyId
	end

	SET NOCOUNT OFF;
	
END

GO
/****** Object:  StoredProcedure [dbo].[spDeleteCustomsInvoice]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeleteCustomsInvoice](
	@xmlData xml
	)
AS
/*
[spSaveCustomsInvoiceDetails] '<Filters><CustomsInvoiceId>03097914-beef-49d6-94fb-1d41361b87db</CustomsInvoiceId><AuditUserName>mdonaho</AuditUserName><CustomsInvoiceDetailCollection><CustomsInvoiceDetail><CustomsInvoiceDetailId>00000000-0000-0000-0000-000000000000</CustomsInvoiceDetailId><LineNumber>1</LineNumber><Description>475 COLLAR IDS W/INT STAB 6"</Description><SerialNumber>5708</SerialNumber><PartNumber>005520-AB</PartNumber><NewUsed>Used</NewUsed><IsHeader>False</IsHeader><UnitCost>16028</UnitCost><CountryOfOrigin>*</CountryOfOrigin><DisplayOrder>1</DisplayOrder><AssetId>108f35fe-c73d-40ec-a9ad-6a61274435b9</AssetId><TransferComplete>False</TransferComplete><IsDeliveryNoteStart>False</IsDeliveryNoteStart><IsDeliveryNoteEnd>False</IsDeliveryNoteEnd><PrevPartStatusId>10</PrevPartStatusId><ICBNumber>False</ICBNumber><JDENumber>False</JDENumber><ShipmentType>Redeployment</ShipmentType></CustomsInvoiceDetail><CustomsInvoiceDetail><CustomsInvoiceDetailId>00000000-0000-0000-0000-000000000000</CustomsInvoiceDetailId><Description>Assembly, 4-3/4" Pulser</Description><SerialNumber>33089</SerialNumber><PartNumber>L-AH-000083</PartNumber><NewUsed>Used</NewUsed><IsHeader>False</IsHeader><UnitCost>30721.58</UnitCost><CountryOfOrigin>*</CountryOfOrigin><DisplayOrder>2</DisplayOrder><AssetId>58bf5f88-bc4a-4694-ad80-0008e55716ff</AssetId><TransferComplete>False</TransferComplete><IsDeliveryNoteStart>False</IsDeliveryNoteStart><IsDeliveryNoteEnd>False</IsDeliveryNoteEnd><TarriffCode>9015.90.0060</TarriffCode><ECCNNumber>EAR99</ECCNNumber><PrevPartStatusId>10</PrevPartStatusId><ParentCustomsInvoiceDetailId>108f35fe-c73d-40ec-a9ad-6a61274435b9</ParentCustomsInvoiceDetailId><ICBNumber>False</ICBNumber><JDENumber>False</JDENumber><ShipmentType>Redeployment</ShipmentType></CustomsInvoiceDetail></CustomsInvoiceDetailCollection></Filters>'
*/
declare @userName varchar(1024)
declare @customsInvoiceId uniqueidentifier

select 
@userName = T.c.value('(AuditUserName/text())[1]','varchar(1024)'),
@customsInvoiceId = T.c.value('(CustomsInvoiceId/text())[1]','uniqueidentifier')
from
@xmlData.nodes('/Filters') T(c)


Update shipmentrequestformdetailasset set customsinvoicedetailid = null
from CustomsInvoiceDetail where 
customsinvoiceid = @customsInvoiceId

/*
Delete from RadioactiveMaterialDetail Where RAMId IN (Select RAMId from RadioactiveMaterial Where CustomsInvoiceId = @customsInvoiceId)

Delete From RadioactiveMaterial Where CustomsInvoiceId=@customsInvoiceId

Delete From RAMTravelLog Where CustomsInvoiceId=@customsInvoiceId

*/
--Just audit the header to see who deleted it
exec spAuditCustomsInvoice @customsInvoiceId, @userName
      
Delete from CustomsInvoices where CustomsInvoiceId = @customsInvoiceId


GO
/****** Object:  StoredProcedure [dbo].[spDeliveryTicketToDispatch]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeliveryTicketToDispatch]
    @xmlData xml
AS
BEGIN
    SET NOCOUNT ON
    
    DECLARE @jobId UNIQUEIDENTIFIER
    DECLARE @transactionName VARCHAR(MAX)
    DECLARE @transactionId INT
    -- Dispatch fields
    DECLARE @dispatchId UNIQUEIDENTIFIER
    DECLARE @dispatchNum VARCHAR(8)
    DECLARE @jarJobNum VARCHAR(8)
    DECLARE @branchPlant VARCHAR(12)
    DECLARE @jdeCustomerNumber varchar(8)
    DECLARE @dateAdded datetime
    DECLARE @wellName varchar(50)
    DECLARE @wellNameSOA varchar(50)
    DECLARE @wellDetails1 varchar(50)
    DECLARE @wellDetails3 varchar(50)
    DECLARE @rigName varchar(50)
    DECLARE @rigNameSOA varchar(50)
    
    -- Dispatch Instance fields
    DECLARE @dispatchInstanceId UNIQUEIDENTIFIER
    DECLARE @sequenceNum INT
    DECLARE @returnSequenceNum INT
    DECLARE @dateShipped DATETIME
    DECLARE @shipTo VARCHAR(8)
    
    -- Dispatch Instance Item fields
    DECLARE @dispatchInstanceItemId UNIQUEIDENTIFIER
    DECLARE @lineNum INT
    DECLARE @assetNum VARCHAR(15)
    DECLARE @serialNum VARCHAR(20)
    DECLARE @partNum VARCHAR(30)
    DECLARE @description VARCHAR(255)
    DECLARE @qtyShipped INT

    -- Dispatch Instance Item Return fields
    DECLARE @qtyReturned INT
    DECLARE @dateReturned DATETIME
    DECLARE @reasonCode VARCHAR(50)

    -- Dispatch Instance Invoice fields
    DECLARE @invoiceSequence INT
    DECLARE @invoiceNum VARCHAR(20)
    DECLARE @invoiceType VARCHAR(4)
    DECLARE @invoiceCompany VARCHAR(12)
    DECLARE @amountExtendedPrice DECIMAL(19,4)
    DECLARE @foreignExtendedPrice DECIMAL(19,4)
    DECLARE @trxnCurrency VARCHAR(4)
    DECLARE @baseCurrency VARCHAR(4)
    DECLARE @qtySold INT
    DECLARE @dateBilled DATETIME

	DECLARE @jobType varchar(50)

    ;WITH XMLNAMESPACES ('http://www.wft.com/DeliveryTicketInfo/Response/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/DeliveryTicketInfo/Response/v1.0')
    SELECT @transactionName = ltrim(rtrim(T.c.value('(TransactionName/text())[1]', 'varchar(MAX)')))
        , @transactionId = ltrim(rtrim(T.c.value('(TransactionId/text())[1]', 'int')))
    FROM @xmlData.nodes('/DeliveryTicketInfo/DTInfoCollection/MessageHeader') AS T(c)

	-- print'TransactionName ' 
	-- print@transactionName
        
    IF (@transactionName = 'DT-SEQ-ADD')
    BEGIN       
        ;WITH XMLNAMESPACES ('http://www.wft.com/DeliveryTicketInfo/Response/v1.0' AS inp1,
            DEFAULT 'http://www.wft.com/DeliveryTicketInfo/Response/v1.0')
        SELECT @dispatchNum = ltrim(rtrim(T.c.value('(OrderNumber/text())[1]', 'VARCHAR(8)')))
            , @jarJobNum = ltrim(rtrim(T.c.value('(JobNumber/text())[1]', 'VARCHAR(50)')))
			, @jobType = ltrim(rtrim(T.c.value('(JobType/text())[1]', 'VARCHAR(50)')))
            , @jdeCustomerNumber = ltrim(rtrim(T.c.value('(Customer/text())[1]', 'VARCHAR(10)')))
            , @branchPlant = ltrim(rtrim(T.c.value('(BranchPlant/text())[1]', 'VARCHAR(12)')))
            , @dateAdded = T.c.value('(CreationDate/text())[1]', 'DATETIME')
            , @sequenceNum = T.c.value('(SequenceNumber)[1]', 'INT')
            , @shipTo = ltrim(rtrim(T.c.value('(ShipTo/text())[1]', 'VARCHAR(8)')))
            , @wellDetails1 = ltrim(rtrim(T.c.value('(WellDetails1/text())[1]','VARCHAR(50)')))
            , @wellDetails3 = ltrim(rtrim(T.c.value('(WellDetails3/text())[1]','VARCHAR(50)')))
            , @wellNameSOA = ltrim(rtrim(T.c.value('(WellName/text())[1]','VARCHAR(50)')))
            , @rigNameSOA = ltrim(rtrim(T.c.value('(Rig/text())[1]','VARCHAR(50)')))
        FROM @xmlData.nodes('/DeliveryTicketInfo/DTInfoCollection/MessageDetail') AS T(c)
    
        --if ((select DispatchId from Dispatches where JDEJobNumber = @jarJobNum) is not null)
        --begin
        --  --TODO: new warning system
        --  select '200'
        --end
        
        SET @wellName = NULL
        SET @rigName = NULL
        
    if (@jarJobNum <> '')
        begin
			SELECT 
				@jobId = j.JobId
				, @rigName = j.Rig
				, @wellName = w.well
			FROM Jobs (NOLOCK) j
			left join Wells (NOLOCK) w ON w.JobID = j.JobId
			WHERE j.JobNumber = @jarJobNum
        end

		if (@jobId is null)
		begin
			select
				@jobId = j.JobId
				, @rigName = j.Rig
				, @wellName = w.well
			from Jobs (NOLOCK) j
			left join Wells (NOLOCK) w on w.JobID = j.JobId
			where j.DispatchNumber = @dispatchNum
		end
		
        if @wellName is null
        begin
            SET @wellName = @wellNameSOA
        end
        
        if @rigName is null
        begin
            SET @rigName = @rigNameSOA
        end
        
        -- Check Dispatch whether exists
        set @dispatchId = null
        SELECT @dispatchId = DispatchId FROM Dispatches (NOLOCK) WHERE DispatchNumber = @dispatchNum
        
        IF (@dispatchId IS NULL)
        BEGIN
            SET @dispatchId = NEWID()
            INSERT INTO Dispatches (DispatchId, DispatchNumber, JDEJobNumber, JDECustomerNumber, BranchPlant, WellName, WellDetails1, WellDetails3, RigName, DateLastEdit, DateAdded, JobId)
            VALUES (@dispatchId, @dispatchNum, @jarJobNum, @jdeCustomerNumber, @branchPlant, @wellName, @wellDetails1, @wellDetails3, @rigName, GETDATE(), @dateAdded, @jobId)
        END
        
        set @dispatchInstanceId = null
        SELECT @dispatchInstanceId = DispatchInstanceId 
        FROM DispatchInstances (NOLOCK) 
        WHERE SequenceNum = @sequenceNum
            AND DispatchId = @dispatchId
            AND (ShipType = 'DT-SEQ-ADD')
                    
        IF (@dispatchInstanceId IS NULL)
        BEGIN
            SET @dispatchInstanceId = NEWID()
            INSERT INTO DispatchInstances (DispatchInstanceId, SequenceNum, DispatchId, ShipTo, DateLastEdit, DateAdded, ShipType, JobType)
            VALUES (@dispatchInstanceId, @sequenceNum, @dispatchId, @shipTo, GETDATE(), @dateAdded, @transactionName, @jobType)
        END
    END
    ELSE IF (@transactionName = 'DT-SEQ-CHANGE')
    BEGIN       
        ;WITH XMLNAMESPACES ('http://www.wft.com/DeliveryTicketInfo/Response/v1.0' AS inp1,
            DEFAULT 'http://www.wft.com/DeliveryTicketInfo/Response/v1.0')
        SELECT @dispatchNum = ltrim(rtrim(T.c.value('(OrderNumber/text())[1]', 'VARCHAR(8)')))
            , @jarJobNum = ltrim(rtrim(T.c.value('(JobNumber/text())[1]', 'VARCHAR(8)')))
            , @jdeCustomerNumber = ltrim(rtrim(T.c.value('(Customer/text())[1]', 'VARCHAR(10)')))
            , @branchPlant = ltrim(rtrim(T.c.value('(BranchPlant/text())[1]', 'VARCHAR(12)')))
            , @sequenceNum = T.c.value('(SequenceNumber)[1]', 'INT')
            , @shipTo = ltrim(rtrim(T.c.value('(ShipTo/text())[1]', 'VARCHAR(8)')))
            , @wellDetails1 = ltrim(rtrim(T.c.value('(WellDetails1/text())[1]','VARCHAR(50)')))
            , @wellDetails3 = ltrim(rtrim(T.c.value('(WellDetails3/text())[1]','VARCHAR(50)')))
            , @wellNameSOA = ltrim(rtrim(T.c.value('(WellName/text())[1]','VARCHAR(50)')))
            , @rigNameSOA = ltrim(rtrim(T.c.value('(Rig/text())[1]','VARCHAR(50)')))
        FROM @xmlData.nodes('/DeliveryTicketInfo/DTInfoCollection/MessageDetail') AS T(c)
        
        set @dispatchId = null
        SELECT @dispatchId = DispatchId
        FROM Dispatches (NOLOCK) 
        WHERE DispatchNumber = @dispatchNum
        
        set @dispatchInstanceId = null
        SELECT @dispatchInstanceId = DispatchInstanceId
        FROM DispatchInstances (NOLOCK) 
        WHERE DispatchId = @dispatchId
            AND SequenceNum = @sequenceNum
            
        SET @wellName = NULL
        SET @rigName = NULL
        SELECT 
            @jobId = j.JobId
            , @rigName = j.Rig
            , @wellName = w.well
        FROM Jobs (NOLOCK) j
        left join Wells (NOLOCK) w ON w.JobID = j.JobId
        WHERE j.JobNumber = LTRIM(RTRIM(@jarJobNum))

        if @wellName is null
    begin
            SET @wellName = @wellNameSOA
        end
        
        if @rigName is null
        begin
   SET @rigName = @rigNameSOA
        end

        if @dispatchId is null
        begin
            select '-200'
            return          -- Dispatch is not found
        end
        else
        begin
            UPDATE Dispatches SET JDEJobNumber = @jarJobNum
                , JDECustomerNumber = @jdeCustomerNumber
                , BranchPlant = @branchPlant
                , WellName = @wellName
                , WellDetails1 = @wellDetails1
                , WellDetails3 = @wellDetails3
                , RigName = @rigName
                , JobId = @jobId
            WHERE DispatchId = @dispatchId
        end
                
        if @dispatchInstanceId is null
        begin
            select '-201'
            return          -- Dispatch Instance is not found
        end
        else
        begin
            UPDATE DispatchInstances SET ShipTo = @shipTo
            WHERE DispatchInstanceId = @dispatchInstanceId
        end
        
    END
    ELSE IF (@transactionName = 'DT-SHIP')
    BEGIN
        
        ;WITH XMLNAMESPACES ('http://www.wft.com/DeliveryTicketInfo/Response/v1.0' AS inp1,
            DEFAULT 'http://www.wft.com/DeliveryTicketInfo/Response/v1.0')
        SELECT @dispatchNum = ltrim(rtrim(T.c.value('(OrderNumber/text())[1]', 'VARCHAR(8)')))
            , @sequenceNum = T.c.value('(SequenceNumber)[1]', 'INT')
            , @lineNum = T.c.value('(LineNumber)[1]', 'INT')
            , @assetNum = ltrim(rtrim(T.c.value('(AssetNumber/text())[1]', 'VARCHAR(15)')))
            , @serialNum = ltrim(rtrim(T.c.value('(SerialNumber/text())[1]', 'VARCHAR(20)')))
            , @partNum = ltrim(rtrim(T.c.value('(LongItemNumber/text())[1]', 'VARCHAR(30)')))
            , @description = ltrim(rtrim(T.c.value('(Description1/text())[1]', 'VARCHAR(255)')))
            , @dateShipped = T.c.value('(DateShipConfirmed/text())[1]', 'DATETIME')
            , @qtyShipped = T.c.value('(QuantityShipped)[1]', 'INT')
            , @dateAdded = T.c.value('(DateofTransaction/text())[1]', 'DATETIME')
			, @shipTo = ltrim(rtrim(T.c.value('(ShipTo/text())[1]', 'VARCHAR(8)')))
        FROM @xmlData.nodes('/DeliveryTicketInfo/DTInfoCollection/MessageDetail') AS T(c)
        


        if @serialNum is null or @serialNum = ''
        begin
			select '-205'
			return
        end
        
        set @dispatchId = null
        SELECT @dispatchId = DispatchId
        FROM Dispatches (NOLOCK) 
        WHERE DispatchNumber = @dispatchNum
        
		 print'dispatchid'
		 print @dispatchid

        if @dispatchId is null
        begin
            select '-200'
            return          -- Dispatch is not found
        end
        else
        begin
            set @dispatchInstanceId = null
            SELECT @dispatchInstanceId = DispatchInstanceId
            FROM DispatchInstances (NOLOCK) 
            WHERE DispatchId = @dispatchId
                AND SequenceNum = @sequenceNum
                AND (ShipType = 'DT-SEQ-ADD')           

			
            if @dispatchInstanceId is null
            begin
				
				SET @dispatchInstanceId = NEWID()

				INSERT INTO DispatchInstances (DispatchInstanceId, SequenceNum, DispatchId, ShipTo, DateLastEdit, DateAdded, ShipType, JobType)
				VALUES (@dispatchInstanceId, @sequenceNum, @dispatchId, @shipTo, GETDATE(), @dateAdded, 'DT-SEQ-ADD', 'Missing Message')

                --select '-201'
                --return      -- Dispatch Instance is not found
            end
            --else
            --begin
                UPDATE DispatchInstances SET DateShipped = @dateShipped
                WHERE DispatchInstanceId = @dispatchInstanceId
                
                set @dispatchInstanceItemId = null
                SELECT @dispatchInstanceItemId = DispatchInstanceItemId 
                FROM DispatchInstanceItems (NOLOCK) 
                WHERE DispatchInstanceId = @dispatchInstanceId
                    AND LineNumber = @lineNum
                    
                if @dispatchInstanceItemId is null
                begin   
                    INSERT INTO DispatchInstanceItems (DispatchInstanceItemId, DispatchInstanceId, LineNumber, AssetNumber, SerialNum, ItemNum, Description, QtyShipped, DateAdded, JDETxnNum)
                    VALUES (NEWID(), @dispatchInstanceId, @lineNum, @assetNum, @serialNum, @partNum, @description, @qtyShipped, @dateAdded, @transactionId)
                end
                --else
                --begin
                --  select 'warning- line item exists'
                --end
            --end
        end
    END
    ELSE IF (@transactionName = 'DT-RETURN')
    BEGIN
        ;WITH XMLNAMESPACES ('http://www.wft.com/DeliveryTicketInfo/Response/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/DeliveryTicketInfo/Response/v1.0')
        SELECT @dispatchNum = ltrim(rtrim(T.c.value('(OrderNumber/text())[1]', 'VARCHAR(8)')))
            , @sequenceNum = T.c.value('(SequenceNumber)[1]', 'INT')
            , @returnSequenceNum = T.c.value('(ReturnSequence)[1]', 'INT')
            , @lineNum = T.c.value('(LineNumber)[1]', 'INT')
            , @assetNum = ltrim(rtrim(T.c.value('(AssetNumber/text())[1]', 'VARCHAR(15)')))
            , @serialNum = ltrim(rtrim(T.c.value('(SerialNumber/text())[1]', 'VARCHAR(20)')))
            , @partNum = ltrim(rtrim(T.c.value('(LongItemNumber/text())[1]', 'VARCHAR(30)')))
            , @description = ltrim(rtrim(T.c.value('(Description1/text())[1]', 'VARCHAR(255)')))
            , @qtyReturned = T.c.value('(ReturnQuantity)[1]', 'INT')
            , @dateReturned = T.c.value('(ReturnDate/text())[1]', 'DATETIME')
            , @reasonCode = ltrim(rtrim(T.c.value('(ReasonCode/text())[1]', 'VARCHAR(50)')))
			, @jobType = ltrim(rtrim(T.c.value('(JobType/text())[1]', 'VARCHAR(50)')))
        FROM @xmlData.nodes('/DeliveryTicketInfo/DTInfoCollection/MessageDetail') AS T(c)
        
        set @dispatchId = null
        SELECT @dispatchId = DispatchId
        FROM Dispatches (NOLOCK) 
        WHERE DispatchNumber = @dispatchNum
        
        if @dispatchId is null
        begin
            select '-200'
            return              -- Dispatch is not found
        end
        begin
            set @dispatchInstanceId = null
            SELECT @dispatchInstanceId = DispatchInstanceId 
            FROM DispatchInstances (NOLOCK) 
            WHERE DispatchId = @dispatchId
                AND SequenceNum = @sequenceNum
                AND ShipType = 'DT-SEQ-ADD'
                
            if @dispatchInstanceId is null
            begin
                select '-201'
                return          -- Dispatch Instance is not found
            end
            begin
                select @dispatchInstanceItemId = DispatchInstanceItemId
                from DispatchInstanceItems (NOLOCK) 
                WHERE DispatchInstanceId = @dispatchInstanceId
                    AND AssetNumber = @assetNum
                    
                if (@dispatchInstanceItemId is null)
                begin
                    select '-203'
                    return      -- Asset was not found on DT-SHIP sequence
                end
                else
                begin
                    UPDATE DispatchInstanceItems SET QtyReturned = @qtyReturned
                        , DateReturned = @dateReturned
                        , ReasonCode = @reasonCode
                    where DispatchInstanceItemId = @dispatchInstanceItemId
                end
            end

            SET @dispatchInstanceId = null
            SELECT @dispatchInstanceId = DispatchInstanceId 
            FROM DispatchInstances (NOLOCK) 
            WHERE DispatchId = @dispatchId
                AND SequenceNum = @ReturnSequenceNum
                AND ShipType = @transactionName

            if @dispatchInstanceId is null
            begin
                -- Create new instance for returns
                SET @dispatchInstanceId = NEWID()
                INSERT INTO DispatchInstances (DispatchInstanceId, SequenceNum, DispatchId, DateAdded, ShipType, DateShipped, ReturnSequenceNum, JobType)
                VALUES (@dispatchInstanceId, @returnSequenceNum, @dispatchId, GETDATE(), @transactionName, @dateReturned, @returnSequenceNum, @jobType)
            end

            SET @dispatchInstanceItemId = null
            SELECT @dispatchInstanceItemId = DispatchInstanceItemId
            FROM DispatchInstanceItems (NOLOCK) 
            WHERE DispatchInstanceId = @dispatchInstanceId
                AND AssetNumber = @assetNum
            
            if @dispatchInstanceItemId is null
            begin
            SET @dispatchInstanceItemId = NEWID()
                INSERT INTO DispatchInstanceItems (DispatchInstanceItemId, DispatchInstanceId, LineNumber, AssetNumber, SerialNum, ItemNum, QtyReturned, DateReturned, ReasonCode, Description, QtyShipped, DateAdded, JDETxnNum)
                VALUES (@dispatchInstanceItemId, @dispatchInstanceId, @lineNum, @assetNum, @serialNum, @partNum, @qtyReturned, @dateReturned, @reasonCode, @description, 0, GETDATE(), @transactionId)
            end
        end
    END
    ELSE IF (@transactionName = 'DT-INVOICE')
    BEGIN
        ;WITH XMLNAMESPACES ('http://www.wft.com/DeliveryTicketInfo/Response/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/DeliveryTicketInfo/Response/v1.0')
        SELECT @dispatchNum = ltrim(rtrim(T.c.value('(OrderNumber/text())[1]', 'VARCHAR(8)')))
            , @sequenceNum = T.c.value('(SequenceNumber)[1]', 'INT')
            , @lineNum = T.c.value('(LineNumber)[1]', 'INT')
            , @shipTo = ltrim(rtrim(T.c.value('(ShipTo/text())[1]', 'VARCHAR(8)')))
            , @assetNum = ltrim(rtrim(T.c.value('(AssetNumber/text())[1]', 'VARCHAR(15)')))
            , @serialNum = ltrim(rtrim(T.c.value('(SerialNumber/text())[1]', 'VARCHAR(20)')))
            , @partNum = ltrim(rtrim(T.c.value('(LongItemNumber/text())[1]', 'VARCHAR(30)')))
            , @description = ltrim(rtrim(T.c.value('(Description1/text())[1]', 'VARCHAR(255)')))
            , @qtyShipped = T.c.value('(QuantityShipped)[1]', 'INT')
            , @dateAdded = T.c.value('(DateofTransaction/text())[1]', 'DATETIME')
            , @reasonCode = ltrim(rtrim(T.c.value('(ReasonCode/text())[1]', 'VARCHAR(50)')))
            , @invoiceSequence = T.c.value('(InvoiceSequence)[1]', 'INT')
            , @invoiceNum = ltrim(rtrim(T.c.value('(InvoiceNum)[1]', 'VARCHAR(20)')))
            , @invoiceType = ltrim(rtrim(T.c.value('(InvoiceType)[1]','VARCHAR(4)')))
            , @invoiceCompany = ltrim(rtrim(T.c.value('(InvoiceCompany)[1]', 'VARCHAR(12)')))
            , @amountExtendedPrice = T.c.value('(AmountExtendedPrice)[1]', 'DECIMAL(19,4)')
            , @foreignExtendedPrice = T.c.value('(ForeignExtendedPrice)[1]', 'DECIMAL(19,4)')
            , @trxnCurrency = ltrim(rtrim(T.c.value('(TransactionCurrency)[1]', 'VARCHAR(4)')))
            , @baseCurrency = ltrim(rtrim(T.c.value('(BaseCurrency)[1]', 'VARCHAR(4)')))
            , @qtySold = T.c.value('(SoldQuantity)[1]', 'INT')
            , @dateBilled = T.c.value('(BillDate)[1]', 'DATETIME')
			, @jobType = ltrim(rtrim(T.c.value('(JobType/text())[1]', 'VARCHAR(50)')))
        FROM @xmlData.nodes('/DeliveryTicketInfo/DTInfoCollection/MessageDetail') AS T(c)       
            
        set @dispatchId = null
        SELECT @dispatchId = DispatchId
        FROM Dispatches (NOLOCK) 
        WHERE DispatchNumber = @dispatchNum
        
        if @dispatchId is null
        begin
            select '-200'
            return                  -- Dispatch is not found
        end
        begin
            set @dispatchInstanceId = null
            SELECT @dispatchInstanceId = DispatchInstanceId
            FROM DispatchInstances (NOLOCK) 
            WHERE DispatchId = @dispatchId
                AND InvoiceSequenceNum = @invoiceSequence
                AND InvoiceNum = @invoiceNum
                AND (ShipType = 'DT-INVOICE')           

           if @dispatchInstanceId is not null
            begin
                UPDATE DispatchInstances SET InvoiceType = @invoiceType, InvoiceCompany = @invoiceCompany
                WHERE DispatchInstanceId = @dispatchInstanceId
                
                set @dispatchInstanceItemId = null
                SELECT @dispatchInstanceItemId = DispatchInstanceItemId 
                FROM DispatchInstanceItems (NOLOCK) 
                WHERE DispatchInstanceId = @dispatchInstanceId
                    AND LineNumber = @lineNum
            end
            else
            begin
                SET @dispatchInstanceId = NEWID()
                INSERT INTO DispatchInstances (DispatchInstanceId, SequenceNum, DispatchId, ShipTo, DateLastEdit, DateAdded, ShipType,
                    InvoiceSequenceNum, InvoiceNum, InvoiceType, InvoiceCompany, JobType)
                VALUES (@dispatchInstanceId, @sequenceNum, @dispatchId, @shipTo, GETDATE(), @dateAdded, @transactionName,
                    @invoiceSequence, @invoiceNum, @invoiceType, @invoiceCompany, @jobType)
            end

            if @dispatchInstanceItemId is null
            begin   
                INSERT INTO DispatchInstanceItems (DispatchInstanceItemId, DispatchInstanceId, LineNumber, AssetNumber, SerialNum, ItemNum, Description, QtyShipped, DateAdded, JDETxnNum, 
                    AmountExtendedPrice, ForeignExtendedPrice, TrxnCurrency, BaseCurrency, QtySold, DateBilled)
                VALUES (NEWID(), @dispatchInstanceId, @lineNum, @assetNum, @serialNum, @partNum, @description, @qtyShipped, @dateAdded, @transactionId,
                    @amountExtendedPrice, @foreignExtendedPrice, @trxnCurrency, @baseCurrency, @qtySold, @dateBilled)
            end
            --TODO: throw exception
            --else
            --begin
            --end
        end
    END
    ELSE IF (@transactionName = 'DT-UNRETURN')
    BEGIN
        ;WITH XMLNAMESPACES ('http://www.wft.com/DeliveryTicketInfo/Response/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/DeliveryTicketInfo/Response/v1.0')
        SELECT @dispatchNum = ltrim(rtrim(T.c.value('(OrderNumber/text())[1]', 'VARCHAR(8)')))
            , @sequenceNum = T.c.value('(SequenceNumber)[1]', 'INT')
            , @returnSequenceNum = T.c.value('(ReturnSequence)[1]', 'INT')
            , @lineNum = T.c.value('(LineNumber)[1]', 'INT')
            , @assetNum = ltrim(rtrim(T.c.value('(AssetNumber/text())[1]', 'VARCHAR(15)')))
            , @serialNum = ltrim(rtrim(T.c.value('(SerialNumber/text())[1]', 'VARCHAR(20)')))
            , @partNum = ltrim(rtrim(T.c.value('(LongItemNumber/text())[1]', 'VARCHAR(30)')))
            , @qtyReturned = T.c.value('(ReturnQuantity)[1]', 'INT')
            , @dateReturned = T.c.value('(ReturnDate/text())[1]', 'DATETIME')
            , @reasonCode = ltrim(rtrim(T.c.value('(ReasonCode/text())[1]', 'VARCHAR(50)')))
        FROM @xmlData.nodes('/DeliveryTicketInfo/DTInfoCollection/MessageDetail') AS T(c)
        
        set @dispatchId = null
        SELECT @dispatchId = DispatchId
        FROM Dispatches (NOLOCK) 
        WHERE DispatchNumber = @dispatchNum
        
        if @dispatchId is null
        begin
            select '-200'
            return                  -- Dispatch is not found
        end
        begin
            set @dispatchInstanceId = null
            SELECT @dispatchInstanceId = DispatchInstanceId
            FROM DispatchInstances (NOLOCK) 
            WHERE DispatchId = @dispatchId
                AND SequenceNum = @sequenceNum
                AND ShipType = 'DT-SEQ-ADD'

            -- Undo QtyReturned for original ship record
            if @dispatchInstanceId is null
            begin
                select '-201'
                return                  -- Dispatch Instance (DT-SHIP) is not found
            end
            else            
            begin
                select @dispatchInstanceItemId = DispatchInstanceItemId 
                from DispatchInstanceItems (NOLOCK) 
                WHERE DispatchInstanceId = @dispatchInstanceId
                    AND AssetNumber = @assetNum
                    
                if (@dispatchInstanceItemId is null)
                begin
                    select '-203'
                    return              -- Asset item not found on DT-SHIP seq
          end
                else
                begin
                    UPDATE DispatchInstanceItems 
                    SET QtyReturned = QtyReturned - @qtyReturned
                        --, DateReturned = NULL
                        --, ReasonCode = NULL
                    where DispatchInstanceItemId = @dispatchInstanceItemId              

                    UPDATE DispatchInstanceItems
                    SET DateReturned = NULL
                    WHERE QtyReturned = 0
                        and DispatchInstanceItemId = @dispatchInstanceItemId                
                end
            end             

            set @dispatchInstanceId = null
            SELECT @dispatchInstanceId = DispatchInstanceId
            FROM DispatchInstances (NOLOCK) 
            WHERE DispatchId = @dispatchId
                AND SequenceNum = @sequenceNum
                AND ReturnSequenceNum = @returnSequenceNum
                AND ShipType = 'DT-RETURN'
        
            -- Undo QtyReturned for Return Item record
            if @dispatchInstanceId is null
            begin
                select '-202'
                return              -- Dispatch Instance (DT-Return) is not found
            end
            begin
                select @dispatchInstanceItemId = DispatchInstanceItemId
                from DispatchInstanceItems  (NOLOCK) 
                WHERE DispatchInstanceId = @dispatchInstanceId
                    AND AssetNumber = @assetNum

                if @dispatchInstanceItemId is null
                begin
                    select '-204'
                    return          -- Asset is not found on DT-Return 
                end
                else
                begin
                    UPDATE DispatchInstanceItems 
                    SET QtyReturned = QtyReturned - @qtyReturned
                        , DateReturned = NULL
                        --, ReasonCode = NULL
                    where DispatchInstanceItemId = @dispatchInstanceItemId              

                    DELETE FROM DispatchInstanceItems 
                    WHERE DispatchInstanceId = @dispatchInstanceId
                        AND QtyReturned <= 0
                end
            end
        end
    END
    
	insert into AesImport.dbo.SOAProcessedLog (TransactionId, TransactionName, DateAdded)
	values (@transactionId, @transactionName, GETDATE())

    select '0'
END



SET ANSI_NULLS ON



GO
/****** Object:  StoredProcedure [dbo].[spDeliveryTicketToDispatchSOA]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spDeliveryTicketToDispatchSOA]
    @xmlData xml
AS
BEGIN
    SET NOCOUNT ON
    
    DECLARE @jobId UNIQUEIDENTIFIER
    DECLARE @transactionName VARCHAR(MAX)
    DECLARE @transactionId INT
    -- Dispatch fields
    DECLARE @dispatchId UNIQUEIDENTIFIER
    DECLARE @dispatchNum VARCHAR(8)
    DECLARE @jarJobNum VARCHAR(8)
    DECLARE @branchPlant VARCHAR(12)
    DECLARE @jdeCustomerNumber varchar(8)
    DECLARE @dateAdded datetime
    DECLARE @wellName varchar(50)
    DECLARE @wellNameSOA varchar(50)
    DECLARE @wellDetails1 varchar(50)
    DECLARE @wellDetails3 varchar(50)
    DECLARE @rigName varchar(50)
    DECLARE @rigNameSOA varchar(50)
    
    -- Dispatch Instance fields
    DECLARE @dispatchInstanceId UNIQUEIDENTIFIER
    DECLARE @sequenceNum INT
    DECLARE @returnSequenceNum INT
    DECLARE @dateShipped DATETIME
    DECLARE @shipTo VARCHAR(8)
    
    -- Dispatch Instance Item fields
    DECLARE @dispatchInstanceItemId UNIQUEIDENTIFIER
    DECLARE @lineNum INT
    DECLARE @assetNum VARCHAR(15)
    DECLARE @serialNum VARCHAR(20)
    DECLARE @partNum VARCHAR(30)
    DECLARE @description VARCHAR(255)
    DECLARE @qtyShipped INT

	DECLARE @revenuebusinessunit  VARCHAR(30)
    -- Dispatch Instance Item Return fields
    DECLARE @qtyReturned INT
    DECLARE @dateReturned DATETIME
    DECLARE @reasonCode VARCHAR(50)

    -- Dispatch Instance Invoice fields
    DECLARE @invoiceSequence INT
    DECLARE @invoiceNum VARCHAR(20)
    DECLARE @invoiceType VARCHAR(4)
    DECLARE @invoiceCompany VARCHAR(12)
    DECLARE @amountExtendedPrice DECIMAL(19,4)
    DECLARE @foreignExtendedPrice DECIMAL(19,4)
    DECLARE @trxnCurrency VARCHAR(4)
    DECLARE @baseCurrency VARCHAR(4)
    DECLARE @qtySold INT
    DECLARE @dateBilled DATETIME

	DECLARE @jobType varchar(50)

	DECLARE @startDateTime DATETIME, @runId UNIQUEIDENTIFIER;
	DECLARE @fixedAssetId uniqueidentifier;

	SET @startDateTime = GETDATE();
	SET @runId = NEWID();

    ;WITH XMLNAMESPACES ('http://www.wft.com/DeliveryTicketInfo/Response/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/DeliveryTicketInfo/Response/v1.0')
    SELECT @transactionName = ltrim(rtrim(T.c.value('(TransactionName/text())[1]', 'varchar(MAX)')))
        , @transactionId = ltrim(rtrim(T.c.value('(TransactionId/text())[1]', 'int')))
    FROM @xmlData.nodes('/DTInfoCollection/MessageHeader') AS T(c)

	EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Get MessageHeader from xml', @startDateTime;
	SET @startDateTime = GETDATE();
	------------------------------------------Create Dispatch Record if missing -----------------------------------------------------------------

    ;WITH XMLNAMESPACES ('http://www.wft.com/DeliveryTicketInfo/Response/v1.0' AS inp1,
            DEFAULT 'http://www.wft.com/DeliveryTicketInfo/Response/v1.0')
        SELECT @dispatchNum = ltrim(rtrim(T.c.value('(OrderNumber/text())[1]', 'VARCHAR(8)')))
            , @jarJobNum = ltrim(rtrim(T.c.value('(JobNumber/text())[1]', 'VARCHAR(50)')))
			, @jobType = ltrim(rtrim(T.c.value('(JobType/text())[1]', 'VARCHAR(50)')))
            , @jdeCustomerNumber = ltrim(rtrim(T.c.value('(Customer/text())[1]', 'VARCHAR(10)')))
            , @branchPlant = ltrim(rtrim(T.c.value('(BranchPlant/text())[1]', 'VARCHAR(12)')))
            , @dateAdded = T.c.value('(CreationDate/text())[1]', 'DATETIME')
            , @sequenceNum = T.c.value('(SequenceNumber)[1]', 'INT')
            , @shipTo = ltrim(rtrim(T.c.value('(ShipTo/text())[1]', 'VARCHAR(8)')))
            , @wellDetails1 = ltrim(rtrim(T.c.value('(WellDetails1/text())[1]','VARCHAR(50)')))
            , @wellDetails3 = ltrim(rtrim(T.c.value('(WellDetails3/text())[1]','VARCHAR(50)')))
            , @wellNameSOA = ltrim(rtrim(T.c.value('(WellName/text())[1]','VARCHAR(50)')))
            , @rigNameSOA = ltrim(rtrim(T.c.value('(Rig/text())[1]','VARCHAR(50)')))
        FROM @xmlData.nodes('/DTInfoCollection/MessageDetail') AS T(c)
    
	EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Get MessageDetail from xml', @startDateTime;
	SET @startDateTime = GETDATE();

        --if ((select DispatchId from Dispatches where JDEJobNumber = @jarJobNum) is not null)
        --begin
        --  --TODO: new warning system
        --  select '200'
        --end
        
        SET @wellName = NULL
        SET @rigName = NULL
        
		if (@jarJobNum <> '')
        begin
			SELECT 
				@jobId = j.JobId
				, @rigName = j.Rig
				, @wellName = w.well
			FROM Jobs (NOLOCK) j
			left join Wells (NOLOCK) w ON w.JobID = j.JobId
			WHERE j.JobNumber = @jarJobNum

			EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Get jobid and wellname by jobNum', @startDateTime;
			SET @startDateTime = GETDATE();
        end

		if (@jobId is null)
		begin
			select
				@jobId = j.JobId
				, @rigName = j.Rig
				, @wellName = w.well
			from Jobs (NOLOCK) j
			left join Wells (NOLOCK) w on w.JobID = j.JobId
			where j.DispatchNumber = @dispatchNum

			EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Get jobid and wellname by dispatchNum', @startDateTime;
			SET @startDateTime = GETDATE();
		end
		
        if @wellName is null
        begin
            SET @wellName = @wellNameSOA
        end
        
        if @rigName is null
        begin
            SET @rigName = @rigNameSOA
        end
        
        -- Check Dispatch whether exists
        set @dispatchId = null
        SELECT @dispatchId = DispatchId FROM Dispatches (NOLOCK) WHERE DispatchNumber = @dispatchNum
        
        IF (@dispatchId IS NULL)
        BEGIN
            SET @dispatchId = NEWID()
            INSERT INTO Dispatches (DispatchId, DispatchNumber, JDEJobNumber, JDECustomerNumber, BranchPlant, WellName, WellDetails1, WellDetails3, RigName, DateLastEdit, DateAdded, JobId)
            VALUES (@dispatchId, @dispatchNum, @jarJobNum, @jdeCustomerNumber, @branchPlant, @wellName, @wellDetails1, @wellDetails3, @rigName, GETDATE(), @dateAdded, @jobId)

			EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Insert dispatchs', @startDateTime;
			SET @startDateTime = GETDATE();
        END
        
	-----------------------------------------------------------------------------------------------------------
    IF (@transactionName = 'DT-SEQ-ADD')
    BEGIN       
        
        set @dispatchInstanceId = null
        SELECT @dispatchInstanceId = DispatchInstanceId 
        FROM DispatchInstances (NOLOCK) 
        WHERE SequenceNum = @sequenceNum
            AND DispatchId = @dispatchId
            AND (ShipType = 'DT-SEQ-ADD')
        
		EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Get dispatchInstances', @startDateTime;
		SET @startDateTime = GETDATE();
		            
        IF (@dispatchInstanceId IS NULL)
        BEGIN
            SET @dispatchInstanceId = NEWID()
            INSERT INTO DispatchInstances (DispatchInstanceId, SequenceNum, DispatchId, ShipTo, DateLastEdit, DateAdded, ShipType, JobType)
            VALUES (@dispatchInstanceId, @sequenceNum, @dispatchId, @shipTo, GETDATE(), @dateAdded, @transactionName, @jobType)

			EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Insert dispatchInstances', @startDateTime;
			SET @startDateTime = GETDATE();
        END
    END
    ELSE IF (@transactionName = 'DT-SEQ-CHANGE')
    BEGIN       
        ;WITH XMLNAMESPACES ('http://www.wft.com/DeliveryTicketInfo/Response/v1.0' AS inp1,
            DEFAULT 'http://www.wft.com/DeliveryTicketInfo/Response/v1.0')
        SELECT @dispatchNum = ltrim(rtrim(T.c.value('(OrderNumber/text())[1]', 'VARCHAR(8)')))
            , @jarJobNum = ltrim(rtrim(T.c.value('(JobNumber/text())[1]', 'VARCHAR(8)')))
            , @jdeCustomerNumber = ltrim(rtrim(T.c.value('(Customer/text())[1]', 'VARCHAR(10)')))
            , @branchPlant = ltrim(rtrim(T.c.value('(BranchPlant/text())[1]', 'VARCHAR(12)')))
            , @sequenceNum = T.c.value('(SequenceNumber)[1]', 'INT')
            , @shipTo = ltrim(rtrim(T.c.value('(ShipTo/text())[1]', 'VARCHAR(8)')))
            , @wellDetails1 = ltrim(rtrim(T.c.value('(WellDetails1/text())[1]','VARCHAR(50)')))
            , @wellDetails3 = ltrim(rtrim(T.c.value('(WellDetails3/text())[1]','VARCHAR(50)')))
            , @wellNameSOA = ltrim(rtrim(T.c.value('(WellName/text())[1]','VARCHAR(50)')))
            , @rigNameSOA = ltrim(rtrim(T.c.value('(Rig/text())[1]','VARCHAR(50)')))
        FROM @xmlData.nodes('/DTInfoCollection/MessageDetail') AS T(c)
        
		EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Get MessageDetail from xml', @startDateTime;
		SET @startDateTime = GETDATE();

        set @dispatchId = null
        SELECT @dispatchId = DispatchId
        FROM Dispatches (NOLOCK) 
        WHERE DispatchNumber = @dispatchNum
        
        set @dispatchInstanceId = null
        SELECT @dispatchInstanceId = DispatchInstanceId
        FROM DispatchInstances (NOLOCK) 
        WHERE DispatchId = @dispatchId
            AND SequenceNum = @sequenceNum
        
		EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'select from dispatches & dispatchInstances', @startDateTime;
		SET @startDateTime = GETDATE();
		    
        SET @wellName = NULL
        SET @rigName = NULL
        SELECT 
            @jobId = j.JobId
            , @rigName = j.Rig
            , @wellName = w.well
        FROM Jobs (NOLOCK) j
        left join Wells (NOLOCK) w ON w.JobID = j.JobId
        WHERE j.JobNumber = LTRIM(RTRIM(@jarJobNum))

		EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Get job & well by jobNum', @startDateTime;
		SET @startDateTime = GETDATE();

        if @wellName is null
    begin
            SET @wellName = @wellNameSOA
        end
        
        if @rigName is null
        begin
   SET @rigName = @rigNameSOA
        end

        if @dispatchId is null
        begin
            --select '-200'
            return          -- Dispatch is not found
        end
        else
        begin
            UPDATE Dispatches SET JDEJobNumber = @jarJobNum
                , JDECustomerNumber = @jdeCustomerNumber
                , BranchPlant = @branchPlant
                , WellName = @wellName
                , WellDetails1 = @wellDetails1
                , WellDetails3 = @wellDetails3
                , RigName = @rigName
                , JobId = @jobId
            WHERE DispatchId = @dispatchId

		EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Update dispatches', @startDateTime;
		SET @startDateTime = GETDATE();
        end
                
        if @dispatchInstanceId is null
        begin
            --select '-201'
            return          -- Dispatch Instance is not found
        end
        else
        begin
            UPDATE DispatchInstances SET ShipTo = @shipTo
            WHERE DispatchInstanceId = @dispatchInstanceId
        end
        
    END
    ELSE IF (@transactionName = 'DT-SHIP')
    BEGIN
        
        ;WITH XMLNAMESPACES ('http://www.wft.com/DeliveryTicketInfo/Response/v1.0' AS inp1,
            DEFAULT 'http://www.wft.com/DeliveryTicketInfo/Response/v1.0')
        SELECT @dispatchNum = ltrim(rtrim(T.c.value('(OrderNumber/text())[1]', 'VARCHAR(8)')))
            , @sequenceNum = T.c.value('(SequenceNumber)[1]', 'INT')
            , @lineNum = T.c.value('(LineNumber)[1]', 'INT')
            , @assetNum = ltrim(rtrim(T.c.value('(AssetNumber/text())[1]', 'VARCHAR(15)')))
            , @serialNum = ltrim(rtrim(T.c.value('(SerialNumber/text())[1]', 'VARCHAR(20)')))
            , @partNum = ltrim(rtrim(T.c.value('(LongItemNumber/text())[1]', 'VARCHAR(30)')))
            , @description = ltrim(rtrim(T.c.value('(Description1/text())[1]', 'VARCHAR(255)')))
         , @dateShipped = T.c.value('(DateShipConfirmed/text())[1]', 'DATETIME')
            , @qtyShipped = T.c.value('(QuantityShipped)[1]', 'INT')
            , @dateAdded = T.c.value('(DateofTransaction/text())[1]', 'DATETIME')
			, @shipTo = ltrim(rtrim(T.c.value('(ShipTo/text())[1]', 'VARCHAR(8)')))
			, @revenuebusinessunit = ltrim(rtrim(T.c.value('(RevenueBusinessUnit/text())[1]', 'VARCHAR(30)')))
        FROM @xmlData.nodes('/DTInfoCollection/MessageDetail') AS T(c)
        
		EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Get MessageDetail from xml', @startDateTime;
		SET @startDateTime = GETDATE();

        if @serialNum is null or @serialNum = ''
        begin
			--select '-205'
			return
        end
        
        set @dispatchId = null
        SELECT @dispatchId = DispatchId
        FROM Dispatches (NOLOCK) 
        WHERE DispatchNumber = @dispatchNum
        
        if @dispatchId is null
        begin
            --select '-200'
            return          -- Dispatch is not found
        end
        else
        begin
            set @dispatchInstanceId = null
            SELECT @dispatchInstanceId = DispatchInstanceId
            FROM DispatchInstances (NOLOCK) 
            WHERE DispatchId = @dispatchId
                AND SequenceNum = @sequenceNum
                AND (ShipType = 'DT-SEQ-ADD')           

            if @dispatchInstanceId is null
            begin
				
				SET @dispatchInstanceId = NEWID()

				INSERT INTO DispatchInstances (DispatchInstanceId, SequenceNum, DispatchId, ShipTo, DateLastEdit, DateAdded, ShipType, JobType)
				VALUES (@dispatchInstanceId, @sequenceNum, @dispatchId, @shipTo, GETDATE(), @dateAdded, 'DT-SEQ-ADD', 'Missing Message')

				EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Insert DispatchInstances', @startDateTime;
				SET @startDateTime = GETDATE();

                --select '-201'
                --return      -- Dispatch Instance is not found
            end

            --else
            --begin
                UPDATE DispatchInstances SET DateShipped = @dateShipped
                WHERE DispatchInstanceId = @dispatchInstanceId
     
				EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Update DispatchInstances', @startDateTime;
				SET @startDateTime = GETDATE();

                set @dispatchInstanceItemId = null
                SELECT @dispatchInstanceItemId = DispatchInstanceItemId 
                FROM DispatchInstanceItems (NOLOCK) 
                WHERE DispatchInstanceId = @dispatchInstanceId
                    AND LineNumber = @lineNum AND SerialNum = @serialNum and ItemNum = @invoiceNum
                
				EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Get DispatchInstanceItems', @startDateTime;
				SET @startDateTime = GETDATE();    
                if @dispatchInstanceItemId is null
                begin   

					
					select @fixedAssetId = fixedAssetId from FixedAssets where AssetNumber = @assetNum

                    INSERT INTO DispatchInstanceItems (DispatchInstanceItemId, DispatchInstanceId, LineNumber, FixedAssetId, AssetNumber, SerialNum, ItemNum, Description, QtyShipped, DateAdded, JDETxnNum,RevenueBusinessUnit)
                    VALUES (NEWID(), @dispatchInstanceId, @lineNum, @fixedAssetId, @assetNum, @serialNum, @partNum, @description, @qtyShipped, @dateAdded, @transactionId,@revenuebusinessunit)

				EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Insert DispatchInstanceItems', @startDateTime;
				SET @startDateTime = GETDATE();
                end
                --else
                --begin
                --  select 'warning- line item exists'
                --end
            --end
        end
    END
    ELSE IF (@transactionName = 'DT-RETURN' OR @transactionName = 'DT-WRETURN')
    BEGIN
        ;WITH XMLNAMESPACES ('http://www.wft.com/DeliveryTicketInfo/Response/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/DeliveryTicketInfo/Response/v1.0')
        SELECT @dispatchNum = ltrim(rtrim(T.c.value('(OrderNumber/text())[1]', 'VARCHAR(8)')))
            , @sequenceNum = T.c.value('(SequenceNumber)[1]', 'INT')
            , @returnSequenceNum = T.c.value('(ReturnSequence)[1]', 'INT')
            , @lineNum = T.c.value('(LineNumber)[1]', 'INT')
            , @assetNum = ltrim(rtrim(T.c.value('(AssetNumber/text())[1]', 'VARCHAR(15)')))
            , @serialNum = ltrim(rtrim(T.c.value('(SerialNumber/text())[1]', 'VARCHAR(20)')))
            , @partNum = ltrim(rtrim(T.c.value('(LongItemNumber/text())[1]', 'VARCHAR(30)')))
            , @description = ltrim(rtrim(T.c.value('(Description1/text())[1]', 'VARCHAR(255)')))
            , @qtyReturned = T.c.value('(ReturnQuantity)[1]', 'INT')
            , @dateReturned = T.c.value('(ReturnDate/text())[1]', 'DATETIME')
            , @reasonCode = ltrim(rtrim(T.c.value('(ReasonCode/text())[1]', 'VARCHAR(50)')))
			, @jobType = ltrim(rtrim(T.c.value('(JobType/text())[1]', 'VARCHAR(50)')))
			, @revenuebusinessunit = ltrim(rtrim(T.c.value('(RevenueBusinessUnit/text())[1]', 'VARCHAR(30)')))
        FROM @xmlData.nodes('/DTInfoCollection/MessageDetail') AS T(c)
        
			EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Get MessageDetail from xml', @startDateTime;
			SET @startDateTime = GETDATE();

        set @dispatchId = null
        SELECT @dispatchId = DispatchId
        FROM Dispatches (NOLOCK) 
        WHERE DispatchNumber = @dispatchNum
        
        if @dispatchId is null
        begin
            --select '-200'
            return              -- Dispatch is not found
        end
        begin
            set @dispatchInstanceId = null
            SELECT @dispatchInstanceId = DispatchInstanceId 
            FROM DispatchInstances (NOLOCK) 
            WHERE DispatchId = @dispatchId
                AND SequenceNum = @sequenceNum
                AND ShipType = 'DT-SEQ-ADD'
            
			EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Get DispatchInstances', @startDateTime;
			SET @startDateTime = GETDATE();    
            if @dispatchInstanceId is null
            begin
                --select '-201'
                return          -- Dispatch Instance is not found
            end
            begin
                select @dispatchInstanceItemId = DispatchInstanceItemId
                from DispatchInstanceItems (NOLOCK) 
                WHERE DispatchInstanceId = @dispatchInstanceId
                    AND LineNumber = @lineNum AND SerialNum = @serialNum and ItemNum = @partNum
                 
				EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Get DispatchInstanceItems', @startDateTime;
				SET @startDateTime = GETDATE();   
                if (@dispatchInstanceItemId is null)
                begin
                    --select '-203'
                    return      -- Asset was not found on DT-SHIP sequence
                end
                else
                begin
                    UPDATE DispatchInstanceItems SET QtyReturned = @qtyReturned
                        , DateReturned = @dateReturned
                        , ReasonCode = @reasonCode
                    where DispatchInstanceItemId = @dispatchInstanceItemId;

					EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Update DispatchInstanceItems', @startDateTime;
					SET @startDateTime = GETDATE();
                end
            end

            SET @dispatchInstanceId = null
            SELECT @dispatchInstanceId = DispatchInstanceId 
            FROM DispatchInstances (NOLOCK) 
            WHERE DispatchId = @dispatchId
                AND SequenceNum = @ReturnSequenceNum
             AND ShipType = @transactionName

            if @dispatchInstanceId is null
            begin
                -- Create new instance for returns
                SET @dispatchInstanceId = NEWID()
                INSERT INTO DispatchInstances (DispatchInstanceId, SequenceNum, DispatchId, DateAdded, ShipType, DateShipped, ReturnSequenceNum, JobType)
                VALUES (@dispatchInstanceId, @returnSequenceNum, @dispatchId, GETDATE(), @transactionName, @dateReturned, @returnSequenceNum, @jobType)

				EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Insert DispatchInstances', @startDateTime;
				SET @startDateTime = GETDATE();
            end

            SET @dispatchInstanceItemId = null
            SELECT @dispatchInstanceItemId = DispatchInstanceItemId
            FROM DispatchInstanceItems (NOLOCK) 
            WHERE DispatchInstanceId = @dispatchInstanceId
                AND LineNumber = @lineNum AND SerialNum = @serialNum and ItemNum = @invoiceNum
            
            if @dispatchInstanceItemId is null
            begin
            SET @dispatchInstanceItemId = NEWID()
				
				select @fixedAssetId = fixedAssetId from FixedAssets where AssetNumber = @assetNum

                INSERT INTO DispatchInstanceItems (DispatchInstanceItemId, DispatchInstanceId, LineNumber, FixedAssetId, AssetNumber, SerialNum, ItemNum, QtyReturned, DateReturned, ReasonCode, Description, QtyShipped, DateAdded, JDETxnNum,RevenueBusinessUnit)
                VALUES (@dispatchInstanceItemId, @dispatchInstanceId, @lineNum, @fixedAssetId, @assetNum, @serialNum, @partNum, @qtyReturned, @dateReturned, @reasonCode, @description, 0, GETDATE(), @transactionId,@revenuebusinessunit)

				EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Insert DispatchInstanceItems', @startDateTime;
				SET @startDateTime = GETDATE();
            end
        end
    END
    ELSE IF (@transactionName = 'DT-INVOICE')
    BEGIN
        ;WITH XMLNAMESPACES ('http://www.wft.com/DeliveryTicketInfo/Response/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/DeliveryTicketInfo/Response/v1.0')
        SELECT @dispatchNum = ltrim(rtrim(T.c.value('(OrderNumber/text())[1]', 'VARCHAR(8)')))
            , @sequenceNum = T.c.value('(SequenceNumber)[1]', 'INT')
            , @lineNum = T.c.value('(LineNumber)[1]', 'INT')
            , @shipTo = ltrim(rtrim(T.c.value('(ShipTo/text())[1]', 'VARCHAR(8)')))
            , @assetNum = ltrim(rtrim(T.c.value('(AssetNumber/text())[1]', 'VARCHAR(15)')))
            , @serialNum = ltrim(rtrim(T.c.value('(SerialNumber/text())[1]', 'VARCHAR(20)')))
            , @partNum = ltrim(rtrim(T.c.value('(LongItemNumber/text())[1]', 'VARCHAR(30)')))
            , @description = ltrim(rtrim(T.c.value('(Description1/text())[1]', 'VARCHAR(255)')))
            , @qtyShipped = T.c.value('(QuantityShipped)[1]', 'INT')
            , @dateAdded = T.c.value('(DateofTransaction/text())[1]', 'DATETIME')
            , @reasonCode = ltrim(rtrim(T.c.value('(ReasonCode/text())[1]', 'VARCHAR(50)')))
            , @invoiceSequence = T.c.value('(InvoiceSequence)[1]', 'INT')
            , @invoiceNum = ltrim(rtrim(T.c.value('(InvoiceNumber)[1]', 'VARCHAR(20)')))
            , @invoiceType = ltrim(rtrim(T.c.value('(InvoiceType)[1]','VARCHAR(4)')))
            , @invoiceCompany = ltrim(rtrim(T.c.value('(InvoiceCompany)[1]', 'VARCHAR(12)')))
            , @amountExtendedPrice = T.c.value('(AmountExtendedPrice)[1]', 'DECIMAL(19,4)')
            , @foreignExtendedPrice = T.c.value('(ForeignExtendedPrice)[1]', 'DECIMAL(19,4)')
            , @trxnCurrency = ltrim(rtrim(T.c.value('(TransactionCurrency)[1]', 'VARCHAR(4)')))
            , @baseCurrency = ltrim(rtrim(T.c.value('(BaseCurrency)[1]', 'VARCHAR(4)')))
            , @qtySold = T.c.value('(SoldQuantity)[1]', 'INT')
            , @dateBilled = T.c.value('(BillDate)[1]', 'DATETIME')
			, @jobType = ltrim(rtrim(T.c.value('(JobType/text())[1]', 'VARCHAR(50)')))
			, @revenuebusinessunit = ltrim(rtrim(T.c.value('(RevenueBusinessUnit/text())[1]', 'VARCHAR(30)')))
        FROM @xmlData.nodes('/DTInfoCollection/MessageDetail') AS T(c)       
        
		EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Get MessageDetail from xml', @startDateTime;
		SET @startDateTime = GETDATE();
		    
        set @dispatchId = null
        SELECT @dispatchId = DispatchId
        FROM Dispatches (NOLOCK) 
        WHERE DispatchNumber = @dispatchNum
 
        if @dispatchId is null
        begin
            --select '-200'
 return                  -- Dispatch is not found
   end
        begin
            set @dispatchInstanceId = null
            SELECT @dispatchInstanceId = DispatchInstanceId
            FROM DispatchInstances (NOLOCK) 
            WHERE DispatchId = @dispatchId
                AND InvoiceSequenceNum = @invoiceSequence
                AND InvoiceNum = @invoiceNum
                AND (ShipType = 'DT-INVOICE')           

           if @dispatchInstanceId is not null
            begin
                UPDATE DispatchInstances SET InvoiceType = @invoiceType, InvoiceCompany = @invoiceCompany
                WHERE DispatchInstanceId = @dispatchInstanceId
                
                set @dispatchInstanceItemId = null
                SELECT @dispatchInstanceItemId = DispatchInstanceItemId 
                FROM DispatchInstanceItems (NOLOCK) 
                WHERE DispatchInstanceId = @dispatchInstanceId
                    AND LineNumber = @lineNum AND SerialNum = @serialNum and ItemNum = @invoiceNum

			EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Update DispatchInstanceItems', @startDateTime;
			SET @startDateTime = GETDATE();
            end
            else
            begin
                SET @dispatchInstanceId = NEWID()
                INSERT INTO DispatchInstances (DispatchInstanceId, SequenceNum, DispatchId, ShipTo, DateLastEdit, DateAdded, ShipType,
                    InvoiceSequenceNum, InvoiceNum, InvoiceType, InvoiceCompany, JobType)
                VALUES (@dispatchInstanceId, @sequenceNum, @dispatchId, @shipTo, GETDATE(), @dateAdded, @transactionName,
                    @invoiceSequence, @invoiceNum, @invoiceType, @invoiceCompany, @jobType)

			EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Insert DispatchInstances', @startDateTime;
			SET @startDateTime = GETDATE();
            end

            if @dispatchInstanceItemId is null
            begin   

				select @fixedAssetId = fixedAssetId from FixedAssets where AssetNumber = @assetNum

                INSERT INTO DispatchInstanceItems (DispatchInstanceItemId, DispatchInstanceId, LineNumber, FixedAssetId, AssetNumber, SerialNum, ItemNum, Description, QtyShipped, DateAdded, JDETxnNum, 
                    AmountExtendedPrice, ForeignExtendedPrice, TrxnCurrency, BaseCurrency, QtySold, DateBilled,RevenueBusinessUnit)
                VALUES (NEWID(), @dispatchInstanceId, @lineNum, @fixedAssetId, @assetNum, @serialNum, @partNum, @description, @qtyShipped, @dateAdded, @transactionId,
                    @amountExtendedPrice, @foreignExtendedPrice, @trxnCurrency, @baseCurrency, @qtySold, @dateBilled,@revenuebusinessunit)

			EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Insert DispatchInstanceItems', @startDateTime;
			SET @startDateTime = GETDATE();
            end
            --TODO: throw exception
            --else
            --begin
            --end
        end
    END
    ELSE IF (@transactionName = 'DT-UNRETURN')
    BEGIN
        ;WITH XMLNAMESPACES ('http://www.wft.com/DeliveryTicketInfo/Response/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/DeliveryTicketInfo/Response/v1.0')
        SELECT @dispatchNum = ltrim(rtrim(T.c.value('(OrderNumber/text())[1]', 'VARCHAR(8)')))
            , @sequenceNum = T.c.value('(SequenceNumber)[1]', 'INT')
            , @returnSequenceNum = T.c.value('(ReturnSequence)[1]', 'INT')
            , @lineNum = T.c.value('(LineNumber)[1]', 'INT')
            , @assetNum = ltrim(rtrim(T.c.value('(AssetNumber/text())[1]', 'VARCHAR(15)')))
            , @serialNum = ltrim(rtrim(T.c.value('(SerialNumber/text())[1]', 'VARCHAR(20)')))
            , @partNum = ltrim(rtrim(T.c.value('(LongItemNumber/text())[1]', 'VARCHAR(30)')))
            , @qtyReturned = T.c.value('(ReturnQuantity)[1]', 'INT')
            , @dateReturned = T.c.value('(ReturnDate/text())[1]', 'DATETIME')
            , @reasonCode = ltrim(rtrim(T.c.value('(ReasonCode/text())[1]', 'VARCHAR(50)')))
        FROM @xmlData.nodes('/DTInfoCollection/MessageDetail') AS T(c)
        
		EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Get MessageDetail from xml', @startDateTime;
		SET @startDateTime = GETDATE();

        set @dispatchId = null
        SELECT @dispatchId = DispatchId
        FROM Dispatches (NOLOCK) 
        WHERE DispatchNumber = @dispatchNum
        
        if @dispatchId is null
        begin
            --select '-200'
            return                  -- Dispatch is not found
        end
   begin
            set @dispatchInstanceId = null
            SELECT @dispatchInstanceId = DispatchInstanceId
            FROM DispatchInstances (NOLOCK) 
            WHERE DispatchId = @dispatchId
   AND SequenceNum = @sequenceNum
                AND ShipType = 'DT-SEQ-ADD'

            -- Undo QtyReturned for original ship record
if @dispatchInstanceId is null
            begin
                --select '-201'
                return                  -- Dispatch Instance (DT-SHIP) is not found
            end
            else            
            begin
                select @dispatchInstanceItemId = DispatchInstanceItemId 
                from DispatchInstanceItems (NOLOCK) 
                WHERE DispatchInstanceId = @dispatchInstanceId
                    AND LineNumber = @lineNum AND SerialNum = @serialNum and ItemNum = @invoiceNum
                    
                if (@dispatchInstanceItemId is null)
                begin
                    --select '-203'
                    return              -- Asset item not found on DT-SHIP seq
          end
                else
                begin
                    UPDATE DispatchInstanceItems 
                    SET QtyReturned = QtyReturned - @qtyReturned
                        --, DateReturned = NULL
                        --, ReasonCode = NULL
                    where DispatchInstanceItemId = @dispatchInstanceItemId              

                    UPDATE DispatchInstanceItems
                    SET DateReturned = NULL
                    WHERE QtyReturned = 0
                        and DispatchInstanceItemId = @dispatchInstanceItemId       
						
					EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Update DispatchInstanceItems', @startDateTime;
					SET @startDateTime = GETDATE();         
                end
            end             

            set @dispatchInstanceId = null
            SELECT @dispatchInstanceId = DispatchInstanceId
            FROM DispatchInstances (NOLOCK) 
            WHERE DispatchId = @dispatchId
                AND SequenceNum = @sequenceNum
                AND ReturnSequenceNum = @returnSequenceNum
                AND ShipType = 'DT-RETURN'
        
            -- Undo QtyReturned for Return Item record
            if @dispatchInstanceId is null
            begin
                --select '-202'
                return              -- Dispatch Instance (DT-Return) is not found
            end
            begin
                select @dispatchInstanceItemId = DispatchInstanceItemId
                from DispatchInstanceItems  (NOLOCK) 
                WHERE DispatchInstanceId = @dispatchInstanceId
                    AND LineNumber = @lineNum AND SerialNum = @serialNum and ItemNum = @invoiceNum

                if @dispatchInstanceItemId is null
                begin
                    --select '-204'
                    return          -- Asset is not found on DT-Return 
                end
                else
                begin
                    UPDATE DispatchInstanceItems 
                    SET QtyReturned = QtyReturned - @qtyReturned
                        , DateReturned = NULL
                        --, ReasonCode = NULL
                    where DispatchInstanceItemId = @dispatchInstanceItemId              

                    DELETE FROM DispatchInstanceItems 
                    WHERE DispatchInstanceId = @dispatchInstanceId
                        AND QtyReturned <= 0

				EXEC usp_MyAdvisor_Logs @runId, 'spDeliveryTicketToDispatchSOA', 'Update & delete DispatchInstanceItems', @startDateTime;
				
                end
            end
        end
    END
    
	insert into AesImport.dbo.SOAProcessedLog (TransactionId, TransactionName, DateAdded)
	values (@transactionId, @transactionName, GETDATE())

--    select '0'
END
GO
/****** Object:  StoredProcedure [dbo].[spGetCPARDataToPost]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetCPARDataToPost]
(
@jobNumber		VARCHAR(50)
)
AS
-------------------------------------------------------------------------------------------------------------
--   Purpose  : Get the CPAR Details to Post to WPTP.
--
--   Modified : 
--				[Sachin Mhalungekar] - 02/11/2017 - Created
-------------------------------------------------------------------------------------------------------------
BEGIN

	SET NOCOUNT ON
	
	BEGIN
		
		SELECT DISTINCT
				CONVERT(NVARCHAR(50),I.IncidentID) As IncidentID,				
				j.WFTUserName As OriginitedBy,
				CONVERT(NVARCHAR(50), J.ReportId) As WPTSJobReportID,
				CONVERT(VARCHAR(10), i.FailureDate,120) As EventDate,
				CONVERT(TIME(0), i.FailureDate) As EventTime,
				CONVERT(VARCHAR(10), i.CreateDate,120) As ReportedDate,
				'true' As IsNPT,
				CONVERT(NVARCHAR(10), I.Criticality) As ActualConsequences,
				CONVERT(NVARCHAR(10), I.Criticality) As PotentialConsequences,
				'N/A' As NotificationSummary,
				CONVERT(VARCHAR(MAX), TSC.FailureDesc) As IncidentDesc,
				'N/A' As ShortTermAction,
				j.WFTUserName  As Supervisor,
				j.WFTUserName As Coordinator,
				'10' As Segment
			FROM  Incidents I 
			INNER JOIN Runs R on I.RunID = R.RunID
			INNER JOIN Wells W on W.WellID = R.WellID
			INNER JOIN Jobs J on J.JobID	= W.JobID
			INNER JOIN ToolStringComponentInfo TSC on TSC.RunID = I.RunID and I.IncidentID = TSC.IncidentID
		WHERE JobNumber = @jobNumber AND TSC.IncidentDate IS NOT NULL;


		SELECT 
				T.SerialNumber As AssetGroup, 
				TSC.FailureDesc As FFDescription, 
				'' As SFDescription,
				CONVERT(NVARCHAR(50),TSC.FixedAssetId) As FixedAssetId, 	
				CONVERT(NVARCHAR(50),TSC.CompFailureCodeID) As CompFailureCodeId
		FROM Incidents I 
		INNER JOIN Runs R on I.RunID = R.RunID
		INNER JOIN Wells W on W.WellID = R.WellID
		INNER JOIN Jobs J on J.JobID	= W.JobID
		INNER JOIN ToolStringComponentInfo TSC on TSC.RunID = I.RunID and I.IncidentID = TSC.IncidentID 
		INNER JOIN ToolStrings T on T.toolstringid = TSC.ToolStringID
		WHERE JobNumber = @jobNumber AND TSC.CompFailureCodeID IS NOT NULL;
			
	END
	
	
	SET NOCOUNT OFF

	RETURN 0          -- (success code)	
END
GO
/****** Object:  StoredProcedure [dbo].[spGetCR_NCRForPortlet_Approver]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[spGetCR_NCRForPortlet_Approver]
	@xmlData xml
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @UserId INT
	DECLARE @whereClause varchar(MAX)

	SELECT @UserId = T.c.value('(userId/text())[1]', 'int')
	FROM @xmlData.nodes('/Filters') T(c);
	
	SELECT @WhereClause = T.c.value('(whereClause/text())[1]', 'varchar(MAX)')
	FROM @xmlData.nodes('/Filters') T(c);

	Exec('Select Distinct TOP 150 qry.RequestId, qry.Requestor, qry.Priority, qry.RequestStatus, qry.NextApprover, 
	qry.Subject, qry.OpenClosed, qry.BranchPlant, qry.DateEntered, qry.RequestType From
		(SELECT  
			sr.RequestID, 
			sr.Requestor, 
			Priority = 
				case sr.Priority 
					when 1 then ''Low''
					when 5 then ''Medium''
					when 10 then ''High''
					else ''''
				end,
			RequestStatus = 
				case sr.RequestStatus
					when ''AP'' then ''Awaiting Approval''
					when ''A'' then ''Approved''
					when ''NA'' then ''Not Approved''
				end, 
			(SELECT TOP 1 FullName 
			FROM vwRequestApprovals WITH(NOLOCK)
			WHERE approvalstatus=''X'' AND RequestId=sr.RequestId
			AND UserId=' + @UserId + ') AS 
			NextApprover,
			Subject,
			OpenClosed = 
				case sr.OpenClosed
					when ''O'' then ''Open''
					when ''H'' then ''On Hold''
					when ''C'' then ''Closed''
					when ''I'' then ''In Progress''
				end,
			BranchPlant,
			DateEntered,
			RequestType
		FROM vwSearchRequests sr WITH(NOLOCK)
		WHERE 
		RequestId in (Select RequestId from vwRequestApprovals WITH(NOLOCK) Where UserId=' + @UserId + ' and ReqType = ''CRNCR'' AND ApprovalStatus = ''X'')
		AND OpenClosed <> ''C'' ' + ' AND ' + @whereClause + '
		) qry
		ORDER BY qry.DateEntered DESC')

END




set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON

GO
/****** Object:  StoredProcedure [dbo].[spGetCR_NCRForPortlet_Creator]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[spGetCR_NCRForPortlet_Creator]
	@xmlData xml
AS
BEGIN

	SET NOCOUNT ON;
	DECLARE @UserId int
	DECLARE @WhereClause varchar(MAX)
	
	SELECT @UserId = T.c.value('(userId/text())[1]', 'int')
	FROM @xmlData.nodes('/Filters') T(c);
	
	SELECT @WhereClause = T.c.value('(whereClause/text())[1]', 'varchar(MAX)')
	FROM @xmlData.nodes('/Filters') T(c);

	Exec('Select Distinct TOP 150 qry.RequestId, qry.Requestor, qry.Priority, qry.RequestStatus, qry.NextApprover, 
	qry.Subject, qry.OpenClosed, qry.BranchPlant, qry.DateEntered, qry.RequestType From
		(SELECT  
			sr.RequestID, 
			sr.Requestor, 
			Priority = 
				case sr.Priority 
					when 1 then ''Low'' 
					when 5 then ''Medium''
					when 10 then ''High''
					else ''''
				end,
			RequestStatus = 
				case sr.RequestStatus
					when ''AP'' then ''Awaiting Approval''
					when ''A'' then ''Approved''
					when ''NA'' then ''Not Approved''
				end, 
			(SELECT TOP 1 FullName 
			FROM vwRequestApprovals WITH(NOLOCK)
			WHERE approvalstatus=''X'' AND RequestId=sr.RequestId) AS 
			NextApprover,
			Subject,
			OpenClosed = 
				case sr.OpenClosed
					when ''O'' then ''Open''
					when ''H'' then ''On Hold''
					when ''C'' then ''Closed''
					when ''I'' then ''In Progress''
				end,
			BranchPlant,
			DateEntered,
			RequestType
		FROM vwSearchRequests sr WITH(NOLOCK)
		WHERE 
		--DateEntered > GETDATE() - 500	AND 
		UserIdEntered = ' + @UserId + '
		AND OpenClosed <> ''C'' ' + ' AND ' + @whereClause + ') qry
		ORDER BY qry.DateEntered DESC')

END



set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON

GO
/****** Object:  StoredProcedure [dbo].[spGetCR_NCRForPortlet_Subscribed]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spGetCR_NCRForPortlet_Subscribed]
	@xmlData xml
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @UserId int
	DECLARE @WhereClause varchar(MAX)
	
	SELECT @UserId = T.c.value('(userId/text())[1]', 'int')
	FROM @xmlData.nodes('/Filters') T(c);
	
	SELECT @WhereClause = T.c.value('(whereClause/text())[1]', 'varchar(MAX)')
	FROM @xmlData.nodes('/Filters') T(c);

	Exec('SELECT TOP 150
		sr.RequestId, 
		sr.Requestor, 
		Priority = 
			case sr.Priority 
				when 1 then ''Low'' 
				when 5 then ''Medium''
				when 10 then ''High''
				else ''''
			end,
		RequestStatus = 
			case sr.RequestStatus
				when ''AP'' then ''Awaiting Approval''
				when ''A'' then ''Approved''
				when ''NA'' then ''Not Approved''
			end, 
		(SELECT TOP 1 FullName 
		FROM vwRequestApprovals WITH(NOLOCK)
		WHERE approvalstatus=''X'' AND RequestId=sr.RequestId) AS 
		NextApprover,
		Subject,
		OpenClosed = 
			case sr.OpenClosed
				when ''O'' then ''Open''
				when ''H'' then ''On Hold''
				when ''C'' then ''Closed''
				when ''I'' then ''In Progress''
			end,
		BranchPlant,
		sr.DateEntered,
		RequestType
	FROM vwSearchRequests sr WITH(NOLOCK)
	INNER JOIN RequestSubscriptions rs WITH(NOLOCK) ON sr.RequestId = rs.RequestId
	WHERE UserId=' + @UserId + ' and sr.OpenClosed != ''C'' ' + ' AND ' + @whereClause + '
	ORDER BY sr.DateEntered DESC')

END


set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON

GO
/****** Object:  StoredProcedure [dbo].[spGetECRActionItemPortlet_Assignee]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetECRActionItemPortlet_Assignee]
	@xmlData xml
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @UserId INT
	DECLARE @WhereClause VARCHAR(MAX)

	SELECT @UserId = T.c.value('(userId/text())[1]', 'int')
	FROM @xmlData.nodes('/Filters') T(c);
	
	SELECT @WhereClause = T.c.value('(whereClause/text())[1]', 'varchar(MAX)')
	FROM @xmlData.nodes('/Filters') T(c);

	EXEC ('SELECT e.ECRNum, ai.ActionText, ai.ActionState, ai.DateAdded, ai.DueDate,
		c.FirstName + '' '' + c.LastName AS Creator,
		a.FirstName + '' '' + a.LastName AS Assignee
		FROM ECRs (NOLOCK) e
			JOIN ECRActionItems (NOLOCK) ai ON ai.ECRId = e.ECRId
			JOIN Users (NOLOCK) c ON c.Username = ai.Creator
			JOIN Users (NOLOCK) a ON a.Username = ai.Assignee
		WHERE a.UserId = ' + @UserId + ' AND ' + @WhereClause + ' ')
END



SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON



/****** Object:  StoredProcedure [dbo].[spGetECRActionItemPortlet_Creator]    Script Date: 08/05/2014 18:00:54 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[spGetECRActionItemPortlet_Creator]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetECRActionItemPortlet_Creator]
	@xmlData xml
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @UserId INT
	DECLARE @WhereClause VARCHAR(MAX)

	SELECT @UserId = T.c.value('(userId/text())[1]', 'int')
	FROM @xmlData.nodes('/Filters') T(c);
	
	SELECT @WhereClause = T.c.value('(whereClause/text())[1]', 'varchar(MAX)')
	FROM @xmlData.nodes('/Filters') T(c);

	EXEC ('SELECT e.ECRNum, ai.ActionText, ai.ActionState, ai.DateAdded, ai.DueDate,
		c.FirstName + '' '' + c.LastName AS Creator,
		a.FirstName + '' '' + a.LastName AS Assignee
		FROM ECRs (NOLOCK) e
			JOIN ECRActionItems (NOLOCK) ai ON ai.ECRId = e.ECRId
			JOIN Users (NOLOCK) c ON c.Username = ai.Creator
			JOIN Users (NOLOCK) a ON a.Username = ai.Assignee
		WHERE c.UserId = ' + @UserId + ' AND ' + @WhereClause + ' ')
END



SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON



/****** Object:  StoredProcedure [dbo].[spGetECRPortlet_Approver]    Script Date: 08/05/2014 18:02:42 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[spGetECRPortlet_Approver]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetECRPortlet_Approver]
	@xmlData xml
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @UserId int
	DECLARE @WhereClause varchar(MAX)
	
	SELECT @UserId = T.c.value('(userId/text())[1]', 'int')
	FROM @xmlData.nodes('/Filters') T(c);
	
	SELECT @WhereClause = T.c.value('(whereClause/text())[1]', 'varchar(MAX)')
	FROM @xmlData.nodes('/Filters') T(c);

	EXEC ('SELECT TOP 150 e.ECRNum
		, STUFF (( SELECT '', '' + PartNum FROM ECRPartNums (NOLOCK)
			WHERE ECRId = e.ECRId
			FOR XML PATH('''')), 1, 2, '''') AS PartNums
		, e.ChangeDescription, es.StateDesc AS ApprovalStage
		, e.ToolSize, e.BranchPlant
		, o.FirstName + '' '' + o.LastName AS Originator
		, s.FirstName + '' '' + s.LastName AS Supervisor
		, e.DateAdded
		FROM MCApprovals (NOLOCK) mca 
			JOIN Users (NOLOCK) u ON u.UserId = mca.UserId
			JOIN ECRs (NOLOCK) e ON e.ECRId = mca.ReferenceId AND e.FormStatus = mca.Stage
			JOIN Users (NOLOCK) o ON o.Username = e.Originator
			JOIN Users (NOLOCK) s ON s.Username = e.Supervisor
			JOIN ECRStates (NOLOCK) es ON es.ECRStateId = e.FormStatus
		WHERE mca.UserId = ' + @UserId + ' AND ' + @WhereClause + ' ')
END



SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON



/****** Object:  StoredProcedure [dbo].[spGetECRPortlet_Creator]    Script Date: 08/05/2014 18:04:34 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[spGetECRPortlet_Creator]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetECRPortlet_Creator]
	@xmlData xml
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @UserId INT
	DECLARE @WhereClause VARCHAR(MAX)
	
	SELECT @UserId = T.c.value('(userId/text())[1]', 'int')
	FROM @xmlData.nodes('/Filters') T(c);
	
	SELECT @WhereClause = T.c.value('(whereClause/text())[1]', 'varchar(MAX)')
	FROM @xmlData.nodes('/Filters') T(c);

	EXEC ('SELECT TOP 150 e.ECRNum
		, STUFF (( SELECT '', '' + PartNum FROM ECRPartNums (NOLOCK)
			WHERE ECRId = e.ECRId
			FOR XML PATH('''')), 1, 2, '''') AS PartNums
		, e.ChangeDescription, es.StateDesc AS ApprovalStage
		, e.ToolSize, e.BranchPlant
		, o.FirstName + '' '' + o.LastName AS Originator
		, s.FirstName + '' '' + s.LastName AS Supervisor
		, e.DateAdded
		FROM MCApprovals (NOLOCK) mca 
			JOIN Users (NOLOCK) u ON u.UserId = mca.UserId
			JOIN ECRs (NOLOCK) e ON e.ECRId = mca.ReferenceId AND e.FormStatus = mca.Stage
			JOIN Users (NOLOCK) o ON o.Username = e.Originator
			JOIN Users (NOLOCK) s ON s.Username = e.Supervisor
			JOIN ECRStates (NOLOCK) es ON es.ECRStateId = e.FormStatus
		WHERE o.UserId = ' + @UserId + ' AND ' + @WhereClause + ' ')
END



SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON



/****** Object:  StoredProcedure [dbo].[spGetECRPortlet_Subscriber]    Script Date: 08/05/2014 18:05:47 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[spGetECRPortlet_Subscriber]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetECRPortlet_Subscriber]
	@xmlData xml
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @UserId INT
	DECLARE @WhereClause VARCHAR(MAX)

	SELECT @UserId = T.c.value('(userId/text())[1]', 'int')
	FROM @xmlData.nodes('/Filters') T(c);
	
	SELECT @WhereClause = T.c.value('(whereClause/text())[1]', 'varchar(MAX)')
	FROM @xmlData.nodes('/Filters') T(c);

	EXEC ('SELECT TOP 150 e.ECRNum
		, STUFF (( SELECT '', '' + PartNum FROM ECRPartNums (NOLOCK)
			WHERE ECRId = e.ECRId
			FOR XML PATH('''')), 1, 2, '''') AS PartNums
		, e.ChangeDescription, es.StateDesc AS ApprovalStage
		, e.ToolSize, e.BranchPlant
		, o.FirstName + '' '' + o.LastName AS Originator
		, s.FirstName + '' '' + s.LastName AS Supervisor
		, e.DateAdded
		FROM MCApprovals (NOLOCK) mca 
			JOIN Users (NOLOCK) u ON u.UserId = mca.UserId
			JOIN ECRs (NOLOCK) e ON e.ECRId = mca.ReferenceId AND e.FormStatus = mca.Stage
			JOIN Users (NOLOCK) o ON o.Username = e.Originator
			JOIN Users (NOLOCK) s ON s.Username = e.Supervisor
			JOIN ECRStates (NOLOCK) es ON es.ECRStateId = e.FormStatus
			JOIN MCSubscribers (NOLOCK) mcs ON mcs.RefId = e.ECRId
		WHERE mcs.UserId = ' + @UserId + ' AND ' + @WhereClause + ' ')
END



SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON



/****** Object:  StoredProcedure [dbo].[spGetUserSessionLog]    Script Date: 08/05/2014 18:08:39 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[spGetNCRForPortlet_Reviewed_InProgress]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spGetNCRForPortlet_Reviewed_InProgress]
	@xmlData xml
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @UserId int
	DECLARE @WhereClause varchar(MAX)
	
	SELECT @UserId = T.c.value('(userId/text())[1]', 'int')
	FROM @xmlData.nodes('/Filters') T(c);
	
	SELECT @WhereClause = T.c.value('(whereClause/text())[1]', 'varchar(MAX)')
	FROM @xmlData.nodes('/Filters') T(c);

	Exec('SELECT TOP 150
		sr.RequestId, 
		sr.Requestor, 
		Priority = 
			case sr.Priority 
				when 1 then ''Low'' 
				when 5 then ''Medium''
				when 10 then ''High''
				else ''''
			end,
		RequestStatus = 
			case sr.RequestStatus
				when ''AP'' then ''Awaiting Approval''
				when ''A'' then ''Approved''
				when ''NA'' then ''Not Approved''
			end, 
		(SELECT TOP 1 FullName 
		FROM vwRequestApprovals WITH(NOLOCK)
		WHERE approvalstatus=''X'' AND RequestId=sr.RequestId) AS 
		NextApprover,
		Subject,
		OpenClosed = 
			case sr.OpenClosed
				when ''O'' then ''Open''
				when ''H'' then ''On Hold''
				when ''C'' then ''Closed''
				when ''I'' then ''In Progress''
			end,
		BranchPlant,
		sr.DateEntered,
		RequestType
	FROM vwSearchRequests sr WITH(NOLOCK)
	INNER JOIN vwRequestApprovals ra WITH(NOLOCK) ON sr.RequestId = ra.RequestId
	WHERE (ra.ApprovalStatus = ''R'' OR ra.ApprovalStatus = ''P'') AND 
			(sr.Openclosed = ''O'' OR sr.OpenClosed = ''I'') AND
			ra.UserId = ' + @UserId + ' AND ' + @whereClause +  '
	ORDER BY sr.DateEntered DESC')
END



set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON

GO
/****** Object:  StoredProcedure [dbo].[spGetUserSessionLog]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetUserSessionLog] (
	@UserSessionLogId uniqueidentifier,
	@SessionId varchar(50)
	--,@LastAccessedDate datetime output
	--,@UserId int output
	)
AS
BEGIN
	SET NOCOUNT ON;
	declare @LastAccessedDate datetime
	declare @UserId int
	
	SET @LastAccessedDate = NULL
	SET @UserId = NULL

	SELECT 
		@LastAccessedDate = LastAccessedDate
		, @UserId = UserId
	FROM
		UserSessionLog (NOLOCK)
	WHERE
		UserSessionLogId = @UserSessionLogId AND
		SessionId = @SessionId 
		
	SELECT @LastAccessedDate, @UserId
END







/****** Object:  StoredProcedure [dbo].[spProcessAssetTransferXml]    Script Date: 08/05/2014 18:12:19 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[spProcessAssetInformationXml]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spProcessAssetInformationXml] 
    @xmlData xml
AS
BEGIN
    SET NOCOUNT ON;
    
    declare @FixedAssetId uniqueidentifier
        , @CurrentEquipmentStatus varchar(2)
        , @transactionId int
        , @transactionName varchar(25)
        , @AssetNumber varchar(10)
        , @Company varchar(5)
        , @CurrentBranchPlant varchar(12)
        , @BranchPlant varchar(12)
        , @toBranchPlant varchar(12)
        , @AssetDescription1 varchar(30)
        , @AssetDescription2 varchar(30)
        , @AssetDescription3 varchar(30)
        , @ManufacturersSerialNo varchar(25)
        , @RBU varchar(12) -- business unit
        , @RNItemNum varchar(30)
        , @SerialNum varchar(30)
        , @Qty decimal(15,2)
        , @CurrencyCode varchar(3)
        , @Cost decimal(15,2)
        , @AccumDepreciation decimal(15,2)
        , @NetBookValue decimal(15,2)
        , @EquipmentStatus varchar(2) -- asset status
        , @ProductLineCode varchar(3)
        , @UnitNumber varchar(12)
        , @InventoryItemNum varchar(8)
        , @LegacySerialNumber varchar(25)  -- legacy part number
        , @AFENumber varchar(12)
        , @State varchar(3)
        , @ContractAccount varchar(25)
        , @Ownership varchar(3)
        , @DateAcquired datetime
        , @LifeMonths numeric(4)
        , @StartDepreciation_Date datetime
        , @NewUsed char(1)
        , @Manufacturer varchar(3)
        , @PanelCodeVersion varchar(25)
    --  , @AssetAdditionDate
    --  , @WhoAddedAsset
        , @Revision varchar(2)
        , @CatCode16 varchar(3)
    --  , @CatCode20
        , @ParentAsset varchar(10)
        , @DateDisposed datetime
        , @ModelYear varchar(3)
        , @DocumentType varchar(25)
        , @DocumentNumber int
        , @ReceivingLocation varchar(12)
        , @DateofTransaction datetime
		, @TimeOfTransaction varchar(6)
		, @ProgramId varchar(MAX)
    
    declare @InWO int
        , @InAIRT int
        , @InDispatch int
        , @ParentIsUR int

    ;WITH XMLNAMESPACES ('http://www.wft.com/AssetInformation/Outbound/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/AssetInformation/Outbound/v1.0')        
    SELECT
        @transactionName= ltrim(rtrim(T.c.value('(TransactionName/text())[1]', 'varchar(25)'))),
        @transactionId= ltrim(rtrim(T.c.value('(TransactionId/text())[1]', 'int')))        
    FROM @xmlData.nodes('/AssetInformation/AssetInfoCollection/MessageHeader') AS T(c)

    ;WITH XMLNAMESPACES ('http://www.wft.com/AssetInformation/Outbound/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/AssetInformation/Outbound/v1.0')        
    SELECT
        @AssetNumber = ltrim(rtrim(T.c.value('(AssetNumber/text())[1]', 'varchar(10)')))
        , @SerialNum = ltrim(rtrim(T.c.value('(SerialNo/text())[1]', 'varchar(30)')))
        , @InventoryItemNum = ltrim(rtrim(T.c.value('(InventoryPartNumber/text())[1]', 'varchar(30)')))
    FROM @xmlData.nodes('/AssetInformation/AssetInfoCollection/MessageDetail') AS T(c)

    set @FixedAssetId = null
    select @FixedAssetId = FixedAssetId
        , @CurrentEquipmentStatus = EquipmentStatus 
        , @CurrentBranchPlant = BranchPlant
    from FixedAssets (NOLOCK) 
    where AssetNumber = @AssetNumber 
    
    if @FixedAssetId is null
    begin
		declare @faCount int
		
		set @faCount = 0
		select @faCount = count(1) 
		from FixedAssets (NOLOCK) 
		where InventoryItemNum = @InventoryItemNum and SerialNum = @SerialNum
		
		if @faCount = 1
		begin
			select @FixedAssetId = FixedAssetId
				, @CurrentEquipmentStatus = EquipmentStatus 
				, @CurrentBranchPlant = BranchPlant
			from FixedAssets (NOLOCK) 
			where InventoryItemNum = @InventoryItemNum 
				and SerialNum = @SerialNum 
				--and Source = 'JDEETL'
		end
		else if @faCount > 1
		begin
			insert into AesImport.dbo.AssetWarnings (FixedAssetId, WarningMsg, OldInventoryItemNum, OldSerialNum, DateAdded, IsProcessed)
			select FixedAssetId, 'Duplicate IN/SN (SOA)', InventoryItemNum, SerialNum, getdate(), 0
			from FixedAssets
			where InventoryItemNum = @InventoryItemNum 
				and SerialNum = @SerialNum 
				--and Source = 'JDEETL'

			select '-106'				--Multiple assets with same InventoryItemNum and SerialNum
			return		
		end
	end

    ;WITH XMLNAMESPACES ('http://www.wft.com/AssetInformation/Outbound/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/AssetInformation/Outbound/v1.0')
    SELECT
        @Company = ltrim(rtrim(T.c.value('(Company/text())[1]', 'varchar(5)')))
        , @BranchPlant = ltrim(rtrim(T.c.value('(BranchPlant/text())[1]', 'varchar(12)')))
        , @DocumentType = ltrim(rtrim(T.c.value('(DocumentType/text())[1]', 'varchar(25)')))
        , @DocumentNumber = ltrim(rtrim(T.c.value('(DocumentNumber/text())[1]', 'int')))
        , @AssetDescription1 = ltrim(rtrim(T.c.value('(AssetDescription1/text())[1]', 'varchar(30)')))
        , @AssetDescription2 = ltrim(rtrim(T.c.value('(AssetDescription2/text())[1]', 'varchar(30)')))
        , @AssetDescription3 = ltrim(rtrim(T.c.value('(AssetDescription3/text())[1]', 'varchar(30)')))
        , @ManufacturersSerialNo = ltrim(rtrim(T.c.value('(ManufacturersSerialNo/text())[1]', 'varchar(25)')))
        , @RBU = ltrim(rtrim(T.c.value('(RBU/text())[1]', 'varchar(12)'))) -- business unit
        , @RNItemNum = ltrim(rtrim(T.c.value('(ItemNo/text())[1]', 'varchar(30)')))
        , @SerialNum = ltrim(rtrim(T.c.value('(SerialNo/text())[1]', 'varchar(30)')))
        , @Qty = T.c.value('(Quantity/text())[1]', 'decimal(15,2)')
        , @CurrencyCode = ltrim(rtrim(T.c.value('(CurrencyCode/text())[1]', 'varchar(3)')))
        , @Cost = T.c.value('(Cost/text())[1]', 'decimal(15,2)')
        , @AccumDepreciation = T.c.value('(AccumulatedDepreciation/text())[1]', 'decimal(15,2)')
        , @NetBookValue = T.c.value('(NetBookValue/text())[1]', 'decimal(15,2)')
        , @EquipmentStatus = ltrim(rtrim(T.c.value('(AssetStatus/text())[1]', 'varchar(2)'))) -- asset status
        , @ProductLineCode = ltrim(rtrim(T.c.value('(ProductLineCode/text())[1]', 'varchar(3)')))
        , @UnitNumber = ltrim(rtrim(T.c.value('(UnitNumber/text())[1]', 'varchar(12)')))
        , @InventoryItemNum = ltrim(rtrim(T.c.value('(InventoryPartNumber/text())[1]', 'varchar(30)')))
        , @LegacySerialNumber = ltrim(rtrim(T.c.value('(LegacyPartNumber/text())[1]', 'varchar(25)')))  -- legacy part number
        , @AFENumber = ltrim(rtrim(T.c.value('(AFE/text())[1]', 'varchar(12)')))
        , @State = ltrim(rtrim(T.c.value('(State/text())[1]', 'varchar(3)')))
        , @ContractAccount = ltrim(rtrim(T.c.value('(ContractAccount/text())[1]', 'varchar(25)')))
        , @Ownership = ltrim(rtrim(T.c.value('(Ownership/text())[1]', 'varchar(3)')))
        , @DateAcquired = T.c.value('(DateAcquired/text())[1]', 'datetime')
        , @LifeMonths = T.c.value('(LifeMonthsonAARegister/text())[1]', 'numeric(4)')
        , @StartDepreciation_Date = T.c.value('(StartDeprDate/text())[1]', 'datetime')
        , @NewUsed = ltrim(rtrim(T.c.value('(NeworUsed/text())[1]', 'char(1)')))
        , @Manufacturer = ltrim(rtrim(T.c.value('(Manufacturer/text())[1]', 'varchar(10)')))
        , @PanelCodeVersion = ltrim(rtrim(T.c.value('(PanelCodeVersion/text())[1]', 'varchar(25)')))
        --, @AssetAdditionDate
        --, @WhoAddedAsset
        , @CatCode16 = ltrim(rtrim(T.c.value('(Cat_Code_16/text())[1]', 'varchar(3)')))
        , @Revision = ltrim(rtrim(T.c.value('(Revision/text())[1]', 'varchar(2)')))
        --, @CatCode20
        , @ParentAsset = ltrim(rtrim(T.c.value('(ParentAsset/text())[1]', 'varchar(10)')))
        , @DateDisposed = T.c.value('(DateDisposed/text())[1]', 'datetime')
        , @ModelYear = ltrim(rtrim(T.c.value('(ModelYear/text())[1]', 'varchar(3)')))
        , @ReceivingLocation = ltrim(rtrim(T.c.value('(ReceivingLocation/text())[1]', 'varchar(12)')))
        , @DateofTransaction =  ltrim(rtrim(T.c.value('(DateofTransaction/text())[1]', 'datetime'))) 
		, @TimeOfTransaction = RIGHT('000000' + ISNULL(ltrim(rtrim(T.c.value('(TimeofTransaction/text())[1]', 'varchar(6)'))),''),6)
		, @ProgramId = LTRIM(RTRIM(T.c.value('(ProgramId/text())[1]', 'varchar(MAX)')))
    FROM @xmlData.nodes('/AssetInformation/AssetInfoCollection/MessageDetail') AS T(c)
	

	SET @DateofTransaction = DATEADD(HOUR, CAST(LEFT(@TimeOfTransaction,2) AS INT), @DateofTransaction)
	SET @DateofTransaction = DATEADD(MINUTE, CAST(SUBSTRING(@TimeOfTransaction,3,2) AS INT), @DateofTransaction)
	SET @DateofTransaction = DATEADD(SECOND, CAST(RIGHT(@TimeOfTransaction,2) AS INT), @DateofTransaction)


	--if @CatCode16 = 'WLN'
	--begin
	--	select '-199'							-- Wireline; ignore.
	--	return
	--end
	
    if @transactionName = 'AssetAdd'
    begin           
		
		if @FixedAssetId is null
        begin
            set @FixedAssetId = NEWID()
            
            INSERT INTO FixedAssets (
              FixedAssetId
              ,AssetNumber
              ,Company
              ,BranchPlant
              --,FixedAssetBranchPlant
              ,AssetDescription
              ,ManufacturersSerialNumber
              ,BusinessUnit
              ,RNItemNum
              ,SerialNum
              ,CurrentItemQty
              ,CurrencyCode
              ,Cost
              ,AccumDepreciation
              ,NetBookValue
              ,EquipmentStatus
              ,ProductLineCode
              ,UnitNumber
              ,InventoryItemNum
              ,LegacySerialNumber
              ,AFENumber
              ,[State]
              ,ContractAccount
              ,[Ownership]
              ,DateAcquired
              ,LifeMonths
              ,StartDepreciation_Date
              ,NewUsed
              ,Manufacturer
              ,ModelYear
              ,ThirdItemNumber
              --,DateDisposed
              --,FiscalYear
              --,LedgerType
              ,Revision
              ,CatCode16
              ,ParentNumber
              ,LastStatusChangeDate
              ,Source
            )
            VALUES
            (
              @FixedAssetId
             , @AssetNumber
             , @Company
             , @BranchPlant
             , @AssetDescription1
             --, @AssetDescription2
             --, @AssetDescription3
             , @ManufacturersSerialNo
             , @RBU
             , @RNItemNum
             , @SerialNum
             , @Qty
             , @CurrencyCode
             , @Cost
             , @AccumDepreciation
             , @NetBookValue
             , @EquipmentStatus
             , @ProductLineCode
             , @UnitNumber
             , @InventoryItemNum
             , @LegacySerialNumber
             , @AFENumber
             , @State
             , @ContractAccount
             , @Ownership
             , @DateAcquired
             , @LifeMonths
             , @StartDepreciation_Date
             , @NewUsed
             , @Manufacturer
             , @ModelYear
             , @PanelCodeVersion
             --, @DateDisposed
            -- , @AssetAdditionDate
            -- , @WhoAddedAsset
             , @Revision
             , @CatCode16
            -- , @CatCode20
             , @ParentAsset
             , @DateofTransaction
             , 'JDESOA'
          )
        end
        else
        begin
            UPDATE FixedAssets
            SET
                 Company = @Company
                 , BranchPlant = @BranchPlant
                 , FixedAssetBranchPlant = @BranchPlant
                 , AssetDescription = @AssetDescription1
                 --, @AssetDescription2
                 --, @AssetDescription3
                 , ManufacturersSerialNumber = @ManufacturersSerialNo
                 , BusinessUnit = @RBU
                 , RNItemNum = @RNItemNum
                 , SerialNum = @SerialNum
                 , CurrentItemQty = @Qty
                 , CurrencyCode = @CurrencyCode
                 , Cost = @Cost
                 , AccumDepreciation = @AccumDepreciation
                 , NetBookValue = @NetBookValue
                 , EquipmentStatus = @EquipmentStatus
                 , ProductLineCode = @ProductLineCode
                 , UnitNumber = @UnitNumber
                 , InventoryItemNum = CASE  
					WHEN @InventoryItemNum IS NULL THEN [InventoryItemNum]
					WHEN @InventoryItemNum = '0' THEN [InventoryItemNum] 
					ELSE @InventoryItemNum END
                 , LegacySerialNumber = @LegacySerialNumber
                 , AFENumber = @AFENumber
                 , [State] = @State
                 , ContractAccount = @ContractAccount
                 , [Ownership] = @Ownership
                 , DateAcquired = @DateAcquired
                 , LifeMonths = @LifeMonths
                 , StartDepreciation_Date = @StartDepreciation_Date
                 , NewUsed = @NewUsed
                 , Manufacturer = @Manufacturer
                 , ThirdItemNumber = @PanelCodeVersion
                -- , @AssetAdditionDate
                -- , @WhoAddedAsset
                 , Revision = @Revision
                 , CatCode16 = @CatCode16
                -- , @CatCode20
                 , ParentNumber = @ParentAsset
                 --, DateDisposed = @DateDisposed
                 , ModelYear = @ModelYear
                 , LastStatusChangeDate = @DateofTransaction
            WHERE FixedAssetId = @FixedAssetId
        end
    end
    if @transactionName = 'AssetDisposition'
    begin               
        if @FixedAssetId is null
        begin
            select '-100'                       -- AssetNum is not found in FixedAssets table
            return                          
        end
        --else
        --begin
        --    --select @InWO=InWO, @InAIRT=InAIRT, @InDispatch=InDispatch, @ParentIsUR=ParentIsUR
        --    --from dbo.fnGetAssetInUse(@FixedAssetId)
            
        --    --if (@InWO = 1)
        --    --begin
        --    --  select '100'                        -- Asset is in WO, cannot be disposed
        --    --end
        --    --if (@InAIRT = 1)                      
        --    --begin
        --    --  select '101'                        -- Asset is in AIRT, cannot be disposed
        --    --end
        --    --if (@InDispatch = 1)
        --    --begin
        --    --  select '102'                        -- Asset is in Dispatch, cannot be disposed
        --    --end
        --end

        
        UPDATE FixedAssets
        SET --DocumentNumber, DocumentType, InvoiceNumber, WFTRouting, UserDisposed         
            EquipmentStatus = @EquipmentStatus
            , DateDisposed = @DateDisposed
            , ParentNumber = @ParentAsset
            , LastStatusChangeDate = @DateofTransaction
        WHERE FixedAssetId = @FixedAssetId
        
        exec spProcessAssetTransferXml @xmlData, @FixedAssetId, @CurrentEquipmentStatus

    end
            
    if @transactionName = 'AssetTransfer'
    begin
        if @FixedAssetId is null
        begin
            select '-100'                       -- AssetNum is not found in FixedAssets table
            return                      
        end

        select @toBranchPlant = CASE WHEN (@DocumentType = 'S5' or (@DocumentType = 'S9' or @DocumentType = 'WC')) THEN @CurrentBranchPlant
			WHEN (@DocumentType = 'IN' or @DocumentType = 'O9' or @DocumentType = 'OT') THEN @ReceivingLocation
            ELSE @BranchPlant END 

        UPDATE FixedAssets
        SET
            CurrentItemQty = ltrim(rtrim(@Qty))
            , EquipmentStatus = ltrim(rtrim(@EquipmentStatus))
            , [Ownership] = ltrim(rtrim(@Ownership))
            , LastStatusChangeDate = @DateofTransaction
            , BranchPlant = ltrim(rtrim(@toBranchPlant))
			, SerialNum = @SerialNum
        WHERE FixedAssetId = @FixedAssetId

            
        exec usp_TransferChildComponents @FixedAssetId, @toBranchPlant
        exec spProcessAssetTransferXml @xmlData, @FixedAssetId, @CurrentEquipmentStatus
    end

    if @transactionName = 'AssetStatusChange'
    begin
        if @FixedAssetId is null
        begin
            select '-100'                       -- AssetNum is not found in FixedAssets table
            return                          
        end

         if (@DocumentType = 'IE')
        begin

            if (@RNItemNum = '' or @RNItemNum = '0')
            begin
                select '-102'
                return
            end

    	end
				
        exec spProcessAssetTransferXml @xmlData, @FixedAssetId, @CurrentEquipmentStatus
        
        UPDATE FixedAssets
        SET
            CurrentItemQty = @Qty
            , EquipmentStatus = @EquipmentStatus
            , LastStatusChangeDate = @DateofTransaction
			, ParentNumber = @ParentAsset
			, ParentFixedAssetId = CASE WHEN @ParentAsset = @AssetNumber THEN NULL ELSE (SELECT Top 1 FixedAssetId FROM FixedAssets WHERE AssetNumber = @ParentAsset ) END
        WHERE FixedAssetId = @FixedAssetId
        
        if @DocumentType = 'IE'
        begin
            UPDATE FixedAssets
            SET RNItemNum = @RNItemNum
                , InventoryItemNum = CASE  
					WHEN @InventoryItemNum IS NULL THEN [InventoryItemNum]
					WHEN @InventoryItemNum = '0' THEN [InventoryItemNum] 
					ELSE @InventoryItemNum END
            WHERE FixedAssetId = @FixedAssetId
        end
        		
		-- Break Parent/Child Message
		if(@ProgramId = 'P5512002')
		BEGIN

			exec usp_UpdateTopLevelFixedAssetId @FixedAssetId

		END

    end

	insert into AesImport.dbo.SOAProcessedLog (TransactionId, TransactionName, DateAdded)
	values (@transactionId, @transactionName, GETDATE())

    select '0'
END
GO
/****** Object:  StoredProcedure [dbo].[spProcessAssetInformationXmlOld]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spProcessAssetInformationXmlOld] 
    @xmlData xml
AS
BEGIN
    SET NOCOUNT ON;
    
    declare @FixedAssetId uniqueidentifier
        , @CurrentEquipmentStatus varchar(2)
        , @transactionId int
        , @transactionName varchar(25)
        , @AssetNumber varchar(10)
        , @Company varchar(5)
        , @CurrentBranchPlant varchar(12)
        , @BranchPlant varchar(12)
        , @toBranchPlant varchar(12)
        , @AssetDescription1 varchar(30)
        , @AssetDescription2 varchar(30)
        , @AssetDescription3 varchar(30)
        , @ManufacturersSerialNo varchar(25)
        , @RBU varchar(12) -- business unit
        , @RNItemNum varchar(30)
        , @SerialNum varchar(30)
        , @Qty decimal(15,2)
        , @CurrencyCode varchar(3)
        , @Cost decimal(15,2)
        , @AccumDepreciation decimal(15,2)
        , @NetBookValue decimal(15,2)
        , @EquipmentStatus varchar(2) -- asset status
        , @ProductLineCode varchar(3)
        , @UnitNumber varchar(12)
        , @InventoryItemNum varchar(8)
        , @LegacySerialNumber varchar(25)  -- legacy part number
        , @AFENumber varchar(12)
        , @State varchar(3)
        , @ContractAccount varchar(25)
        , @Ownership varchar(3)
        , @DateAcquired datetime
        , @LifeMonths numeric(4)
        , @StartDepreciation_Date datetime
        , @NewUsed char(1)
        , @Manufacturer varchar(3)
        , @PanelCodeVersion varchar(25)
    --  , @AssetAdditionDate
    --  , @WhoAddedAsset
        , @Revision varchar(2)
        , @CatCode16 varchar(3)
    --  , @CatCode20
        , @ParentAsset varchar(10)
        , @DateDisposed datetime
        , @ModelYear varchar(3)
        , @DocumentType varchar(25)
        , @DocumentNumber int
        , @ReceivingLocation varchar(12)
        , @DateofTransaction datetime
		, @TimeOfTransaction varchar(6)
		, @ProgramId varchar(MAX)
    
    declare @InWO int
        , @InAIRT int
        , @InDispatch int
        , @ParentIsUR int

    ;WITH XMLNAMESPACES ('http://www.wft.com/AssetInformation/Outbound/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/AssetInformation/Outbound/v1.0')        
    SELECT
        @transactionName= ltrim(rtrim(T.c.value('(TransactionName/text())[1]', 'varchar(25)'))),
        @transactionId= ltrim(rtrim(T.c.value('(TransactionId/text())[1]', 'int')))        
    FROM @xmlData.nodes('/AssetInformation/AssetInfoCollection/MessageHeader') AS T(c)

    ;WITH XMLNAMESPACES ('http://www.wft.com/AssetInformation/Outbound/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/AssetInformation/Outbound/v1.0')        
    SELECT
        @AssetNumber = ltrim(rtrim(T.c.value('(AssetNumber/text())[1]', 'varchar(10)')))
        , @SerialNum = ltrim(rtrim(T.c.value('(SerialNo/text())[1]', 'varchar(30)')))
        , @InventoryItemNum = ltrim(rtrim(T.c.value('(InventoryPartNumber/text())[1]', 'varchar(30)')))
    FROM @xmlData.nodes('/AssetInformation/AssetInfoCollection/MessageDetail') AS T(c)

    set @FixedAssetId = null
    select @FixedAssetId = FixedAssetId
        , @CurrentEquipmentStatus = EquipmentStatus 
        , @CurrentBranchPlant = BranchPlant
    from FixedAssets (NOLOCK) 
    where AssetNumber = @AssetNumber 
    
    if @FixedAssetId is null
    begin
		declare @faCount int
		
		set @faCount = 0
		select @faCount = count(1) 
		from FixedAssets (NOLOCK) 
		where InventoryItemNum = @InventoryItemNum and SerialNum = @SerialNum
		
		if @faCount = 1
		begin
			select @FixedAssetId = FixedAssetId
				, @CurrentEquipmentStatus = EquipmentStatus 
				, @CurrentBranchPlant = BranchPlant
			from FixedAssets (NOLOCK) 
			where InventoryItemNum = @InventoryItemNum 
				and SerialNum = @SerialNum 
				--and Source = 'JDEETL'
		end
		else if @faCount > 1
		begin
			insert into AesImport.dbo.AssetWarnings (FixedAssetId, WarningMsg, OldInventoryItemNum, OldSerialNum, DateAdded, IsProcessed)
			select FixedAssetId, 'Duplicate IN/SN (SOA)', InventoryItemNum, SerialNum, getdate(), 0
			from FixedAssets
			where InventoryItemNum = @InventoryItemNum 
				and SerialNum = @SerialNum 
				--and Source = 'JDEETL'

			select '-106'				--Multiple assets with same InventoryItemNum and SerialNum
			return		
		end
	end

    ;WITH XMLNAMESPACES ('http://www.wft.com/AssetInformation/Outbound/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/AssetInformation/Outbound/v1.0')
    SELECT
        @Company = ltrim(rtrim(T.c.value('(Company/text())[1]', 'varchar(5)')))
        , @BranchPlant = ltrim(rtrim(T.c.value('(BranchPlant/text())[1]', 'varchar(12)')))
        , @DocumentType = ltrim(rtrim(T.c.value('(DocumentType/text())[1]', 'varchar(25)')))
        , @DocumentNumber = ltrim(rtrim(T.c.value('(DocumentNumber/text())[1]', 'int')))
        , @AssetDescription1 = ltrim(rtrim(T.c.value('(AssetDescription1/text())[1]', 'varchar(30)')))
        , @AssetDescription2 = ltrim(rtrim(T.c.value('(AssetDescription2/text())[1]', 'varchar(30)')))
        , @AssetDescription3 = ltrim(rtrim(T.c.value('(AssetDescription3/text())[1]', 'varchar(30)')))
        , @ManufacturersSerialNo = ltrim(rtrim(T.c.value('(ManufacturersSerialNo/text())[1]', 'varchar(25)')))
        , @RBU = ltrim(rtrim(T.c.value('(RBU/text())[1]', 'varchar(12)'))) -- business unit
        , @RNItemNum = ltrim(rtrim(T.c.value('(ItemNo/text())[1]', 'varchar(30)')))
        , @SerialNum = ltrim(rtrim(T.c.value('(SerialNo/text())[1]', 'varchar(30)')))
        , @Qty = T.c.value('(Quantity/text())[1]', 'decimal(15,2)')
        , @CurrencyCode = ltrim(rtrim(T.c.value('(CurrencyCode/text())[1]', 'varchar(3)')))
        , @Cost = T.c.value('(Cost/text())[1]', 'decimal(15,2)')
        , @AccumDepreciation = T.c.value('(AccumulatedDepreciation/text())[1]', 'decimal(15,2)')
        , @NetBookValue = T.c.value('(NetBookValue/text())[1]', 'decimal(15,2)')
        , @EquipmentStatus = ltrim(rtrim(T.c.value('(AssetStatus/text())[1]', 'varchar(2)'))) -- asset status
        , @ProductLineCode = ltrim(rtrim(T.c.value('(ProductLineCode/text())[1]', 'varchar(3)')))
        , @UnitNumber = ltrim(rtrim(T.c.value('(UnitNumber/text())[1]', 'varchar(12)')))
        , @InventoryItemNum = ltrim(rtrim(T.c.value('(InventoryPartNumber/text())[1]', 'varchar(30)')))
        , @LegacySerialNumber = ltrim(rtrim(T.c.value('(LegacyPartNumber/text())[1]', 'varchar(25)')))  -- legacy part number
        , @AFENumber = ltrim(rtrim(T.c.value('(AFE/text())[1]', 'varchar(12)')))
        , @State = ltrim(rtrim(T.c.value('(State/text())[1]', 'varchar(3)')))
        , @ContractAccount = ltrim(rtrim(T.c.value('(ContractAccount/text())[1]', 'varchar(25)')))
        , @Ownership = ltrim(rtrim(T.c.value('(Ownership/text())[1]', 'varchar(3)')))
        , @DateAcquired = T.c.value('(DateAcquired/text())[1]', 'datetime')
        , @LifeMonths = T.c.value('(LifeMonthsonAARegister/text())[1]', 'numeric(4)')
        , @StartDepreciation_Date = T.c.value('(StartDeprDate/text())[1]', 'datetime')
        , @NewUsed = ltrim(rtrim(T.c.value('(NeworUsed/text())[1]', 'char(1)')))
        , @Manufacturer = ltrim(rtrim(T.c.value('(Manufacturer/text())[1]', 'varchar(10)')))
        , @PanelCodeVersion = ltrim(rtrim(T.c.value('(PanelCodeVersion/text())[1]', 'varchar(25)')))
        --, @AssetAdditionDate
        --, @WhoAddedAsset
        , @CatCode16 = ltrim(rtrim(T.c.value('(Cat_Code_16/text())[1]', 'varchar(3)')))
        , @Revision = ltrim(rtrim(T.c.value('(Revision/text())[1]', 'varchar(2)')))
        --, @CatCode20
        , @ParentAsset = ltrim(rtrim(T.c.value('(ParentAsset/text())[1]', 'varchar(10)')))
        , @DateDisposed = T.c.value('(DateDisposed/text())[1]', 'datetime')
        , @ModelYear = ltrim(rtrim(T.c.value('(ModelYear/text())[1]', 'varchar(3)')))
        , @ReceivingLocation = ltrim(rtrim(T.c.value('(ReceivingLocation/text())[1]', 'varchar(12)')))
        , @DateofTransaction =  ltrim(rtrim(T.c.value('(DateofTransaction/text())[1]', 'datetime'))) 
		, @TimeOfTransaction = RIGHT('000000' + ISNULL(ltrim(rtrim(T.c.value('(TimeofTransaction/text())[1]', 'varchar(6)'))),''),6)
		, @ProgramId = LTRIM(RTRIM(T.c.value('(ProgramId/text())[1]', 'varchar(MAX)')))
    FROM @xmlData.nodes('/AssetInformation/AssetInfoCollection/MessageDetail') AS T(c)
	

	SET @DateofTransaction = DATEADD(HOUR, CAST(LEFT(@TimeOfTransaction,2) AS INT), @DateofTransaction)
	SET @DateofTransaction = DATEADD(MINUTE, CAST(SUBSTRING(@TimeOfTransaction,3,2) AS INT), @DateofTransaction)
	SET @DateofTransaction = DATEADD(SECOND, CAST(RIGHT(@TimeOfTransaction,2) AS INT), @DateofTransaction)


	--if @CatCode16 = 'WLN'
	--begin
	--	select '-199'							-- Wireline; ignore.
	--	return
	--end
	
    if @transactionName = 'AssetAdd'
    begin           
		
		if @FixedAssetId is null
        begin
            set @FixedAssetId = NEWID()
            
            INSERT INTO FixedAssets (
              FixedAssetId
              ,AssetNumber
              ,Company
              ,BranchPlant
              --,FixedAssetBranchPlant
              ,AssetDescription
              ,ManufacturersSerialNumber
              ,BusinessUnit
              ,RNItemNum
              ,SerialNum
              ,CurrentItemQty
              ,CurrencyCode
              ,Cost
              ,AccumDepreciation
              ,NetBookValue
              ,EquipmentStatus
              ,ProductLineCode
              ,UnitNumber
              ,InventoryItemNum
              ,LegacySerialNumber
              ,AFENumber
              ,[State]
              ,ContractAccount
              ,[Ownership]
              ,DateAcquired
              ,LifeMonths
              ,StartDepreciation_Date
              ,NewUsed
              ,Manufacturer
              ,ModelYear
              ,ThirdItemNumber
              --,DateDisposed
              --,FiscalYear
              --,LedgerType
              ,Revision
              ,CatCode16
              ,ParentNumber
              ,LastStatusChangeDate
              ,Source
            )
            VALUES
            (
              @FixedAssetId
             , @AssetNumber
             , @Company
             , @BranchPlant
             , @AssetDescription1
             --, @AssetDescription2
             --, @AssetDescription3
             , @ManufacturersSerialNo
             , @RBU
             , @RNItemNum
             , @SerialNum
             , @Qty
             , @CurrencyCode
             , @Cost
             , @AccumDepreciation
             , @NetBookValue
             , @EquipmentStatus
             , @ProductLineCode
             , @UnitNumber
             , @InventoryItemNum
             , @LegacySerialNumber
             , @AFENumber
             , @State
             , @ContractAccount
             , @Ownership
             , @DateAcquired
             , @LifeMonths
             , @StartDepreciation_Date
             , @NewUsed
             , @Manufacturer
             , @ModelYear
             , @PanelCodeVersion
             --, @DateDisposed
            -- , @AssetAdditionDate
            -- , @WhoAddedAsset
             , @Revision
             , @CatCode16
            -- , @CatCode20
             , @ParentAsset
             , @DateofTransaction
             , 'JDESOA'
          )
        end
        else
        begin
            UPDATE FixedAssets
            SET
                 Company = @Company
                 , BranchPlant = @BranchPlant
                 , FixedAssetBranchPlant = @BranchPlant
                 , AssetDescription = @AssetDescription1
                 --, @AssetDescription2
                 --, @AssetDescription3
                 , ManufacturersSerialNumber = @ManufacturersSerialNo
                 , BusinessUnit = @RBU
                 , RNItemNum = @RNItemNum
                 , SerialNum = @SerialNum
                 , CurrentItemQty = @Qty
                 , CurrencyCode = @CurrencyCode
                 , Cost = @Cost
                 , AccumDepreciation = @AccumDepreciation
                 , NetBookValue = @NetBookValue
                 , EquipmentStatus = @EquipmentStatus
                 , ProductLineCode = @ProductLineCode
                 , UnitNumber = @UnitNumber
                 , InventoryItemNum = CASE  
					WHEN @InventoryItemNum IS NULL THEN [InventoryItemNum]
					WHEN @InventoryItemNum = '0' THEN [InventoryItemNum] 
					ELSE @InventoryItemNum END
                 , LegacySerialNumber = @LegacySerialNumber
                 , AFENumber = @AFENumber
                 , [State] = @State
                 , ContractAccount = @ContractAccount
                 , [Ownership] = @Ownership
                 , DateAcquired = @DateAcquired
                 , LifeMonths = @LifeMonths
                 , StartDepreciation_Date = @StartDepreciation_Date
                 , NewUsed = @NewUsed
                 , Manufacturer = @Manufacturer
                 , ThirdItemNumber = @PanelCodeVersion
                -- , @AssetAdditionDate
                -- , @WhoAddedAsset
                 , Revision = @Revision
                 , CatCode16 = @CatCode16
                -- , @CatCode20
                 , ParentNumber = @ParentAsset
                 --, DateDisposed = @DateDisposed
                 , ModelYear = @ModelYear
                 , LastStatusChangeDate = @DateofTransaction
            WHERE FixedAssetId = @FixedAssetId
        end
    end
    if @transactionName = 'AssetDisposition'
    begin               
        if @FixedAssetId is null
        begin
            select '-100'                       -- AssetNum is not found in FixedAssets table
            return                          
        end
        --else
        --begin
        --    --select @InWO=InWO, @InAIRT=InAIRT, @InDispatch=InDispatch, @ParentIsUR=ParentIsUR
        --    --from dbo.fnGetAssetInUse(@FixedAssetId)
            
        --    --if (@InWO = 1)
        --    --begin
        --    --  select '100'                        -- Asset is in WO, cannot be disposed
        --    --end
        --    --if (@InAIRT = 1)                      
        --    --begin
        --    --  select '101'                        -- Asset is in AIRT, cannot be disposed
        --    --end
        --    --if (@InDispatch = 1)
        --    --begin
        --    --  select '102'                        -- Asset is in Dispatch, cannot be disposed
        --    --end
        --end

        
        UPDATE FixedAssets
        SET --DocumentNumber, DocumentType, InvoiceNumber, WFTRouting, UserDisposed         
            EquipmentStatus = @EquipmentStatus
            , DateDisposed = @DateDisposed
            , ParentNumber = @ParentAsset
            , LastStatusChangeDate = @DateofTransaction
        WHERE FixedAssetId = @FixedAssetId
        
        exec spProcessAssetTransferXml @xmlData, @FixedAssetId, @CurrentEquipmentStatus

    end
            
    if @transactionName = 'AssetTransfer'
    begin
        if @FixedAssetId is null
        begin
            select '-100'                       -- AssetNum is not found in FixedAssets table
            return                      
        end

        select @toBranchPlant = CASE WHEN (@DocumentType = 'S5' or (@DocumentType = 'S9' or @DocumentType = 'WC')) THEN @CurrentBranchPlant
			WHEN (@DocumentType = 'IN' or @DocumentType = 'O9' or @DocumentType = 'OT') THEN @ReceivingLocation
            ELSE @BranchPlant END 

        UPDATE FixedAssets
        SET
            CurrentItemQty = ltrim(rtrim(@Qty))
            , EquipmentStatus = ltrim(rtrim(@EquipmentStatus))
            , [Ownership] = ltrim(rtrim(@Ownership))
            , LastStatusChangeDate = @DateofTransaction
            , BranchPlant = ltrim(rtrim(@toBranchPlant))
			, SerialNum = @SerialNum
        WHERE FixedAssetId = @FixedAssetId

            
        exec usp_TransferChildComponents @FixedAssetId, @toBranchPlant
        exec spProcessAssetTransferXml @xmlData, @FixedAssetId, @CurrentEquipmentStatus
    end

    if @transactionName = 'AssetStatusChange'
    begin
        if @FixedAssetId is null
        begin
            select '-100'                       -- AssetNum is not found in FixedAssets table
            return                          
        end

         if (@DocumentType = 'IE')
        begin

            if (@RNItemNum = '' or @RNItemNum = '0')
            begin
                select '-102'
                return
            end

    	end
				
        exec spProcessAssetTransferXml @xmlData, @FixedAssetId, @CurrentEquipmentStatus
        
        UPDATE FixedAssets
        SET
            CurrentItemQty = @Qty
            , EquipmentStatus = @EquipmentStatus
            , LastStatusChangeDate = @DateofTransaction
			, ParentNumber = @ParentAsset
			, ParentFixedAssetId = CASE WHEN @ParentAsset = @AssetNumber THEN NULL ELSE (SELECT Top 1 FixedAssetId FROM FixedAssets WHERE AssetNumber = @ParentAsset ) END
        WHERE FixedAssetId = @FixedAssetId
        
        if @DocumentType = 'IE'
        begin
            UPDATE FixedAssets
            SET RNItemNum = @RNItemNum
                , InventoryItemNum = CASE  
					WHEN @InventoryItemNum IS NULL THEN [InventoryItemNum]
					WHEN @InventoryItemNum = '0' THEN [InventoryItemNum] 
					ELSE @InventoryItemNum END
            WHERE FixedAssetId = @FixedAssetId
        end
        		
		-- Break Parent/Child Message
		if(@ProgramId = 'P5512002')
		BEGIN

			exec usp_UpdateTopLevelFixedAssetId @FixedAssetId

		END

    end

	insert into AesImport.dbo.SOAProcessedLog (TransactionId, TransactionName, DateAdded)
	values (@transactionId, @transactionName, GETDATE())

    select '0'
END
GO
/****** Object:  StoredProcedure [dbo].[spProcessAssetTransferXml]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spProcessAssetTransferXml]
	@xmlData xml,
	@fixedAssetId uniqueidentifier,
	@currentEquipmentStatus varchar(2)
AS
	declare @partTransferDtlId uniqueidentifier
	declare @transactionId int
	declare @AssetNumber varchar(10)
	declare @BranchPlant varchar(12)
	declare @DocumentType varchar(25)
	declare @DocumentNumber int
	declare @AddressNumber int
	declare @ItemNo varchar(30)
	declare @SerialNo varchar(30)
	declare @rnItemNum varchar(30)
	declare @Quantity decimal(15,2)
	declare @AssetStatus varchar(2)
	declare @DateShipConfirmed datetime
	declare @UserCreatedDocument varchar(25)
	declare @UserApprovedonRecvSide varchar(25)
	declare @DateApproved datetime
	declare @SendingLocation varchar(12)
	declare @ReceivingLocation varchar(12)
	declare @AssetTransferReqNo varchar(25)
	declare @DateofTransaction datetime
	DECLARE @TimeOfTransaction varchar(6)
	declare @OwnershipCode varchar(3)
	declare @Revision varchar(2)
	DECLARE @ParentAsset varchar(10)
	DECLARE @ProgramId varchar(MAX)

	;WITH XMLNAMESPACES ('http://www.wft.com/AssetInformation/Outbound/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/AssetInformation/Outbound/v1.0')
	SELECT
		@transactionId = ltrim(rtrim(T.c.value('(TransactionId/text())[1]', 'int')))
	FROM @xmlData.nodes('/AssetInformation/AssetInfoCollection/MessageHeader') AS T(c)

	;WITH XMLNAMESPACES ('http://www.wft.com/AssetInformation/Outbound/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/AssetInformation/Outbound/v1.0')
	SELECT
		@AssetNumber = ltrim(rtrim(T.c.value('(AssetNumber/text())[1]', 'varchar(10)'))),
		@BranchPlant = T.c.value('(BranchPlant/text())[1]', 'varchar(12)'),
		@DocumentType = ltrim(rtrim(T.c.value('(DocumentType/text())[1]', 'varchar(25)'))),
		@DocumentNumber = ltrim(rtrim(T.c.value('(DocumentNumber/text())[1]', 'int'))),
		@AddressNumber = ltrim(rtrim(T.c.value('(AddressNumber/text())[1]', 'int'))),
		--@ItemNo = ltrim(rtrim(T.c.value('(ItemNo/text())[1]', 'varchar(30)'))),
		--@SerialNo = ltrim(rtrim(T.c.value('(SerialNo/text())[1]', 'varchar(30)'))),
		@Quantity = ltrim(rtrim(T.c.value('(Quantity/text())[1]', 'decimal(15,2)'))),
		@AssetStatus = ltrim(rtrim(T.c.value('(AssetStatus/text())[1]', 'varchar(2)'))),
		@DateShipConfirmed = ltrim(rtrim(T.c.value('(DateShipConfirmed/text())[1]', 'datetime'))),
		@UserCreatedDocument = ltrim(rtrim(T.c.value('(UserCreatedDocument/text())[1]', 'varchar(25)'))),
		@UserApprovedonRecvSide = ltrim(rtrim(T.c.value('(UserApprovedonRecvSide/text())[1]', 'varchar(25)'))),
		@DateApproved = ltrim(rtrim(T.c.value('(DateApproved/text())[1]', 'datetime'))),
		@SendingLocation = ltrim(rtrim(T.c.value('(SendingLocation/text())[1]', 'varchar(12)'))),
		@ReceivingLocation = ltrim(rtrim(T.c.value('(ReceivingLocation/text())[1]', 'varchar(12)'))),
		@AssetTransferReqNo = ltrim(rtrim(T.c.value('(AssetTransferReqNo/text())[1]', 'varchar(25)'))),
		@DateofTransaction = ltrim(rtrim(T.c.value('(DateofTransaction/text())[1]', 'datetime'))),
		@TimeOfTransaction = RIGHT('000000' + ISNULL(ltrim(rtrim(T.c.value('(TimeofTransaction/text())[1]', 'varchar(6)'))),''),6),
		@OwnershipCode = ltrim(rtrim(T.c.value('(Ownership/text())[1]', 'varchar(3)'))),
	    @Revision = ltrim(rtrim(T.c.value('(Revision/text())[1]', 'varchar(2)'))),
		@ParentAsset = LTRIM(RTRIM(T.c.value('(ParentAsset/text())[1]', 'varchar(10)'))),
		@ProgramId = LTRIM(RTRIM(T.c.value('(ProgramId/text())[1]', 'varchar(MAX)')))
	FROM @xmlData.nodes('/AssetInformation/AssetInfoCollection/MessageDetail') AS T(c)

	SET @DateofTransaction = DATEADD(HOUR, CAST(LEFT(@TimeOfTransaction,2) AS INT), @DateofTransaction)
	SET @DateofTransaction = DATEADD(MINUTE, CAST(SUBSTRING(@TimeOfTransaction,3,2) AS INT), @DateofTransaction)
	SET @DateofTransaction = DATEADD(SECOND, CAST(RIGHT(@TimeOfTransaction,2) AS INT), @DateofTransaction)
	SET @Quantity = FLOOR(@Quantity)

	SET @partTransferDtlId = null
	SELECT @partTransferDtlId = PartTransferDtlId
	FROM PartTransferDtl (NOLOCK)
	WHERE JDETransactionId = @transactionId AND AssetNumber = @AssetNumber
	
	if @partTransferDtlId is null
	begin
	
		SELECT @ItemNo = InventoryItemNum
		, @SerialNo = SerialNum 
		, @rnItemNum = RNItemNum
		from FixedAssets (NOLOCK)
		where FixedAssetId = @fixedAssetId
		
		SET @partTransferDtlId = NEWID()
		
		-- Parent/Child Break
		if(@ProgramId = 'P5512002')
		BEGIN
		
			SET @DocumentType = CASE WHEN ISNULL(@DocumentType,'') = '' THEN 'PC' ELSE @DocumentType END
		END


		INSERT INTO PartTransferDtl (
			PartTransferDtlId,
			JDETransactionId,
			FixedAssetId,
			AssetNumber,
			DocumentType,
			DocumentNumber,
			AddressNumber,
			InventoryItemNum,
			RNItemNum,
			SerialNum,
			Quantity,
			AssetStatus,
			DateShipConfirmed,
			UserCreatedDocument,
			UserApprovedonRecvSide,
			DateApproved,
			SendingLocation,
			ReceivingLocation,
			AssetTransferReqNo,
			DateofTransaction,
			OwnershipCode,
			Source,
			Dest,
			DateAdded,
			ParentNumber)
		VALUES (
			@partTransferDtlId,
			@transactionId,
			@fixedAssetId,
			@AssetNumber,
			@DocumentType,
			@DocumentNumber,
			@AddressNumber,
			@ItemNo,
			@rnItemNum,
			@SerialNo,
			@Quantity,
			@AssetStatus,
			@DateShipConfirmed,
			@UserCreatedDocument,
			@UserApprovedonRecvSide,
			@DateApproved,
			@SendingLocation,
			@ReceivingLocation,
			@AssetTransferReqNo,
			@DateofTransaction,
			@OwnershipCode,
			@CurrentEquipmentStatus,
			@AssetStatus,
			GETDATE(),
			-- Save Current Parent Before Override
			CASE WHEN (@AssetNumber = @ParentAsset) 
					THEN (SELECT ParentNumber FROM FixedAssets (NOLOCK) WHERE AssetNumber = @AssetNumber) 
					ELSE @ParentAsset END
			)
	end
GO
/****** Object:  StoredProcedure [dbo].[spSaveCustomsInvoiceDetails]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveCustomsInvoiceDetails](
	@xmlData xml
	)
AS
/*
[spSaveCustomsInvoiceDetails] '<Filters><CustomsInvoiceId>03097914-beef-49d6-94fb-1d41361b87db</CustomsInvoiceId><AuditUserName>mdonaho</AuditUserName><CustomsInvoiceDetailCollection><CustomsInvoiceDetail><CustomsInvoiceDetailId>00000000-0000-0000-0000-000000000000</CustomsInvoiceDetailId><LineNumber>1</LineNumber><Description>475 COLLAR IDS W/INT STAB 6"</Description><SerialNumber>5708</SerialNumber><PartNumber>005520-AB</PartNumber><NewUsed>Used</NewUsed><IsHeader>False</IsHeader><UnitCost>16028</UnitCost><CountryOfOrigin>*</CountryOfOrigin><DisplayOrder>1</DisplayOrder><AssetId>108f35fe-c73d-40ec-a9ad-6a61274435b9</AssetId><TransferComplete>False</TransferComplete><IsDeliveryNoteStart>False</IsDeliveryNoteStart><IsDeliveryNoteEnd>False</IsDeliveryNoteEnd><PrevPartStatusId>10</PrevPartStatusId><ICBNumber>False</ICBNumber><JDENumber>False</JDENumber><ShipmentType>Redeployment</ShipmentType></CustomsInvoiceDetail><CustomsInvoiceDetail><CustomsInvoiceDetailId>00000000-0000-0000-0000-000000000000</CustomsInvoiceDetailId><Description>Assembly, 4-3/4" Pulser</Description><SerialNumber>33089</SerialNumber><PartNumber>L-AH-000083</PartNumber><NewUsed>Used</NewUsed><IsHeader>False</IsHeader><UnitCost>30721.58</UnitCost><CountryOfOrigin>*</CountryOfOrigin><DisplayOrder>2</DisplayOrder><AssetId>58bf5f88-bc4a-4694-ad80-0008e55716ff</AssetId><TransferComplete>False</TransferComplete><IsDeliveryNoteStart>False</IsDeliveryNoteStart><IsDeliveryNoteEnd>False</IsDeliveryNoteEnd><TarriffCode>9015.90.0060</TarriffCode><ECCNNumber>EAR99</ECCNNumber><PrevPartStatusId>10</PrevPartStatusId><ParentCustomsInvoiceDetailId>108f35fe-c73d-40ec-a9ad-6a61274435b9</ParentCustomsInvoiceDetailId><ICBNumber>False</ICBNumber><JDENumber>False</JDENumber><ShipmentType>Redeployment</ShipmentType></CustomsInvoiceDetail></CustomsInvoiceDetailCollection></Filters>'
*/
declare @userName varchar(1024)
declare @userId int
declare @customsInvoiceId uniqueidentifier


select 
@userName = T.c.value('(AuditUserName/text())[1]','varchar(1024)'),
@customsInvoiceId = T.c.value('(CustomsInvoiceId/text())[1]','uniqueidentifier')
from
@xmlData.nodes('/Filters') T(c)

select @userId = UserId from Users (NOLOCK) where UserName = @userName

select T.c.value('.', 'uniqueidentifier') as CustomsInvoiceDetailId
into #DeletedIds
from 
@xmlData.nodes('/Filters/DeletedIds/Id') T(c)

Delete From CustomsInvoiceDetails where CustomsInvoiceDetailId in (
	select CustomsInvoiceDetailId from #DeletedIds
)

Update ShipmentFormDetailAssets set customsinvoicedetailid = null where customsinvoicedetailid in (
	select CustomsInvoiceDetailId from #DeletedIds
)

SELECT 
T.c.value('(CustomsInvoiceDetailId/text())[1]', 'uniqueidentifier') as CustomsInvoiceDetailId,
@customsInvoiceId as CustomsInvoiceId,
T.c.value('(LineNumber/text())[1]', 'int') as LineNumber,
T.c.value('(Quantity/text())[1]', 'int') as Quantity,
T.c.value('(Description/text())[1]', 'varchar(255)') as Description,
T.c.value('(SerialNumber/text())[1]', 'varchar(255)') as SerialNumber,
T.c.value('(PartNumber/text())[1]', 'varchar(50)') as PartNumber,
T.c.value('(NewUsed/text())[1]', 'varchar(50)') as NewUsed,
T.c.value('(Consumable/text())[1]', 'varchar(50)') as Consumable,
T.c.value('(IsHeader/text())[1]', 'bit') as IsHeader,
T.c.value('(UnitCost/text())[1]', 'money') as UnitCost,
T.c.value('(TotalCost/text())[1]', 'money') as TotalCost,
T.c.value('(NetWeight/text())[1]', 'varchar(18)') as NetWeight,
T.c.value('(GrossWeight/text())[1]', 'varchar(18)') as GrossWeight,
T.c.value('(CountryOfOrigin/text())[1]', 'varchar(18)') as CountryOfOrigin,
T.c.value('(DisplayOrder/text())[1]', 'varchar(18)') as DisplayOrder,
T.c.value('(Size/text())[1]', 'int') as Size,
T.c.value('(Condition/text())[1]', 'varchar(1)') as Condition,
T.c.value('(Markup/text())[1]', 'decimal(18, 4)') as Markup,
T.c.value('(Asset/text())[1]', 'varchar(50)') as Asset,
T.c.value('(AssetId/text())[1]', 'uniqueidentifier') as AssetId,
T.c.value('(PartTransferId/text())[1]', 'int') as PartTransferId,
T.c.value('(TransferComplete/text())[1]', 'bit') as TransferComplete,
T.c.value('(TERNumber/text())[1]', 'varchar(64)') as TERNumber,
T.c.value('(DeliveryNoteNumber/text())[1]', 'varchar(64)') as DeliveryNoteNumber,
T.c.value('(IsDeliveryNoteStart/text())[1]', 'bit') as IsDeliveryNoteStart,
T.c.value('(IsDeliveryNoteEnd/text())[1]', 'bit') as IsDeliveryNoteEnd,
T.c.value('(TarriffCode/text())[1]', 'varchar(50)') as TarriffCode,
T.c.value('(ECCNNumber/text())[1]', 'varchar(50)') as ECCNNumber,
T.c.value('(ScheduleB/text())[1]', 'varchar(50)') as ScheduleB,
T.c.value('(CustomsStatus/text())[1]', 'varchar(50)') as CustomsStatus,
T.c.value('(ToolCode/text())[1]', 'varchar(40)') as ToolCode,
T.c.value('(Manufacturer/text())[1]', 'varchar(100)') as Manufacturer,
T.c.value('(PrevPartStatusId/text())[1]', 'int') as PrevPartStatusId,
T.c.value('(ParentCustomsInvoiceDetailId/text())[1]', 'uniqueidentifier') as ParentCustomsInvoiceDetailId,
T.c.value('(ICBNumber/text())[1]', 'bit') as ICBNumber,
T.c.value('(JDENumber/text())[1]', 'bit') as JDENumber,
T.c.value('(ShipmentType/text())[1]', 'varchar(20)') as ShipmentType,
T.c.value('(AIRT_Number/text())[1]', 'varchar(20)') as AIRT_Number,
T.c.value('(JDEItemNumber/text())[1]', 'varchar(100)') as JDEItemNumber
into #LineItem
FROM @xmlData.nodes('/Filters/CustomsInvoiceDetailCollection/CustomsInvoiceDetail') T(c)

Update CustomsInvoiceDetails 
Set 
LineNumber = a.LineNumber,
Quantity = a.Quantity,
Description = a.Description,
SerialNumber = a.SerialNumber,
PartNumber = a.PartNumber,
NewUsed = a.NewUsed,
Consumable = a.Consumable,
IsHeader = a.IsHeader,
UnitCost = a.UnitCost,
TotalCost = a.TotalCost,
NetWeight = a.NetWeight,
GrossWeight = a.GrossWeight,
CountryOfOrigin = a.CountryOfOrigin,
DisplayOrder = a.DisplayOrder,
Size = a.Size,
Condition = a.Condition,
Markup = a.Markup,
Asset = a.Asset,
AssetId = a.AssetId,
PartTransferId = a.PartTransferId,
TransferComplete = a.TransferComplete,
TERNumber = a.TERNumber,
DeliveryNoteNumber = a.DeliveryNoteNumber,
IsDeliveryNoteStart = a.IsDeliveryNoteStart,
IsDeliveryNoteEnd = a.IsDeliveryNoteEnd,
TarriffCode = a.TarriffCode,
ECCNNumber = a.ECCNNumber,
ScheduleB = a.ScheduleB,
CustomsStatus = a.CustomsStatus,
ToolCode = a.ToolCode,
Manufacturer = a.Manufacturer,
PrevPartStatusId = a.PrevPartStatusId,
ParentCustomsInvoiceDetailId = a.ParentCustomsInvoiceDetailId,
ICBNumber = a.ICBNumber,
JDENumber = a.JDENumber,
ShipmentType = a.ShipmentType,
AIRT_Number = a.AIRT_Number,
JDEItemNumber = a.JDEItemNumber
from #LineItem a
where a.CustomsInvoiceDetailId = CustomsInvoiceDetails.CustomsInvoiceDetailId
and a.CustomsInvoiceDetailId <> '00000000-0000-0000-0000-000000000000'
and CustomsInvoiceDetails.CustomsInvoiceId = @customsInvoiceId

Insert into CustomsInvoiceDetails(
	 [CustomsInvoiceDetailId]
      ,[CustomsInvoiceId]
      ,[LineNumber]
      ,[Quantity]
      ,[Description]
      ,[SerialNumber]
      ,[PartNumber]
      ,[NewUsed]
      ,[Consumable]
      ,[IsHeader]
      ,[UnitCost]
      ,[TotalCost]
      ,[NetWeight]
      ,[GrossWeight]
      ,[CountryOfOrigin]
      ,[DisplayOrder]
      ,[Size]
      ,[Condition]
      ,[Markup]
      ,[Asset]
      ,[AssetId]
      ,[PartTransferId]
      ,[TransferComplete]
      ,[TERNumber]
      ,[DeliveryNoteNumber]
      ,[IsDeliveryNoteStart]
      ,[IsDeliveryNoteEnd]
      ,[TarriffCode]
      ,[ECCNNumber]
      ,[ScheduleB]
      ,[CustomsStatus]
      ,[ToolCode]
      ,[Manufacturer]
      ,[PrevPartStatusId]
      ,[ParentCustomsInvoiceDetailId]
      ,[ICBNumber]
      ,[JDENumber]
      ,[ShipmentType]
      ,[AIRT_Number]
      ,[JDEItemNumber])
select NEWID()
      ,[CustomsInvoiceId]
      ,[LineNumber]
      ,[Quantity]
      ,[Description]
      ,[SerialNumber]
      ,[PartNumber]
      ,[NewUsed]
      ,[Consumable]
      ,[IsHeader]
      ,[UnitCost]
      ,[TotalCost]
      ,[NetWeight]
      ,[GrossWeight]
      ,[CountryOfOrigin]
      ,[DisplayOrder]
      ,[Size]
      ,[Condition]
      ,[Markup]
      ,[Asset]
      ,[AssetId]
      ,[PartTransferId]
      ,[TransferComplete]
      ,[TERNumber]
      ,[DeliveryNoteNumber]
      ,[IsDeliveryNoteStart]
      ,[IsDeliveryNoteEnd]
      ,[TarriffCode]
      ,[ECCNNumber]
      ,[ScheduleB]
      ,[CustomsStatus]
      ,[ToolCode]
      ,[Manufacturer]
      ,[PrevPartStatusId]
      ,[ParentCustomsInvoiceDetailId]
      ,[ICBNumber]
      ,[JDENumber]
      ,[ShipmentType]
      ,[AIRT_Number]
      ,[JDEItemNumber]
      from #LineItem where CustomsInvoiceDetailId = '00000000-0000-0000-0000-000000000000'

      Update CustomsInvoiceDetails set ToolCode = ci.ToolCode
      from (
      Select a.CustomsInvoiceDetailId, pn.ToolCode
      from CustomsInvoiceDetails (NOLOCK) a
      join FixedAssets (NOLOCK) p on p.FixedAssetId = a.AssetId
      join ItemNums (NOLOCK) pn on pn.ItemNum = p.InventoryItemNum
      where a.CustomsInvoiceId = @customsInvoiceId
      ) ci where ci.CustomsInvoiceDetailId = CustomsInvoiceDetails.CustomsInvoiceDetailId

      Update CustomsInvoiceDetails set TotalCost = Round((UnitCost * (case when markup is null then 1 else (Markup/100) end) * Quantity),2)
      where CustomsInvoiceId = @customsInvoiceId
      and Quantity is not null and unitcost is not null
      
      Update CustomsInvoices set TotalValue = ci.Total, 
      CIFValue = ci.Total +  ISNULL(FreightValue,0) + ISNULL(ExportPrep,0) + ISNULL(SeaFreightValue,0) + ISNULL(InsuranceValue,0) + ISNULL(AirfreightValue,0),
      CratingPackingValue = TotalRepair
      from (
      Select CustomsInvoiceId, sum(TotalCost) as Total,
      sum(case when ShipmentType = 'Repair' then TotalCost else 0 end) as TotalRepair
      from CustomsInvoiceDetails (NOLOCK) a
      where a.CustomsInvoiceId = @customsInvoiceId
      and TotalCost is not null
      group by CustomsInvoiceId
      ) ci where ci.CustomsInvoiceId = CustomsInvoices.CustomsInvoiceId

      
    /*
	  if (select COUNT(*) from CustomsInvoiceDetail where ToolCode in ('NTS','DNS','GCAL','NV','CO-57','AMCAL','CF252')) = 0
	  begin
                
                Delete from RadioactiveMaterialDetail Where RAMId IN (Select RAMId from RadioactiveMaterial Where CustomsInvoiceId = @customsInvoiceId)
                
                Delete From RadioactiveMaterial Where CustomsInvoiceId=@customsInvoiceId
                
                Delete From RAMTravelLog Where CustomsInvoiceId=@customsInvoiceId
	  end
    */
	

	create table #TempUpdateTable
	(
		CustomsInvoiceId uniqueidentifier,
		CustomsInvoiceDetailId uniqueidentifier,
		TerNumber varchar(64),
		DeliveryNoteNumber varchar(128),
		DisplayOrder int,
		EndDisplayOrder int
	)

		-- Insert statements for procedure here
	Insert into #TempUpdateTable(CustomsInvoiceId, CustomsInvoiceDetailId, TerNumber,
	 DeliveryNoteNumber, DisplayOrder, EndDisplayOrder)
	select CustomsInvoiceId, CustomsInvoiceDetailId, TerNumber, DeliveryNoteNumber, DisplayOrder,
	(Select MIN(DisplayOrder) from CustomsInvoiceDetails (NOLOCK) c where c.CustomsInvoiceId = @customsInvoiceId and
	c.CustomsInvoiceId = CustomsInvoiceDetails.CustomsInvoiceId 
	and c.IsDeliveryNoteStart = 1 and c.DisplayOrder > CustomsInvoiceDetails.DisplayOrder)
	from CustomsInvoiceDetails (NOLOCK) 
	where  IsDeliveryNoteStart = 1
	and (TerNumber is not null OR DeliveryNoteNumber is not null)
	and CustomsInvoiceId = @customsInvoiceId
	order by CustomsInvoiceId, DisplayOrder

	Update #TempUpdateTable set EndDisplayOrder = 1000000 where EndDisplayORder is null

	Update CustomsInvoiceDetails set TERNumber = a.TerNumber, DeliveryNoteNumber = a.DeliveryNoteNumber
	from (
	select b.CustomsInvoiceDetailId, a.TerNumber, a.DeliveryNoteNumber from 
	#TempUpdateTable a
	join CustomsInvoiceDetails (NOLOCK) b on b.CustomsInvoiceId = a.CustomsInvoiceId 
	and b.DisplayOrder > a.DisplayOrder 
	and b.DisplayOrder < a.EndDisplayOrder
	and b.IsHeader = 0
	) a
	where a.CustomsInvoiceDetailId = CustomsInvoiceDetails.CustomsInvoiceDetailId and
	CustomsInvoiceDetails.CustomsInvoiceId = @customsInvoiceId

	drop table #TempUpdateTable
      
    --exec spAuditCustomsInvoice @customsInvoiceId, @userId




/****** Object:  StoredProcedure [dbo].[spSaveInventoryAsset]    Script Date: 08/05/2014 18:17:35 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[spSaveInventoryAsset]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveInventoryAsset]
	@xmlData xml
AS

	SET NOCOUNT ON
	
	DECLARE @fixedAssetId uniqueidentifier
	DECLARE @IsBatch BIT
	
	DECLARE @assetNumber varchar(30)
	DECLARE @equipmentStatus varchar(2)
	DECLARE @inventoryItemNum varchar(30)
	DECLARE @rnItemNum varchar(30)
	DECLARE @serialNum varchar(50)
	DECLARE @branchPlant varchar(12)
	DECLARE @revision varchar(2)
	DECLARE @CurrentItemQuantity decimal(15, 2)
		
	SET @fixedAssetId = NEWID()
		
	SELECT 
		@assetNumber = T.c.value('(AssetNumber/text())[1]', 'VARCHAR(30)')
		, @equipmentStatus = T.c.value('(EquipmentStatus/text())[1]', 'VARCHAR(2)')
		, @inventoryItemNum = T.c.value('(ItemNum/text())[1]', 'VARCHAR(30)')
		, @rnItemNum = T.c.value('(RNItemNum/text())[1]', 'VARCHAR(30)')
		, @serialNum = T.c.value('(SerialNum/text())[1]', 'VARCHAR(50)')
		, @branchPlant = T.c.value('(BranchPlant/text())[1]', 'VARCHAR(12)')
		, @revision = T.c.value('(LotGrade/text())[1]', 'VARCHAR(2)')
		, @CurrentItemQuantity = T.c.value('(CurrentItemQuantity/text())[1]', 'DECIMAL(15,2)')
	FROM @xmlData.nodes('/Filters') AS T(c)
	
	-- Set Status to 'AV' in case of Batch
	Set @IsBatch = (Select IsBatch from vwItemNums (NOLOCK) Where ItemNum = @inventoryItemNum)
	IF(ISNULL(@IsBatch, 0) = 1 OR ISNULL(@equipmentStatus, '') = '')
	BEGIN
		Set @equipmentStatus = 'AV'
	END
	
	IF(ISNULL(@IsBatch, 0) = 0 AND ISNULL(@CurrentItemQuantity, 0) = 0)
	BEGIN
		Set @CurrentItemQuantity = 1
	END

	INSERT INTO FixedAssets (
		FixedAssetId
		, AssetNumber
		, EquipmentStatus
		, LastStatusChangeDate
		, InventoryItemNum
		, RNItemNum
		, SerialNum
		, BranchPlant
		, Revision
		, CurrentItemQty
	)
	VALUES (
		@fixedAssetId
		, @assetNumber
		, @equipmentStatus
		, GETDATE()
		, @inventoryItemNum
		, @rnItemNum
		, @serialNum
		, @branchPlant
		, @revision
		, @CurrentItemQuantity
	)
	
	SELECT @fixedAssetId AS FixedAssetId
	
	SET NOCOUNT OFF
	
------------



/****** Object:  StoredProcedure [dbo].[spSaveUserSessionLog]    Script Date: 08/05/2014 18:18:32 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[spSaveUserSessionLog]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveUserSessionLog] (
	@UserSessionLogIdOut uniqueidentifier output,
	@UserSessionLogId uniqueidentifier output,
	@SessionId varchar(50),
	@LastAccessedDate datetime,
	@UserId int)
AS
if @UserSessionLogId is not null
begin
	if not exists (SELECT UserSessionLogId FROM UserSessionLog (NOLOCK) WHERE UserSessionLogId = @UserSessionLogId)
	begin
		SET @UserSessionLogId = NULL
	end
end

if @UserSessionLogId is NULL
begin

	SET @UserSessionLogId = newid()

	INSERT INTO [UserSessionLog]
			   ([UserSessionLogId]
			   ,[SessionId]
			   ,[LoginDate]
			   ,[LastAccessedDate]
			   ,[UserId])
		 VALUES
			   (@UserSessionLogId
			   ,@SessionId
			   ,getdate()
			   ,@LastAccessedDate
			   ,@UserId)
END
ELSE
BEGIN

	UPDATE [UserSessionLog]
	   SET [SessionId] = @SessionId
		  ,[LastAccessedDate] = @LastAccessedDate
		  ,[UserId] = @UserId
	 WHERE [UserSessionLogId] = @UserSessionLogId
	 
END

	SET @UserSessionLogIdOut = @UserSessionLogId




/****** Object:  StoredProcedure [dbo].[usp_AIRT_RMAnalysisFailureCodeSave]    Script Date: 08/05/2014 18:19:22 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_AddChildAsset]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--========================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 4th Feb 2016
--DESCRIPTION: To add child assets 
--=========================================================
CREATE PROC [dbo].[usp_AddChildAsset]
	@ParentAssetNum VARCHAR(50),
	@ChildAssetNum VARCHAR(50),
	@UserId VARCHAR(10)
AS
BEGIN
	DECLARE @ChildFixedAssetId UNIQUEIDENTIFIER;
	DECLARE @ChildStatus VARCHAR(10);
	DECLARE @ChildBranchPlant VARCHAR(25);
	DECLARE @ChildFixedAstBranchPlant VARCHAR(25);
	DECLARE @ParentSerialNum VARCHAR(50);
	DECLARE @ParentItemNum VARCHAR(50);
	DECLARE @ParentFixedAssetId UNIQUEIDENTIFIER;
	DECLARE @ParentStatus VARCHAR(10);
	DECLARE @ParentBranchPlant VARCHAR(25);
	DECLARE @ParentFixedAstBranchPlant VARCHAR(25);
	DECLARE @AuditActionId INT;
	DECLARE @ChildParentFixedAssetId UNIQUEIDENTIFIER;
	DECLARE @ChildSerialNum VARCHAR(50), 
			@ChildInvItemNum VARCHAR(50);


	SELECT	@ChildAssetNum = [AssetNumber], 
			@ChildSerialNum = SerialNum, 
			@ChildInvItemNum = InventoryItemNum,
			@ChildFixedAssetId = [FixedAssetId], 
			@ChildStatus = [EquipmentStatus], 
			@ChildBranchPlant = [BranchPlant], 
			@ChildFixedAstBranchPlant = [FixedAssetBranchPlant], 
			@ChildParentFixedAssetId = [ParentFixedAssetId]
	FROM	[FixedAssets](NOLOCK)
	WHERE	LTRIM(RTRIM(AssetNumber)) = @ChildAssetNum

	SELECT	@ParentAssetNum = [AssetNumber], 
			@ParentSerialNum = SerialNum, 
			@ParentItemNum = InventoryItemNum,
			@ParentFixedAssetId = [FixedAssetId], 
			@ParentStatus = [EquipmentStatus], 
			@ParentBranchPlant = [BranchPlant], 
			@ParentFixedAstBranchPlant = [FixedAssetBranchPlant]
	FROM	[FixedAssets](NOLOCK)
	WHERE	LTRIM(RTRIM(AssetNumber)) = @ParentAssetNum

	BEGIN TRY
	BEGIN TRAN

		--Create Part Transfer Record
		INSERT INTO PartTransferDtl (
					PartTransferDtlId,
					JDETransactionId,
					FixedAssetId,
					AssetNumber,
					DocumentType,
					DocumentNumber,
					AddressNumber,
					InventoryItemNum,
					RNItemNum,
					SerialNum,
					Quantity,
					AssetStatus,
					DateShipConfirmed,
					UserCreatedDocument,
					UserApprovedonRecvSide,
					DateApproved,
					SendingLocation,
					ReceivingLocation,
					AssetTransferReqNo,
					DateofTransaction,
					OwnershipCode,
					Source,
					Dest,
					DateAdded,
					ParentNumber)
				SELECT 
					NEWID(),
					NULL,
					@ChildFixedAssetId,
					AssetNumber,
					'MAPC',
					NULL,
					NULL,
					InventoryItemNum,
					RNItemNum,
					SerialNum,
					0,
					EquipmentStatus,
					NULL,
					@UserId,
					NULL,
					NULL,
					BranchPlant,
					0,
					NULL,
					GETDATE(),
					NULL,
					EquipmentStatus,
					'IN',
					GETDATE(),
					@ParentAssetNum
				FROM FixedAssets
				WHERE FixedAssetId = @ChildFixedAssetId

		UPDATE	[FixedAssets]
		SET		[ParentFixedAssetId] = @ParentFixedAssetId,
				[ParentNumber] = @ParentAssetNum,
				[EquipmentStatus] = 'IN',
				LastStatusChangeDate=GETDATE()
		WHERE	[FixedAssetId]	= @ChildFixedAssetId


		exec usp_UpdateTopLevelFixedAssetId @ChildFixedAssetId

		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		DECLARE @ErrorMessage VARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[usp_AddException]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_AddException]
	@ErrorDate datetime
	,@ErrorMessage nvarchar(MAX)
	,@Exception text
	,@UserName nvarchar(256)
	,@ApplicationName nvarchar(256)
	,@URI varchar(4096)
AS
	INSERT INTO [ErrorLog] 
	(
		 ErrorDate
		,ErrorMessage
		,Exception
		,UserName
		,ApplicationName
		,URI
    )
	VALUES 
	(
		 @ErrorDate
		,@ErrorMessage
		,@Exception
		,@UserName
		,@ApplicationName
		,@URI
	)
Return @@Identity
GO
/****** Object:  StoredProcedure [dbo].[usp_AIRT_GetJobHistory]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================

-- Author:		Yogesh Mane

-- Create date: 7/18/2022

-- Description:	Get Job Information

--Modified By : Umesh Mhaske

-- =============================================
Create PROCEDURE [dbo].[usp_AIRT_GetJobHistory]
 @FixAssetId uniqueidentifier,
 @AssetRepairTrackId uniqueidentifier
/****The purpose of this query is to determine the Delivery Ticket history of an asset****/
/****We will determine a date shipped, determine the next time it is shipped, and then determine the latest return date in between those 2 dates****/
AS
BEGIN
DECLARE  @AirtDate datetime
CREATE TABLE #TempDT  (   
       Id int identity(1,1),
       DispatchNumber int,
       AssetNumber VARCHAR(15),
       SerialNum varchar(50),    
       ItemNum varchar(30),
       RNItemNum varchar(30),    
       DateShipped DateTime,     
       DateShippedNext DateTime, 
       DateReturned DateTime     
)     



 /**** First Ship date****/

INSERT INTO #TempDT 
SELECT *
FROM (
       SELECT DISTINCT d.DispatchNumber, dii.AssetNumber, dii.SerialNum, dii.ItemNum, dii.RNItemNum,
       di.DateShipped, null [DateShippedNext], NULL [DateReturned]
    FROM DispatchInstanceItems dii (NOLOCK)  
    INNER JOIN DispatchInstances di (NOLOCK) on di.dispatchinstanceid = dii.DispatchInstanceId    
    INNER JOIN Dispatches d (NOLOCK) on d.DispatchId = di.DispatchId    
    INNER JOIN fixedassets f (nolock) on f.SerialNum = dii.SerialNum and f.RNItemNum = dii.ItemNum
     WHERE di.ShipType = 'DT-SEQ-ADD'  AND ISNULL(dii.ErrorMessage,'') = '' AND f.fixedassetid = @FixAssetId 
) A
ORDER BY DispatchNumber, a.SerialNum, DateShipped ASC



/****Determine Next ship date****/

SELECT t.DispatchNumber,t.AssetNumber,t.DateShipped,MIN(di.DateShipped) DateShippedNext

   INTO #TmpAssetShiped
      FROM DispatchInstanceItems dii (NOLOCK)
	     INNER JOIN DispatchInstances di (NOLOCK) ON dii.DispatchInstanceId = di.DispatchInstanceId
		    INNER JOIN #TempDT t ON dii.AssetNumber = t.AssetNumber    
   WHERE  di.DateShipped > t.DateShipped AND di.ShipType = 'DT-SEQ-ADD' AND ISNULL(dii.ErrorMessage,'') = ''
   GROUP BY DispatchNumber,t.AssetNumber,t.DateShipped

   UPDATE #TempDT
   SET #TempDT.DateShippedNext =Ds.DateShippedNext
   FROM #TempDT Dt
   INNER JOIN #TmpAssetShiped Ds
   ON Dt.DispatchNumber=Ds.DispatchNumber
   AND Dt.AssetNumber=Ds.AssetNumber
   AND Dt.DateShipped=Ds.DateShipped

/****Returned date (in between date shippped and next ship date****/

UPDATE t     
SET t.DateReturned = CONVERT(datetime, CONVERT(varchar(11),dii.DateReturned, 109)
                                        + SUBSTRING(CONVERT(varchar(MAX), dii.DateReturned,109),12, 100), 109)
FROM #TempDT t     
INNER JOIN Dispatches d (NOLOCK) on t.DispatchNumber = d.DispatchNumber   
INNER JOIN DispatchInstances di (NOLOCK) on d.DispatchId = di.DispatchId  
INNER JOIN DispatchInstanceItems dii (NOLOCK) on di.dispatchinstanceid = dii.DispatchInstanceId AND t.SerialNum = dii.SerialNum
AND t.ItemNum = dii.ItemNum
WHERE di.ShipType = 'DT-RETURN' AND (

/* this is to add time from dateadded column to dateshipped column*/

CONVERT(datetime, CONVERT(varchar(11),di.DateShipped, 109) + SUBSTRING(CONVERT(varchar(MAX), di.DateAdded,109),12, 100), 109)
>= t.DateShipped AND (CONVERT(datetime, CONVERT(varchar(11),dii.DateReturned, 109) + SUBSTRING(CONVERT(varchar(MAX), dii.DateReturned,109),12, 100), 109) <= t.DateShippedNext
 OR  (t.DateShippedNext IS NULL and dii.DateReturned is not null)) )
       AND ISNULL(dii.ErrorMessage,'') = ''

--Get Date of current AIRT 
SELECT @AirtDate=DateAdded FROM AssetRepairTrack WHERE AssetRepairTrackId=@AssetRepairTrackId

SELECT  tempT.DispatchNumber [DeliveryTicket],
DateShipped,     
ISNULL( tempT.DateReturned,tempT.DateShippedNext) as DateReturned
,CASE

       WHEN tempT.DateShipped IS not null and tempT.DateReturned IS null then DATEDIFF(day, ISNULL(tempT.DateShipped,tempT.DateShippedNext),tempT.DateShippedNext)
       ELSE DATEDIFF(day, ISNULL(DateShipped,DateReturned), DateReturned) end [DaysOnRent]
       , c.CustomerName,B.branchplant + ' - '+ b.CompanyName [BranchName]
FROM #TempDT tempT    
LEFT JOIN dispatches d  (NOLOCK) on d.dispatchnumber = tempT.dispatchnumber  
LEFT JOIN ItemNums i  (NOLOCK) on i.ItemNum = tempT.ItemNum     
LEFT JOIN Customers c  (NOLOCK) on c.CustomerNumber = d.JDECustomerNumber
LEFT JOIN BranchPlants b on b.BranchPlant = d.BranchPlant
WHERE tempT.DateReturned<@AirtDate

ORDER BY tempT.DateShipped desc

DROP TABLE #TempDT

DROP TABLE #TmpAssetShiped

END

 





GO
/****** Object:  StoredProcedure [dbo].[usp_AIRT_RMAnalysisFailureCodeSave]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_AIRT_RMAnalysisFailureCodeSave] (
	@sToolStringInfoID as uniqueidentifier,
	@sIncidentID as uniqueidentifier,
	@sToolStringID as uniqueidentifier,
	@sFixedAssetID as uniqueidentifier,
	@sFailureCodeID as uniqueidentifier,
	@iUserID as int) 
AS
SET NOCOUNT ON

DECLARE @sFailureCode varchar(6)
SET @sFailureCode = (SELECT FailureCategoryCode + FailureSubCategoryCode + FailureCode FROM vwFailureCodes (NOLOCK) WHERE FailureCodeID = @sFailureCodeID)

DECLARE @sImpactType varchar(2)
SET @sImpactType = Left(@sFailureCode,2)

DECLARE @sIdField varchar(20)
DECLARE @iAuditFieldID int

IF (@sImpactType = 'OS')
BEGIN
	SET @sIdField = 'OutOfSpecCodeID'
	SET @iAuditFieldID = 11
END
ELSE IF (@sImpactType = 'PR')
BEGIN
	SET @sIdField = 'ProceduralCodeID'
	SET @iAuditFieldID = 12
END
ELSE
BEGIN
	SET @sIdField = 'CompFailureCodeID'
	SET @iAuditFieldID = 6
END

Exec('UPDATE toolstringcomponentinfo SET ' + @sIdField + ' = ''' + @sFailureCodeID + ''' WHERE ToolStringInfoID = ''' + @sToolStringInfoID + '''')

Exec usp_CreateAuditRMAnalysis @sIncidentID, @sToolStringID, @sFixedAssetID, @iAuditFieldID, @sFailureCodeID, @iUserID, 1

IF (@sImpactType = 'OS' or @sImpactType = 'PR')
BEGIN
	DECLARE @iValue bit
	SET @iValue = 1

	IF (@sFailureCode = 'OSNF00' or @sFailureCode = 'PRNF00')
	BEGIN
		SET @iValue = 0
	END

	Exec('UPDATE ToolStringComponentInfo SET ' + @sImpactType + ' = ' + @iValue + ' WHERE ToolStringInfoID = ''' + @sToolStringInfoID + '''')

	IF (@sImpactType = 'OS')
	BEGIN
		SET @iAuditFieldID = 14
	END
	ELSE
	BEGIN
		SET @iAuditFieldID = 15
	END

	Exec usp_CreateAuditRMAnalysis @sIncidentID,@sToolStringID,@sFixedAssetID,@iAuditFieldID,@iValue,@iUserID,1
END

SET NOCOUNT OFF




/****** Object:  StoredProcedure [dbo].[usp_AssetCountReport]    Script Date: 08/05/2014 18:59:15 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_AIRT_Summary]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_AIRT_Summary]

( @AssetRepairTrackId uniqueidentifier)

AS

BEGIN

select top 1 a.AssetRepairTrackId
/*Total SAndR And TAndI*/
,FORMAT(isnull(b.[SumTotal],0) + isnull(c.[SumTotal],0), 'C') [IAndRTotalCost]
,FORMAT(isnull(b.[SumActMtr],0) + isnull(c.[SumActMtr],0), 'C') [IAndRMTRCost]
,FORMAT(isnull(b.[SumActLabor],0) + isnull(c.[SumActLabor],0), 'C') [IAndRLaborCost]
,FORMAT(isnull(b.[SumActMisc],0) + isnull(c.[SumActMisc],0), 'C') [IAndRMiscCost]
,FORMAT(isnull(b.[SumEstMatr],0) + isnull(c.[SumEstMatr],0), 'C') [IAndREstmMtrCost]
,FORMAT(isnull(b.[SumEstLabor],0) + isnull(c.[SumEstLabor],0), 'C') [IAndREstmLaborCost]
,FORMAT(isnull(b.[SumEstMisc],0) + isnull(c.[SumEstMisc],0), 'C') [IAndREstmMiscCost]
,FORMAT(isnull(b.[SumTotalEst],0) + isnull(c.[SumTotalEst],0), 'C') [IAndREstmTotalCost]

/*Total SAndR */

,FORMAT(isnull(b.[SumTotal],0) , 'C') [RTotalCost]
,FORMAT(isnull(b.[SumTotalEst],0) , 'C') [REstTotalCost]
,FORMAT(isnull(b.[SumActLabor],0) , 'C') [RActLaborCost]
,FORMAT(isnull(b.[SumActMtr],0) , 'C') [RActmtrCost]
,FORMAT(isnull(b.[SumActMisc],0) , 'C') [RActMiscCost]
,FORMAT(isnull(b.[SumEstMatr],0) , 'C') [REstMtrCost]
,FORMAT(isnull(b.[SumEstLabor],0) , 'C') [REstLaborCost]
,FORMAT(isnull(b.[SumEstMisc],0) , 'C') [REstMicCost]

/*Total TAndI*/

,FORMAT(isnull(c.[SumTotal],0) , 'C') [ITotalCost]
,FORMAT(isnull(c.[SumTotalEst],0) , 'C') [IEstTotalCost]
,FORMAT(isnull(c.[SumActLabor],0) , 'C') [IActLaborCost]
,FORMAT(isnull(c.[SumActMtr],0) , 'C') [IActmtrCost]
,FORMAT(isnull(c.[SumActMisc],0) , 'C') [IActMiscCost]
,FORMAT(isnull(c.[SumEstMatr],0) , 'C') [IEstMtrCost]
,FORMAT(isnull(c.[SumEstLabor],0) , 'C') [IEstLaborCost]
,FORMAT(isnull(c.[SumEstMisc],0) , 'C') [IEstMicCost]

/*Total PM*/

,FORMAT(isnull(d.[STotal],0) , 'C') [PTotalCost]
,FORMAT(isnull(D.[SumTotalEst],0) , 'C') [PEstTotalCost]
,FORMAT(isnull(d.[SumActLabor],0) , 'C') [PActLaborCost]
,FORMAT(isnull(d.[SumActMtr],0) , 'C') [PActmtrCost]
,FORMAT(isnull(d.[SumActMisc],0) , 'C') [PActMiscCost]
,FORMAT(isnull(d.[SumEstMatr],0) , 'C') [PEstMtrCost]
,FORMAT(isnull(d.[SumEstLabor],0) , 'C') [PEstLaborCost]
,FORMAT(isnull(d.[SumEstMisc],0) , 'C') [PEstMicCost]

FROM AssetRepairTrack a

/*Corrective Work Order*/

LEFT JOIN (

       SELECT jw1.AssetRepairTrackid
       ,SUM(jw1.EstimatedLaborAmount*ExchangeRate) [SumEstLabor],SUM(jw1.EstimatedMaterialAmount*ExchangeRate) [SumEstMatr],SUM(jw1.EstimatedOtherAmount*ExchangeRate) [SumEstMisc]
	   ,SUM(jw1.EstimatedLaborAmount*ExchangeRate)+SUM(jw1.EstimatedMaterialAmount*ExchangeRate)+SUM(jw1.EstimatedOtherAmount*ExchangeRate) [SumTotalEst]
       ,SUM(jw1.ActualMaterialInUSD) [SumActMtr],SUM(jw1.ActaulLaborInUSD) [SumActLabor],SUM(jw1.MiscCostInUSD) [SumActMisc]
       ,SUM(jw1.ActaulMiscCostInUSD) [SumTotal]
       FROM JDEWorkOrders jw1
       JOIN branchplants b1 on b1.branchplant = jw1.Branch
       WHERE jw1.OrderType = 'wc' And typewo = 'c' And jw1.AssetRepairTrackId=@AssetRepairTrackId
       GROUP by jw1.AssetRepairTrackId,b1.CurrencyCode
       ) B on B.AssetRepairTrackId = a.AssetRepairTrackId

/*Inspection Work Order*/

LEFT JOIN (
       select jw1.AssetRepairTrackid
       ,SUM(jw1.EstimatedLaborAmount*ExchangeRate) [SumEstLabor],SUM(jw1.EstimatedMaterialAmount*ExchangeRate) [SumEstMatr],SUM(jw1.EstimatedOtherAmount*ExchangeRate) [SumEstMisc]
		,SUM(jw1.EstimatedLaborAmount*ExchangeRate)+SUM(jw1.EstimatedMaterialAmount*ExchangeRate)+SUM(jw1.EstimatedOtherAmount*ExchangeRate) [SumTotalEst]
       ,SUM(jw1.ActualMaterialInUSD) [SumActMtr],SUM(jw1.ActaulLaborInUSD) [SumActLabor],SUM(jw1.MiscCostInUSD) [SumActMisc]
       ,SUM(jw1.ActaulMiscCostInUSD) [SumTotal]
       FROM JDEWorkOrders jw1
       join branchplants b1 on b1.branchplant = jw1.Branch
       WHERE jw1.OrderType = 'wm' And typewo = '5' And jw1.AssetRepairTrackId=@AssetRepairTrackId
       GROUP by jw1.AssetRepairTrackId,b1.CurrencyCode
       ) C on C.AssetRepairTrackId = a.AssetRepairTrackId

/*Preventative Work Order*/

LEFT JOIN (
       SELECT jw1.AssetRepairTrackid
       ,SUM(jw1.EstimatedLaborAmount*ExchangeRate) [SumEstLabor],SUM(jw1.EstimatedMaterialAmount*ExchangeRate) [SumEstMatr],SUM(jw1.EstimatedOtherAmount*ExchangeRate) [SumEstMisc]
	   ,SUM(jw1.EstimatedLaborAmount*ExchangeRate)+SUM(jw1.EstimatedMaterialAmount*ExchangeRate)+SUM(jw1.EstimatedOtherAmount*ExchangeRate) [SumTotalEst]
       ,SUM(jw1.ActualMaterialInUSD) [SumActMtr],SUM(jw1.ActaulLaborInUSD) [SumActLabor],SUM(jw1.MiscCostInUSD) [SumActMisc]
       ,SUM(jw1.ActaulMiscCostInUSD) [STotal]
       FROM JDEWorkOrders jw1
       JOIN branchplants b1 on b1.branchplant = jw1.Branch
       WHERE jw1.OrderType = 'wm' And typewo = '6' And jw1.AssetRepairTrackId=@AssetRepairTrackId
       GROUP by jw1.AssetRepairTrackId,b1.CurrencyCode
       ) D on D.AssetRepairTrackId = a.AssetRepairTrackId
WHERE a.AssetRepairTrackId = @AssetRepairTrackId

END


GO
/****** Object:  StoredProcedure [dbo].[usp_AssetCountReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_AssetCountReport]
	@xmlData XML
AS
DECLARE @HasDynamicColumns AS INT
DECLARE @ToolColumns AS VARCHAR(200)
DECLARE @sqlString nvarchar(max)
DECLARE @whereClause nvarchar(max)
declare @pageSize int
declare @startIndex int
DECLARE @pagingSql nvarchar(max)
declare @sortDir varchar(64)
set @sortDir = ' ASC '
--Start getting filters data from xml.


SELECT @HasDynamicColumns = T.c.value('.', 'INT')  FROM  @xmlData.nodes('/Filters/HasDynamicColumns') T(c);
SELECT @ToolColumns = T.c.value('.', 'VARCHAR(200)')  FROM  @xmlData.nodes('/Filters/ToolColumns') T(c);
SELECT @whereClause = T.c.value('.', 'VARCHAR(max)')  FROM  @xmlData.nodes('/Filters/WhereClause') T(c);
select @startIndex = T.c.value('.', 'int')
from 
@xmlData.nodes('/Filters/StartIndex') T(c)

select @pageSize = T.c.value('.', 'int')
from 
@xmlData.nodes('/Filters/PageSize') T(c)

if @HasDynamicColumns = 0
begin
	set @sqlString  = 'select ' + @ToolColumns + ', count(*) as TotalCount
						from vwFixedAssetsSearch (NOLOCK) as vwFixedAssetsSearch'
						
						if (@whereClause is not null)
						begin
							set  @sqlString  = @sqlString + @whereClause
						end
						
	set  @sqlString  = @sqlString + ' group by ' + @ToolColumns

	set @pagingSql = 'SELECT TOP ' + lower(@pageSize) + ' page.* FROM ( 
	SELECT ROW_NUMBER() OVER(ORDER BY ' + @ToolColumns + ' ' + @sortDir + ') as row, * From ( ' + 
	@sqlString + ') query 
	) page where page.row > ' + lower(@startIndex) + ' order by ' + @ToolColumns + ' ' + @sortDir

	EXECUTE sp_executesql @pagingSql


	set @pagingSql = ' SELECT Count(*) as Total from (' + @sqlString + ') a'
	EXECUTE sp_executesql  @pagingSql

end
else
begin 
	--select * from SelectLists
	
	DECLARE @DistinctStatusdesc TABLE (
	DisplayName varchar(1024),
	IsAdded bit not null default(0)
	)	
	DECLARE @DisplayName varchar(1024) 
	DECLARE @columnSql varchar(max)
	DECLARE @TotalColumnSql varchar(max) 
	DECLARE @inSql varchar(max) 
	;

	with StatusDesc as
	(
		select distinct case when EquipmentStatus = '' then 'UNKNOWN' else EquipmentStatus end  as EquipmentStatus from vwfixedassetssearch (NOLOCK) 
	)
	, StatusDescTree as
	(
		select EquipmentStatus from StatusDesc 
	)
	INSERT INTO @DistinctStatusdesc (DisplayName)
	select  EquipmentStatus as StatusDesc
	from StatusDescTree t where EquipmentStatus is not null
	order by EquipmentStatus

	IF EXISTS (select * from @DistinctStatusdesc)
	BEGIN
		SET @columnSql = ''
		SET @inSql = ''
		SET @TotalColumnSql = ''
		WHILE EXISTS (SELECT Top 1 DisplayName FROM @DistinctStatusdesc WHERE IsAdded = 0) 
		BEGIN
			SELECT TOP 1 
				@DisplayName = DisplayName
			FROM @DistinctStatusdesc
			WHERE IsAdded = 0
			
			IF @columnSql != ''
			BEGIN
				SET @columnSql = isnull(@columnSql,0) + ','
				SET @inSql = @inSql + ','
				SET @TotalColumnSql = @TotalColumnSql + ' + '
			END

			SET @columnSql = @columnSql + '['+@DisplayName+']'
			SET @inSql = @inSql + '['+ @DisplayName +']'
			SET @TotalColumnSql = @TotalColumnSql + '['+ @DisplayName +']'
			
			UPDATE @DistinctStatusdesc SET IsAdded = 1 WHERE DisplayName = @DisplayName
		END 

	SET @sqlString = '
		with AssetsByStatus ( ' +  @ToolColumns + ', StatusDesc ) 
		as ( 
			select ' +  @ToolColumns +  ', isnull(EquipmentStatus,''UNKNOWN'') AS StatusDesc 
			from vwFixedAssetsSearch (NOLOCK) as vwFixedAssetsSearch '
			if (@whereClause is not null)
				begin
					set  @sqlString  = @sqlString + @whereClause
				end
			SET @sqlString = @sqlString +	')
			SELECT TOP ' + lower(@pageSize) + ' page.* FROM ( 
			SELECT ROW_NUMBER() OVER(ORDER BY ' + @ToolColumns + ' ' + @sortDir + ') as row, * From (  
			select ' + @ToolColumns + ' ,' + @columnSql + ' ,' + @TotalColumnSql + ' as TotalCount
			from AssetsByStatus
			PIVOT
			(
				count([StatusDesc])
				FOR [StatusDesc] IN ('+ @inSql + ')
				) as AssetStatusPivot
				) query 
		) page where page.row > ' + lower(@startIndex) + ' order by ' + @ToolColumns + ' ' + @sortDir
		
		EXECUTE sp_executesql @sqlString
		--print  @sqlString
		
		
		set @pagingSql = '
		with AssetsByStatus ( ' +  @ToolColumns   +', StatusDesc ) 
		as ( 
			select ' +  @ToolColumns +  ', isnull(EquipmentStatus,''UNKNOWN'') AS StatusDesc 
			from vwFixedAssetsSearch (NOLOCK) as vwFixedAssetsSearch '
			if (@whereClause is not null)
				begin
					set  @pagingSql  = @pagingSql + @whereClause
				end
			SET @pagingSql = @pagingSql +	')
			SELECT count(*) FROM ( 
			select ' + @ToolColumns + ' ,' + @columnSql + '
			from AssetsByStatus
			PIVOT
			(
				count([StatusDesc])
				FOR [StatusDesc] IN ('+ @inSql + ')
				) as AssetStatusPivot
				) query '
		
		EXECUTE sp_executesql  @pagingSql
END
	
	
end





/****** Object:  StoredProcedure [dbo].[usp_BuildECNProcessTaskStatusReport]    Script Date: 08/05/2014 18:28:35 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_AssetInfo_GetHistory]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh
-- Create date: 5/2/2018
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[usp_AssetInfo_GetHistory] 
	@FixedAssetId Uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @startDateTime DATETIME, @runId UNIQUEIDENTIFIER;
	SET @startDateTime = GETDATE();
	SET @runId = NEWID();

	SELECT
    a.FixedAssetID,
    CAST(SUM(a.[LifetimeOperHrs]) AS DECIMAL(18,2)) AS [LifetimeOperHrs],
    CAST(SUM(a.[LifetimeCircHrs]) AS DECIMAL(18,2)) AS [LifetimeCircHrs],
    CAST(SUM(a.[LifetimeDrillingHrs]) AS DECIMAL(18,2)) AS [LifetimeDrillingHrs],
    CAST(SUM(a.[SinceLastRepairOperHrs]) AS DECIMAL(18,2)) AS [SinceLastRepairOperHrs],
    CAST(SUM(a.[SinceLastRepairCircHrs]) AS DECIMAL(18,2)) AS [SinceLastRepairCircHrs],
    CAST(SUM(a.[SinceLastRepairDrillHrs]) AS DECIMAL(18,2)) AS [SinceLastRepairDrillHrs],
    SUM(a.[CountOfRuns]) AS [CountOfRuns],
    SUM(a.[LifetimeTFFs]) AS [LifetimeTFFs],
	SUM(a.[LifeTimeNPTHrs]) AS [LifeTimeNPTHrs],
    SUM(a.[LifetimeFailures]) AS [LifetimeFailures],
    MAX(a.[BornOnDate]) AS [BornOnDate],
    SUM(a.[AcquisitionCost]) AS [AcquisitionCost],
    SUM(a.[NetBookValue]) AS [NetBookValue],
    SUM(a.[NoOfDaysInStatus]) AS [NoOfDaysInStatus],
	
	(
		SELECT ISNULL(MIN(DATEDIFF(dd, ISNULL(s.DateAdded, GETDATE()), GETDATE())),0) [DaysSinceLastPFTStep]  
			FROM AssetRepairTrack a
			JOIN PFTWO w ON w.AssetRepairTrackId = a.AssetRepairTrackId
			JOIN PFTWOSeq s ON s.PFTWOId = w.PFTWOId
		WHERE w.FixedAssetId = @FixedAssetId AND w.PFTWOId = ISNULL(a.SRPFTWOId, a.ITPFTWOId)
	) [DaysSinceLastPFTStep]

  /*************************/
  /***Lifetime Asset Data***/
  /*************************/
  FROM 
  (SELECT
		tc1.FixedAssetID,
		SUM(r1.OperHrs) AS [LifetimeOperHRs],
		SUM(r1.circhrs) AS [LifetimeCircHrs],
		SUM(r1.drillhrs) AS [LifetimeDrillingHrs],
		COUNT(tc1.runid) AS [CountOfRuns],
		SUM(CONVERT(int, tc1.TFF)) AS [LifetimeTFFs],
		SUM(CONVERT(int, tc1.csi)) AS [LifetimeFailures],
		SUM(CONVERT(decimal(18,2), tc1.LostTime)) [LifeTimeNPTHrs],
		0 [NoOfDaysInStatus],
		0 [AcquisitionCost],
		0 [NetBookValue],
		'' [BornOnDate],
		0 [SinceLastRepairOperHrs],
		0 [SinceLastRepairCirchrs],
		0 [SinceLastRepairDrillHrs]
  FROM ToolStringComponentInfo tc1 (NOLOCK)
  INNER JOIN Runs r1 (NOLOCK) ON r1.runid = tc1.runid
  WHERE @fixedassetid = tc1.FixedAssetID
  GROUP BY tc1.fixedassetid

  UNION ALL

  /*************************/
  /***Basic Asset Data******/
  /*************************/
  SELECT
    f2.fixedassetid,
    0 [LifetimeOperHrs],
    0 [LifetimeCircHrs],
    0 [LifetimeDrillingHrs],
    0 [CountOfRuns],
    0 [LifetimeTFFs],
    0 [LifetimeFailures],
	0 [LifeTimeNPTHrs],
    DATEDIFF(D, f2.LastStatusChangeDate, GETDATE()) AS [NoOfDaysInStatus],
    f2.cost AS [AcquisitionCost],
    f2.NetBookValue AS [NetBookValue],
    f2.DateAcquired AS [BornOnDate],
    0 [SinceLastRepairOperHrs],
    0 [SinceLastRepairCircHrs],
    0 [SinceLastRepairDrillHrs]
  FROM FixedAssets f2 (NOLOCK) 
  WHERE @fixedassetid = f2.FixedAssetId

  UNION ALL

  SELECT
    tca.fixedassetid,
    0 [LifetimeOperHrs],
    0 [LifetimeCircHrs],
    0 [LifetimeDrillingHrs],
    0 [CountOfRuns],
    0 [LifetimeTFFs],
	0 [LifeTimeNPTHrs],
    0 [LifetimeFailures],
    0 [NoOfDaysInStatus],
    0 [AcquisitionCost],
    0 [NetBookValue],
    '' [BornOnDate],
    SUM(RA.OperHrs) AS [SinceLastRepairOperHrs],
    SUM(RA.circHrs) AS [SinceLastRepairCircHrs],
    SUM(RA.DrillHrs) AS [SinceLastRepairDrillHrs]
  FROM Runs ra (NOLOCK) 
  INNER JOIN ToolStringComponentInfo tca (NOLOCK) ON tca.RunID = ra.RunId
  INNER JOIN ( ---Get latest S&R PFT for "Last Repair Date"
		  SELECT
			MAX(pwa.dateadded) AS "Dateadded",
			art.FixedAssetId
		  FROM AssetRepairTrack art
		  INNER JOIN PFTWO pwa (NOLOCK) ON pwa.PFTWOId = art.SRPFTWOId
		  WHERE art.FixedAssetId = @fixedassetid
			AND pwa.DateAdded < (SELECT MAX(DateAdded) FROM AssetRepairTrack WHere FixedAssetId = @FixedAssetId)
		  GROUP BY art.FixedAssetId

  ) B ON b.fixedassetid = tca.fixedassetid AND ra.EndDate > b.Dateadded  
  WHERE @fixedassetid = tca.FixedAssetID
  GROUP BY tca.fixedassetid) a
  GROUP BY a.fixedassetid

   EXEC usp_MyAdvisor_Logs @runId, 'usp_AssetInfo_GetHistory', 'Get Asset information history', @startDateTime

END


GO
/****** Object:  StoredProcedure [dbo].[usp_AssetLifeCycleReportDatasetUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- =============================================
-- Author:		Yogesh Mane
-- Create date: 8/17/2016
-- Description:	Updates the AssetLifeCycleReportDataset nightly
-- =============================================
CREATE PROCEDURE [dbo].[usp_AssetLifeCycleReportDatasetUpdate] 
AS
BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	TRUNCATE TABLE dbo.AssetLifeCycleReportDataset

	INSERT INTO AssetLifeCycleReportDataset
	SELECT DISTINCT
	  f.FixedAssetId,
	  f.SerialNum,
	  f.AssetNumber,
	  f.EquipmentStatus,
	  f.RNItemNum,
	  f.InventoryItemNum,
	  f.ProductLineId,
	  ISNULL(r.DescShort, i.DescShort) [DescShort],
	  ISNULL(r.ToolCode, i.ToolCode) ToolCode,
	  ISNULL(r.ToolPanel, i.ToolPanel) ,
	  bp.BranchPlant AS "CurrentBranchplant",
	  bp.CompanyName,
	  bp.Country,
	  bp.Region

	  /*Last Billable info*/,
	  ISNULL(f.LastBillableBranchPlant, '') AS "LastBillableBranchPlant",
	  ISNULL(f.LastBillableBranchPlantName, '') AS "LastBillableBranchPlantName",
	  ISNULL(f.LastBillableCountry, '') AS "LastBillableCountry",
	  ISNULL(f.LastBillableRegion, '') AS "LastBillableRegion",
	  ISNULL(CONVERT(varchar(10), ptd.[DatetoolTransferedfromOpsBillable], 101), '') AS "DateToolTransferedfromOpsBillable"

	  /*AIRT info*/,
	  ISNULL(b.artnumber, '') AS "LatestAIRT",
	  ISNULL(b.FromBranchPlant, '') AS "BPcreatingAIRT",
	  ISNULL(b.ShipToBranchPlant, '') AS "BPrepairingAIRT",
	  ISNULL(b.CurrentAirtStatus, '') AS "CurrentAIRTStatus",
	  ISNULL(CONVERT(varchar(10), b.DateAdded, 101), '') AS "DateAIRTCreated",
	  ISNULL(CONVERT(varchar(10), b.DateClosed, 101), '') AS "DateAIRTClosed",
	  ISNULL(B.[DispositionofAIRT], '') AS "DispositionofAIRT",
	  ISNULL(B.[AIRTDispositionComments], '') AS "AIRTDispositionComments",
	  ISNULL(CONVERT(varchar(10), b.[AIRTdispositiondate], 101), '') AS "AIRTDispositionDate"


	  /*Aging*/,
	  ISNULL(CONVERT(varchar(10), DATEDIFF(dd, d.EndDate, GETDATE()), 101), '') AS "Agesincelastrun",
	  ISNULL(CONVERT(varchar(10), DATEDIFF(dd, b.dateadded, GETDATE()), 101), '') AS "AgesincelastAIRTwasCreated",
	  ISNULL(CONVERT(varchar(10), DATEDIFF(dd, (SELECT
		MAX(dateadded)
	  FROM pftwoseq psq (NOLOCK)
	  WHERE psq.PFTWOId = b.ITPFTWOId), GETDATE()), 101), '') AS "AgesincelastTIPFTstep",
	  ISNULL(CONVERT(varchar(10), DATEDIFF(dd, b.[AIRTdispositiondate], GETDATE()), 101), '') AS "AgesinceAIRTwasDispositioned",
	  ISNULL(CONVERT(varchar(10), DATEDIFF(dd, ptd.[DatetoolTransferedfromOpsBillable], GETDATE()), 101), '') AS "DatesincetoolwaslastinOpsBillableBP",
	  ISNULL(CONVERT(varchar(10), pt1.dateshipped, 101), '') AS "DateshippedtoAIRTshiptolocation",
	  ISNULL(CONVERT(varchar(10), pt2.DateReceived, 101), '') AS "DatereceivedinAIRTshiptolocation",
	  ISNULL(CONVERT(varchar(10), pt3.dateshipped, 101), '') AS "Dateoflastshipmentoftool",
	  ISNULL(CONVERT(varchar(10), pt4.dateReceived, 101), '') AS "Datereceiptoftool",

	  CASE WHEN b.[DispositionofAIRT] = 'Repair in Global' AND pt1.dateshipped IS NULL THEN 'No Shipping information'
		   WHEN b.[DispositionofAIRT] = 'Repair in Global' AND pt2.DateReceived IS NULL THEN 'No Receipt information'
		   ELSE ISNULL(CONVERT(varchar(10), DATEDIFF(dd, pt1.dateshipped, pt2.DateReceived), 101), '')
	  END AS "TransittimefromTesttoRepairlocation"
	  
	  /*reliability selects*/

	  /*Last Job History*/,
	  ISNULL(CONVERT(varchar(10), d.EndDate, 101), '') AS "latestrunenddate",
	  ISNULL(d.JobNumber, '') AS "latestjob",
	  ISNULL(d.RunNumber, '') AS "latestrunnumber"


	  /*Lifetime job data*/,
	  ISNULL(rel1.[TotalCSI], 0) AS "TotalLifetimeCSI",
	  ISNULL(rel1.[TotalTFF], 0) AS "TotalLifetimeTFF",
	  ISNULL(rel1.[TotalOperHrs], 0) AS "TotalLifetimeOperHrs",
	  ISNULL(rel1.[TotalCircHrs], 0) AS "TotalLifetimeCircHrs",
	  ISNULL(CONVERT(decimal(18, 2), rel1.[TotalNPTHrs]), 0) AS "TotalLifetimeNPT",
	  ISNULL(rel1.[MaxTempLifetimeC], '') AS "LifetimeMaxTempC",
	  ISNULL(rel1.[MaxTempLifetimeF], '') AS "LifetimeMaxTempF"



	  /*Since Last AIRT*/,
	  ISNULL(b.[TotalCSISLA], 0) AS "TotalCSISLT",
	  ISNULL(b.[TotalTFFSLA], 0) AS "TotalTFFSLT",
	  ISNULL(b.[OperHrsSLA], 0) AS "OperHrsSLT",
	  ISNULL(b.[CircHrsSLA], 0) AS "CircHrsSLT",
	  ISNULL(CONVERT(decimal(18, 2), b.[NPTHrsSLA]), 0) AS "NPTHrsSLT",
	  ISNULL(b.[MaxTempSLAC], 0) AS "MaxTempSLTC",
	  ISNULL(b.[MaxTempSLAF], 0) AS "MaxTempSLTF"



	  /*Data Flags*/,
	  CASE WHEN b.ARTNumber IS NULL THEN 'No AIRT' ELSE '' END AS AIRTCheck,
	  CASE WHEN d.JobNumber IS NULL THEN 'No Job Info' ELSE '' END AS "JobCheck",
	  CASE WHEN f.LastBillableBranchPlant IS NULL THEN 'No billable info' ELSE '' END AS MovementCheck,

	  (select DATEDIFF(day,MAX(dii.DateAdded),GETDATE()) 
			from dispatchinstanceitems dii (NOLOCK)
			left join DispatchInstances di (NOLOCK) on di.DispatchInstanceId = dii.DispatchInstanceId
			where di.ShipType = 'DT-SEQ-ADD' and dii.AssetNumber = f.AssetNumber) [Age_Since_Issued_To_DT],

	  (select DATEDIFF(day,MAX(dii.DateAdded),GETDATE()) 
			from dispatchinstanceitems dii (NOLOCK)
			left join DispatchInstances di (NOLOCK) on di.DispatchInstanceId = dii.DispatchInstanceId
			where di.ShipType = 'DT-RETURN' and dii.AssetNumber = f.AssetNumber) [Age_Since_Returned_From_DT],

	  GETDATE() [CreatedOn]

	FROM vwFixedAssetsSearch f (NOLOCK)
	LEFT JOIN PartStatus(NOLOCK) ps ON ps.code = f.EquipmentStatus
	LEFT JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = f.BranchPlant
	LEFT JOIN ItemNums(NOLOCK) r ON r.ItemNum = f.RNItemNum
	LEFT JOIN ItemNums(NOLOCK) i ON i.ItemNum = f.InventoryItemNum
	LEFT JOIN FixedAssets(NOLOCK) f1 ON f1.FixedAssetId = f.FixedAssetId
	
	/*Subquery for Latest AIRT with information about that AIRT*/
	
	LEFT JOIN (SELECT
		  ar.ITPFTWOId,
		  artnumber,
		  ar.dateadded,
		  dateclosed,
		  ar.fixedassetid,
		  d.[AIRTDispositionComments],
		  d.[AIRTdispositiondate],
		  d.[DispositionofAIRT],
		  d.ShipToBranchPlant,
		  ar.FromBranchPlant,
		  SUM(rel2.OperHrs) AS "OperHrsSLA",
		  SUM(rel2.circhrs) AS "CircHrsSLA",
		  SUM(rel2.[NPTHrs]) AS "NPTHrsSLA",
		  SUM(rel2.CSI) AS "TotalCSISLA",
		  SUM(rel2.tff) AS "TotalTFFSLA",
		  MAX(rel2.[MaxTempF]) AS "MaxTempSLAF",
		  MAX(rel2.[MaxTempC]) AS "MaxTempSLAC",

		  CASE WHEN ar.DateClosed IS NOT NULL THEN 'AIRT Closed'
			WHEN ar.SRPFTWOId IS NOT NULL THEN 'S&R PFT'
			WHEN ar.SRPFTWOId IS NULL AND d.[AIRTdispositiondate] IS NOT NULL THEN 'Approved disposition'
			WHEN ar.SRPFTWOId IS NULL AND d.[AIRTdispositiondate] IS NULL THEN 'In Inspection'
			ELSE 'unknown status' 
		 END AS [CurrentAirtStatus]

		FROM AssetRepairTrack(NOLOCK) ar

		/*current reliability data*/

		LEFT JOIN (SELECT
		  fixedassetid,
		  r6.OutHoleDate,
		  r6.operhrs,
		  r6.circhrs,
		  CONVERT(decimal(18, 5), ISNULL(tc6.losttime, 0)) AS "NPTHrs",
		  CONVERT(int, tc6.CSI) AS "CSI",
		  CONVERT(int, tc6.TFF) AS "TFF",
		  CONVERT(int, r6.MaxTempF) AS "MaxTempF",
		  CONVERT(int, r6.MaxTempc) AS "MaxTempC"

		FROM relbusinessintelligencedataset r6 (NOLOCK)

		LEFT JOIN ToolStringComponentInfo(NOLOCK) tc6
		  ON tc6.RunID = r6.runid

		GROUP BY FixedAssetID,
				 r6.OutHoleDate,
				 r6.OperHrs,
				 r6.CircHrs,
				 tc6.losttime,
				 TC6.CSI,
				 tc6.TFF,
				 r6.MaxTempC,
				 r6.MaxTempF) rel2
		  ON rel2.FixedAssetID = ar.FixedAssetId
		  AND rel2.OutHoleDate > ar.DateAdded

	/*latest AIRT*/
	INNER JOIN (SELECT
	  MAX(dateadded) AS "dateadded",
	  FixedAssetId

	FROM AssetRepairTrack(NOLOCK)

	GROUP BY FixedAssetId) a
	  ON a.FixedAssetId = ar.FixedAssetId
	  AND ar.DateAdded = a.dateadded


	/*disposition*/


	LEFT JOIN (SELECT
					  a4.AssetRepairTrackid,
					  a4.ARTNumber AS "AIRTNumber",
					  ad4.DispositionComments AS "AIRTDispositionComments",
					  a4.ShipToBranchPlant,
					  a4.FromBranchPlant,

					  ad5.[Disposition Date] AS "AIRTdispositiondate",

					  CASE WHEN ad4.Disposition = '1' THEN 'Repair in District'
						WHEN ad4.Disposition = '4' THEN 'Use as is'
						WHEN ad4.Disposition = '2' THEN 'Repair in Global'
						WHEN ad4.Disposition = '3' THEN 'Scrap'
							ELSE 'unknown disposition' END AS [DispositionofAIRT]

					FROM AssetRepairTrack(NOLOCK) a4
					LEFT JOIN ARTDispositions(NOLOCK) ad4 ON ad4.AssetRepairTrackId = a4.AssetRepairTrackId

					INNER JOIN (SELECT ad.assetrepairtrackid,
									  MAX(ad.dateadded) [Disposition Date]
									  FROM ARTDispositions(NOLOCK) ad  
									  GROUP BY assetrepairtrackid) ad5
									  ON ad5.AssetRepairTrackId = a4.AssetRepairTrackId
									  AND ad4.DateAdded = ad5.[Disposition Date]
	  
					  ) d ON d.AssetRepairTrackId = ar.AssetRepairTrackId
					GROUP BY ar.ITPFTWOId,
							artnumber,
							ar.dateadded,
							dateclosed,
							ar.fixedassetid,
							d.[AIRTDispositionComments],
							d.[AIRTdispositiondate],
							d.[DispositionofAIRT],
							d.ShipToBranchPlant,
							ar.FromBranchPlant,

							CASE WHEN ar.DateClosed IS NOT NULL THEN 'AIRT Closed'
							WHEN ar.SRPFTWOId IS NOT NULL THEN 'S&R PFT' 
							WHEN ar.SRPFTWOId IS NULL AND d.[AIRTdispositiondate] IS NOT NULL THEN 'Approved disposition'
							WHEN ar.SRPFTWOId IS NULL AND d.[AIRTdispositiondate] IS NULL THEN 'In Inspection'
							ELSE 'unknown status' END
		) B ON b.fixedassetid = f.FixedAssetId



	/*Subquery to get Job information*/


	LEFT JOIN (SELECT ts.FixedAssetID,
				  MAX(j.JobNumber) [JobNumber],
				  MAX(r.EndDate) [EndDate],
				  MAX(r.RunNumber) [RunNumber]
				  FROM ToolStringComponentInfo(NOLOCK) ts
				  LEFT JOIN Runs r (NOLOCK) ON r.runid = ts.runid
				  LEFT JOIN wells w (NOLOCK) ON w.wellid = r.wellid 
				  LEFT JOIN JobS j (NOLOCK) ON j.JobId = w.JobID 
				  
				  INNER JOIN (SELECT tc1.fixedassetid,
									MAX(r1.enddate) AS "enddate" 
								  FROM ToolStringComponentInfo(NOLOCK) tc1 
								  LEFT JOIN Runs (NOLOCK) r1 ON r1.RunID = tc1.runid 
									  GROUP BY FixedAssetID) C ON c.FixedAssetID = ts.FixedAssetID AND c.enddate = r.EndDate
				GROUP BY ts.FixedAssetID) D ON d.FixedAssetID = f.FixedAssetId


	/*********************************************/

	/*** All Part Transfer Dtl data starts here***/

	/*********************************************/

	/*subquery to pull last ops location date*/


	LEFT JOIN (SELECT MAX(dateadded) AS [DatetoolTransferedfromOpsBillable],
					sendinglocation,
					FixedAssetId
				FROM PartTransferDtl(NOLOCK)
				WHERE source = 'pt'
				GROUP BY FixedAssetId,
					SendingLocation) ptd
	  ON ptd.SendingLocation = LastBillableBranchPlant
	  AND ptd.FixedAssetId = f.FixedAssetId



	/*subquery to get date shipped to repair location*/


	LEFT JOIN (SELECT MAX(pd1.dateadded) AS [dateshipped], 
					pd1.fixedassetid, 
					ReceivingLocation
				FROM parttransferdtl(NOLOCK) pd1
				WHERE source = 'pt' AND Dest = 'IT'
				GROUP BY fixedassetid,
					ReceivingLocation) PT1 ON pt1.ReceivingLocation = b.ShipToBranchPlant
	  AND f.FixedAssetId = pt1.FixedAssetId



	/*subquery to get date received in repair location*/


	LEFT JOIN (SELECT MAX(pd2.dateadded) AS [DateReceived], 
					ReceivingLocation,
					pd2.FixedAssetId
				FROM parttransferdtl(NOLOCK) pd2
				WHERE source = 'IT' AND Dest = 'AV'
				GROUP BY ReceivingLocation, fixedassetid

				) PT2 ON pt2.ReceivingLocation = b.ShipToBranchPlant AND f.FixedAssetId = pt2.FixedAssetId

	/*subquery to get date shipped*/

	LEFT JOIN (SELECT MAX(pd3.dateadded) AS [dateshipped],
					pd3.fixedassetid
				FROM parttransferdtl(NOLOCK) pd3
				WHERE Dest = 'av' AND Source = 'IT'
				GROUP BY fixedassetid) PT3 ON f.FixedAssetId = pt3.FixedAssetId

	/*subquery to get date date received*/


	LEFT JOIN (SELECT MAX(pd4.dateadded) AS [dateReceived], 
						pd4.FixedAssetId

				FROM parttransferdtl(NOLOCK) pd4
				WHERE source = 'it' AND Dest = 'av'
				GROUP BY fixedassetid) PT4 ON f.FixedAssetId = pt4.FixedAssetId


	/*subquery to pull sums of LIFETIME operations history of asset*/

	LEFT JOIN (SELECT
	  fixedassetid,
	  SUM(r5.operhrs) AS "TotalOperHrs",
	  SUM(r5.circhrs) AS "TotalCircHrs",
	  SUM(CONVERT(decimal(18, 5), ISNULL(tc5.losttime, 0))) AS "TotalNPTHrs",
	  SUM(CONVERT(int, tc5.CSI)) AS "TotalCSI",
	  SUM(CONVERT(int, tc5.TFF)) AS "TotalTFF",
	  MAX(CONVERT(int, r5.MaxTempF)) AS "MaxTempLifetimeF",
	  MAX(CONVERT(int, r5.MaxTempc)) AS "MaxTempLifetimeC"

	FROM relbusinessintelligencedataset(NOLOCK) r5
	LEFT JOIN ToolStringComponentInfo tc5 (NOLOCK) ON tc5.RunID = r5.runid

	GROUP BY FixedAssetID) rel1
	 ON rel1.FixedAssetID = f.FixedAssetId


	WHERE f.assetnumber IS NOT NULL
	AND ps.IsDisposed = '0'
	AND f.EquipmentStatus <> '50'
	AND f.ProductLineId IN(1, 2, 4, 5, 6, 10, 19,24) --DS-1, SDS-6, LH 19, TRS - 5, WLS -3
	AND f.RNItemNum IS NOT NULL


END




GO
/****** Object:  StoredProcedure [dbo].[usp_AuditActionItem]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



Create PROCEDURE [dbo].[usp_AuditActionItem] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId int,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditActionItem')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditActionItem
		select @AuditActionId, * from ActionItem where RequestId = @KeyId

	end

	SET NOCOUNT OFF;
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_AuditCAPARequests]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_AuditCAPARequests]
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId int,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditRequests')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditRequests
		select @AuditActionId, * from Requests where RequestId = @KeyId

		insert into AuditCAPARequests
		select @AuditActionId, * from CAPARequests where RequestId = @KeyId

	end

	SET NOCOUNT OFF;
	
END




GO
/****** Object:  StoredProcedure [dbo].[usp_AuditChangeNotices]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_AuditChangeNotices] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId uniqueidentifier,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditChangeNotices')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditChangeNotices
		select @AuditActionId, * from ChangeNotices where CNId = @KeyId

		insert into AuditChangeNoticeParts
		select @AuditActionId, * from ChangeNoticeParts where CNId = @KeyId
	end

	SET NOCOUNT OFF;
	
END

GO
/****** Object:  StoredProcedure [dbo].[usp_AuditChangeRequests]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_AuditChangeRequests] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId int,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditRequests')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditRequests
		select @AuditActionId, * from Requests where RequestId = @KeyId

		insert into AuditChangeRequests
		select @AuditActionId, * from ChangeRequests where RequestId = @KeyId
	
	end

	SET NOCOUNT OFF;
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_AuditDocItems]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[usp_AuditDocItems] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(1024),
	@RemoteHost varchar(25),
	@KeyId int,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	
	insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
	values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditDocItems')

	Set @AuditActionId = @@Identity

	SET NOCOUNT OFF;
	
END




GO
/****** Object:  StoredProcedure [dbo].[usp_AuditGFAIncidents]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_AuditGFAIncidents]
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId uniqueidentifier,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditGFAIncidents')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditGFAIncidents
		select @AuditActionId, * from GFAIncidents where GFAId = @KeyId
	
		insert into AuditGFAComponents
		select @AuditActionId, * from GFAComponents where GFAId = @KeyId
	end

	SET NOCOUNT OFF;
	
END

GO
/****** Object:  StoredProcedure [dbo].[usp_AuditGVWEquipmentRequests]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[usp_AuditGVWEquipmentRequests] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId int,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditGVWEquipmentRequests')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditGVWEquipmentRequests
		select @AuditActionId, * from GVWEquipmentRequests where GVWEquipmentRequestId = @KeyId

		insert into AuditGVWEquipmentRequestDetails
		select @AuditActionId, * from GVWEquipmentRequestDetails where GVWEquipmentRequestId = @KeyId
	end

	SET NOCOUNT OFF;
	
END


GO
/****** Object:  StoredProcedure [dbo].[usp_AuditItemNumConfigs]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_AuditItemNumConfigs]
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId uniqueidentifier = null,
	@ParentItemNum varchar(100),
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	
	Declare @toolSizeId as int
	Set @toolSizeId = NULL
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditItemNumConfigs')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId IS NOT NULL
	begin
		if @KeyId is not null
		begin
			insert into AuditItemNumConfigs
			select @AuditActionId, * from ItemNumConfigs where ItemNumConfigId = @KeyId
			
			Select @ParentItemNum = ItemNum, @toolSizeId = ToolSizeID
			from ItemNumConfigs
			Where ItemNumConfigId = @KeyId
			
			insert into AuditItemNumConfigs
			select @AuditActionId, * from ItemNumConfigs where ParentItemNum = @ParentItemNum AND ISNULL(ToolSizeID, -1) = ISNULL(@toolSizeId, -1) AND ISNULL(IsToolString, 0) = 1
		end
	end
	else -- in case of BOM.
	begin
		insert into AuditItemNumConfigs
		select @AuditActionId, * from ItemNumConfigs where ParentItemNum = @ParentItemNum AND ISNULL(IsToolString, 0) = 0
	end
	
	SET NOCOUNT OFF;
	
END


GO
/****** Object:  StoredProcedure [dbo].[usp_AuditItemNums]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_AuditItemNums] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId uniqueidentifier,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditItemNums')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditItemNums
		select @AuditActionId, * from ItemNums where ItemNumId = @KeyId

		insert into AuditItemNumBranchPlants
		select @AuditActionId, * from ItemNumBranchPlants where ItemNum = @ActionDesc
	end

	SET NOCOUNT OFF;
	
END




GO
/****** Object:  StoredProcedure [dbo].[usp_AuditJarActivities]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_AuditJarActivities] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId uniqueidentifier,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	DECLARE @JobId uniqueidentifier
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditJarActivities')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditJarActivities
		select @AuditActionId, * from JarActivities where JarActivityId = @KeyId
		
		insert into AuditJarActivityPersonnel
		select @AuditActionId, * from JarActivityPersonnel where JarActivityId = @KeyId
		
		insert into AuditJarActivityServices
		select @AuditActionId, * from JarActivityServices where JarActivityId = @KeyId
	end

	SET NOCOUNT OFF;
	
END


GO
/****** Object:  StoredProcedure [dbo].[usp_AuditJarRuns]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_AuditJarRuns] 
	@AuditTypeId INT,
	@UserId INT, 
	@ActionDesc VARCHAR(2048),
	@RemoteHost VARCHAR(75),
	@KeyId UNIQUEIDENTIFIER,
	@AuditActionId INT = NULL OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql NVARCHAR(MAX)
	
	IF @AuditActionId IS NULL
	BEGIN
		INSERT INTO AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		VALUES (@AuditTypeId, @UserId, @ActionDesc, GETDATE(), @RemoteHost, 'AuditJarRuns')

		SELECT @AuditActionId = @@IDENTITY
	END
	
	IF @KeyId IS NOT NULL
	BEGIN
		INSERT INTO AuditJarRuns
		SELECT @AuditActionId, * FROM JarRuns WHERE JarRunId = @KeyId
		
		INSERT INTO AuditJarRunTools
		SELECT @AuditActionId, * FROM JarRunTools WHERE JarRunId = @KeyId
		
		INSERT INTO AuditJarRunForecastTools
		SELECT @AuditActionId, * FROM JarRunForecastTools WHERE JarRunId = @KeyId
	END

	SET NOCOUNT OFF;
	
END





GO
/****** Object:  StoredProcedure [dbo].[usp_AuditJobs]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_AuditJobs] 
	@AuditTypeId INT,
	@UserId INT, 
	@ActionDesc VARCHAR(2048),
	@RemoteHost VARCHAR(75),
	@KeyId UNIQUEIDENTIFIER,
	@AuditActionId INT = NULL OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql NVARCHAR(MAX)
	
	IF @AuditActionId IS NULL
	BEGIN
		INSERT INTO AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		VALUES (@AuditTypeId, @UserId, @ActionDesc, GETDATE(), @RemoteHost, 'AuditJobs')

		SELECT @AuditActionId = @@IDENTITY
	END
	
	IF @KeyId IS NOT NULL
	BEGIN
		INSERT INTO AuditJobs
		SELECT @AuditActionId, * FROM Jobs WHERE JobId = @KeyId
		
		INSERT INTO AuditJobPersonnel
		SELECT @AuditActionId, * FROM JobPersonnel WHERE JobID = @KeyId
		
		INSERT INTO AuditJarRuns
		SELECT @AuditActionId, * FROM JarRuns WHERE JobId = @KeyId
		
		INSERT INTO AuditJarRunTools
		SELECT @AuditActionId, * FROM JarRunTools WHERE JobId = @KeyId
		
		INSERT INTO AuditJarRunForecastTools
		SELECT @AuditActionId, * FROM JarRunForecastTools WHERE JarRunId IN (SELECT JarRunId FROM JarRuns WHERE JobId = @KeyId)

		INSERT INTO AuditJarActivities
		SELECT @AuditActionId, * FROM JarActivities WHERE JobId = @KeyId
		
		INSERT INTO AuditJarActivityPersonnel
		SELECT @AuditActionId, * FROM JarActivityPersonnel WHERE JobId = @KeyId
		
		INSERT INTO AuditGFAIncidents
		SELECT @AuditActionId, * FROM GFAIncidents WHERE JobId = @KeyId
		
		INSERT INTO AuditGFAComponents
		SELECT @AuditActionId, * FROM GFAComponents WHERE GFAId IN (SELECT GFAId FROM GFAIncidents WHERE JobId = @KeyId)
	END

	SET NOCOUNT OFF;
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_AuditNCRFailedComponents]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



Create PROCEDURE [dbo].[usp_AuditNCRFailedComponents] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId int,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditNCRFailedComponents')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditNCRFailedComponents
		select @AuditActionId, * from NCRFailedComponents where RequestId = @KeyId

	end

	SET NOCOUNT OFF;
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_AuditNCRRequests]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



Create PROCEDURE [dbo].[usp_AuditNCRRequests] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId int,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditRequests')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditRequests
		select @AuditActionId, * from Requests where RequestId = @KeyId

		insert into AuditNCRRequests
		select @AuditActionId, * from NCRRequests where RequestId = @KeyId

	end

	SET NOCOUNT OFF;
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_AuditPFTWO]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_AuditPFTWO] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId uniqueidentifier,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditPFTWO')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditPFTWO
		select @AuditActionId, * from PFTWO where PFTWOId = @KeyId

		insert into AuditPFTBoardFirmwares
		select @AuditActionId, * from PFTBoardFirmwares where PFTWOId = @KeyId
	end

	SET NOCOUNT OFF;
	
END

GO
/****** Object:  StoredProcedure [dbo].[usp_AuditRequestApprovals]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



Create PROCEDURE [dbo].[usp_AuditRequestApprovals] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId int,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditRequestApprovals')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditRequestApprovals
		select @AuditActionId, * from RequestApprovals where RequestId = @KeyId
	
	end

	SET NOCOUNT OFF;
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_AuditRequestForms]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[usp_AuditRequestForms] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId int,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'RequestForms')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditRequestForms
		select @AuditActionId, * from RequestForms where RequestFormId = @KeyId

		insert into AuditRequestFormDetails
		select @AuditActionId, * from RequestFormDetails where RequestFormId = @KeyId

	end

	SET NOCOUNT OFF;
	
END




GO
/****** Object:  StoredProcedure [dbo].[usp_AuditRequestParts]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



Create PROCEDURE [dbo].[usp_AuditRequestParts] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId int,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditRequestParts')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditRequestParts
		select @AuditActionId, * from RequestParts where RequestId = @KeyId
	
	end

	SET NOCOUNT OFF;
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_AuditRequestSubscriptions]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



Create PROCEDURE [dbo].[usp_AuditRequestSubscriptions] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId int,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditRequestSubscriptions')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditRequestSubscriptions
		select @AuditActionId, * from RequestSubscriptions where RequestId = @KeyId
	
	end

	SET NOCOUNT OFF;
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_AuditScorecards]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_AuditScorecards]
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId uniqueidentifier,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditScorecards')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditScorecards
		select @AuditActionId, * from Scorecards where ScorecardId = @KeyId
	end

	SET NOCOUNT OFF;
	
END


GO
/****** Object:  StoredProcedure [dbo].[usp_AuditToolMods]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_AuditToolMods] 
	@AuditTypeId int,
	@UserId int, 
	@ActionDesc varchar(2048),
	@RemoteHost varchar(75),
	@KeyId uniqueidentifier,
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @sql nvarchar(max)
	
	if @AuditActionId is null
	begin
		insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		values (@AuditTypeId, @UserId, @ActionDesc, getdate(), @RemoteHost, 'AuditToolMods')

		select @AuditActionId = @@Identity
	end
	
	if @KeyId is not null
	begin
		insert into AuditToolMods
		select @AuditActionId, * from ToolMods where ToolModId = @KeyId

		insert into AuditToolModParts
		select @AuditActionId, * from ToolModParts where ToolModId = @KeyId
	end

	SET NOCOUNT OFF;
	
END


GO
/****** Object:  StoredProcedure [dbo].[usp_AvgDayInLocationReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_AvgDayInLocationReport]
	@xmlData XML
AS

declare @sqlQuery varchar(max)

declare @selectFields varchar(4000)
set @selectFields = ''

declare @groupFields varchar(4000)
set @groupFields = ''


declare @pageSize VARCHAR(10)
declare @startIndex VARCHAR(10)
declare @partNumValue varchar(256)
declare @locationValue varchar(256)
declare @insertColumn1 varchar(512)
declare @insertColumn2 varchar(512)

declare @internalColumn1 varchar(512)


set @insertColumn1 = ''
set @insertColumn2 = ''

set @internalColumn1 = ''

declare @sortField varchar(256)
declare @sortDir varchar(64)
declare @whereClause varchar(max)

set @pageSize = 25
set @startIndex = 0
set @sortField = ''
set @sortDir = ' ASC '

select 
@locationValue = T.c.value('(ReportDetail/text())[1]','varchar(256)'),
@partNumValue = T.c.value('(ReportPartNumDetail/text())[1]','varchar(256)'),
@startIndex = T.c.value('(StartIndex/text())[1]','VARCHAR(10)'),
@pageSize = T.c.value('(PageSize/text())[1]','VARCHAR(10)'),
@sortField = T.c.value('(SortField/text())[1]','varchar(256)'),
@sortDir = T.c.value('(SortDir/text())[1]','varchar(64)'),
@whereClause = T.c.value('(WhereClause/text())[1]','varchar(max)')
from
@xmlData.nodes('/Filters') T(c)

if @sortDir is null
	set @sortDir = ' ASC '

if @locationValue = 'Region'
begin
	set @insertColumn1 = ',Region'
	set @internalColumn1 = 'cr.RegionDesc'
end
else if @locationValue = 'Country'
begin
	set @insertColumn1 = ',Region,Country'
	set @internalColumn1 = 'cr.RegionDesc,cc.CountryDesc'
end
else if @locationValue = 'BranchPlant'
begin
	set @insertColumn1 = ',Region,Country,BranchPlant'
	set @internalColumn1 = 'cr.RegionDesc,cc.CountryDesc,cbp.BranchPlant,cbp.CompanyName '
end

if @partNumValue = 'ToolPanel'
begin
	set @insertColumn2 = ',ToolPanel'
end
else if @partNumValue = 'ToolPanel,ToolCode'
begin
	set @insertColumn2 = ',ToolPanel,ToolCode'
end
else if @partNumValue = 'ToolPanel,ToolCode,ItemNum'
begin
	set @insertColumn2 = ',ToolPanel,ToolCode,ItemNum'
end



if @locationValue = '' 
begin
	set @internalColumn1 = @insertColumn2
end
else
begin
	set @groupFields = @internalColumn1
	if @partNumValue <> ''
	begin
		set @groupFields = @groupFields  + @insertColumn2
	end
end

SET @sqlQuery = 'SELECT ' + @internalColumn1 + @insertColumn2 + ', 
				count(distinct(f.FixedAssetId)) as NumAsset,
				sum(isNull(NumDaysInBranchPlant,0)) as NumDays,
				ISNULL(SUM (fs.NumDaysInBranchPlant), 0) / ISNULL(COUNT(DISTINCT(f.FixedAssetId)), 1) AS AvgDayInBranchPlant
from FixedAssetSnapshots fs WITH(NOLOCK)
left join FixedAssets as f WITH(NOLOCK) on f.FixedAssetId = fs.FixedAssetId
left join ItemNums as i WITH(NOLOCK) on i.ItemNum = f.InventoryItemNum
left join BranchPlants cbp (NOLOCK) on cbp.BranchPlant = fs.BranchPlant 
left join Regions cr (NOLOCK) on cr.Region = cbp.Region
left join Countries cc (NOLOCK) on cc.Country = cbp.Country '
+ @whereClause + '
group by ' + @groupFields

EXECUTE (@sqlQuery)

DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, * From ( ' + 
		@sqlQuery + ') query ) page 
		where page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir

EXECUTE(@pagingSql)

DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sqlQuery + ') a'
EXECUTE (@sqlString)




GO
/****** Object:  StoredProcedure [dbo].[usp_BuildECNProcessTaskStatusReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_BuildECNProcessTaskStatusReport]
	@DeptCode varchar(1024)
AS
BEGIN

DECLARE @DistinctTaskdesc TABLE (
	DisplayName varchar(1024),
	DisplayOrder varchar(100),
	IsAdded bit not null default(0)
)

DECLARE @DisplayName varchar(1024) 

DECLARE @sqlString nvarchar(max)
DECLARE @columnSql varchar(max) 
DECLARE @inSql varchar(max) 

;

with Tasks as
(
	select WorkflowTaskId, ParentWorkflowTaskId, TaskDesc, DisplayOrder
	from WorkflowTask (NOLOCK) wt
	join Workflow (NOLOCK) w on wt.WorkflowId = w.WorkflowId
	join WorkflowCategory (NOLOCK) wc on w.WorkflowCategoryId = wc.WorkflowCategoryId
	where CategoryDesc = @DeptCode
	and wt.IsIncluded = 1
)
, TaskTree as
(
	select t.WorkflowTaskId, t.ParentWorkflowTaskId, t.TaskDesc, convert(varchar(100), right('00'+convert(varchar, t.DisplayOrder), 2)) as DisplayOrder
	from Tasks t
	where ParentWorkflowTaskId is null
	union all
	select t.WorkflowTaskId, t.ParentWorkflowTaskId, t.TaskDesc, convert(varchar(100), convert(varchar, d.DisplayOrder) + ',' + right('00'+convert(varchar, t.DisplayOrder), 2)) as DisplayOrder
	from Tasks t
	join TaskTree d on t.ParentWorkflowTaskId = d.WorkflowTaskId
)
INSERT INTO @DistinctTaskdesc (DisplayName, DisplayOrder)
select replace(TaskDesc, '.', '~'), min(DisplayOrder) as DisplayOrder
from TaskTree t where TaskDesc <>''
group by TaskDesc
order by min(DisplayOrder), TaskDesc

IF EXISTS (select * from @DistinctTaskdesc)
BEGIN
		SET @columnSql = ''
		SET @inSql = ''
		WHILE EXISTS (SELECT Top 1 DisplayName FROM @DistinctTaskdesc WHERE IsAdded = 0) 
		BEGIN
			SELECT TOP 1 
				@DisplayName = DisplayName
			FROM @DistinctTaskdesc
			WHERE IsAdded = 0
			
			IF @columnSql != ''
			BEGIN
				SET @columnSql = @columnSql + ','
				SET @inSql = @inSql + ','
			END

			SET @columnSql = @columnSql + '['+@DisplayName+']'
			SET @inSql = @inSql + '['+ @DisplayName +']'

			UPDATE @DistinctTaskdesc SET IsAdded = 1 WHERE DisplayName = @DisplayName
		END 

	SET @sqlString = '
		with Result as (
			select ECNProcessId, ECNNumber,TechnicalInfo,DateAdded, replace(TaskDesc, ''.'', ''~'') as TaskDesc, OptionText from 
			workflow (NOLOCK) w
			join workflowcategory (NOLOCK) wc on wc.workflowcategoryid = w.workflowcategoryid
			join workflowtask (NOLOCK) wt on wt.workflowid = w.workflowid
			join selectlists (NOLOCK) sl on sl.optionvalue = wt.taskstatus
			where categorydesc = ''' + @DeptCode + '''
			and isincluded = 1
			and status <> ''X''
			and sl.selectlistname = ''ECNTaskStatus''
		)
		select ECNNumber, TechnicalInfo, DateAdded, ' + @columnSql + '
		 from Result
		pivot ( min(OptionText) for TaskDesc in ( '+ @inSql + ' )) p
		order by dateadded
		'
print @sqlString
	EXECUTE sp_executesql @sqlString
END
ELSE
BEGIN
	SET @sqlString = '
		with Result as (
			select ECNProcessId, ECNNumber,TechnicalInfo,DateAdded, replace(TaskDesc, ''.'', ''~'') as TaskDesc, OptionText from 
			workflow (NOLOCK) w
			join workflowcategory (NOLOCK) wc on wc.workflowcategoryid = w.workflowcategoryid
			join workflowtask (NOLOCK) wt on wt.workflowid = w.workflowid
			join selectlists (NOLOCK) sl on sl.optionvalue = wt.taskstatus
			where categorydesc = ''' + @DeptCode + '''
			and isincluded = 1
			and status <> ''X''
			and sl.selectlistname = ''ECNTaskStatus''
		)
		select ECNNumber, TechnicalInfo, DateAdded
		 from Result		
		order by dateadded
		'

	EXECUTE sp_executesql @sqlString
END	
END




/****** Object:  StoredProcedure [dbo].[usp_CannedReportByRegion]    Script Date: 08/05/2014 18:39:44 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_CannedReportByMonth]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [dbo].[usp_CannedReportByMonth]
	@xmlData as xml	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	-- Create Start And End Date Period
	Declare @startDate as DateTime
	Declare @endDate as DateTime
	
	Declare @cDate as DateTime
	Set @cDate = Convert(datetime,convert(varchar, GetDate(), 102))
		
	Set @startDate = Convert(varchar(4),YEAR(DateAdd(year,-1,@cDate)))  + '-07-01 00:00:00.000'
	Set @endDate = Convert(varchar(4),YEAR(DateAdd(year,1,@cDate)))  + '-06-30 23:59:59.000'
	
    -- Insert statements for procedure here
    Create table #tmpMonthData
    (
		id int identity,
		Month int,
		Year int,
		ToolPanel varchar(25),
		Qty int,
		Cost decimal(18,4)
    )
    
    Create table #tblMonthData
    (
		id int identity
    )
    
    Create table #tblMonthColumn
    (
		ID int identity,
		ColumnName varchar(25)
    )
    
    INSERT INTO #tmpMonthData
    Select MONTH(RequiredDate) as Month,YEAR(RequiredDate) as Year,ToolPanel,SUM(QtyOutstanding) as QtyOutstanding,SUM(QtyOutstanding * StandardCost) as Cost
	from vwOutstandingRequestItems
	WHERE RequiredDate BETWEEN @startDate AND @endDate
	GROUP by MONTH(RequiredDate),YEAR(RequiredDate),ToolPanel
	ORDER by MONTH(RequiredDate),YEAR(RequiredDate),ToolPanel
	
	INSERT INTO #tblMonthColumn
	Select Distinct ToolPanel from #tmpMonthData ORDER by ToolPanel
	
	IF Exists(Select * from #tblMonthColumn)
	BEGIN
		
		Declare @sql as varchar(max)
		
		Set @sql = ' ALTER TABLE #tblMonthData ADD Month int,Year int'
		Select @sql = @sql + ',[' + ISNULL(ColumnName,'') + 'Qty]' + ' int, [' + ISNULL(ColumnName,'') + 'Cost]' + ' decimal(18,4) ' from #tblMonthColumn
		Set @sql = @sql + ',[TotalQty] int,[TotalCost] decimal(18,4)'
		--print @sql
		Exec(@sql)
		
		INSERT INTO #tblMonthData(Month,Year)
		Select Month,Year from #tmpMonthData GROUP by Month,Year ORDER by Year,Month
		
		INSERT INTO #tblMonthData(Month)
		Select -1 -- Grand Total
		
		Declare @index as int
		Declare @maxIndex as int
		Declare @toolPanel as varchar(25)
		Declare @tpQty as varchar(max)
		Declare @tpCost as varchar(max)
		
		Set @index = 1
		Set @maxIndex = 0
		Set @toolPanel = ''
		Set @tpQty = '0'
		Set @tpCost = '0'
				
		Select @maxIndex = MAX(ID) from #tblMonthColumn
		
		WHILE(@index <= @maxIndex)
		BEGIN
			Select @toolPanel = ColumnName from #tblMonthColumn Where id = @index
						
			Set @sql = 'Update #tblMonthData Set [' + @toolPanel + 'Qty] = a.Qty, [' + @toolPanel + 'Cost] = a.Cost from #tmpMonthData a Where a.Month = #tblMonthData.Month AND a.Year = #tblMonthData.Year AND a.ToolPanel = ''' + @toolPanel + ''''
			exec(@sql)
			
			Set @tpQty = @tpQty + '+ISNULL([' + @toolPanel + 'Qty],0)'
			Set @tpCost = @tpCost + '+ISNULL([' + @toolPanel + 'Cost],0)'
			
			Set @sql = 'Update #tblMonthData Set [' + @toolPanel + 'Qty] = (Select SUM(ISNULL([' + @toolPanel + 'Qty], 0)) from #tblMonthData) Where Month = -1'
			exec(@sql)
			
			Set @sql = 'Update #tblMonthData Set [' + @toolPanel + 'Cost] = (Select SUM(ISNULL([' + @toolPanel + 'Cost], 0)) from #tblMonthData) Where Month = -1'
			exec(@sql)
					
			Set @index = @index + 1
		END
		
		Set @sql = 'Update #tblMonthData Set [TotalQty] = (' + @tpQty + '), [TotalCost]=(' + @tpCost + ')'
		exec(@sql)

	END
	
	
	Select * from #tblMonthData
	Select * from #tblMonthColumn
	
	
	drop table #tmpMonthData
	drop table #tblMonthColumn
	drop table #tblMonthData

END




GO
/****** Object:  StoredProcedure [dbo].[usp_CannedReportByRegion]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_CannedReportByRegion]
	@xmlData as xml		
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	-- Create Start And End Date Period
	Declare @startDate as DateTime
	Declare @endDate as DateTime
	
	Declare @cDate as DateTime
	Set @cDate = Convert(datetime,convert(varchar, GetDate(), 102))
		
	Set @startDate = Convert(varchar(4),YEAR(DateAdd(year,-1,@cDate)))  + '-07-01 00:00:00.000'
	Set @endDate = Convert(varchar(4),YEAR(DateAdd(year,1,@cDate)))  + '-06-30 23:59:59.000'
	
    -- Insert statements for procedure here
    Create table #tmpRegionData
    (
		id int identity,
		Region varchar(50),
		ToolPanel varchar(25),
		Qty int,
		Cost decimal(18,4)
    )
    
    Create table #tblRegionData
    (
		id int identity
    )
    
    Create table #tblRegionColumn
    (
		ID int identity,
		ColumnName varchar(25)
    )
    
    INSERT INTO #tmpRegionData
    Select Region,ToolPanel,SUM(QtyOutstanding) as Qty,SUM(QtyOutstanding * StandardCost) as Cost
    from
		(
		Select ToolPanel,QtyOutstanding,StandardCost,IsNull(a.FromRegion,'')as Region
		from vwOutstandingRequestItems (NOLOCK) a
		WHERE RequiredDate BETWEEN @startDate AND @endDate
		) a
	GROUP by Region,ToolPanel
	
	INSERT INTO #tblRegionColumn
	Select Distinct ToolPanel from #tmpRegionData ORDER by ToolPanel
	
	IF Exists(Select * from #tblRegionColumn)
	BEGIN
		Declare @sql as varchar(max)
		Set @sql = ' ALTER TABLE #tblRegionData ADD Region varchar(50) '
		Select @sql = @sql + ',[' + ISNULL(ColumnName,'') + 'Qty]' + ' int, [' + ISNULL(ColumnName,'') + 'Cost]' + ' decimal(18,4) ' from #tblRegionColumn
		Set @sql = @sql + ',[TotalQty] int,[TotalCost] decimal(18,4)'
		Exec(@sql)
		
		INSERT INTO #tblRegionData(Region)
		Select Distinct Region from #tmpRegionData ORDER by Region
		
		INSERT INTO #tblRegionData(Region)
		Select -1 -- Grand Total
		
		Declare @index as int
		Declare @maxIndex as int
		Declare @toolPanel as varchar(25)
		Declare @tpQty as varchar(max)
		Declare @tpCost as varchar(max)
		
		Set @index = 1
		Set @maxIndex = 0
		Set @toolPanel = ''
		Set @tpQty = '0'
		Set @tpCost = '0'
				
		Select @maxIndex = MAX(ID) from #tblRegionColumn
		
		WHILE(@index <= @maxIndex)
		BEGIN
			Select @toolPanel = ColumnName from #tblRegionColumn Where id = @index
						
			Set @sql = 'Update #tblRegionData Set [' + @toolPanel + 'Qty] = a.Qty, [' + @toolPanel + 'Cost] = a.Cost from #tmpRegionData a Where a.Region = #tblRegionData.Region AND a.ToolPanel = ''' + @toolPanel + ''''
			exec(@sql)
			
			Set @tpQty = @tpQty + '+ISNULL([' + @toolPanel + 'Qty],0)'
			Set @tpCost = @tpCost + '+ISNULL([' + @toolPanel + 'Cost],0)'
			
			Set @sql = 'Update #tblRegionData Set [' + @toolPanel + 'Qty] = (Select SUM(ISNULL([' + @toolPanel + 'Qty], 0)) from #tblRegionData) Where Region = ''-1'''
			exec(@sql)
			
			Set @sql = 'Update #tblRegionData Set [' + @toolPanel + 'Cost] = (Select SUM(ISNULL([' + @toolPanel + 'Cost], 0)) from #tblRegionData) Where Region = ''-1'''
			exec(@sql)
						
			Set @index = @index + 1
		END
		
		Set @sql = 'Update #tblRegionData Set [TotalQty] = (' + @tpQty + '), [TotalCost] = (' + @tpCost + ')'
		exec(@sql)
		
	END
	
	
	
	Select * from #tblRegionData
	Select * from #tblRegionColumn
	
	
	drop table #tmpRegionData
	drop table #tblRegionColumn
	drop table #tblRegionData

END





/****** Object:  StoredProcedure [dbo].[usp_ClientJobMapBranchPlants]    Script Date: 08/05/2014 18:41:01 ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_ApproveDispositionByEmail]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Yogesh Mane
-- Create date: 03/29/2017
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_ApproveDispositionByEmail] 
	-- Add the parameters for the stored procedure here
	@AssetRepairTrackId UNIQUEIDENTIFIER,
	@WFTNetworkId varchar(100),
	@Comments VARCHAR(MAX)
AS
BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	DECLARE @Status VARCHAR(100), @UserId INT, @CanApproveDisposition BIT, @ReturnMessage VARCHAR(200)
	DECLARE @ApproverLevel int, @ProductLine varchar(50), @LocId VARCHAR(16)
	DECLARE @DispositionType int, @BranchPlant int

	SET @CanApproveDisposition = 0 

	IF NOT EXISTS(SELECT 1 FROM AssetRepairTrack WHERE AssetRepairTrackId = @AssetRepairTrackId)
		BEGIN
			SET @ReturnMessage = 'DB : Invalid AIRT';
		END
	ELSE
		BEGIN
		
			SELECT @UserId = UserId FROM Users WHERE WFTUserName = @WFTNetworkId

			SELECT @ApproverLevel = dbo.udf_GetAIRTApproverLevel(f.ProductLineCode , a.FromBranchPlant, @UserId)
			FROM AssetRepairTrack a (NOLOCK)
			JOIN FixedAssets f (NOLOCK) on a.FixedAssetId = f.FixedAssetId
			WHERE AssetRepairTrackId = @AssetRepairTrackId
		
			SELECT	@Status = Status, 
					@DispositionType = Disposition,
					@BranchPlant = ShipToLocation 
			FROM ARTDispositions WHERE AssetRepairTrackId = @AssetRepairTrackId ORDER BY DateAdded DESC


			IF (ISNULL(@ApproverLevel,0) < 1)
				BEGIN
					SET @ReturnMessage = 'DB : User do not have permission to approve disposition';					
				END
			ELSE IF (@Status IS NULL)
				BEGIN
					SET @ReturnMessage = 'DB : Disposition needs to be submitted first to be approved';
				END
			ELSE IF (@Status = 'Approved')
				BEGIN
					SET @ReturnMessage = 'DB : Disposition is already approved';
				END
			ELSE IF (@Status = 'Submitted')
				BEGIN
				
					IF(@ApproverLevel > 0)
						BEGIN
							SET @Status = CASE WHEN @ApproverLevel = 2 THEN 'Approved' ELSE 'District Approved' END
							--exec dbo.usp_CBM_SubmitDisposition @AssetRepairTrackId, @UserId, @UserId, @DispositionType, @BranchPlant, @Comments, 1
							SET @CanApproveDisposition = 1
						END
					ELSE
						BEGIN
							SET @ReturnMessage = 'DB : User does not have rights to approve disposition';
						END
				END
			ELSE IF(@Status = 'District Approved')
				BEGIN
					IF(@ApproverLevel > 1)
						BEGIN
							SET @Status = CASE WHEN @ApproverLevel = 2 THEN 'Approved' ELSE 'District Approved' END
							--exec dbo.usp_CBM_SubmitDisposition @AssetRepairTrackId, @UserId, @UserId, @DispositionType, @BranchPlant, @Comments, 1
							SET @CanApproveDisposition = 1
						END
					ELSE
						BEGIN
							SET @ReturnMessage = 'DB : User does not have rights to approve disposition';												
						END
				END
		END

		SELECT @CanApproveDisposition [CanApproveDisposition], @ReturnMessage [ReturnMessage], @DispositionType [DispositionType], @BranchPlant [BranchPlant]

		IF (@CanApproveDisposition = 0)
		BEGIN
			SELECT TOP 1 *  FROM [ARTDispositions] (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId ORDER BY DateAdded DESC
		END

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetAIRTPFTWOs]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  Sachin Mhalungekar
-- Create date: 09/20/2019  
-- Description: Get PFT WO data for AIRT Edit Screen  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_CBM_GetAIRTPFTWOs]   
 -- Add the parameters for the stored procedure here  
 @AssetRepairTrackId uniqueidentifier
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
  
 SELECT 'TI' [Type], ITPFTWOId [PFTId], '' [Wo_No], 0 [Active] FROM AssetRepairTrack (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId  
 UNION ALL  
 SELECT 'SR' [Type], PFTWOId [PFTId], '' [Wo_No], [Active]   
 FROM AssetRepairTrack (NOLOCK) ART   
   INNER JOIN PFTWO (NOLOCK) PO ON ART.AssetRepairTrackId = PO.AssetRepairTrackId   
 WHERE ART.AssetRepairTrackId = @AssetRepairTrackId AND PO.PFTType = 1  
 UNION ALL  
 SELECT 'PM' [Type], PFTWOId [PFTId], PO.WO_NO [Wo_No], [Active]   
 FROM AssetRepairTrack (NOLOCK) ART  
   INNER JOIN PFTWO PO ON ART.AssetRepairTrackId = PO.AssetRepairTrackId  
 WHERE ART.AssetRepairTrackId = @AssetRepairTrackId AND PO.PFTType = 3  

END 

GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetAssetData]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 10/25/2016
-- Description:	Get Asset Data 
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_GetAssetData] 
	-- Add the parameters for the stored procedure here
	@AssetRepairTrackId uniqueidentifier,
	@UserId int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @startDateTimeAssetHistory DATETIME,@RunId  uniqueidentifier=NEWID();
    SET @startDateTimeAssetHistory = GETDATE();

	-- Get Asset History
	exec dbo.usp_CBM_GetAssetHistory @AssetRepairTrackId, @UserId

	exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetAssetData', 'Get Asset History', @startDateTimeAssetHistory

	-- Get Job History
	SET @startDateTimeAssetHistory=GETDATE();
	exec dbo.usp_CBM_GetJobHistory @AssetRepairTrackId, @UserId

	exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetAssetData', 'Get Job History', @startDateTimeAssetHistory
	
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetAssetHistory]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 10/25/2016
-- Description:	Get Asset History
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_GetAssetHistory] 
	-- Add the parameters for the stored procedure here
	@AssetRepairTrackId uniqueidentifier,
	@UserId int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @FixedAssetId Uniqueidentifier, @CurrencyCode Varchar(10)
	DECLARE @StartDateTimeAssetInfo DATETIME;
    SET @StartDateTimeAssetInfo = GETDATE();

	SELECT @FixedAssetId = FixedAssetId FROM AssetRepairTrack (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId
	SELECT @CurrencyCode = ' ' + ISNULL(CurrencyCode,'USD') FROM FixedAssets WHERE FixedAssetId = @FixedAssetId;

	SELECT
    a.FixedAssetID,
    CAST(SUM(a.[LifetimeOperHrs]) AS DECIMAL(18,2)) AS [LifetimeOperHrs],
    CAST(SUM(a.[LifetimeCircHrs]) AS DECIMAL(18,2)) AS [LifetimeCircHrs],
    CAST(SUM(a.[LifetimeDrillingHrs]) AS DECIMAL(18,2)) AS [LifetimeDrillingHrs],
    CAST(SUM(a.[SinceLastRepairOperHrs]) AS DECIMAL(18,2)) AS [SinceLastRepairOperHrs],
    CAST(SUM(a.[SinceLastRepairCircHrs]) AS DECIMAL(18,2)) AS [SinceLastRepairCircHrs],
    CAST(SUM(a.[SinceLastRepairDrillHrs]) AS DECIMAL(18,2)) AS [SinceLastRepairDrillHrs],
    SUM(a.[CountOfRuns]) AS [CountOfRuns],
    SUM(a.[LifetimeTFFs]) AS [LifetimeTFFs],
	SUM(a.[LifeTimeNPTHrs]) AS [LifeTimeNPTHrs],
    SUM(a.[LifetimeFailures]) AS [LifetimeFailures],
    MAX(a.[BornOnDate]) AS [BornOnDate],
    CAST(SUM(a.[AcquisitionCost]) As VARCHAR(50)) + @CurrencyCode AS [AcquisitionCost],
    CAST(SUM(a.[NetBookValue]) As VARCHAR(50)) + @CurrencyCode AS [NetBookValue],
    SUM(a.[NoOfDaysInStatus]) AS [NoOfDaysInStatus],
	
	(
		SELECT ISNULL(MIN(DATEDIFF(dd, ISNULL(s.DateAdded, GETDATE()), GETDATE())),0) [DaysSinceLastPFTStep]  
			FROM AssetRepairTrack a (NOLOCK)
			JOIN PFTWO w (NOLOCK) ON ISNULL(a.SRPFTWOId, a.ITPFTWOId) = w.PFTWOId
			JOIN PFTWOSeq s (NOLOCK) ON s.PFTWOId = w.PFTWOId
		WHERE w.FixedAssetId = @FixedAssetId
	) [DaysSinceLastPFTStep]

  /*************************/
  /***Lifetime Asset Data***/
  /*************************/
  FROM 
  (SELECT
		tc1.FixedAssetID,
		SUM(r1.OperHrs) AS [LifetimeOperHRs],
		SUM(r1.circhrs) AS [LifetimeCircHrs],
		SUM(r1.drillhrs) AS [LifetimeDrillingHrs],
		COUNT(tc1.runid) AS [CountOfRuns],
		SUM(CONVERT(int, tc1.TFF)) AS [LifetimeTFFs],
		SUM(CONVERT(int, tc1.csi)) AS [LifetimeFailures],
		SUM(CONVERT(decimal(18,2), tc1.LostTime)) [LifeTimeNPTHrs],
		0 [NoOfDaysInStatus],
		0 [AcquisitionCost],
		0 [NetBookValue],
		'' [BornOnDate],
		0 [SinceLastRepairOperHrs],
		0 [SinceLastRepairCirchrs],
		0 [SinceLastRepairDrillHrs]
  FROM ToolStringComponentInfo tc1 (NOLOCK)
  INNER JOIN Runs r1 (NOLOCK) ON r1.runid = tc1.runid
  WHERE @fixedassetid = tc1.FixedAssetID
  GROUP BY tc1.fixedassetid

  UNION ALL

  /*************************/
  /***Basic Asset Data******/
  /*************************/
  SELECT
    f2.fixedassetid,
    0 [LifetimeOperHrs],
    0 [LifetimeCircHrs],
    0 [LifetimeDrillingHrs],
    0 [CountOfRuns],
    0 [LifetimeTFFs],
    0 [LifetimeFailures],
	0 [LifeTimeNPTHrs],
    DATEDIFF(D, f2.LastStatusChangeDate, GETDATE()) AS [NoOfDaysInStatus],
    f2.cost AS [AcquisitionCost],
    f2.NetBookValue AS [NetBookValue],
    f2.DateAcquired AS [BornOnDate],
    0 [SinceLastRepairOperHrs],
    0 [SinceLastRepairCircHrs],
    0 [SinceLastRepairDrillHrs]
  FROM FixedAssets f2 (NOLOCK) 
  WHERE @fixedassetid = f2.FixedAssetId

  UNION ALL

  SELECT
    tca.fixedassetid,
    0 [LifetimeOperHrs],
    0 [LifetimeCircHrs],
    0 [LifetimeDrillingHrs],
    0 [CountOfRuns],
    0 [LifetimeTFFs],
	0 [LifeTimeNPTHrs],
    0 [LifetimeFailures],
    0 [NoOfDaysInStatus],
    0 [AcquisitionCost],
    0 [NetBookValue],
    '' [BornOnDate],
    SUM(RA.OperHrs) AS [SinceLastRepairOperHrs],
    SUM(RA.circHrs) AS [SinceLastRepairCircHrs],
    SUM(RA.DrillHrs) AS [SinceLastRepairDrillHrs]
  FROM Runs ra (NOLOCK) 
  INNER JOIN ToolStringComponentInfo tca (NOLOCK) ON tca.RunID = ra.RunId
  INNER JOIN ( ---Get latest S&R PFT for "Last Repair Date"
		  SELECT
			MAX(pwa.dateadded) AS "Dateadded",
			art.FixedAssetId
		  FROM AssetRepairTrack art (NOLOCK)
		  INNER JOIN PFTWO pwa (NOLOCK) ON pwa.PFTWOId = art.SRPFTWOId
		  WHERE art.FixedAssetId = @fixedassetid
			AND pwa.DateAdded < (SELECT DateAdded FROM AssetRepairTrack WHere AssetRepairTrackId = @AssetRepairTrackId)
		  GROUP BY art.FixedAssetId

  ) B ON b.fixedassetid = tca.fixedassetid AND ra.EndDate > b.Dateadded  
  WHERE @fixedassetid = tca.FixedAssetID
  GROUP BY tca.fixedassetid) a
  GROUP BY a.fixedassetid

  Declare @RunId uniqueidentifier =NEWID();
  exec dbo.usp_MyAdvisor_Logs @RunId,'usp_CBM_GetAssetHistory', 'Get Asset History', @StartDateTimeAssetInfo

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetAssetInformation]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 10/25/2016
-- Description:	Get Asset Information
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_GetAssetInformation] 
	-- Add the parameters for the stored procedure here
	@AssetRepairTrackId uniqueidentifier,
	@UserId int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @FixedAssetId Uniqueidentifier
    DECLARE @MCApprover int, @ProductLine varchar(50), @LocId VARCHAR(16)  
	SET @MCApprover = 0

	SELECT  @LocId = ISNULL(a.ShipToBranchPlant,FromBranchPlant),   
			@ProductLine = f.ProductLineCode,
			@FixedAssetId = a.FixedAssetId
    FROM AssetRepairTrack a (NOLOCK)  
			JOIN FixedAssets f (NOLOCK) on a.FixedAssetId = f.FixedAssetId   
       WHERE AssetRepairTrackId = @AssetRepairTrackId 

	   IF EXISTS(SELECT DISTINCT u.UserId 
					FROM MCApprovers a (NOLOCK)
					INNER JOIN Users u (NOLOCK) ON u.UserId = a.UserId
					INNER JOIN UserProfile p (NOLOCK) on u.UserId = p.UserId			-- for Approval delegate
					LEFT JOIN Users u1 (NOLOCK) ON p.ApproverDelegate = u1.UserName
					WHERE ApprovalCode='AIRT' 
					AND ApproverType = 10
					AND (u.UserId = @UserId OR (u1.UserId = @UserId AND p.ApproverDelegateExpiryDate > GETDATE()))
					AND ((ProductLine = @ProductLine AND LocId = @LocId OR (ProductLine = @ProductLine AND LocId IS NULL)  
						OR (LocId = @LocId AND ProductLine IS NULL) OR (ProductLine IS NULL AND LocId IS NULL ) )))
		BEGIN
			SET @MCApprover = 1
		END
		ELSE IF EXISTS (SELECT * FROM UserRoles(NOLOCK) WHERE UserId = @UserId AND RoleId in (1))
		BEGIN
			SET @MCApprover = 1
		END
	 
	SELECT 
		-- General Info
		a.ARTNumber, 
		a.Status, 
		(SELECT ISNULL(LastName,'') + ', '+ ISNULL(FirstName,'') FROM Users Where UserName = a.AddedBy) [AddedBy], 
		a.DateAdded [DateCreated], 
		f.FixedAssetId,
		a.SerialNum, 
		a.AssetNumber, 
		a.Revision, 
		(SELECT Status FROM PartStatus (NOLOCK) WHERE Code = f.EquipmentStatus) + ' ('+f.EquipmentStatus+')' [AssetStatus],  
		f.EquipmentStatus,
		a.RNItemNum,
		a.ItemNum InventoryItemNum,
		a.ItemDesc [ItemDescription],
		a.NCRNumber,
		a.ItemNum,
		-- Location Info
		f.BranchPlant,
		f.FixedAssetBranchPlant,
		a.FromBranchPlant [FromBranchPlant],
		b.CompanyName [FromBranchBranchDesc],
		a.ShipToBranchPlant [ShipToBranchPlant],
		b1.CompanyName [ShipToBranchDesc],
		f.IsDisposed [IsDisposed],
		--CASE WHEN f.EquipmentStatus = 'IN' THEN 1 ELSE 0 END [IsInstalled],
		--CASE WHEN f.EquipmentStatus = 'IT' THEN 1 ELSE 0 END [IsInTransit],
		--CASE WHEN f.EquipmentStatus = 'PT' THEN 1 ELSE 0 END [IsInPendingTransit],
		b1.IsNonLiveLocation,
		CASE WHEN (SELECT COUNT(*) FROM UserRoles (NOLOCK) Where UserId = @UserId AND RoleId IN (1, 1001)) > 0 THEN 1 ELSE 0 END [IsAIRTAdmin],
		a.DispatchNumber ,
		d.JDECustomerNumber [CustomerId], 
		c.CustomerName,
		(SELECT EcnRestriction FROM Itemnums where Itemnum=a.ItemNum) [ItemNumEcnRestriction],
		@MCApprover [AIRTAdminClose]
	FROM AssetRepairTrack a (NOLOCK)
	LEFT JOIN vwFixedAssets f (NOLOCK) ON a.FixedAssetId = f.FixedAssetId
	LEFT JOIN BranchPlants b (NOLOCK) ON b.BranchPlant = a.FromBranchPlant
	LEFT JOIN BranchPlants b1 (NOLOCK) ON b1.BranchPlant = f.BranchPlant
	LEFT JOIN dispatches d (NOLOCK)  on d.DispatchNumber = a.DispatchNumber
	LEFT JOIN customers c (NOLOCK)on C.CustomerNumber = d.JDECustomerNumber
	Where a.AssetRepairTrackId = @AssetRepairTrackId

END






GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetAutoPopulateBusinessUnit]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_CBM_GetAutoPopulateBusinessUnit] 
	-- Add the parameters for the stored procedure here
	@SerialNumber Varchar(100),
	@BranchPlant Varchar(100),
	@DeliveryTicketNumber Varchar(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

select top 1 bu2.BusinessUnit
from Dispatches d
join DispatchInstances di on di.DispatchId = d.DispatchId and di.shiptype = 'dt-return'
join DispatchInstanceItems dii on dii.DispatchInstanceId = di.dispatchinstanceid
 join BusinessUnits bu1 on bu1.BusinessUnit = dii.RevenueBusinessUnit
 join glcodes g on g.GLCode = bu1.GLCode
 join BusinessUnits bu2 on bu2.branchplant = bu1.BranchPlant and bu2.BUType = 'cc' and bu1.ToCountryCode = bu2.ToCountryCode and
 bu2.BranchPlant =@BranchPlant
and g.RollUpJobType = bu2.GLCode and bu2.Department = 'dpr'  and bu2.IsActive=1
join FixedAssets f on f.BranchPlant=bu2.BranchPlant and f.SerialNum=dii.SerialNum
where DispatchNumber= @DeliveryTicketNumber and
dii.SerialNum=@SerialNumber
--select '11' RevenueBusinessUnit
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetControlDefaults]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- =============================================  
-- Author:   Yogesh Mane  
-- Create date: 10/25/2016  
-- Description: Get Control Show/Hide or Enable/Disable flags  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_CBM_GetControlDefaults]  
 -- Add the parameters for the stored procedure here  
 @AssetRepairTrackId uniqueidentifier,  
 @UserId int  
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
  
   DECLARE @CanCloseAIRT bit = 0,  
   @CanReopenAIRT bit = 0,  
   @CanUpdateAssetStatus bit = 0,  
   @CanUpdateJobInfo bit = 0,  
   @CanViewDisposition bit = 0,  
   @CanViewPMDisposition bit = 0,  
   @CanViewAIRTDisposition bit = 0,  
   @CanUpdateFailureCode bit = 1,  
   @CanPerformDisposition bit = 0,  
   @CanPerformPMDisposition bit = 0,  
   @CanPerformPMRollback bit = 0,  
   @CanPerformRollback bit = 0,  
   @CanViewSRPFT bit = 0,  
   @CanCreateSRPFT bit = 0,  
   @CanViewWorkOrder bit = 0,  
   @CanViewTCN bit = 0,  
   @CanViewFirmware bit = 0,  
   @IsTIPFTPassed bit = 0,  
   @CanSendApprovalEmail bit=0,  
   @CanAddPMDisposition bit = 1,  
   @CanReActivateTIPFT bit = 0,  
   @CanReActivateSRPFT bit = 0,  
   @CanApproveJDEWorkOrder bit =0  
      
 DECLARE @ApproverLevel int, @ProductLine varchar(50), @LocId VARCHAR(16)  
 DECLARE @FixedAssetId Uniqueidentifier, @TIPFTPassed bit = 0  
  
  DECLARE @startDateTime DATETIME,@RunId  uniqueidentifier=NEWID();
  SET @startDateTime = GETDATE();


 -- SELECT @FixedAssetId = FixedAssetId FROM AssetRepairTrack (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId  
  
 SELECT @LocId = a.FromBranchPlant,   
        @ProductLine = f.ProductLineCode,
		@FixedAssetId = a.FixedAssetId
       FROM AssetRepairTrack a (NOLOCK)  
		JOIN FixedAssets f (NOLOCK) on a.FixedAssetId = f.FixedAssetId   
       Where AssetRepairTrackId = @AssetRepairTrackId  
  
	EXEC usp_MyAdvisor_Logs  @RunId,'usp_CBM_GetControlDefaults', '01.FixedAssets Info', @startDateTime, 1 

	
 -- Approver level  
 SET @startDateTime = GETDATE();
 SELECT @ApproverLevel = dbo.udf_GetAIRTApproverLevel(@ProductLine, @LocId, @UserId)  
	EXEC usp_MyAdvisor_Logs  @RunId,'usp_CBM_GetControlDefaults', '02.Approver level', @startDateTime, 1 
 
 -- TCN Flag  
 SET @startDateTime = GETDATE();  
 IF EXISTS(SELECT CNPartId FROM vwChangeNoticeParts v (NOLOCK) Where FixedAssetId = @FixedAssetId OR TopLevelFixedAssetId = @FixedAssetId AND NotApplicable = 0)  
 BEGIN  
  SET @CanViewTCN = 1  
 END  
	EXEC usp_MyAdvisor_Logs  @RunId,'usp_CBM_GetControlDefaults', '03.TCN Flag ', @startDateTime, 1 
  
 -- If Firmware present   
 SET @startDateTime = GETDATE();  
 IF EXISTS(SELECT ItemNum FROM SensorItemNums (NOLOCK) WHERE ItemNum = (SELECT InventoryItemNum FROM FixedAssets (NOLOCK) Where FixedAssetId = @FixedAssetId))  
  BEGIN  
   SET @CanViewFirmware = 1  
  END  
    ELSE IF EXISTS(SELECT BoardItemNum FROM BoardItemNums (NOLOCK) WHERE BoardItemNum = (SELECT InventoryItemNum FROM FixedAssets (NOLOCK) Where FixedAssetId = @FixedAssetId))  
  BEGIN  
   SET @CanViewFirmware = 1  
  END  
 EXEC usp_MyAdvisor_Logs  @RunId,'usp_CBM_GetControlDefaults', '04.Firmware present', @startDateTime, 1 
  
 -- iF AIRT is open  
 SET @startDateTime = GETDATE();  
 IF EXISTS(SELECT AssetRepairTrackId FROM AssetRepairTrack (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND Status = 'Open')  
 BEGIN  
   
  SELECT @CanUpdateAssetStatus = 1, @CanUpdateJobInfo = 1  
  
  -- If T&I PFT is closed  
  IF EXISTS(SELECT AssetRepairTrackId FROM PFTWO p (NOLOCK) WHERE p.PFTType = 2 AND AssetRepairTrackId = @AssetRepairTrackId AND p.Active = 0)  
   BEGIN  
  
   IF EXISTS(SELECT AssetRepairTrackId FROM PMDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId)  
    BEGIN  
     SELECT @CanViewDisposition = 1, @CanViewPMDisposition = 1  
    END  
  
    -- T & I Passed  
    IF (NOT EXISTS (SELECT * FROM PFTWO p (NOLOCK)   
         JOIN PFTWOSeq ps (NOLOCK) on p.PFTWOId = ps.PFTWOId  
         WHERE p.AssetRepairTrackId = @AssetRepairTrackId AND p.PFTType = 2 AND ps.PFTResult = 'F')  
		 AND 
		 NOT EXISTS (SELECT * FROM PFTWO p (NOLOCK) 
		 WHERE p.AssetRepairTrackId = @AssetRepairTrackId AND p.PFTType = 2 AND p.Active = 0 AND p.ReasonForChange = 'Closed – Skip to Services'))
     BEGIN  
      --print 'T & I Passed'  
      SET @TIPFTPassed = 1  	  
  
      IF EXISTS(SELECT AssetRepairTrackId FROM AssetRepairTrack (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND IsRedTag = 1)  
       BEGIN  
        SET @CanViewDisposition = 1  
  END  
  
      -- T&I passed and PM checks are not present or no PFT needs to be created then AIRT can be closed  
	   ELSE  IF NOT EXISTS(SELECT * FROM PMDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND (Active = 1 OR DispositionOption = 1)) 
       BEGIN  
        SET @CanCloseAIRT = 1  
       END  
     END        
	
    -- T&I is failed  
    IF(@TIPFTPassed = 0)  
     -- If T&I Failed then show disposition  
     BEGIN  
       
      SELECT @CanViewDisposition = 1  
      --SELECT @CanUpdateFailureCode = 1  
     END  
  
    -- Irrespective of T&I passed/failed check PM disposition complete or not  
    IF (@CanViewPMDisposition = 1)  
     BEGIN  
  
      -- If PM Disposition still not complete  
      IF EXISTS(SELECT AssetRepairTrackId FROM PMDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND Active = 1)  
       BEGIN  
         
        --check if user has permission to perform PM Disposition   
        IF (@ApproverLevel >= 1)  
         BEGIN  
          SET @CanPerformPMDisposition = 1  
         END  
       END  
       -- If PM Disposition still not complete  
      IF NOT  EXISTS(SELECT AssetRepairTrackId FROM ARTDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND Status = 'Approved')  
       BEGIN  
         
        --check if user has permission to perform PM Disposition   
        IF (@ApproverLevel >= 2)  
         BEGIN  
          SET @CanPerformPMRollback = 1  
         END  
       END  
     END  
  
    -- If AIRT Disposition can be viewed or not  
    -- Check disposition tab is visible  
    IF (@CanViewDisposition = 1)  
     BEGIN  
        
      -- Check PM Check Exists but nothing active  
      IF ((@CanViewPMDisposition = 1) AND NOT EXISTS (SELECT AssetRepairTrackId FROM PMDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND Active = 1))  
       BEGIN  
          
        -- If T&I PFT failed or Create PM PFT option selected  
		IF ((@TIPFTPassed = 0) OR EXISTS (SELECT AssetRepairTrackId FROM PMDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND DispositionOption = 1)
        OR EXISTS(SELECT AssetRepairTrackId FROM AssetRepairTrack (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND IsRedTag = 1))  
         BEGIN  
          SELECT @CanViewAIRTDisposition = 1  
         END  
       END  
      ELSE IF NOT EXISTS(SELECT AssetRepairTrackId FROM PMDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId)  
        BEGIN  
         SELECT @CanViewAIRTDisposition = 1  
        END  
  
     END  
  
  
    IF(@CanViewAIRTDisposition = 1)  
    BEGIN  
       
     -- If Disposition done  
     IF EXISTS(SELECT AssetRepairTrackId FROM ARTDispositions (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId AND Status = 'Approved')  
      BEGIN  
  
        -- Disposition done but tool needs to undergo repair  
        IF EXISTS(SELECT AssetRepairTrackId FROM ARTDispositions (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId AND Status = 'Approved' AND Disposition IN (1,2))  
         BEGIN    
          SELECT @CanViewSRPFT = 1  
  
		  IF (@ApproverLevel = 2)  
		  BEGIN  
		   SET @CanPerformRollback = 1  
		  END 

          -- If S&R PFT not created   
          IF NOT EXISTS(SELECT AssetRepairTrackId FROM PFTWO (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId AND PFTType = 1)  
           BEGIN  
               
            SELECT @CanCreateSRPFT = 1  

 END  
        -- If S&R PFT is created  
          ELSE  
           BEGIN  
               
            SELECT @CanViewWorkOrder = 1  
			
            -- if All PFTs are closed, AIRT can be closed  
            IF NOT EXISTS(SELECT AssetRepairTrackId FROM PFTWO (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId AND Active = 1)  
             BEGIN    
			 
			 --if all PFTS are CLOSED and want to create new SRPFT
			 --SELECT @CanCreateSRPFT = 0
			
			 --if S&R PFT is closed but not on last step then allow users to create new S&R PFT
			 -- this is for Rollback PFT bug
			 DECLARE @LatestSRPFTId uniqueidentifier, @PftConfigId uniqueidentifier, @LastPFTWOSequence int, @LastPFTConfigSequence int

			 SELECT TOP 1 @LatestSRPFTId = PFTWOId, @PftConfigId = PFTConfigId FROM PFTWO (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId AND PFTType = 1 order by DateAdded desc
			 SELECT @LastPFTWOSequence = Seq from PFTConfigSeq (NOLOCK) WHERE PFTConfigSeqId = (SELECT top 1 PFTConfigSeqId FROM PFTWOSeq WHERE PFTWOId = @LatestSRPFTId Order By DateAdded desc)
			 SELECT @LastPFTConfigSequence = MAX(Seq) from PFTConfigSeq (NOLOCK) WHERE PFTConfigId = @PftConfigId

			 print @LastPFTWOSequence
			 print @LastPFTConfigSequence

			 IF (ISNULL(@LastPFTWOSequence,1) != ISNULL(@LastPFTConfigSequence,0)) 
					OR (ISNULL(@LastPFTWOSequence,1) = 1 AND ISNULL(@LastPFTConfigSequence,0) = 1 AND EXISTS(SELECT PFTWOId FROM PFTWO WHERE PFTWOId = @LatestSRPFTId AND ReasonForChange = 'Closed – Rollback'))
				 BEGIN
						SELECT @CanCreateSRPFT = 1
				 END
			 ELSE
				BEGIN
						SELECT @CanCloseAIRT = 1
						SELECT @CanPerformRollback = 0  
				END

			 
		     SELECT @CanUpdateFailureCode = 0  

             IF EXISTS(SELECT a.WorkOrderNum FROM AssetRepairTrack a (NOLOCK) INNER JOIN Workorders wo (NOLOCK) on a.WorkOrderNum = wo.WorkOrderNum WHERE  a.AssetRepairTrackId = @AssetRepairTrackId and Lower(wo.Status)='open')               
             BEGIN  
              SELECT @CanReActivateSRPFT = 1  
             END  
             END  
			--ELSE   
			-- BEGIN	
			--		IF (@ApproverLevel = 2)  
			--		BEGIN  
			--		 SET @CanPerformRollback = 1  
			--		END 
			-- END
         END  
         END  
        ELSE  
          
         BEGIN  
          -- If Disposition done with 'Use As Is' or 'Scrap'  
          SELECT @CanCloseAIRT = 1  
          SELECT @CanPerformRollback = 1  
          SELECT @CanUpdateFailureCode = 0  
         END  
      END  
     ELSE  
      -- if disposition yet pending  
      BEGIN  
            
       DECLARE @DispositionStatus VARCHAR(50)  
       SELECT @DispositionStatus = Status FROM ARTDispositions (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId  
  
       IF(NOT(@DispositionStatus = 'Approved' OR @DispositionStatus = ''))  
       BEGIN  
        SET @CanSendApprovalEmail = 1  
       END         
  
       IF EXISTS(SELECT AssetRepairTrackId FROM AssetRepairTrack (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId)  
           OR ( @TIPFTPassed=1 AND @CanViewAIRTDisposition=1)  
        BEGIN  
  
         IF(@DispositionStatus IS NULL)  
          BEGIN  
           SET @CanPerformDisposition = 1  
          END  
         ELSE   
          BEGIN  
            IF (@ApproverLevel > 0)  
            BEGIN  
              
              IF(@DispositionStatus = 'Submitted')  
               BEGIN  
                SET @CanPerformDisposition = 1  
               END  
              ELSE  
               BEGIN  
                IF (@ApproverLevel = 2)  
                BEGIN  
                 SET @CanPerformDisposition = 1  
                END  
               END  
            END  
  
          END  
         END             
      END  
    END  
   END  
  
  -- IF S&R PFT is closed  
  IF EXISTS (SELECT AssetRepairTrackId FROM PFTWO p (NOLOCK) WHERE p.PFTType = 1 AND AssetRepairTrackId = @AssetRepairTrackId 
		AND p.Active = 0)  
   BEGIN  
    SET @CanAddPMDisposition = 0  
   END  
  
  IF NOT EXISTS(SELECT AssetRepairTrackId FROM ARTDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId)  
  BEGIN  
   SET @CanReActivateTIPFT = 1  
  END  
  
  EXEC usp_MyAdvisor_Logs  @RunId,'usp_CBM_GetControlDefaults', '05.iF AIRT is open ', @startDateTime, 1 
 END  
  
 -- If AIRT is closed  
 ELSE  
  BEGIN  

   SELECT @CanCloseAIRT = 0,  
   @CanReopenAIRT = 1,  
   @CanUpdateAssetStatus = 0,  
   @CanUpdateJobInfo = 0,  
   @CanViewDisposition = (SELECT CASE WHEN COUNT(AssetRepairTrackId) > 0 THEN 1 ELSE 0 END FROM ARTDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId),  
   @CanViewPMDisposition = (SELECT CASE WHEN COUNT(AssetRepairTrackId) > 0 THEN 1 ELSE 0 END FROM PMDispositions (NOLOCK)  WHERE AssetRepairTrackId = @AssetRepairTrackId),  
   @CanViewAIRTDisposition = (SELECT CASE WHEN COUNT(AssetRepairTrackId) > 0 THEN 1 ELSE 0 END FROM ARTDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId),  
   @CanUpdateFailureCode = 0,  
   @CanPerformDisposition = 0,  
   @CanViewSRPFT = (SELECT CASE WHEN COUNT(AssetRepairTrackId) > 0 THEN 1 ELSE 0 END FROM PFTWO (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND PFTType = 1 AND Active IN (0,1)),  
   @CanCreateSRPFT = 0,  
   @CanViewWorkOrder = (SELECT CASE WHEN COUNT(AssetRepairTrackId) > 0 THEN 1 ELSE 0 END FROM PFTWO (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND PFTType = 1 AND Active IN (0,1)),  
   @CanAddPMDisposition = 0  
  EXEC usp_MyAdvisor_Logs  @RunId,'usp_CBM_GetControlDefaults', '06.iF AIRT is closed ', @startDateTime, 1 
  
  END  
    
  -- Approver level  
  SET @startDateTime = GETDATE();  
 SELECT @CanApproveJDEWorkOrder =   (SELECT CASE WHEN COUNT(userId) > 0 THEN 1 ELSE 0 END FROM UserRoles (NOLOCK) WHERE userId = @UserId and (RoleId = 506 OR RoleId = 1))  
  EXEC usp_MyAdvisor_Logs  @RunId,'usp_CBM_GetControlDefaults', '07.iF AIRT is closed ', @startDateTime, 1 

 -- Insert statements for procedure here  
 SET @startDateTime = GETDATE();  
 SELECT  @CanCloseAIRT      [CanCloseAIRT],  
   @CanReopenAIRT			[CanReopenAIRT],  
   @CanUpdateAssetStatus	[CanUpdateAssetStatus],  
   @CanUpdateJobInfo		[CanUpdateJobInfo],  
   @CanViewFirmware		    [CanViewFirmware],  
   @CanViewDisposition	    [CanViewDisposition],  
   @CanViewPMDisposition	[CanViewPMDisposition],  
   @CanViewAIRTDisposition  [CanViewAIRTDisposition],  
   @CanUpdateFailureCode    [CanUpdateFailureCode],  
   @CanPerformDisposition   [CanPerformDisposition],  
   @CanPerformPMDisposition [CanPerformPMDisposition],  
   @CanPerformPMRollback    [CanPerformPMRollback],  
   @CanPerformRollback   [CanPerformRollback],  
   @CanViewSRPFT         [CanViewSRPFT],  
   @CanCreateSRPFT       [CanCreateSRPFT],  
   @CanViewWorkOrder     [CanViewWorkOrder],  
   @CanViewTCN			 [CanViewTCN],  
   @ApproverLevel		 [ApproverLevel],  
   @TIPFTPassed			 [IsTIPFTPassed],  
   @CanSendApprovalEmail  [CanSendApprovalEmail],  
   @CanAddPMDisposition  [CanAddPMDisposition],  
   @CanReActivateTIPFT   [CanReActivateTIPFT],  
   @CanReActivateSRPFT   [CanReActivateSRPFT],  
   @CanApproveJDEWorkOrder  [CanApproveJDEWorkOrder],  
   CAST((SELECT CASE WHEN COUNT(userId) >  0 THEN 1 ELSE 0 END FROM UserRoles (NOLOCK) WHERE (RoleId = 520 OR RoleId = 1) AND UserId = @UserId) AS BIT) AS [CanViewWindchillDoc]  
  
  EXEC usp_MyAdvisor_Logs  @RunId,'usp_CBM_GetControlDefaults', '08.Insert Statements Last ', @startDateTime, 1 


END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetControlDefaults1]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:   Yogesh Mane  
-- Create date: 10/25/2016  
-- Description: Get Control Show/Hide or Enable/Disable flags  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_CBM_GetControlDefaults1]  
 -- Add the parameters for the stored procedure here  
 @AssetRepairTrackId uniqueidentifier,  
 @UserId int  
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
  
   DECLARE @CanCloseAIRT bit = 0,  
   @CanReopenAIRT bit = 0,  
   @CanUpdateAssetStatus bit = 0,  
   @CanUpdateJobInfo bit = 0,  
   @CanViewDisposition bit = 0,  
   @CanViewPMDisposition bit = 0,  
   @CanViewAIRTDisposition bit = 0,  
   @CanUpdateFailureCode bit = 1,  
   @CanPerformDisposition bit = 0,  
   @CanPerformPMDisposition bit = 0,  
   @CanPerformPMRollback bit = 0,  
   @CanPerformRollback bit = 0,  
   @CanViewSRPFT bit = 0,  
   @CanCreateSRPFT bit = 0,  
   @CanViewWorkOrder bit = 0,  
   @CanViewTCN bit = 0,  
   @CanViewFirmware bit = 0,  
   @IsTIPFTPassed bit = 0,  
   @CanSendApprovalEmail bit=0,  
   @CanAddPMDisposition bit = 1,  
   @CanReActivateTIPFT bit = 0,  
   @CanReActivateSRPFT bit = 0,  
   @CanApproveJDEWorkOrder bit =0  
      
 DECLARE @ApproverLevel int, @ProductLine varchar(50), @LocId VARCHAR(16)  
 DECLARE @FixedAssetId Uniqueidentifier, @TIPFTPassed bit = 0  
  
 SELECT @FixedAssetId = FixedAssetId FROM AssetRepairTrack (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId  
  
 SELECT @LocId = a.FromBranchPlant,   
        @ProductLine = f.ProductLineCode  
       FROM AssetRepairTrack a (NOLOCK)  
       JOIN FixedAssets f (NOLOCK) on a.FixedAssetId = f.FixedAssetId   
       Where AssetRepairTrackId = @AssetRepairTrackId  
  
 -- Approver level  
 SELECT @ApproverLevel = dbo.udf_GetAIRTApproverLevel(@ProductLine, @LocId, @UserId)  
  
 -- TCN Flag  
   
 IF EXISTS(SELECT * FROM vwChangeNoticeParts v (NOLOCK) Where FixedAssetId = @FixedAssetId OR TopLevelFixedAssetId = @FixedAssetId AND NotApplicable = 0)  
 BEGIN  
  SET @CanViewTCN = 1  
 END  
  
 -- If Firmware present   
 IF EXISTS(SELECT ItemNum FROM SensorItemNums (NOLOCK) WHERE ItemNum = (SELECT InventoryItemNum FROM FixedAssets (NOLOCK) Where FixedAssetId = @FixedAssetId))  
  BEGIN  
   SET @CanViewFirmware = 1  
  END  
    ELSE IF EXISTS(SELECT BoardItemNum FROM BoardItemNums (NOLOCK) WHERE BoardItemNum = (SELECT InventoryItemNum FROM FixedAssets (NOLOCK) Where FixedAssetId = @FixedAssetId))  
  BEGIN  
   SET @CanViewFirmware = 1  
  END  
     
  
 -- iF AIRT is open  
 IF EXISTS(SELECT * FROM AssetRepairTrack (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND Status = 'Open')  
 BEGIN  
   
  SELECT @CanUpdateAssetStatus = 1, @CanUpdateJobInfo = 1  
  
  -- If T&I PFT is closed  
  IF EXISTS(SELECT * FROM PFTWO p (NOLOCK) WHERE p.PFTType = 2 AND AssetRepairTrackId = @AssetRepairTrackId AND p.Active = 0)  
   BEGIN  
  
   IF EXISTS(SELECT * FROM PMDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId)  
    BEGIN  
     SELECT @CanViewDisposition = 1, @CanViewPMDisposition = 1  
    END  
  
    -- T & I Passed  
    IF (NOT EXISTS (SELECT * FROM PFTWO p (NOLOCK)   
         JOIN PFTWOSeq ps (NOLOCK) on p.PFTWOId = ps.PFTWOId  
         WHERE p.AssetRepairTrackId = @AssetRepairTrackId AND p.PFTType = 2 AND ps.PFTResult = 'F')  
		 AND 
		 NOT EXISTS (SELECT * FROM PFTWO p (NOLOCK) 
		 WHERE p.AssetRepairTrackId = @AssetRepairTrackId AND p.PFTType = 2 AND p.Active = 0 AND p.ReasonForChange = 'Closed – Skip to Services'))
     BEGIN  
      --print 'T & I Passed'  
      SET @TIPFTPassed = 1  	  
  
      IF EXISTS(SELECT * FROM AssetRepairTrack (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND IsRedTag = 1)  
       BEGIN  
        SET @CanViewDisposition = 1  
  END  
  
      -- T&I passed and PM checks are not present or no PFT needs to be created then AIRT can be closed  
	   ELSE  IF NOT EXISTS(SELECT * FROM PMDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND (Active = 1 OR DispositionOption = 1)) 
       BEGIN  
        SET @CanCloseAIRT = 1  
       END  
     END        
	
	  -- view disposition if TI PFT has no seq and is not active
	 -- IF EXISTS (SELECT * FROM PFTWO p (NOLOCK) WHERE p.AssetRepairTrackId = @AssetRepairTrackId AND p.PFTType = 2 AND p.Active = 0 AND p.ReasonForChange = 'Closed – Skip to Services')
	 -- BEGIN  
		--SET @TIPFTPassed = 0 
  --      SET @CanViewDisposition = 1  
  --     END  	

    -- T&I is failed  
    IF(@TIPFTPassed = 0)  
     -- If T&I Failed then show disposition  
     BEGIN  
       
      SELECT @CanViewDisposition = 1  
      --SELECT @CanUpdateFailureCode = 1  
     END  
  
    -- Irrespective of T&I passed/failed check PM disposition complete or not  
    IF (@CanViewPMDisposition = 1)  
     BEGIN  
  
      -- If PM Disposition still not complete  
      IF EXISTS(SELECT * FROM PMDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND Active = 1)  
       BEGIN  
         
        --check if user has permission to perform PM Disposition   
        IF (@ApproverLevel >= 1)  
         BEGIN  
          SET @CanPerformPMDisposition = 1  
         END  
       END  
       -- If PM Disposition still not complete  
      IF NOT  EXISTS(SELECT * FROM ARTDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND Status = 'Approved')  
       BEGIN  
         
        --check if user has permission to perform PM Disposition   
        IF (@ApproverLevel >= 2)  
         BEGIN  
          SET @CanPerformPMRollback = 1  
         END  
       END  
     END  
  
    -- If AIRT Disposition can be viewed or not  
    -- Check disposition tab is visible  
    IF (@CanViewDisposition = 1)  
     BEGIN  
        
      -- Check PM Check Exists but nothing active  
      IF ((@CanViewPMDisposition = 1) AND NOT EXISTS (SELECT * FROM PMDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND Active = 1))  
       BEGIN  
          
        -- If T&I PFT failed or Create PM PFT option selected  
		IF ((@TIPFTPassed = 0) OR EXISTS (SELECT * FROM PMDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND DispositionOption = 1)
        OR EXISTS(SELECT * FROM AssetRepairTrack (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND IsRedTag = 1))  
         BEGIN  
          SELECT @CanViewAIRTDisposition = 1  
         END  
       END  
      ELSE IF NOT EXISTS(SELECT * FROM PMDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId)  
        BEGIN  
         SELECT @CanViewAIRTDisposition = 1  
        END  
  
     END  
  
  
    IF(@CanViewAIRTDisposition = 1)  
    BEGIN  
       
     -- If Disposition done  
     IF EXISTS(SELECT * FROM ARTDispositions (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId AND Status = 'Approved')  
      BEGIN  
  
        -- Disposition done but tool needs to undergo repair  
        IF EXISTS(SELECT * FROM ARTDispositions (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId AND Status = 'Approved' AND Disposition IN (1,2))  
         BEGIN    
          SELECT @CanViewSRPFT = 1  

		  print 'here 1'
  
		  IF (@ApproverLevel = 2)  
		  BEGIN  
		   SET @CanPerformRollback = 1  
		  END 

          -- If S&R PFT not created   
          IF NOT EXISTS(SELECT * FROM PFTWO (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId AND PFTType = 1)  
           BEGIN  
               
            SELECT @CanCreateSRPFT = 1  
  
            -- disposition rollback possible if SRPFT not yet created  
            --IF (@ApproverLevel = 2)  
            --BEGIN  
            -- SET @CanPerformRollback = 1  
            --END

		END  
        -- If S&R PFT is created  
          ELSE  
           BEGIN  
               
			print 'here 2'

            SELECT @CanViewWorkOrder = 1  
			
            -- if All PFTs are closed, AIRT can be closed  
            IF NOT EXISTS(SELECT * FROM PFTWO (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId AND Active = 1)  
             BEGIN    

			 --if all PFTS are CLOSED and want to create new SRPFT
			 --SELECT @CanCreateSRPFT = 0
			
			 --if S&R PFT is closed but not on last step then allow users to create new S&R PFT
			 -- this is for Rollback PFT bug
			 DECLARE @LatestSRPFTId uniqueidentifier, @PftConfigId uniqueidentifier, @LastPFTWOSequence int, @LastPFTConfigSequence int

			 SELECT TOP 1 @LatestSRPFTId = PFTWOId, @PftConfigId = PFTConfigId FROM PFTWO (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId AND PFTType = 1 order by DateAdded desc
			 SELECT @LastPFTWOSequence = Seq from PFTConfigSeq (NOLOCK) WHERE PFTConfigSeqId = (SELECT top 1 PFTConfigSeqId FROM PFTWOSeq WHERE PFTWOId = @LatestSRPFTId Order By DateAdded desc)
			 SELECT @LastPFTConfigSequence = MAX(Seq) from PFTConfigSeq (NOLOCK) WHERE PFTConfigId = @PftConfigId

			 print @LastPFTWOSequence
			 print @LastPFTConfigSequence

			 IF (ISNULL(@LastPFTWOSequence,1) != ISNULL(@LastPFTConfigSequence,0)) 
					--OR (ISNULL(@LastPFTWOSequence,1) = 1 AND ISNULL(@LastPFTConfigSequence,0) = 1 
					--AND EXISTS(SELECT * FROM PFTWO WHERE PFTWOId = @LatestSRPFTId AND ReasonForChange = 'Closed – Rollback'))
				 BEGIN
						SELECT @CanCreateSRPFT = 1
				 END
			 ELSE
				BEGIN
						SELECT @CanCloseAIRT = 1
						SELECT @CanPerformRollback = 0  
				END

			 
		     SELECT @CanUpdateFailureCode = 0  

             IF EXISTS(SELECT a.WorkOrderNum FROM AssetRepairTrack a (NOLOCK) INNER JOIN Workorders wo (NOLOCK) on a.WorkOrderNum = wo.WorkOrderNum WHERE  a.AssetRepairTrackId = @AssetRepairTrackId and Lower(wo.Status)='open')               
             BEGIN  
              SELECT @CanReActivateSRPFT = 1  
             END  
             END  
			--ELSE   
			-- BEGIN	
			--		IF (@ApproverLevel = 2)  
			--		BEGIN  
			--		 SET @CanPerformRollback = 1  
			--		END 
			-- END
         END  
         END  
        ELSE  
          
         BEGIN  
          -- If Disposition done with 'Use As Is' or 'Scrap'  
          SELECT @CanCloseAIRT = 1  
          SELECT @CanPerformRollback = 1  
          SELECT @CanUpdateFailureCode = 0  
         END  
      END  
     ELSE  
      -- if disposition yet pending  
      BEGIN  
            
       DECLARE @DispositionStatus VARCHAR(50)  
       SELECT @DispositionStatus = Status FROM ARTDispositions (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId  
  
       IF(NOT(@DispositionStatus = 'Approved' OR @DispositionStatus = ''))  
       BEGIN  
        SET @CanSendApprovalEmail = 1  
       END         
  
       IF EXISTS(SELECT * FROM AssetRepairTrack (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId)  
           OR ( @TIPFTPassed=1 AND @CanViewAIRTDisposition=1)  
        BEGIN  
  
         IF(@DispositionStatus IS NULL)  
          BEGIN  
           SET @CanPerformDisposition = 1  
          END  
         ELSE   
          BEGIN  
            IF (@ApproverLevel > 0)  
            BEGIN  
              
              IF(@DispositionStatus = 'Submitted')  
               BEGIN  
                SET @CanPerformDisposition = 1  
               END  
              ELSE  
               BEGIN  
                IF (@ApproverLevel = 2)  
                BEGIN  
                 SET @CanPerformDisposition = 1  
                END  
               END  
            END  
  
          END  
         END             
      END  
    END  
   END  
  
  -- IF S&R PFT is closed  
  IF EXISTS (SELECT * FROM PFTWO p (NOLOCK) WHERE p.PFTType = 1 AND AssetRepairTrackId = @AssetRepairTrackId 
		AND p.Active = 0)  
   BEGIN  
    SET @CanAddPMDisposition = 0  
   END  
  
  IF NOT EXISTS(SELECT * FROM ARTDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId)  
  BEGIN  
   SET @CanReActivateTIPFT = 1  
  END  
  
 END  
  
 -- If AIRT is closed  
 ELSE  
  BEGIN  
   SELECT @CanCloseAIRT = 0,  
   @CanReopenAIRT = 1,  
   @CanUpdateAssetStatus = 0,  
   @CanUpdateJobInfo = 0,  
   @CanViewDisposition = (SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM ARTDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId),  
   @CanViewPMDisposition = (SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM PMDispositions (NOLOCK)  WHERE AssetRepairTrackId = @AssetRepairTrackId),  
   @CanViewAIRTDisposition = (SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM ARTDispositions (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId),  
   @CanUpdateFailureCode = 0,  
   @CanPerformDisposition = 0,  
   @CanViewSRPFT = (SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM PFTWO (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND PFTType = 1 AND Active IN (0,1)),  
   @CanCreateSRPFT = 0,  
   @CanViewWorkOrder = (SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM PFTWO (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId AND PFTType = 1 AND Active IN (0,1)),  
   @CanAddPMDisposition = 0  
  END  
    
  -- Approver level  
 SELECT @CanApproveJDEWorkOrder =   (SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM UserRoles (NOLOCK) WHERE userId = @UserId and (RoleId = 506 OR RoleId = 1))  
  
 -- Insert statements for procedure here  
 SELECT  @CanCloseAIRT    [CanCloseAIRT],  
   @CanReopenAIRT    [CanReopenAIRT],  
   @CanUpdateAssetStatus  [CanUpdateAssetStatus],  
   @CanUpdateJobInfo   [CanUpdateJobInfo],  
   @CanViewFirmware   [CanViewFirmware],  
   @CanViewDisposition   [CanViewDisposition],  
   @CanViewPMDisposition  [CanViewPMDisposition],  
   @CanViewAIRTDisposition  [CanViewAIRTDisposition],  
   @CanUpdateFailureCode  [CanUpdateFailureCode],  
   @CanPerformDisposition  [CanPerformDisposition],  
   @CanPerformPMDisposition [CanPerformPMDisposition],  
   @CanPerformPMRollback  [CanPerformPMRollback],  
   @CanPerformRollback   [CanPerformRollback],  
   @CanViewSRPFT    [CanViewSRPFT],  
   @CanCreateSRPFT    [CanCreateSRPFT],  
   @CanViewWorkOrder   [CanViewWorkOrder],  
   @CanViewTCN     [CanViewTCN],  
   @ApproverLevel    [ApproverLevel],  
   @TIPFTPassed    [IsTIPFTPassed],  
   @CanSendApprovalEmail  [CanSendApprovalEmail],  
   @CanAddPMDisposition  [CanAddPMDisposition],  
   @CanReActivateTIPFT   [CanReActivateTIPFT],  
   @CanReActivateSRPFT   [CanReActivateSRPFT],  
   @CanApproveJDEWorkOrder  [CanApproveJDEWorkOrder],  
   CAST((SELECT CASE WHEN COUNT(*) >  0 THEN 1 ELSE 0 END FROM UserRoles (NOLOCK) WHERE (RoleId = 520 OR RoleId = 1) AND UserId = @UserId) AS BIT) AS [CanViewWindchillDoc]  
END

GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetDispositionApprovers]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:	Shailesh Patil
-- Create date: 3 Feb 2017
-- Description:	Get Disposition Approvers list based on branchplant and required approver level
-- =============================================

CREATE PROCEDURE [dbo].[usp_CBM_GetDispositionApprovers]
	@AssetRepairTrackId uniqueidentifier
AS

BEGIN
	SET NOCOUNT ON;

	--Get LocationID and ApproverLevel from last submitted disposition request only
	DECLARE @RequiredApproverLevel tinyint
	DECLARE @LocId varchar(20)

	SELECT TOP 1 @RequiredApproverLevel = ApprovalLevel, @LocId = ShipToLocation FROM ARTDispositions WHERE AssetRepairTrackId = @AssetRepairTrackId 
	ORDER BY DateAdded DESC

	print @locid

	-- Level 1 User List
	IF(@RequiredApproverLevel <= 1)
	BEGIN
		SELECT DISTINCT (U.LastName + ', ' + U.FirstName) UserName, U.Email 
		FROM MCApprovers A(nolock)
		INNER JOIN Users U (nolock) ON U.UserId = A.UserId
		WHERE ApprovalCode = 'AIRT'
		AND ((ApproverType >= 5 AND LocId = @LocId) OR ApproverType = 10)
		AND u.Active = 1
		ORDER BY 1
	END
	-- Level 2 User List
	ELSE
	BEGIN
		SELECT DISTINCT (U.LastName + ', ' + U.FirstName) UserName, U.Email 
		FROM MCApprovers A (nolock)
		INNER JOIN Users U (nolock) ON U.UserId=A.UserId
		WHERE ApprovalCode = 'AIRT'
		AND ((ApproverType > 5 AND LocId = @LocId) OR ApproverType = 10)
		AND u.Active = 1
		ORDER BY 1
	END

	SELECT ITPFTWOId 
	FROM AssetRepairTrack(nolock) WHERE AssetRepairTrackId = @AssetRepairTrackId
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetDispositionFailureCodes]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:	Yogesh Mane
-- Create date: 7 Oct 2016
-- Description:	Get Disposition Failure Codes
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_GetDispositionFailureCodes]
	@AssetRepairTrackId uniqueidentifier
AS

BEGIN

	SET NOCOUNT ON;

	
 --Failure codes
	SELECT 
		f.FailureCodeId,
		f1.FailureCategoryCode + f2.FailureSubCategoryCode + f.FailureCode [FailureCode],
		f1.FailureCategoryId,
		f2.FailureSubCategoryId,
		F.FailureDesc FailureCodeDesc,
		P.FailureCodeId ProcedureCodeId,
	    P1.FailureCategoryCode + P2.FailureSubCategoryCode + P.FailureCode [ProcedureCode],
		P.FailureDesc ProcedureCodeDesc,
		O.FailureCodeId OutOfSpecCodeId,
		O1.FailureCategoryCode + O2.FailureSubCategoryCode + O.FailureCode [OutOfSpecCode],

		O.FailureDesc OutOfSpecCodeDesc,
		A.ItemNum,A.Status
	FROM AssetRepairTrack A 
	LEFT JOIN FailureCodes F ON F.FailureCodeId = A.FailureCodeId
	LEFT JOIN FailureCategories F1 ON F1.FailureCategoryId = f.FailureCategoryId
	LEFT JOIN FailureSubCategories F2 ON F2.FailureSubCategoryId = f.FailureSubCategoryId

	LEFT JOIN FailureCodes P ON P.FailureCodeId = A.ProceduralCodeId
	LEFT JOIN FailureCategories P1 ON P1.FailureCategoryId = P.FailureCategoryId
	LEFT JOIN FailureSubCategories P2 ON P2.FailureSubCategoryId = P.FailureSubCategoryId

	LEFT JOIN FailureCodes O ON O.FailureCodeId = A.OutOfSpecCodeId
	LEFT JOIN FailureCategories O1 ON O1.FailureCategoryId = O.FailureCategoryId
	LEFT JOIN FailureSubCategories O2 ON O2.FailureSubCategoryId = O.FailureSubCategoryId
	WHERE A.AssetRepairTrackId=@AssetRepairTrackId

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetDispositionHeader]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:	Yogesh Mane
-- Create date: 7 Oct 2016
-- Description:	Get Disposition
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_GetDispositionHeader]
	@AssetRepairTrackId uniqueidentifier,
	@UserId int =null
AS

BEGIN

	SET NOCOUNT ON;

	Declare @Admin bit = 0;

	IF EXISTS(SELECT DISTINCT u.UserId 
					FROM MCApprovers a (NOLOCK)
					INNER JOIN Users u (NOLOCK) ON u.UserId = a.UserId 
					WHERE ApprovalCode='AIRT' and u.UserId = @UserId AND ApproverType = 10)
					OR  EXISTS (SELECT * FROM UserRoles(NOLOCK) WHERE UserId = @UserId AND RoleId in (1))
	BEGIN
		Set @Admin = 1;
	END

	
	--Disposition Types (for dropdownlist) 
	IF EXISTS(SELECT * FROM PMDispositions WHERE AssetRepairTrackId = @AssetRepairTrackId AND DispositionOption = 1)
		BEGIN
			SELECT 
				OptionValue,
				OptionLabel 
			FROM SelectOptions 
			WHERE SelectName = 'Disposition'
			AND OptionValue NOT IN (3,4)
			ORDER BY SortOrder, OptionValue
		END
	ELSE
		BEGIN
			SELECT 
				OptionValue,
				OptionLabel 
			FROM SelectOptions 
			WHERE SelectName = 'Disposition'
			AND   1 = (CASE WHEN @Admin = 0 and OptionValue   IN (1,2,3,4) THEN 1  
							WHEN @Admin = 1 and OptionValue   IN (1,2,3,4,5) THEN 1 -- If admin shows all Dispostion 
							ELSE 0 END)
			ORDER BY SortOrder, OptionValue
		END

	--Branch Plant - for dropdownlist
	SELECT BranchPlant, 
			BranchPlant + ' - ' + CompanyName BranchPlantName
	FROM BranchPlants 
	WHERE IsGlobalRepair = 1
	Order By BranchPlant
	
	--Get failed sequence details
	SELECT 
		A.SeqName,
		A.Comment,
		A.UserName,
		A.DateAdded
	FROM vwPFTWOSeq A
	INNER JOIN AssetRepairTrack B ON B.ITPFTWOId = A.PFTWOId
	WHERE B.AssetRepairTrackId = @AssetRepairTrackId and a.PFTResult = 'F'

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetDispositionHistory]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author: Yogesh Mane  
-- Create date: 7 Oct 2016  
-- Description: Get Disposition History  
-- Changed By: seema Singh  
-- Changes: Added 4 columns in Select which are serialnumber  
--   ,assetnumber,itemnumber,itemdesc  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_CBM_GetDispositionHistory]  
 @AssetRepairTrackId uniqueidentifier  
AS  
  
BEGIN  
  
 SET NOCOUNT ON;  
   
 --DECLARE @startDateTime DATETIME;  
 --SET @startDateTime = GETDATE();  
  
 --Get Disposition history   
 SELECT d.DispositionId,  
   d.Disposition,  
   so.OptionLabel [DispositionDesc],  
   d.shiptolocation + ' - ' + ISNULL(b.CompanyName,'') [ShipToBranchPlantName],  
   u.FirstName + ' ' + u.LastName [DispositionedBy],  
   d.DispositionDate,  
   d.ShipToLocation,  
   d.DispositionComments,  
   d.[Status],  
   d.ApprovalLevel,  
   A.SerialNum,  
   A.AssetNumber,  
   A.ItemNum,  
   A.ItemDesc  
 FROM AssetRepairTrack A (NOLOCK)  
 LEFT JOIN AuditARTDispositions d (NOLOCK) on d.AssetRepairTrackId = a.AssetRepairTrackId   
 LEFT JOIN Users u (NOLOCK) on u.userid = d.DispositionedById  
 LEFT JOIN BranchPlants b (NOLOCK)on b.branchplant = d.shiptolocation  
 LEFT OUTER JOIN SelectOptions so (NOLOCK) ON  so.SelectName = 'Disposition' AND so.OptionValue = d.Disposition  
 WHERE A.AssetRepairTrackId = @AssetRepairTrackId  
 ORDER BY d.DateAdded DESC  
  
 --EXEC usp_MyAdvisor_Logs 'usp_CBM_GetDispositionHistory', 'Get AIRT disposition history', @startDateTime, 1  
END  
  
  
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetInitData]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- =============================================  
-- Author:  Yogesh Mane  
-- Create date: 10/25/2016  
-- Description: Get Initial data for AIRT Edit Screen  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_CBM_GetInitData]   
 -- Add the parameters for the stored procedure here  
 @AssetRepairTrackId uniqueidentifier,  
 @UserId int  
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
 DECLARE @startDateTime DATETIME,@RunId uniqueidentifier=NEWID();
 SET @startDateTime = GETDATE(); 
 -- Get Control Enable/Diable or Show/Hide flags  
 exec dbo.usp_CBM_GetControlDefaults @AssetRepairTrackId, @UserId  
 exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetInitData', 'Get Control Enable/Diable',@startDateTime

 -- Get Asset information  
 SET @startDateTime = GETDATE();
 exec dbo.usp_CBM_GetAssetInformation @AssetRepairTrackId, @UserId 
 exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetInitData', 'Get Asset information',@startDateTime
  
 -- Get Score board  
 SET @startDateTime = GETDATE();
 exec dbo.usp_CBM_GetScoreBoard @AssetRepairTrackId, @UserId  
 exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetInitData', 'Get Asset information',@startDateTime 
 
 -- Get Job Information
 SET @startDateTime = GETDATE();
 exec dbo.usp_CBM_GetJobInfo @AssetRepairTrackId, @UserId  
 exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetInitData', 'Get Job Information',@startDateTime 
 
 SET @startDateTime = GETDATE(); 
 SELECT 'TI' [Type], ITPFTWOId [PFTId], '' [Wo_No], 0 [Active] FROM AssetRepairTrack (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId  
 UNION ALL  
 SELECT 'SR' [Type], PFTWOId [PFTId], '' [Wo_No], [Active]   
 FROM AssetRepairTrack (NOLOCK) ART   
   INNER JOIN PFTWO (NOLOCK) PO ON ART.AssetRepairTrackId = PO.AssetRepairTrackId   
 WHERE ART.AssetRepairTrackId = @AssetRepairTrackId AND PO.PFTType = 1  
 UNION ALL  
 SELECT 'PM' [Type], PFTWOId [PFTId], PO.WO_NO [Wo_No], [Active]   
 FROM AssetRepairTrack (NOLOCK) ART  
   INNER JOIN PFTWO PO (NOLOCK) ON ART.AssetRepairTrackId = PO.AssetRepairTrackId  
 WHERE ART.AssetRepairTrackId = @AssetRepairTrackId AND PO.PFTType = 3  
 
 exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetInitData', 'IsWorkOrderActive',@startDateTime
  
 -- PFT Admin   
 DECLARE @IsPFTAdmin BIT = 0 ;  
 IF EXISTS(SELECT 1 FROM UserRoles (NOLOCK) WHERE UserId = @UserId AND RoleId IN (1,503,519))  
  SET @IsPFTAdmin = 1  
  
 SELECT @IsPFTAdmin AS [IsPFTLead]  

 --To generate barcode
 SET @startDateTime = GETDATE(); 
 SELECT	jw.WorkOrderNumber + '*' + ISNULL(jw.OrderType,'WC') As WorkOrderNum, 
		case p.PFTType WHEN 1 THEN 'SRPFT' WHEN 3 THEN 'PMPFT' ELSE 'TIPFT' END As PFTType
								FROM AssetRepairTrack a (NOLOCK) 
								JOIN PFTWO p (NOLOCK) on a.AssetRepairTrackId = p.AssetRepairTrackId
								Join JDEWorkOrders jw (NOLOCK) on jw.WorkOrderNumber=p.JDEWorkOrderNum
								WHERE a.AssetRepairTrackId =@AssetRepairTrackId and p.Active = 1;

 exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetInitData', 'generate barcode',@startDateTime

--To get PFT Forms
 SET @startDateTime = GETDATE(); 
	EXEC dbo.usp_CBM_GetPFTForms @AssetRepairTrackId  

 exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetInitData', 'get PFT Forms',@startDateTime

 --To get user details
	SELECT	TOP 1 UserId, UserName, WFTUserName
	FROM	Users
	WHERE	UserId = @UserId;
END 
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetJobHistory]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 10/25/2016
-- Description:	Get Job Information
--Modified By : Ganesh Abdagire
-- =============================================
-- usp_CBM_GetJobHistory 'FFF713CF-35E4-4B9F-BF64-AC6B01073F9C','202'
CREATE PROCEDURE [dbo].[usp_CBM_GetJobHistory]
	-- Add the parameters for the stored procedure here
	@AssetRepairTrackId uniqueidentifier,
	@UserId int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @StartDateTimeJobInfo DATETIME,@RunId uniqueidentifier=NEWID();
    SET @StartDateTimeJobInfo = GETDATE();
	DECLARE @FixedAssetId Uniqueidentifier,@InventoryItemNum varchar(150),@SerNo varchar(150),@AssetNumber varchar(150)

	SELECT A.[FixedAssetId]
		      ,A.[AssetNumber]     
		      ,A.[BranchPlant]      
		      ,A.[ParentNumber]
		      ,A.[ParentFixedAssetId]     
		      ,A.[RNItemNum]
		      ,A.[SerialNum]     
		      ,A.[InventoryItemNum]   
			     
		  INTO #TempFixedAssests
		  FROM [dbo].[FixedAssets] (NOLOCK) A
		  INNER JOIN AssetRepairTrack (NOLOCK) B
		  ON A.FixedAssetId=B.FixedAssetId
		  where B.AssetRepairTrackId = @AssetRepairTrackId

  
	SELECT 
		      @AssetNumber=A.[AssetNumber]   
		      ,@SerNo=A.[SerialNum]     
		      ,@InventoryItemNum=A.[InventoryItemNum]   			     

		  FROM [dbo].[FixedAssets] (NOLOCK) A
		  INNER JOIN AssetRepairTrack (NOLOCK) B
		  ON A.FixedAssetId=B.FixedAssetId
		  where B.AssetRepairTrackId = @AssetRepairTrackId

		  --select * from #TempA

		  CREATE TABLE #TempA(
	       [SortField] [datetime] NULL,
	       [status] [int] NULL,
	       [RunID] [uniqueidentifier]  NULL,
	       [JobId] [uniqueidentifier]  NULL,
	       [CustomerName] [varchar](50) NULL,
	       [JobNumber] [varchar](50)  NULL,
	       [BranchPlant] [varchar](12) NULL,
	       [BranchPlantCompanyName] [varchar](50) NULL,
	       [Well] [varchar](200) NULL,
	       [RunNumber] [varchar](50)  NULL,
	       [StartDate] [datetime] NULL,
	       [EndDate] [datetime] NULL,
	       [MdStart] [float] NULL,
	       [MdStartUOM] [varchar](10) NULL,
	       [MdEnd] [float] NULL,
	       [MdEndUOM] [varchar](10) NULL,
	       [SerialNum] [varchar](50) NULL,
	       [CompDesc] [varchar](60) NULL,
	       [OperHrs] [float] NULL,
	       [CircHrs] [float] NULL,
	       [DrillHrs] [float] NULL,
	       [IncidentNumber] [varchar](50) NULL,
	       [IncidentId] [uniqueidentifier] NULL,
		   rn [int] NULL
        )
		   
		  INSERT INTO #TempA
		  SELECT
			COALESCE(r.EndDate, i.FailureDate, j.StartDate) [SortField],
			dbo.ufnGetAssetStatusforJobHistory(r.RunID, p.FixedAssetId) AS [status],
			r.RunID,
			j.JobId,
			CustomerName,
			JobNumber,
			b.BranchPlant,
			b.CompanyName AS BranchPlantCompanyName,
			Well,
			RunNumber,
			COALESCE(r.StartDate, i.FailureDate, j.StartDate) [StartDate],
			COALESCE(r.EndDate, i.FailureDate, j.EndDate) [EndDate],
			MdStart,
			MdStartUOM,
			MdEnd,
			MdEndUOM,
			p.SerialNum,
			itemNum.DescShort AS CompDesc,
			OperHrs,
			CircHrs,
			DrillHrs,
			IncidentNumber,
			i.IncidentId,
            1 As rn
		  FROM ToolStringComponentInfo tsci WITH (NOLOCK) 
		  INNER JOIN #TempFixedAssests p WITH (NOLOCK) ON p.FixedAssetId = tsci.FixedAssetID
		  INNER JOIN Runs r WITH (NOLOCK) ON r.RunID = tsci.RunID AND r.IsDeleted = 0
		  INNER JOIN Wells w WITH (NOLOCK) ON w.WellID = r.WellID AND w.IsDeleted = 0
		  INNER JOIN Jobs j WITH (NOLOCK) ON j.JobId = w.JobID AND j.IsDeleted = 0
		  LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = j.BranchPlant
		  LEFT JOIN Customers C WITH (NOLOCK) ON C.CustomerId = j.CustomerId
		  LEFT JOIN Incidents i WITH (NOLOCK) ON i.RunID = r.RunID
		  LEFT JOIN ItemNums itemNum WITH (NOLOCK) ON itemNum.ItemNum = p.InventoryItemNum

		  --Select * INTO TempA from #TempA 

		  
		    INSERT INTO #TempA
            SELECT  
  					dii.DateReturned [SortField],
					null AS [status], 
					NULL RunID, 
			       NULL JobId,
					c.CustomerName,					
					CAST(d.DispatchNumber As varchar(100)) as JobNumber, 
					d.BranchPlant, 
					null BranchPlantCompanyName, 
			        null Well, 
			        null RunNumber,
					di.DateShipped,					
					dii.DateReturned,				
					null MdStart, 
			        null MdStartUOM, 
			        null MdEnd, 
			        null MdEndUOM, 
			        null SerialNum, 
			        null DescShort, 
			        null OperHrs, 
			        null CircHrs, 
			        null DrillHrs, 
			        null IncidentNumber, 
			        null IncidentId,
  					ROW_NUMBER() OVER(PARTITION BY d.DispatchId, dii.FixedAssetId ORDER BY di.DateAdded DESC) rn
		
  			FROM	DispatchInstanceItems dii (NOLOCK)  
  			JOIN	DispatchInstances di (NOLOCK) ON di.DispatchInstanceId = dii.DispatchInstanceId  
  			JOIN	Dispatches d (NOLOCK) ON d.DispatchId = di.DispatchId 
			--JOIN	#TempFixedAssests f (NOLOCK) ON 
			--f.FixedAssetId =dii.FixedAssetId
			--(f.SerialNum = dii.SerialNum and f.InventoryItemNum = dii.ItemNum) OR (dii.AssetNumber = f.AssetNumber)
			LEFT JOIN Customers c (NOLOCK) ON c.CustomerNumber = d.JDECustomerNumber
  			WHERE 
  					d.JobId IS NULL 
  					--AND f.FixedAssetId = @FixedAssetId
  					AND ISNULL(dii.ErrorMessage, '') = ''
					AND 
					((dii.SerialNum=@SerNo
					AND dii.ItemNum=@InventoryItemNum)
					OR
					(dii.AssetNumber=@AssetNumber)
					)

			SELECT 
					 [SortField],
			         [status],
			         RunID,
			         JobId,
			         CustomerName,
			         JobNumber,
			         BranchPlant,
			         BranchPlantCompanyName,
			         Well,
			         RunNumber,
			         [StartDate],
			         [EndDate],
			         MdStart,
			         MdStartUOM,
			         MdEnd,
			         MdEndUOM,
			         SerialNum,
			         CompDesc,
			         OperHrs,
			         CircHrs,
			         DrillHrs,
			         IncidentNumber,
			         IncidentId
			FROM #TempA WHERE rn=1

			DROP TABLE #TempFixedAssests

		    DROP TABLE #TempA

   exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetJobHistory', 'Get Job History', @StartDateTimeJobInfo

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetJobInfo]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 -- =============================================
-- Author:		Yogesh Mane
-- Create date: 10/25/2016
-- Description:	Get Job Information
--update by Umesh Lade on 5 Dec 2016 for incident number.
-- Update DispatchNumber by show DT
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_GetJobInfo] 
	-- Add the parameters for the stored procedure here
	@AssetRepairTrackId uniqueidentifier,
	@UserId int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT a.JobId,
			a.IsAssetFromField, 
			a.IsRedTag [IsAssociatedWithFieldFailure], 
			a.NeedsCustomerFeedback,
			j.JobNumber,
			j.CustomerId,
			c.CustomerName,
			w.Well [FailedWell],
			r.RunNumber [FailedRunNumber],
			a.IncidentId,
			i.IncidentNumber,
			a.DispatchNumber 
	FROM	AssetRepairTrack a (NOLOCK)
	LEFT JOIN Jobs J (NOLOCK) ON J.JobId = a.JobId
	LEFT JOIN Customers c (NOLOCK) ON C.CustomerId = J.CustomerId
	LEFT JOIN Incidents i (NOLOCK) ON i.incidentId = a.incidentId
	LEFT JOIN Runs r (NOLOCK) ON r.RunID = i.RunID
	LEFT JOIN Wells w (NOLOCK) ON w.WellID = r.WellID
	WHERE a.AssetRepairTrackId = @AssetRepairTrackId
END



GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetJobInformation]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Gandhi>
-- Create date: <Create 03062023,,>
-- Description:	<Description,,>
-- =============================================
CREATE  PROCEDURE [dbo].[usp_CBM_GetJobInformation] 
	-- Add the parameters for the stored procedure here
	@AssetRepairTrackId uniqueidentifier,
	@UserId int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	select a.DispatchNumber , d.JDECustomerNumber [CustomerId], c.CustomerName
from AssetRepairTrack a
left join fixedassets f on f.FixedAssetId = a.FixedAssetId
left join dispatches d on d.DispatchNumber = a.DispatchNumber
left join customers c on C.CustomerNumber = d.JDECustomerNumber

where AssetRepairTrackId =  @AssetRepairTrackId
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetMeterReadingData]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Suyeb Mohammad
-- Create date: 10/25/2016
-- Description:	Get Meter reading data for CBM monitoring
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_GetMeterReadingData] 
	@FixedAssetId uniqueidentifier,
	@MeterReadingType VARCHAR(10) = 1 OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
    a.FixedAssetID,
    CAST(SUM(a.[LifetimeOperHrs]) AS DECIMAL(18,2)) AS [LifetimeOperHrs],
    CAST(SUM(a.[LifetimeCircHrs]) AS DECIMAL(18,2)) AS [LifetimeCircHrs],
    CAST(SUM(a.[LifetimeDrillingHrs]) AS DECIMAL(18,2)) AS [LifetimeDrillingHrs],
    CAST(SUM(a.[SinceLastRepairOperHrs]) AS DECIMAL(18,2)) AS [SinceLastRepairOperHrs],
    CAST(SUM(a.[SinceLastRepairCircHrs]) AS DECIMAL(18,2)) AS [SinceLastRepairCircHrs],
    CAST(SUM(a.[SinceLastRepairDrillHrs]) AS DECIMAL(18,2)) AS [SinceLastRepairDrillHrs]

  /*************************/
  /***Lifetime Asset Data***/
  /*************************/
  FROM 
  (SELECT
		tc1.FixedAssetID,
		SUM(r1.OperHrs) AS [LifetimeOperHRs],
		SUM(r1.circhrs) AS [LifetimeCircHrs],
		SUM(r1.drillhrs) AS [LifetimeDrillingHrs],
		0 [SinceLastRepairOperHrs],
		0 [SinceLastRepairCirchrs],
		0 [SinceLastRepairDrillHrs]
  FROM ToolStringComponentInfo tc1 (NOLOCK)
  INNER JOIN Runs r1 (NOLOCK) ON r1.runid = tc1.runid
  WHERE @fixedassetid = tc1.FixedAssetID
  GROUP BY tc1.fixedassetid

  UNION ALL

  /*************************/
  /***Basic Asset Data******/
  /*************************/
  SELECT
    f2.fixedassetid,
    0 [LifetimeOperHrs],
    0 [LifetimeCircHrs],
    0 [LifetimeDrillingHrs], 
    0 [SinceLastRepairOperHrs],
    0 [SinceLastRepairCircHrs],
    0 [SinceLastRepairDrillHrs]
  FROM FixedAssets f2 (NOLOCK) 
  WHERE @fixedassetid = f2.FixedAssetId

  UNION ALL

  SELECT
    tca.fixedassetid,
    0 [LifetimeOperHrs],
    0 [LifetimeCircHrs],
    0 [LifetimeDrillingHrs],
    SUM(RA.OperHrs) AS [SinceLastRepairOperHrs],
    SUM(RA.circHrs) AS [SinceLastRepairCircHrs],
    SUM(RA.DrillHrs) AS [SinceLastRepairDrillHrs]
  FROM Runs ra (NOLOCK) 
  INNER JOIN ToolStringComponentInfo tca (NOLOCK) ON tca.RunID = ra.RunId
  INNER JOIN ( ---Get latest S&R PFT for "Last Repair Date"
		  SELECT
			MAX(pwa.dateadded) AS "Dateadded",
			art.FixedAssetId
		  FROM AssetRepairTrack art
		  INNER JOIN PFTWO pwa (NOLOCK) ON pwa.PFTWOId = art.SRPFTWOId
		  WHERE art.FixedAssetId = @fixedassetid
			AND pwa.DateAdded < GETDATE() --(SELECT DateAdded FROM AssetRepairTrack WHere AssetRepairTrackId = @AssetRepairTrackId)
		  GROUP BY art.FixedAssetId

  ) B ON b.fixedassetid = tca.fixedassetid AND ra.EndDate > b.Dateadded  
  WHERE @fixedassetid = tca.FixedAssetID
  GROUP BY tca.fixedassetid) a
  GROUP BY a.fixedassetid

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetPFT]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- =============================================
-- Author:		Yogesh Mane
-- Create date: 10/31/2016
-- Description:	Get PFT Details
-- =============================================
-- Add @IsSupervisor check if step is  Supervisor sing off required
CREATE PROCEDURE [dbo].[usp_CBM_GetPFT] 
	-- Add the parameters for the stored procedure here
	@PFTWOId uniqueidentifier,
	@UserId int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @FixedAssetId uniqueidentifier, @IsFirmwarePresent bit,  @IsSupervisor bit =0
	SELECT @FixedAssetId = (SELECT FixedAssetId 
								FROM AssetRepairTrack a (NOLOCK)
								WHERE a.ITPFTWOId = @PFTWOId OR a.SRPFTWOId = @PFTWOId)

	IF EXISTS(SELECT ItemNum FROM SensorItemNums (NOLOCK) WHERE ItemNum = (SELECT InventoryItemNum FROM FixedAssets (NOLOCK) Where FixedAssetId = @FixedAssetId))
		BEGIN
			SET @IsFirmwarePresent=1
		END
    ELSE IF EXISTS(SELECT BoardItemNum FROM BoardItemNums (NOLOCK) WHERE BoardItemNum = (SELECT InventoryItemNum FROM FixedAssets (NOLOCK) Where FixedAssetId = @FixedAssetId))
		BEGIN
			SET @IsFirmwarePresent=1
		END


   If EXISTS (SELECT ApprovalCode FROM MCApprovers WHERE  ApprovalCode = 'AIRT' 
					AND (LocId = (SELECT BranchPlant FROM PFTWO (NOLOCK) where PFTWOId = @PFTWOId)  OR ApproverType = 10) AND UserId =@UserId  )  
   BEGIN 
		SET @IsSupervisor = 1
   END
   ELSE
   BEGIN
		SET @IsSupervisor = 0
   END

	-- PFT Header

	SELECT p.PFTWOId, 
			pc.ProcessName, 
			p.Active, 
			p.PFTType,
			ISNULL(@IsFirmwarePresent,0) [IsFirmwarePresent],
			p.WorkOrderId,
			pc.PFTObjectId,
			BranchPlant ,
			@IsSupervisor [IsUserSupervisorSignOff]
	FROM PFTWO p (NOLOCK)
	LEFT JOIN PFTConfig pc (NOLOCK) on p.PFTConfigId = pc.PFTConfigId
	WHERE p.PFTWOId = @PFTWOId

	-- PFT Detail

	SELECT 
	p.HasAttachment, 
	p.Seq, 
	p.SeqName, 
	p.SeqDesc, 
	p.PFTResult, 
	p.Hours, 
	p.Comment, 
	p.LabName, 
	p.UserName, 
	ISNULL(u.LastName,'') + ', ' + ISNULL(u.FirstName,'') [UserFullName], 
	p.DateAdded,
	p.IsCommentRequired,
	p.IsLabourHrRequired
	FROM vwPFTWOSeq p (NOLOCK)
	LEFT JOIN Users u (NOLOCK)  ON p.UserId = u.UserId
	WHERE PFTWOId = @PFTWOId
	ORDER BY p.DateAdded ASC
END


GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetPFTForms]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- =============================================  
-- Author:  Sachin Mhalungekar & Mangesh Taware 
-- Create date: 08/20/20120
-- Description: Get PFT Forms data to display on AIRT  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_CBM_GetPFTForms] 	 
	@AssetRepairTrackId UNIQUEIDENTIFIER 
AS
BEGIN
	DECLARE @startDateTime DATETIME,@RunId  uniqueidentifier=NEWID();
    SET @startDateTime= GETDATE();

 DECLARE @MastarPFTForms  TABLE (Type varchar(25),	PFTId uniqueidentifier,	PFTFormId uniqueidentifier,	ObjectId int,	ObjectNumber int,unitid varchar(100))
 DECLARE @SavedPFTWoForms TABLE (Type varchar(25),	PFTId uniqueidentifier,	PFTFormId uniqueidentifier,	ObjectId int,	ObjectNumber int,unitid varchar(100))

	-------------Master PFT Forms data --------------------------------------------------------------
		INSERT INTO  @MastarPFTForms 
		SELECT DISTINCT	CASE pw.PFTType WHEN 1 THEN 'SR' WHEN 2 THEN 'TI' WHEN 3 THEN 'PM' END [Type], 
						pw.PFTWOId [PFTId], pcf.PFTConfigFormPFTId [PFTFormId], pcForm.PFTObjectId [ObjectId]
						,pcForm.ObjectNumber ,  cast(pw.PFTWOId as   nvarchar(50)) + '-' +   cast(pcForm.ObjectNumber as varchar)
		FROM PFTWO pw (NOLOCK) 
			 JOIN PFTConfig pc (NOLOCK) on pw.PFTConfigId = pc.PFTConfigId
			 JOIN PFTConfigFormPFT pcf (NOLOCK) on pcf.ObjectNumber = pc.ObjectNumber  
			 JOIN PFTConfig pcForm (NOLOCK) on  pcForm.PFTConfigId = pcf.PFTConfigFormId   
			 JOIN PartDescPFTConfigs (NOLOCK) pdpc  on pdpc.PFTConfigID = pcForm.PFTConfigId and pdpc.ItemNum =pw.ItemNum -- a.ItemNum
		WHERE pw.AssetRepairTrackId = @AssetRepairTrackId
			 AND pcForm.IsObsolete = 0    
		
		exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetPFTForms', '01.Master PFT Forms data', @startDateTime
	   
	-------------Saved PFT Forms data --------------------------------------------------------------
	    SET @startDateTime= GETDATE();

		INSERT INTO  @SavedPFTWoForms
		SELECT DISTINCT CASE pw.PFTType WHEN 1 THEN 'SR' WHEN 2 THEN 'TI' WHEN 3 THEN 'PM' END [Type],   
					pw.PFTWOId [PFTId], null [PFTFormId], pcForm.PFTObjectId [ObjectId]  
				   ,pcForm.ObjectNumber ,   cast(pw.PFTWOId as   nvarchar(50)) + '-' +   cast(pcForm.ObjectNumber as varchar)  
		FROM PFTWO pw (NOLOCK) 
		JOIN PFTWOForms pwf (NOLOCK) ON pwf.PFTWOId = pw.PFTWOId  
		JOIN PFTConfig pcForm (NOLOCK) on pwf.PFTConfigId = pcForm.PFTConfigId    
		WHERE pw.AssetRepairTrackId = @AssetRepairTrackId  
		
		exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetPFTForms', '02.Saved PFT Forms data', @startDateTime
 

		IF EXISTS(SELECT TOP 1 ObjectNumber from  @SavedPFTWoForms)
			BEGIN 
				SELECT [Type], [PFTId], [PFTFormId], [ObjectId] FROM @SavedPFTWoForms
				UNION 
				SELECT [Type], [PFTId], [PFTFormId], [ObjectId] FROM @MastarPFTForms t1 WHERE t1.unitid NOT IN (SELECT unitid FROM @SavedPFTWoForms)				   
			END
		ELSE
			BEGIN
				SELECT [Type], [PFTId], [PFTFormId], [ObjectId] FROM @MastarPFTForms
			END	 

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetPlanningDeskData]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,GandhiM>
-- Create date: <Create Date,02/5/2022>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_GetPlanningDeskData]  
	-- Add the parameters for the stored procedure here
	@AssetRepairTrackId uniqueidentifier='',
	@UserId int=0
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @IsNonLiveLocation bit
	DECLARE @RollBackAccess bit
	SET @IsNonLiveLocation=1

	 SELECT 
		  @IsNonLiveLocation=IsNonLiveLocation 
	 FROM AssetRepairTrack a (NOLOCK)
		  LEFT JOIN BranchPlants b on a.FromBranchPlant=b.BranchPlant
	 WHERE a.AssetRepairTrackId = @AssetRepairTrackId
	set @RollBackAccess=0
	IF EXISTS(SELECT a.UserId 
					FROM MCApprovers a (NOLOCK)
					WHERE ApproverType in(5,6,10)
					AND a.UserId = @UserId 
					AND ((LocId IS NULL)  
						OR (LocId = (select ShipToBranchPlant from AssetRepairTrack where AssetRepairTrackId =@AssetRepairTrackId))))
		BEGIN
			SET @RollBackAccess = 1
		END
	else
	BEGIN
			SET @RollBackAccess = 0
	END
	
	SELECT 
			'TI' [Type], ITPFTWOId [PFTId],  
			 PO.Active,PO.JDEWorkOrderNum,
			 a.AssetRepairTrackId,
			 jw.ordertype+'-'+jw.typewo as [OrderType],
			 jw.Description,
			 (select top 1 pc.ProcessName from PFTConfig PC where PO.PFTConfigId=PC.PFTConfigId) as [PFTName],
			 jw.EstimatedAmount,jw.ActualAmount,
			 jw.WorkOrderStatusCode,
			 CASE
				WHEN (SELECT COUNT(WorkOrderNumber) FROM JDEWorkOrders WHERE
								WorkOrderStatusCode NOT IN('ET','EU','EV','EW','EX','EZ') AND 
								WorkOrderNumber=jw.WorkOrderNumber) > 0 THEN 'true'
				ELSE 'false'
				END AS [StatusOfMR], 
			 CASE
				WHEN (SELECT COUNT(*) FROM WorkOrderMaterialRequests MR WHERE
						MR.WorkOrderId=PO.WorkOrderId and  MR.status  in('Completed','Void')) > 0 THEN 'true'
				ELSE 'false' END AS [StatusOfPRMR],
			 CASE
				WHEN (SELECT COUNT(*) from WorkOrderMaterialRequests MR WHERE 
						status IN ('Open', 'Submitted', 'Approved', 'Rejected') AND MR.WorkOrderId=PO.WorkOrderId) = 0 THEN 'Create'
				ELSE --'Edit'
						(select top 1 convert(varchar(50),WorkOrderMaterialRequestId) FROM WorkOrderMaterialRequests MR WHERE
							status  in('Open', 'Submitted', 'Approved', 'Rejected') AND  
							MR.WorkOrderId=PO.WorkOrderId)
				END AS [StatusOfMRAction],
			CASE
				WHEN (select COUNT(*) from WorkOrderMaterialRequests MR where status  in('Completed','Void') and  
								MR.WorkOrderId=PO.WorkOrderId) > 0 THEN 'Search'
				ELSE 'View'
				END AS [StatusOfPRMRAction],
			(SELECT TOP 1 CONVERT(varchar(50),MR.WorkOrderId) FROM WorkOrderMaterialRequests MR WHERE	 
					MR.WorkOrderId=PO.WorkOrderId) PRMRWorkOrderId ,
					ISNULL(CONVERT(varchar(100), jw.DispatchNumber),'') as [DispatchNumber],
					jw.BusinessUnit
			,@IsNonLiveLocation as [IsNonLiveLocation],PO.WorkOrderId as WorkOrderId,@RollBackAccess as RollBackAccess,f.BusinessUnit as FixedAssetBusinessUnit 
	FROM AssetRepairTrack a (NOLOCK)   
	INNER JOIN PFTWO (NOLOCK) PO ON a.AssetRepairTrackId = PO.AssetRepairTrackId   
	LEFT JOIN JDEWorkOrders jw (NOLOCK) on jw.WorkOrderNumber = PO.JDEWorkOrderNum 
	Left Join FixedAssets f on f.FixedAssetId=a.FixedAssetId
		WHERE 
	a.AssetRepairTrackId = @AssetRepairTrackId AND PO.PFTType = 2 

 UNION ALL  
 SELECT 'SR' [Type], PFTWOId [PFTId], PO.Active,PO.JDEWorkOrderNum,ART.AssetRepairTrackId,
 jw.ordertype+'-'+jw.typewo as OrderType,jw.Description,(select top 1 pc.ProcessName from PFTConfig PC where PO.PFTConfigId=PC.PFTConfigId) as [PFTName]
 ,jw.EstimatedAmount,jw.ActualAmount,jw.WorkOrderStatusCode,
 CASE
    WHEN (select count(WorkOrderNumber) from JDEWorkOrders where
 WorkOrderStatusCode not in('ET','EU','EV','EW','EX','EZ') and 
 WorkOrderNumber=jw.WorkOrderNumber) > 0 THEN 'true'
    ELSE 'false'
END AS StatusOfMR, CASE
    WHEN (select count(*) from WorkOrderMaterialRequests MR where MR.WorkOrderId=PO.WorkOrderId and  MR.status  in('Completed','Void')) > 0 THEN 'true'
    ELSE 'false'
END AS StatusOfPRMR,
 CASE
    WHEN (select count(*) from WorkOrderMaterialRequests MR where
	 status  in('Open', 'Submitted', 'Approved', 'Rejected') and  
	MR.WorkOrderId=PO.WorkOrderId) = 0 THEN 'Create'
    ELSE --'Edit'
	(select top 1 convert(varchar(50),WorkOrderMaterialRequestId) from WorkOrderMaterialRequests MR where
	 status  in('Open', 'Submitted', 'Approved', 'Rejected') and  
	( MR.WorkOrderId=PO.WorkOrderId))
END AS StatusOfMRAction,
 CASE
    WHEN (select count(*) from WorkOrderMaterialRequests MR where
	 status  in('Completed','Void') and  
	 MR.WorkOrderId=PO.WorkOrderId) > 0 THEN 'Search'
    ELSE 'View'
END AS StatusOfPRMRAction,(select top 1 convert(varchar(50),MR.WorkOrderId) from WorkOrderMaterialRequests MR where
	 
	MR.WorkOrderId=PO.WorkOrderId) PRMRWorkOrderId,isnull(convert(varchar(100),jw.DispatchNumber),'') as DispatchNumber,jw.BusinessUnit
,@IsNonLiveLocation as IsNonLiveLocation,PO.WorkOrderId,@RollBackAccess as RollBackAccess,'' as FixedAssetBusinessUnit 
 FROM AssetRepairTrack (NOLOCK) ART   
   INNER JOIN PFTWO (NOLOCK) PO ON ART.AssetRepairTrackId = PO.AssetRepairTrackId   
   left join JDEWorkOrders jw (NOLOCK) on jw.WorkOrderNumber=PO.JDEWorkOrderNum 
 WHERE ART.AssetRepairTrackId = @AssetRepairTrackId AND PO.PFTType = 1  
 UNION ALL  
 SELECT 'PM' [Type], PFTWOId [PFTId], PO.Active ,PO.JDEWorkOrderNum,ART.AssetRepairTrackId,
 jw.ordertype+'-'+jw.typewo as OrderType,jw.Description,(select top 1 pc.ProcessName from PFTConfig PC where PO.PFTConfigId=PC.PFTConfigId) as [PFTName],
 jw.EstimatedAmount,jw.ActualAmount,jw.WorkOrderStatusCode,
 CASE
    WHEN (select count(WorkOrderNumber) from JDEWorkOrders where
 WorkOrderStatusCode not in('ET','EU','EV','EW','EX','EZ') and  WorkOrderNumber=jw.WorkOrderNumber) > 0 THEN 'true'
    ELSE 'false'
END AS StatusOfMR, CASE
    WHEN (select count(*) from WorkOrderMaterialRequests MR where MR.WorkOrderId=PO.WorkOrderId and  MR.status in('Completed','Void')) > 0 THEN 'true'
    ELSE 'false'
END AS StatusOfPRMR,
 CASE
    WHEN (select count(*) from WorkOrderMaterialRequests MR where
	 status  in('Open', 'Submitted', 'Approved', 'Rejected') and  
	MR.WorkOrderId=PO.WorkOrderId) = 0 THEN 'Create'
    ELSE --'Edit'
	(select top 1 convert(varchar(50),WorkOrderMaterialRequestId) from WorkOrderMaterialRequests MR where
	 status  in('Open', 'Submitted', 'Approved', 'Rejected') and  
	MR.WorkOrderId=PO.WorkOrderId)
END AS StatusOfMRAction,
 CASE
    WHEN (select count(*) from WorkOrderMaterialRequests MR where
	 status  in('Completed','Void') and  
	MR.WorkOrderId=PO.WorkOrderId) > 0 THEN 'Search'
    ELSE 'View'
END AS StatusOfPRMRAction,(select top 1 convert(varchar(50),MR.WorkOrderId) from WorkOrderMaterialRequests MR where
	 
	MR.WorkOrderId=PO.WorkOrderId) PRMRWorkOrderId,isnull(convert(varchar(100),jw.DispatchNumber),'') as DispatchNumber,jw.BusinessUnit
,@IsNonLiveLocation as IsNonLiveLocation,PO.WorkOrderId,@RollBackAccess as RollBackAccess,'' as FixedAssetBusinessUnit 
 FROM AssetRepairTrack (NOLOCK) ART  
   INNER JOIN PFTWO PO (NOLOCK) ON ART.AssetRepairTrackId = PO.AssetRepairTrackId  
   left join JDEWorkOrders jw (NOLOCK) on jw.WorkOrderNumber=PO.JDEWorkOrderNum --and jw.ordertype ='WC' and jw.typewo = 'C'
 WHERE ART.AssetRepairTrackId = @AssetRepairTrackId AND PO.PFTType = 3 
 UNION ALL
 SELECT  'JDEAIRT' [Type],ART.AssetRepairTrackId [PFTId],
 CASE when(select count(WO.WorkOrderId) from WorkOrders WO where WO.JDEWorkOrderNum=jw.WorkOrderNumber and WO.Status='Open' )>0 Then '1' ELSE '0' END as Active ,jw.WorkOrderNumber,ART.AssetRepairTrackId,
 jw.ordertype+'-'+jw.typewo as OrderType,jw.Description,'' as [PFTName],jw.EstimatedAmount,jw.ActualAmount,jw.WorkOrderStatusCode,
 CASE
    WHEN (select count(WorkOrderNumber) from JDEWorkOrders where
 WorkOrderStatusCode not in('ET','EU','EV','EW','EX','EZ') and  WorkOrderNumber=jw.WorkOrderNumber) > 0 THEN 'true'
    ELSE 'false'
END AS StatusOfMR , CASE
    WHEN (select count(*) from WorkOrderMaterialRequests MR inner join WorkOrders WO on MR.WorkOrderId=WO.WorkOrderId
	and WO.JDEWorkOrderNum=jw.WorkOrderNumber where	 MR.status  in('Completed','Void')) > 0 THEN 'true'
    ELSE 'false'
END AS StatusOfPRMR
 ,CASE
    WHEN (select count(*) from WorkOrderMaterialRequests MR inner join WorkOrders WO on MR.WorkOrderId=WO.WorkOrderId
	and WO.JDEWorkOrderNum=jw.WorkOrderNumber where	 MR.status  in('Open', 'Submitted', 'Approved', 'Rejected')) = 0 THEN 'Create'
    ELSE --'Edit'
	(select top 1 convert(varchar(50),WorkOrderMaterialRequestId) from WorkOrderMaterialRequests MR inner join WorkOrders WO 
	on MR.WorkOrderId=WO.WorkOrderId and WO.JDEWorkOrderNum=jw.WorkOrderNumber
	where MR.status  in('Open', 'Submitted', 'Approved', 'Rejected'))
END AS StatusOfMRAction,
CASE
    WHEN (select count(*) from WorkOrderMaterialRequests MR inner join WorkOrders WO on MR.WorkOrderId=WO.WorkOrderId
	and WO.JDEWorkOrderNum=jw.WorkOrderNumber where	 MR.status  in('Completed','Void')) > 0 THEN 'Search'
    ELSE 'View'
END AS StatusOfPRMR,
(select top 1 convert(varchar(50),MR.WorkOrderId) from WorkOrderMaterialRequests  MR inner join WorkOrders WO 
on MR.WorkOrderId=WO.WorkOrderId and WO.JDEWorkOrderNum=jw.WorkOrderNumber where MR.status  in('Completed','Void')) PRMRWorkOrderId
,isnull(convert(varchar(100),jw.DispatchNumber),'') as DispatchNumber,jw.BusinessUnit
 ,@IsNonLiveLocation as IsNonLiveLocation,Null,@RollBackAccess as RollBackAccess,'' as FixedAssetBusinessUnit 
 FROM AssetRepairTrack (NOLOCK) ART  
 inner join JDEWorkOrders jw (NOLOCK) on jw.AssetRepairTrackId=ART.AssetRepairTrackId
 WHERE ART.AssetRepairTrackId = @AssetRepairTrackId
  and jw.WorkOrderNumber not in(select isnull(JDEWorkOrderNum,0) from PFTWO PO where PO.AssetRepairTrackId=@AssetRepairTrackId)
 
--GetUnplannedData--
	select rtrim(ltrim(REPLACE(REPLACE(jw.WorkOrderNumber, CHAR(13), ''), CHAR(10), '')))as WorkOrderNumber,jw.ordertype+'-'+jw.typewo as OrderType,jw.Description,null as PFTWOId
			,'' MeterReadingTypeId,'' ObjectNumber,'' CBMMonitorId,0.00 Triggervalue,0.00 MeterReadingValue
from JDEWorkOrders jw			
			 
			where jw.WorkOrderStatusCode not in('ET','EU','EV','EW','EX','EZ') and 
			ISNULL(convert(varchar(50),jw.AssetRepairTrackId),'')=''
			and jw.AssetItemNumber in(select AssetNumber from AssetRepairTrack where AssetRepairTrackId=@AssetRepairTrackId)
		and not exists(select PW1.JDEWorkOrderNum from  PFTWO PW1 where PW1.JDEWorkOrderNum=jw.WorkOrderNumber and PFTType<>'3' ) -- where PW1.AssetRepairTrackId=@AssetRepairTrackId
				
union all
			
	SELECT '','WM-6','PMPFT -'+ PFTProcessName [ProcessName],PFTConfigId,MeterReadingTypeId as [MeterReadingTypeId],ObjectNumber as [ObjectNumber],
	CBMMonitorId as [CBMMonitorId],	TriggerValue as [TriggerValue],LastMeterReadingValue as [MeterReadingValue] FROM 
  (SELECT 
	CASE WHEN MeterReadingTypeId = 4 THEN (CASE WHEN LastMeterReadingValue = 1 THEN 0 ELSE 3 END) 
		-- if onetime mandatory PM is perform then do not show the record otherwise its due
	ELSE
	  CASE WHEN LastMeterReadingValue >  dbo.ufn_CBMMonitor_GetTriggerValue(ItemNum, @AssetRepairTrackId, PFTConfigId, MeterReadingTypeId)  THEN 3   
		   WHEN LastMeterReadingValue > (dbo.ufn_CBMMonitor_GetTriggerValue(ItemNum, @AssetRepairTrackId, PFTConfigId, MeterReadingTypeId) * 0.9) THEN 2  
		 ELSE 1 END
 END [PMCheckStatus], *   
 FROM  
 (  
  SELECT f.FixedAssetId, pd.PMDispositionId, m.CreateJDEWO, pc.PFTConfigID, f1.SerialNum, f1.InventoryItemNum [ItemNum], inum.DescShort [AssetDescription], m.MeterReadingTypeId,   
   s.OptionLabel [MeterReadingType],   
  
   COALESCE(i.MeterReadingValue, CASE WHEN m.MeterReadingTypeId != 5 THEN r.LastMeterReadingValue END,   
   CASE 
   WHEN m.MeterReadingTypeId = 4 THEN -- One time mandatory
			ISNULL((
					SELECT MAX(1) 
					FROM pftwo innerPW
					JOIN pftconfig innerPC on innerPW.PftConfigId = innerPC.PftConfigId
					WHERE fixedassetid = f.fixedassetid AND innerPC.ObjectNumber = pc.ObjectNumber 
						AND innerPW.PFTType = 3
						AND innerPC.IsObsolete = 0
					AND (innerPW.Active = 0 AND innerPW.ReasonForChange = 'Closed - Passed' or innerPW.Active = 1)
			),0)
   WHEN m.MeterReadingTypeId = 5 THEN -- scheduled  
			DATEDIFF(dd,   
			-- Check Last PM PFT Completed  
			COALESCE(r.LastMeterReadingValue
			-- If last PMPFT Not present take last installed date  
			,(
				SELECT MIN(DateofTransaction) [DateofTransaction] 
				FROM PartTransferDtl p (NOLOCK)   
				Where Dest = 'IN' AND p.FixedAssetId = f1.fixedAssetId
			 )  
			, f1.DateAdded), GETDATE()) 
	WHEN m.MeterReadingTypeId = 8 THEN -- AIRT  
			CASE WHEN ---check active airt count pmpft
				(SELECT COUNT(pw.PFTWOId) FROM PFTWO pw 
				WHERE pw.FixedAssetId = f1.FixedAssetId AND pw.PFTType = 3 AND pw.PFTConfigId = CASE WHEN ISNULL(CAST(pdi.PFTConfigId AS NVARCHAR(50)), '') != '' THEN pdi.PFTConfigId ELSE pc.PFTConfigId END   
				AND m.MeterReadingTypeId = 8 AND pw.Active = 1) >= 1 
			THEN 0 WHEN --check latest airt count pmpft
				(SELECT COUNT(pw.PFTWOId) FROM PFTWO pw 
				WHERE pw.FixedAssetId = f1.FixedAssetId AND pw.PFTType = 3 AND pw.PFTConfigId = CASE WHEN ISNULL(CAST(pdi.PFTConfigId AS NVARCHAR(50)), '') != '' THEN pdi.PFTConfigId ELSE pc.PFTConfigId END   
				AND m.MeterReadingTypeId = 8) >= 1 
			THEN
				 (SELECT COUNT(*) FROM AssetRepairTrack art 
				WHERE art.FixedAssetId = f.FixedAssetId AND art.DateAdded >= (SELECT MAX(pws.DateAdded) [DateAdded] FROM PFTWO pw JOIN PFTWOSeq pws on pw.PFTWOId = pws.PFTWOId
				WHERE pw.FixedAssetId = f1.FixedAssetId and pw.PFTType = 3 AND pw.PFTConfigId = CASE WHEN ISNULL(CAST(pdi.PFTConfigId AS NVARCHAR(50)), '') != '' THEN pdi.PFTConfigId ELSE pc.PFTConfigId END   
				AND m.MeterReadingTypeId = 8 AND pw.Active = 0))
			ELSE 
				(SELECT COUNT(*) FROM AssetRepairTrack art WHERE art.FixedAssetId = f.FixedAssetId) 
			END 
	WHEN m.MeterReadingTypeId IN (10, 11) THEN -- Days Since DT Return 
	dbo.ufn_CbmMonitor_GetDTLastMeterReadingValue(f.fixedAssetid, m.CBMMonitorId) 
			
	END  

     , DefaultMeterReading, 0) AS LastMeterReadingValue,  
  
   dbo.ufn_CBMMonitor_GetTriggerValue(f1.InventoryItemNum, a.AssetRepairTrackId, pc.PFTConfigId, m.MeterReadingTypeId) [TriggerValue],  
   G.ProcessName AS [PFTProcessName],
   m.CBMMonitorId,
   f1.FixedAssetId [TopLevelFixedAssetId],
   CASE WHEN m.MeterReadingTypeId = 5 AND ISNULL(CAST(r.LastPFTWOId as varchar(50)), '') = '' THEN 1 ELSE 0 END CanAddManualPMDate,
  -- ISNULL(wo.Active,0)as PFTActive,
  ISNULL(wid.Active,0) as PFTActive,
  --(SELECT TOP 1 Active, CASE WHEN COUNT(*)>0 THEN ISNULL(Active,0) ELSE 0 END FROM PFTWO WHERE FixedAssetId=a.FixedAssetId and PFTConfigId=pc.PFTConfigId and PFTType=3 GROUP BY Active,DateAdded order by DateAdded desc ) as PFTActive,
   --CASE WHEN wo.PFTType=3 AND ISNULL(CAST(wo.PFTWOId as varchar(50)), '') = '' THEN 'false' ELSE 'true' END  SetPMdate,
   (SELECT TOP 1 CASE WHEN COUNT(PFTWOId)>0 THEN 'true' ELSE 'false' END FROM PFTWO WHERE FixedAssetId=a.FixedAssetId and PFTConfigId=pc.PFTConfigId and PFTType=3) as SetPMdate,
   pc.ObjectNumber
  FROM CBMMonitor m   
   JOIN CBMMonitorAssetItemNums p on p.CBMMonitorId = m.CBMMonitorId and p.IsParent = 1  
   JOIN CBMMonitorAssetItemNums C ON c.CBMMonitorId = m.CBMMonitorId and c.IsParent = 0  
   JOIN AssetRepairTrack a on a.AssetRepairTrackId = @AssetrepairTrackId and a.ItemNum = p.ItemNum  
   JOIN FixedAssets f ON a.FixedAssetId = f.FixedAssetId  
   --JOIN FixedAssets f1 ON f1.FixedAssetId = ISNULL(f.TopLevelFixedAssetId, f.FixedAssetId) AND f1.InventoryItemNum = c.ItemNum 
   --changed from above join to below as all the records were not pulling 
   JOIN FixedAssets f1 ON ISNULL(f1.TopLevelFixedAssetId, f1.FixedAssetId) =  f.FixedAssetId AND f1.InventoryItemNum = c.ItemNum  
   JOIN SelectOptions s (NOLOCK) ON s.SelectName = 'CBMMeterTypes' AND s.OptionValue = m.MeterReadingTypeId  
   JOIN ItemNums inum on f1.InventoryItemNum = inum.ItemNum  
   JOIN PFTConfig pc ON pc.ObjectNumber = m.ObjectNumber AND pc.IsObsolete = 0
   LEFT JOIN CBMRunAssetMappings cram ON cram.FixedAssetID = f.FixedAssetId
   LEFT JOIN Runs rn on rn.RunID=cram.RunID
   --LEFT JOIN PMDispositionItems pdi (NOLOCK) ON pdi.FixedAssetId = f1.FixedAssetId AND pdi.MeterReadingTypeId = m.MeterReadingTypeId   
			--AND pdi.ObjectNumber = m.ObjectNumber  AND pdi.AssetRepairTrackId = @AssetrepairTrackId 

	OUTER APPLY   ( SELECT TOP 1 PFTConfigId FROM PMDispositionItems
                           WHERE  MeterReadingTypeId = m.MeterReadingTypeId 
								  AND ObjectNumber = m.ObjectNumber AND FixedAssetId = f1.FixedAssetId 
								  ORDER BY CreatedOn DESC
                 ) pdi

   LEFT JOIN CBMCalculatedMeterReadings r (NOLOCK) ON r.FixedAssetId = f1.FixedAssetid AND r.MeterReadingTypeId = m.MeterReadingTypeId  AND r.CBMMonitorId = m.CBMMonitorId
   LEFT JOIN PMDispositions PD(NOLOCK) ON PD.AssetRepairTrackId = a.AssetRepairTrackId and pd.PFTConfigId = CASE WHEN ISNULL(CAST(pdi.PFTConfigId AS NVARCHAR(50)), '') != '' THEN pdi.PFTConfigId ELSE pc.PFTConfigId END  
   LEFT JOIN PMDispositionItems i (NOLOCK)on i.AssetRepairTrackId = a.AssetrepairTrackId and i.FixedAssetId = f.FixedAssetId  
      and i.MeterReadingTypeId = m.MeterReadingTypeId and i.ObjectNumber = m.ObjectNumber  
   LEFT JOIN PFTConfig g on g.PFTConfigId = CASE WHEN ISNULL(CAST(pdi.PFTConfigId AS NVARCHAR(50)), '') != '' THEN pdi.PFTConfigId ELSE pc.PFTConfigId END 
   --LEFT  JOIN PFTWo wo on wo.FixedAssetId=a.FixedAssetId and wo.PFTConfigId=pc.PFTConfigId and wo.PFTType=3--and wo.AssetRepairTrackId= @AssetrepairTrackId 
   OUTER APPLY (SELECT TOP 1  Active  FROM PFTWO WHERE FixedAssetId=a.FixedAssetId and PFTConfigId=pc.PFTConfigId and PFTType=3 GROUP BY Active,DateAdded order by DateAdded desc) wid
   
   WHERE a.AssetRepairTrackId = @AssetrepairTrackId  
 ) A  
 ) B 
 WHERE b.PMCheckStatus =3 and PFTActive=0
 
END



GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetPMDispositionDetails]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--===================================================  
--CREATED BY : SUYEB MOHAMMAD  
--CREATED ON : 09 Dec 2016  
--DESCRIPTION: To get pm disposition details  
--===================================================   
CREATE PROCEDURE [dbo].[usp_CBM_GetPMDispositionDetails]  
 @AssetrepairTrackId UNIQUEIDENTIFIER  
AS  
BEGIN  
  
 SELECT PD.PMDispositionId,   
   PC.PFTConfigId,   
   PC.ProcessName [PFTName],   
   PC.ProcessDesc [Description],   
   ISNULL(DispositionOption, -1) [DispositionOption]  
 FROM PMDispositions PD (NOLOCK)   
   JOIN PFTConfig PC (NOLOCK) ON PD.PFTConfigId = PC.PFTConfigId  
 WHERE PD.AssetRepairTrackId = @assetRepairTrackId  
  
   
 SELECT DISTINCT PD.PFTConfigId,   
   F.SerialNum,   
   F.InventoryItemNum [ItemNum],   
   F.AssetDescription,   
   i.MeterReadingTypeId,   
   S.OptionLabel [MeterReadingType],   
   CASE WHEN i.MeterReadingTypeId=4 THEN CONVERT(DECIMAL(18,2), ISNULL(i.MeterReadingValue,1))
   ELSE CONVERT(DECIMAL(18,2), ISNULL(i.MeterReadingValue,1)) END [LastMeterReadingValue],
   CONVERT(DECIMAL(18,2), i.TriggerValue) [TriggerValue]  
 FROM PMDispositions PD (NOLOCK)  
   JOIN PMDispositionItems i (NOLOCK) ON i.AssetRepairTrackId = pd.AssetRepairTrackId and pd.PFTConfigId = i.PFTConfigId  
   JOIN FixedAssets F (NOLOCK) ON f.FixedAssetId = i.FixedAssetId  
   JOIN SelectOptions S (NOLOCK) ON S.SelectName = 'CBMMeterTypes' AND S.OptionValue = i.MeterReadingTypeId  
 WHERE PD.AssetRepairTrackId = @assetRepairTrackId  
     
 --  SELECT PD.PFTConfigId,   
 --  F.SerialNum,   
 --  F.InventoryItemNum [ItemNum],   
 --  F.AssetDescription,   
 --  C.MeterReadingTypeId,   
 --  S.OptionLabel [MeterReadingType],   
 --  CONVERT(DECIMAL(18,2), C.LastMeterReadingValue)[LastMeterReadingValue],   
 --  ISNULL(dbo.GetCBMMonitorTriggerValue(@assetRepairTrackId, PD.PFTConfigId, C.MeterReadingTypeId),0) [TriggerValue]  
 --FROM PMDispositions PD (NOLOCK)   
 --  JOIN AssetRepairTrack a (NOLOCK) ON a.AssetRepairTrackId = PD.AssetRepairTrackId  
 --  JOIN PartDescPFTConfigs PC (NOLOCK) ON PD.PFTConfigId = PC.PFTConfigID and PC.PFTType = 3  
 --  JOIN FixedAssets F (NOLOCK) ON a.FixedAssetId = ISNULL(F.TopLevelFixedAssetId, F.FixedAssetId)  
 --  JOIN CBMCalculatedMeterReadings C (NOLOCK) ON C.FixedAssetId = F.FixedAssetid  
 --  JOIN SelectOptions S (NOLOCK) ON S.SelectName = 'CBMMeterTypes' AND S.OptionValue = C.MeterReadingTypeId  
 --WHERE  a.AssetRepairTrackId = @AssetrepairTrackId  
  
END  
  
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetPMDispositionHistory]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--===================================================  
--CREATED BY : SUYEB MOHAMMAD  
--CREATED ON : 13 Dec 2016  
--DESCRIPTION: To get pm disposition history  
--=================================================== 
-- Changes: TFS Task 77509 - Added: New function for DT PM get last meter reading value  - User: Sachin Mhalungekar - Date:13/05/2020
--============================================================================    
CREATE PROCEDURE [dbo].[usp_CBM_GetPMDispositionHistory]  
 @AssetrepairTrackId UNIQUEIDENTIFIER  
AS  
  
 IF NOT EXISTS(SELECT * FROM ARTDispositions WHERE Status = 'Approved' AND AssetRepairTrackId = @AssetrepairTrackId)  
 BEGIN  
  exec [usp_CBM_MonitorCreatePMChecks] @AssetrepairTrackId  
 END  
  
 SELECT * FROM 
 (SELECT 
	CASE WHEN MeterReadingTypeId = 4 THEN (CASE WHEN LastMeterReadingValue = 1 THEN 0 ELSE 3 END) 
		-- if onetime mandatory PM is perform then do not show the record otherwise its due
	ELSE
	  CASE WHEN LastMeterReadingValue >  dbo.ufn_CBMMonitor_GetTriggerValue(ItemNum, @AssetRepairTrackId, PFTConfigId, MeterReadingTypeId)  THEN 3   
		   WHEN LastMeterReadingValue > (dbo.ufn_CBMMonitor_GetTriggerValue(ItemNum, @AssetRepairTrackId, PFTConfigId, MeterReadingTypeId) * 0.9) THEN 2  
		 ELSE 1 END
 END [PMCheckStatus], *   
 FROM  
 (  
  SELECT f.FixedAssetId, NULL as PMDispositionId, m.CreateJDEWO, pc.PFTConfigID, f1.SerialNum, f1.InventoryItemNum [ItemNum], inum.DescShort [AssetDescription], m.MeterReadingTypeId,   
   s.OptionLabel [MeterReadingType],   
  
   COALESCE( CASE WHEN m.MeterReadingTypeId != 5 THEN r.LastMeterReadingValue END,   
   CASE 
   WHEN m.MeterReadingTypeId = 4 THEN -- One time mandatory
			ISNULL((
					SELECT MAX(1) 
					FROM pftwo innerPW
					JOIN pftconfig innerPC on innerPW.PftConfigId = innerPC.PftConfigId
					WHERE fixedassetid = f.fixedassetid AND innerPC.ObjectNumber = pc.ObjectNumber 
						AND innerPW.PFTType = 3
						AND innerPC.IsObsolete = 0
					AND (innerPW.Active = 0 AND innerPW.ReasonForChange = 'Closed - Passed' or innerPW.Active = 1)
			),0)
   WHEN m.MeterReadingTypeId = 5 THEN -- scheduled  
			DATEDIFF(dd,   
			-- Check Last PM PFT Completed  
			COALESCE(r.LastMeterReadingValue
			-- If last PMPFT Not present take last installed date  
			,(
				SELECT MIN(DateofTransaction) [DateofTransaction] 
				FROM PartTransferDtl p (NOLOCK)   
				Where Dest = 'IN' AND p.FixedAssetId = f1.fixedAssetId
			 )  
			, f1.DateAdded), GETDATE()) 
	WHEN m.MeterReadingTypeId = 8 THEN -- AIRT  
			CASE WHEN ---check active airt count pmpft
				(SELECT COUNT(pw.PFTWOId) FROM PFTWO pw 
				WHERE pw.FixedAssetId = f1.FixedAssetId AND pw.PFTType = 3 AND pw.PFTConfigId = CASE WHEN ISNULL(CAST(pdi.PFTConfigId AS NVARCHAR(50)), '') != '' THEN pdi.PFTConfigId ELSE pc.PFTConfigId END   
				AND m.MeterReadingTypeId = 8 AND pw.Active = 1) >= 1 
			THEN 0 WHEN --check latest airt count pmpft
				(SELECT COUNT(pw.PFTWOId) FROM PFTWO pw 
				WHERE pw.FixedAssetId = f1.FixedAssetId AND pw.PFTType = 3 AND pw.PFTConfigId = CASE WHEN ISNULL(CAST(pdi.PFTConfigId AS NVARCHAR(50)), '') != '' THEN pdi.PFTConfigId ELSE pc.PFTConfigId END   
				AND m.MeterReadingTypeId = 8) >= 1 
			THEN
				 (SELECT COUNT(*) FROM AssetRepairTrack art 
				WHERE art.FixedAssetId = f.FixedAssetId AND art.DateAdded >= (SELECT MAX(pws.DateAdded) [DateAdded] FROM PFTWO pw JOIN PFTWOSeq pws on pw.PFTWOId = pws.PFTWOId
				WHERE pw.FixedAssetId = f1.FixedAssetId and pw.PFTType = 3 AND pw.PFTConfigId = CASE WHEN ISNULL(CAST(pdi.PFTConfigId AS NVARCHAR(50)), '') != '' THEN pdi.PFTConfigId ELSE pc.PFTConfigId END   
				AND m.MeterReadingTypeId = 8 AND pw.Active = 0))
			ELSE 
				(SELECT COUNT(*) FROM AssetRepairTrack art WHERE art.FixedAssetId = f.FixedAssetId) 
			END 
	WHEN m.MeterReadingTypeId IN (10, 11) THEN -- Days Since DT Return 
	dbo.ufn_CbmMonitor_GetDTLastMeterReadingValue(f.fixedAssetid, m.CBMMonitorId) 
			
	END  

     , DefaultMeterReading, 0) AS LastMeterReadingValue,  
  
   dbo.ufn_CBMMonitor_GetTriggerValue(f1.InventoryItemNum, a.AssetRepairTrackId, pc.PFTConfigId, m.MeterReadingTypeId) [TriggerValue],  
   G.ProcessName AS [PFTProcessName],
   m.CBMMonitorId,
   f1.FixedAssetId [TopLevelFixedAssetId],
   CASE WHEN m.MeterReadingTypeId = 5 AND ISNULL(CAST(r.LastPFTWOId as varchar(50)), '') = '' THEN 1 ELSE 0 END CanAddManualPMDate,
   ISNULL(wo.Active,0)as PFTActive,
   CASE WHEN wo.PFTType=3 AND ISNULL(CAST(wo.PFTWOId as varchar(50)), '') = '' THEN 'false' ELSE 'true' END  SetPMdate,
   pc.ObjectNumber
  FROM CBMMonitor m   
   JOIN CBMMonitorAssetItemNums p on p.CBMMonitorId = m.CBMMonitorId and p.IsParent = 1  
   JOIN CBMMonitorAssetItemNums C ON c.CBMMonitorId = m.CBMMonitorId and c.IsParent = 0  
   JOIN AssetRepairTrack a on a.AssetRepairTrackId = @AssetrepairTrackId and a.ItemNum = p.ItemNum  
   JOIN FixedAssets f ON a.FixedAssetId = f.FixedAssetId  
   --JOIN FixedAssets f1 ON f1.FixedAssetId = ISNULL(f.TopLevelFixedAssetId, f.FixedAssetId) AND f1.InventoryItemNum = c.ItemNum 
   --changed from above join to below as all the records were not pulling 
   JOIN FixedAssets f1 ON ISNULL(f1.TopLevelFixedAssetId, f1.FixedAssetId) =  f.FixedAssetId AND f1.InventoryItemNum = c.ItemNum  
   JOIN SelectOptions s (NOLOCK) ON s.SelectName = 'CBMMeterTypes' AND s.OptionValue = m.MeterReadingTypeId  
   JOIN ItemNums inum on f1.InventoryItemNum = inum.ItemNum  
   JOIN PFTConfig pc ON pc.ObjectNumber = m.ObjectNumber AND pc.IsObsolete = 0
   LEFT JOIN CBMRunAssetMappings cram ON cram.FixedAssetID = f.FixedAssetId
   LEFT JOIN Runs rn on rn.RunID=cram.RunID
   --LEFT JOIN PMDispositionItems pdi (NOLOCK) ON pdi.FixedAssetId = f1.FixedAssetId AND pdi.MeterReadingTypeId = m.MeterReadingTypeId   
			--AND pdi.ObjectNumber = m.ObjectNumber  AND pdi.AssetRepairTrackId = @AssetrepairTrackId 

	OUTER APPLY   ( SELECT TOP 1 PFTConfigId FROM PMDispositionItems
                           WHERE  MeterReadingTypeId = m.MeterReadingTypeId 
								  AND ObjectNumber = m.ObjectNumber AND FixedAssetId = f1.FixedAssetId 
								  ORDER BY CreatedOn DESC
                 ) pdi

   LEFT JOIN CBMCalculatedMeterReadings r (NOLOCK) ON r.FixedAssetId = f1.FixedAssetid AND r.MeterReadingTypeId = m.MeterReadingTypeId  AND r.CBMMonitorId = m.CBMMonitorId
   --LEFT JOIN PMDispositions PD(NOLOCK) ON PD.AssetRepairTrackId = a.AssetRepairTrackId and pd.PFTConfigId = CASE WHEN ISNULL(CAST(pdi.PFTConfigId AS NVARCHAR(50)), '') != '' THEN pdi.PFTConfigId ELSE pc.PFTConfigId END  
   --LEFT JOIN PMDispositionItems i (NOLOCK)on i.AssetRepairTrackId = a.AssetrepairTrackId and i.FixedAssetId = f.FixedAssetId  
   --   and i.MeterReadingTypeId = m.MeterReadingTypeId and i.ObjectNumber = m.ObjectNumber  
   LEFT JOIN PFTConfig g on g.PFTConfigId = CASE WHEN ISNULL(CAST(pdi.PFTConfigId AS NVARCHAR(50)), '') != '' THEN pdi.PFTConfigId ELSE pc.PFTConfigId END 
   LEFT OUTER JOIN PFTWo wo on wo.FixedAssetId=a.FixedAssetId and wo.PFTConfigId=pc.PFTConfigId and wo.PFTType=3--and wo.AssetRepairTrackId= @AssetrepairTrackId 
   
   WHERE a.AssetRepairTrackId = @AssetrepairTrackId  
 ) A  
 ) B 
 WHERE b.PMCheckStatus > 0

 ORDER BY b.SerialNum, b.MeterReadingTypeId  
  
  
 --PM History grid  
 SELECT F.SerialNum,f.InventoryItemNum [ItemNum],F.AssetDescription,S.OptionLabel [MeterReadingType], i.MeterReadingValue, i.TriggerValue,  
   C.ProcessName AS PFTName, CONVERT(varchar(20), pw.DateAdded,101) AS PFTCreationDate  
 FROM AssetRepairTrack A (NOLOCK)  
   JOIN AssetRepairTrack a1 (NOLOCK) ON a1.FixedAssetId = a.FixedAssetId  
   JOIN PFTWO pw (NOLOCK) ON  pw.AssetRepairTrackId = a1.AssetRepairTrackId  
   JOIN PMDispositions p (NOLOCK) ON p.AssetRepairTrackId = a1.AssetRepairTrackId AND p.DispositionOption = 1   
   INNER JOIN PMDispositionItems i (NOLOCK) ON i.AssetRepairTrackId = a1.AssetRepairTrackId and pw.PFTConfigId = i.PFTConfigId  
   INNER JOIN FixedAssets F (NOLOCK) ON i.FixedAssetId = F.FixedAssetId  
   INNER JOIN SelectOptions S (NOLOCK) ON S.SelectName = 'CBMMeterTypes' AND S.OptionValue = i.MeterReadingTypeId  
   INNER JOIN PFTConfig c (NOLOCK) ON c.PFTConfigId = i.PFTConfigId  
 WHERE A.AssetRepairTrackId = @AssetrepairTrackId AND i.CreatedOn < a.DateAdded





GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetScoreBoard]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 10/25/2016
-- Description:	Get Job Information
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_GetScoreBoard] 
	-- Add the parameters for the stored procedure here
	@AssetRepairTrackId uniqueidentifier,
	@UserId int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @FixedAssetId Uniqueidentifier,@StartTimeSP DateTime=GETDATE(),@RunId uniqueidentifier=NEWID()

	SELECT @FixedAssetId = FixedAssetId FROM AssetRepairTrack (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId

	-- TI PFT
	DECLARE @TIPFTStatus INT

	SELECT @TIPFTStatus = CASE WHEN ISNULL(FailCount,0) > 0 THEN 4
								WHEN ISNULL(PassCount,0) > 0 THEN 3
								WHEN ISNULL(Total,0) > 0 THEN 2
						  ELSE 1 END
	FROM 
	(
		SELECT SUM(CASE WHEN ps.PFTResult = 'P' THEN 1 ELSE 0 END) PassCount,
			   SUM(CASE WHEN ps.PFTResult = 'F' THEN 1 ELSE 0 END) FailCount,
			   SUM(CASE WHEN ps.PFTResult = 'F' THEN 1 ELSE 0 END) Total									
		FROM AssetRepairTrack a (NOLOCK)
		JOIN PFTWO p (NOLOCK) on a.ITPFTWOId = p.PFTWOId
		LEFT JOIN PFTWOSeq ps (NOLOCK) on p.PFTWOId = ps.PFTWOId
		WHERE a.AssetRepairTrackId = @AssetRepairTrackId 
	) A

	exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetScoreBoard', '01 TI PFT', @StartTimeSP

	-- Disposition
	SET @StartTimeSP =GETDATE()
	DECLARE @DispositionStatus int
	SELECT @DispositionStatus = CASE WHEN  Status = 'Approved' THEN 3
										WHEN Status = 'District Approved' THEN 2
										WHEN Status = 'Submitted' THEN 1
									ELSE NULL END
							FROM (SELECT TOP 1 Status
							FROM ARTDispositions a (NOLOCK)
							Where a.AssetRepairTrackId = @AssetRepairTrackId
							ORDER BY DateAdded desc) A

	exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetScoreBoard', '02 Disposition', @StartTimeSP
	-- SR PFT
	SET @StartTimeSP =GETDATE()
	DECLARE @SRPFTStatus INT
	SELECT @SRPFTStatus = CASE 
				WHEN s.SRPFTWOId IS NULL THEN NULL --  blank - NO S&R PFT present
				WHEN s.Active = 0 THEN 3 --  green - S&R PFT is active = '0'
				WHEN s.PFTResult IS NULL THEN 1 --  blue - S&R PFT open but no steps complete
				WHEN s.PFTResult = 'F' THEN 4 -- red - S&R PFT most recent step is failed and active = '1'
				ELSE 1 --   yellow - S&R PFT has steps but is active = '1'
			END
	FROM (
			SELECT TOP 1 a.SRPFTWOId, 
					p.PFTWOId, 
					p.Active, 
					ps.PFTResult
			FROM AssetRepairTrack a (NOLOCK) 
			LEFT JOIN PFTWO p (NOLOCK) ON a.SRPFTWOId = p.PFTWOId
			LEFT JOIN PFTWOSeq ps (NOLOCK) ON p.PFTWOId = ps.PFTWOId
			WHERE a.AssetRepairTrackId = @AssetRepairTrackId
			ORDER BY ps.DateAdded DESC
		  ) s

    exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetScoreBoard', '03 SR PFT', @StartTimeSP

	SET @StartTimeSP =GETDATE()
	SELECT @TIPFTStatus [TIPFT],
			@DispositionStatus[Disposition],
			@SRPFTStatus [SRPFT],

			(SELECT CASE WHEN w.Status = 'Closed' THEN 3
										WHEN w.JDEWorkOrderNum IS NULL THEN 2
										WHEN w.Status = 'Open' THEN 1
									ELSE NULL END
								FROM AssetRepairTrack a (NOLOCK) 
								JOIN PFTWO p (NOLOCK) on a.SRPFTWOId = p.PFTWOId
								JOIN WorkOrders w (NOLOCK) on w.WorkOrderId = p.WorkOrderId
								WHERE a.AssetRepairTrackId = @AssetRepairTrackId) [WorkOrder],

			(SELECT p.WorkOrderId
								FROM AssetRepairTrack a (NOLOCK) 
								JOIN PFTWO p (NOLOCK) on a.SRPFTWOId = p.PFTWOId
								WHERE a.AssetRepairTrackId = @AssetRepairTrackId) [WorkOrderId],

			(SELECT CASE WHEN a.IsAssetFromField = 1 AND JobId IS NOT NULL THEN 3
										WHEN a.IsAssetFromField = 1 AND JobId IS NULL THEN 2
										ELSE 1 END
								 FROM AssetRepairTrack a (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId) [JobMapping],

			(CASE WHEN (SELECT COUNT(*) 
					FROM VwChangeNoticeParts				 
					WHERE (FixedAssetId = @FixedAssetId OR TopLevelFixedAssetId = @FixedAssetId) 
					AND ( NotApplicable = 0 ))  > 0 THEN 1 
					ELSE 2 END) [TCN],

			(SELECT CASE WHEN  LOWER(OpenClosed) = 'c' THEN 1
					WHEN LOWER(OpenClosed) In('o','i','h') THEN 2
					ELSE NULL END
				FROM (SELECT R.OpenClosed FROM Requests R (NOLOCK)
				INNER JOIN AssetRepairTrack AR (NOLOCK) ON AR.NCRNumber = R.RequestId
				WHERE AR.AssetRepairTrackId=  @AssetRepairTrackId) A) [NCR],

			(SELECT NCRNumber FROM AssetRepairTrack (NOLOCK) WHERE AssetRepairTrackId = @AssetRepairTrackId) [NCRNumber],

			(SELECT MAX(CASE WHEN CurrentValue > TriggerValue THEN 3
							WHEN CurrentValue * 0.9 > TriggerValue THEN 2
						ELSE 1 END) [PMCheckStatus]
			FROM (
				SELECT CONVERT(INT, ROUND(cr.LastMeterReadingValue, 0)) [CurrentValue], 
					dbo.GetCBMMonitorTriggerValue(@AssetRepairTrackId, c.PFTConfigId, c.MeterReadingTypeId) [TriggerValue] 
				FROM FixedAssets f (NOLOCK) 
					JOIN PartDescPFTConfigs p  (NOLOCK) ON f.InventoryItemNum = p.ItemNum and p.PFTType = 3
					JOIN CBMMonitor c (NOLOCK) ON c.PFTConfigId = p.PFTConfigID and c.Active = 1
					JOIN CBMCalculatedMeterReadings cr (NOLOCK) ON cr.FixedAssetId = f.FixedAssetId AND c.MeterReadingTypeId = cr.MeterReadingTypeId
				WHERE c.MeterReadingTypeId IN (1, 2, 3)
					AND ISNULL(F.TopLevelFixedAssetId, F.FixedAssetId) = (SELECT FixedAssetId FROM AssetRepairTrack (NOLOCK) 
																				WHERE AssetRepairTrackId = @AssetRepairTrackId)

				UNION ALL

				-- For One Time Mandatory
				SELECT 1, 1
				FROM AssetRepairTrack a (NOLOCK)
				JOIN FixedAssets f (NOLOCK) ON a.FixedAssetId = ISNULL(f.TopLevelFixedAssetId, f.FixedAssetId)
				JOIN PartDescPFTConfigs p  (NOLOCK) ON f.InventoryItemNum = p.ItemNum and p.PFTType = 3
				JOIN CBMMonitor c (NOLOCK) ON c.PFTConfigId = p.PFTConfigID AND c.MeterReadingTypeId = 4 AND c.active = 1
				WHERE a.AssetRepairTrackId = @AssetRepairTrackId

				UNION ALL

				-- For Scheduled
				SELECT 
				--DATEDIFF(dd, pw.DateAdded, GETDATE()) [CurrentValue], 
				 DATEDIFF(dd,   
							COALESCE(  
							 (SELECT MAX(pws.DateAdded) [DateAdded] FROM PFTWO pw (NOLOCK) JOIN PFTWOSeq pws (NOLOCK) on pw.PFTWOId = pws.PFTWOId
								WHERE pw.FixedAssetId = f.FixedAssetId and pw.PFTType = 3 and pw.Active = 0) -- PMPFT  
							 ,(SELECT MIN(DateofTransaction) [DateofTransaction] FROM PartTransferDtl p (NOLOCK) Where Dest = 'IN' AND p.FixedAssetId = f.fixedAssetId)  
							 , f.DateAdded)  
							, GETDATE()) [CurrentValue],
				dbo.GetCBMMonitorTriggerValue(a.AssetRepairTrackId, c.PFTConfigId, c.MeterReadingTypeId) [TriggerValue]
				FROM AssetRepairTrack a (NOLOCK)
				JOIN FixedAssets f (NOLOCK) ON a.FixedAssetId = ISNULL(f.TopLevelFixedAssetId, f.FixedAssetId)
				JOIN PartDescPFTConfigs p  (NOLOCK) ON f.InventoryItemNum = p.ItemNum and p.PFTType = 3
				JOIN CBMMonitor c (NOLOCK) ON c.PFTConfigId = p.PFTConfigID AND c.MeterReadingTypeId = 5
				LEFT JOIN PFTWO pw (NOLOCK) ON pw.PFTConfigID = c.PFTConfigId
				WHERE ( DATEDIFF(dd, pw.DateAdded, p.CreatedOn) > dbo.GetCBMMonitorTriggerValue(a.AssetRepairTrackId, c.PFTConfigId, c.MeterReadingTypeId) OR pw.PFTWOId IS NULL)
					AND a.AssetRepairTrackId = @AssetRepairTrackId

			) A 		
		) [PMCheckStatus]
		exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetScoreBoard', '04 PM Check Status', @StartTimeSP
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetToolChangeNotices]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 11/02/2016
-- Description:	Get TCN
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_GetToolChangeNotices] 
	-- Add the parameters for the stored procedure here
	@AssetRepairTrackId uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @FixedAssetId Uniqueidentifier

	SELECT @FixedAssetId = FixedAssetId FROM AssetRepairTrack (NOLOCK) Where AssetRepairTrackId = @AssetRepairTrackId

	SELECT CNId,
		CNNum, 
		ECNNum, 
		CRNum, 
		CNDesc, 
		CNType, 
		DateCompleted, 
		u.UserName, 
		ISNULL(u.LastName,'') +', ' + ISNULL(u.FirstName, '') [FullName]
	FROM vwChangeNoticeParts v (NOLOCK)
	left join Users u (NOLOCK) on v.UserId = u.UserId 
	Where FixedAssetId = @FixedAssetId OR TopLevelFixedAssetId = @FixedAssetId AND NotApplicable = 0
	ORDER BY DateCompleted DESC

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_GetWorkOrder]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_CBM_GetWorkOrder] 
	@AssetRepairTrackId uniqueidentifier
AS
BEGIN
	SET NOCOUNT ON;
	 DECLARE @startDateTime DATETIME,@RunId  uniqueidentifier=NEWID();
    SET @startDateTime  = GETDATE();

--The query for Total Work Order cost
  SELECT 
	'$'+ CONVERT(VARCHAR, CAST(SUM(ISNULL(j.actaullaborinusd,0)) AS MONEY),1) [TotalLabor], 
	'$'+ CONVERT(VARCHAR, CAST(SUM(ISNULL(j.ActualMaterialInUSD,0)) AS MONEY),1) [TotalMaterial],
	'$'+ CONVERT(VARCHAR, CAST(SUM(ISNULL(j.MiscCostInUSD,0))  AS MONEY),1) [TotalMiscCost],
	'$'+ CONVERT(VARCHAR, CAST(SUM(ISNULL(j.actaulmisccostinusd,0)) AS MONEY),1) [TotalWorkOrderCost]
	
FROM -- WorkOrders w INNER JOIN 
	 PFTWO p -- ON p.WorkOrderId = w.WorkOrderId
	 --INNER JOIN AssetRepairTrack a ON a.AssetRepairTrackId = p.AssetRepairTrackId
	 JOIN JDEWorkOrders j ON p.JDEWorkOrderNum = j.WorkOrderNumber
WHERE p.AssetRepairTrackId = @AssetRepairTrackId

exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetWorkOrder', '01.Total Work Order cost', @startDateTime

--The query for Total Corrective Work Order cost 
SET @startDateTime  = GETDATE();
 
SELECT 
	'$'+ CONVERT(VARCHAR, CAST(SUM(ISNULL(j.actaullaborinusd,0)) AS MONEY),1) [TotalLabor], 
	'$'+ CONVERT(VARCHAR, CAST(SUM(ISNULL(j.ActualMaterialInUSD,0)) AS MONEY),1) [TotalMaterial],
	'$'+ CONVERT(VARCHAR, CAST(SUM(ISNULL(j.MiscCostInUSD,0))  AS MONEY),1) [TotalMiscCost],
	'$'+ CONVERT(VARCHAR, CAST(SUM(ISNULL(j.actaulmisccostinusd,0)) AS MONEY),1) [TotalWorkOrderCost]
	
FROM --WorkOrders w INNER JOIN 
	PFTWO p --ON p.WorkOrderId = w.WorkOrderId
	 --INNER JOIN AssetRepairTrack a ON a.AssetRepairTrackId = p.AssetRepairTrackId
JOIN JDEWorkOrders j ON p.JDEWorkOrderNum = j.WorkOrderNumber  
WHERE p.AssetRepairTrackId =  @AssetRepairTrackId AND p.PFTType = 1

   exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetWorkOrder', '02.Total Corrective Work Order cost', @startDateTime

--The Query for JDE work order
select
        pc.ProcessName AS PFTConfigName,
        so.OptionLabel AS PFTType,
        j.WorkOrderNumber AS [JDEWONumber],      
        CASE WHEN j.OrderType IS NOT NULL THEN j.OrderType ELSE (CASE WHEN so.OptionLabel = 'Service & Repair' THEN 'WC' ELSE 'WM' END) END AS [WorkOrderType],
        j.WorkOrderStatusCode AS [WorkOrderStatus],
        j.DateAdded AS [DateCreated],
        j.CompletionDate AS [DateClosed],
        '$'+CONVERT(VARCHAR, CAST(j.actaullaborinusd AS MONEY),1) [Labor], 
        '$'+CONVERT(VARCHAR, CAST(j.ActualMaterialInUSD AS MONEY),1) [Material],
        '$'+CONVERT(VARCHAR, CAST(j.MiscCostInUSD  AS MONEY),1) [Misc],
        '$'+CONVERT(VARCHAR, CAST(j.actaulmisccostinusd AS MONEY),1) [TotalCost],
        j.Description  AS [Description],  
         j.BusinessUnit AS [BusinessUnit],  
         j.ParentWONumber AS [ParentWONumber],  
         CASE WHEN j.TypeWO IS NOT NULL THEN j.TypeWO ELSE (CASE WHEN so.OptionLabel = 'Service & Repair' THEN 'C' ELSE '5' END) END AS [TypeWO]

FROM JDEWorkOrders j
LEFT JOIN PFTWO p on j.WorkOrderNumber = p.JDEWorkOrderNum
LEFT JOIN PFTConfig pc ON p.PFTConfigId = pc.PFTConfigId
LEFT JOIN SelectOptions so ON CAST(p.PFTType AS VARCHAR(10)) = so.OptionValue AND so.SelectName = 'PFTConfigType'
WHERE ISNULL(j.AssetItemNumber, p.AssetNumber) = (SELECT AssetNumber FROM AssetRepairTrack where AssetRepairTrackId = @AssetRepairTrackId)
AND (CASE WHEN p.PFTWOId IS NOT NULL AND p.AssetRepairTrackId = @AssetRepairTrackId THEN 1  -- it will show existing mapped jde work orders
		WHEN p.PFTWOId IS NULL AND j.WorkOrderStatusCode NOT IN ('EX','EV','EZ','EW','EU') THEN 1 -- it will show open jde work orders
		ELSE 0 END) = 1

exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetWorkOrder', '03.Query for JDE work order', @startDateTime


--PFTWO dropdown
SET @startDateTime  = GETDATE();
 SELECT pc.ProcessName,p.PFTWOId
	 FROM PFTWO AS p
	 INNER JOIN PFTConfig AS pc ON p.PFTConfigId = pc.PFTConfigId
	 WHERE p.AssetRepairTrackId=@AssetRepairTrackId and  p.PFTType in(1,2,3) AND p.JDEWorkOrderNum IS NULL

exec usp_MyAdvisor_Logs @RunId,'usp_CBM_GetWorkOrder', '04.PFTWO dropdown', @startDateTime

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_ManualPMCheck]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--===================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 06 Jan 2017
--DESCRIPTION: To create manual pm checks
--=================================================== 
CREATE PROCEDURE [dbo].[usp_CBM_ManualPMCheck]
	@AssetrepairTrackId UNIQUEIDENTIFIER,
	@FixedAssetId UNIQUEIDENTIFIER,
	@PFTConfigId UNIQUEIDENTIFIER,
	@MeterReadingTypeId INT,
	@LastMeterReadingvalue DECIMAL(18,2),
	@TriggerValue DECIMAL(18,2),
	@IsActive INT = 1,
	@DispositionedById INT = NULL,
	@DispositionOption INT = NULL,
	@DispositionedOn DATETIME = NULL
AS
BEGIN 
	IF NOT EXISTS(SELECT 1 FROM PMDispositions WHERE AssetRepairTrackId= @AssetRepairTrackId AND PFTConfigId = @PFTConfigId)
	BEGIN
	INSERT	INTO PMDispositions(AssetRepairTrackId, PFTConfigId, Active, DispositionedById,DispositionOption,DispositionedOn, CreatedBy, CreatedOn)
			VALUES	(@AssetRepairTrackId, @PFTConfigId, @IsActive, @DispositionedById, @DispositionOption, @DispositionedOn, 0, GETDATE())
	END

	IF NOT EXISTS(SELECT 1 FROM PMDispositionItems WHERE AssetRepairTrackId= @AssetRepairTrackId AND PFTConfigId = @PFTConfigId AND MeterReadingTypeId = @MeterReadingTypeId)
	BEGIN
	INSERT	INTO PMDispositionItems(AssetRepairTrackId,FixedAssetId, PFTConfigId, MeterReadingTypeId, MeterReadingValue, TriggerValue, CreatedOn)
			VALUES	(@AssetRepairTrackId, @FixedAssetId, @PFTConfigId, @MeterReadingTypeId, @LastMeterReadingvalue, @TriggerValue, GETDATE())
	END
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_MeterReadings_GetByShockHistogram]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=====================================================
--CREATED BY : Yogesh Mane
--CREATED ON : 27th Dec 2016
--DESCRIPTION: To get meter reading for asset using temprature historgram
--=======================================================
CREATE PROCEDURE [dbo].[usp_CBM_MeterReadings_GetByShockHistogram]
	@FixedAssetId UNIQUEIDENTIFIER,
	@LastReadingValue DECIMAL(10,2) OUTPUT,
	@TotalMeterReadingValue DECIMAL(10,2) OUTPUT
AS
BEGIN

SELECT 
		@TotalMeterReadingValue = SUM(CASE WHEN cbm_b.[End] = 3 THEN cbm_b.Value / 20000 
			 WHEN cbm_b.[End] = 4 THEN cbm_b.Value / 200
		ELSE 0 END),

		@LastReadingValue = SUM(CASE WHEN b.LastPFTDate IS NULL OR b.LastPFTDate < r.StartDate THEN (CASE WHEN cbm_b.[End] = 3 THEN cbm_b.Value / 20000 
																					  WHEN cbm_b.[End] = 4 THEN cbm_b.Value / 200
																					  ELSE 0 END)
			ELSE 0 END)
						 		
	FROM CBMRunAssetMappings ra 
	INNER JOIN Runs r ON r.RunId = ra.RunId
	JOIN dbo.CBMHistogramRuns cbm_r (NOLOCK) ON cbm_r.RunId = r.RunID
	join CBMHistogramBins cbm_b on cbm_b.CBMHistogramRunId = cbm_r.CBMHistogramRunId
	join CBMHistograms cbm_h on cbm_h.CBMHistogramRunId = cbm_r.CBMHistogramRunId and cbm_h.CBMHistogramId = cbm_b.CBMHistogramId
	join CBMHistogramMonitorTools cbm_t ON cbm_t.CBMMonitorToolId = cbm_h.CBMMonitorToolId
	-- TFS# 50574
	--Add toolMnem logic: TVM2+-1, if not found, TVM2-1, if not found, TVM-1
	-- And recorded flag = 1

	JOIN (SELECT ROW_NUMBER() OVER(PARTITION BY JobNumber, RunNumber, MonitorName, MetricName, Toolmnem 
				ORDER BY JobNumber, RunNumber, MonitorName, MetricName, Toolmnem, [ToolMnemPriority] ASC, Recorded DESC) [Selection],
				JobNumber, RunNumber, MonitorName, MetricName, Toolmnem, CBMHistogramId, CBMMonitorToolId
			FROM 
			(select DISTINCT h.CBMHistogramId, t.CBMMonitorToolId, hr.JobNumber, hr.RunNumber, t.MonitorName, h.MetricName, t.Toolmnem, 
			(CASE WHEN ToolMnem = 'TVM2-2' THEN 1
					WHEN ToolMnem = 'TVM2+-1' THEN 2
					WHEN ToolMnem = 'TVM2-1' THEN 3
					ELSE 4 END) [ToolMnemPriority], Recorded
			from CBMRunAssetMappings c 
			join CBMCalculatedMeterReadings m on c.FixedAssetId = m.FixedAssetId
			join CBMHistogramRuns hr on hr.RunId = c.RunId
			join CBMHistogramBins b on b.CBMHistogramRunId = hr.CBMHistogramRunId
			join CBMHistograms h on h.CBMHistogramRunId = hr.CBMHistogramRunId
			join CBMHistogramMonitorTools t ON t.CBMMonitorToolId = h.CBMMonitorToolId
			where c.FixedAssetId = @FixedAssetId and m.MeterReadingTypeId = '6' and MetricName = 'Total Shock'
				AND t.MonitorName = 'SHOCK'
			) A
	) cbm_s ON cbm_h.CBMHistogramId = cbm_s.CBMHistogramId and cbm_s.CBMMonitorToolId = cbm_t.CBMMonitorToolId 
		and cbm_s.Selection = 1

		LEFT JOIN (SELECT MAX(p.DateAdded) [LastPFTDate], c.FixedAssetId
						FROM CBMCalculatedMeterReadings c
						JOIN PFTWO p ON p.PFTWOId = c.LastPFTWOId AND c.MeterReadingTypeId = 6
						WHERE c.FixedAssetId = @FixedAssetId
						GROUP BY c.FixedAssetId
					) b ON b.FixedAssetId = ra.FixedAssetId
	WHERE ra.FixedAssetId = @FixedAssetId

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_MeterReadings_GetByTemperatureHistogram]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=====================================================
--CREATED BY : Yogesh Mane
--CREATED ON : 27th Dec 2016
--DESCRIPTION: To get meter reading for asset using temprature historgram
--=======================================================
--TFS 77962: SACHIN MHALUNGEKAR - 29 June 2020 - ADDED selection on curvename insted ToolMnem
--=======================================================
CREATE PROCEDURE [dbo].[usp_CBM_MeterReadings_GetByTemperatureHistogram]
	@FixedAssetId UNIQUEIDENTIFIER,
	@LastReadingValue DECIMAL(18,2) OUTPUT,
	@TotalMeterReadingValue DECIMAL(18,2) OUTPUT
AS
BEGIN

	DECLARE @startDateTime DATETIME, @runId UNIQUEIDENTIFIER;
	SET @startDateTime = GETDATE();
	SET @runId = NEWID();

	DECLARE @maxPriority INT;
	SELECT @maxPriority = Max([Priority]) + 1 FROM CBMHistogramCurve;

	EXEC usp_MyAdvisor_Logs @runId, 'usp_CBM_MeterReadings_GetByTemperatureHistogram', 'Get max priority from CBMHistogramCurve', @startDateTime;
	SET @startDateTime = GETDATE();

	SELECT @TotalMeterReadingValue = SUM(
			CASE WHEN cbm_b.CBMHistogramId IS NULL THEN r.OperHrs ELSE 
			(CASE WHEN cbm_b.[END] <= 135 THEN 1
				WHEN cbm_b.[END] <=	145	THEN 2
				WHEN cbm_b.[END] <=	155	THEN 4
				WHEN cbm_b.[END] <=	165	THEN 8
				WHEN cbm_b.[END] <=	175	THEN 16
				WHEN cbm_b.[END] <=	185	THEN 32
				WHEN cbm_b.[END] <=	195	THEN 64
				WHEN cbm_b.[END] >= 195 THEN 128
				ELSE 1 END) * Value
			end),

			@LastReadingValue = SUM(
			CASE WHEN cbm_b.CBMHistogramId IS NULL THEN r.OperHrs 
			ELSE (CASE WHEN cbm_b.[END] <= 135 THEN 1
					WHEN cbm_b.[END] <=	145	THEN 2
					WHEN cbm_b.[END] <=	155	THEN 4
					WHEN cbm_b.[END] <=	165	THEN 8
					WHEN cbm_b.[END] <=	175	THEN 16
					WHEN cbm_b.[END] <=	185	THEN 32
					WHEN cbm_b.[END] <=	195	THEN 64
					WHEN cbm_b.[END] >= 195 THEN 128
					ELSE 1 END) 
				*  (CASE WHEN b.LastPFTDate IS NULL THEN VALUE 
						 WHEN b.LastPFTDate < r.StartDate THEN VALUE 
						 ELSE 0 END)
			END)
	FROM CBMRunAssetMappings ra (NOLOCK)
	INNER JOIN Runs r (NOLOCK) ON r.RunId = ra.RunId
	LEFT JOIN dbo.CBMHistogramRuns cbm_r (NOLOCK) ON cbm_r.RunId = r.RunID
	LEFT JOIN CBMHistogramBins cbm_b (NOLOCK) on cbm_b.CBMHistogramRunId = cbm_r.CBMHistogramRunId
	LEFT JOIN CBMHistograms cbm_h with(index([IX_CBMHistograms])) on cbm_h.CBMHistogramRunId = cbm_r.CBMHistogramRunId and cbm_h.CBMHistogramId = cbm_b.CBMHistogramId
	LEFT JOIN CBMHistogramMonitorTools cbm_t (NOLOCK) ON cbm_t.CBMMonitorToolId = cbm_h.CBMMonitorToolId

	-- TFS# 50574
	--Add toolMnem logic: TVM2+-1, if not found, TVM2-1, if not found, TVM-1
	-- And recorded flag = 1

	JOIN (SELECT ROW_NUMBER() OVER(PARTITION BY JobNumber, RunNumber, MonitorName, MetricName, Toolmnem 
				ORDER BY JobNumber, RunNumber, MonitorName, MetricName, Toolmnem, [ToolMnemPriority] ASC, Recorded DESC) [Selection],
				JobNumber, RunNumber, MonitorName, MetricName, Toolmnem, CBMHistogramId, CBMMonitorToolId
			FROM 
			(select DISTINCT h.CBMHistogramId, t.CBMMonitorToolId, hr.JobNumber, hr.RunNumber, t.MonitorName, h.MetricName, t.Toolmnem, 
			--(CASE WHEN ToolMnem = 'TVM2-2' THEN 1
			--		WHEN ToolMnem = 'TVM2+-1' THEN 2
			--		WHEN ToolMnem = 'TVM2-1' THEN 3
			--		ELSE 4 END) [ToolMnemPriority]
			(SELECT ISNULL((SELECT TOP 1 chc.[Priority] FROM CBMHistogramCurve chc (NOLOCK) WHERE chc.CurveName = h.CurveName ORDER BY chc.[Priority]), @maxPriority)) [ToolMnemPriority]
			, Recorded
			from CBMRunAssetMappings c (NOLOCK)
			join CBMCalculatedMeterReadings m (NOLOCK) on c.FixedAssetId = m.FixedAssetId
			join CBMHistogramRuns hr (NOLOCK) on hr.RunId = c.RunId
			join CBMHistogramBins b (NOLOCK) on b.CBMHistogramRunId = hr.CBMHistogramRunId
			join CBMHistograms h with(index([IX_CBMHistograms])) on h.CBMHistogramRunId = hr.CBMHistogramRunId
			join CBMHistogramMonitorTools t (NOLOCK) ON t.CBMMonitorToolId = h.CBMMonitorToolId
			where c.FixedAssetId = @FixedAssetId and m.MeterReadingTypeId = '3' AND t.MonitorName = 'THERMAL'
			) A
	) cbm_s ON cbm_h.CBMHistogramId = cbm_s.CBMHistogramId and cbm_s.CBMMonitorToolId = cbm_t.CBMMonitorToolId 
		and cbm_s.Selection = 1

		LEFT JOIN (SELECT MAX(p.DateAdded) [LastPFTDate], c.FixedAssetId
						FROM CBMCalculatedMeterReadings c (NOLOCK)
						JOIN PFTWO p (NOLOCK) ON p.PFTWOId = c.LastPFTWOId AND c.MeterReadingTypeId = 3
						WHERE c.FixedAssetId = @FixedAssetId
						GROUP BY c.FixedAssetId
					) b ON b.FixedAssetId = ra.FixedAssetId
	WHERE ra.FixedAssetId = @FixedAssetId

	EXEC usp_MyAdvisor_Logs @runId, 'usp_CBM_MeterReadings_GetByTemperatureHistogram', 'Get meter readings ByTemperatureHistogram', @startDateTime

END


GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_MeterReadings_GetByVibrationHistogram]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=====================================================
--CREATED BY : Yogesh Mane
--CREATED ON : 14 June 2016
--DESCRIPTION: To get meter reading for asset using temprature historgram
--=======================================================
CREATE PROCEDURE [dbo].[usp_CBM_MeterReadings_GetByVibrationHistogram]
	@FixedAssetId UNIQUEIDENTIFIER,
	@LastReadingValue DECIMAL(10,2) OUTPUT,
	@TotalMeterReadingValue DECIMAL(10,2) OUTPUT
AS
BEGIN
	-- if Axial RMS then [End] should be greater then 0.5 and formula is (END * END * Value / 1600)
	-- if Lateral RMS then [End] should be greater then 1 and formula is (END * END * Value / 3200)
	-- if Torsional RMS then [End] should be greater then 1 and formula is (END * END * Value / 1600)
	SELECT @TotalMeterReadingValue = SUM(CASE WHEN cbm_s.MetricName = 'Axial RMS' AND [END] > 0.5 THEN [End] * [End] * [Value] / 1600 
					WHEN cbm_s.MetricName = 'Lateral RMS' AND [END] > 1 THEN [End] * [End] * [Value] / 3200 
					WHEN cbm_s.MetricName = 'Torsional RMS' AND [END] > 1 THEN [End] * [End] * [Value] / 1600 
			ELSE 0 END) * 100,
	@LastReadingValue = SUM(CASE WHEN b.LastPFTDate IS NULL OR b.LastPFTDate < r.StartDate  
			THEN (CASE WHEN cbm_s.MetricName = 'Axial RMS' AND [END] > 0.5 THEN [End] * [End] * [Value] / 1600 
					WHEN cbm_s.MetricName = 'Lateral RMS' AND [END] > 1 THEN [End] * [End] * [Value] / 3200 
					WHEN cbm_s.MetricName = 'Torsional RMS' AND [END] > 1 THEN [End] * [End] * [Value] / 1600 
					ELSE 0 END) ELSE 0 END) * 100
	FROM CBMRunAssetMappings ra (NOLOCK)
	INNER JOIN Runs r (NOLOCK) ON r.RunId = ra.RunId
	JOIN dbo.CBMHistogramRuns cbm_r (NOLOCK) ON cbm_r.RunId = r.RunID
	join CBMHistogramBins cbm_b (NOLOCK) on cbm_b.CBMHistogramRunId = cbm_r.CBMHistogramRunId
	join CBMHistograms cbm_h (NOLOCK) on cbm_h.CBMHistogramRunId = cbm_r.CBMHistogramRunId and cbm_h.CBMHistogramId = cbm_b.CBMHistogramId
	join CBMHistogramMonitorTools cbm_t (NOLOCK) ON cbm_t.CBMMonitorToolId = cbm_h.CBMMonitorToolId
	-- TFS# 50574
	--Add toolMnem logic: TVM2+-1, if not found, TVM2-1, if not found, TVM-1
	-- And recorded flag = 1

	JOIN (SELECT ROW_NUMBER() OVER(PARTITION BY JobNumber, RunNumber, MonitorName, MetricName, Toolmnem 
				ORDER BY JobNumber, RunNumber, MonitorName, MetricName, Toolmnem, [ToolMnemPriority] ASC, Recorded DESC) [Selection],
				JobNumber, RunNumber, MonitorName, MetricName, Toolmnem, CBMHistogramId, CBMMonitorToolId
			FROM 
			(select DISTINCT h.CBMHistogramId, t.CBMMonitorToolId, hr.JobNumber, hr.RunNumber, t.MonitorName, h.MetricName, t.Toolmnem, 
			(CASE WHEN ToolMnem = 'TVM2-2' THEN 1 WHEN ToolMnem = 'TVM2+-1' THEN 2 WHEN ToolMnem = 'TVM2-1' THEN 3  ELSE 4 END) [ToolMnemPriority], Recorded
			from CBMRunAssetMappings c (NOLOCK) 
			join CBMCalculatedMeterReadings m (NOLOCK) on c.FixedAssetId = m.FixedAssetId
			join CBMHistogramRuns hr (NOLOCK) on hr.RunId = c.RunId
			join CBMHistogramBins b (NOLOCK) on b.CBMHistogramRunId = hr.CBMHistogramRunId
			join CBMHistograms h (NOLOCK) on h.CBMHistogramRunId = hr.CBMHistogramRunId
			join CBMHistogramMonitorTools t (NOLOCK) ON t.CBMMonitorToolId = h.CBMMonitorToolId
			where c.FixedAssetId = @FixedAssetId and m.MeterReadingTypeId = '7' and MetricName IN ('Axial RMS', 'Lateral RMS', 'Torsional RMS')
				AND t.MonitorName = 'SHOCK'
			) A
	) cbm_s ON cbm_h.CBMHistogramId = cbm_s.CBMHistogramId and cbm_s.CBMMonitorToolId = cbm_t.CBMMonitorToolId 
		and cbm_s.Selection = 1

	LEFT JOIN (SELECT MAX(p.DateAdded) [LastPFTDate], c.FixedAssetId
					FROM CBMCalculatedMeterReadings c(NOLOCK) 
					JOIN PFTWO p (NOLOCK) ON p.PFTWOId = c.LastPFTWOId AND c.MeterReadingTypeId = 7
					WHERE c.FixedAssetId = @FixedAssetId
					GROUP BY c.FixedAssetId
				) b ON b.FixedAssetId = ra.FixedAssetId
	WHERE ra.FixedAssetId = @FixedAssetId and cbm_b.[End] >= 1 and [value] > 0 --and cbm_h.CBMHistogramRunId = '7675B2C8-72B7-4CBE-9FD9-EE071A601226'

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_MonitorAdd]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 16-Dec-2016
-- Description:	Create CBMMonitor Record
-- =============================================
-- Changes: TFS Task 71346 - Added ObjectNumber to CBM Monitor - Sachin Mhalungekar - 17/09/2019
-- Changes: TFS Task 77995 - No validation is required while adding to CBM Monitor - Sachin Mhalungekar - 05/06/2020
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_MonitorAdd]
	@pftConfigId uniqueidentifier,
	@meterReadingTypeId int,
	@globalTrigger int,
	@createJDEWO bit,
	@active bit,
	@userId int,
	@DefaultMeterReading decimal(18,2) = NULL,
	@EffectiveDate datetime = NULL
AS
BEGIN

	DECLARE @AlreadyExists bit, @CBMMonitorId int, @ObjectNumber int

	--IF NOT EXISTS(SELECT * FROM CBMMonitor (NOLOCK) WHERE PFTConfigId = @pftConfigId AND MeterReadingTypeId = @meterReadingTypeId)
	--	BEGIN
		
			SELECT TOP 1 @ObjectNumber = ObjectNumber FROM PFTConfig (NOLOCK) WHERE PFTConfigId = @pftConfigId;

			INSERT INTO CBMMonitor(PFTConfigId, MeterReadingTypeId, GlobalTrigger, CreateJDEWO, Active, CreatedBy, CreatedOn,DefaultMeterReading, EffectiveDate, ObjectNumber)
			SELECT @pftConfigId, @meterReadingTypeId, @globalTrigger, @createJDEWO, @active, CONVERT(VARCHAR(MAX),@userId), GETDATE(),@DefaultMeterReading, @EffectiveDate, @ObjectNumber

			SELECT @@IDENTITY [CBMMonitorId], 0 [AlreadyExists]
	--	END
	--ELSE
	--	BEGIN
	--		SELECT TOP 1 [CBMMonitorId], 1 [AlreadyExists] FROM CBMMonitor (NOLOCK) WHERE PFTConfigId = @pftConfigId AND MeterReadingTypeId = @meterReadingTypeId
	--	END
END



GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_MonitorAddCustoms]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 12/19/2016
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_MonitorAddCustoms]
	-- Add the parameters for the stored procedure here
	@CBMMonitorId INT,
	@TriggerType char(1), 
	@TriggerName VARCHAR(MAX), 
	@TriggerValue int,
	@UserId int
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @PFTConfigId uniqueidentifier, @MeterReadingTypeId int,  @ObjectNumber int

	SELECT @PFTConfigId = PFTConfigId, @MeterReadingTypeId = MeterReadingTypeId FROM CBMMonitor (NOLOCK) WHERE CBMMonitorId = @CBMMonitorId

	SELECT TOP 1 @ObjectNumber = ObjectNumber FROM PFTConfig (NOLOCK) WHERE PFTConfigId = @PFTConfigId;

	-- Audit Starts
	
	insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
	values (2030, @UserId, @CBMMonitorId, GETDATE(), NULL, 'CBMMonitorCustoms')

	INSERT INTO AuditCBMMonitorCustoms
	SELECT @@IDENTITY, * 
	FROM CBMMonitorCustoms WHERE PFTConfigId = @PFTConfigId AND MeterReadingTypeId = @MeterReadingTypeId AND TriggerType = @TriggerType
		AND TriggerName IN (SELECT ENTRY FROM dbo.ListToTable(@TriggerName) a)

	-- Audit Ends

	DELETE FROM CBMMonitorCustoms 
	WHERE ObjectNumber = @ObjectNumber AND MeterReadingTypeId = @MeterReadingTypeId AND TriggerType = @TriggerType
		AND TriggerName IN (SELECT ENTRY FROM dbo.ListToTable(@TriggerName) a)

    INSERT INTO CBMMonitorCustoms(PFTConfigId, MeterReadingTypeId, TriggerType, TriggerName, TriggerValue, CreatedOn, ObjectNumber)
	SELECT @PFTConfigId, @MeterReadingTypeId, @TriggerType, a.[entry], @TriggerValue, GETDATE(), @ObjectNumber
	FROM dbo.ListToTable(@TriggerName) a
END

GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_MonitorAddItemNums]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 12/19/2016
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_MonitorAddItemNums]
	-- Add the parameters for the stored procedure here
	@CBMMonitorId INT,
	@ItemNums VARCHAR(MAX),
	@UserId int
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @PFTConfigId uniqueidentifier

	SELECT @PFTConfigId = PFTConfigId FROM CBMMonitor (NOLOCK) WHERE CBMMonitorId = @CBMMonitorId

	-- Audit Starts
	
	insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
	values (2029, @UserId, @CBMMonitorId, getdate(), NULL, 'PartDescPFTConfigs')

	INSERT INTO AuditPartDescPFTConfigs 
	SELECT @@IDENTITY, * FROM  PartDescPFTConfigs WHERE PFTConfigID = @PFTConfigId AND PFTType = 3

	-- Audit Ends

    INSERT INTO PartDescPFTConfigs(ItemNum, PFTConfigID, PFTType, CreatedOn)
	SELECT Entry, @PFTConfigId, 3, GETDATE()
	FROM dbo.ListToTable(@ItemNums) a
	WHERE a.entry NOT IN (SELECT ItemNum FROM PartDescPFTConfigs WHERE PFTConfigId = @PFTConfigId AND PFTType = 3)
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_MonitorCalculatedMeterReadings]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_CBM_MonitorCalculatedMeterReadings]
	@JobNumber VARCHAR(50)
AS

BEGIN


SET NOCOUNT ON;


BEGIN TRANSACTION;  
  
BEGIN TRY 

	INSERT INTO [dbo].[StoreProcedureLogs] ([ProcedureName],[Activity],[ActivityDateTime],[Status],[Error],[ErrorStackTrace])
	VALUES (OBJECT_NAME(@@PROCID),'',GETDATE(),'Sucessfull',NULL,NULL)
	
	DECLARE @DateNow Datetime, @AssetRepairTrackId uniqueidentifier

	DECLARE @CBMRunAssetMappings TABLE
	(
		RunId uniqueidentifier,
		FixedAssetId uniqueidentifier,
		ImportDate datetime,
		PFTConfigId uniqueidentifier,
		MeterReadingTypeId int,
		ParentFixedAssetId uniqueidentifier,
		TopLevelFixedAssetId uniqueidentifier,
		CBMMonitorId INT
	)
	

	DECLARE @TempCBMRunAssetMappings TABLE
	(
		RunId uniqueidentifier,
		FixedAssetId uniqueidentifier,
		ImportDate datetime,
		PFTConfigId uniqueidentifier,
		MeterReadingTypeId int,
		ParentFixedAssetId uniqueidentifier,
		TopLevelFixedAssetId uniqueidentifier,
		CBMMonitorId INT
	)

	INSERT INTO @CBMRunAssetMappings
	SELECT DISTINCT R.RunID, F.FixedAssetId, R.ImportDate, C.PFTConfigId, C.MeterReadingTypeId, f.ParentFixedAssetId, f.TopLevelFixedAssetId, c.CBMMonitorId
	FROM Jobs j (NOLOCK) 
	JOIN Wells w (NOLOCK) ON j.JobId = w.JobId
	JOIN Runs R (NOLOCK) ON r.WellId = w.WellId AND r.IsDeleted = 0
	JOIN ToolStringComponentInfo tci (NOLOCK) ON tci.RunId = r.RunId
    JOIN CBMMonitorAssetItemNums cai (NOLOCK) ON cai.ItemNum = tci.InventoryItemNum AND cai.IsParent = 1
	JOIN CBMMonitor c (NOLOCK) ON c.CBMMonitorId = cai.CBMMonitorId and c.Active = 1
	JOIN FixedAssets f (NOLOCK) ON f.TopLevelFixedAssetId = tci.FixedAssetId
	JOIN CBMMonitorAssetItemNums pdt (NOLOCK) ON pdt.ItemNum = f.InventoryItemNum and c.CBMMonitorId = pdt.CBMMonitorId and pdt.IsParent = 0
	WHERE j.JobNumber = @JobNumber and r.IsDeleted = 0
	 AND c.MeterReadingTypeId in (1, 2, 3, 6, 7, 9); -- To avoid getting scheduled records to be inserted -- sachin M - 29-01-2020

	 INSERT INTO [dbo].[StoreProcedureLogs] ([ProcedureName],[Activity],[ActivityDateTime],[Status],[Error],[ErrorStackTrace])
	 VALUES (OBJECT_NAME(@@PROCID),'Completed Insert runs data into table variable @CBMRunAssetMappings, JobNumber '+@JobNumber,GETDATE(),'Sucessfull',NULL,NULL)

	DECLARE @Count int
	SELECT @Count  = COUNT(*) FROM @CBMRunAssetMappings
	Print @Count
	
	--SET @Count = 1

	-- DELETE Existing Records if any with same run id
	DELETE FROM CBMRunAssetMappings
	WHERE RunId IN (SELECT RunId 
					FROM Runs R (NOLOCK) 
					INNER JOIN Wells w (NOLOCK) ON r.WellID = w.WellID AND r.IsDeleted = 0
					INNER JOIN Jobs	j (NOLOCK) ON j.JobId = w.JobID
					WHERE j.JobNumber = @JobNumber)

	INSERT INTO [dbo].[StoreProcedureLogs] ([ProcedureName],[Activity],[ActivityDateTime],[Status],[Error],[ErrorStackTrace])
	VALUES (OBJECT_NAME(@@PROCID),'DELETE Existing Records if any with same run id , JobNumber '+@JobNumber,GETDATE(),'Sucessfull',NULL,NULL)

	print 'DELETE Existing Records if any with same run id , JobNumber '+@JobNumber

	SET @DateNow = GETDATE()

	-- Insert Run and Fixed Asset
	INSERT INTO CBMRunAssetMappings (RunId, FixedAssetId, ParentFixedAssetId, TopLevelFixedAssetId, ImportDate, CreatedOn)
	SELECT DISTINCT RunId, FixedAssetId, ParentFixedAssetId, TopLevelFixedAssetId, ImportDate, @DateNow  FROM @CBMRunAssetMappings

	INSERT INTO [dbo].[StoreProcedureLogs] ([ProcedureName],[Activity],[ActivityDateTime],[Status],[Error],[ErrorStackTrace])
	VALUES (OBJECT_NAME(@@PROCID),'Insert Run and Fixed Asset , JobNumber '+@JobNumber,GETDATE(),'Sucessfull',NULL,NULL)

	print 'Insert Run and Fixed Asset , JobNumber '+@JobNumber
	-- Recalculate the meter readings
	
	/*DECLARE db_cursor1 CURSOR FOR  */

	--SELECT	DISTINCT FixedAssetId, TopLevelFixedAssetId, MeterReadingTypeId, CBMMonitorId FROM @CBMRunAssetMappings
	
	--OPEN db_cursor1   
	--FETCH NEXT FROM db_cursor1 INTO @FixedAssetId, @TopLevelFixedAssetId, @MeterReadingTypeId, @CBMMonitorId
	Insert into @TempCBMRunAssetMappings 
	SELECT * FROM @CBMRunAssetMappings

	WHILE (@Count>0)
	--(EXISTS(SELECT count(1) from @CBMRunAssetMappings))
	BEGIN   
	    DECLARE @MeterReadingTypeId int, @CBMMonitorId INT
	    DECLARE @FixedAssetId UNIQUEIDENTIFIER, @TopLevelFixedAssetId uniqueidentifier,@RunId uniqueidentifier,@ImportDate Datetime
	
		DECLARE @LastMeterReadingValue DECIMAL(18,2)
		DECLARE @LifeTimeValue DECIMAL(18,2)
  	     
		--print @count
		--SET @Count = @Count + 1

		SELECT top 1 @FixedAssetId=FixedAssetId, @TopLevelFixedAssetId=TopLevelFixedAssetId,@MeterReadingTypeId= MeterReadingTypeId, @CBMMonitorId=CBMMonitorId, @RunId=RunId,@ImportDate=ImportDate FROM @CBMRunAssetMappings

		IF NOT EXISTS (SELECT * FROM dbo.CBMCalculatedMeterReadings (NOLOCK) WHERE FixedAssetId = @FixedAssetId AND MeterReadingTypeId = @MeterReadingTypeId AND CBMMonitorId = @CBMMonitorId)
		BEGIN
			INSERT INTO dbo.CBMCalculatedMeterReadings  (FixedAssetId, MeterReadingTypeId, LastMeterReadingValue, LifeTimeValue, UpdatedOn, CBMMonitorId)
			SELECT @FixedAssetId, @MeterReadingTypeId, '0', '0', GETDATE(), @CBMMonitorId
		END

		IF (@MeterReadingTypeId = 1 OR @MeterReadingTypeId = 2 OR @MeterReadingTypeId = 9)
			BEGIN
				EXEC usp_GetActualMeterReading @FixedAssetId, @MeterReadingTypeId, @LastMeterReadingValue OUT, @LifeTimeValue OUT
				
				INSERT INTO [dbo].[StoreProcedureLogs] ([ProcedureName],[Activity],[ActivityDateTime],[Status],[Error],[ErrorStackTrace])
	            VALUES (OBJECT_NAME(@@PROCID),'Completed usp_GetActualMeterReading @MeterReadingTypeId = 1 OR @MeterReadingTypeId = 2 OR @MeterReadingTypeId = 9 , JobNumber '+@JobNumber,GETDATE(),'Sucessfull',NULL,NULL)
				print 'Completed usp_GetActualMeterReading @MeterReadingTypeId = 1 OR @MeterReadingTypeId = 2 OR @MeterReadingTypeId = 9 , JobNumber '+@JobNumber
				SELECT @FixedAssetId,@LastMeterReadingValue
			END

		ELSE IF (@MeterReadingTypeId = 3)
			BEGIN
				EXEC [dbo].[usp_CBM_MeterReadings_GetByTemperatureHistogram] @FixedAssetId, @LastMeterReadingValue OUT, @LifeTimeValue OUT
				
				INSERT INTO [dbo].[StoreProcedureLogs] ([ProcedureName],[Activity],[ActivityDateTime],[Status],[Error],[ErrorStackTrace])
	            VALUES (OBJECT_NAME(@@PROCID),'Completed usp_CBM_MeterReadings_GetByTemperatureHistogram @MeterReadingTypeId = 3 , JobNumber '+@JobNumber,GETDATE(),'Sucessfull',NULL,NULL)
				print 'Completed usp_CBM_MeterReadings_GetByTemperatureHistogram @MeterReadingTypeId = 3 , JobNumber '+@JobNumber
				
				print @LifeTimeValue
			END
		ELSE IF(@MeterReadingTypeId = 6)
			BEGIN
				EXEC [dbo].[usp_CBM_MeterReadings_GetByShockHistogram] @FixedAssetId, @LastMeterReadingValue OUT, @LifeTimeValue OUT

				INSERT INTO [dbo].[StoreProcedureLogs] ([ProcedureName],[Activity],[ActivityDateTime],[Status],[Error],[ErrorStackTrace])
	            VALUES (OBJECT_NAME(@@PROCID),'Completed usp_CBM_MeterReadings_GetByTemperatureHistogram @MeterReadingTypeId = 6 , JobNumber '+@JobNumber,GETDATE(),'Sucessfull',NULL,NULL)

				print 'Completed usp_CBM_MeterReadings_GetByTemperatureHistogram @MeterReadingTypeId = 6 , JobNumber '+@JobNumber
				SELECT @FixedAssetId,@LastMeterReadingValue,@LifeTimeValue
			END
		
		ELSE IF(@MeterReadingTypeId = 7)
			BEGIN
				EXEC [dbo].[usp_CBM_MeterReadings_GetByVibrationHistogram] @FixedAssetId, @LastMeterReadingValue OUT, @LifeTimeValue OUT

				INSERT INTO [dbo].[StoreProcedureLogs] ([ProcedureName],[Activity],[ActivityDateTime],[Status],[Error],[ErrorStackTrace])	           
			    VALUES (OBJECT_NAME(@@PROCID),'Completed usp_CBM_MeterReadings_GetByTemperatureHistogram @MeterReadingTypeId = 7, JobNumber '+@JobNumber ,GETDATE(),'Sucessfull',NULL,NULL)
				print 'Completed usp_CBM_MeterReadings_GetByTemperatureHistogram @MeterReadingTypeId = 3 , JobNumber '+@JobNumber
				SELECT @FixedAssetId,@LastMeterReadingValue,@LifeTimeValue
			END

        DECLARE @DefaultMeterReading decimal = 0;

		SELECT @DefaultMeterReading = (CASE WHEN ISNULL(c.EffectiveDate,GETDATE()) > ISNULL((SELECT MIN(DateOfTransaction) 
																							FROM PartTransferDtl WHERE FixedAssetId = f.fixedAssetId AND Dest ='IN'),f.DateAdded) 
											THEN DefaultMeterReading ELSE 0 END)
		FROM dbo.CBMCalculatedMeterReadings r
		JOIN FixedAssets f ON r.FixedAssetId = f.FixedAssetId 
		JOIN FixedAssets f1 ON f1.FixedAssetId = f.TopLevelFixedAssetId
		JOIN CBMMonitorAssetItemNums p ON p.ItemNum = f.InventoryItemNum and p.IsParent = 0
		JOIN CBMMonitorAssetItemNums a ON a.ItemNum = f1.InventoryItemNum and a.IsParent = 1
		JOIN CBMMonitor c ON c.CBMMonitorId = a.CBMMonitorId and c.CBMMonitorId = p.CBMMonitorId and c.Active = 1
		WHERE f.FixedAssetId = @FixedAssetId and c.MeterReadingTypeId = @MeterReadingTypeId
		
		
		INSERT INTO [dbo].[StoreProcedureLogs] ([ProcedureName],[Activity],[ActivityDateTime],[Status],[Error],[ErrorStackTrace])
	    VALUES (OBJECT_NAME(@@PROCID),'Completed insert default meter reading JobNumber '+@JobNumber,GETDATE(),'Sucessfull',NULL,NULL)
		print 'Completed select @DefaultMeterReading  , JobNumber '+@JobNumber
		SELECT @FixedAssetId,@DefaultMeterReading

		UPDATE	dbo.CBMCalculatedMeterReadings
			SET		LastMeterReadingValue = ISNULL(@LastMeterReadingValue,0) + ISNULL(@DefaultMeterReading,0),
					LifeTimeValue = ISNULL(@LifeTimeValue,0) + ISNULL(@DefaultMeterReading,0),
					UpdatedOn = GETDATE()
			WHERE	FixedAssetId = @FixedAssetId AND MeterReadingTypeId = @MeterReadingTypeId

		INSERT INTO [dbo].[StoreProcedureLogs] ([ProcedureName],[Activity],[ActivityDateTime],[Status],[Error],[ErrorStackTrace])
	    VALUES (OBJECT_NAME(@@PROCID),'Completed Update  default meter reading to @DefaultMeterReading to CBMCalculatedMeterReadings7, JobNumber '+@JobNumber,GETDATE(),'Sucessfull',NULL,NULL)
		print 'Completed Update  @DefaultMeterReading  , JobNumber '+@JobNumber

		 	--Run CBM PM check
		SELECT @AssetRepairTrackId = AssetRepairTrackId FROM AssetRepairTrack (NOLOCK) WHERE FixedAssetId = ISNULL(@TopLevelFixedAssetId, @FixedAssetId) AND [Status] = 'Open'
	
     	IF (@AssetRepairTrackId != null)
			BEGIN				

				exec [usp_CBM_MonitorCreatePMChecks] @AssetRepairTrackId

		END
           
		   DELETE FROM @CBMRunAssetMappings  where @FixedAssetId=FixedAssetId AND  @TopLevelFixedAssetId=TopLevelFixedAssetId AND @MeterReadingTypeId= MeterReadingTypeId AND @CBMMonitorId=CBMMonitorId AND @RunId=RunId AND @ImportDate=ImportDate 
		   SELECT @Count  = COUNT(*) FROM @CBMRunAssetMappings
		   print (@Count)

		--FETCH NEXT FROM db_cursor1 INTO @FixedAssetId, @TopLevelFixedAssetId, @MeterReadingTypeId, @CBMMonitorId
	END

	--CLOSE db_cursor1   
	--DEALLOCATE db_cursor1

	-- cursor to create PM Checks
	--DECLARE db_cursor2 CURSOR FOR  
	--SELECT	DISTINCT FixedAssetId, TopLevelFixedAssetId FROM @CBMRunAssetMappings
	
	--OPEN db_cursor2   
	--FETCH NEXT FROM db_cursor2 INTO @FixedAssetId, @TopLevelFixedAssetId

	--WHILE @@FETCH_STATUS = 0   
	--BEGIN   
		
	--	SELECT @AssetRepairTrackId = AssetRepairTrackId FROM AssetRepairTrack (NOLOCK) WHERE FixedAssetId = ISNULL(@TopLevelFixedAssetId, @FixedAssetId) AND Status = 'Open'
	
	--	IF (@AssetRepairTrackId != null)
	--		BEGIN				

	--			exec [usp_CBM_MonitorCreatePMChecks] @AssetRepairTrackId

	--		END

	--	FETCH NEXT FROM db_cursor2 INTO @FixedAssetId, @TopLevelFixedAssetId
	--END

	--CLOSE db_cursor2   
	--DEALLOCATE db_cursor2

	-- Apply default meter reading to calculations
		--DECLARE @DefaultMeterReading decimal = 0;

	UPDATE fa 
		SET 
			fa.AssetLifeRemaining = alr.AssetLifeRemaining
		FROM FixedAssets fa
		JOIN (SELECT DISTINCT fixedAssetId FROM @TempCBMRunAssetMappings) a ON a.FixedAssetId = fa.FixedAssetId
		JOIN VW_FixedAsset_LifeConsumed alr on fa.FixedAssetId=alr.FixedAssetId

   INSERT INTO [dbo].[StoreProcedureLogs] ([ProcedureName],[Activity],[ActivityDateTime],[Status],[Error],[ErrorStackTrace])
   VALUES (OBJECT_NAME(@@PROCID),'Completed Update  default meter reading to @DefaultMeterReading to CBMCalculatedMeterReadings7, JobNumber '+@JobNumber,GETDATE(),'Sucessfull',NULL,NULL)


 END TRY  
  BEGIN CATCH 

  Declare @Error int,@ErrSev int,@ErrorMessage varchar(Max),@ErrorState int
  SELECT           
         @Error=ERROR_LINE() 	     
        ,@ErrorMessage=ERROR_MESSAGE() 
		,@ErrSev=ERROR_SEVERITY()
		,@ErrorState=ERROR_STATE()
  INSERT INTO [dbo].[StoreProcedureLogs] ([ProcedureName],[Activity],[ActivityDateTime],[Status],[Error],[ErrorStackTrace])
  VALUES (OBJECT_NAME(@@PROCID),'Completed Calculate meterreading with failure7, JobNumber '+@JobNumber,GETDATE(),'Failed',@Error,@ErrorMessage)   
  
    IF @@TRANCOUNT > 0  
        ROLLBACK TRANSACTION;  
	
   RAISERROR (@ErrorMessage, @ErrSev, @ErrorState);

END CATCH;  
  
IF @@TRANCOUNT > 0  
    COMMIT TRANSACTION;  



END

GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_MonitorCreatePMChecks]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--============================================================================  
--MODFIED BY : SUYEB MOHAMMAD  
--MODIFIED ON: 23 May 2017  
--DESCRIPTION: Modified date from getdate to fixedasset dateadded for datediff   
--============================================================================  
-- Changes: TFS Task 71346 - Added ObjectNumber to CBM Monitor - Sachin Mhalungekar - 17/09/2019
--============================================================================  
CREATE PROCEDURE [dbo].[usp_CBM_MonitorCreatePMChecks]  
 @AssetRepairTrackId uniqueidentifier  
AS  
  
SET NOCOUNT ON;  
	DECLARE @pmCount int;
	DECLARE @assetPMChecks TABLE
	(
	parentFixedAssetid UNIQUEIDENTIFIER,
	MeterReadingTypeId int,
	PFTConfigId UNIQUEIDENTIFIER,
	ObjectNumber INT,
	AssetRepairTrackId UNIQUEIDENTIFIER,
	pdiAssetRepairTrackId UNIQUEIDENTIFIER,
	fixedAssetDateAdded DATETIME,
	fixedAssetid UNIQUEIDENTIFIER,
	CBMMonitorId INT
	)

	INSERT INTO @assetPMChecks
	SELECT		f1.FixedAssetId, m.MeterReadingTypeId, pc.PFTConfigId, m.ObjectNumber, a.AssetRepairTrackId, pdi.AssetRepairTrackId, f1.DateAdded, f.FixedAssetId, m.CBMMonitorId
	FROM		CBMMonitor m   
	JOIN		CBMMonitorAssetItemNums p on p.CBMMonitorId = m.CBMMonitorId and p.IsParent = 1  and m.Active = 1
	JOIN		CBMMonitorAssetItemNums C ON c.CBMMonitorId = m.CBMMonitorId and c.IsParent = 0  
	JOIN		AssetRepairTrack a on a.AssetRepairTrackId = @AssetrepairTrackId and a.ItemNum = c.ItemNum  
	JOIN		FixedAssets f ON a.FixedAssetId = f.FixedAssetId  
	JOIN		FixedAssets f1 ON f1.FixedAssetId = ISNULL(f.TopLevelFixedAssetId, f.FixedAssetId) AND f1.InventoryItemNum = p.ItemNum  
	JOIN		PFTConfig pc ON pc.ObjectNumber = m.ObjectNumber AND pc.IsObsolete = 0
	LEFT JOIN	PMDispositionItems pdi (NOLOCK) ON pdi.FixedAssetId = f1.FixedAssetId and pdi.MeterReadingTypeId = m.MeterReadingTypeId   
				AND pdi.ObjectNumber = m.ObjectNumber  AND  pdi.AssetRepairTrackId = @AssetRepairTrackId

	SELECT @pmCount = COUNT(*) FROM @assetPMChecks;

IF(@pmCount > 0)
BEGIN
 -- For runs related monitors  
 INSERT INTO PMDispositionItems (AssetRepairTrackId, FixedAssetId, PFTConfigId, MeterReadingTypeId, TriggerValue, MeterReadingValue, CreatedOn, ObjectNumber)  
 SELECT DISTINCT * FROM   
 ( SELECT a.AssetRepairTrackId, f.FixedAssetId, pc.PFTConfigId, m.MeterReadingTypeId,   
   dbo.ufn_CBMMonitor_GetTriggerValue(pd.ItemNum, a.AssetRepairTrackId, pc.PFTConfigId, m.MeterReadingTypeId) [TriggerValue],   
   CONVERT(INT, ROUND(CASE WHEN m.MeterReadingTypeId != 5 THEN cr.LastMeterReadingValue END, 0)) [MeterReadingValue],   
   GETDATE() [CreatedOn],
   m.ObjectNumber 
 FROM AssetRepairTrack a (NOLOCK)  
 JOIN CBMMonitorAssetItemNums ai (NOLOCK) ON a.ItemNum = ai.ItemNum and ai.IsParent = 1 -- Asset Item Num  
 JOIN CBMMonitor m ON m.CBMMonitorId = ai.CBMMonitorId AND m.Active = 1 -- Monitor is active  
 JOIN FixedAssets f (NOLOCK) ON a.FixedAssetId = f.TopLevelFixedAssetId -- Select Child Components  
 JOIN CBMMonitorAssetItemNums pd (NOLOCK) ON pd.ItemNum = f.InventoryItemNum and m.CBMMonitorId = pd.CBMMonitorId  and pd.IsParent = 0 -- Filter Child Components by monitored on not  
 JOIN CBMCalculatedMeterReadings cr ON cr.FixedAssetId = f.FixedAssetId AND m.MeterReadingTypeId = cr.MeterReadingTypeId  AND m.CBMMonitorId = cr.CBMMonitorId
 JOIN PFTConfig pc ON pc.ObjectNumber = m.ObjectNumber AND pc.IsObsolete = 0
 -- For checking when last time PM PFT created for the component  
 LEFT JOIN (  
   SELECT pdi.FixedAssetId  
   FROM PFTWO p (NOLOCK)  
   JOIN PMDispositionItems pdi ON pdi.PFTConfigId = p.PFTConfigId and p.PFTType = 3  
 ) dm ON dm.FixedAssetId = f.FixedAssetId  
   
 -- For checking when first time part is installed on any component  
 LEFT JOIN (SELECT FixedAssetId, MIN(DateofTransaction) [InstallDate]   
    FROM PartTransferDtl (NOLOCK) WHERE Dest = 'IN' GROUP BY FixedAssetId  
 ) part ON part.FixedAssetId = f.FixedAssetId  
  
 --Check if PM Check already triggered  
 LEFT JOIN PMDispositionItems i (NOLOCK) ON i.FixedAssetId = cr.FixedAssetId AND cr.MeterReadingTypeId = i.MeterReadingTypeId  
    and i.AssetRepairTrackId = @AssetRepairTrackId  and i.ObjectNumber = m.ObjectNumber
 WHERE a.AssetRepairTrackId = @AssetRepairTrackId   
   AND m.MeterReadingTypeId IN (1, 2, 3, 6, 7, 9)  
   --AND dbo.GetCBMMonitorTriggerValue(a.AssetRepairTrackId, m.PFTConfigId, m.MeterReadingTypeId) <= cr.LastMeterReadingValue  
   AND i.AssetRepairTrackId IS NULL  
 ) A WHERE [TriggerValue] <= MeterReadingValue  
   
 -- For One Time Mandatory  
 INSERT INTO PMDispositionItems (AssetRepairTrackId, FixedAssetId, PFTConfigId, MeterReadingTypeId, TriggerValue, MeterReadingValue, CreatedOn, ObjectNumber)  
 SELECT @AssetRepairTrackId, f1.FixedAssetId, pc.PFTConfigId, m.MeterReadingTypeId, 1, null, GETDATE(), m.ObjectNumber   
 FROM CBMMonitor m   
 JOIN CBMMonitorAssetItemNums p on p.CBMMonitorId = m.CBMMonitorId and p.IsParent = 1  AND m.Active = 1
 JOIN CBMMonitorAssetItemNums C ON c.CBMMonitorId = m.CBMMonitorId and c.IsParent = 0  
 JOIN AssetRepairTrack a on a.AssetRepairTrackId = @AssetrepairTrackId and a.ItemNum = c.ItemNum  
 JOIN FixedAssets f ON a.FixedAssetId = f.FixedAssetId  
 JOIN FixedAssets f1 ON f1.FixedAssetId = ISNULL(f.TopLevelFixedAssetId, f.FixedAssetId) AND f1.InventoryItemNum = p.ItemNum  
 JOIN PFTConfig pc ON pc.ObjectNumber = m.ObjectNumber AND pc.IsObsolete = 0
 LEFT JOIN PMDispositionItems pdi (NOLOCK) ON pdi.FixedAssetId = f1.FixedAssetId AND pdi.MeterReadingTypeId = m.MeterReadingTypeId   
			AND pdi.ObjectNumber = m.ObjectNumber 
 LEFT JOIN PFTWO pw on pw.FixedAssetId = f1.FixedAssetId and pw.PFTConfigId = pc.PFTConfigId and 
	((pw.Active = 0 and pw.ReasonForChange ='Closed - Passed') OR pw.Active = 1)
	and pw.PFTType = 3 -- PM PFT  
 WHERE m.MeterReadingTypeId = 4 -- One Time Mandatory  
	AND pdi.AssetRepairTrackId IS NULL AND PW.PFTWOId is null  
  
  
 -- For Scheduled  
 INSERT INTO PMDispositionItems (AssetRepairTrackId, FixedAssetId, PFTConfigId, MeterReadingTypeId, TriggerValue, MeterReadingValue, CreatedOn, ObjectNumber)  
 SELECT AssetRepairTrackId, FixedAssetId, PFTConfigId, MeterReadingTypeId, TriggerValue, MeterReadingValue, GETDATE() [CreatedOn], ObjectNumber   
 FROM   
 ( SELECT @AssetRepairTrackId [AssetRepairTrackId], pmc.parentFixedAssetid [FixedAssetId], pmc.PFTConfigId, pmc.MeterReadingTypeId  
  , dbo.GetCBMMonitorTriggerValue(pmc.AssetRepairTrackId, pmc.PFTConfigId, pmc.MeterReadingTypeId) [TriggerValue]  
  , DATEDIFF(dd,   
   COALESCE(cr.LastMeterReadingValue
	--,(SELECT MAX(pws.DateAdded) [DateAdded] FROM PFTWO pw JOIN PFTWOSeq pws on pw.PFTWOId = pws.PFTWOId
	--  WHERE pw.FixedAssetId = pmc.parentFixedAssetid AND pw.PFTConfigId = CASE WHEN ISNULL(CAST(ca.PFTConfigId AS NVARCHAR(50)), '') != '' THEN ca.PFTConfigId ELSE pmc.PFTConfigId END 
	--  AND pmc.MeterReadingTypeId = 5 AND pw.PFTType = 3 and pw.Active = 0) -- PMPFT  
    ,(SELECT MIN(DateofTransaction) [DateofTransaction] FROM PartTransferDtl p (NOLOCK) Where Dest = 'IN' AND p.FixedAssetId = pmc.parentFixedAssetid)  
    , pmc.fixedAssetDateAdded)  
    , GETDATE()) [MeterReadingValue]  
    , pmc.ObjectNumber
  FROM @assetPMChecks pmc
  LEFT JOIN CBMCalculatedMeterReadings cr ON cr.FixedAssetId = pmc.parentFixedAssetid AND cr.MeterReadingTypeId = pmc.MeterReadingTypeId AND cr.CBMMonitorId = pmc.CBMMonitorId
  --OUTER APPLY	(
		--			SELECT	TOP 1 PFTConfigId FROM PMDispositionItems 
		--			WHERE	MeterReadingTypeId = pmc.MeterReadingTypeId AND ObjectNumber = pmc.ObjectNumber AND FixedAssetId = pmc.parentFixedAssetid ORDER BY CreatedOn DESC
		--		) ca
  WHERE pmc.MeterReadingTypeId = 5 -- One Time Mandatory  
   AND pmc.pdiAssetRepairTrackId IS NULL 
 ) A  
 WHERE a.MeterReadingValue > a.TriggerValue  
  

-- For AIRT Count
INSERT INTO PMDispositionItems (AssetRepairTrackId, FixedAssetId, PFTConfigId, MeterReadingTypeId, TriggerValue, MeterReadingValue, CreatedOn, ObjectNumber)  
 SELECT AssetRepairTrackId, FixedAssetId, PFTConfigId, MeterReadingTypeId, TriggerValue, MeterReadingValue, GETDATE() [CreatedOn], ObjectNumber   
 FROM   
 ( SELECT @AssetRepairTrackId [AssetRepairTrackId], pmc.parentFixedAssetid [FixedAssetId], pmc.PFTConfigId, pmc.MeterReadingTypeId  
  , dbo.GetCBMMonitorTriggerValue(pmc.AssetRepairTrackId, pmc.PFTConfigId, pmc.MeterReadingTypeId) [TriggerValue]  
  , CASE WHEN ---check active airt count pmpft
		(	SELECT COUNT(pw.PFTWOId) FROM PFTWO pw 
			WHERE pw.FixedAssetId = pmc.parentFixedAssetid AND pw.PFTType = 3 AND pw.PFTConfigId = CASE WHEN ISNULL(CAST(ca.PFTConfigId AS NVARCHAR(50)), '') != '' THEN ca.PFTConfigId ELSE pmc.PFTConfigId END
			AND pmc.MeterReadingTypeId = 8 AND pw.Active = 1
		) >= 1 
	THEN 0 WHEN --check latest airt count pmpft
		(	SELECT	COUNT(pw.PFTWOId) FROM PFTWO pw 
			WHERE	pw.FixedAssetId = pmc.parentFixedAssetid AND pw.PFTType = 3 AND 
					pw.PFTConfigId IN (SELECT PFTConfigId FROM PMDispositionItems WHERE MeterReadingTypeId = pmc.MeterReadingTypeId 
					AND ObjectNumber = pmc.ObjectNumber AND FixedAssetId = pmc.parentFixedAssetid)
		) >= 1
	THEN
		 (SELECT COUNT(*) FROM AssetRepairTrack art 
		WHERE art.FixedAssetId = pmc.FixedAssetId AND art.DateAdded >= (SELECT MAX(pws.DateAdded) [DateAdded] FROM PFTWO pw JOIN PFTWOSeq pws on pw.PFTWOId = pws.PFTWOId
		WHERE pw.FixedAssetId = pmc.parentFixedAssetid and pw.PFTType = 3 AND pw.PFTConfigId = CASE WHEN ISNULL(CAST(ca.PFTConfigId AS NVARCHAR(50)), '') != '' THEN ca.PFTConfigId ELSE pmc.PFTConfigId END 
		AND pmc.MeterReadingTypeId = 8 AND pw.Active = 0))
	ELSE 
		(SELECT COUNT(*) FROM AssetRepairTrack art WHERE art.FixedAssetId = pmc.FixedAssetId) 
	END [MeterReadingValue]
   , pmc.ObjectNumber 
  FROM @assetPMChecks pmc
  OUTER APPLY	(
					SELECT	TOP 1 PFTConfigId FROM PMDispositionItems 
					WHERE	MeterReadingTypeId = pmc.MeterReadingTypeId AND ObjectNumber = pmc.ObjectNumber AND FixedAssetId = pmc.parentFixedAssetid ORDER BY CreatedOn DESC
				) ca
  WHERE pmc.MeterReadingTypeId = 8 -- AIRT Count
   AND pmc.pdiAssetRepairTrackId IS NULL 
 ) A  
 WHERE a.MeterReadingValue >= a.TriggerValue


 -- For Days Since DT Return 
INSERT INTO PMDispositionItems (AssetRepairTrackId, FixedAssetId, PFTConfigId, MeterReadingTypeId, TriggerValue, MeterReadingValue, CreatedOn, ObjectNumber)  
 SELECT AssetRepairTrackId, FixedAssetId, PFTConfigId, MeterReadingTypeId, TriggerValue, MeterReadingValue, GETDATE() [CreatedOn], ObjectNumber   
 FROM   
 ( SELECT @AssetRepairTrackId [AssetRepairTrackId], pmc.parentFixedAssetid [FixedAssetId], pmc.PFTConfigId, pmc.MeterReadingTypeId  
  , dbo.GetCBMMonitorTriggerValue(pmc.AssetRepairTrackId, pmc.PFTConfigId, pmc.MeterReadingTypeId) [TriggerValue]  
  , dbo.ufn_CbmMonitor_GetDTLastMeterReadingValue(pmc.fixedAssetid, pmc.CBMMonitorId) AS [MeterReadingValue]
   , pmc.ObjectNumber 
  FROM @assetPMChecks pmc
  OUTER APPLY	(
					SELECT	TOP 1 PFTConfigId FROM PMDispositionItems 
					WHERE	MeterReadingTypeId = pmc.MeterReadingTypeId AND ObjectNumber = pmc.ObjectNumber AND FixedAssetId = pmc.parentFixedAssetid ORDER BY CreatedOn DESC
				) ca
  WHERE pmc.MeterReadingTypeId IN (10,11) -- Days Since DT Return
   AND pmc.pdiAssetRepairTrackId IS NULL 
 ) A  
 WHERE a.MeterReadingValue > a.TriggerValue
 
 INSERT INTO dbo.PMDispositions (PMDispositionId, AssetRepairTrackId, PFTConfigId, Active, CreatedBy, CreatedOn)  
 SELECT NEWID() [PMDispositionId], i.AssetRepairTrackId,  i.PFTConfigId, 1 [Active], 0 [CreatedBy], GETDATE() [CreatedOn]  
 FROM PMDispositionItems i (NOLOCK)  
  LEFT JOIN  PMDispositions p (NOLOCK) ON p.AssetRepairTrackId = i.AssetRepairTrackId AND p.PFTConfigId = i.PFTConfigId  
 WHERE p.PMDispositionId IS NULL AND i.AssetRepairTrackId = @AssetRepairTrackId  
 GROUP BY i.AssetRepairTrackId,  i.PFTConfigId 

 END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_MonitorEditHeader]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 16-Dec-2016
-- Description:	Edit CBMMonitor Record
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_MonitorEditHeader]
	@CBMMonitorId int,
	@GlobalTrigger int,
	@CreateJDEWO bit,
	@Active bit,
	@UserId int,
	@DefaultMeterReading Decimal(18,2) = NULL,
	@EffectiveDate DATETIME = NULL

AS
BEGIN

	exec dbo.spAuditRecords 2028, @UserId, @CBMMonitorId , null, @CBMMonitorId , 'CBMMonitor', 'CBMMonitorId', 'AuditCBMMonitor', null

	UPDATE CBMMonitor 
	SET GlobalTrigger = @globalTrigger,
	 CreateJDEWO = @createJDEWO,
	 Active = @active,
	 UpdatedBy = @userId,
	 UpdatedOn = GETDATE(),
	 DefaultMeterReading = @DefaultMeterReading,
	 EffectiveDate = @EffectiveDate
	WHERE CBMMonitorId = @CBMMonitorId

END

SELECT * FROM AuditCBMMonitor
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_MonitorGetHeader]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 03-Dec-2016
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_MonitorGetHeader]
	-- Add the parameters for the stored procedure here
	@id int
AS
BEGIN
	
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT	c.CBMMonitorId,
			ISNULL(pc.PFTConfigId, p.PFTConfigId) [PFTConfigId], 
			ISNULL(pc.ProcessName, p.ProcessName) [PFTConfigName], 
			ISNULL(pc.ProcessDesc, p.ProcessDesc) [PFTConfigDesc], 
			c.MeterReadingTypeId, 
			s.OptionLabel [MeterReadingTypeName],
			c.GlobalTrigger, 
			c.CreateJDEWO, 
			c.Active,
			c.DefaultMeterReading,
			c.EffectiveDate
	FROM CBMMonitor c
	LEFT JOIN PFTObjects o ON c.ObjectNumber = o.ObjectNumber and o.State = 3 -- released
	LEFT JOIN PFTConfig pc ON pc.PFTObjectId = o.ObjectId
	LEFT JOIN PFTConfig p ON c.PFTConfigId = p.PFTConfigId
	JOIN SelectOptions s ON s.OptionValue = c.MeterReadingTypeId AND s.SelectName = 'CBMMeterTypes'
	WHERE c.CBMMonitorId = @id

END

GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_MonitorGetItemNums]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 05-Dec-2016
-- Description:	Get Item Nums
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_MonitorGetItemNums] 
	-- Add the parameters for the stored procedure here
	@id int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT c.PartDescPFTConfigID, i.ItemNum, i.DescShort, i.ToolPanel, i.ToolCode
	FROM PartDescPFTConfigs c
	JOIN ItemNums i on i.ItemNum = c.ItemNum
	WHERE PFTConfigID = (SELECT PFTConfigId FROM CBMMonitor WHERE CBMMonitorId = @id) AND PFTType = 3
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_MonitorGetTriggers]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 05-Dec-2016
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_MonitorGetTriggers]
	-- Add the parameters for the stored procedure here
	@CBMMonitorId int,
	@TriggerType char(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT	c.CBMMonitorCustomsId,
			c.PftConfigId, 
			c.TriggerType, 
			c.TriggerName, 
			ISNULL(r.RegionDesc, b.CompanyName) [TriggerDescription],
			c.TriggerValue
	FROM CBMMonitorCustoms c
	INNER JOIN CBMMonitor m ON c.PFTConfigId = m.PFTConfigId AND c.MeterReadingTypeId = m.MeterReadingTypeId
	LEFT JOIN Regions r on r.Region = c.TriggerName AND r.Active = 1
	LEFT JOIN BranchPlants b on b.BranchPlant = c.TriggerName
	WHERE m.CBMMonitorId = @CBMMonitorId AND TriggerType = @TriggerType
	
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_MonitorRemoveCustoms]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 12/19/2016
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_MonitorRemoveCustoms]
	-- Add the parameters for the stored procedure here
	@CBMMonitorId INT,
	@TriggerType char(1), 
	@TriggerName VARCHAR(MAX), 
	@UserId int
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @PFTConfigId uniqueidentifier, @MeterReadingTypeId int

	SELECT @PFTConfigId = PFTConfigId, @MeterReadingTypeId = MeterReadingTypeId FROM CBMMonitor (NOLOCK) WHERE CBMMonitorId = @CBMMonitorId

	-- Audit Starts
	
	insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
	values (2030, @UserId, @CBMMonitorId, GETDATE(), NULL, 'CBMMonitorCustoms')

	INSERT INTO AuditCBMMonitorCustoms
	SELECT @@IDENTITY, * 
	FROM CBMMonitorCustoms WHERE PFTConfigId = @PFTConfigId AND MeterReadingTypeId = @MeterReadingTypeId AND TriggerType = @TriggerType
		AND TriggerName IN (SELECT ENTRY FROM dbo.ListToTable(@TriggerName) a)

	-- Audit Ends

	DELETE FROM CBMMonitorCustoms 
	WHERE PFTConfigId = @PFTConfigId AND MeterReadingTypeId = @MeterReadingTypeId AND TriggerType = @TriggerType
		AND TriggerName IN (SELECT ENTRY FROM dbo.ListToTable(@TriggerName) a)
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_OneView_RunAssetMappings]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--this stored procedure will read azure data factory information and store it in cbm tables
-- for which assets CBM is setup
CREATE PROCEDURE [dbo].[usp_CBM_OneView_RunAssetMappings]
AS

	--find distinct asset numbers
	CREATE TABLE #Assets_Wireline (AssetNumber VARCHAR(30))
	INSERT INTO #Assets_Wireline SELECT distinct AssetNumber FROM AesImport.dbo.OneView_Job_JobOperations_assets_w_duration_for_MyAdvisor

	CREATE TABLE #CbmConfiguration_Wireline 
	(
		AssetNumber VARCHAR(30),
		CbmMonitorId INT,
		FixedAssetId UNIQUEIDENTIFIER,
		ParentFixedAssetId UNIQUEIDENTIFIER,
		TopLevelFixedAssetId UNIQUEIDENTIFIER
	)

	--pull wireline cbm configurations
	INSERT INTO #CbmConfiguration_Wireline
	SELECT childFixedAsset.AssetNumber,
		m.CBMMonitorId,
		childFixedAsset.FixedAssetId,
		childFixedAsset.ParentFixedAssetId,
		childFixedAsset.TopLevelFixedAssetId
	FROM CBMMonitor m (NOLOCK)
	JOIN CBMMonitorAssetItemNums parentPart (NOLOCK) ON m.Active = 1 and m.CBMMonitorId = parentPart.CBMMonitorId and parentPart.IsParent = 1
	JOIN CBMMonitorAssetItemNums childPart (NOLOCK) ON m.CBMMonitorId = childPart.CBMMonitorId and childPart.IsParent = 0
	JOIN FixedAssets parentFixedAsset (NOLOCK) ON parentFixedAsset.InventoryItemNum = parentPart.ItemNum
	JOIN FixedAssets childFixedAsset (NOLOCK) ON parentFixedAsset.TopLevelFixedAssetId = childFixedAsset.TopLevelFixedAssetId and childFixedAsset.InventoryItemNum = childPart.ItemNum
	JOIN #Assets_Wireline wireline_assets ON wireline_assets.AssetNumber = childFixedAsset.AssetNumber

	--save durations in CBM tables
	INSERT INTO [dbo].[OneViewCBMRunAssetMappings] 
	(
		RunId, 
		FixedAssetId,
		CbmMonitorId,
		DurationInMinutes, 
		ImportDate, 
		ParentFixedAssetId, 
		TopLevelFixedAssetId
	)
	SELECT durations.Id, 
		config.FixedAssetId, 
		config.CbmMonitorId,
		durations.DurationInMinutes, 
		durations.DateUploaded, 
		config.ParentFixedAssetId, 
		config.TopLevelFixedAssetId
	FROM #CbmConfiguration_Wireline config
	JOIN AesImport.dbo.OneView_Job_JobOperations_assets_w_duration_for_MyAdvisor durations on config.AssetNumber = durations.AssetNumber
	LEFT JOIN [OneViewCBMRunAssetMappings] runs on durations.Id = runs.RunId
	WHERE runs.RunId IS NULL

	DROP TABLE #Assets_Wireline
	DROP TABLE #CbmConfiguration_Wireline

GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_PMDisposition_CanCreateJDEWO]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_CBM_PMDisposition_CanCreateJDEWO]
	@PMDispositionId uniqueidentifier,
	@CreateJDEWO bit OUTPUT
AS

SET @CreateJDEWO = 0

IF EXISTS (select cbm.CreateJDEWO
	FROM PMDispositions pmd (NOLOCK) 
	JOIN PMDispositionItems pmdi (NOLOCK) ON pmd.AssetRepairTrackId = pmdi.AssetRepairTrackId and pmd.PFTConfigId = pmdi.PFTConfigId
	JOIN AssetRepairTrack a (NOLOCK) on a.AssetRepairTrackId = pmd.AssetRepairTrackId
	JOIN FixedAssets f (NOLOCK) on f.FixedAssetId = pmdi.FixedAssetId
	JOIN CBMMonitor cbm (NOLOCK) on cbm.MeterReadingTypeId = pmdi.MeterReadingTypeId and cbm.PFTConfigId = pmdi.PFTConfigId
	JOIN CBMMonitorAssetItemNums parent (NOLOCK) on parent.CBMMonitorId = cbm.CBMMonitorId and parent.ItemNum = a.ItemNum and parent.IsParent = 1
	JOIN CBMMonitorAssetItemNums child (NOLOCK) on child.CBMMonitorId = cbm.CBMMonitorId and child.ItemNum = f.InventoryItemNum and child.IsParent = 0
	WHERE pmd.PMDispositionId = @PMDispositionId AND cbm.CreateJDEWO = 1)
BEGIN
	
	SET @CreateJDEWO = 1

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_RollbackDisposition]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Shailesh Patil
-- Create date: 10/14/2016
-- Description:	Rollback Disposition
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_RollbackDisposition]
	-- Add the parameters for the stored procedure here
	@AssetRepairTrackId uniqueidentifier, 
	@UserId int
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @DispositionId INT;
     	

	SELECT @DispositionId = (SELECT TOP 1 DispositionId FROM ARTDispositions WHERE AssetRepairTrackId = @AssetRepairTrackId ORDER BY DateAdded DESC)


	--Set last disposition recored status as 'Submitted' 
	UPDATE ARTDispositions 
		SET DispositionedById = @UserId,
			DispositionDate = GETDATE(),
			Status = 'Submitted',
			DispositionComments = '',
			UserIdAdded = @UserId,
			DateAdded = GETDATE()
			WHERE DispositionId=@DispositionId

	exec spAuditRecords 201, @UserId, @DispositionId, null, @DispositionId, 'ARTDispositions', 'DispositionId', 'AuditARTDispositions', null

	--Delete all other records for this disposition
	DELETE FROM ARTDispositions WHERE AssetRepairTrackId = @AssetRepairTrackId AND DispositionId <> @DispositionId AND Status <> 'Approved'

	--To maintain Audit Log
	--cursor or triggers

	---close all active SR PFTs & PFT Work orders
	UPDATE	wo 
	SET		wo.Status='Closed', wo.DateClosed=GETDATE() 
	FROM	WorkOrders wo 
	JOIN	PFTWO pftWO 
	ON		wo.WorkOrderId=pftWO.WorkOrderId and pftWO.PFTType=1 AND pftWO.Active=1 AND pftWO.AssetRepairTrackId = @AssetRepairTrackId	
	
	
	UPDATE	PFTWO 
	SET		Active=0 , UpdatedBy = @UserId, ReasonForChange = 'Closed – Rollback'  
	WHERE	PFTType IN (1,3) AND Active=1 AND AssetRepairTrackId = @AssetRepairTrackId	

	UPDATE AssetRepairTrack
	SET SRPFTWOId=NULL WHERE AssetRepairTrackId = @AssetRepairTrackId
END


GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_RollbackPMDispostion]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==========================================
--CREATED BY : Shailesh Patil
--CREATED ON : 11 Jan 2017
--DESCRIPTION: To rollback pm dispositon
--==========================================
CREATE PROCEDURE [dbo].[usp_CBM_RollbackPMDispostion]
@PMDispositionId UNIQUEIDENTIFIER
AS
BEGIN	

	-- Audit Starts		
			
		INSERT INTO AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		VALUES (2030, 0, @PMDispositionId, GETDATE(), NULL, 'AuditPMDispositions')

		INSERT INTO AuditPMDispositions
		SELECT @@IDENTITY, PMDispositionId,AssetRepairTrackId,PFTConfigId,Active,DispositionedById,DispositionOption,DispositionedOn,CreatedBy,CreatedOn
		FROM PMDispositions
		WHERE	PMDispositionId = @PMDispositionId
			
	-- Audit Ends

	UPDATE	PMDispositions
	SET		Active = 1,
			DispositionOption = null,
			DispositionedById = null,
			DispositionedOn = null
	WHERE	PMDispositionId = @PMDispositionId
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_SubmitDisposition]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 10/13/2016
-- Description:	Create/Update disposition
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_SubmitDisposition]
	-- Add the parameters for the stored procedure here
	@AssetRepairTrackId uniqueidentifier, 
	@UserId int,
	@ApproverId int,
	@DispositionType int,
	@BranchPlant int,
	@Comments varchar(2048),
	@ApprovalMethod smallint = 0
AS
BEGIN
	
	SET NOCOUNT ON;
	BEGIN TRY
	DECLARE @DispositionId INT,  @ApproverLevel INT, @sLocId varchar(16), @sProductLine varchar(50)

	SELECT @DispositionId = (SELECT TOP 1 DispositionId FROM ARTDispositions WHERE AssetRepairTrackId = @AssetRepairTrackId ORDER BY DateAdded DESC)
	SELECT @sLocId = a.FromBranchPlant, 
			@sProductLine = f.ProductLineCode
	FROM AssetRepairTrack a (NOLOCK)
	JOIN FixedAssets f (NOLOCK) on a.FixedAssetId = f.FixedAssetId 
	Where AssetRepairTrackId = @AssetRepairTrackId

	--SELECT TOP 1 @sLocId = ISNULL(ShipToLocation,@sLocId) FROM ARTDispositions WHERE AssetRepairTrackId = @AssetRepairTrackId 
	--ORDER BY DateAdded DESC

	SET @ApproverLevel = dbo.udf_GetAIRTApproverLevel(@sProductLine, @sLocId, @UserId) 

	IF (@DispositionId IS NULL)
		BEGIN
			-- INSERT 

			INSERT INTO [dbo].[ARTDispositions]
				   ([AssetRepairTrackId]
				   ,[Disposition]
				   ,[DispositionedById]
				   ,[DispositionDate]
				   ,[DispositionComments]
				   ,[Status]
				   ,[ApproverId]
				   ,[ApprovalLevel]
				   ,[ShipToLocation]
				   ,[UserIdAdded]
				   ,[DateAdded]
				   ,[ApprovalMethod])
			 VALUES
				   (@AssetRepairTrackId
				   ,@DispositionType
				   ,@UserId
				   ,GETDATE()
				   ,@Comments
				   ,CASE WHEN @DispositionType = 1 OR @DispositionType = 4 THEN (CASE WHEN @ApproverLevel > 0 THEN 'Approved' ELSE 'Submitted' END)
						ELSE (CASE WHEN @ApproverLevel > 1 THEN 'Approved' 
								WHEN @ApproverLevel = 1 THEN 'District Approved' 
								ELSE 'Submitted' END) 
						END
				   ,@UserId
				   ,@ApproverLevel 
				   ,@BranchPlant
				   ,@UserId
				   ,GETDATE()
				   ,@ApprovalMethod)

				   SET @DispositionId = @@IDENTITY
			exec spAuditRecords 201, @UserId, @DispositionId, null, @DispositionId, 'ARTDispositions', 'DispositionId', 'AuditARTDispositions', null

		END
	ELSE
		BEGIN
	
			-- UPDATE
	
			UPDATE [dbo].[ARTDispositions]
				SET [Disposition] = @DispositionType
					,[DispositionedById] = @UserId
					,[DispositionDate] = GETDATE()
					,[DispositionComments] = @Comments
					,[Status] = CASE WHEN @DispositionType = 1 OR @DispositionType = 4 THEN (CASE WHEN @ApproverLevel > 0 THEN 'Approved' ELSE 'Submitted' END)
									WHEN @ApproverLevel = 2 THEN 'Approved' 
									WHEN @ApproverLevel = 1 THEN 'District Approved' 
									ELSE 'Submitted' END
					,[ApproverId] = @UserId
					,[ApprovalLevel] = @ApproverLevel
					,[ShipToLocation] = @BranchPlant
					,[UserIdAdded] = @UserId
					,[DateAdded] = GETDATE()
					, ApprovalMethod = @ApprovalMethod
				WHERE DispositionId = @DispositionId

			exec dbo.spAuditRecords 201, @UserId, @DispositionId, null, @DispositionId, 'ARTDispositions', 'DispositionId', 'AuditARTDispositions', null

			IF EXISTS(SELECT 1 FROM ARTDispositions WHERE DispositionId = @DispositionId AND Status = 'Approved')
			BEGIN
				
				UPDATE AssetRepairTrack 
					SET ShipToBranchPlant = @BranchPlant
				WHERE AssetRepairTrackId = @AssetRepairTrackId

			END
		END

		IF EXISTS(SELECT 1 FROM ARTDispositions WHERE DispositionId = @DispositionId) --AND Status = 'Approved')
			BEGIN
				
				DECLARE @query1 NVARCHAR(MAX), @Query2 NVARCHAR(MAX)

				SELECT @query1 =  'Update AssetRepairTrack SET IncidentId ='''+ CONVERT(VARCHAR(MAX), IncidentID) +''' WHERE ARTNumber =''' + ARTNumber +'''',
				
					@Query2 = 'UPDATE t SET t.CompFailureCodeID = a.FailureCodeId, t.ProceduralCodeID = a.ProceduralCodeId, t.OutOfSpecCodeID = a.OutOfSpecCodeId 
					FROM ToolStringComponentInfo t  join Incidents i on i.RunID = t.RunID JOIN AssetRepairTrack a ON a.IncidentId = i.IncidentID 
					AND t.FixedAssetID = a.FixedAssetId WHERE a.Artnumber = ''' + ARTNumber +''''

				FROM 
				(SELECT ROW_NUMBER() OVER(PARTITION BY a.ARTNumber ORDER BY a.ARTNumber asc, r.RunNumber asc) [Index], a.ARTNumber, i.IncidentID, r.RunNumber
				FROM Incidents i
				JOIN ToolStringComponentInfo t ON t.runid = i.RunID
				JOIN Runs r ON r.runid = i.RunID
				JOIN Wells w ON r.Wellid = w.WellID
				JOIN Jobs J ON J.jobid = w.jobid
				JOIN AssetRepairTrack a ON a.JobId = j.JobId AND a.FixedAssetId = t.FixedAssetID
				Where a.AssetRepairTrackId = @AssetRepairTrackId and a.IsRedTag  = 1
				) A
				WHERE [Index] = 1

				if(@query1 IS NULL) 
				BEGIN
					EXEC sp_executesql @query1
					EXEC sp_executesql @query2
				END

			END

		SELECT TOP 1 * 
		FROM [ARTDispositions] (NOLOCK) 
		Where AssetRepairTrackId = @AssetRepairTrackId 
		ORDER BY DateAdded DESC
		END TRY
		BEGIN CATCH
			DECLARE @ErrorMessage NVARCHAR(4000);
			DECLARE @ErrorSeverity INT;
			DECLARE @ErrorState INT;
				SELECT 
						@ErrorMessage = ERROR_MESSAGE(),
						@ErrorSeverity = ERROR_SEVERITY(),
						@ErrorState = ERROR_STATE();
    RAISERROR (@ErrorMessage,@ErrorSeverity,@ErrorState);

		END CATCH
END



GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_SubmitPMDispostion]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--==========================================
--CREATED BY : Shailesh Patil
--CREATED ON : 11 Jan 2017
--DESCRIPTION: To update pm dispositon
--==========================================
CREATE PROCEDURE [dbo].[usp_CBM_SubmitPMDispostion]
@PMDispositionId UNIQUEIDENTIFIER,
@Status bit,
@DispositionedBy int
AS
BEGIN	

	-- Audit Starts		
			
		INSERT INTO AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		VALUES (2030, @DispositionedBy, @PMDispositionId, GETDATE(), NULL, 'AuditPMDispositions')

		INSERT INTO AuditPMDispositions
		SELECT @@IDENTITY, PMDispositionId,AssetRepairTrackId,PFTConfigId,Active,DispositionedById,DispositionOption,DispositionedOn,CreatedBy,CreatedOn
		FROM PMDispositions
		WHERE	PMDispositionId = @PMDispositionId
			
	-- Audit Ends

	UPDATE	PMDispositions
	SET		Active = 0,
			DispositionOption = @Status,
			DispositionedById = @DispositionedBy,
			DispositionedOn = GETDATE()
	WHERE	PMDispositionId = @PMDispositionId
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_UpdateAIRTIDToJDEWO]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Gandhi >
-- Create date: <5 Jan 2017>
-- Description:	<Update AssetrepairTrackid To JDE work order >
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_UpdateAIRTIDToJDEWO]
@JDEWorkOrderNumber VARCHAR(100)='',
	@AssetRepairTrackId uniqueidentifier='',
	
	@PFTWOID  VARCHAR(100)='',
	@JDEExistingWorkOrerNumber VARCHAR(100)='',
	@MapType varchar(20)=''
	
	AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @OrderType varchar(5),
	@typewo varchar(6)
	if @MapType='Map'
	begin
	--print(1)
	Update JDEWorkOrders set AssetRepairTrackId=@AssetRepairTrackId
	 where rtrim(ltrim(REPLACE(REPLACE(WorkOrderNumber, CHAR(13), ''), CHAR(10), '')))=@JDEWorkOrderNumber
	
	select @OrderType=PFTType from PFTWO where JDEWorkOrderNum= @JDEWorkOrderNumber
		if(@OrderType='3')
		begin
			update PFTWO set AssetRepairTrackId=@AssetRepairTrackId where PFTWOId=(select top 1 po.PFTWOId  from PFTWO po where po.JDEWorkOrderNum= @JDEWorkOrderNumber and po.PFTType=3) 
		end
	
	end
	else if @MapType='UnMap'
	begin
	Update JDEWorkOrders set AssetRepairTrackId=NULL where rtrim(ltrim(REPLACE(REPLACE(WorkOrderNumber, CHAR(13), ''), CHAR(10), '')))=@JDEWorkOrderNumber
	select @OrderType=PFTType from PFTWO where PFTWOId= @PFTWOID
	if(@OrderType='3')
		begin
			update PFTWO set AssetRepairTrackId=NULL where PFTWOId=@PFTWOID 
		end
	end
	else if @MapType='MapExistingWO'
	begin
	
	IF EXISTS( SELECT WorkOrderNumber FROM JDEWorkOrders WHERE WorkOrderNumber=@JDEWorkOrderNumber
               AND NOT EXISTS(SELECT JDEWorkOrderNum FROM pftwo WHERE JDEWorkOrderNum = @JDEWorkOrderNumber))
		BEGIN 

		Update JDEWorkOrders set AssetRepairTrackId=NULL where rtrim(ltrim(REPLACE(REPLACE(WorkOrderNumber, CHAR(13), ''), CHAR(10), '')))=@JDEExistingWorkOrerNumber
		UPDATE PFTWO SET JDEWorkOrderNum ='' WHERE PFTWOId = @PFTWOId 
		SELECT @OrderType=OrderType,@typewo=TypeWO from JDEWorkOrders where rtrim(ltrim(REPLACE(REPLACE(WorkOrderNumber, CHAR(13), ''), CHAR(10), '')))=@JDEExistingWorkOrerNumber
		if (@OrderType ='WM' and @typewo = '5')
						BEGIN
							UPDATE 
								AssetRepairTrack  
							SET 
					 			DispatchNumber =NULL
							FROM
								AssetRepairTrack art 
								  JOIN  PFTWO pftwo ON pftwo.PFTWOId = art.ITPFTWOId
							  where pftwo.PFTWOId = @PFTWOId
						END

		End
		ELSE
		BEGIN
			SELECT 'JDEWorkOrder number does not exist or already in use'
		END
	end
		SELECT 'true'
END 


GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_UpdateAuditPMcheck]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Gandhi >
-- Create date: <24 Nov 2022>
-- Description:	<update PFTWOId in AuditPMCheck>
-- =============================================
Create PROCEDURE [dbo].[usp_CBM_UpdateAuditPMcheck]
	@FixedAssetId uniqueidentifier,
	@PFTConfigId  uniqueidentifier,
	@MeterReadingTypeId  int=0,
	@ObjectNumber  int=0,
	@CBMMonitorId int=0,
	@PFTWOID  uniqueidentifier,
	@TriggerValue int,
	@MeterReadingValue Varchar(20)
	AS
BEGIN
	SET NOCOUNT ON;
	if exists( select PFTConfigId from AuditPMChecks where PFTConfigId=@PFTConfigId and  FixedAssetId=@FixedAssetId and MeterReadingTypeId=@MeterReadingTypeId	and ObjectNumber=@ObjectNumber and CBMMonitorId=@CBMMonitorId and TriggerValue=@TriggerValue and MeterReadingValue=@MeterReadingValue)
	begin
		Update AuditPMCHecks set PFTWOID=@PFTWOID where PFTConfigId=@PFTConfigId and  FixedAssetId=@FixedAssetId and MeterReadingTypeId=@MeterReadingTypeId	and ObjectNumber=@ObjectNumber and CBMMonitorId=@CBMMonitorId and TriggerValue=@TriggerValue and MeterReadingValue=@MeterReadingValue
	end
	else
	begin
	insert into AuditPMCHecks (PFTConfigId,FixedAssetId,MeterReadingTypeId,ObjectNumber,CBMMonitorId,PFTWOID,TriggerValue,MeterReadingValue,CreatedOn) values(@PFTConfigId,@FixedAssetId,@MeterReadingTypeId,@ObjectNumber,@CBMMonitorId,@PFTWOID,@TriggerValue,@MeterReadingValue, GETDATE())
	end
	SELECT 'true'

END 

GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_UpdateIncidentInfo]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Umesh 
-- Create date: 6 Dec 2016
-- Description:	Update incidents to tool string component info table.
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_UpdateIncidentInfo]
	@AssetRepairTrackId UNIQUEIDENTIFIER,
	@IncidentId UNIQUEIDENTIFIER
AS
BEGIN
	Update AssetRepairTrack SET IncidentId = @IncidentId WHERE AssetRepairTrackId=@AssetRepairTrackId
				
	UPDATE t SET t.CompFailureCodeID = a.FailureCodeId, t.ProceduralCodeID = a.ProceduralCodeId, t.OutOfSpecCodeID = a.OutOfSpecCodeId 
					FROM ToolStringComponentInfo t  join Incidents i on i.RunID = t.RunID JOIN AssetRepairTrack a ON a.IncidentId = i.IncidentID  
					AND t.FixedAssetID = a.FixedAssetId WHERE a.AssetRepairTrackId = @AssetRepairTrackId
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_UpdateJDEWONumberToPFTWO]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
-- =============================================
-- Author:		<Umesh Lade>
-- Create date: <5 Jan 2017>
-- Description:	<Update JDE work order number to PFT Work order number>
-- =============================================
CREATE PROCEDURE [dbo].[usp_CBM_UpdateJDEWONumberToPFTWO]
	@JDEWorkOrderNumber VARCHAR(100),
	@PFTWOId VARCHAR(100)
AS
BEGIN
	SET NOCOUNT ON;
DECLARE @PFTType INT, 
		@OrderType varchar(5),
		@Message VARCHAR(100),
		@typewo varchar(6)
		IF EXISTS( SELECT WorkOrderNumber FROM JDEWorkOrders WHERE WorkOrderNumber=@JDEWorkOrderNumber
               AND NOT EXISTS(SELECT JDEWorkOrderNum FROM pftwo WHERE JDEWorkOrderNum = @JDEWorkOrderNumber))
		BEGIN 
			SELECT @PFTType=PFTTYPE from PFTWO where PFTWOId=@PFTWOId
			SELECT @OrderType=OrderType,@typewo=TypeWO from JDEWorkOrders where WorkOrderNumber=@JDEWorkOrderNumber

			SELECT @Message=CASE WHEN @PFTType=1 THEN
									CASE WHEN (@OrderType ='WC' and @typewo = 'C') THEN 'true' ELSE 'SRPFT mapped with JDE Corrective Work Order ''WC-C''' END
							WHEN @PFTType=2 THEN
									CASE WHEN (@OrderType ='WM' and @typewo = '5') THEN 'true' ELSE 'TIPFT mapped with JDE Inspection Work Order ''WM-5''' END
							WHEN @PFTType=3 THEN
									CASE WHEN (@OrderType ='WM' and @typewo = '6') THEN 'true' ELSE 'PMPFT mapped with JDE Preventative Maintenance Work Order ''WM-6''' END
							ELSE 'true'   
						END

			IF @Message='true'
				BEGIN
					UPDATE PFTWO SET JDEWorkOrderNum =@JDEWorkOrderNumber WHERE PFTWOId = @PFTWOId 

					-- If Order Type WM And TypeWo 5 (T&I Work Order) Then JDEWorkOrder DispatchNumber Update in AIRT DispatchNumber
					if (@OrderType ='WM' and @typewo = '5')
					BEGIN
						UPDATE 
							AssetRepairTrack  
						SET 
					 		DispatchNumber = (SELECT top 1 DispatchNumber FROM JDEWorkOrders WHERE WorkOrderNumber=@JDEWorkOrderNumber)
						FROM
							AssetRepairTrack art 
							  JOIN  PFTWO pftwo ON pftwo.PFTWOId = art.ITPFTWOId
						  where pftwo.PFTWOId = @PFTWOId
					END
					----------------------------------------------------------------------------------------------------------------
					SELECT 'true'
				END
			ELSE
				SELECT @Message

		END
    ELSE 
		SELECT 'JDEWorkOrder number does not exist or already in use'
END 


GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_UpdatePFTWO]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--===============================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 27 Dec 2016
--DESCRIPTION: To update PFTWoId
--================================================
-- Changes: TFS Task 74285 - Added @LastPWSDate to update CBMCalculatedMeterReadings - Sachin Mhalungekar - 28/01/2020
--============================================================================  
CREATE PROC [dbo].[usp_CBM_UpdatePFTWO]
	@AssetRepairTrackId UNIQUEIDENTIFIER,
	@PFTWoId UNIQUEIDENTIFIER
AS
BEGIN

DECLARE @PFTConfigId UNIQUEIDENTIFIER, @LastPWSDate DATETIME, @ObjectNumber BIGINT;

SELECT @PFTConfigId = PFTConfigId FROM PFTWO WHERE PFTWOId = @PFTWoId;
SELECT @ObjectNumber = ObjectNumber FROM PFTConfig WHERE PFTConfigId = @PFTConfigId


	--Check Last PM PFT Completed  
	SELECT @LastPWSDate = MAX(DateAdded) FROM  PFTWOSeq WHERE PFTWOId = @PFTWoId

	DECLARE @assetPMChecks TABLE
	(
		parentFixedAssetid UNIQUEIDENTIFIER,
		MeterReadingTypeId int,
		CBMMonitorId INT,
		CBMCalculatedMeterReadingId INT
	)

	INSERT INTO @assetPMChecks
	SELECT 
	DISTINCT f.FixedAssetId, cm.MeterReadingTypeId, cm.CBMMonitorId, r.Id
	FROM CBMMonitor (NOLOCK) cm
	JOIN CBMMonitorAssetItemNums (NOLOCK) cma on cma.CBMMonitorId = cm.CBMMonitorId AND cma.IsParent = 1
	JOIN CBMMonitorAssetItemNums (NOLOCK) cmc on cmc.CBMMonitorId = cm.CBMMonitorId AND cmc.IsParent = 0
	JOIN AssetRepairTrack (NOLOCK) a ON a.ItemNum = cma.ItemNum
	JOIN FixedAssets (NOLOCK) f ON ISNULL(f.TopLevelFixedAssetId, f.FixedAssetId) = a.FixedAssetId and cmc.ItemNum = f.InventoryItemNum
	LEFT JOIN CBMCalculatedMeterReadings (NOLOCK) r ON r.FixedAssetId = f.FixedAssetId and r.MeterReadingTypeId = cm.MeterReadingTypeId and r.CBMMonitorId = cm.CBMMonitorId
	WHERE cm.Active = 1 and a.AssetRepairTrackId = @AssetRepairTrackId and cm.ObjectNumber = @ObjectNumber;


	UPDATE r
		SET LastPFTWoId = @PFTWoId,
			LastMeterReadingValue = CASE WHEN pm.MeterReadingTypeId = 5 THEN CAST(@LastPWSDate AS VARCHAR(50)) ELSE '0' END
	FROM @assetPMChecks pm
	JOIN CBMCalculatedMeterReadings (NOLOCK) r ON r.id = pm.CBMCalculatedMeterReadingId AND r.CBMMonitorId IS NOT NULL;

	INSERT INTO CBMCalculatedMeterReadings (FixedAssetId, MeterReadingTypeId,LastMeterReadingValue,UpdatedOn, CBMMonitorId, LastPFTWoId)
	SELECT parentFixedAssetid, MeterReadingTypeId, @LastPWSDate, GETDATE(), CBMMonitorId, @PFTWoId  FROM @assetPMChecks 
	WHERE CBMCalculatedMeterReadingId IS NULL AND MeterReadingTypeId = 5;
END

GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_UpdatePMDispostion]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==========================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 23 Dec 2016
--DESCRIPTION: To update pm dispositon
--==========================================
CREATE PROCEDURE [dbo].[usp_CBM_UpdatePMDispostion]
@pmDispositionXML XML
AS
BEGIN
	CREATE	TABLE #temp	(PMDispositionId UNIQUEIDENTIFIER, DispositionedById INT, DispositionOption BIT)
	INSERT	INTO #temp(PMDispositionId ,DispositionedById, DispositionOption)
	SELECT	T.N.value('PMDispositionId[1]', 'UNIQUEIDENTIFIER'),
			T.N.value('DispositionedById[1]', 'INT'),
			T.N.value('DispositionOption[1]', 'BIT')
	FROM	@pmDispositionXML.nodes('/PMDispositions/Disposition') as T(N)

	UPDATE	[PM]
	SET		[Active] = 0,
			[DispositionedById] = [T].[DispositionedById],
			[DispositionOption] = [T].[DispositionOption],
			[DispositionedOn] = GETDATE()
	FROM	[PMDispositions] [PM]
			INNER JOIN [#temp] [T] ON [T].[PMDispositionId] = [PM].[PMDispositionId]
			
	DROP TABLE #temp
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_UpdateSheduledPMChecks]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--============================================================================  
--MODFIED BY : Sachin Mhalungekar 
--MODIFIED ON: 23 Jan 2020  
--DESCRIPTION: Create Scheduled PM from user entered effective date 
--============================================================================  
-- Changes: 
--============================================================================  
CREATE PROCEDURE [dbo].[usp_CBM_UpdateSheduledPMChecks]  
 @AssetRepairTrackId uniqueidentifier ,
 @EffectiveDate varchar(50),
 @CBMMonitorId INT 
AS  
BEGIN  
SET NOCOUNT ON;  
	DECLARE @FixedAssetId UNIQUEIDENTIFIER
	DECLARE @assetPMChecks TABLE
	(
	parentFixedAssetid UNIQUEIDENTIFIER,
	MeterReadingTypeId int,
	PFTConfigId UNIQUEIDENTIFIER,
	ObjectNumber INT,
	AssetRepairTrackId UNIQUEIDENTIFIER,
	fixedAssetDateAdded DATETIME,
	fixedAssetid UNIQUEIDENTIFIER,
	CBMMonitorId INT
	)

	INSERT INTO @assetPMChecks
	SELECT		f1.FixedAssetId, m.MeterReadingTypeId, pc.PFTConfigId, m.ObjectNumber, a.AssetRepairTrackId, f1.DateAdded, f.FixedAssetId, m.CBMMonitorId
	FROM		CBMMonitor m   
	JOIN		CBMMonitorAssetItemNums p	ON p.CBMMonitorId = m.CBMMonitorId and p.IsParent = 1  and m.Active = 1
	JOIN		CBMMonitorAssetItemNums C	ON c.CBMMonitorId = m.CBMMonitorId and c.IsParent = 0  
	JOIN		AssetRepairTrack a			ON a.AssetRepairTrackId = @AssetrepairTrackId and a.ItemNum = c.ItemNum  
	JOIN		FixedAssets f				ON a.FixedAssetId = f.FixedAssetId  
	JOIN		FixedAssets f1				ON f1.FixedAssetId = ISNULL(f.TopLevelFixedAssetId, f.FixedAssetId) AND f1.InventoryItemNum = p.ItemNum  
	JOIN		PFTConfig pc				ON pc.ObjectNumber = m.ObjectNumber AND pc.IsObsolete = 0
	WHERE		m.MeterReadingTypeId = 5 AND m.CBMMonitorId = @CBMMonitorId;

	SELECT TOP 1 @FixedAssetId = parentFixedAssetid FROM @assetPMChecks;

	IF NOT EXISTS (SELECT Id FROM CBMCalculatedMeterReadings WHERE FixedAssetId = @FixedAssetId AND MeterReadingTypeId = 5 AND CBMMonitorId = @CBMMonitorId)
	BEGIN
		INSERT INTO CBMCalculatedMeterReadings (FixedAssetId, MeterReadingTypeId,LastMeterReadingValue,UpdatedOn, CBMMonitorId)
		SELECT parentFixedAssetid, MeterReadingTypeId, @EffectiveDate, GETDATE(), CBMMonitorId  FROM @assetPMChecks;
	END
	ELSE
	BEGIN
		UPDATE	CBMCalculatedMeterReadings SET LastMeterReadingValue = 	@EffectiveDate 
		WHERE	FixedAssetId = @FixedAssetId AND MeterReadingTypeId = 5 AND CBMMonitorId = @CBMMonitorId;
	END

	DELETE	pdi 
	FROM	PMDispositionItems pdi 
	JOIN	@assetPMChecks pm	
	ON		pdi.ObjectNumber = pm.ObjectNumber AND pdi.MeterReadingTypeId = pm.MeterReadingTypeId AND pdi.AssetRepairTrackId = @AssetRepairTrackId;

	DELETE	pd 
	FROM	PMDispositions pd 
	JOIN	@assetPMChecks pm	
	ON		pd.PFTConfigId = pm.PFTConfigId AND pd.Active = 1 AND pd.AssetRepairTrackId = @AssetRepairTrackId; 
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBM_VerifyCreateJDEWOStatus]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=================================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 23 jan 2017
--DESCRIPTION: To get data whether createjdewo is checked for asset
--=================================================================
CREATE PROCEDURE [dbo].[usp_CBM_VerifyCreateJDEWOStatus]
	@PMDispositionId UNIQUEIDENTIFIER
AS
DECLARE @Return INT = 0;
SELECT  @Return = CB.CreateJDEWO FROM PMDispositions PD
		INNER JOIN PMDispositionItems PDI ON PDI.AssetRepairTrackId = PD.AssetRepairTrackId
		INNER JOIN CBMMonitor CB ON PDI.PFTConfigId = CB.PFTConfigId AND PDI.MeterReadingTypeId = CB.MeterReadingTypeId
WHERE	PD.PMDispositionId = @PMDispositionId

SELECT @Return
GO
/****** Object:  StoredProcedure [dbo].[usp_CBMGetJDEWorkOrderStatus]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_CBMGetJDEWorkOrderStatus]
	@WorkOrderNumber varchar(30)='',
	@NewStatus varchar(30)='',
	@EstimatedLabour varchar(100)='',
	@EstimatedMaterial varchar(100)='',
	@EstimatedMisc varchar(100)='',
	@DeliveryTicket varchar(100)='',
	@BusinessUnit varchar(100)='',
	@Description varchar(500)='',
	@ParentWONO varchar(100)='',
	@CustomerNumber varchar(500)='',
	@Type varchar(10)=''
AS  
  
BEGIN  
If @Type='Get'
begin
	-- Select Wo Status and Description
	select 
		j.WorkOrderNumber [WorkOrderNumber] 
		,j.WorkOrderStatusCode [CurrentWOStatus] 
		,j.EstimatedLaborAmount [EstimatedLabor] 
		,j.EstimatedMaterialAmount [EstimatedMaterial] 
		,j.EstimatedOtherAmount [EstimatedMisc] 
		,j.Description [Description] 
		,j.BusinessUnit [BusinessUnit] 
		,j.ParentWONumber [ParentWONo] 
		,j.DispatchNumber [DeliveryTicket] 
		,j.CustomerNumber [CustomerNumber] 
		,j.EstimatedAmount [TotalEstimated] 
		,j.OrderType + ' - ' + typewo [WorkOrderType] 
		,j.Subsidiary [Subsidiary] 
		,j.ActaulLaborInUSD [TotalLaborUSD] 
		,j.ActualMaterialInUSD [TotalMaterialCosUSD] 
		,j.MiscCostInUSD [TotalMiscCostUSD] 
		,j.ActaulMiscCostInUSD [TotalCostUSD]
		,(Select top 1 LevelOfRepair from WorkOrders where JDEWorkOrderNum=@WorkOrderNumber) as [LevelOfRepair]
	from JDEWorkOrders j 
	where WorkOrderNumber = @WorkOrderNumber 

declare @WoType varchar(50)
declare @Status varchar(50)

select @WoType=OrderType+'-'+TypeWO,@Status=WorkOrderStatusCode from JDEWorkOrders where WorkOrderNumber = @WorkOrderNumber 

	SELECT SelectOptionId,SelectName,SortOrder,Attribute1,Attribute2,Attribute3,
		s.Dest as OptionValue,  
		s.Dest+'-'+r.OptionLabel as OptionLabel
	FROM StatusUpdateRules s  
	LEFT JOIN  SelectOptions r ON r.OptionValue = s.Dest    
	WHERE State = @WoType AND Source = @Status AND SelectName = 'JDEWOStatus' 
	ORDER BY Sort   
	SELECT SelectOptionId,SelectName,OptionValue, OptionLabel,SortOrder,Attribute1,Attribute2,Attribute3
	from SelectOptions	  
	WHERE SelectName = 'JDEWORepairLevel' 
	ORDER BY SortOrder  
end

 END 
GO
/****** Object:  StoredProcedure [dbo].[usp_CBMMonitor_AddAssetItemNums]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =======================================================
-- CREATED BY :	SUYEB MOHAMMAD
-- CREATED ON : 13 June 2017
-- DESCRIPTION:	To add parent item num 
-- =======================================================
--TFS 78123: SACHIN MHALUNGEKAR - 29 June 2020 - remove validation from Asset add and check same logic on component add
--=======================================================
CREATE PROCEDURE [dbo].[usp_CBMMonitor_AddAssetItemNums] 
@CBMMonitorId INT,
@ItemNums VARCHAR(MAX),
@UserId INT,
@IsParent BIT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @PFTConfigId uniqueidentifier, @AlreadyExists bit, @ObjectNumber int, @MeterReadingTypeId int, @mCount int, @existingItemNums varchar(8000);
	DECLARE @CBMMonitors TABLE (CBMMonitorId INT);
	SELECT	@PFTConfigId = PFTConfigId, @ObjectNumber = ObjectNumber, @MeterReadingTypeId = MeterReadingTypeId FROM CBMMonitor (NOLOCK) WHERE CBMMonitorId = @CBMMonitorId;
	
	IF (@MeterReadingTypeId IN (1, 2, 3, 6, 7, 9) AND @IsParent = 0)
	BEGIN
		IF (ISNULL(@ObjectNumber, '') = '')
		BEGIN
			INSERT INTO @CBMMonitors
			SELECT CBMMonitorId FROM CBMMonitor (NOLOCK) WHERE PFTConfigId = @PFTConfigId AND MeterReadingTypeId = @MeterReadingTypeId AND Active = 1;
		END		
		ELSE 
		BEGIN
			INSERT INTO @CBMMonitors
			SELECT CBMMonitorId FROM CBMMonitor (NOLOCK) WHERE ObjectNumber = @ObjectNumber AND MeterReadingTypeId = @MeterReadingTypeId AND Active = 1; --AND CBMMonitorId != @CBMMonitorId;
		END
	END
	
	SELECT @mCount = COUNT(*) FROM @CBMMonitors;

	IF (@mCount > 0 AND	
		EXISTS (SELECT TOP 1 [CBMMonitorId] FROM [CBMMonitorAssetItemNums] (NOLOCK) WHERE CBMMonitorId IN (SELECT CBMMonitorId FROM @CBMMonitors) AND 
					ItemNum IN (SELECT a.Entry  FROM dbo.ListToTable(@ItemNums) a) AND IsParent = 0 ))
	BEGIN
			 
			SELECT @existingItemNums = COALESCE(@existingItemNums + ', ', '') + '[ItemNum: ' + ItemNum + ' Exist On CBMMonitorId:' + Cast(CBMMonitorId as varchar) +']' FROM [CBMMonitorAssetItemNums] (NOLOCK) WHERE CBMMonitorId IN (SELECT CBMMonitorId FROM @CBMMonitors) AND 
					ItemNum IN (SELECT a.Entry  FROM dbo.ListToTable(@ItemNums) a) AND IsParent = 0;
			SELECT @existingItemNums [ItemNum];
	END 
	ELSE
	BEGIN
		INSERT	INTO AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
		VALUES	(2040, @UserId, @CBMMonitorId, GETDATE(), NULL, 'CBMMonitorAssetItemNums')

		INSERT INTO [AuditCBMMonitorAssetItemNums]
		SELECT @@IDENTITY, * FROM  [CBMMonitorAssetItemNums] WHERE [CBMMonitorId] = @CBMMonitorId AND [ItemNum] IN (SELECT a.Entry  FROM dbo.ListToTable(@ItemNums) a)

		INSERT INTO [CBMMonitorAssetItemNums](CBMMonitorId, ItemNum, CreatedBy, CreatedOn, IsParent)
		SELECT @CBMMonitorId, Entry, @UserId, GETDATE(), @IsParent FROM dbo.ListToTable(@ItemNums)

		SELECT @existingItemNums [ItemNum];
	END

END

GO
/****** Object:  StoredProcedure [dbo].[usp_CBMMonitor_GetAssetItemNums]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =======================================================
-- CREATED BY :	SUYEB MOHAMMAD
-- CREATED ON : 13 June 2017
-- DESCRIPTION:	To get parent items nums 
-- =======================================================
CREATE PROCEDURE [dbo].[usp_CBMMonitor_GetAssetItemNums] 
@id INT,
@IsParent BIT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT pd.CBMMonitorAssetItemNumId, i.ItemNum, i.DescShort, i.ToolPanel, i.ToolCode FROM [CBMMonitorAssetItemNums] pd
	JOIN ItemNums i on i.ItemNum = pd.ItemNum
	WHERE CBMMonitorId = @id AND IsParent = @IsParent 
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CBMMonitor_RemoveAssetItemNums]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =======================================================
-- CREATED BY :	SUYEB MOHAMMAD
-- CREATED ON : 13 June 2017
-- DESCRIPTION:	To Remove parent item num 
-- =======================================================
CREATE PROCEDURE [dbo].[usp_CBMMonitor_RemoveAssetItemNums] 
@CBMMonitorId INT,
@ItemNums VARCHAR(MAX),
@UserId int,
@IsParent BIT
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @PFTConfigId uniqueidentifier
	SELECT	@PFTConfigId = PFTConfigId FROM CBMMonitor (NOLOCK) WHERE CBMMonitorId = @CBMMonitorId
	
	INSERT	INTO AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
	VALUES	(2041, @UserId, @CBMMonitorId, GETDATE(), NULL, 'CBM_ParentItemNumsDetails')

	INSERT INTO [AuditCBMMonitorAssetItemNums]
	SELECT @@IDENTITY, * FROM  [CBMMonitorAssetItemNums] WHERE [CBMMonitorId] = @CBMMonitorId AND [ItemNum] IN (SELECT a.Entry  FROM dbo.ListToTable(@ItemNums) a)

    DELETE FROM [CBMMonitorAssetItemNums] WHERE [CBMMonitorId] = @CBMMonitorId AND IsParent = @IsParent AND [ItemNum] IN (SELECT a.Entry  FROM dbo.ListToTable(@ItemNums) a)

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CheckSeqDocAttachment]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--===============================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 10 Oct 2017
--DESCRIPTION: To verify if sequence has ttachment
--===============================================================
CREATE PROCEDURE [dbo].[usp_CheckSeqDocAttachment]
@KeyID UNIQUEIDENTIFIER,
@SubKeyId INT
AS
BEGIN
	IF EXISTS(SELECT DocItemId FROM DocItemAttach WHERE GuidKeyId=@KeyID AND SubKeyId=@SubKeyId AND SubKeyName='Seq Num')
		SELECT 1
	ELSE 
		SELECT 0
END


GO
/****** Object:  StoredProcedure [dbo].[usp_Cleanup_CoreFiles]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Yogesh Mane
-- Create date: 05/01/2019
-- Description:	 Update core files to reduce space used
-- =============================================
CREATE PROCEDURE [dbo].[usp_Cleanup_CoreFiles]
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @TotalRecords BIGINT
		
	-- Step 1: for failed request where request is older than 2 months then update InputXML, BaseXML to null
	SELECT @TotalRecords = COUNT(*) 
	FROM Corefiles (NOLOCK)
	WHERE CreatedOn < DATEADD(MONTH, - 2, CAST(GETDATE() AS DATE)) AND ISNULL(Status,0) = 0 
	AND (InputXML IS NOT NULL OR BaseXML IS NOT NULL)

	WHILE (@TotalRecords > 0)
	BEGIN

		UPDATE TOP (100) c
		SET InputXML = NULL, BaseXML = NULL
		FROM Corefiles (NOLOCK) C
		WHERE CreatedOn < DATEADD(MONTH, - 2, CAST(GETDATE() AS DATE)) AND ISNULL(Status,0) = 0 
		AND (InputXML IS NOT NULL OR BaseXML IS NOT NULL)
		
		SET @TotalRecords = @TotalRecords - 100	

	END

	
	--Reset counter
	SET @TotalRecords = 0

	-- Step 2: for failed request where request is less than 2 month old then update basexml to null
	SELECT @TotalRecords = COUNT(*) 
	FROM Corefiles (NOLOCK)
	WHERE CreatedOn BETWEEN DATEADD(MONTH, - 1, CAST(GETDATE() AS DATE)) AND DATEADD(MONTH, - 2, CAST(GETDATE() AS DATE)) 
		AND ISNULL(Status,0) = 0 AND BaseXML IS NOT NULL

	WHILE (@TotalRecords > 0)
	BEGIN

		UPDATE TOP (100) c
		SET InputXML = NULL, BaseXML = NULL
		FROM Corefiles (NOLOCK) c
		WHERE CreatedOn > DATEADD(MONTH, - 2, CAST(GETDATE() AS DATE)) AND ISNULL(Status,0) = 0 AND BaseXML IS NOT NULL
		
		SET @TotalRecords = @TotalRecords - 100	

	END

	
	--Reset counter
	SET @TotalRecords = 0

	
	-- Step 3: for sucess request where request is older than 2 month then update basexml to null
	SELECT @TotalRecords = COUNT(*)
	FROM Corefiles (NOLOCK)
	WHERE CreatedOn < DATEADD(MONTH, - 2, CAST(GETDATE() AS DATE)) AND ISNULL(Status,0) = 1 AND BaseXML IS NOT NULL

	WHILE (@TotalRecords > 0)
	BEGIN

		UPDATE TOP (100) c
		SET InputXML = NULL, BaseXML = NULL
		FROM Corefiles (NOLOCK) C
		WHERE CreatedOn < DATEADD(MONTH, - 2, CAST(GETDATE() AS DATE)) AND ISNULL(Status,0) = 1 AND BaseXML IS NOT NULL
		
		SET @TotalRecords = @TotalRecords - 100	

	END
	
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ClientJobMapBranchPlants]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_ClientJobMapBranchPlants]
	@xmlData as xml
AS
	SET NOCOUNT ON
	set arithabort ON

	declare @Country varchar(50)
	select @Country = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Country') T(c);

	declare @Region varchar(50)
	select @Region = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Region') T(c);

	declare @JobsPrevMonths int
	select @JobsPrevMonths = -1 * T.c.value('.', 'int') from @xmlData.nodes('/Filters/JobsPreviousMonths') T(c);

	CREATE TABLE #tempCompany(
		CustomerId uniqueidentifier
	)
	
	INSERT INTO #tempCompany
	SELECT T.c.value('.', 'uniqueidentifier') as CustomerId
	FROM @xmlData.nodes('/Filters/Customers/Id') T(c)

	IF(SELECT COUNT(*) from #tempCompany) = 0
	BEGIN
		INSERT INTO #tempCompany
		Select CustomerId From Customers Where IsActive = 1
	END

	select distinct d.BranchPlant, d.CompanyName, d.Latitude, d.Longitude
	from BranchPlants (NOLOCK) d
	join Jobs (NOLOCK) j on j.BranchPlant = d.BranchPlant
	join Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	left join Countries (NOLOCK) c on c.Country = j.Country
	left join Regions (NOLOCK) r on r.Region = j.Region AND r.Active = 1
	where r.Active = 1 
	  AND c.Country = IsNull(@Country, c.Country)
	  AND r.Region = IsNull(@Region, r.Region)
	  AND client.CustomerId IN(Select CustomerId from #tempCompany) 
	order by d.BranchPlant
	
	--Jobs Count for Status
	Select d.BranchPlant, j.ImportStatus as Status, count(1) as StatusCount
	From Jobs (NOLOCK) j
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region AND r.Active = 1
	Where r.Active = 1 
	  AND d.Active = 1 
	  AND j.IsDeleted = 0
	  AND j.EndDate is null
	  AND j.IsJAROnly = 0
	  AND c.Country = IsNull(@Country, c.Country)
	  AND r.Region = IsNull(@Region, r.Region)
	  AND client.CustomerId IN(Select CustomerId from #tempCompany) 
	Group BY d.BranchPlant, j.ImportStatus
	Order BY d.BranchPlant, j.ImportStatus
	
	-- Runs - DownHole  
	select 
	  d.BranchPlant
	  , count(1) as [Runs]
	  , (select count(1) as [Incidents]
			from Incidents (NOLOCK) i
			INNER JOIN Runs (NOLOCK) runs2 on runs2.RunID = i.RunID
			INNER JOIN Wells (NOLOCK) wells2 on wells2.WellID = runs2.WellID 
			INNER JOIN Jobs (NOLOCK) j2 on j2.JobID = wells2.JobID
			INNER JOIN Customers (NOLOCK) client2 on client2.CustomerId = j2.CustomerId
			LEFT JOIN BranchPlants (NOLOCK) d2 on d2.BranchPlant = j2.BranchPlant
			LEFT JOIN Countries (NOLOCK) c2 on c2.Country = j2.Country
			LEFT JOIN Regions (NOLOCK) r2 on r2.Region = j2.Region
			where i.IsDeleted = 0 AND runs2.IsDeleted = 0
			  AND wells2.IsDeleted = 0
			  AND j2.IsDeleted = 0
			  AND runs2.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
			  AND runs2.MDStart IS NOT NULL AND runs2.IsDownHole = 1
			  AND r2.Active = 1 
			  AND d2.Active = 1 
			  AND r2.Region = r.Region
			  AND c2.Country = c.Country
			  AND d2.BranchPlant = d.BranchPlant
			  AND c2.Country = IsNull(@Country, c2.Country)
			  AND r2.Region = IsNull(@Region, r2.Region)
			  AND client2.CustomerId IN(Select CustomerId from #tempCompany) 
		) as [Incidents]
	  , (select count(1) from Runs (NOLOCK) runs3  
			INNER JOIN Wells (NOLOCK) wells3 on wells3.WellID = runs3.WellID 
			INNER JOIN Jobs (NOLOCK) j3 on j3.JobID = wells3.JobID
			INNER JOIN Customers (NOLOCK) client3 on client3.CustomerId = j3.CustomerId
			LEFT JOIN BranchPlants (NOLOCK) d3 on d3.BranchPlant = j3.BranchPlant
			LEFT JOIN Countries (NOLOCK) c3 on c3.Country = j3.Country
			LEFT JOIN Regions (NOLOCK) r3 on r3.Region = j3.Region
			where 
			  runs3.IsDeleted = 0 AND runs3.RunID NOT IN(select i2.RunID from Incidents i2 where i2.IsDeleted=0)
			  AND wells3.IsDeleted = 0
			  AND j3.IsDeleted = 0
			  AND runs3.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
			  AND runs3.MDStart IS NOT NULL AND runs3.IsDownHole = 1
			  AND r3.Active = 1 
			  AND d3.Active = 1 
			  AND r3.Region = r.Region
			  AND c3.Country = c.Country
			  AND d3.BranchPlant = d.BranchPlant
			  AND c3.Country = IsNull(@Country, c3.Country)
			  AND r3.Region = IsNull(@Region, r3.Region)
			  AND client3.CustomerId IN(Select CustomerId from #tempCompany) 
		) as [%]
		, sum(HEL_LWD) as [LWD]
		, sum(EM) as [EM]
		, sum(PP) as [HyperPulse]
		, sum(RSS) as [RSS]
		, sum(TENSOR) as [TENSOR]
		, sum(GEOLINK) as [GEOLINK]
		, sum(BECFIELD) as [BECFIELD]
		, sum(MOTOR) as [MOTOR]
		, sum(AGS) as [AGS]
		, sum(WPR) as [WPR]
		, sum(GWD) as [GWD]
	from Runs (NOLOCK) runs 
	INNER JOIN Wells (NOLOCK) wells on wells.WellID = runs.WellID 
	INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
	where runs.IsDeleted = 0
	  AND wells.IsDeleted = 0
	  AND j.IsDeleted = 0
	  AND j.IsJAROnly = 0
	  AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	  AND runs.MDStart IS NOT NULL AND runs.IsDownHole = 1
	  AND r.Active = 1 
	  AND d.Active = 1 
	  AND c.Country = IsNull(@Country, c.Country)
	  AND r.Region = IsNull(@Region, r.Region)
	  AND client.CustomerId IN(Select CustomerId from #tempCompany) 
	Group by r.Region, c.Country, d.BranchPlant
	Order by r.Region, c.Country, d.BranchPlant
	
	-- Incidents
	Select 	
		d.BranchPlant,
		SUM(CASE WHEN  HEL_LWD = 1 THEN 1 ELSE 0 END) as Incidents_LWD,
		SUM(CASE WHEN  EM = 1 THEN 1 ELSE 0 END) as Incidents_EM,
		SUM(CASE WHEN  PP = 1 THEN 1 ELSE 0 END) as Incidents_HyperPulse,
		SUM(CASE WHEN  RSS = 1 THEN 1 ELSE 0 END) as Incidents_RSS,
		SUM(CASE WHEN  TENSOR = 1 THEN 1 ELSE 0 END) as Incidents_TENSOR,
		SUM(CASE WHEN  GEOLINK = 1 THEN 1 ELSE 0 END) as Incidents_GEOLINK,
		SUM(CASE WHEN  BECFIELD = 1 THEN 1 ELSE 0 END) as Incidents_BECFIELD,
		SUM(CASE WHEN  MOTOR = 1 THEN 1 ELSE 0 END) as Incidents_MOTOR,
		SUM(CASE WHEN  AGS = 1 THEN 1 ELSE 0 END) as Incidents_AGS,
		SUM(CASE WHEN  WPR = 1 THEN 1 ELSE 0 END) as Incidents_WPR,
		SUM(CASE WHEN  GWD = 1 THEN 1 ELSE 0 END) as Incidents_GWD
	from Incidents (NOLOCK) i
	INNER JOIN Runs (NOLOCK) runs on runs.RunID = i.RunID
	INNER JOIN Wells (NOLOCK) wells on wells.WellID = runs.WellID 
	INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
	Where i.IsDeleted = 0 AND runs.IsDeleted = 0
	  AND wells.IsDeleted = 0
	  AND j.IsDeleted = 0
	  AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	  AND runs.MDStart IS NOT NULL and runs.IsDownHole = 1
	  AND r.Active = 1 
	  AND d.Active = 1 
	  AND c.Country = IsNull(@Country, c.Country)
	  AND r.Region = IsNull(@Region, r.Region)
	  AND client.CustomerId IN(Select CustomerId from #tempCompany)
	Group BY d.BranchPlant
	 
	--	Circ_Hrs by Product Line
	Select d.BranchPlant,
		SUM(CASE WHEN HEL_LWD = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_LWD], 
		SUM(CASE WHEN HEL_LWD = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_LWD],
		
		SUM(CASE WHEN EM = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_EM], 
		SUM(CASE WHEN EM = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_EM],
		
		SUM(CASE WHEN PP = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_HyperPulse], 
		SUM(CASE WHEN PP = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_HyperPulse],
		
		SUM(CASE WHEN RSS = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_RSS], 
		SUM(CASE WHEN RSS = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_RSS],
		
		SUM(CASE WHEN TENSOR = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_TENSOR], 
		SUM(CASE WHEN TENSOR = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_TENSOR],
		
		SUM(CASE WHEN GEOLINK = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_GEOLINK], 
		SUM(CASE WHEN GEOLINK = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_GEOLINK],
		
		SUM(CASE WHEN BECFIELD = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_BECFIELD], 
		SUM(CASE WHEN BECFIELD = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_BECFIELD],
		
		SUM(CASE WHEN MOTOR = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_MOTOR], 
		SUM(CASE WHEN MOTOR = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_MOTOR],
		
		SUM(CASE WHEN AGS = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_AGS], 
		SUM(CASE WHEN AGS = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_AGS],
		
		SUM(CASE WHEN WPR = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_WPR], 
		SUM(CASE WHEN WPR = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_WPR],
		
		SUM(CASE WHEN GWD = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_GWD], 
		SUM(CASE WHEN GWD = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_GWD]
	From Runs (NOLOCK) runs
	INNER JOIN Wells (NOLOCK) wells on wells.WellID = runs.WellID 
	INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
	where runs.IsDeleted = 0
	  AND wells.IsDeleted = 0
	  AND j.IsDeleted = 0
	  AND j.IsJAROnly = 0
	  AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	  AND runs.MDStart IS NOT NULL AND runs.IsDownHole = 1
	  AND r.Active=1 
	  AND d.Active = 1 
	  AND c.Country = IsNull(@Country, c.Country)
	  AND r.Region = IsNull(@Region, r.Region)
	  AND client.CustomerId IN(Select CustomerId from #tempCompany) 
	Group BY d.BranchPlant
	  
	-- TOP 5 Crisis Jobs
	Select BranchPlant, [Job Number], [% Failed], DownHole AS Runs, Incidents AS I
	From (
		Select BranchPlant, [Job Number], DownHole, Incidents,
			Convert(float, Incidents, 0)/Runs As [% Failed], 
			Rank() over (Partition By BranchPlant Order By Convert(float, Incidents, 0)/Runs DESC) AS Rank
		From (
			Select d.BranchPlant, j.JobNumber as [Job Number]
				, count(1) as [Runs]
				, SUM(runs.IsDownHole) AS DownHole
				, (Select count(1) as [Incidents]
					From Incidents (NOLOCK) i
						INNER JOIN Runs (NOLOCK) runs2 on runs2.RunID = i.RunID
						INNER JOIN Wells (NOLOCK) wells2 on wells2.WellID=runs2.WellID 
						INNER JOIN Jobs (NOLOCK) j2 on j2.JobID = wells2.JobID
						LEFT JOIN BranchPlants (NOLOCK) d2 on d2.BranchPlant = j2.BranchPlant
						LEFT JOIN Countries (NOLOCK) c2 on c2.Country = j2.Country
						LEFT JOIN Regions (NOLOCK) r2 on r2.Region = j2.Region
						INNER JOIN Customers (NOLOCK) co2 on j2.CustomerId = co2.CustomerId
					Where i.IsDeleted = 0 and runs2.IsDeleted=0
						AND wells2.IsDeleted = 0
						AND j2.IsDeleted = 0
						AND runs2.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
						AND r2.Active = 1 
						AND d2.Active=1 
						AND j2.JobNumber = j.JobNumber
						AND d2.BranchPlant = d.BranchPlant
						AND c2.Country = IsNull(@Country, c2.Country)
						AND r2.Region = IsNull(@Region, r2.Region)
						AND co2.CustomerId IN(Select CustomerId from #tempCompany)
					) as [Incidents]
			From Runs (NOLOCK) runs 
				INNER JOIN Wells (NOLOCK) wells on wells.WellID=runs.WellID 
				INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
				LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
				LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
				LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
				INNER JOIN Customers (NOLOCK) co on j.CustomerId = co.CustomerId
			Where runs.IsDeleted=0
				AND wells.IsDeleted = 0
				AND j.IsDeleted = 0
				AND j.IsJAROnly = 0
				AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
				AND r.Active = 1 
				AND d.Active = 1 
				AND c.Country = IsNull(@Country, c.Country)
				AND r.Region = IsNull(@Region, r.Region)
				AND co.CustomerId IN(Select CustomerId from #tempCompany)
			Group BY d.BranchPlant, j.JobNumber
		) as tmp
	) as tmp2
	where [RANK] <= 5
	
DROP TABLE #tempCompany

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_ClientJobMapCountries]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[usp_ClientJobMapCountries]
	@xmlData as xml
AS
	SET NOCOUNT ON
	set arithabort ON

	declare @Region varchar(50)
	select @Region = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Region') T(c);

	declare @JobsPrevMonths int
	select @JobsPrevMonths = -1 * T.c.value('.', 'int') from @xmlData.nodes('/Filters/JobsPreviousMonths') T(c);

	CREATE TABLE #tempCompany(
		CustomerId uniqueidentifier
	)
	
	INSERT INTO #tempCompany
	SELECT T.c.value('.', 'uniqueidentifier') as CustomerId
	FROM @xmlData.nodes('/Filters/Customers/Id') T(c)

	IF(SELECT COUNT(*) from #tempCompany) = 0
	BEGIN
		INSERT INTO #tempCompany
		Select CustomerId From Customers Where IsActive = 1
	END

	select distinct c.Country,c.CountryDesc, c.Latitude, c.Longitude
	from Countries (NOLOCK) c
	INNER JOIN Regions (NOLOCK) r on r.Region = c.RegionCode
	INNER JOIN Jobs (NOLOCK) j on j.Region = r.Region
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	where r.Active = 1 
	  AND r.Region = IsNull(@Region, r.Region)
	  AND client.CustomerId IN(Select CustomerId from #tempCompany) 
	order by c.Country
	
	--Jobs Count for Status
	Select c.Country, j.ImportStatus as Status, count(1) as StatusCount
	From Jobs (NOLOCK) j
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region AND r.Active = 1
	Where r.Active = 1 
	  AND d.Active = 1 
	  AND j.IsDeleted = 0
	  AND j.EndDate is null
	  AND j.IsJAROnly = 0
	  AND r.Region = IsNull(@Region, r.Region)
	  AND client.CustomerId IN(Select CustomerId from #tempCompany) 
	Group BY c.Country, j.ImportStatus
	Order BY c.Country, j.ImportStatus
	
	-- Runs - DownHole  
	select 
	  c.Country
	  , count(1) as [Runs]
	  , (select count(1) as [Incidents]
			from Incidents (NOLOCK) i
			INNER JOIN Runs (NOLOCK) runs2 on runs2.RunID = i.RunID
			INNER JOIN Wells (NOLOCK) wells2 on wells2.WellID = runs2.WellID 
			INNER JOIN Jobs (NOLOCK) j2 on j2.JobID = wells2.JobID
			INNER JOIN Customers (NOLOCK) client2 on client2.CustomerId = j2.CustomerId
			LEFT JOIN BranchPlants (NOLOCK) d2 on d2.BranchPlant = j2.BranchPlant
			LEFT JOIN Countries (NOLOCK) c2 on c2.Country = j2.Country
			LEFT JOIN Regions (NOLOCK) r2 on r2.Region = j2.Region AND r2.Active = 1
			where i.IsDeleted = 0 AND runs2.IsDeleted = 0
			  AND wells2.IsDeleted = 0
			  AND j2.IsDeleted = 0
			  AND runs2.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
			  AND runs2.MDStart IS NOT NULL AND runs2.IsDownHole = 1
			  AND r2.Active = 1 
			  AND d2.Active = 1 
			  AND r2.Region = r.Region
			  AND c2.Country = c.Country
			  AND r2.Region = IsNull(@Region, r2.Region)
			  AND client2.CustomerId IN(Select CustomerId from #tempCompany) 
		) as [Incidents]
	  , (select count(1) from Runs (NOLOCK) runs3  
			INNER JOIN Wells (NOLOCK) wells3 on wells3.WellID = runs3.WellID 
			INNER JOIN Jobs (NOLOCK) j3 on j3.JobID = wells3.JobID
			INNER JOIN Customers (NOLOCK) client3 on client3.CustomerId = j3.CustomerId
			LEFT JOIN BranchPlants (NOLOCK) d3 on d3.BranchPlant = j3.BranchPlant
			LEFT JOIN Countries (NOLOCK) c3 on c3.Country = j3.Country
			LEFT JOIN Regions (NOLOCK) r3 on r3.Region = j3.Region AND r3.Active = 1
			where 
			  runs3.IsDeleted = 0 AND runs3.RunID NOT IN(select i2.RunID from Incidents i2 where i2.IsDeleted = 0)
			  AND wells3.IsDeleted = 0
			  AND j3.IsDeleted = 0
			  AND runs3.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
			  AND runs3.MDStart IS NOT NULL AND runs3.IsDownHole = 1
			  AND r3.Active = 1 
			  AND d3.Active = 1 
			  AND r3.Region = r.Region
			  AND c3.Country = c.Country
			  AND r3.Region = IsNull(@Region, r3.Region)
			  AND client3.CustomerId IN(Select CustomerId from #tempCompany) 
		) as [%]
		, sum(HEL_LWD) as [LWD]
		, sum(EM) as [EM]
		, sum(PP) as [HyperPulse]
		, sum(RSS) as [RSS]
		, sum(TENSOR) as [TENSOR]
		, sum(GEOLINK) as [GEOLINK]
		, sum(BECFIELD) as [BECFIELD]
		, sum(MOTOR) as [MOTOR]
		, sum(AGS) as [AGS]
		, sum(WPR) as [WPR]
		, sum(GWD) as [GWD]
	from Runs (NOLOCK) runs 
	INNER JOIN Wells (NOLOCK) wells on wells.WellID = runs.WellID 
	INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region AND r.Active = 1
	where runs.IsDeleted=0
	  AND wells.IsDeleted = 0
	  AND j.IsDeleted = 0
	  AND j.IsJAROnly = 0
	  AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	  AND runs.MDStart IS NOT NULL AND runs.IsDownHole = 1
	  AND r.Active = 1 
	  AND d.Active = 1 
	  AND r.Region = IsNull(@Region, r.Region)
	  AND client.CustomerId IN(Select CustomerId from #tempCompany) 
	group by r.Region, c.Country
	order by r.Region, c.Country
	
	-- Incidents
	Select 	
		c.Country,
		SUM(CASE WHEN  HEL_LWD = 1 THEN 1 ELSE 0 END) as Incidents_LWD,
		SUM(CASE WHEN  EM = 1 THEN 1 ELSE 0 END) as Incidents_EM,
		SUM(CASE WHEN  PP = 1 THEN 1 ELSE 0 END) as Incidents_HyperPulse,
		SUM(CASE WHEN  RSS = 1 THEN 1 ELSE 0 END) as Incidents_RSS,
		SUM(CASE WHEN  TENSOR = 1 THEN 1 ELSE 0 END) as Incidents_TENSOR,
		SUM(CASE WHEN  GEOLINK = 1 THEN 1 ELSE 0 END) as Incidents_GEOLINK,
		SUM(CASE WHEN  BECFIELD = 1 THEN 1 ELSE 0 END) as Incidents_BECFIELD,
		SUM(CASE WHEN  MOTOR = 1 THEN 1 ELSE 0 END) as Incidents_MOTOR,
		SUM(CASE WHEN  AGS = 1 THEN 1 ELSE 0 END) as Incidents_AGS,
		SUM(CASE WHEN  WPR = 1 THEN 1 ELSE 0 END) as Incidents_WPR,
		SUM(CASE WHEN  GWD = 1 THEN 1 ELSE 0 END) as Incidents_GWD
	from Incidents (NOLOCK) i
	INNER JOIN Runs (NOLOCK) runs on runs.RunID = i.RunID
	INNER JOIN Wells (NOLOCK) wells on wells.WellID = runs.WellID 
	INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
	Where i.IsDeleted = 0 AND runs.IsDeleted = 0
	  AND wells.IsDeleted = 0
	  AND j.IsDeleted = 0
	  AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	  AND runs.MDStart IS NOT NULL and runs.IsDownHole = 1
	  AND r.Active = 1 
	  AND d.Active = 1 
	  AND r.Region = IsNull(@Region, r.Region)
	  AND client.CustomerId IN(Select CustomerId from #tempCompany)
	Group BY c.Country
	
	--	Circ_Hrs by Product Line
	Select c.Country,
		SUM(CASE WHEN HEL_LWD = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_LWD], 
		SUM(CASE WHEN HEL_LWD = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_LWD],
		
		SUM(CASE WHEN EM = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_EM], 
		SUM(CASE WHEN EM = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_EM],
		
		SUM(CASE WHEN PP = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_HyperPulse], 
		SUM(CASE WHEN PP = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_HyperPulse],
		
		SUM(CASE WHEN RSS = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_RSS], 
		SUM(CASE WHEN RSS = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_RSS],
		
		SUM(CASE WHEN TENSOR = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_TENSOR], 
		SUM(CASE WHEN TENSOR = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_TENSOR],
		
		SUM(CASE WHEN GEOLINK = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_GEOLINK], 
		SUM(CASE WHEN GEOLINK = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_GEOLINK],
		
		SUM(CASE WHEN BECFIELD = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_BECFIELD], 
		SUM(CASE WHEN BECFIELD = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_BECFIELD],
		
		SUM(CASE WHEN MOTOR = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_MOTOR], 
		SUM(CASE WHEN MOTOR = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_MOTOR],
		
		SUM(CASE WHEN AGS = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_AGS], 
		SUM(CASE WHEN AGS = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_AGS],
		
		SUM(CASE WHEN WPR = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_WPR], 
		SUM(CASE WHEN WPR = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_WPR],
		
		SUM(CASE WHEN GWD = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_GWD], 
		SUM(CASE WHEN GWD = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_GWD]
	From Runs (NOLOCK) runs
	INNER JOIN Wells (NOLOCK) wells on wells.WellID = runs.WellID 
	INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
	where runs.IsDeleted = 0
	  AND wells.IsDeleted = 0
	  AND j.IsDeleted = 0
	  AND j.IsJAROnly = 0
	  AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	  AND runs.MDStart IS NOT NULL AND runs.IsDownHole = 1
	  AND r.Active=1 
	  AND d.Active = 1 
	  AND r.Region = IsNull(@Region, r.Region)
	  AND client.CustomerId IN(Select CustomerId from #tempCompany)
	Group BY c.Country
	  
	-- TOP 5 Crisis Jobs
	Select Country, [Job Number], [% Failed], DownHole AS Runs, Incidents AS I
	From (
		Select Country, [Job Number], DownHole, Incidents,
			Convert(float, Incidents, 0)/Runs As [% Failed], 
			Rank() over (Partition By Country Order By Convert(float, Incidents, 0)/Runs DESC) AS Rank
		From (
			Select c.Country, j.JobNumber as [Job Number]
				, count(1) as [Runs]
				, SUM(runs.IsDownHole) AS DownHole
				, (Select count(1) as [Incidents]
					From Incidents (NOLOCK) i
						INNER JOIN Runs (NOLOCK) runs2 on runs2.RunID = i.RunID
						INNER JOIN Wells (NOLOCK) wells2 on wells2.WellID=runs2.WellID 
						INNER JOIN Jobs (NOLOCK) j2 on j2.JobID = wells2.JobID
						LEFT JOIN BranchPlants (NOLOCK) d2 on d2.BranchPlant = j2.BranchPlant
						LEFT JOIN Countries (NOLOCK) c2 on c2.Country = j2.Country
						LEFT JOIN Regions (NOLOCK) r2 on r2.Region = j2.Region
						INNER JOIN Customers (NOLOCK) co2 on j2.CustomerId = co2.CustomerId
					Where i.IsDeleted = 0 and runs2.IsDeleted=0
						AND wells2.IsDeleted = 0
						AND j2.IsDeleted = 0
						AND runs2.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
						AND r2.Active = 1 
						AND d2.Active=1 
						AND j2.JobNumber = j.JobNumber
						AND c2.Country = c.Country
						AND r2.Region = IsNull(@Region, r2.Region)
						AND co2.CustomerId IN(Select CustomerId from #tempCompany)
					) as [Incidents]
			From Runs (NOLOCK) runs 
				INNER JOIN Wells (NOLOCK) wells on wells.WellID=runs.WellID 
				INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
				LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
				LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
				LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
				INNER JOIN Customers (NOLOCK) co on j.CustomerId = co.CustomerId
			Where runs.IsDeleted=0
				AND wells.IsDeleted = 0
				AND j.IsDeleted = 0
				AND j.IsJAROnly = 0
				AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
				AND r.Active = 1 
				AND d.Active = 1 
				AND r.Region = IsNull(@Region, r.Region)
				AND co.CustomerId IN(Select CustomerId from #tempCompany)
			Group BY c.Country, j.JobNumber
		) as tmp
	) as tmp2
	where [RANK] <= 5
	
DROP TABLE #tempCompany

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_ClientJobMapRegions]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_ClientJobMapRegions]
	@xmlData as xml
AS
	SET NOCOUNT ON
	set arithabort ON
	
	declare @JobsPrevMonths int
	select @JobsPrevMonths = -1 * T.c.value('.', 'int') from @xmlData.nodes('/Filters/JobsPreviousMonths') T(c);

	CREATE TABLE #tempCompany(
		CustomerId uniqueidentifier
	)
	
	INSERT INTO #tempCompany
	SELECT T.c.value('.', 'uniqueidentifier') as CustomerId
	FROM @xmlData.nodes('/Filters/Customers/Id') T(c)
	
	IF(SELECT COUNT(*) from #tempCompany) = 0
	BEGIN
		INSERT INTO #tempCompany
		Select CustomerId From Customers Where IsActive = 1
	END
	
	Select Distinct r.Region,r.RegionDesc, r.Latitude, r.Longitude
	From Regions (NOLOCK) r
	INNER JOIN Jobs (NOLOCK) j on j.Region = r.Region
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	Where r.Active = 1 
		AND client.CustomerId IN(Select CustomerId from #tempCompany) 
	UNION
	Select 'Global' as Region,'Global' as RegionDesc, '30.35' as Latitude, '-35.40' as Longitude
	Order BY Region
	
	--Jobs Count for Status
	Select r.Region, j.ImportStatus as Status, count(1) as StatusCount
	From Jobs (NOLOCK) j
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
	Where r.Active = 1
	  AND d.Active = 1 
	  AND j.IsDeleted = 0
	  AND j.EndDate is null
	  AND j.IsJAROnly = 0
	  AND client.CustomerId IN(Select CustomerId from #tempCompany) 
	Group BY r.Region, j.ImportStatus
	Order BY r.Region, j.ImportStatus
	
	-- Runs - DownHole  
	Select 
	  r.Region
	  , count(1) as [Runs]
	  , (select count(1) as [Incidents]
			from Incidents (NOLOCK) i
			INNER JOIN Runs (NOLOCK) runs2 on runs2.RunID = i.RunID
			INNER JOIN Wells (NOLOCK) wells2 on wells2.WellID = runs2.WellID 
			INNER JOIN Jobs (NOLOCK) j2 on j2.JobID = wells2.JobID
			INNER JOIN Customers (NOLOCK) client2 on client2.CustomerId = j2.CustomerId
			LEFT JOIN BranchPlants (NOLOCK) d2 on d2.BranchPlant = j2.BranchPlant
			LEFT JOIN Countries (NOLOCK) c2 on c2.Country = j2.Country
			LEFT JOIN Regions (NOLOCK) r2 on r2.Region = j2.Region
			Where i.IsDeleted = 0 AND runs2.IsDeleted = 0
			  AND wells2.IsDeleted = 0
			  AND j2.IsDeleted = 0
			  AND runs2.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
			  AND runs2.MDStart IS NOT NULL and runs2.IsDownHole = 1
			  AND r2.Active = 1 
			  AND d2.Active=1 
			  AND r2.Region = r.Region
			  AND client2.CustomerId IN(Select CustomerId from #tempCompany) 
		) as [Incidents]
	  , (Select count(1) from Runs (NOLOCK) runs3  
			INNER JOIN Wells (NOLOCK) wells3 on wells3.WellID = runs3.WellID 
			INNER JOIN Jobs (NOLOCK) j3 on j3.JobID = wells3.JobID
			INNER JOIN Customers (NOLOCK) client3 on client3.CustomerId = j3.CustomerId
			LEFT JOIN BranchPlants (NOLOCK) d3 on d3.BranchPlant = j3.BranchPlant
			LEFT JOIN Countries (NOLOCK) c3 on c3.Country = j3.Country
			LEFT JOIN Regions (NOLOCK) r3 on r3.Region = j3.Region
			where 
			  runs3.IsDeleted = 0 and runs3.RunID NOT IN(Select i2.RunID from Incidents i2 Where i2.IsDeleted=0)
			  AND wells3.IsDeleted = 0
			  AND j3.IsDeleted = 0
			  AND runs3.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
			  AND runs3.MDStart IS NOT NULL AND runs3.IsDownHole = 1
			  AND r3.Active=1 
			  AND d3.Active = 1 
			  AND r3.Region = r.Region
			  AND client3.CustomerId IN(Select CustomerId from #tempCompany) 
		) as [%]
		, sum(HEL_LWD) as [LWD]
		, sum(EM) as [EM]
		, sum(PP) as [HyperPulse]
		, sum(RSS) as [RSS]
		, sum(TENSOR) as [TENSOR]
		, sum(GEOLINK) as [GEOLINK]
		, sum(BECFIELD) as [BECFIELD]
		, sum(MOTOR) as [MOTOR]
		, sum(AGS) as [AGS]
		, sum(WPR) as [WPR]
		, sum(GWD) as [GWD]
	From Runs (NOLOCK) runs 
	INNER JOIN Wells (NOLOCK) wells on wells.WellID = runs.WellID 
	INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
	where runs.IsDeleted = 0
	  AND wells.IsDeleted = 0
	  AND j.IsDeleted = 0
	  AND j.IsJAROnly = 0
	  AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	  AND runs.MDStart IS NOT NULL AND runs.IsDownHole = 1
	  AND r.Active=1 
	  AND d.Active = 1 
	  AND client.CustomerId IN(Select CustomerId from #tempCompany)
	Group BY r.Region
	Order BY r.Region
	
	-- Incidents
	Select 	
		r.Region,
		SUM(CASE WHEN  HEL_LWD = 1 THEN 1 ELSE 0 END) as Incidents_LWD,
		SUM(CASE WHEN  EM = 1 THEN 1 ELSE 0 END) as Incidents_EM,
		SUM(CASE WHEN  PP = 1 THEN 1 ELSE 0 END) as Incidents_HyperPulse,
		SUM(CASE WHEN  RSS = 1 THEN 1 ELSE 0 END) as Incidents_RSS,
		SUM(CASE WHEN  TENSOR = 1 THEN 1 ELSE 0 END) as Incidents_TENSOR,
		SUM(CASE WHEN  GEOLINK = 1 THEN 1 ELSE 0 END) as Incidents_GEOLINK,
		SUM(CASE WHEN  BECFIELD = 1 THEN 1 ELSE 0 END) as Incidents_BECFIELD,
		SUM(CASE WHEN  MOTOR = 1 THEN 1 ELSE 0 END) as Incidents_MOTOR,
		SUM(CASE WHEN  AGS = 1 THEN 1 ELSE 0 END) as Incidents_AGS,
		SUM(CASE WHEN  WPR = 1 THEN 1 ELSE 0 END) as Incidents_WPR,
		SUM(CASE WHEN  GWD = 1 THEN 1 ELSE 0 END) as Incidents_GWD
	from Incidents (NOLOCK) i
	INNER JOIN Runs (NOLOCK) runs on runs.RunID = i.RunID
	INNER JOIN Wells (NOLOCK) wells on wells.WellID = runs.WellID 
	INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
	Where i.IsDeleted = 0 AND runs.IsDeleted = 0
	  AND wells.IsDeleted = 0
	  AND j.IsDeleted = 0
	  AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	  AND runs.MDStart IS NOT NULL and runs.IsDownHole = 1
	  AND r.Active = 1 
	  AND d.Active = 1 
	  AND client.CustomerId IN(Select CustomerId from #tempCompany)
	GROUP by r.Region
	UNION
	Select 	
		'Global',
		SUM(CASE WHEN  HEL_LWD = 1 THEN 1 ELSE 0 END) as Incidents_LWD,
		SUM(CASE WHEN  EM = 1 THEN 1 ELSE 0 END) as Incidents_EM,
		SUM(CASE WHEN  PP = 1 THEN 1 ELSE 0 END) as Incidents_HyperPulse,
		SUM(CASE WHEN  RSS = 1 THEN 1 ELSE 0 END) as Incidents_RSS,
		SUM(CASE WHEN  TENSOR = 1 THEN 1 ELSE 0 END) as Incidents_TENSOR,
		SUM(CASE WHEN  GEOLINK = 1 THEN 1 ELSE 0 END) as Incidents_GEOLINK,
		SUM(CASE WHEN  BECFIELD = 1 THEN 1 ELSE 0 END) as Incidents_BECFIELD,
		SUM(CASE WHEN  MOTOR = 1 THEN 1 ELSE 0 END) as Incidents_MOTOR,
		SUM(CASE WHEN  AGS = 1 THEN 1 ELSE 0 END) as Incidents_AGS,
		SUM(CASE WHEN  WPR = 1 THEN 1 ELSE 0 END) as Incidents_WPR,
		SUM(CASE WHEN  GWD = 1 THEN 1 ELSE 0 END) as Incidents_GWD
	from Incidents (NOLOCK) i
	INNER JOIN Runs (NOLOCK) runs on runs.RunID = i.RunID
	INNER JOIN Wells (NOLOCK) wells on wells.WellID = runs.WellID 
	INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
	Where i.IsDeleted = 0 AND runs.IsDeleted = 0
	  AND wells.IsDeleted = 0
	  AND j.IsDeleted = 0
	  AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	  AND runs.MDStart IS NOT NULL and runs.IsDownHole = 1
	  AND r.Active = 1 
	  AND d.Active = 1 
	  AND client.CustomerId IN(Select CustomerId from #tempCompany)

		
	--	Circ_Hrs by Product Line
	Select 
		r.Region,
		SUM(CASE WHEN HEL_LWD = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_LWD], 
		SUM(CASE WHEN HEL_LWD = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_LWD],
		
		SUM(CASE WHEN EM = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_EM], 
		SUM(CASE WHEN EM = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_EM],
		
		SUM(CASE WHEN PP = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_HyperPulse], 
		SUM(CASE WHEN PP = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_HyperPulse],
		
		SUM(CASE WHEN RSS = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_RSS], 
		SUM(CASE WHEN RSS = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_RSS],
		
		SUM(CASE WHEN TENSOR = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_TENSOR], 
		SUM(CASE WHEN TENSOR = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_TENSOR],
		
		SUM(CASE WHEN GEOLINK = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_GEOLINK], 
		SUM(CASE WHEN GEOLINK = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_GEOLINK],
		
		SUM(CASE WHEN BECFIELD = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_BECFIELD], 
		SUM(CASE WHEN BECFIELD = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_BECFIELD],
		
		SUM(CASE WHEN MOTOR = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_MOTOR], 
		SUM(CASE WHEN MOTOR = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_MOTOR],
		
		SUM(CASE WHEN AGS = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_AGS], 
		SUM(CASE WHEN AGS = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_AGS],
		
		SUM(CASE WHEN WPR = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_WPR], 
		SUM(CASE WHEN WPR = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_WPR],
		
		SUM(CASE WHEN GWD = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_GWD], 
		SUM(CASE WHEN GWD = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_GWD]
	From Runs (NOLOCK) runs
	INNER JOIN Wells (NOLOCK) wells on wells.WellID = runs.WellID 
	INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
	where runs.IsDeleted = 0
	  AND wells.IsDeleted = 0
	  AND j.IsDeleted = 0
	  AND j.IsJAROnly = 0
	  AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	  AND runs.MDStart IS NOT NULL AND runs.IsDownHole = 1
	  AND r.Active=1 
	  AND d.Active = 1 
	  AND client.CustomerId IN(Select CustomerId from #tempCompany)
	Group BY r.Region
	UNION
	Select 
		'Global',
		SUM(CASE WHEN HEL_LWD = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_LWD], 
		SUM(CASE WHEN HEL_LWD = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_LWD],
		
		SUM(CASE WHEN EM = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_EM], 
		SUM(CASE WHEN EM = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_EM],
		
		SUM(CASE WHEN PP = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_HyperPulse], 
		SUM(CASE WHEN PP = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_HyperPulse],
		
		SUM(CASE WHEN RSS = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_RSS], 
		SUM(CASE WHEN RSS = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_RSS],
		
		SUM(CASE WHEN TENSOR = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_TENSOR], 
		SUM(CASE WHEN TENSOR = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_TENSOR],
		
		SUM(CASE WHEN GEOLINK = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_GEOLINK], 
		SUM(CASE WHEN GEOLINK = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_GEOLINK],
		
		SUM(CASE WHEN BECFIELD = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_BECFIELD], 
		SUM(CASE WHEN BECFIELD = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_BECFIELD],
		
		SUM(CASE WHEN MOTOR = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_MOTOR], 
		SUM(CASE WHEN MOTOR = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_MOTOR],
		
		SUM(CASE WHEN AGS = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_AGS], 
		SUM(CASE WHEN AGS = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_AGS],
		
		SUM(CASE WHEN WPR = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_WPR], 
		SUM(CASE WHEN WPR = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_WPR],
		
		SUM(CASE WHEN GWD = 1 THEN convert(float, runs.CircHrs, 0) ELSE 0 END) as [Circ_Hrs_GWD], 
		SUM(CASE WHEN GWD = 1 THEN CONVERT(int, runs.IsDownHole, 0) ELSE 0 END) as [DownHole_GWD]
	From Runs (NOLOCK) runs
	INNER JOIN Wells (NOLOCK) wells on wells.WellID = runs.WellID 
	INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
	INNER JOIN Customers (NOLOCK) client on client.CustomerId = j.CustomerId
	LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
	where runs.IsDeleted = 0
	  AND wells.IsDeleted = 0
	  AND j.IsDeleted = 0
	  AND j.IsJAROnly = 0
	  AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	  AND runs.MDStart IS NOT NULL AND runs.IsDownHole = 1
	  AND r.Active=1 
	  AND d.Active = 1 
	  AND client.CustomerId IN(Select CustomerId from #tempCompany)
		
		
	-- TOP 5 Crisis Jobs
	Select Region, [Job Number], [% Failed], DownHole AS Runs, Incidents AS I
	From (
		Select Region, [Job Number], DownHole, Incidents,
			Convert(float, Incidents, 0)/Runs As [% Failed], 
			Rank() over (Partition By Region Order By Convert(float, Incidents, 0)/Runs DESC) AS Rank
		From (
			Select r.Region, j.JobNumber as [Job Number]
				, count(1) as [Runs]
				, SUM(runs.IsDownHole) AS DownHole
				, (Select count(1) as [Incidents]
					From Incidents (NOLOCK) i
						INNER JOIN Runs (NOLOCK) runs2 on runs2.RunID = i.RunID
						INNER JOIN Wells (NOLOCK) wells2 on wells2.WellID=runs2.WellID 
						INNER JOIN Jobs (NOLOCK) j2 on j2.JobID = wells2.JobID
						LEFT JOIN BranchPlants (NOLOCK) d2 on d2.BranchPlant = j2.BranchPlant
						LEFT JOIN Countries (NOLOCK) c2 on c2.Country = j2.Country
						LEFT JOIN Regions (NOLOCK) r2 on r2.Region = j2.Region
						INNER JOIN Customers (NOLOCK) co2 on j2.CustomerId = co2.CustomerId
					Where i.IsDeleted = 0 and runs2.IsDeleted=0
						AND wells2.IsDeleted = 0
						AND j2.IsDeleted = 0
						AND runs2.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
						AND r2.Active = 1 
						AND d2.Active=1 
						AND j2.JobNumber = j.JobNumber
						AND r2.Region = r.Region
						AND co2.CustomerId IN(Select CustomerId from #tempCompany)
					) as [Incidents]
			From Runs (NOLOCK) runs 
				INNER JOIN Wells (NOLOCK) wells on wells.WellID=runs.WellID 
				INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
				LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
				LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
				LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
				INNER JOIN Customers (NOLOCK) co on j.CustomerId = co.CustomerId
			Where runs.IsDeleted=0
				AND wells.IsDeleted = 0
				AND j.IsDeleted = 0
				AND j.IsJAROnly = 0
				AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
				AND r.Active = 1 
				AND d.Active = 1
				AND co.CustomerId IN(Select CustomerId from #tempCompany)
			Group BY r.Region, j.JobNumber
		) as tmp
	) as tmp2
	where [RANK] <= 5
	union
	Select Region, [Job Number], [% Failed], DownHole AS DH, Incidents AS I
	From (
		Select Region, [Job Number], DownHole, Incidents,
			Convert(float, Incidents, 0)/Runs As [% Failed], 
			Rank() over (Partition By Region Order By Convert(float, Incidents, 0)/Runs DESC) AS Rank
		From (
			Select 'Global' as Region, j.JobNumber as [Job Number]
				, count(1) as [Runs]
				, SUM(runs.IsDownHole) AS DownHole
				, (Select count(1) as [Incidents]
					From Incidents (NOLOCK) i
						INNER JOIN Runs (NOLOCK) runs2 on runs2.RunID = i.RunID
						INNER JOIN Wells (NOLOCK) wells2 on wells2.WellID = runs2.WellID 
						INNER JOIN Jobs (NOLOCK) j2 on j2.JobID = wells2.JobID
						LEFT JOIN BranchPlants (NOLOCK) d2 on d2.BranchPlant = j2.BranchPlant
						LEFT JOIN Countries (NOLOCK) c2 on c2.Country = j2.Country
						LEFT JOIN Regions (NOLOCK) r2 on r2.Region = j2.Region
						INNER JOIN Customers (NOLOCK) co2 on j2.CustomerId = co2.CustomerId
					where i.IsDeleted = 0 AND runs2.IsDeleted = 0
						AND wells2.IsDeleted = 0
						AND j2.IsDeleted = 0
						AND runs2.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
						AND r2.Active = 1 
						AND d2.Active = 1 
						AND j2.JobNumber = j.JobNumber
						AND co2.CustomerId IN(Select CustomerId from #tempCompany)
					) as [Incidents]
			from Runs (NOLOCK) runs 
				INNER JOIN Wells (NOLOCK) wells on wells.WellID = runs.WellID 
				INNER JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
				LEFT JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
				LEFT JOIN Countries (NOLOCK) c on c.Country = j.Country
				LEFT JOIN Regions (NOLOCK) r on r.Region = j.Region
				INNER JOIN Customers (NOLOCK) co on j.CustomerId = co.CustomerId
			where runs.IsDeleted = 0
				AND wells.IsDeleted = 0
				AND j.IsDeleted = 0
				AND j.IsJAROnly = 0
				AND runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
				AND r.Active = 1 
				AND d.Active = 1 
				AND co.CustomerId IN(Select CustomerId from #tempCompany)
			group by r.Region, j.JobNumber
		) as tmp
	) as tmp2
	where [RANK] <= 5
	order by Region, [% Failed] desc, [Job Number]
	
DROP TABLE #tempCompany

SET NOCOUNT OFF





/****** Object:  StoredProcedure [dbo].[usp_ClosedWorkOrder]    Script Date: 08/05/2014 18:53:33 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_ClosedWorkOrder]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_ClosedWorkOrder]
	@AssetNum varchar(30),
	@WorkOrderId uniqueidentifier
AS
---------------------------Get Fixed Asset Data--------------------------------
DECLARE @FixedAssetsTemp TABLE 
   (ParentNumber varchar(10), AssetNumber varchar(10),directParent varchar(10),
   ParentFixedAssetId uniqueidentifier,
   FixedAssetId uniqueidentifier,
   InventoryItemNum varchar(8),
   RNItemNum varchar(30),
   SerialNum varchar(30),
    Revision varchar(2))

;WITH FixedAssetCTE( 
		ParentAssetNumber, AssetNumber,ParentNumber,
		ParentFixedAssetId,FixedAssetId,
		InventoryItemNum,RNItemNum,SerialNum,Revision
		)
		AS 
		( 
		SELECT  fa.ParentNumber as ParentAssetNumber, fa.AssetNumber,fa.ParentNumber,
				fa.FixedAssetId as ParentFixedAssetId,fa.FixedAssetId,
				fa.InventoryItemNum,fa.RNItemNum,fa.SerialNum,fa.Revision
		  FROM FixedAssets (NOLOCK) fa
		 WHERE fa.AssetNumber = @AssetNum
 
UNION ALL

SELECT			
		ct.ParentAssetNumber, pc.AssetNumber,pc.ParentNumber,
		ct.FixedAssetId as ParentFixedAssetId,pc.FixedAssetId,
		pc.InventoryItemNum,pc.RNItemNum,pc.SerialNum,pc.Revision
  FROM FixedAssets (NOLOCK) pc
  INNER JOIN FixedAssetCTE    ct
    ON pc.ParentNumber = ct.AssetNumber  AND pc.ParentNumber <> pc.AssetNumber
)

INSERT @FixedAssetsTemp
SELECT 
		ParentAssetNumber, AssetNumber,ParentNumber,
		ParentFixedAssetId,FixedAssetId,
		InventoryItemNum,RNItemNum,SerialNum,Revision
  FROM FixedAssetCTE order by ParentNumber
---------------------------End Fixed Asset Data--------------------------------

---------------------------Get Fixed Asset History Data--------------------------------

DECLARE @FixedAssetHistoryTemp TABLE 
   (
   ParentFixedAssetId uniqueidentifier,
   FixedAssetId uniqueidentifier,
   FixedAssetHistoryId uniqueidentifier
   )

;WITH FixedAssetHistoryCTE( 
			ParentFixedAssetId, FixedAssetId,FixedAssetHistoryId
		)
		AS 
		( 
		SELECT  ParentFixedAssetId, FixedAssetId,FixedAssetHistoryId
		  FROM FixedAssetHistory (NOLOCK) 
		 WHERE WorkOrderId = @WorkOrderId
 
UNION ALL

SELECT			
		pc.ParentFixedAssetId, pc.FixedAssetId,pc.FixedAssetHistoryId
  FROM FixedAssetHistory (NOLOCK) pc
  INNER JOIN FixedAssetHistoryCTE    ct
    ON pc.ParentFixedAssetId = ct.FixedAssetId  AND pc.ParentFixedAssetId <> pc.FixedAssetId
    where pc.WorkOrderId = @WorkOrderId
)
INSERT @FixedAssetHistoryTemp 
SELECT ParentFixedAssetId, FixedAssetId,FixedAssetHistoryId FROM FixedAssetHistoryCTE
 
---------------------------End Fixed Asset History Data--------------------------------
 
 /*
 For each Asset that was removed from the structure during the course of the work order – 
 the associated FixedAsset record should have its ParentNumber set to the AssetNumber of itself 
 (which means it was removed from the parent asset).
 */
 update fixedassets set ParentNumber = AssetNumber 
where FixedAssetId in (
 SELECT FixedAssetId FROM @FixedAssetsTemp where FixedAssetId not in 
(SELECT FixedAssetId FROM @FixedAssetHistoryTemp))
 
---------------------------------------------------------------------------------------------------------  

 /*
 For each Asset that was added to the structure during the course of the work order – 
 the associated FixedAsset record should have its ParentNumber set to the AssetNumber 
 of its parent in the Work Order (this does not necessarily mean 
 the root Asset of the Work Order ).
 */

UPDATE fixedassets
  SET ParentNumber = (Select AssetNumber from FixedAssets fa where  fa.FixedAssetId = t.ParentFixedAssetId)
FROM fixedassets f, @FixedAssetHistoryTemp t
WHERE f.FixedAssetId = t.FixedAssetId and f.AssetNumber <> @AssetNum

---------------------------------------------------------------------------




/****** Object:  StoredProcedure [dbo].[usp_CompleteWorkOrderMaterialRequest]    Script Date: 08/05/2014 18:55:39 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_CompleteWorkOrderMaterialRequest]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_CompleteWorkOrderMaterialRequest]
	@WorkOrderMaterialRequestId as uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	Declare @workOrderId as uniqueidentifier
	Set @workOrderId = (Select TOP 1 WorkOrderId from WorkOrderMaterialRequests (NOLOCK) Where WorkOrderMaterialRequestId = @WorkOrderMaterialRequestId)
	
	Update WorkOrderMaterialRequestItems
		Set 
			QtyOnBOM = c.Qty,
			ItemNumDesc = (Select TOP 1 i.DescShort from ItemNums i Where i.ItemNum = WorkOrderMaterialRequestItems.ItemNum),
			ParentItemNumDesc = (Select TOP 1 i2.DescShort from ItemNums i2 Where i2.ItemNum = WorkOrderMaterialRequestItems.ParentItemNum),
			UsedItemNum = (Select TOP 1 nui.UsedItemNum from NewUsedItemNums nui Where nui.KeyItemNum = WorkOrderMaterialRequestItems.ItemNum),
			--RNI = (CASE WHEN (Select TOP 1 RNItemNum from InventoryRNItemNums Where RNItemNum = WorkOrderMaterialRequestItems.ItemNum) IS NOT NULL THEN 'RN' ELSE 'I' END)
			RNI = CASE
						WHEN  c.itemnum in (SELECT itemnum FROM ItemNumReferences  WHERE reftype = 'R') THEN 'R'
						WHEN  c.itemnum in (SELECT itemnum FROM ItemNumReferences  WHERE reftype = 'U') THEN 'U'
						ELSE 'I' END
	From ItemNumConfigs c
	Where c.LineNum = WorkOrderMaterialRequestItems.LineNum 
	AND c.ItemNum = WorkOrderMaterialRequestItems.ItemNum 
	AND c.ParentItemNum = WorkOrderMaterialRequestItems.ParentItemNum 
	AND c.OptionText = WorkOrderMaterialRequestItems.OptionText
	AND ISNULL(c.IsToolString, 0) = 0
	AND WorkOrderMaterialRequestItems.WorkOrderMaterialRequestId = @WorkOrderMaterialRequestId
	
	--update cost/code
	Update mri
		Set
			mri.StdUnitCost = (Select top 1 ibp.StdUnitCost from ItemNumBranchPlants ibp Where ibp.BranchPlant = wo.BranchPlant AND ibp.ItemNum = mri.ItemNum),
			mri.CurrencyCode = (Select top 1 ibp.CurrShortName from ItemNumBranchPlants ibp Where ibp.BranchPlant = wo.BranchPlant AND ibp.ItemNum = mri.ItemNum),
			mri.CurrencyConversionFactor = dbo.fnGetUSDConversionFactor((Select top 1 ibp.CurrShortName from ItemNumBranchPlants ibp Where ibp.BranchPlant = wo.BranchPlant AND ibp.ItemNum = mri.ItemNum), NULL)
	From WorkOrderMaterialRequestItems mri
	INNER JOIN WorkOrderMaterialRequests mr ON mr.WorkOrderMaterialRequestId = mri.WorkOrderMaterialRequestId
	INNER JOIN WorkOrders wo ON wo.WorkOrderId = mr.WorkOrderId
	Where mri.WorkOrderMaterialRequestId = @WorkOrderMaterialRequestId
	
	--update Net Qty Removed
	Update WorkOrderMaterialRequestItems
		Set NetQtyRemoved = (v.QtyRemoved - v.QtyAdded)
	From vwWorkOrderPartTransferSummary v
	Where v.InventoryItemNum = WorkOrderMaterialRequestItems.ItemNum
	AND v.WorkOrderId = @workOrderId

END




/****** Object:  StoredProcedure [dbo].[usp_CreateAuditRMAnalysis]    Script Date: 08/05/2014 18:56:42 ******/
SET ANSI_NULLS ON



GO
/****** Object:  StoredProcedure [dbo].[usp_Core_ImportHistogram]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh
-- Create date: 10 Jun 2017
-- Description:	Import histogram xml data to database
-- =============================================
CREATE PROCEDURE [dbo].[usp_Core_ImportHistogram] 
	@HistogramXMLData XML,
	@CoreId VARCHAR(50),
	@UserName VARCHAR(50)
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
	
		BEGIN TRANSACTION HISTOGRAMIMPORT

		DECLARE @CBMHistogramRuns TABLE(CBMHistogramRunId uniqueidentifier)

		--print 'start'

		INSERT INTO @CBMHistogramRuns
		SELECT b.CBMHistogramRunId 
		FROM CBMHistogramRuns b
		JOIN @HistogramXMLData.nodes('CBMCore/CBMHistogramRuns') Hxml(x) ON Hxml.x.value('JobNumber[1]','varchar(100)') = b.JobNumber 
				AND Hxml.x.value('WellName[1]','varchar(100)') = b.WellName
				AND Hxml.x.value('RunNumber[1]','varchar(100)') = b.RunNumber
		OPTION (OPTIMIZE FOR ( @HistogramXMLData = NULL ))

		--print 'delete start'

		DELETE FROM dbo.CBMHistogramBins WHERE CBMHistogramRunId IN (SELECT CBMHistogramRunId FROM @CBMHistogramRuns)
		DELETE FROM dbo.CBMHistograms WHERE CBMHistogramRunId IN (SELECT CBMHistogramRunId FROM @CBMHistogramRuns)
		DELETE FROM CBMHistogramMonitorTools WHERE CBMHistogramRunId IN (SELECT CBMHistogramRunId FROM @CBMHistogramRuns)
		DELETE FROM CBMHistogramRunTools WHERE CBMHistogramRunId IN (SELECT CBMHistogramRunId FROM @CBMHistogramRuns)
		DELETE FROM CBMHistogramRuns WHERE CBMHistogramRunId IN (SELECT CBMHistogramRunId FROM @CBMHistogramRuns)

		--print 'insert CBMHistogramRuns start'

		INSERT INTO dbo.CBMHistogramRuns
		SELECT 
			Hxml.x.value('CBMHistogramRunId[1]','uniqueidentifier') AS CBMHistogramRunId,
			r.RunID,
			Hxml.x.value('JobNumber[1]','varchar(100)') AS JobNumber,
			Hxml.x.value('WellName[1]','varchar(100)') AS WellName,
			Hxml.x.value('RunNumber[1]','varchar(100)') AS RunNumber,
			Hxml.x.value('CreatedBy[1]','varchar(100)') AS CreatedBy,
			Hxml.x.value('SurveyDistGT60DQM[1]','bit') AS SurveyDistGT60DQM
		FROM @HistogramXMLData.nodes('CBMCore/CBMHistogramRuns') Hxml(x)
		LEFT JOIN Jobs (NOLOCK) j ON j.JobNumber = Hxml.x.value('JobNumber[1]','varchar(100)')
		LEFT JOIN Wells (NOLOCK) w ON w.JobID = j.JobId AND w.Well = Hxml.x.value('WellName[1]','varchar(100)')
		LEFT JOIN Runs (NOLOCK) r ON r.WellID = w.WellID AND r.RunNumber = Hxml.x.value('RunNumber[1]','varchar(100)')
		OPTION (OPTIMIZE FOR ( @HistogramXMLData = NULL ))

		--print 'insert CBMHistogramRunTools start'

		INSERT INTO dbo.CBMHistogramRunTools
		SELECT 
			Hxml.x.value('CBMHistogramRunId[1]','uniqueidentifier') AS CBMHistogramRunId,
			Hxml.x.value('Name[1]','varchar(100)') AS Name,
			Hxml.x.value('SerialNumber[1]','varchar(100)') AS SerialNumber,
			Hxml.x.value('PartTypeId[1]','int') AS PartTypeId,
			Hxml.x.value('Units[1]','varchar(100)') AS Units,
			Hxml.x.value('SensorDistance[1]','decimal(10,2)') AS SensorDistance
		FROM @HistogramXMLData.nodes('CBMCore/CBMHistogramRunTools') Hxml(x)
		OPTION (OPTIMIZE FOR ( @HistogramXMLData = NULL ))

		--print 'insert CBMHistogramMonitorTools start'

		INSERT INTO dbo.CBMHistogramMonitorTools
		SELECT 
			Hxml.x.value('CBMMonitorToolId[1]','uniqueidentifier') AS CBMMonitorToolId,
			Hxml.x.value('CBMHistogramRunId[1]','uniqueidentifier') AS CBMHistogramRunId,
			Hxml.x.value('MonitorName[1]','varchar(100)') AS MonitorName,
			Hxml.x.value('ToolMnem[1]','varchar(100)') AS ToolMnem 
		FROM @HistogramXMLData.nodes('CBMCore/CBMMonitorTool') Hxml(x)
		OPTION (OPTIMIZE FOR ( @HistogramXMLData = NULL ))

		--print 'insert CBMHistograms start'

		INSERT INTO dbo.CBMHistograms
		SELECT 
			Hxml.x.value('CBMHistogramId[1]','uniqueidentifier') AS CBMHistogramId,
			Hxml.x.value('CBMMonitorToolId[1]','uniqueidentifier') AS CBMMonitorToolId,
			Hxml.x.value('CBMHistogramRunId[1]','uniqueidentifier') AS CBMHistogramRunId,
			Hxml.x.value('Recorded[1]','bit') AS Recorded,
			Hxml.x.value('MetricName[1]','varchar(100)') AS MetricName,
			Hxml.x.value('CurveName[1]','varchar(100)') AS CurveName, 
			Hxml.x.value('BinUnits[1]','varchar(100)') AS BinUnits,
			Hxml.x.value('HistogramUnits[1]','varchar(100)') AS HistogramUnits
		FROM @HistogramXMLData.nodes('CBMCore/CBMHistogram') Hxml(x)
		OPTION (OPTIMIZE FOR ( @HistogramXMLData = NULL ))

		--print 'insert CBMHistogramBins start'

		INSERT INTO dbo.CBMHistogramBins
		SELECT 
			Hxml.x.value('CBMHistogramBinId[1]','uniqueidentifier') AS CBMHistogramBinId,
			Hxml.x.value('CBMHistogramId[1]','uniqueidentifier') AS CBMHistogramId,
			Hxml.x.value('CBMHistogramRunId[1]','uniqueidentifier') AS CBMHistogramRunId,
			ROUND(Hxml.x.value('Start[1]','varchar(100)'), 2) AS Start,
			ROUND(Hxml.x.value('End[1]','varchar(100)'), 2) AS [End],
			ROUND(Hxml.x.value('Value[1]','varchar(100)'), 2) AS [Value]
		FROM @HistogramXMLData.nodes('CBMCore/CBMHistogramBin') Hxml(x)
		OPTION (OPTIMIZE FOR ( @HistogramXMLData = NULL ))

		--print 'insert complete'

		COMMIT TRANSACTION HISTOGRAMIMPORT
	END TRY
BEGIN CATCH 
  IF (@@TRANCOUNT > 0)
   BEGIN
      ROLLBACK TRANSACTION HISTOGRAMIMPORT  
   END 

	DECLARE @ErrorMessage nvarchar(max), @ErrorSeverity int, @ErrorState int;
    SELECT @ErrorMessage = ERROR_MESSAGE() + ' Line ' + cast(ERROR_LINE() as nvarchar(5)), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[usp_CoreFile_Save]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 5/25/2016
-- Description:	Save Core XML file in database
-- =============================================
CREATE PROCEDURE [dbo].[usp_CoreFile_Save] 
	-- Add the parameters for the stored procedure here
	@FileName varchar(100),
	@InputXML xml, 
	@WftUserName varchar(25),
	@IgnoreValidation bit = false,
	@Type int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @CoreId UNIQUEIDENTIFIER = NEWID()

    -- Insert statements for procedure here
	INSERT INTO [dbo].[CoreFiles]
           ([CoreId]
		   ,[FileName]
           ,[InputXML]
		   ,[IgnoreValidation]
           ,[Status]
		   ,[CreatedBy]
           ,[CreatedOn]
		   ,[Type])
     VALUES
           (@CoreId
		   ,@FileName 
           ,@InputXML
		   ,@IgnoreValidation
           ,0
		   ,@WftUserName
           ,GETDATE()
		   ,@Type)

	SELECT @CoreId [CoreId]

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CoreFile_Update]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--===================================================
--CREATED BY : Yogesh Mane
--CREATED ON : 15 June 2016
--DESCRIPTION: To update errors and status for core xml file
--===================================================
CREATE PROC [dbo].[usp_CoreFile_Update]
	@CoreId UNIQUEIDENTIFIER,
	@Messages XML,
	@Version varchar(25),
	@Status bit,
	@BaseXML XML = null,
	@CoreType INT = NULL
As
BEGIN
	UPDATE  [CoreFiles]
	SET		[Messages] =  @Messages,
			[Version] = @Version,
			[Status] = @Status,
			[BaseXML] = @BaseXML,
			[Type] = ISNULL(@CoreType,Type)
	WHERE	[CoreId] = @CoreId
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CPAR_GetIncidentIdsForJob]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-------------------------------------------------------------------------------------------------------------  
--   Purpose  : Get Incident ids for job number to create CPAR to WPTP.  
--  
--   Modified :   
--    [Sachin Mhalungekar] - 12/06/2017 - Created  
-------------------------------------------------------------------------------------------------------------  
CREATE PROCEDURE [dbo].[usp_CPAR_GetIncidentIdsForJob]  
(  
	@jobNumber  VARCHAR(50)  
)  
AS  
BEGIN  
  
 SET NOCOUNT ON  
   
 BEGIN  
    
  SELECT DISTINCT  
    CONVERT(NVARCHAR(50),I.IncidentID) As IncidentID
   FROM  Incidents I   
   INNER JOIN Runs R on I.RunID = R.RunID  
   INNER JOIN Wells W on W.WellID = R.WellID  
   INNER JOIN Jobs J on J.JobID = W.JobID  
   LEFT JOIN ToolStringComponentInfo TSC on TSC.RunID = I.RunID and I.IncidentID = TSC.IncidentID  
  WHERE JobNumber = @jobNumber AND i.FailureDate > '2018-01-22' AND i.CPARID IS NULL;  
 END  
   
   
 SET NOCOUNT OFF  
  
 RETURN 0          -- (success code)   
END

GO
/****** Object:  StoredProcedure [dbo].[usp_CreateAuditRMAnalysis]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_CreateAuditRMAnalysis] (
	@sIncidentID as uniqueidentifier,
	@sToolStringID as uniqueidentifier,
	@sFixedAssetID as uniqueidentifier,
	@iFieldID as int,
	@sFieldValue as varchar(50),
	@iUserID as int,
	@iActionType as tinyint,
	@iPartTypeId as int = NULL,
	@sSerialNum as varchar(30) = NULL) 

AS
SET NOCOUNT ON

DECLARE @sOrigFieldValue as varchar(50)
SET @sOrigFieldValue = (Select Top 1 FieldValue 
						From AuditRMAnalysis 
						Where IncidentID = @sIncidentID And ToolStringID = @sToolStringID 
						And FieldID = @iFieldID 
						And (
							FixedAssetID = @sFixedAssetID
							Or (PartTypeId = @iPartTypeId And SerialNum = @sSerialNum)
							)
						Order By ActionDate Desc)

IF (@sOrigFieldValue IS NULL)
BEGIN
	SET @sOrigFieldValue = ''
END

IF (@sFieldValue <> @sOrigFieldValue)
BEGIN
	INSERT INTO AuditRMAnalysis (AuditRMAnalysisID, IncidentID, ToolStringID, FixedAssetID, FieldID, FieldValue, UserID, ActionDate, ActionTypeID, PartTypeId, SerialNum)
	VALUES (newid(), @sIncidentID, @sToolStringID, @sFixedAssetID, @iFieldID, @sFieldValue, @iUserID, GetDate(), @iActionType, @iPartTypeId, @sSerialNum)
	
	If (@iFieldID = 9)	-- activate wpts job for changed value, CSI
	Begin
		Declare @jobNumber as varchar(50)
		Set @jobNumber = (select jobnumber from jobs j
								join Wells w on w.JobID = j.JobId and w.IsDeleted = 0
								join Runs r on r.WellID = w.WellID and r.IsDeleted = 0
								join Incidents i on i.RunID = r.RunID and i.IsDeleted = 0
								where j.IsDeleted = 0
								and i.IncidentID = @sIncidentID)
		
		INSERT INTO JobQueue (JobId, CreateDate, RequestXml, JobQueueStatusId)
		VALUES (29, getdate(), '<ReliabilityWPTSJob><jobNumber>' + @jobNumber + '</jobNumber></ReliabilityWPTSJob>', 1)
	End
END

SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[usp_CreateAuditRMAnalysisRptLevel]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_CreateAuditRMAnalysisRptLevel] (
	@sIncidentID as uniqueidentifier,
	@iFieldID as int,
	@sFieldValue as varchar(50),
	@iUserID as int,
	@iActionType as tinyint) 

AS
SET NOCOUNT ON

DECLARE @sOrigFieldValue as varchar(50)
SET @sOrigFieldValue = (Select Top 1 FieldValue From AuditRMAnalysis Where IncidentID = @sIncidentID And FieldID = @iFieldID Order By ActionDate Desc)

IF (@sOrigFieldValue IS NULL)
BEGIN
	SET @sOrigFieldValue = ''
END

IF (@sFieldValue <> @sOrigFieldValue)
BEGIN
	INSERT INTO AuditRMAnalysis (AuditRMAnalysisID, IncidentID, ToolStringID, FixedAssetID, FieldID, FieldValue, UserID, ActionDate, ActionTypeID)
	VALUES (newid(), @sIncidentID, NULL, NULL, @iFieldID, @sFieldValue, @iUserID, GetDate(), @iActionType)
	
	If (@iFieldID = 36)	--activate wpts job for changed value, WFT NPT
	Begin
		Declare @jobNumber as varchar(50)
		Set @jobNumber = (select jobnumber from jobs j
								join Wells w on w.JobID = j.JobId and w.IsDeleted = 0
								join Runs r on r.WellID = w.WellID and r.IsDeleted = 0
								join Incidents i on i.RunID = r.RunID and i.IsDeleted = 0
								where j.IsDeleted = 0
								and i.IncidentID = @sIncidentID)
		
		INSERT INTO JobQueue (JobId, CreateDate, RequestXml, JobQueueStatusId)
		VALUES (29, getdate(), '<ReliabilityWPTSJob><jobNumber>' + @jobNumber + '</jobNumber></ReliabilityWPTSJob>', 1)
	End
END

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_CreateCompPropertyValue]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_CreateCompPropertyValue] (
	@sToolStringID uniqueidentifier,
	@sToolStringFixedAssetsId uniqueidentifier,
	@sFixedAssetID uniqueidentifier,
	@sPartTypePropID uniqueidentifier,
	@sProperty varchar(30),
	@sPropertyValue varchar(250))
AS
BEGIN
SET NOCOUNT ON

DECLARE @sComponentPropertyID uniqueidentifier
SET @sComponentPropertyID = newid()

INSERT INTO ComponentProperties (ComponentPropertyID, FixedAssetID, PartTypePropertyID, [Property], PropertyValue, ToolStringID, ToolStringFixedAssetsId)
VALUES (@sComponentPropertyID, @sFixedAssetID, @sPartTypePropID, @sProperty, @sPropertyValue, @sToolStringID, @sToolStringFixedAssetsId)

SELECT @sComponentPropertyID

SET NOCOUNT OFF
END

GO
/****** Object:  StoredProcedure [dbo].[usp_CreateDummyIncident]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_CreateDummyIncident](
	@jobnumber varchar(50),
	@runnumber varchar(50)
)
AS
BEGIN
SET NOCOUNT ON

DECLARE @runid uniqueidentifier

SET @runid = (SELECT RunID
FROM Jobs j 
JOIN Wells w ON w.JobID = j.JobID AND w.IsDeleted = 0
JOIN Runs r ON w.WellID = r.WellID AND r.IsDeleted = 0
WHERE j.IsDeleted = 0
AND j.JobNumber = @jobnumber
AND r.RunNumber = @runnumber)

DECLARE @incidentid uniqueidentifier
SET @incidentid = (select IncidentID from Incidents where RunID = @runid)

If (@incidentid is null)
Begin
	SET @incidentid = newid()
	INSERT INTO Incidents (IncidentID, RunID, IncidentNumber, CreateDate, FailureDate, IsDownhole, IsOpen, IsDeleted)
	VALUES (@incidentid, @runid, 'FR-' + @runnumber, GetDate(), '2013-10-02 00:00:00.000',1,1,0)
End

UPDATE ToolStringComponentInfo
SET IncidentID = @incidentid
WHERE RunID = @runid

UPDATE ToolStringComponentInfo
SET TFF = 1, CSI = 1, FailureDesc = 'No Pulse'
WHERE PartTypeId = 6
AND IncidentId = @incidentid

SET NOCOUNT OFF
END

GO
/****** Object:  StoredProcedure [dbo].[usp_CreateGFAComponents]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_CreateGFAComponents] (
	@sGFAID as uniqueidentifier,
	@sToolStringID as uniqueidentifier,
	@sFixedAssetID as uniqueidentifier)
AS
BEGIN
SET NOCOUNT ON;

DECLARE @sGFAComponentID As uniqueidentifier
SET @sGFAComponentID = newid()

DECLARE @iPartTypeID As int
SET @iPartTypeID = (Select Top 1 PartTypeID From ToolStringComponentInfo (NOLOCK) Where ToolStringID = @sToolStringID And FixedAssetID = @sFixedAssetID)

INSERT INTO GFAComponents (GFAComponentID, GFAID, ToolStringID, FixedAssetID, PartTypeID) 
VALUES (
	@sGFAComponentID,
	@sGFAID,
	@sToolStringID,
	@sFixedAssetID,
	@iPartTypeID
)

SELECT @sGFAComponentID
SET NOCOUNT OFF;
END




/****** Object:  StoredProcedure [dbo].[usp_CreateIncidentFaultCode]    Script Date: 08/05/2014 19:01:36 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_CreateGFAIncident]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_CreateGFAIncident] (
	@sJarDailyID as uniqueidentifier,
	@sJobID as uniqueidentifier,
	@sRunNumber as varchar(50),
	@sGFANumber as varchar(50),
	@sDisposition as varchar(20),
	@sFailureTime as varchar(30),
	@sEmployeeID as varchar(100),
	@sProductLine as varchar(50),
	@iTFF as tinyint,
	@iCI as tinyint,
	@iNCI as tinyint,
	@sMudType as varchar(50),
	@sCircHrs as varchar(25),
	@fRunCircHrs as float,
	@fTotalCircHrs as float,
	@fNPT as float,
	@iIs3030 as bit,
	@sVibrationLevel as bit,
	@sCoordContacted as bit,
	@sGlobalContacted as bit,
	@sAcceptedFieldFailure as varchar(200),
	@sFailureDesc as varchar(5000),
	@sPossibleCauses as varchar(5000),
	@sSummary as varchar(5000),
	@iUserID as int,
	@sServiceLine as varchar(10),
	@sIncidentID as uniqueidentifier,
	@sIncidentNumber as varchar(50))
AS
BEGIN
SET NOCOUNT ON;

DECLARE @sGFAID As uniqueidentifier
SET @sGFAID = newid()

DECLARE @sFailureDate As datetime

IF (@sServiceLine = 'SLS')
BEGIN
	SET @sFailureDate = (Select ReportDate From JarDailiesSLS Where JarDailyID = @sJarDailyID)
END
ELSE
BEGIN
	SET @sFailureDate = (Select ReportDate From JarDailies Where JarDailyID = @sJarDailyID)
END

INSERT INTO GFAIncidents(GFAID, JarDailyID, JobID, RunNumber, GFANumber, Disposition, CreateDate, FailureDate, FailureTime, EmployeeID, ProductLine, TFF, CI, NCI, 
							MudType, CircHrs, RunCircHrs, TotalCircHrs, NPT, Is3030, VibrationLevel, CoordContacted, GlobalContacted, AcceptedFieldFailure, FailureDesc, PossibleCauses, 
							Summary, SaveDate, SaveUserID, ServiceLine, IncidentID, IncidentNumber, EmailSent)
VALUES (
	@sGFAID,
	@sJarDailyID,
	@sJobID,
	@sRunNumber,
	@sGFANumber,
	@sDisposition,
	GetDate(),
	@sFailureDate,
	@sFailureTime,
	@sEmployeeID,
	@sProductLine,
	@iTFF,
	@iCI,
	@iNCI,
	@sMudType,
	@sCircHrs,
	@fRunCircHrs,
	@fTotalCircHrs,
	@fNPT,
	@iIs3030,
	@sVibrationLevel,
	@sCoordContacted,
	@sGlobalContacted,
	@sAcceptedFieldFailure,
	@sFailureDesc,
	@sPossibleCauses,
	@sSummary,
	GetDate(),
	@iUserID,
	@sServiceLine,
	@sIncidentID,
	@sIncidentNumber,
	0
)

DECLARE @iGFA AS INT
SET @iGFA = (Select Count(i.GFANumber) From GFAIncidents i Where i.IsDeleted = 0 And ServiceLine = @sServiceLine And i.JarDailyID = @sJarDailyID)

IF (@sServiceLine = 'SLS')
BEGIN
	UPDATE JarDailiesSLS
	SET GFA = @iGFA
	WHERE JarDailyID = @sJarDailyID
END
ELSE
BEGIN
	UPDATE JarDailies
	SET GFA = @iGFA
	WHERE JarDailyID = @sJarDailyID
END

SELECT @sGFAID
SET NOCOUNT OFF;
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CreateIncidentFaultCode]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_CreateIncidentFaultCode] (
	@sIncidentId as uniqueidentifier,
	@sLevelOneId as uniqueidentifier,
	@sLevelTwoId as uniqueidentifier,
	@sLevelThreeId as uniqueidentifier
)
AS
BEGIN
SET NOCOUNT ON

DECLARE @sTapRootId As uniqueidentifier
SET @sTapRootId = (SELECT TapRootId FROM FaultCodes (NOLOCK) WHERE FaultCodeId = @sLevelThreeId)

INSERT INTO IncidentFaultCodes (IncidentId, LevelOneId, LevelTwoId, LevelThreeId, TapRootId)
VALUES (@sIncidentId, @sLevelOneId, @sLevelTwoId, @sLevelThreeId, @sTapRootId)

--***the following is commented out because the UI deletes the record so no comparison can be made
--DECLARE @iCurrFC as uniqueidentifier
--SET @iCurrFC = (Select LevelThreeId From IncidentFaultCodes Where IncidentId = @sIncidentId)

--If (@iCurrFC <> @sLevelThreeId)
--BEGIN
	Exec usp_CreateAuditRMAnalysis @sIncidentID,NULL,NULL,33,@sLevelThreeId,NULL,1
--END

SET NOCOUNT OFF
END





/****** Object:  StoredProcedure [dbo].[usp_CreateJobPersonnel]    Script Date: 08/05/2014 19:03:18 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_CreateItemNumConfigHistory]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_CreateItemNumConfigHistory]
	@ParentItemNum as varchar(100)
AS
BEGIN
	SET NOCOUNT ON;
	
	IF(ISNULL(@ParentItemNum, '') <> '')
	BEGIN
		-- CREATE HISTIRY
		INSERT INTO ItemNumConfigHistory(
			BranchPlant ,LineNum, ItemNum, ParentItemNum, OptionText
           ,ECNNumber, LastDateModified, LastUserModified, LastModifiedUserName, Qty, Reference
           ,EffectiveFromDate, EffectiveThruDate, ItemLevel, IsMandatoryReplacement, IsRequired
           ,DateAdded, UserIdAdded, AddedByUserName, HistoryDateAdded)
        Select 
			c.BranchPlant, c.LineNum, c.ItemNum, c.ParentItemNum, c.OptionText
           ,c.ECNNumber, c.LastDateModified, c.LastUserModified, u.UserName, c.Qty, c.Reference
           ,c.EffectiveFromDate, c.EffectiveThruDate, c.ItemLevel, c.IsMandatoryReplacement, c.IsRequired
           ,c.DateAdded, c.UserIdAdded, ua.UserName, GETDATE()
        from ItemNumConfigs c (NOLOCK)
        LEFT JOIN users u (NOLOCK) on u.UserId = c.LastUserModified
        LEFT JOIN users ua (NOLOCK) on ua.UserId = c.UserIdAdded
        Where ParentItemNum = @ParentItemNum AND ISNULL(IsToolString, 0) = 0
        ORDER by LineNum
        
        --DELETE RECORDS
        Delete from ItemNumConfigs Where ParentItemNum = @ParentItemNum AND ISNULL(IsToolString, 0) = 0
	END
    
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CreateJob]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_CreateJob]
	@sBranchPlant as varchar(12)
	, @sCustomerId as uniqueidentifier
	, @sJobNumber as varchar(50)
	, @dtStart as datetime
	, @dtEnd as datetime
	, @dtEst as datetime
	, @dtSpud as datetime
	, @sLocationCountry as varchar(50)
	, @sLocationState as varchar(50)
	, @sLocationCounty as varchar(50)
	, @sRigType as varchar(50)
	, @sRig as varchar(50)
	, @sOffShore as varchar(3)
	, @sCoordinator as varchar(100)
	, @sWellPlanRevision varchar(10)
	, @iIsDS as bit
	, @sIsJAROnly as bit
	, @sJarWell as varchar(50)
	, @sJarRun as varchar(50)
	, @sJarRevStatus as varchar(50)
	, @iUserID as int
AS
BEGIN

SET NOCOUNT ON;

Declare @sJobID uniqueidentifier
set @sJobID = newid()

Declare @sRegion varchar(3)
Set @sRegion = (Select Region From Districts Where District = @sBranchPlant)

Declare @sCountry varchar(3)
Set @sCountry = (Select top 1 Country From Districts Where District = @sBranchPlant)

INSERT INTO Jobs (
	JobID
	, Region
	, Country
	, BranchPlant
	, CustomerId
	, JobNumber
	, StartDate
	, EndDate
	, EstDays
	, SpudDate
	, LocationCountry
	, LocationState
	, LocationCounty
	, RigType
	, Rig
	, OffShore
	, Coordinator
	, WellPlanRevision
	, IsDS
	, IsJarOnly
	, JarWell
	, JarRunNumber
	, JarRevStatus
	, CreateDate
	, CreateUserID
)
VALUES (
    @sJobID
	, @sRegion
	, @sCountry
	, @sBranchPlant
	, @sCustomerId
	, @sJobNumber
	, @dtStart
	, @dtEnd
	, @dtEst
	, @dtSpud
	, @sLocationCountry
	, @sLocationState
	, @sLocationCounty
	, @sRigType
	, @sRig
	, @sOffShore
	, @sCoordinator
	, @sWellPlanRevision
	, @iIsDS
	, @sIsJAROnly
	, @sJarWell
	, @sJarRun
	, @sJarRevStatus
	, GetDate()
	, @iUserID
)
SELECT @sJobID
SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CreateJobAudit]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_CreateJobAudit] (
	@sJobID as varchar(38),
	@sCoreImportID as varchar(38),
	@sCommentType as varchar(20),
	@sComment as varchar(2000),
	@sCode as varchar(4),
	@iUserID as int)
AS
BEGIN
	INSERT INTO JobAudit(JobAuditID, JobID, CoreImportID, CommentType, Comment, Code, CreateUserID, CreateDate)
	VALUES 
	(
		newid(), @sJobID, @sCoreImportID, @sCommentType, @sComment, @sCode, @iUserID, GetDate()
	)

	IF (@sCode = '1.10' OR @sCode = '1.11' OR @sCode = '1.12')
	BEGIN
		DELETE FROM JobAudit WHERE Code = '3.2' AND JobID = @sJobID

		UPDATE Jobs SET ImportStatus = 0 WHERE JobID = @sJobID
	END
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CreateJobHeaderBySalesforce]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--==============================================================
--CREATED BY  : YOGESH MANE
--CREATED ON  : 25th April 2016
--DESCCRIPTION: To create job header from sales force rest services
--==================================================================
CREATE PROCEDURE [dbo].[usp_CreateJobHeaderBySalesforce]
	@Jobs XML
AS
BEGIN

SET NOCOUNT ON;
	
--VARIABLE DECLARATION	
DECLARE @SFDCJobId VARCHAR(20),
		@BranchPlant VARCHAR(12),
		@CustomerNumber INT,
		@JobNumber VARCHAR(50),
		@StartDate VARCHAR(50),
		@EndDate VARCHAR(50),
		@JobLocation VARCHAR(50),
		@Rig VARCHAR(50),
		@Offshore BIT,
		@Coordinator varchar(100),
		@Longitude FLOAT,
		@Latitude FLOAT,
		@DispatchNumber INT,
		@Runs INT,
		@WFTUserName VARCHAR(20),
		@SFCreateDate VARCHAR(50),
		@SFLastUpdatedOnDate VARCHAR(50),
		@RevenueStatus VARCHAR(100)
		
DECLARE @CustomerId UNIQUEIDENTIFIER, @JobId UNIQUEIDENTIFIER, @UserId INT, @Country VARCHAR(25), @Region VARCHAR(25)

-- DECLARE RESULT TABLES
DECLARE @JobHeaderResult Table
(
	SFDCJobId VARCHAR(20),
	JobId UNIQUEIDENTIFIER,
	JobNumber VARCHAR(50)
)

DECLARE @JobHeaderErrors Table
(
	JobNumber VARCHAR(50),
	Error VARCHAR(100)
)


-- STRART VALIDATION AND SAVING PROCESS

DECLARE CUR CURSOR LOCAL FAST_FORWARD FOR
SELECT 
	Child.value('(SFDC_JobId)[1]', 'VARCHAR(20)'),
    Child.value('(BranchPlant)[1]', 'VARCHAR(12)'),
	Child.value('(CustomerNumber)[1]', 'INT'),
	Child.value('(JobNumber)[1]', 'VARCHAR(50)'),
	Child.value('(StartDate)[1]', 'VARCHAR(50)'),
	Child.value('(EndDate)[1]', 'VARCHAR(50)'),
	Child.value('(JobLocation)[1]', 'VARCHAR(50)'),
	Child.value('(Rig)[1]', 'VARCHAR(50)'),
	Child.value('(Offshore)[1]', 'BIT'),
	Child.value('(Coordinator)[1]', 'VARCHAR(100)'),
	Child.value('(Longitude)[1]', 'FLOAT'),
	Child.value('(Latitude)[1]', 'FLOAT'),
	Child.value('(DispatchNumber)[1]', 'INT'),
	Child.value('(Runs)[1]', 'INT'),
	Child.value('(WFTUserName)[1]', 'VARCHAR(20)'),
	Child.value('(createdDate)[1]', 'VARCHAR(50)'),
	Child.value('(lastmodifiedDate)[1]', 'VARCHAR(50)'),
	Child.value('(RevenueStatus)[1]', 'VARCHAR(100)')
FROM
    @jobs.nodes('/ArrayOfJobHeader/JobHeader') AS N(Child)

OPEN CUR
WHILE 1 = 1
BEGIN
    FETCH CUR INTO @SFDCJobId
		,@BranchPlant
		,@CustomerNumber
		,@JobNumber
		,@StartDate
		,@EndDate
		,@JobLocation
		,@Rig
		,@Offshore 
		,@Coordinator
		,@Longitude
		,@Latitude
		,@DispatchNumber
		,@Runs
		,@WFTUserName
		,@SFCreateDate
		,@SFLastUpdatedOnDate
		,@RevenueStatus
    if @@fetch_status <> 0 break

    -- Get MyAdvisor specific Customer Id and User id
    SELECT @CustomerId = CustomerId FROM Customers WHERE CustomerNumber = @CustomerNumber
    SELECT @UserId = 0

	SET @JobId = NULL


    -- Invalid Customer save error in table
    IF (@CustomerId IS NULL)
    BEGIN
		INSERT INTO @JobHeaderErrors SELECT @JobNumber, 'Customer ['+ CONVERT(varchar(MAX), @CustomerNumber) +'] not found'
    END
    
    -- Invalid branch plant save error in table
    IF NOT EXISTS (SELECT 1 FROM BranchPlants WHERE BranchPlant = @BranchPlant)
    BEGIN
		INSERT INTO @JobHeaderErrors SELECT @JobNumber, 'BranchPlant ['+ @BranchPlant + '] not found'
    END
    ELSE
	BEGIN
		SELECT @Country = Country,
				@Region = Region
		FROM BranchPlants 
		WHERE BranchPlant = @BranchPlant
	END
	-- If Job start date not sent
	IF @StartDate IS NULL
    BEGIN
		INSERT INTO @JobHeaderErrors SELECT @JobNumber, 'Job start date is required'
    END 

	-- If end date not sent
	IF @EndDate IS NULL
	BEGIN
		INSERT INTO @JobHeaderErrors SELECT @JobNumber, 'Job end date is required'
	END 

	-- If dispatch number is already in use
	IF EXISTS (SELECT * FROM Jobs WHERE DispatchNumber = @DispatchNumber AND JobNumber <> @JobNumber AND @DispatchNumber <> 0)
	BEGIN
		INSERT INTO @JobHeaderErrors SELECT @JobNumber, 'Dispatch number [' + CONVERT(VARCHAR(20), @DispatchNumber) + '] already in use.'
	END

	-- IF there are no errors save/update job in db
    IF NOT EXISTS (SELECT 1 FROM @JobHeaderErrors Where JobNumber = @JobNumber)
    BEGIN
	   
    SELECT @JobId = JobId from Jobs where JobNumber = @JobNumber
	
	-- Update record if job already created
		
		IF (@JobId IS NOT NULL)
			BEGIN

			-- For existing jobs check dispatch number already exists
			IF @DispatchNumber = 0
				BEGIN
					SET @DispatchNumber = ISNULL((SELECT top 1 DispatchNumber FROM Dispatches (NOLOCK) WHERE JobId = @JobId), 0)
				END

				 UPDATE Jobs
				 SET BranchPlant= @BranchPlant,
					CustomerId = @CustomerId,
					StartDate = @StartDate,
					EndDate = @EndDate,
					LocationCounty = @JobLocation,
					Rig = @Rig,
					Offshore = @Offshore,
					Coordinator = @Coordinator,
					Longitude = @Longitude,
					Latitude = @Latitude,
					DispatchNumber = @DispatchNumber,
					Runs = @Runs,
					UpdateUserID = @UserId,
					SalesforceId = @SFDCJobId, 
					WFTUserName = @WFTUserName,
					UpdateDate = GETDATE(),
					Country = @Country,
					Region = @Region,
					SFCreatedDate = @SFCreateDate,
					SFLastModifiedDate = @SFLastUpdatedOnDate,
					RevenueStatus = @RevenueStatus
				 WHERE	JobNumber = @JobNumber

				 If (@DispatchNumber <> 0)
				 BEGIN
					Update Dispatches  SET JobId = @JobId Where DispatchNumber = @DispatchNumber and JobId is null
				 END

				 --call audit sp
				EXEC [dbo].[usp_AuditJobs] 6004, @UserId,'create job header through salesforce','', @JobId

			END
		ELSE 
		-- insert record if job not present
			BEGIN
			
			SET @JobId = NEWID()

				INSERT INTO Jobs
				(JobId
				, SalesforceId
				, BranchPlant
				, Country
				, Region
				, CustomerId
				, JobNumber 
				, StartDate
				, EndDate
				, LocationCounty
				, Rig
				, Offshore
				, Coordinator
				, Longitude
				, Latitude
				, DispatchNumber
				, Runs
				, WFTUserName
				, CreateUserID
				, CreateDate
				, SFCreatedDate
				, SFLastModifiedDate
				, RevenueStatus)
				
				SELECT @JobId,
					@SFDCJobId,
					@BranchPlant, 
					@Country,
					@Region,
					@CustomerId, 
					@JobNumber, 
					@StartDate, 
					@EndDate, 
					@JobLocation, 
					@Rig, 
					@Offshore, 
					@Coordinator, 
					@Longitude, 
					@Latitude, 
					@DispatchNumber, 
					@Runs, 
					@WFTUserName,
					@UserId, 
					GETDATE(),
					@SFCreateDate,
					@SFLastUpdatedOnDate,
					@RevenueStatus

					--call audit sp
					EXEC [dbo].[usp_AuditJobs] 6003, @UserId,'update job through salesforce','', @JobId
		END

		-- Update Dispatches table
		IF ISNULL(@DispatchNumber,0) <> 0
			UPDATE Dispatches SET JobId = @JobId Where DispatchNumber = @DispatchNumber

		INSERT INTO JobQueue(JobId, CreateDate, RequestXml, JobQueueStatusId)
		VALUES(29, GETDATE(), '<ReliabilityWPTSJob><jobNumber>'+@JobNumber+'</jobNumber></ReliabilityWPTSJob>', 1)
    END
		
	INSERT INTO @JobHeaderResult(SFDCJobId, JobId, JobNumber)
	SELECT @SFDCJobId, @JobId, @JobNumber


END
CLOSE CUR
DEALLOCATE CUR

SELECT * FROM @JobHeaderResult

SELECT * FROM @JobHeaderErrors

SET NOCOUNT OFF;
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CreateJobPersonnel]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_CreateJobPersonnel] (
	@sJobID as uniqueidentifier,
	@sLastName as varchar(50),
	@sFirstName as varchar(50),
	@sEmployeeId as varchar(15),
	@sTitle as varchar(15),
	@sProductLine as varchar(15),
	@sShift as varchar(15),
	@iIsLead as bit,
	@sCompany as varchar(50),
	@dArriveDate as datetime,
	@dDepartDate as datetime,
	@sPhoneNumber as varchar(15),
	@sVehicleUnitId as varchar(30),
	@sVehiclePlateNumber as varchar(30))
AS
BEGIN
SET NOCOUNT ON;

DECLARE @sJobPersonnelID As uniqueidentifier
DECLARE @sID As varchar(38)

SET @sJobPersonnelID = newid()
SELECT @sID = ID FROM Employees (NOLOCK) WHERE EmployeeID = @sEmployeeId

IF (@sID IS NOT NULL)
BEGIN
	UPDATE Employees
	SET FirstName = @sFirstName
		, LastName = @sLastName
		, Title = @sTitle
	WHERE EmployeeID = @sEmployeeId
END
ELSE
BEGIN
	INSERT INTO Employees (EmployeeID, FirstName, LastName, Title)
	VALUES (@sEmployeeId, @sFirstName, @sLastName, @sTitle)
END

INSERT INTO JobPersonnel(JobPersonnelID,JobID,EmployeeId,ProductLine,Shift,IsLead,Company,
							ArriveDate, DepartDate,PhoneNumber,VehicleUnitId,VehiclePlateNumber)
VALUES (
	@sJobPersonnelID,
	@sJobID,
	@sEmployeeId,
	@sProductLine,
	@sShift,
	@iIsLead,
	@sCompany,
	@dArriveDate,
	@dDepartDate,
	@sPhoneNumber,
	@sVehicleUnitId,
	@sVehiclePlateNumber
)
SELECT @sJobPersonnelID
SET NOCOUNT OFF;
END




/****** Object:  StoredProcedure [dbo].[usp_CreateRelHomeMaxValues]    Script Date: 08/05/2014 19:53:11 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_CreatePartType]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_CreatePartType] (
	@sPartTypeName as varchar(100),
	@sShortName as varchar(2),
	@sDescription as varchar(250),
	@sAccountable as varchar(10),
	@iOccurrence as int,
	@iIsPrimary as bit,
	@iHEL_LWD as bit,
	@iHEL_EM as bit,
	@iRSS as bit,
	@iEM as bit,
	@iEM_TWINWELLS as bit,
	@iHYPERPULSE as bit,
	@iBECFIELD as bit,
	@iGWD as bit,
	@iGEOLINK as bit,
	@iTENSOR as bit,
	@iWPR as bit,
	@iAGS as bit,
	@iDMT_AMS as bit,
	@iMOTOR as bit,
	@iSURFACE as bit)
AS
BEGIN
SET NOCOUNT ON

INSERT INTO PartTypes ([Name],ShortName,[Description],Accountable,Occurrence,[Primary],HEL_LWD,HEL_EM,RSS,EM,EM_TWINWELLS,HYPERPULSE,BECFIELD,GWD,GEOLINK,TENSOR,WPR,AGS,DMT_AMS,MOTOR,SURFACE)
VALUES (
	@sPartTypeName,
	@sShortName,
	@sDescription,
	@sAccountable,
	@iOccurrence,
	@iIsPrimary,
	@iHEL_LWD,
	@iHEL_EM,
	@iRSS,
	@iEM,
	@iEM_TWINWELLS,
	@iHYPERPULSE,
	@iBECFIELD,
	@iGWD,
	@iGEOLINK,
	@iTENSOR,
	@iWPR,
	@iAGS,
	@iDMT_AMS,
	@iMOTOR,
	@iSURFACE
)
SELECT SCOPE_IDENTITY()
SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CreateRelAttachment]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_CreateRelAttachment] (
	@sRunID as varchar(38),
	@sIncidentID as varchar(38),
	@sGFAID as uniqueidentifier,
	@sFileType as varchar(100),
	@sFilePath as varchar(255),
	@sFileSize as varchar(30),
	@sComments as varchar(1000),
	@sImageIcon as varchar(20),
	@iLegacy as tinyint
) AS
SET NOCOUNT ON

DECLARE @attachmentId As uniqueidentifier
IF (@sIncidentID IS NOT NULL)
BEGIN
SET @attachmentId = (Select AttachmentID From Attachments 
						Where FilePath = @sFilePath
						And IncidentID = @sIncidentID)
END
ELSE
BEGIN
	SET @attachmentId = (Select AttachmentID From Attachments 
						Where FilePath = @sFilePath
						And RunID = @sRunID)
END

IF (@attachmentId IS NULL)
BEGIN
	INSERT INTO Attachments(AttachmentID, RunID, IncidentID, GFAID, FileType, FilePath, FileSize, Comments, ImageIcon, Legacy)
	VALUES (newid(), @sRunID, @sIncidentID, @sGFAID, @sFileType, @sFilePath, @sFileSize, @sComments, @sImageIcon, @iLegacy)
END
ELSE
BEGIN
	UPDATE Attachments
	SET FileSize = @sFileSize
	, Comments = @sComments
	, CreateDate = GETDATE()
	WHERE AttachmentID = @attachmentId
END

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_CreateRelHomeGlobalTotals]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_CreateRelHomeGlobalTotals]
AS

SET NOCOUNT ON

TRUNCATE TABLE RelHomeGlobalTotals

INSERT INTO RelHomeGlobalTotals(RelHomeGlobalTotalID,RunType,TotalOperHrs,TotalCircHrs,RunCnt,CI,TFF,TotalFootage)
SELECT 
	newid(), RunType, Sum(TotalOperHrs) as TotalOperHrs, Sum(TotalCircHrs) as TotalCircHrs, Sum(NumberOfRuns) as RunCnt, 
	Sum(CI) as CI, Sum(TFF) as TFF, Sum(MDDistance) as TotalFootage
FROM RelHomeMTBF
GROUP BY RunType

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_CreateRelHomeMaxValues]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_CreateRelHomeMaxValues](
	@sRunType as varchar(10)
)

AS
SET NOCOUNT ON

DECLARE @sRunTypeWhere as varchar(10)

SET @sRunTypeWhere = Replace(@sRunType,'/','_')

CREATE TABLE #TMP (
	RunType varchar(10),
	MaxType varchar(20),
	RunID uniqueidentifier NULL,
	MaxValue varchar(30) NULL)

exec('INSERT INTO #TMP SELECT top 1' +
' ''' + @sRunType + ''' As RunType,' +
' ''Temp'' As MaxType,' +
' r.RunID,' +
' dbo.TempConvert(md.BoreHoleTempMax, BoreHoleTempUnits, ''°F'') AS MaxTemp' +
' FROM MudData (NOLOCK) md' +
' LEFT JOIN Runs (NOLOCK) r ON r.RunID = md.RunID AND r.IsDeleted = 0' +
' LEFT JOIN Wells (NOLOCK) w ON w.WellID = r.WellID AND w.IsDeleted = 0' +
' LEFT JOIN Jobs (NOLOCK) j ON j.JobID = w.JobID AND j.IsDeleted = 0' +
' WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + ''/1/'' + Cast(Year(GetDate()) as varchar(4))' +
' AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + ''/1/'' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4))' +
' AND r.' + @sRunTypeWhere + ' = 1' +
' ORDER BY MaxTemp Desc')

exec('INSERT INTO #TMP SELECT top 1' +
' ''' + @sRunType + ''' As RunType,' +
' ''OperPressure'' As MaxType,' +
' r.RunID,' +
' dbo.PressureConvert(h.MaxOperPressure, h.MaxOperPressureUOM, ''psi'') AS MaxOperPressure' +
' From Hydraulics (NOLOCK) h' +
' LEFT JOIN Runs (NOLOCK) r ON r.RunID = h.RunID AND r.IsDeleted = 0' +
' LEFT JOIN Wells (NOLOCK) w ON w.WellID = r.WellID AND w.IsDeleted = 0' +
' LEFT JOIN Jobs (NOLOCK) j ON j.JobID = w.JobID AND j.IsDeleted = 0' +
' WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + ''/1/'' + Cast(Year(GetDate()) as varchar(4))' +
' AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + ''/1/'' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4))' +
' AND r.' + @sRunTypeWhere + ' = 1' +
' ORDER BY MaxOperPressure Desc')

exec('INSERT INTO #TMP SELECT top 1' +
' ''' + @sRunType + ''' As RunType,' +
' ''ObservedPressure'' As MaxType,' +
' r.RunID,' +
' dbo.PressureConvert(h.MaxObservedPressure, h.MaxObservedPressureUOM, ''psi'') AS MaxObservedPressure' +
' From Hydraulics (NOLOCK) h' +
' LEFT JOIN Runs (NOLOCK) r ON r.RunID = h.RunID AND r.IsDeleted = 0' +
' LEFT JOIN Wells (NOLOCK) w ON w.WellID = r.WellID AND w.IsDeleted = 0' +
' LEFT JOIN Jobs (NOLOCK) j ON j.JobID = w.JobID AND j.IsDeleted = 0' +
' WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + ''/1/'' + Cast(Year(GetDate()) as varchar(4))' +
' AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + ''/1/'' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4))' +
' AND r.' + @sRunTypeWhere + ' = 1' +
' ORDER BY MaxObservedPressure Desc')

exec('INSERT INTO #TMP SELECT top 1' +
' ''' + @sRunType + ''' As RunType,' +
' ''DogLeg'' As MaxType,' +
' r.RunID,' +
' dbo.DogLegConvert(mod.MaxDogleg,mod.MaxDoglegUOM,''deg/100 ft'') As MaxDogleg' +
' From MotorData (NOLOCK) mod' +
' LEFT JOIN Runs (NOLOCK) r ON r.RunID = mod.RunID AND r.IsDeleted = 0' +
' LEFT JOIN Wells (NOLOCK) w ON w.WellID = r.WellID AND w.IsDeleted = 0' +
' LEFT JOIN Jobs (NOLOCK) j ON j.JobID = w.JobID AND j.IsDeleted = 0' +
' Where r.EndDate < Cast(Month(GetDate()) as varchar(2)) + ''/1/'' + Cast(Year(GetDate()) as varchar(4))' +
' AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + ''/1/'' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4))' +
' AND r.' + @sRunTypeWhere + ' = 1' +
' ORDER BY MaxDogleg Desc')

exec('INSERT INTO #TMP SELECT top 1' +
' ''' + @sRunType + ''' As RunType,' +
' ''OperHrs'' As MaxType,' +
' r.RunID,' +
' dbo.NumCheck(OperHrs) AS OperHrs' +
' FROM Runs (NOLOCK) r' +
' LEFT JOIN Wells (NOLOCK) w ON w.WellID = r.WellID AND w.IsDeleted = 0' +
' LEFT JOIN Jobs (NOLOCK) j ON j.JobID = w.JobID AND j.IsDeleted = 0' +
' WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + ''/1/'' + Cast(Year(GetDate()) as varchar(4))' +
' AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + ''/1/'' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4))' +
' AND r.IsDeleted = 0' +
' AND r.' + @sRunTypeWhere + ' = 1' +
' ORDER BY OperHrs Desc')

exec('INSERT INTO #TMP SELECT top 1' +
' ''' + @sRunType + ''' As RunType,' +
' ''MaxInc'' As MaxType,' +
' r.RunID,' +
' dbo.NumCheck(sd.MaxInc) AS MaxInc' +
' From SurveyData (NOLOCK) sd' +
' LEFT JOIN Runs (NOLOCK) r ON r.RunID = sd.RunID AND r.IsDeleted = 0' +
' LEFT JOIN Wells (NOLOCK) w ON w.WellID = r.WellID AND w.IsDeleted = 0' +
' LEFT JOIN Jobs (NOLOCK) j ON j.JobID = w.JobID AND j.IsDeleted = 0' +
' WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + ''/1/'' + Cast(Year(GetDate()) as varchar(4))' +
' AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + ''/1/'' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4))' +
' AND r.' + @sRunTypeWhere + ' = 1' +
' ORDER BY sd.MaxInc Desc')

exec('INSERT INTO #TMP SELECT top 1' +
' ''' + @sRunType + ''' As RunType,' +
' ''Distance'' As MaxType,' +
' r.RunID,' +
' CASE MDStartUOM' +
' WHEN ''ft'' THEN dbo.NumCheck(MDEnd) - dbo.NumCheck(MDStart)' +
' ELSE dbo.LengthConvert(MDEnd, MDStartUOM, ''ft'') - dbo.LengthConvert(MDStart, MDStartUOM, ''ft'')' +
' END AS Distance' +
' FROM Runs (NOLOCK) r' +
' LEFT JOIN Wells (NOLOCK) w ON w.WellID = r.WellID AND w.IsDeleted = 0' +
' LEFT JOIN Jobs (NOLOCK) j ON j.JobID = w.JobID AND j.IsDeleted = 0' +
' WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + ''/1/'' + Cast(Year(GetDate()) as varchar(4))' +
' AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + ''/1/'' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4))' +
' AND r.IsDeleted = 0' +
' AND r.' + @sRunTypeWhere + ' = 1' +
' ORDER BY Distance Desc')

INSERT INTO RelHomeMaxValues(RelHomeMaxValueID,RunType,MaxTempID,MaxTemp,MaxOperPressureID,MaxOperPressure,MaxObservedPressureID,
				MaxObservedPressure,MaxDogLegID,MaxDogLeg,MaxOperHrsID,MaxOperHrs,MaxIncID,
				MaxInc,MaxDistanceID,MaxDistance,LastUpdate)
SELECT 
	newid() as RelHomeMaxValueID
	, (Select @sRunType) as RunType
	, (Select RunID From #TMP Where MaxType = 'Temp') as MaxTempID
	, (Select MaxValue From #TMP Where MaxType = 'Temp') as MaxTemp
	, (Select RunID From #TMP Where MaxType = 'OperPressure') as MaxOperPressureID
	, (Select MaxValue From #TMP Where MaxType = 'OperPressure') as MaxOperPressure
	, (Select RunID From #TMP Where MaxType = 'ObservedPressure') as MaxObservedPressureID
	, (Select MaxValue From #TMP Where MaxType = 'ObservedPressure') as MaxObservedPressure
	, (Select RunID From #TMP Where MaxType = 'DogLeg') as MaxDoglegID
	, (Select MaxValue From #TMP Where MaxType = 'DogLeg') as MaxDogleg
	, (Select RunID From #TMP Where MaxType = 'OperHrs') as MaxOperHrsID
	, (Select MaxValue From #TMP Where MaxType = 'OperHrs') as MaxOperHrs
	, (Select RunID From #TMP Where MaxType = 'MaxInc') as MaxIncID
	, (Select MaxValue From #TMP Where MaxType = 'MaxInc') as MaxInc
	, (Select RunID From #TMP Where MaxType = 'Distance') as MaxDistanceID
	, (Select MaxValue From #TMP Where MaxType = 'Distance') as MaxDistance
	, GETDATE()

DROP TABLE #TMP

SET NOCOUNT OFF




/****** Object:  StoredProcedure [dbo].[usp_CreateRelHomeMTBF]    Script Date: 08/05/2014 19:57:59 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_CreateRelHomeMTBF]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_CreateRelHomeMTBF](
	@iPeriod tinyint,
	@iMovingAvgPeriod tinyint
)
AS

SET NOCOUNT ON

TRUNCATE TABLE RelHomeMTBF

DECLARE @iTotalMonths as smallint
SET @iTotalMonths = (@iPeriod + (@iMovingAvgPeriod - 1)) * -1

SELECT 
	RunYear, RunMonth, JobNumber, Well, RunNumber, OutHoleDate
	, OperHrs, CircHrs, DrillHrs, MDStart, MDEnd, (MDEnd - MDStart) As MDDistance
	--, dbo.fnRunTypes(RunID) As ToolTypes
	, Max(TFF) As TFF, Max(CSI) As CSI
	, Max(HEL_LWD) As HEL_LWD, Max(HEL_EM) As HEL_EM, Max(EM) As EM, Max(PP) As PP, Max(RSS) As RSS
	, Max(TENSOR) As TENSOR, Max(GEOLINK) As GEOLINK, Max(BECFIELD) As BECFIELD
	, Max(GWD) As GWD, Max(MOTOR) As MOTOR, Max(WPR) As WPR
	, Max(HEL_LWD_TFF) As HEL_LWD_TFF, Max(HEL_EM_TFF) As HEL_EM_TFF, Max(EM_TFF) As EM_TFF
	, Max(PP_TFF) As PP_TFF, Max(RSS_TFF) As RSS_TFF, Max(TENSOR_TFF) As TENSOR_TFF
	, Max(GEOLINK_TFF) As GEOLINK_TFF, Max(BECFIELD_TFF) As BECFIELD_TFF
	, Max(GWD_TFF) As GWD_TFF
	, Max(WPR_TFF) As WPR_TFF
	, Max(MOTOR_TFF) As MOTOR_TFF
INTO #RUNSGROUP
FROM (SELECT 
		Year(R.EndDate) As RunYear,
		Month(R.EndDate) As RunMonth,
		J.JobNumber, 
		W.Well, 
		R.RunID,
		R.RunNumber, 
		R.EndDate AS OutHoleDate, 
		dbo.NumCheck(R.OperHrs) As OperHrs, 
		dbo.NumCheck(R.CircHrs) As CircHrs, 
		dbo.NumCheck(R.DrillHrs) As DrillHrs, 
		dbo.LengthConvert(MDStart,MDStartUOM,'ft') As MDStart,
		dbo.LengthConvert(MDEnd,MDEndUOM,'ft') As MDEnd,
		t.[Type] As ToolType,
		dbo.NumCheck(tsci.TFF) as TFF,
		dbo.NumCheck(tsci.CSI) as CSI,
		tsci.OS,	
		Case When tsci.TFF = 1 And (tsci.OS = 0 or (tsci.OS = 1 And tsci.PR = 1)) And t.[Type] = 'HEL/LWD' Then 1 Else 0 End As HEL_LWD_TFF,
		Case When tsci.TFF = 1 And (tsci.OS = 0 or (tsci.OS = 1 And tsci.PR = 1)) And t.[Type] = 'HEL/EM' Then 1 Else 0 End As HEL_EM_TFF,
		Case When tsci.TFF = 1 And (tsci.OS = 0 or (tsci.OS = 1 And tsci.PR = 1)) And t.[Type] = 'EM' Then 1 Else 0 End As EM_TFF,
		Case When tsci.TFF = 1 And (tsci.OS = 0 or (tsci.OS = 1 And tsci.PR = 1)) And t.[Type] = 'HYPERPULSE' Then 1 Else 0 End As PP_TFF,
		Case When tsci.TFF = 1 And (tsci.OS = 0 or (tsci.OS = 1 And tsci.PR = 1)) And t.[Type] = 'RSS' Then 1 Else 0 End As RSS_TFF,
		Case When tsci.TFF = 1 And (tsci.OS = 0 or (tsci.OS = 1 And tsci.PR = 1)) And t.[Type] = 'TENSOR' Then 1 Else 0 End As TENSOR_TFF,
		Case When tsci.TFF = 1 And (tsci.OS = 0 or (tsci.OS = 1 And tsci.PR = 1)) And t.[Type] = 'GEOLINK' Then 1 Else 0 End As GEOLINK_TFF,
		Case When tsci.TFF = 1 And (tsci.OS = 0 or (tsci.OS = 1 And tsci.PR = 1)) And t.[Type] = 'BECFIELD' Then 1 Else 0 End As BECFIELD_TFF,
		Case When tsci.TFF = 1 And (tsci.OS = 0 or (tsci.OS = 1 And tsci.PR = 1)) And t.[Type] = 'GWD' Then 1 Else 0 End As GWD_TFF,
		Case When tsci.TFF = 1 And (tsci.OS = 0 or (tsci.OS = 1 And tsci.PR = 1)) And t.[Type] = 'WPR' Then 1 Else 0 End As WPR_TFF,
		Case When tsci.TFF = 1 And (tsci.OS = 0 or (tsci.OS = 1 And tsci.PR = 1)) And t.[Type] = 'MOTOR' Then 1 Else 0 End As MOTOR_TFF,
		Case When t.[Type] = 'HEL/LWD' Then 1 Else 0 End As HEL_LWD, 
		Case When t.[Type] = 'HEL/EM' Then 1 Else 0 End As HEL_EM,
		Case When t.[Type] = 'EM' Then 1 Else 0 End As EM,
		Case When t.[Type] = 'HYPERPULSE' Then 1 Else 0 End As PP,
		Case When t.[Type] = 'RSS' Then 1 Else 0 End As RSS,
		Case When t.[Type] = 'TENSOR' Then 1 Else 0 End As TENSOR,
		Case When t.[Type] = 'GEOLINK' Then 1 Else 0 End As GEOLINK,
		Case When t.[Type] = 'BECFIELD' Then 1 Else 0 End As BECFIELD,
		Case When t.[Type] = 'GWD' Then 1 Else 0 End As GWD,
		Case When t.[Type] = 'WPR' Then 1 Else 0 End As WPR,
		Case When t.[Type] = 'MOTOR' Then 1 Else 0 End As MOTOR
	FROM Jobs (NOLOCK) J 
	LEFT JOIN Wells (NOLOCK) W ON J.JobID = W.JobID AND W.IsDeleted = 0
	LEFT JOIN Runs (NOLOCK) R ON W.WellID = R.WellID AND R.IsDeleted = 0 AND R.IsDownHole = 1 
	AND R.EndDate >= Cast(Month(DateAdd(m, @iTotalMonths, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, @iTotalMonths, GetDate())) as varchar(4)) 
	AND R.EndDate < Cast(Month(GetDate()) as varchar(2)) + '/1/' + Cast(Year(GetDate()) as varchar(4))
	LEFT JOIN Incidents (NOLOCK) I ON R.RunID = I.RunID AND I.IsDeleted = 0 AND I.IsDownHole = 1 
	LEFT JOIN ToolStringComponentInfo (NOLOCK) TSCI ON R.RunID = TSCI.RunID 
	LEFT JOIN ToolStrings (NOLOCK) t ON t.ToolStringID = TSCI.ToolStringID
	WHERE J.IsDeleted = 0
	AND RunNumber IS NOT NULL) As ALLRUNS
GROUP BY RunYear, RunMonth, JobNumber, Well, RunID, RunNumber, OutHoleDate, OperHrs, CircHrs, DrillHrs, MDStart, MDEnd


--================================================================
--HEL/LWD MTBF
--================================================================
INSERT INTO RelHomeMTBF (RelHomeMTBFID, RunType, RunDate, RunYear, RunMonth, NumberOfRuns, MDDistance, TotalOperHrs, TotalCircHrs, TotalDrillHrs, TFF, MTBF_OperHrs, MTBF_CircHrs, MTBF_DrillHrs)
SELECT 
	NEWID(),
	'HEL/LWD' As RunType,
	Cast(RunMonth as varchar(2)) + '/1/' + Cast(RunYear as varchar(4)) As RunDate,
	RunYear,
	RunMonth,
	COUNT(RunNumber) AS NumberOfRuns, 
	Round(SUM(MDDistance),0) MDDistance, 
	Round(SUM(OperHrs),0) AS TotalOperHrs, 
	Round(SUM(CircHrs),0) AS TotalCircHrs, 
	Round(SUM(DrillHrs),0) AS TotalDrillHrs, 
	Round(SUM(HEL_LWD_TFF),0) AS TFF, 
	CASE SUM(HEL_LWD_TFF) WHEN 0 THEN Round(SUM(OperHrs) / 1,0) ELSE Round(SUM(OperHrs) / SUM(HEL_LWD_TFF),0) END AS MTBF_OPER_HRS, 
	CASE SUM(HEL_LWD_TFF) WHEN 0 THEN Round(SUM(CircHrs) / 1,0) ELSE Round(SUM(CircHrs) / SUM(HEL_LWD_TFF),0) END AS MTBF_CIRC_HRS,
	CASE SUM(HEL_LWD_TFF) WHEN 0 THEN Round(SUM(DrillHrs) / 1,0) ELSE Round(SUM(DrillHrs) / SUM(HEL_LWD_TFF),0) END AS MTBF_DRILL_HRS  
FROM #RUNSGROUP
WHERE HEL_LWD = 1
GROUP BY RunYear, RunMonth

--Calculate Moving Average
UPDATE a 
SET	
	MovingAvg_OperHrs = (Select Sum(b.MTBF_OperHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'HEL/LWD' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_CircHrs = (Select Sum(b.MTBF_CircHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'HEL/LWD' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_DrillHrs = (Select Sum(b.MTBF_DrillHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'HEL/LWD' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate)
FROM RelHomeMTBF a
WHERE a.RunType = 'HEL/LWD'
AND a.RunDate >= Cast(Month(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(4)) 

--================================================================
--HEL/EM MTBF
--================================================================
INSERT INTO RelHomeMTBF (RelHomeMTBFID, RunType, RunDate, RunYear, RunMonth, NumberOfRuns, MDDistance, TotalOperHrs, TotalCircHrs, TotalDrillHrs, TFF, MTBF_OperHrs, MTBF_CircHrs, MTBF_DrillHrs)
SELECT 
	NEWID(),
	'HEL/EM' As RunType,
	Cast(RunMonth as varchar(2)) + '/1/' + Cast(RunYear as varchar(4)) As RunDate,
	RunYear,
	RunMonth,
	COUNT(RunNumber) AS NumberOfRuns, 
	Round(SUM(MDDistance),0) MDDistance, 
	Round(SUM(OperHrs),0) AS TotalOperHrs, 
	Round(SUM(CircHrs),0) AS TotalCircHrs, 
	Round(SUM(DrillHrs),0) AS TotalDrillHrs,  
	Round(SUM(HEL_EM_TFF),0) AS TFF, 
	CASE SUM(HEL_EM_TFF) WHEN 0 THEN Round(SUM(OperHrs) / 1,0) ELSE Round(SUM(OperHrs) / SUM(HEL_EM_TFF),0) END AS MTBF_OPER_HRS, 
	CASE SUM(HEL_EM_TFF) WHEN 0 THEN Round(SUM(CircHrs) / 1,0) ELSE Round(SUM(CircHrs) / SUM(HEL_EM_TFF),0) END AS MTBF_CIRC_HRS,
	CASE SUM(HEL_EM_TFF) WHEN 0 THEN Round(SUM(DrillHrs) / 1,0) ELSE Round(SUM(DrillHrs) / SUM(HEL_EM_TFF),0) END AS MTBF_DRILL_HRS  
FROM #RUNSGROUP
WHERE HEL_EM = 1
GROUP BY RunYear, RunMonth

--Calculate Moving Average
UPDATE a 
SET	
	MovingAvg_OperHrs = (Select Sum(b.MTBF_OperHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'HEL/EM' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_CircHrs = (Select Sum(b.MTBF_CircHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'HEL/EM' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_DrillHrs = (Select Sum(b.MTBF_DrillHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'HEL/EM' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate)
FROM RelHomeMTBF a
WHERE a.RunType = 'HEL/EM'
AND a.RunDate >= Cast(Month(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(4)) 

--================================================================
--RSS MTBF
--================================================================
INSERT INTO RelHomeMTBF (RelHomeMTBFID, RunType, RunDate, RunYear, RunMonth, NumberOfRuns, MDDistance, TotalOperHrs, TotalCircHrs, TotalDrillHrs, TFF, MTBF_OperHrs, MTBF_CircHrs, MTBF_DrillHrs)
SELECT 
	NEWID(),
	'RSS' As RunType,
	Cast(RunMonth as varchar(2)) + '/1/' + Cast(RunYear as varchar(4)) As RunDate,
	RunYear,
	RunMonth,
	COUNT(RunNumber) AS NumberOfRuns, 
	Round(SUM(MDDistance),0) MDDistance, 
	Round(SUM(OperHrs),0) AS TotalOperHrs, 
	Round(SUM(CircHrs),0) AS TotalCircHrs, 
	Round(SUM(DrillHrs),0) AS TotalDrillHrs,  
	Round(SUM(RSS_TFF),0) AS TFF, 
	CASE SUM(RSS_TFF) WHEN 0 THEN Round(SUM(OperHrs) / 1,0) ELSE Round(SUM(OperHrs) / SUM(RSS_TFF),0) END AS MTBF_OPER_HRS, 
	CASE SUM(RSS_TFF) WHEN 0 THEN Round(SUM(CircHrs) / 1,0) ELSE Round(SUM(CircHrs) / SUM(RSS_TFF),0) END AS MTBF_CIRC_HRS,
	CASE SUM(RSS_TFF) WHEN 0 THEN Round(SUM(DrillHrs) / 1,0) ELSE Round(SUM(DrillHrs) / SUM(RSS_TFF),0) END AS MTBF_DRILL_HRS  
FROM #RUNSGROUP
WHERE RSS = 1
GROUP BY RunYear, RunMonth

--Calculate Moving Average
UPDATE a 
SET	
	MovingAvg_OperHrs = (Select Sum(b.MTBF_OperHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'RSS' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_CircHrs = (Select Sum(b.MTBF_CircHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'RSS' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_DrillHrs = (Select Sum(b.MTBF_DrillHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'RSS' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate)
FROM RelHomeMTBF a
WHERE a.RunType = 'RSS'
AND a.RunDate >= Cast(Month(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(4)) 

--================================================================
--EM MTBF
--================================================================
INSERT INTO RelHomeMTBF (RelHomeMTBFID, RunType, RunDate, RunYear, RunMonth, NumberOfRuns, MDDistance, TotalOperHrs, TotalCircHrs, TotalDrillHrs, TFF, MTBF_OperHrs, MTBF_CircHrs, MTBF_DrillHrs)
SELECT 
	NEWID(),
	'EM' As RunType,
	Cast(RunMonth as varchar(2)) + '/1/' + Cast(RunYear as varchar(4)) As RunDate,
	RunYear,
	RunMonth,
	COUNT(RunNumber) AS NumberOfRuns, 
	Round(SUM(MDDistance),0) MDDistance, 
	Round(SUM(OperHrs),0) AS TotalOperHrs, 
	Round(SUM(CircHrs),0) AS TotalCircHrs, 
	Round(SUM(DrillHrs),0) AS TotalDrillHrs,  
	Round(SUM(TFF),0) AS TFF, 
	CASE SUM(EM_TFF) WHEN 0 THEN Round(SUM(OperHrs) / 1,0) ELSE Round(SUM(OperHrs) / SUM(EM_TFF),0) END AS MTBF_OPER_HRS, 
	CASE SUM(EM_TFF) WHEN 0 THEN Round(SUM(CircHrs) / 1,0) ELSE Round(SUM(CircHrs) / SUM(EM_TFF),0) END AS MTBF_CIRC_HRS,
	CASE SUM(EM_TFF) WHEN 0 THEN Round(SUM(DrillHrs) / 1,0) ELSE Round(SUM(DrillHrs) / SUM(EM_TFF),0) END AS MTBF_DRILL_HRS  
FROM #RUNSGROUP
WHERE EM = 1
GROUP BY RunYear, RunMonth

--Calculate Moving Average
UPDATE a 
SET	
	MovingAvg_OperHrs = (Select Sum(b.MTBF_OperHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'EM' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_CircHrs = (Select Sum(b.MTBF_CircHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'EM' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_DrillHrs = (Select Sum(b.MTBF_DrillHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'EM' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate)
FROM RelHomeMTBF a
WHERE a.RunType = 'EM'
AND a.RunDate >= Cast(Month(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(4)) 

--================================================================
--PP MTBF
--================================================================
INSERT INTO RelHomeMTBF (RelHomeMTBFID, RunType, RunDate, RunYear, RunMonth, NumberOfRuns, MDDistance, TotalOperHrs, TotalCircHrs, TotalDrillHrs, TFF, MTBF_OperHrs, MTBF_CircHrs, MTBF_DrillHrs)
SELECT 
	NEWID(),
	'HYPERPULSE' As RunType,
	Cast(RunMonth as varchar(2)) + '/1/' + Cast(RunYear as varchar(4)) As RunDate,
	RunYear,
	RunMonth,
	COUNT(RunNumber) AS NumberOfRuns, 
	Round(SUM(MDDistance),0) MDDistance, 
	Round(SUM(OperHrs),0) AS TotalOperHrs, 
	Round(SUM(CircHrs),0) AS TotalCircHrs, 
	Round(SUM(DrillHrs),0) AS TotalDrillHrs,  
	Round(SUM(PP_TFF),0) AS TFF, 
	CASE SUM(PP_TFF) WHEN 0 THEN Round(SUM(OperHrs) / 1,0) ELSE Round(SUM(OperHrs) / SUM(PP_TFF),0) END AS MTBF_OPER_HRS, 
	CASE SUM(PP_TFF) WHEN 0 THEN Round(SUM(CircHrs) / 1,0) ELSE Round(SUM(CircHrs) / SUM(PP_TFF),0) END AS MTBF_CIRC_HRS,
	CASE SUM(PP_TFF) WHEN 0 THEN Round(SUM(DrillHrs) / 1,0) ELSE Round(SUM(DrillHrs) / SUM(PP_TFF),0) END AS MTBF_DRILL_HRS  
FROM #RUNSGROUP
WHERE PP = 1
GROUP BY RunYear, RunMonth

--Calculate Moving Average
UPDATE a 
SET	
	MovingAvg_OperHrs = (Select Sum(b.MTBF_OperHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'HYPERPULSE' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_CircHrs = (Select Sum(b.MTBF_CircHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'HYPERPULSE' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_DrillHrs = (Select Sum(b.MTBF_DrillHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'HYPERPULSE' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate)
FROM RelHomeMTBF a
WHERE a.RunType = 'HYPERPULSE'
AND a.RunDate >= Cast(Month(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(4)) 

--================================================================
--TENSOR MTBF
--================================================================
INSERT INTO RelHomeMTBF (RelHomeMTBFID, RunType, RunDate, RunYear, RunMonth, NumberOfRuns, MDDistance, TotalOperHrs, TotalCircHrs, TotalDrillHrs, TFF, MTBF_OperHrs, MTBF_CircHrs, MTBF_DrillHrs)
SELECT 
	NEWID(),
	'TENSOR' As RunType,
	Cast(RunMonth as varchar(2)) + '/1/' + Cast(RunYear as varchar(4)) As RunDate,
	RunYear,
	RunMonth,
	COUNT(RunNumber) AS NumberOfRuns, 
	Round(SUM(MDDistance),0) MDDistance, 
	Round(SUM(OperHrs),0) AS TotalOperHrs, 
	Round(SUM(CircHrs),0) AS TotalCircHrs, 
	Round(SUM(DrillHrs),0) AS TotalDrillHrs,  
	Round(SUM(TENSOR_TFF),0) AS TFF, 
	CASE SUM(TENSOR_TFF) WHEN 0 THEN Round(SUM(OperHrs) / 1,0) ELSE Round(SUM(OperHrs) / SUM(TENSOR_TFF),0) END AS MTBF_OPER_HRS, 
	CASE SUM(TENSOR_TFF) WHEN 0 THEN Round(SUM(CircHrs) / 1,0) ELSE Round(SUM(CircHrs) / SUM(TENSOR_TFF),0) END AS MTBF_CIRC_HRS,
	CASE SUM(TENSOR_TFF) WHEN 0 THEN Round(SUM(DrillHrs) / 1,0) ELSE Round(SUM(DrillHrs) / SUM(TENSOR_TFF),0) END AS MTBF_DRILL_HRS  
FROM #RUNSGROUP
WHERE TENSOR = 1
GROUP BY RunYear, RunMonth

--Calculate Moving Average
UPDATE a 
SET	
	MovingAvg_OperHrs = (Select Sum(b.MTBF_OperHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'TENSOR' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_CircHrs = (Select Sum(b.MTBF_CircHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'TENSOR' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_DrillHrs = (Select Sum(b.MTBF_DrillHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'TENSOR' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate)
FROM RelHomeMTBF a
WHERE a.RunType = 'TENSOR'
AND a.RunDate >= Cast(Month(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(4)) 

--================================================================
--GEOLINK MTBF
--================================================================
INSERT INTO RelHomeMTBF (RelHomeMTBFID, RunType, RunDate, RunYear, RunMonth, NumberOfRuns, MDDistance, TotalOperHrs, TotalCircHrs, TotalDrillHrs, TFF, MTBF_OperHrs, MTBF_CircHrs, MTBF_DrillHrs)
SELECT 
	NEWID(),
	'GEOLINK' As RunType,
	Cast(RunMonth as varchar(2)) + '/1/' + Cast(RunYear as varchar(4)) As RunDate,
	RunYear,
	RunMonth,
	COUNT(RunNumber) AS NumberOfRuns, 
	Round(SUM(MDDistance),0) MDDistance, 
	Round(SUM(OperHrs),0) AS TotalOperHrs, 
	Round(SUM(CircHrs),0) AS TotalCircHrs, 
	Round(SUM(DrillHrs),0) AS TotalDrillHrs,  
	Round(SUM(GEOLINK_TFF),0) AS TFF, 
	CASE SUM(GEOLINK_TFF) WHEN 0 THEN Round(SUM(OperHrs) / 1,0) ELSE Round(SUM(OperHrs) / SUM(GEOLINK_TFF),0) END AS MTBF_OPER_HRS, 
	CASE SUM(GEOLINK_TFF) WHEN 0 THEN Round(SUM(CircHrs) / 1,0) ELSE Round(SUM(CircHrs) / SUM(GEOLINK_TFF),0) END AS MTBF_CIRC_HRS,
	CASE SUM(GEOLINK_TFF) WHEN 0 THEN Round(SUM(DrillHrs) / 1,0) ELSE Round(SUM(DrillHrs) / SUM(GEOLINK_TFF),0) END AS MTBF_DRILL_HRS  
FROM #RUNSGROUP
WHERE GEOLINK = 1
GROUP BY RunYear, RunMonth

--Calculate Moving Average
UPDATE a 
SET	
	MovingAvg_OperHrs = (Select Sum(b.MTBF_OperHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'GEOLINK' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_CircHrs = (Select Sum(b.MTBF_CircHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'GEOLINK' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_DrillHrs = (Select Sum(b.MTBF_DrillHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'GEOLINK' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate)
FROM RelHomeMTBF a
WHERE a.RunType = 'GEOLINK'
AND a.RunDate >= Cast(Month(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(4)) 

--================================================================
--BECFIELD MTBF
--================================================================
INSERT INTO RelHomeMTBF (RelHomeMTBFID, RunType, RunDate, RunYear, RunMonth, NumberOfRuns, MDDistance, TotalOperHrs, TotalCircHrs, TotalDrillHrs, TFF, MTBF_OperHrs, MTBF_CircHrs, MTBF_DrillHrs)
SELECT 
	NEWID(),
	'BECFIELD' As RunType,
	Cast(RunMonth as varchar(2)) + '/1/' + Cast(RunYear as varchar(4)) As RunDate,
	RunYear,
	RunMonth,
	COUNT(RunNumber) AS NumberOfRuns, 
	Round(SUM(MDDistance),0) MDDistance, 
	Round(SUM(OperHrs),0) AS TotalOperHrs, 
	Round(SUM(CircHrs),0) AS TotalCircHrs, 
	Round(SUM(DrillHrs),0) AS TotalDrillHrs,  
	Round(SUM(BECFIELD_TFF),0) AS TFF, 
	CASE SUM(BECFIELD_TFF) WHEN 0 THEN Round(SUM(OperHrs) / 1,0) ELSE Round(SUM(OperHrs) / SUM(BECFIELD_TFF),0) END AS MTBF_OPER_HRS, 
	CASE SUM(BECFIELD_TFF) WHEN 0 THEN Round(SUM(CircHrs) / 1,0) ELSE Round(SUM(CircHrs) / SUM(BECFIELD_TFF),0) END AS MTBF_CIRC_HRS,
	CASE SUM(BECFIELD_TFF) WHEN 0 THEN Round(SUM(DrillHrs) / 1,0) ELSE Round(SUM(DrillHrs) / SUM(BECFIELD_TFF),0) END AS MTBF_DRILL_HRS  
FROM #RUNSGROUP
WHERE BECFIELD = 1
GROUP BY RunYear, RunMonth

--Calculate Moving Average
UPDATE a 
SET	
	MovingAvg_OperHrs = (Select Sum(b.MTBF_OperHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'BECFIELD' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_CircHrs = (Select Sum(b.MTBF_CircHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'BECFIELD' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_DrillHrs = (Select Sum(b.MTBF_DrillHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'BECFIELD' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate)
FROM RelHomeMTBF a
WHERE a.RunType = 'BECFIELD'
AND a.RunDate >= Cast(Month(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(4)) 

--================================================================
--GWD MTBF
--================================================================
INSERT INTO RelHomeMTBF (RelHomeMTBFID, RunType, RunDate, RunYear, RunMonth, NumberOfRuns, MDDistance, TotalOperHrs, TotalCircHrs, TotalDrillHrs, TFF, MTBF_OperHrs, MTBF_CircHrs, MTBF_DrillHrs)
SELECT 
	NEWID(),
	'GWD' As RunType,
	Cast(RunMonth as varchar(2)) + '/1/' + Cast(RunYear as varchar(4)) As RunDate,
	RunYear,
	RunMonth,
	COUNT(RunNumber) AS NumberOfRuns, 
	Round(SUM(MDDistance),0) MDDistance, 
	Round(SUM(OperHrs),0) AS TotalOperHrs, 
	Round(SUM(CircHrs),0) AS TotalCircHrs, 
	Round(SUM(DrillHrs),0) AS TotalDrillHrs,  
	Round(SUM(GWD_TFF),0) AS TFF, 
	CASE SUM(GWD_TFF) WHEN 0 THEN Round(SUM(OperHrs) / 1,0) ELSE Round(SUM(OperHrs) / SUM(GWD_TFF),0) END AS MTBF_OPER_HRS, 
	CASE SUM(GWD_TFF) WHEN 0 THEN Round(SUM(CircHrs) / 1,0) ELSE Round(SUM(CircHrs) / SUM(GWD_TFF),0) END AS MTBF_CIRC_HRS,
	CASE SUM(GWD_TFF) WHEN 0 THEN Round(SUM(DrillHrs) / 1,0) ELSE Round(SUM(DrillHrs) / SUM(GWD_TFF),0) END AS MTBF_DRILL_HRS  
FROM #RUNSGROUP
WHERE GWD = 1
GROUP BY RunYear, RunMonth

--Calculate Moving Average
UPDATE a 
SET	
	MovingAvg_OperHrs = (Select Sum(b.MTBF_OperHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'GWD' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_CircHrs = (Select Sum(b.MTBF_CircHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'GWD' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_DrillHrs = (Select Sum(b.MTBF_DrillHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'GWD' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate)
FROM RelHomeMTBF a
WHERE a.RunType = 'GWD'
AND a.RunDate >= Cast(Month(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(4)) 

--================================================================
--WPR MTBF
--================================================================
INSERT INTO RelHomeMTBF (RelHomeMTBFID, RunType, RunDate, RunYear, RunMonth, NumberOfRuns, MDDistance, TotalOperHrs, TotalCircHrs, TotalDrillHrs, TFF, MTBF_OperHrs, MTBF_CircHrs, MTBF_DrillHrs)
SELECT 
	NEWID(),
	'WPR' As RunType,
	Cast(RunMonth as varchar(2)) + '/1/' + Cast(RunYear as varchar(4)) As RunDate,
	RunYear,
	RunMonth,
	COUNT(RunNumber) AS NumberOfRuns, 
	Round(SUM(MDDistance),0) MDDistance, 
	Round(SUM(OperHrs),0) AS TotalOperHrs, 
	Round(SUM(CircHrs),0) AS TotalCircHrs, 
	Round(SUM(DrillHrs),0) AS TotalDrillHrs,  
	Round(SUM(WPR_TFF),0) AS TFF, 
	CASE SUM(WPR_TFF) WHEN 0 THEN Round(SUM(OperHrs) / 1,0) ELSE Round(SUM(OperHrs) / SUM(WPR_TFF),0) END AS MTBF_OPER_HRS, 
	CASE SUM(WPR_TFF) WHEN 0 THEN Round(SUM(CircHrs) / 1,0) ELSE Round(SUM(CircHrs) / SUM(WPR_TFF),0) END AS MTBF_CIRC_HRS,
	CASE SUM(WPR_TFF) WHEN 0 THEN Round(SUM(DrillHrs) / 1,0) ELSE Round(SUM(DrillHrs) / SUM(WPR_TFF),0) END AS MTBF_DRILL_HRS  
FROM #RUNSGROUP
WHERE WPR = 1
GROUP BY RunYear, RunMonth

--Calculate Moving Average
UPDATE a 
SET	
	MovingAvg_OperHrs = (Select Sum(b.MTBF_OperHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'WPR' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_CircHrs = (Select Sum(b.MTBF_CircHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'WPR' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_DrillHrs = (Select Sum(b.MTBF_DrillHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'WPR' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate)
FROM RelHomeMTBF a
WHERE a.RunType = 'WPR'
AND a.RunDate >= Cast(Month(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(4)) 

--================================================================
--MOTOR MTBF
--================================================================
INSERT INTO RelHomeMTBF (RelHomeMTBFID, RunType, RunDate, RunYear, RunMonth, NumberOfRuns, MDDistance, TotalOperHrs, TotalCircHrs, TotalDrillHrs, TFF, MTBF_OperHrs, MTBF_CircHrs, MTBF_DrillHrs)
SELECT 
	NEWID(),
	'MOTOR' As RunType,
	Cast(RunMonth as varchar(2)) + '/1/' + Cast(RunYear as varchar(4)) As RunDate,
	RunYear,
	RunMonth,
	COUNT(RunNumber) AS NumberOfRuns, 
	Round(SUM(MDDistance),0) MDDistance, 
	Round(SUM(OperHrs),0) AS TotalOperHrs, 
	Round(SUM(CircHrs),0) AS TotalCircHrs, 
	Round(SUM(DrillHrs),0) AS TotalDrillHrs,  
	Round(SUM(MOTOR_TFF),0) AS TFF, 
	CASE SUM(MOTOR_TFF) WHEN 0 THEN Round(SUM(OperHrs) / 1,0) ELSE Round(SUM(OperHrs) / SUM(MOTOR_TFF),0) END AS MTBF_OPER_HRS, 
	CASE SUM(MOTOR_TFF) WHEN 0 THEN Round(SUM(CircHrs) / 1,0) ELSE Round(SUM(CircHrs) / SUM(MOTOR_TFF),0) END AS MTBF_CIRC_HRS,
	CASE SUM(MOTOR_TFF) WHEN 0 THEN Round(SUM(DrillHrs) / 1,0) ELSE Round(SUM(DrillHrs) / SUM(MOTOR_TFF),0) END AS MTBF_DRILL_HRS  
FROM #RUNSGROUP
WHERE MOTOR = 1
GROUP BY RunYear, RunMonth

--Calculate Moving Average
UPDATE a 
SET	
	MovingAvg_OperHrs = (Select Sum(b.MTBF_OperHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'MOTOR' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_CircHrs = (Select Sum(b.MTBF_CircHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'MOTOR' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate),
	MovingAvg_DrillHrs = (Select Sum(b.MTBF_DrillHrs)/@iMovingAvgPeriod From RelHomeMTBF b Where b.RunType = 'MOTOR' And b.RunDate >= DateAdd(m,(@iMovingAvgPeriod-1) * -1, a.RunDate) And b.RunDate <= a.RunDate)
FROM RelHomeMTBF a
WHERE a.RunType = 'MOTOR'
AND a.RunDate >= Cast(Month(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(4)) 

--================================================================
--Drop Temp Tables
--================================================================
DROP TABLE #RUNSGROUP

--================================================================
--Remove extra rows in tblRelHomeMTBF
--================================================================
DELETE FROM RelHomeMTBF
WHERE RunDate < Cast(Month(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, @iPeriod * -1, GetDate())) as varchar(4)) 


SET NOCOUNT OFF





/****** Object:  StoredProcedure [dbo].[usp_DeleteDocItems]    Script Date: 08/05/2014 20:09:08 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_CreateRelHomeRegionalTotals]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_CreateRelHomeRegionalTotals]
AS

SET NOCOUNT ON

TRUNCATE TABLE RelHomeRegionalTotals

INSERT INTO RelHomeRegionalTotals(RelHomeRegionTotalID, RunType,RegionDesc,RunCnt,OperHrs,CircHrs) 
SELECT 
	NEWID(), 
	'HEL/LWD' as RunType,
	reg.RegionDesc,
	COUNT(*) RunCnt,
	SUM(dbo.NumCheck(r.OperHrs)) as OperHrs,
	SUM(dbo.NumCheck(r.CircHrs)) as CircHrs
FROM Runs r
LEFT JOIN Wells w ON w.WellID = r.WellID AND w.IsDeleted = 0
LEFT JOIN Jobs j ON j.JobID = w.JobID AND j.IsDeleted = 0
LEFT JOIN Regions reg ON reg.Region = j.Region
WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + '/1/' + Cast(Year(GetDate()) as varchar(4)) 
AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4)) 
AND r.IsDeleted = 0
AND reg.Region is not null
AND r.HEL_LWD = 1
GROUP BY reg.RegionDesc
UNION ALL
SELECT  
	NEWID(), 
	'HEL/EM' as RunType,
	reg.RegionDesc,
	COUNT(*) RunCnt,
	SUM(dbo.NumCheck(r.OperHrs)) as OperHrs,
	SUM(dbo.NumCheck(r.CircHrs)) as CircHrs
FROM Runs r
LEFT JOIN Wells w ON w.WellID = r.WellID AND w.IsDeleted = 0
LEFT JOIN Jobs j ON j.JobID = w.JobID AND j.IsDeleted = 0
LEFT JOIN Regions reg ON reg.Region = j.Region
WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + '/1/' + Cast(Year(GetDate()) as varchar(4)) 
AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4)) 
AND r.IsDeleted = 0
AND reg.Region is not null
AND r.HEL_EM = 1
GROUP BY reg.RegionDesc
UNION ALL
SELECT  
	NEWID(), 
	'RSS' as RunType,
	reg.RegionDesc,
	COUNT(*) RunCnt,
	SUM(dbo.NumCheck(r.OperHrs)) as OperHrs,
	SUM(dbo.NumCheck(r.CircHrs)) as CircHrs
FROM Runs r
LEFT JOIN Wells w ON w.WellID = r.WellID AND w.IsDeleted = 0
LEFT JOIN Jobs j ON j.JobID = w.JobID AND j.IsDeleted = 0
LEFT JOIN Regions reg ON reg.Region = j.Region
WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + '/1/' + Cast(Year(GetDate()) as varchar(4)) 
AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4)) 
AND r.IsDeleted = 0
AND reg.Region is not null
AND r.RSS = 1
GROUP BY reg.RegionDesc
UNION ALL
SELECT  
	NEWID(), 
	'EM' as RunType,
	reg.RegionDesc,
	COUNT(*) RunCnt,
	SUM(dbo.NumCheck(r.OperHrs)) as OperHrs,
	SUM(dbo.NumCheck(r.CircHrs)) as CircHrs
FROM Runs r
LEFT JOIN Wells w ON w.WellID = r.WellID AND w.IsDeleted = 0
LEFT JOIN Jobs j ON j.JobID = w.JobID AND j.IsDeleted = 0
LEFT JOIN Regions reg ON reg.Region = j.Region
WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + '/1/' + Cast(Year(GetDate()) as varchar(4)) 
AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4)) 
AND r.IsDeleted = 0
AND reg.Region is not null
AND r.EM = 1
GROUP BY reg.RegionDesc
UNION ALL
SELECT  
	NEWID(), 
	'HYPERPULSE' as RunType,
	reg.RegionDesc,
	COUNT(*) RunCnt,
	SUM(dbo.NumCheck(r.OperHrs)) as OperHrs,
	SUM(dbo.NumCheck(r.CircHrs)) as CircHrs
FROM Runs r
LEFT JOIN Wells w ON w.WellID = r.WellID AND w.IsDeleted = 0
LEFT JOIN Jobs j ON j.JobID = w.JobID AND j.IsDeleted = 0
LEFT JOIN Regions reg ON reg.Region = j.Region
WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + '/1/' + Cast(Year(GetDate()) as varchar(4)) 
AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4)) 
AND r.IsDeleted = 0
AND reg.Region is not null
AND r.PP = 1
GROUP BY reg.RegionDesc
UNION ALL
SELECT  
	NEWID(), 
	'BECFIELD' as RunType,
	reg.RegionDesc,
	COUNT(*) RunCnt,
	SUM(dbo.NumCheck(r.OperHrs)) as OperHrs,
	SUM(dbo.NumCheck(r.CircHrs)) as CircHrs
FROM Runs r
LEFT JOIN Wells w ON w.WellID = r.WellID AND w.IsDeleted = 0
LEFT JOIN Jobs j ON j.JobID = w.JobID AND j.IsDeleted = 0
LEFT JOIN Regions reg ON reg.Region = j.Region
WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + '/1/' + Cast(Year(GetDate()) as varchar(4)) 
AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4)) 
AND r.IsDeleted = 0
AND reg.Region is not null
AND r.BECFIELD = 1
GROUP BY reg.RegionDesc
UNION ALL
SELECT  
	NEWID(), 
	'GEOLINK' as RunType,
	reg.RegionDesc,
	COUNT(*) RunCnt,
	SUM(dbo.NumCheck(r.OperHrs)) as OperHrs,
	SUM(dbo.NumCheck(r.CircHrs)) as CircHrs
FROM Runs r
LEFT JOIN Wells w ON w.WellID = r.WellID AND w.IsDeleted = 0
LEFT JOIN Jobs j ON j.JobID = w.JobID AND j.IsDeleted = 0
LEFT JOIN Regions reg ON reg.Region = j.Region
WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + '/1/' + Cast(Year(GetDate()) as varchar(4)) 
AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4)) 
AND r.IsDeleted = 0
AND reg.Region is not null
AND r.GEOLINK = 1
GROUP BY reg.RegionDesc
UNION ALL
SELECT  
	NEWID(), 
	'TENSOR' as RunType,
	reg.RegionDesc,
	COUNT(*) RunCnt,
	SUM(dbo.NumCheck(r.OperHrs)) as OperHrs,
	SUM(dbo.NumCheck(r.CircHrs)) as CircHrs
FROM Runs r
LEFT JOIN Wells w ON w.WellID = r.WellID AND w.IsDeleted = 0
LEFT JOIN Jobs j ON j.JobID = w.JobID AND j.IsDeleted = 0
LEFT JOIN Regions reg ON reg.Region = j.Region
WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + '/1/' + Cast(Year(GetDate()) as varchar(4)) 
AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4)) 
AND r.IsDeleted = 0
AND reg.Region is not null
AND r.TENSOR = 1
GROUP BY reg.RegionDesc
UNION
SELECT  
	NEWID(), 
	'GWD' as RunType,
	reg.RegionDesc,
	COUNT(*) RunCnt,
	SUM(dbo.NumCheck(r.OperHrs)) as OperHrs,
	SUM(dbo.NumCheck(r.CircHrs)) as CircHrs
FROM Runs r
LEFT JOIN Wells w ON w.WellID = r.WellID AND w.IsDeleted = 0
LEFT JOIN Jobs j ON j.JobID = w.JobID AND j.IsDeleted = 0
LEFT JOIN Regions reg ON reg.Region = j.Region
WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + '/1/' + Cast(Year(GetDate()) as varchar(4)) 
AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4)) 
AND r.IsDeleted = 0
AND reg.Region is not null
AND r.GWD = 1
GROUP BY reg.RegionDesc
UNION ALL
SELECT  
	NEWID(), 
	'WPR' as RunType,
	reg.RegionDesc,
	COUNT(*) RunCnt,
	SUM(dbo.NumCheck(r.OperHrs)) as OperHrs,
	SUM(dbo.NumCheck(r.CircHrs)) as CircHrs
FROM Runs r
LEFT JOIN Wells w ON w.WellID = r.WellID AND w.IsDeleted = 0
LEFT JOIN Jobs j ON j.JobID = w.JobID AND j.IsDeleted = 0
LEFT JOIN Regions reg ON reg.Region = j.Region
WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + '/1/' + Cast(Year(GetDate()) as varchar(4)) 
AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4)) 
AND r.IsDeleted = 0
AND reg.Region is not null
AND r.WPR = 1
GROUP BY reg.RegionDesc
UNION ALL
SELECT  
	NEWID(), 
	'MOTOR' as RunType,
	reg.RegionDesc,
	COUNT(*) RunCnt,
	SUM(dbo.NumCheck(r.OperHrs)) as OperHrs,
	SUM(dbo.NumCheck(r.CircHrs)) as CircHrs
FROM Runs r
LEFT JOIN Wells w ON w.WellID = r.WellID AND w.IsDeleted = 0
LEFT JOIN Jobs j ON j.JobID = w.JobID AND j.IsDeleted = 0
LEFT JOIN Regions reg ON reg.Region = j.Region
WHERE r.EndDate < Cast(Month(GetDate()) as varchar(2)) + '/1/' + Cast(Year(GetDate()) as varchar(4)) 
AND r.EndDate >= Cast(Month(DateAdd(m, -12, GetDate())) as varchar(2)) + '/1/' + Cast(Year(DateAdd(m, -12, GetDate())) as varchar(4)) 
AND r.IsDeleted = 0
AND reg.Region is not null
AND r.MOTOR = 1
GROUP BY reg.RegionDesc

INSERT INTO RelHomeRegionalTotals(RelHomeRegionTotalID, RunType,RegionDesc,RunCnt,OperHrs,CircHrs) 
SELECT  
	NEWID(), 
	'HEL/LWD' as RunType,
	'Global' as Region,
	Sum(RunCnt) as RunCnt,
	Sum(OperHrs) as OperHrs,
	Sum(CircHrs) as CircHrs
FROM RelHomeRegionalTotals
WHERE RunType = 'HEL/LWD'
UNION ALL
SELECT  
	NEWID(), 
	'HEL/EM' as RunType,
	'Global' as Region,
	Sum(RunCnt) as RunCnt,
	Sum(OperHrs) as OperHrs,
	Sum(CircHrs) as CircHrs
FROM RelHomeRegionalTotals
WHERE RunType = 'HEL/EM'
UNION ALL
SELECT  
	NEWID(), 
	'RSS' as RunType,
	'Global' as Region,
	Sum(RunCnt) as RunCnt,
	Sum(OperHrs) as OperHrs,
	Sum(CircHrs) as CircHrs
FROM RelHomeRegionalTotals
WHERE RunType = 'RSS'
UNION ALL
SELECT  
	NEWID(), 
	'EM' as RunType,
	'Global' as Region,
	Sum(RunCnt) as RunCnt,
	Sum(OperHrs) as OperHrs,
	Sum(CircHrs) as CircHrs
FROM RelHomeRegionalTotals
WHERE RunType = 'EM'
UNION ALL
SELECT  
	NEWID(), 
	'HYPERPULSE' as RunType,
	'Global' as Region,
	Sum(RunCnt) as RunCnt,
	Sum(OperHrs) as OperHrs,
	Sum(CircHrs) as CircHrs
FROM RelHomeRegionalTotals
WHERE RunType = 'HYPERPULSE'
UNION ALL
SELECT  
	NEWID(), 
	'BECFIELD' as RunType,
	'Global' as Region,
	Sum(RunCnt) as RunCnt,
	Sum(OperHrs) as OperHrs,
	Sum(CircHrs) as CircHrs
FROM RelHomeRegionalTotals
WHERE RunType = 'BECFIELD'
UNION ALL
SELECT  
	NEWID(), 
	'GEOLINK' as RunType,
	'Global' as Region,
	Sum(RunCnt) as RunCnt,
	Sum(OperHrs) as OperHrs,
	Sum(CircHrs) as CircHrs
FROM RelHomeRegionalTotals
WHERE RunType = 'GEOLINK'
UNION ALL
SELECT  
	NEWID(), 
	'TENSOR' as RunType,
	'Global' as Region,
	Sum(RunCnt) as RunCnt,
	Sum(OperHrs) as OperHrs,
	Sum(CircHrs) as CircHrs
FROM RelHomeRegionalTotals
WHERE RunType = 'TENSOR'
UNION ALL
SELECT  
	NEWID(), 
	'GWD' as RunType,
	'Global' as Region,
	Sum(RunCnt) as RunCnt,
	Sum(OperHrs) as OperHrs,
	Sum(CircHrs) as CircHrs
FROM RelHomeRegionalTotals
WHERE RunType = 'GWD'
UNION ALL
SELECT  
	NEWID(), 
	'WPR' as RunType,
	'Global' as Region,
	Sum(RunCnt) as RunCnt,
	Sum(OperHrs) as OperHrs,
	Sum(CircHrs) as CircHrs
FROM RelHomeRegionalTotals
WHERE RunType = 'WPR'
UNION ALL
SELECT  
	NEWID(), 
	'MOTOR' as RunType,
	'Global' as Region,
	Sum(RunCnt) as RunCnt,
	Sum(OperHrs) as OperHrs,
	Sum(CircHrs) as CircHrs
FROM RelHomeRegionalTotals
WHERE RunType = 'MOTOR'

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_CreateRMAnalysisComment]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_CreateRMAnalysisComment] (
	@sRunID uniqueidentifier,
	@sIncidentID uniqueidentifier,
	@sToolStringInfoID uniqueidentifier,
	@iCommentTypeID as int,
	@sComment as varchar(3500),
	@iUserID as int) 

AS
SET NOCOUNT ON

Declare @sCommentID uniqueidentifier
set @sCommentID = newid()

INSERT INTO RMAnalysisComments (CommentID, RunID, IncidentID, ToolStringInfoID, CommentTypeID, 
						 Comment, UserID, CreateDate, UserDelete, DeleteDate, IsDeleted)
VALUES 
(
	@sCommentID, @sRunID, @sIncidentID, @sToolStringInfoID, @iCommentTypeID,
	@sComment, @iUserID, GetDate(), null, null, 0
)

SELECT @sCommentID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_CreateRMAnalysisEmail]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_CreateRMAnalysisEmail] (
	@sIncidentID uniqueidentifier,
	@sToolStringInfoID uniqueidentifier,
	@sComment varchar(3000),
	@sSendTo varchar(1000),
	@sSendCc varchar(1000),
	@iFromUserID int)
AS
SET NOCOUNT ON
Declare @RMEmailID uniqueidentifier
Set @RMEmailID = newid()

If Len(@sToolStringInfoID) = 0
BEGIN
	SET @sToolStringInfoID = NULL
END

INSERT INTO RMAnalysisEmail (IncidentID, ToolStringInfoID, Comment, SendTo, SendCc, FromUserID)
VALUES (@sIncidentID, @sToolStringInfoID, @sComment, @sSendTo, @sSendCc, @iFromUserID)
						
SELECT @RMEmailID
SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_CreateToolSheet]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------Added ProductLineId for DS while creating Tool String -- Sachin Mhalungekar -- 3/2/21------
CREATE PROCEDURE [dbo].[usp_CreateToolSheet] (
	@sSerialNumber varchar(50),
	@sDescription varchar(50),
	@iCreatedBy int,
	@iSizeID int,	
	@iToolYear smallint,
	@sDistrict varchar(12),
	@sBuildNumber varchar(6),
	@sToolMod varchar(3),
	@iDisassembled bit,
	@sDisassembledDate datetime,
	@sCheckSum varchar(15),
	@sType varchar(20),
	@iKitNumber int,
	@iIsLatestKitNumber tinyint,
	@iIsTurnaround tinyint,
	@sMotorType varchar(15),
	@sMotorProperty varchar(30),
	@sWorkOrderNum varchar(15),
	@sMotorSerial varchar(60),
	@sEDP varchar(30),
	@sComments varchar(100),
	@iUserID int,
	@productLineId int = 1) 
AS
BEGIN
SET NOCOUNT ON

Declare @sToolStringID uniqueidentifier
Set @sToolStringID = newid()

INSERT INTO ToolStrings (ToolStringID, SerialNumber, [Description], CreatedBy, SizeID, ToolYear, District, BuildNumber, ToolMod, 
	Disassembled, DisassembledDate, [CheckSum], [Type], KitNumber, IsLatestKitNumber, IsTurnaround, 
	MotorType, MotorProperty, WorkOrderNum, MotorSerial, EDP, Comments, CreateDate, CreateUserID, ProductLineId)
VALUES (@sToolStringID, @sSerialNumber, @sDescription, @iCreatedBy, @iSizeID, @iToolYear, @sDistrict, @sBuildNumber, @sToolMod, 
	@iDisassembled, @sDisassembledDate, @sCheckSum, @sType, @iKitNumber, @iIsLatestKitNumber, @iIsTurnaround, 
	@sMotorType, @sMotorProperty, @sWorkOrderNum, @sMotorSerial, @sEDP, @sComments, GetDate(), @iUserID, @productLineId)

SELECT @sToolStringID

SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CreateToolSheetTemplate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_CreateToolSheetTemplate] (
	@sTemplateName as varchar(50),
	@sToolSizeID as varchar(10),
	@sToolType as varchar(20),
	@iUser as int) 
AS
BEGIN
SET NOCOUNT ON

DECLARE @sTemplateID as uniqueidentifier
SET @sTemplateID = newid()

INSERT INTO ToolSheetTemplates (TemplateID, TemplateName, ToolSizeID, ToolType, CreateDate, CreatedBy, LastUpdate, UpdateBy)
VALUES (@sTemplateID, @sTemplateName, @sToolSizeID, @sToolType, GetDate(), @iUser, null, null)

SELECT @sTemplateID

SET NOCOUNT OFF
END

GO
/****** Object:  StoredProcedure [dbo].[usp_CreateToolSheetTemplateMap]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_CreateToolSheetTemplateMap] (
	@sTemplateID as varchar(38),
	@iPartTypeID int,
	@iOrderPosition int)
AS
BEGIN
SET NOCOUNT ON

DECLARE @sTemplateMapID as uniqueidentifier
SET @sTemplateMapID = newid()

INSERT INTO ToolSheetTemplatesMap(TemplateMapID, TemplateID, PartTypeID, OrderPosition)
VALUES (@sTemplateMapID, @sTemplateID, @iPartTypeID, @iOrderPosition)

SELECT @sTemplateMapID

SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_CreateToolStringFixedAsset]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO



CREATE PROCEDURE [dbo].[usp_CreateToolStringFixedAsset] (
	@sToolStringID uniqueidentifier,
	@sFixedAssetID uniqueidentifier,
	@sSerialNum varchar(30),
	@sRNItemNum varchar(30),
	@sInventoryItemNum varchar(30),
	@sRevision varchar(2),
	@sToolCode varchar(40),
	@sMasterFirmwareRev varchar(12),
	@customProperty varchar(128),
	@iPartTypeID int,
	@iOrderPos int,
	@iSortNumber int)
AS
BEGIN
SET NOCOUNT ON

Declare @sToolStringFixedAssetsId uniqueidentifier
Set @sToolStringFixedAssetsId = newid()

INSERT INTO ToolStringFixedAssets (ToolStringFixedAssetsId, ToolStringID, FixedAssetID, SerialNum, RNItemNum, InventoryItemNum, 
									PartTypeID, OrderPosition, SortNumber, Revision, ToolCode, MasterFirmwareRevision, CustomProperty)
VALUES (@sToolStringFixedAssetsId, @sToolStringID, @sFixedAssetID, @sSerialNum, @sRNItemNum, @sInventoryItemNum, 
		@iPartTypeID, @iOrderPos, @iSortNumber, @sRevision, @sToolCode, @sMasterFirmwareRev, @customProperty)

SELECT @sToolStringFixedAssetsId

SET NOCOUNT OFF
END


GO
/****** Object:  StoredProcedure [dbo].[usp_Delete_From_SOAAuditInformation]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Sachin Mhalungekar
-- Create date: 09/07/2018
-- Description:	 to delete records prior to two weeks from SOAAuditInformation 
-- =============================================
CREATE PROCEDURE [dbo].[usp_Delete_From_SOAAuditInformation]
	@Weeks INT,
	@AuditTypeIds VARCHAR(200)  ---- send ids like '1,2,3'	
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @WeeksAgoDate Date;
     	
    SELECT @WeeksAgoDate = DATEADD(WEEK, -@Weeks, CAST(GETDATE() AS DATE));
	
	DECLARE @TotalRecords BIGINT

	SELECT @TotalRecords = COUNT(*) 
	FROM SOAAuditInformation (NOLOCK)
	WHERE CreatedOn < @WeeksAgoDate AND AuditTypeId IN (SELECT * FROM [dbo].[String_To_CommaSaparatedInt](@AuditTypeIds))

	WHILE (@TotalRecords > 0)
	BEGIN

		DELETE TOP (100)
		FROM		SOAAuditInformation 
		WHERE		CreatedOn < @WeeksAgoDate AND AuditTypeId IN (SELECT * FROM [dbo].[String_To_CommaSaparatedInt](@AuditTypeIds))
	
		SET @TotalRecords = @TotalRecords - 100	

	END
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_DeleteBoardItemNum]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_DeleteBoardItemNum] 
	@BoardId uniqueidentifier,
	@BoardItemNum varchar(30),
	@AuditTypeId int,
	@UserId int, 
	@RemoteHost varchar(75),
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;	

	DELETE FROM BoardFirmwares WHERE BoardItemNum = @BoardItemNum
	DELETE FROM BoardItemNums WHERE BoardId = @BoardId
	
	insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
	values (@AuditTypeId, @UserId, 'Delete: ' + convert(varchar(256), @BoardId), getdate(), @RemoteHost, 'AuditBoardItemNum')
	
	Set @AuditActionId = @@IDENTITY
	
	SET NOCOUNT OFF;
	
END

GO
/****** Object:  StoredProcedure [dbo].[usp_DeleteDocItems]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_DeleteDocItems] 
	@DocItemId int
AS
BEGIN
	SET NOCOUNT ON;	
	
	print @DocItemId;
	
	With DocItems_CTE
	AS
	(	
		SELECT ChildDocItems.DocItemId, ChildDocItems.IsDeleted
		From DocItems (NOLOCK) AS ParentDocItems
		INNER JOIN DocItems (NOLOCK) AS ChildDocItems ON ChildDocItems.ParentDocItemId = ParentDocItems.DocItemId
		Where ParentDocItems.DocItemId = @DocItemId		

		UNION ALL
	
		SELECT ChildDocItems.DocItemId, ChildDocItems.IsDeleted
		From DocItems (NOLOCK) AS ParentDocItems
		INNER JOIN DocItems (NOLOCK) AS ChildDocItems ON ChildDocItems.ParentDocItemId = ParentDocItems.DocItemId

		INNER JOIN DocItems_CTE ON ChildDocItems.ParentDocItemId = DocItems_CTE.DocItemId
	)

	UPDATE DocItems SET IsDeleted = 1
	WHERE (DocItemId IN (SELECT DocItemId from DocItems_CTE where IsDeleted = 0) OR DocItemId = @DocItemId) 
	
	SET NOCOUNT OFF;
	
END




/****** Object:  StoredProcedure [dbo].[usp_DeleteFixedAssetHistory]    Script Date: 08/05/2014 20:10:29 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_DeleteFixedAssetHistory]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_DeleteFixedAssetHistory]
	@FixedAssetId uniqueidentifier,
	@WorkOrderId uniqueidentifier
AS

;WITH RecursiveCTE( 
			ParentFixedAssetId, FixedAssetId,FixedAssetHistoryId
		)
		AS 
		( 
		SELECT  ParentFixedAssetId, FixedAssetId,FixedAssetHistoryId
		  FROM FixedAssetHistory (NOLOCK) 
		 WHERE FixedAssetId = @FixedAssetId and WorkOrderId = @WorkOrderId
 
UNION ALL

SELECT			
		pc.ParentFixedAssetId, pc.FixedAssetId,pc.FixedAssetHistoryId
  FROM FixedAssetHistory   (NOLOCK)   pc
  INNER JOIN RecursiveCTE    ct
    ON pc.ParentFixedAssetId = ct.FixedAssetId  AND pc.ParentFixedAssetId <> pc.FixedAssetId
    where pc.WorkOrderId = @WorkOrderId
) 
Delete from FixedAssetHistory where FixedAssetHistoryId in 
(SELECT FixedAssetHistoryId FROM RecursiveCTE)
  



/****** Object:  StoredProcedure [dbo].[usp_DeleteIncident]    Script Date: 08/05/2014 20:12:07 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_DeleteGFAIncident]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_DeleteGFAIncident](
	@sGFAID as uniqueidentifier,
	@sJarDailyID as uniqueidentifier,
	@sUserID as int,
	@sServiceLine as varchar(10))
AS
BEGIN
SET NOCOUNT ON;

UPDATE GFAIncidents
SET IsDeleted = 1,
	SaveDate = GetDate(),
	SaveUserID = @sUserID
WHERE GFAID = @sGFAID

DECLARE @iGFA As Int
SET @iGFA = (Select Count(i.GFANumber) From GFAIncidents i Where i.IsDeleted = 0 And i.ServiceLine = @sServiceLine And i.JarDailyID = @sJarDailyID)

IF (@sServiceLine = 'SLS')
BEGIN
	UPDATE JarDailiesSLS
	SET GFA = @iGFA
	WHERE JarDailyID = @sJarDailyID
END
ELSE
BEGIN
	UPDATE JarDailies
	SET GFA = @iGFA
	WHERE JarDailyID = @sJarDailyID
END

SET NOCOUNT OFF;
END

GO
/****** Object:  StoredProcedure [dbo].[usp_DeleteIncident]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_DeleteIncident] (
	@sIncidentID as uniqueidentifier,
	@sRunID as uniqueidentifier) 
AS
BEGIN

IF (@sRunID Is Not Null)
BEGIN
	SET @sIncidentID = (Select IncidentID From Incidents (NOLOCK) Where IsDeleted = 0 And RunID = @sRunID)
END

UPDATE Incidents
SET IsDeleted = 1
WHERE IncidentID = @sIncidentID

UPDATE AssetRepairTrack
SET IncidentID = NULL
, ToolStringInfoID = NULL
WHERE IncidentID = @sIncidentID

SET NOCOUNT OFF
END





/****** Object:  StoredProcedure [dbo].[usp_FRACASMapBranchPlants]    Script Date: 08/05/2014 20:13:42 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_DeletePFTConfig]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_DeletePFTConfig] 
	@PFTConfigId uniqueidentifier,
	@AuditTypeId int,
	@UserId int, 
	@RemoteHost varchar(75),
	@AuditActionId int = null output
AS
BEGIN
	SET NOCOUNT ON;	

	DELETE FROM PFTConfigSeq WHERE PFTConfigId = @PFTConfigId
	DELETE FROM PFTConfig WHERE PFTConfigId = @PFTConfigId
	
	insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
	values (@AuditTypeId, @UserId, @PFTConfigId, getdate(), @RemoteHost, 'AuditPFTConfig')
	
	Set @AuditActionId = @@IDENTITY
	
	SET NOCOUNT OFF;
	
END

GO
/****** Object:  StoredProcedure [dbo].[usp_DeletePFTWO]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_DeletePFTWO](@PFTWOId uniqueidentifier)
AS

delete from docitemattach where GuidKeyId=@PFTWOId

delete from pfttestdata where pftwoid=@PFTWOId

delete from pftwoseqfailures where pftwoseqid in (select pftwoseqid from pftwoseq where pftwoid=@PFTWOId)
delete from pftwoseq where pftwoid=@PFTWOId

delete from pftwo where pftwoid=@PFTWOId

GO
/****** Object:  StoredProcedure [dbo].[usp_DeleteToolSheet]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_DeleteToolSheet] (
	@sToolStringID as uniqueidentifier
)
AS
BEGIN
SET NOCOUNT ON

DELETE FROM dbo.ComponentProperties
WHERE ToolStringID = @sToolStringID

DELETE FROM ToolStringFixedAssets
WHERE ToolStringID = @sToolStringID

DELETE FROM ToolStrings
WHERE ToolStringID = @sToolStringID

SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_DTAgeReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================      
-- Author:  Taware, Mangesh
-- Create date: 01-Mar-2018
-- Description:       
-- =============================================      
CREATE PROCEDURE [dbo].[usp_DTAgeReport]      
      
	@DateShipped datetime,      
	@Region varchar(15),      
	@BranchPlant varchar(30),    
	@PageIndex int,      
	@PageSize int,      
	@TotalRowCount int  output
      
AS      
BEGIN      
SET @TotalRowCount = 0;
DECLARE @TempDT TABLE  ([Index]  BIGINT, 
						DispatchNumber INT, 
						SerialNum VARCHAR(20), 
						ItemNum VARCHAR(30),      
						DateShipped  DATETIME, 
						DateShippedNext  DATETIME, 
						DateReturn  DATETIME)

	INSERT INTO @TempDT  
	SELECT DISTINCT ROW_NUMBER() OVER(ORDER BY SerialNum ASC) as [Index],   
			d.DispatchNumber, SerialNum, dii.ItemNum, ISNULL(convert(varchar(50), di.DateShipped ,101),null) as DateShipped, NULL as DateShippedNext, NULL    as DateReturn      
				from DispatchInstanceItems dii (NOLOCK)      
				inner join DispatchInstances di (NOLOCK) on di.dispatchinstanceid = dii.DispatchInstanceId      
				inner join Dispatches d (NOLOCK) on d.DispatchId = di.DispatchId      
				left join ItemNums i (NOLOCK) on i.ItemNum = dii.ItemNum             
				left join BranchPlants b (NOLOCK) on b.BranchPlant = d.BranchPlant      
				WHERE di.ShipType = 'DT-SEQ-ADD' 
				AND (di.DateShipped >= @DateShipped  OR @DateShipped IS NULL)
				AND ( @Region is null or b.Region in (SELECT entry FROM [dbo].[ListToTable](isnull(@Region,''))))
				AND ( @BranchPlant is null or b.BranchPlant in ( SELECT entry FROM [dbo].[ListToTable](isnull(@BranchPlant,''))))
			 
	SELECT @TotalRowCount = COUNT(*) FROM @TempDT


	DELETE FROM @TempDT
	WHERE @PageSize IS NOT NULL AND [Index] NOT BETWEEN ((@PageIndex - 1) * @PageSize + 1) AND (@PageIndex * @PageSize)   

	UPDATE t       
	SET t.DateShippedNext = ISNULL(convert(varchar(50), di.DateShipped  ,101),null)      
	FROM @TempDT t      
	 INNER JOIN Dispatches d (NOLOCK) on t.DispatchNumber = d.DispatchNumber      
	 INNER JOIN DispatchInstances di (NOLOCK) on d.DispatchId = di.DispatchId       
	 INNER JOIN DispatchInstanceItems dii (NOLOCK) on di.dispatchinstanceid = dii.DispatchInstanceId AND t.SerialNum = dii.SerialNum AND t.ItemNum = dii.ItemNum      
	WHERE di.ShipType = 'DT-SEQ-ADD' AND di.DateShipped > t.DateShipped      
     

	print CONVERT(VARCHAR(MAX), getdate(), 121)

	UPDATE t       
	SET t.DateReturn = ISNULL(convert(varchar(50), di.DateShipped  ,101),null)      
	FROM @TempDT t      
	 inner join Dispatches d (NOLOCK) on t.DispatchNumber = d.DispatchNumber      
	 inner join DispatchInstances di (NOLOCK) on d.DispatchId = di.DispatchId       
	 inner join DispatchInstanceItems dii (NOLOCK) on di.dispatchinstanceid = dii.DispatchInstanceId AND t.SerialNum = dii.SerialNum AND t.ItemNum = dii.ItemNum      
	WHERE di.ShipType = 'DT-RETURN' AND (di.DateShipped >= t.DateShipped AND   (di.DateShipped <= t.DateShippedNext or  (t.DateShippedNext IS NULL and di.DateShipped is not null)) )      
       
	SELECT 
	TDT.DispatchNumber, SerialNum, TDT.ItemNum,   ISNULL(convert(varchar(50), DateShipped,101),Null) as DateShipped,      
	ISNULL(convert(varchar(50), DateShippedNext,101),Null) as [DateShippedNext],      
	ISNULL(convert(varchar(50), DateReturn ,101),null) as [DateReturned],      
	case       
	when TDT.DateShipped IS not null and TDT.DateReturn IS null then DATEDIFF(day, ISNULL(DateShipped,GETDATE()), GETDATE())      
	else DATEDIFF(day, ISNULL(DateShipped,DateReturn), DateReturn) end [Duration]      
	,j.jobnumber as [JobNumber], c.customername as [CustomerName], i.ToolCode, i.ToolPanel, i.DescShort,i.ItemNum3      
	FROM @TempDT TDT      
	left join dispatches d (NOLOCK) on d.dispatchnumber = TDT.dispatchnumber      
	left join ItemNums i (NOLOCK) on i.ItemNum = TDT.ItemNum      
	left join JobS j (NOLOCK) on j.dispatchnumber = d.dispatchnumber      
	left join Customers c (NOLOCK) on c.CustomerId = j.CustomerId
     
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ExportDailyAssetUtilizationReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ============================================================================
-- Author:		SUYEB  MOHAMMAD
-- Create date: 15 March 2017
-- Description: This stored procedure is used to export daily utilization report
-- ==============================================================================
CREATE PROCEDURE [dbo].[usp_ExportDailyAssetUtilizationReport] --'<Filters><StartDate>2015-1-1</StartDate><EndDate>2016-9-1</EndDate></Filters>'
	@xmlData xml =  NULL
AS
BEGIN
SET NOCOUNT ON;
	DECLARE @StartDate VARCHAR(20)
	DECLARE @EndDate VARCHAR(20)
	DECLARE @SQLQuery NVARCHAR(2000)
	--DECLARE @GroupByOrderByClause VARCHAR(50)=' GROUP BY year,month ORDER BY year,month'	
	DECLARE @whereClause VARCHAR(MAX)

	SELECT T.c.value('.', 'VARCHAR(max)') AS Countries
	INTO #Countries
	FROM @xmlData.nodes('/Filters/Country/Id') T(c)
	
	SELECT T.c.value('.', 'VARCHAR(200)') AS Regions
	INTO #Regions
	FROM @xmlData.nodes('/Filters/Region/Id') T(c)
	
	SELECT T.c.value('.', 'VARCHAR(300)') AS ProductLine 
	INTO #ProductLine
	FROM @xmlData.nodes('/Filters/ProductLine/Id') T(c)
	
	SELECT T.c.value('.', 'VARCHAR(300)') AS BranchPlant 
	INTO #BranchPlant
	FROM @xmlData.nodes('/Filters/BranchPlant/Id') T(c)

	SELECT T.c.value('.', 'VARCHAR(300)') AS ToolCode
	INTO #ToolCode
	FROM @xmlData.nodes('/Filters/ToolCode/Id') T(c)

	SELECT T.c.value('.', 'VARCHAR(300)') AS ToolPanel 
	INTO #ToolPanel
	FROM @xmlData.nodes('/Filters/ToolPanel/Id') T(c)


	SET @StartDate = (SELECT T.c.value('.', 'DATE') AS FromDate FROM @xmlData.nodes('/Filters/StartDate') T(c))
	SET @EndDate = (SELECT T.c.value('.', 'DATE') AS ToDate FROM @xmlData.nodes('/Filters/EndDate') T(c))

	SET @whereClause=''

IF((SELECT COUNT(*) FROM #Regions) > 0)
	BEGIN
		SET @whereClause = @whereClause + ' AND Region in (select Regions from #Regions)'
	END
 IF((SELECT COUNT(*) FROM #Countries) > 0)
 	BEGIN
		SET @whereClause = @whereClause + ' AND Country in (select Countries from #Countries)'
	END	
IF((SELECT COUNT(*) FROM #BranchPlant) > 0)
	BEGIN
		SET @whereClause = @whereClause + ' AND BranchPlant in (select BranchPlant from #BranchPlant)'
	END

IF((select count(*) from #ToolCode) > 0)
BEGIN
		SET @whereClause = @whereClause + ' AND ToolCode in (select ToolCode from #ToolCode)'
END
IF((select count(*) from #ProductLine) > 0)
BEGIN
		SET @whereClause = @whereClause + ' AND ProductLineId in (select ProductLine from #ProductLine)'
END	

IF((select count(*) from #ToolPanel) > 0)
BEGIN
		SET @whereClause = @whereClause + ' AND ToolPanel in (select ToolPanel from #ToolPanel)'
END							

IF(@StartDate IS NOT NULL AND @EndDate IS NOT NULL )
	BEGIN
			SET @whereClause = @whereClause + ' AND  (InventoryDate'
			+ ' >= ''' + @StartDate + ''' AND InventoryDate <= ''' + @EndDate +''')'
	END

SET @SQLQuery= 'SELECT [BranchPlant], 											
	[Country],											
	[region],											
	[ProductLineCode],											
	[ToolCode],											
	[ToolPanel],											
	ISNull([IsGlobalRepair], 0) AS IsGlobalRepair,
	[InventoryDate],
	SUM([Unuseable]) [Unuseable],
	SUM([Useable]) [Useable],
	SUM([Working]) [Working]											
    FROM vwAssetUtilizationReportDaily
	WHERE 1 = 1 '
	IF(@whereClause<>'')
		BEGIN
		SET @SQLQuery=@SQLQuery+@whereClause
		END
	SET @SQLQuery=@SQLQuery + 'GROUP BY [BranchPlant], 											
	[Country],											
	[region],											
	[ProductLineCode],											
	[ToolCode],											
	[ToolPanel],											
	ISNull([IsGlobalRepair], 0),
	[InventoryDate]'

	--print @SQLQuery

	EXEC (@SQLQuery)

	
	DROP TABLE #Countries
	DROP TABLE #Regions
	DROP TABLE #ProductLine
	DROP TABLE #BranchPlant
	DROP TABLE #ToolCode
	DROP TABLE #ToolPanel
END

GO
/****** Object:  StoredProcedure [dbo].[usp_FixAIRTDisposition]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_FixAIRTDisposition]
	@ARTNumber as VARCHAR(25)
	, @ShipToBranchPlant as VARCHAR(12)
	, @Disposition as int

AS
BEGIN
	SET NOCOUNT ON

	DECLARE @ERR INT
		,@AssetRepairTrackId UNIQUEIDENTIFIER
		,@DispositionId int
		
	SET @ERR = 0
	SELECT @AssetRepairTrackId = AssetRepairTrackId
	FROM AssetRepairTrack 
	WHERE ARTNumber = @ARTNumber
	
	SELECT TOP(1) @DispositionId = DispositionId
	FROM ARTDispositions
	WHERE Status = 'Approved' AND AssetRepairTrackId = @AssetRepairTrackId
	ORDER BY DateAdded DESC
	
	BEGIN TRAN

	IF @AssetRepairTrackId IS NULL
	BEGIN
		SET @ERR = -10 -- Invalid ART
		ROLLBACK TRAN
		SELECT @ERR
		RETURN @ERR
	END
	
	IF @DispositionId IS NULL
	BEGIN
		SET @ERR = -20 -- Invalid Disposition
		ROLLBACK TRAN
		SELECT @ERR
		RETURN @ERR
	END
		
	UPDATE AssetRepairTrack SET 
		ShipToBranchPlant = @ShipToBranchPlant
	WHERE AssetRepairTrackId = @AssetRepairTrackId
	IF @@ERROR <> 0
	BEGIN
		ROLLBACK TRAN
		SELECT -30
		RETURN -30
	END
	
	UPDATE ARTDispositions SET 
		ShipToLocation = @ShipToBranchPlant
		, Disposition = @Disposition
	WHERE DispositionId = @DispositionId
	IF @@ERROR <> 0
	BEGIN
		ROLLBACK TRAN
		SELECT -40
		RETURN -40
	END

	COMMIT TRAN
	
	SELECT 0
	RETURN 0
	
	SET NOCOUNT OFF

END


GO
/****** Object:  StoredProcedure [dbo].[usp_FixAIRTMapping]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_FixAIRTMapping]
	@NewFixedAssetId as UNIQUEIDENTIFIER
	, @OldSerialNum as VARCHAR(30)
	, @OldInventoryItemNum as VARCHAR(30)
	, @UserId int = 0

AS
BEGIN
	SET NOCOUNT ON

	DECLARE @ERR INT
		,@NewSerialNum VARCHAR(30)
		,@InventoryItemNum VARCHAR(30)
		,@RNItemNum VARCHAR(30)
	
	DECLARE @AuditActionId int

	SET @ERR = 0
	SELECT @NewSerialNum = SerialNum
		, @InventoryItemNum = InventoryItemNum
		, @RNItemNum = RNItemNum
	FROM FixedAssets 
	WHERE FixedAssetId = @NewFixedAssetId
	
	BEGIN TRAN

	IF @NewSerialNum IS NULL
	BEGIN
		SET @ERR = -10 -- Invalid SerialNum
		ROLLBACK TRAN
		SELECT @ERR
		RETURN @ERR
	END
	
	IF @InventoryItemNum IS NULL OR @InventoryItemNum = ''
	BEGIN
		SET @ERR = -20 -- Invalid Inventory Item Num
		ROLLBACK TRAN
		SELECT @ERR
		RETURN @ERR
	END
	
	IF @RNItemNum IS NULL OR @RNItemNum = ''
	BEGIN
		SET @ERR = -30 -- Invalid RN Item Num
		ROLLBACK TRAN
		SELECT @ERR
		RETURN @ERR
	END
	
	insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
	values (27, @UserId, 'Modify AIRT Serial Num: ' + @OldSerialNum + ' to FixedAssetId: ' + convert(varchar(64), @NewFixedAssetId), getdate(), '', 'AssetRepairTrack')

	Set @AuditActionId = @@IDENTITY

	insert into AuditAssetRepairTrack
	select @AuditActionId, * from AssetRepairTrack WHERE SerialNum = @OldSerialNum

	UPDATE AssetRepairTrack SET 
		FixedAssetId = @NewFixedAssetId
		, ItemNum = @InventoryItemNum
		, SerialNum = @NewSerialNum 
	WHERE SerialNum = @OldSerialNum AND ItemNum = @OldInventoryItemNum

	IF @@ERROR <> 0
	BEGIN
		ROLLBACK TRAN
		SELECT -40
		RETURN -40
	END
	
	insert into AuditPFTWO
	select @AuditActionId, * from PFTWO WHERE SerialNum = @OldSerialNum

	UPDATE PFTWO SET 
		FixedAssetId = @NewFixedAssetId
		, ItemNum = @InventoryItemNum
		, SerialNum = @NewSerialNum 
	WHERE SerialNum = @OldSerialNum AND ItemNum = @OldInventoryItemNum

	IF @@ERROR <> 0
	BEGIN
		ROLLBACK TRAN
		SELECT -50
		RETURN -50
	END

	insert into AuditWorkOrders
	select @AuditActionId, * from WorkOrders WHERE SerialNum = @OldSerialNum

	UPDATE WorkOrders SET 
		FixedAssetId = @NewFixedAssetId
		, InventoryItemNum = @InventoryItemNum
		, EndRNItemNum = @RNItemNum
		, SerialNum = @NewSerialNum 
	WHERE SerialNum = @OldSerialNum AND InventoryItemNum = @OldInventoryItemNum

	IF @@ERROR <> 0
	BEGIN
		ROLLBACK TRAN
		SELECT -60
		RETURN -60
	END
	
	COMMIT TRAN
	
	SELECT 0
	RETURN 0
	
	SET NOCOUNT OFF

END
GO
/****** Object:  StoredProcedure [dbo].[usp_FixedAssetCustomPropSearch]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_FixedAssetCustomPropSearch]
	@xmlData XML
AS

SET NOCOUNT ON

DECLARE @sql VARCHAR(max)
DECLARE @startIndex VARCHAR(10)
DECLARE @pageSize VARCHAR(10)
DECLARE @sortField VARCHAR(64)
DECLARE @sortDir VARCHAR(64)
DECLARE @whereClause VARCHAR(max)
DECLARE @custPropFields VARCHAR(max)

SELECT @startIndex = T.c.value('.', 'VARCHAR(10)')
FROM @xmlData.nodes('/Filters/StartIndex')T(c);

SELECT @pageSize = T.c.value('.', 'VARCHAR(10)')
FROM @xmlData.nodes('/Filters/PageSize')T(c);

SELECT @sortField = T.c.value('.', 'VARCHAR(64)')
FROM @xmlData.nodes('/Filters/SortField')T(c);

SELECT @sortDir = T.c.value('.', 'VARCHAR(64)')
FROM @xmlData.nodes('/Filters/SortDir')T(c);

SELECT @whereClause = T.c.value('.', 'VARCHAR(max)')
FROM @xmlData.nodes('/Filters/WhereClause')T(c);

SELECT @custPropFields = T.c.value('.', 'VARCHAR(max)')
FROM @xmlData.nodes('/Filters/CustomPropFields')T(c);

SET @sql = ' SELECT * FROM (
		SELECT  fas.* '
	IF(LEN(@custPropFields) > 0 )
	BEGIN
		SET @sql = @sql +	', fav.* '
	END
	
	SET @sql = @sql +	'
	FROM vwFixedAssetsSearch fas '
	IF(LEN(@custPropFields) > 0 )
	BEGIN
	SET @sql = @sql + ' LEFT OUTER JOIN (
							SELECT * FROM (
								SELECT FixedAssetId As FixedAssetValueFixedAssetId, DataFieldId, DisplayValue
								FROM vwFixedAssetValues				
							) AS a
							PIVOT (
								MAX([DisplayValue]) FOR [DataFieldId] IN (' + @custPropFields + ' )
							) AS p
						) AS fav ON fas.FixedAssetId = fav.FixedAssetValueFixedAssetId '
	END	
	
	 SET @sql = @sql + ') AS fas ' + @whereClause

DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') a'
EXECUTE (@sqlString)



DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY [' + @sortField + '] ' + @sortDir + ') as RowNum, * From ( ' + 
		@sql + ') query ) page 
		where page.RowNum > ' + @startIndex + ' order by [' + @sortField + '] ' + @sortDir

EXECUTE(@pagingSql)

--print @pagingSql;
SET NOCOUNT OFF








GO
/****** Object:  StoredProcedure [dbo].[usp_FixedAssetParentWithChild]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_FixedAssetParentWithChild]    
(    
  @withchild bit,
  @where varchar(max)
)    

AS    
-------------------------------------------------------------------------------------------------------------    
--   Purpose  : Find out Fixed Asset Parent with Child   
--    
--   Modified : [Mangesh Taware] - 27/11/2017 - Created    
-------------------------------------------------------------------------------------------------------------    
BEGIN    
 BEGIN    

 Declare @SQLString nvarchar(max)

 if (@withchild = 0)
 begin
 SET @SQLString =  'SELECT  *  FROM    [VW_FixedAssetParentChildSearch]  

			       WHERE ' + @where

 end
 if (@withchild = 1)
 begin
 SET @SQLString =  N';WITH ret AS( SELECT  *  FROM    [VW_FixedAssetParentChildSearch]  
			       WHERE ' + @where +
				   'UNION ALL  SELECT  t.*  
					FROM    [VW_FixedAssetParentChildSearch] t INNER JOIN  
					ret r ON t.ParentFixedAssetId = r.FixedAssetId   
					)  SELECT  *  FROM    ret' 
 end

   exec  ( @SQLString);

 END    

End
GO
/****** Object:  StoredProcedure [dbo].[usp_FormMassReleased]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 -- =================================================================================================================
-- Author:		Mangesh Taware
-- Description:	This procedure is used for mass released forms 
-- User pass collection Ids with comma separated, with  reason
-- ===============================================================================================================
 
 CREATE PROCEDURE [dbo].[usp_FormMassReleased]
  (
  @CollectionObjectIds VARCHAR(MAX),
  @ReasonForChange VARCHAR(4000),
  @WFTUserName VARCHAR(50)
)
AS

 BEGIN

  DECLARE @PFTChanges table (OldPFTObjectId int,
    OldFormCollectionObjectId int,
    NewFormCollectionObjectId int)
	-- Select forms which are needed to release 

  INSERT INTO @PFTChanges
  SELECT DISTINCT oldPFT.ObjectId, oldPftSteps.ObjectId, steps.entry
  FROM dbo.ListToTable(@CollectionObjectIds) As steps
    JOIN PFTObjects newPftSteps ON steps.entry = newPftSteps.ObjectId
    JOIN PFTObjects oldPftSteps ON oldPftSteps.ObjectNumber = newPftSteps.ObjectNumber and oldPftSteps.[State] = 4 -- superseded
    JOIN PFTObjectMappings oldMapping ON oldMapping.ObjectId = oldPftSteps.ObjectId
    JOIN PFTObjects oldPFT ON oldPFT.ObjectId = oldMapping.ParentId AND oldPFT.[State] = 3 -- released
    LEFT JOIN PFTObjects inWorkPFT on oldPFT.ObjectNumber = inWorkPFT.ObjectNumber AND inWorkPFT.[State] < 3
  -- In Work Or submitted
  WHERE inWorkPFT.ObjectId IS NULL

   -- This table for set record modify DISTINCT form objectid
   CREATE TABLE #ModifyForm(Id INT IDENTITY(1, 1) ,FormObjectId int)
   
   -- Select Only distict form object id 
   INSERT #ModifyForm
   SELECT DISTINCT OldPFTObjectId  FROM @PFTChanges
           ORDER BY OldPFTObjectId
		    

	Declare @MaxTransferId INT=0,@TransferIdCounter INT=1
	SELECT DISTINCT @MaxTransferId=Max(Id),@TransferIdCounter=MIN(Id) from #ModifyForm	


  WHILE  @MaxTransferId>=@TransferIdCounter  
BEGIN
	  DECLARE @FormId int ;
	  SELECT @FormId = FormObjectId	  FROM #ModifyForm  WHERE Id = @TransferIdCounter

	  print @FormId;

    --- Update Form state Superseded 
    UPDATE PFTObjects SET [State] = 4  WHERE
        ObjectNumber in (
            SELECT ObjectNumber
      FROM PFTObjects
      WHERE ObjectId = @FormId
         ) AND [State] = 3

    --- Copy Relese version and create new Form with new Revision number and state released
    INSERT INTO PFTObjects
    SELECT
      ObjectNumber, 
      Revision + 1 AS Revision,
      Type,
      Name, 
	  Description, 
	  ProductLineId, 
	  3 As State,
      Field1, 
	  Field2, 
	  Field3, 
	  Field4, 
	  Field5,
      @WFTUserName, 
	  GETDATE(), 
	  null, 
	  null,
      @ReasonForChange ReasonForChange,
      Field6, 
	  Field7, 
	  Field8,
	  Field9,
	  Field10,
	  [Field11],
	  [Field12],
	  [Field13],
	  [Field14],
	  [Field15]
    FROM PFTObjects
    WHERE ObjectId = @FormId

    --- Find new version Form object Id
    DECLARE @newFormObjectId  int;
    SELECT @newFormObjectId = ObjectId
			FROM PFTObjects
    WHERE ObjectNumber in (SELECT ObjectNumber
			FROM PFTObjects
      WHERE ObjectId = @FormId)
      AND [State] = 3

    -- Insert in mapping table collection object id with new objectid
    INSERT INTO PFTObjectMappings
    SELECT @newFormObjectId ParentId,
      isnull((SELECT top 1 NewFormCollectionObjectId
      FROM @PFTChanges
      where OldPFTObjectId = @FormId and OldFormCollectionObjectId = pm.ObjectId),pm.ObjectId)
               ObjectId,
      pm.SequenceNumber, pm.CreatedBy, pm.CreatedOn, null, null
    FROM PFTObjects pft
	JOIN PFTObjectMappings pm ON pm.ObjectId = pft.ObjectId
    WHERE pm.ParentId = @FormId


    EXECUTE usp_PFTObject_ReleaseForm @newFormObjectId
  
SET @TransferIdCounter=@TransferIdCounter+1
  END
  DROP TABLE #ModifyForm
   

END


GO
/****** Object:  StoredProcedure [dbo].[usp_FracasCreateBHA]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_FracasCreateBHA] (
	@sIncidentID as uniqueidentifier,
	@iInitialReviewUpdate bit,
	@sInitialReview as varchar(3000),
	@iUserID as int) 

AS
SET NOCOUNT ON

DECLARE @sFracasID uniqueidentifier
SET @sFracasID = newid()

IF (@iInitialReviewUpdate = 1)
BEGIN
	INSERT INTO FracasAudit (FracasID, CommentBox, UserID, CommentDate)
	VALUES (@sFracasID, 'InitialReview', @iUserID, GetDate())
END
ELSE
BEGIN
	SET @sInitialReview = NULL
END

INSERT INTO FracasBHA (IncidentID, FracasDate, StatusID, InitialReview, StageCount)
VALUES (@sIncidentID, GetDate(), 1, @sInitialReview, @iInitialReviewUpdate)

SELECT @sFracasID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_FRACASMapBranchPlants]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_FRACASMapBranchPlants]
	@xmlData as xml
AS
BEGIN
	SET NOCOUNT ON;

	declare @Country varchar(50)
	select @Country = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Country') T(c);

	declare @Region varchar(50)
	select @Region = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Region') T(c);
	
	Select distinct bp.BranchPlant
			, bp.Latitude
			, bp.Longitude
	from FracasComponents (NOLOCK) fc
	INNER JOIN Incidents (NOLOCK) i on i.IncidentID = fc.IncidentID
	INNER JOIN Runs (NOLOCK) r on r.RunID = i.RunID
	INNER JOIN Wells (NOLOCK) w on w.WellID = r.WellID
	INNER JOIN Jobs (NOLOCK) j on j.JobID = w.JobID
	LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) country on country.Country = j.Country
	LEFT JOIN Regions (NOLOCK) region on region.Region = j.Region
	LEFT JOIN ToolStringComponentInfo (NOLOCK) tsci ON tsci.IncidentID = i.IncidentID AND tsci.FixedAssetID = fc.FixedAssetID
	WHERE fc.IsDeleted = 0 AND fc.StageCount > 0 AND tsci.FA = 1
	and region.Region = IsNull(@Region, region.Region) AND country.Country = IsNull(@Country, country.Country)
	ORDER by bp.BranchPlant
	
	
    Select bp.BranchPlant
			, (CASE 
					WHEN fc.StageCount = 1 THEN 'Initial Review'
					WHEN fc.StageCount = 2 THEN 'Test Results'
					WHEN fc.StageCount = 3 THEN 'Root Cause'
					WHEN fc.StageCount = 4 THEN 'Corrective Action'
				End) as StageDesc
			, fc.StageCount				
			, SUM(case WHEN tsp.Type = 'HEL/LWD' then 1 else 0 end) as LWD
			, SUM(case WHEN (tsp.Type = 'EM' OR tsp.Type = 'PP') then 1 else 0 end) as EMPP
			, SUM(case WHEN (tsp.Type = 'MOTOR') then 1 else 0 end) as DD
			, SUM(case WHEN tsp.Type = 'RSS' then 1 else 0 end) as RSS
	from FracasComponents (NOLOCK) fc
	INNER JOIN ToolStrings (NOLOCK) tsp ON tsp.ToolStringID = fc.ToolStringID
	INNER JOIN Incidents (NOLOCK) i on i.IncidentID = fc.IncidentID
	INNER JOIN Runs (NOLOCK) r on r.RunID = i.RunID
	INNER JOIN Wells (NOLOCK) w on w.WellID = r.WellID
	INNER JOIN Jobs (NOLOCK) j on j.JobID = w.JobID
	LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) country on country.Country = j.Country
	LEFT JOIN Regions (NOLOCK) region on region.Region = j.Region
	LEFT JOIN ToolStringComponentInfo (NOLOCK) tsci ON tsci.IncidentID = i.IncidentID AND tsci.FixedAssetID = fc.FixedAssetID
	WHERE fc.IsDeleted = 0 AND fc.StageCount > 0 AND tsci.FA = 1
	and region.Region = IsNull(@Region, region.Region) AND country.Country = IsNull(@Country, country.Country)
	GROUP by bp.BranchPlant, fc.StageCount
	ORDER by bp.BranchPlant, fc.StageCount
	
	
	-- 7 days and 30 days data
	Select bp.BranchPlant, fc.IncidentID, i.FailureDate, tsp.Type
	INTO #tblData
	from FracasComponents (NOLOCK) fc
	INNER JOIN ToolStrings (NOLOCK) tsp ON tsp.ToolStringID = fc.ToolStringID
	INNER JOIN Incidents (NOLOCK) i on i.IncidentID = fc.IncidentID
	INNER JOIN Runs (NOLOCK) r on r.RunID = i.RunID
	INNER JOIN Wells (NOLOCK) w on w.WellID = r.WellID
	INNER JOIN Jobs (NOLOCK) j on j.JobID = w.JobID
	LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) country on country.Country = j.Country
	LEFT JOIN Regions (NOLOCK) region on region.Region = j.Region
	LEFT JOIN ToolStringComponentInfo (NOLOCK) tsci ON tsci.IncidentID = i.IncidentID AND tsci.FixedAssetID = fc.FixedAssetID
	WHERE fc.IsDeleted = 0 AND fc.StageCount > 0 AND tsci.FA = 1
	AND FailureDate >= convert(varchar, getdate()-30, 112) 
	AND region.Region = IsNull(@Region, region.Region) AND country.Country = IsNull(@Country, country.Country)
	group by bp.BranchPlant, fc.IncidentID, i.FailureDate, tsp.Type
		
	-- <= 7 Days
	Select BranchPlant
			, ISNULL(SUM(case WHEN Type = 'HEL/LWD' then 1 else 0 end), 0) as LWD
			, ISNULL(SUM(case WHEN (Type = 'EM' OR Type = 'PP') then 1 else 0 end), 0) as EMPP
			, ISNULL(SUM(case WHEN (Type = 'MOTOR') then 1 else 0 end), 0) as DD
			, ISNULL(SUM(case WHEN Type = 'RSS' then 1 else 0 end), 0) as RSS
	from #tblData
	Where FailureDate >= convert(varchar, getdate()-7, 112) 
	group by BranchPlant
	ORDER by BranchPlant
	
	-- <= 30 Days
	Select BranchPlant
			, ISNULL(SUM(case WHEN Type = 'HEL/LWD' then 1 else 0 end), 0) as LWD
			, ISNULL(SUM(case WHEN (Type = 'EM' OR Type = 'PP') then 1 else 0 end), 0) as EMPP
			, ISNULL(SUM(case WHEN (Type = 'MOTOR') then 1 else 0 end), 0) as DD
			, ISNULL(SUM(case WHEN Type = 'RSS' then 1 else 0 end), 0) as RSS
	from #tblData
	Where FailureDate >= convert(varchar, getdate()-30, 112) 
	GROUP by BranchPlant
	ORDER by BranchPlant
	
	DROP TABLE #tblData

END




/****** Object:  StoredProcedure [dbo].[usp_FRACASMapCountries]    Script Date: 08/05/2014 20:15:32 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_FRACASMapCountries]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_FRACASMapCountries]
	@xmlData as xml
AS
BEGIN
	SET NOCOUNT ON;

	declare @Region varchar(50)
	select @Region = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Region') T(c);
	
	Select distinct country.Country
			, country.Latitude
			, country.Longitude
	from FracasComponents (NOLOCK) fc
	INNER JOIN Incidents (NOLOCK) i on i.IncidentID = fc.IncidentID
	INNER JOIN Runs (NOLOCK) r on r.RunID = i.RunID
	INNER JOIN Wells (NOLOCK) w on w.WellID = r.WellID
	INNER JOIN Jobs (NOLOCK) j on j.JobID = w.JobID
	LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) country on country.Country = j.Country
	LEFT JOIN Regions (NOLOCK) region on region.Region = j.Region
	LEFT JOIN ToolStringComponentInfo (NOLOCK) tsci ON tsci.IncidentID = i.IncidentID AND tsci.FixedAssetID = fc.FixedAssetID
	WHERE fc.IsDeleted = 0 AND fc.StageCount > 0 AND tsci.FA = 1
	and region.Region = IsNull(@Region, region.Region)
	ORDER by country.Country
	
	
    Select country.Country
			, (CASE 
					WHEN fc.StageCount = 1 THEN 'Initial Review'
					WHEN fc.StageCount = 2 THEN 'Test Results'
					WHEN fc.StageCount = 3 THEN 'Root Cause'
					WHEN fc.StageCount = 4 THEN 'Corrective Action'
				End) as StageDesc
			, fc.StageCount				
			, SUM(case WHEN tsp.Type = 'HEL/LWD' then 1 else 0 end) as LWD
			, SUM(case WHEN (tsp.Type = 'EM' OR tsp.Type = 'PP') then 1 else 0 end) as EMPP
			, SUM(case WHEN (tsp.Type = 'MOTOR') then 1 else 0 end) as DD
			, SUM(case WHEN tsp.Type = 'RSS' then 1 else 0 end) as RSS
	from FracasComponents (NOLOCK) fc
	INNER JOIN ToolStrings (NOLOCK) tsp ON tsp.ToolStringID = fc.ToolStringID
	INNER JOIN Incidents (NOLOCK) i on i.IncidentID = fc.IncidentID
	INNER JOIN Runs (NOLOCK) r on r.RunID = i.RunID
	INNER JOIN Wells (NOLOCK) w on w.WellID = r.WellID
	INNER JOIN Jobs (NOLOCK) j on j.JobID = w.JobID
	LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) country on country.Country = j.Country
	LEFT JOIN Regions (NOLOCK) region on region.Region = j.Region
	LEFT JOIN ToolStringComponentInfo (NOLOCK) tsci ON tsci.IncidentID = i.IncidentID AND tsci.FixedAssetID = fc.FixedAssetID
	WHERE fc.IsDeleted = 0 AND fc.StageCount > 0 AND tsci.FA = 1
	and region.Region = IsNull(@Region, region.Region)
	group by country.Country, fc.StageCount
	ORDER by country.Country, fc.StageCount
	
	-- 7 days and 30 days data
	Select country.Country, fc.IncidentID, i.FailureDate, tsp.Type
	INTO #tblData
	from FracasComponents (NOLOCK) fc
	INNER JOIN ToolStrings (NOLOCK) tsp ON tsp.ToolStringID = fc.ToolStringID
	INNER JOIN Incidents (NOLOCK) i on i.IncidentID = fc.IncidentID
	INNER JOIN Runs (NOLOCK) r on r.RunID = i.RunID
	INNER JOIN Wells (NOLOCK) w on w.WellID = r.WellID
	INNER JOIN Jobs (NOLOCK) j on j.JobID = w.JobID
	LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) country on country.Country = j.Country
	LEFT JOIN Regions (NOLOCK) region on region.Region = j.Region
	LEFT JOIN ToolStringComponentInfo (NOLOCK) tsci ON tsci.IncidentID = i.IncidentID AND tsci.FixedAssetID = fc.FixedAssetID
	WHERE fc.IsDeleted = 0 AND fc.StageCount > 0 AND tsci.FA = 1
	AND FailureDate >= convert(varchar, getdate()-30, 112) 
	AND region.Region = IsNull(@Region, region.Region)
	group by country.Country, fc.IncidentID, i.FailureDate, tsp.Type
			
	-- <= 7 Days
	Select Country
			, ISNULL(SUM(case WHEN Type = 'HEL/LWD' then 1 else 0 end), 0) as LWD
			, ISNULL(SUM(case WHEN (Type = 'EM' OR Type = 'PP') then 1 else 0 end), 0) as EMPP
			, ISNULL(SUM(case WHEN (Type = 'MOTOR') then 1 else 0 end), 0) as DD
			, ISNULL(SUM(case WHEN Type = 'RSS' then 1 else 0 end), 0) as RSS
	from #tblData
	Where FailureDate >= convert(varchar, getdate()-7, 112) 
	group by Country
	ORDER by Country
	
	-- <= 30 Days
	Select Country
			, ISNULL(SUM(case WHEN Type = 'HEL/LWD' then 1 else 0 end), 0) as LWD
			, ISNULL(SUM(case WHEN (Type = 'EM' OR Type = 'PP') then 1 else 0 end), 0) as EMPP
			, ISNULL(SUM(case WHEN (Type = 'MOTOR') then 1 else 0 end), 0) as DD
			, ISNULL(SUM(case WHEN Type = 'RSS' then 1 else 0 end), 0) as RSS
	from #tblData
	Where FailureDate >= convert(varchar, getdate()-30, 112) 
	group by Country
	ORDER by Country
	
	DROP TABLE #tblData
END





/****** Object:  StoredProcedure [dbo].[usp_FRACASMapRegions]    Script Date: 08/05/2014 20:16:48 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_FRACASMapRegions]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_FRACASMapRegions]
	@xmlData as xml
AS
BEGIN
	SET NOCOUNT ON;

	Select distinct region.Region
			, region.Latitude
			, region.Longitude
	from FracasComponents (NOLOCK) fc
	INNER JOIN Incidents (NOLOCK) i on i.IncidentID = fc.IncidentID
	INNER JOIN Runs (NOLOCK) r on r.RunID = i.RunID
	INNER JOIN Wells (NOLOCK) w on w.WellID = r.WellID
	INNER JOIN Jobs (NOLOCK) j on j.JobID = w.JobID
	LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) country on country.Country = j.Country
	LEFT JOIN Regions (NOLOCK) region on region.Region = j.Region
	LEFT JOIN ToolStringComponentInfo (NOLOCK) tsci ON tsci.IncidentID = i.IncidentID AND tsci.FixedAssetID = fc.FixedAssetID
	WHERE fc.IsDeleted = 0 AND fc.StageCount > 0 AND tsci.FA = 1
	union 
	select 'Global' as Region, '30.35' as Latitude, '-35.40' as Longitude
	order by Region
	
    Select region.Region
			, (CASE 
					WHEN fc.StageCount = 1 THEN 'Initial Review'
					WHEN fc.StageCount = 2 THEN 'Test Results'
					WHEN fc.StageCount = 3 THEN 'Root Cause'
					WHEN fc.StageCount = 4 THEN 'Corrective Action'
				End) as StageDesc
			, fc.StageCount				
			, SUM(case WHEN (tsp.Type = 'HEL/LWD') then 1 else 0 end) as LWD
			, SUM(case WHEN (tsp.Type = 'EM' OR tsp.Type = 'PP') then 1 else 0 end) as EMPP
			, SUM(case WHEN (tsp.Type = 'MOTOR') then 1 else 0 end) as DD
			, SUM(case WHEN (tsp.Type = 'RSS') then 1 else 0 end) as RSS
	from FracasComponents (NOLOCK) fc
	INNER JOIN ToolStrings (NOLOCK) tsp ON tsp.ToolStringID = fc.ToolStringID
	INNER JOIN Incidents (NOLOCK) i on i.IncidentID = fc.IncidentID
	INNER JOIN Runs (NOLOCK) r on r.RunID = i.RunID
	INNER JOIN Wells (NOLOCK) w on w.WellID = r.WellID
	INNER JOIN Jobs (NOLOCK) j on j.JobID = w.JobID
	LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) country on country.Country = j.Country
	LEFT JOIN Regions (NOLOCK) region on region.Region = j.Region
	LEFT JOIN ToolStringComponentInfo (NOLOCK) tsci ON tsci.IncidentID = i.IncidentID AND tsci.FixedAssetID = fc.FixedAssetID
	WHERE fc.IsDeleted = 0 AND fc.StageCount > 0 AND tsci.FA = 1
	group by region.Region, fc.StageCount
	UNION
	Select 'Global'
			, (CASE 
					WHEN fc.StageCount = 1 THEN 'Initial Review'
					WHEN fc.StageCount = 2 THEN 'Test Results'
					WHEN fc.StageCount = 3 THEN 'Root Cause'
					WHEN fc.StageCount = 4 THEN 'Corrective Action'
				End) as StageDesc
			, fc.StageCount
			, SUM(case WHEN tsp.Type = 'HEL/LWD' then 1 else 0 end) as LWD
			, SUM(case WHEN (tsp.Type = 'EM' OR tsp.Type = 'PP') then 1 else 0 end) as EMPP
			, SUM(case WHEN (tsp.Type = 'MOTOR') then 1 else 0 end) as DD
			, SUM(case WHEN tsp.Type = 'RSS' then 1 else 0 end) as RSS
	from FracasComponents (NOLOCK) fc
	INNER JOIN ToolStrings (NOLOCK) tsp ON tsp.ToolStringID = fc.ToolStringID
	INNER JOIN Incidents (NOLOCK) i on i.IncidentID = fc.IncidentID
	INNER JOIN Runs (NOLOCK) r on r.RunID = i.RunID
	INNER JOIN Wells (NOLOCK) w on w.WellID = r.WellID
	INNER JOIN Jobs (NOLOCK) j on j.JobID = w.JobID
	LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) country on country.Country = j.Country
	LEFT JOIN Regions (NOLOCK) region on region.Region = j.Region
	LEFT JOIN ToolStringComponentInfo (NOLOCK) tsci ON tsci.IncidentID = i.IncidentID AND tsci.FixedAssetID = fc.FixedAssetID
	WHERE fc.IsDeleted = 0 AND fc.StageCount > 0 AND tsci.FA = 1
	GROUP BY fc.StageCount
	ORDER BY region.Region, fc.StageCount
	
	
	-- 7 days and 30 days data
	Select region.Region, fc.IncidentID, i.FailureDate, tsp.Type
	INTO #tblData
	from FracasComponents (NOLOCK) fc
	INNER JOIN ToolStrings (NOLOCK) tsp ON tsp.ToolStringID = fc.ToolStringID
	INNER JOIN Incidents (NOLOCK) i on i.IncidentID = fc.IncidentID
	INNER JOIN Runs (NOLOCK) r on r.RunID = i.RunID
	INNER JOIN Wells (NOLOCK) w on w.WellID = r.WellID
	INNER JOIN Jobs (NOLOCK) j on j.JobID = w.JobID
	LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) country on country.Country = j.Country
	LEFT JOIN Regions (NOLOCK) region on region.Region = j.Region
	LEFT JOIN ToolStringComponentInfo (NOLOCK) tsci ON tsci.IncidentID = i.IncidentID AND tsci.FixedAssetID = fc.FixedAssetID
	WHERE fc.IsDeleted = 0 AND fc.StageCount > 0 AND tsci.FA = 1
	AND i.FailureDate >= convert(varchar, getdate()-30, 112) 
	GROUP BY region.Region, fc.IncidentID, i.FailureDate, tsp.Type
	
	-- <= 7 Days
	Select Region
			, ISNULL(SUM(case WHEN Type = 'HEL/LWD' then 1 else 0 end), 0) as LWD
			, ISNULL(SUM(case WHEN (Type = 'EM' OR Type = 'PP') then 1 else 0 end), 0) as EMPP
			, ISNULL(SUM(case WHEN (Type = 'MOTOR') then 1 else 0 end), 0) as DD
			, ISNULL(SUM(case WHEN Type = 'RSS' then 1 else 0 end), 0) as RSS
	from #tblData
	Where FailureDate >= convert(varchar, getdate()-7, 112) 
	group by Region
	UNION
	Select 'Global'
			, ISNULL(SUM(case WHEN Type = 'HEL/LWD' then 1 else 0 end), 0) as LWD
			, ISNULL(SUM(case WHEN (Type = 'EM' OR Type = 'PP') then 1 else 0 end), 0) as EMPP
			, ISNULL(SUM(case WHEN (Type = 'MOTOR') then 1 else 0 end), 0) as DD
			, ISNULL(SUM(case WHEN Type = 'RSS' then 1 else 0 end), 0) as RSS
	from #tblData
	Where FailureDate >= convert(varchar, getdate()-7, 112) 
	ORDER by Region
	
	-- <= 30 Days
	Select Region
			, ISNULL(SUM(case WHEN Type = 'HEL/LWD' then 1 else 0 end), 0) as LWD
			, ISNULL(SUM(case WHEN (Type = 'EM' OR Type = 'PP') then 1 else 0 end), 0) as EMPP
			, ISNULL(SUM(case WHEN (Type = 'MOTOR') then 1 else 0 end), 0) as DD
			, ISNULL(SUM(case WHEN Type = 'RSS' then 1 else 0 end), 0) as RSS
	from #tblData
	Where FailureDate >= convert(varchar, getdate()-30, 112) 
	group by Region
	UNION
	Select 'Global'
			, ISNULL(SUM(case WHEN Type = 'HEL/LWD' then 1 else 0 end), 0) as LWD
			, ISNULL(SUM(case WHEN (Type = 'EM' OR Type = 'PP') then 1 else 0 end), 0) as EMPP
			, ISNULL(SUM(case WHEN (Type = 'MOTOR') then 1 else 0 end), 0) as DD
			, ISNULL(SUM(case WHEN Type = 'RSS' then 1 else 0 end), 0) as RSS
	from #tblData
	Where FailureDate >= convert(varchar, getdate()-30, 112) 
	ORDER by Region
	
	DROP TABLE #tblData
END





/****** Object:  StoredProcedure [dbo].[usp_FracasUpdateBHA]    Script Date: 08/05/2014 20:18:37 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_FracasUpdateBHA]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_FracasUpdateBHA] (
	@sFracasID as uniqueidentifier,
	@sIncidentID as uniqueidentifier,
	@iDistrictDD as tinyint,
	@iDistrictLWD as tinyint,
	@iDistrictMWD as tinyint,
	@iDistrictRSS as tinyint,
	@iDistrictSURVEY as tinyint,
	@iGlobalDD as tinyint,
	@iGlobalLWD as tinyint,
	@iGlobalMWD as tinyint,
	@iGlobalRSS as tinyint,
	@iGlobalSURVEY as tinyint,
	@iInitialReviewUpdate bit,
	@sInitialReview as varchar(3000),
	@iTestResultsUpdate bit,
	@sTestResults as varchar(3000),
	@iRootCauseUpdate bit,
	@sRootCause as varchar(3000),
	@iCorrectiveActionUpdate bit,
	@sCorrectiveAction as varchar(3000),
	@iUserID as int) 

AS
SET NOCOUNT ON

UPDATE FracasBHA
SET Dist_LWD = @iDistrictLWD
, Dist_DD = @iDistrictDD
, Dist_MWD = @iDistrictMWD
, Dist_RSS = @iDistrictRSS
, Dist_SURVEY = @iDistrictSURVEY
, Global_LWD = @iGlobalLWD
, Global_DD = @iGlobalDD
, Global_MWD = @iGlobalMWD
, Global_RSS = @iGlobalRSS
, Global_SURVEY = @iGlobalSURVEY
WHERE FracasID = @sFracasID

--FRACAS COMMENT STAGES--
IF (@iInitialReviewUpdate = 1)
BEGIN
	UPDATE FracasBHA
	SET InitialReview = @sInitialReview
	WHERE FracasID = @sFracasID

	INSERT INTO FracasAudit (FracasID, CommentBox, UserID, CommentDate)
	VALUES (@sFracasID, 'InitialReview', @iUserID, GetDate())
END

IF (@iTestResultsUpdate = 1)
BEGIN
	UPDATE FracasBHA
	SET TestResults = @sTestResults
	WHERE FracasID = @sFracasID

	INSERT INTO FracasAudit (FracasID, CommentBox, UserID, CommentDate)
	VALUES (@sFracasID, 'TestResults', @iUserID, GetDate())
END

IF (@iRootCauseUpdate = 1)
BEGIN
	UPDATE FracasBHA
	SET RootCause = @sRootCause
	WHERE FracasID = @sFracasID

	INSERT INTO FracasAudit (FracasID, CommentBox, UserID, CommentDate)
	VALUES (@sFracasID, 'RootCause', @iUserID, GetDate())
END

IF (@iCorrectiveActionUpdate = 1)
BEGIN
	UPDATE FracasBHA
	SET CorrectiveAction = @sCorrectiveAction
	WHERE FracasID = @sFracasID

	INSERT INTO FracasAudit (FracasID, CommentBox, UserID, CommentDate)
	VALUES (@sFracasID, 'CorrectiveAction', @iUserID, GetDate())
END

DECLARE @iStageCount as tinyint
SELECT @iStageCount = (Select Case When TestResults Is Null Then 1 
						When RootCause Is Null Then 2 
						When CorrectiveAction Is Null Then 3 
						When InitialReview Is Not Null And TestResults Is Not Null And RootCause Is Not Null And CorrectiveAction Is Not Null Then 4 
						Else 0 End 
						From FracasBHA (NOLOCK) 
						Where FracasID = @sFracasID)

UPDATE FracasBHA
SET StageCount = @iStageCount
WHERE FracasID = @sFracasID


--HANDLE FRACAS REPORT STATUS--
DECLARE @iStatusID tinyint
DECLARE @iOpenRowCnt tinyint
SET @iOpenRowCnt = (SELECT Count(*) As OpenRows FROM FracasBHA (NOLOCK) f 
						LEFT JOIN FracasComponents (NOLOCK) fc ON fc.IncidentID = f.IncidentID AND fc.IsDeleted = 0
						WHERE (f.StageCount <> 4 or fc.StageCount <> 4) AND f.IncidentID = @sIncidentID)

IF (@iOpenRowCnt > 0)
BEGIN
	SET @iStatusID = 1
END
ELSE
BEGIN
	DECLARE @sDistFilter varchar(100)
	DECLARE @sGlobalFilter varchar(100)
	SET @sDistFilter = ''	
	SELECT @sDistFilter = @sDistFilter + 'Dist_' + ToolType + ' = 1 AND '
	FROM (
	SELECT Case t.Type 
		When 'HEL/LWD' Then 'LWD'
		When 'HEL/EM' Then 'LWD'
		When 'MOTOR' Then 'DD'
		When 'RSS' Then 'RSS'
		When 'SURVEY' Then 'SURVEY'
		Else 'MWD' End As ToolType
	FROM ToolStringComponentInfo (NOLOCK) tsci
	LEFT JOIN ToolStrings (NOLOCK) t ON t.ToolStringID = tsci.ToolStringID
	WHERE tsci.FA = 1 AND tsci.IncidentID = @sIncidentID
	GROUP BY t.Type
	) TMP

	SET @sDistFilter = Left(@sDistFilter, Len(@sDistFilter)-4)

	DECLARE @iClosed tinyint
	DECLARE @sSQL as nvarchar(200)
	DECLARE @sParmDefinition as nvarchar(100)

	SET @sSQL = N'SELECT @iDistrictOUT = Count(*) FROM FracasBHA (NOLOCK) WHERE IncidentID = @sIncidentIdIN AND ' + @sDistFilter;
	SET @sParmDefinition = N'@sIncidentIdIN uniqueidentifier, @iDistrictOUT tinyint OUTPUT';

	EXEC sp_executesql @sSQL, @sParmDefinition, @sIncidentIdIN=@sIncidentID, @iDistrictOUT=@iClosed OUTPUT

	IF (@iClosed > 0)
	BEGIN
		SET @iStatusID = 99
		SET @sGlobalFilter = Replace(@sDistFilter,'Dist','Global')

		
		SET @sSQL = N'SELECT @iGlobalOUT = Count(*) FROM FracasBHA (NOLOCK) WHERE IncidentID = @sIncidentIdIN AND ' + @sGlobalFilter;
		SET @sParmDefinition = N'@sIncidentIdIN uniqueidentifier, @iGlobalOUT tinyint OUTPUT';

		EXEC sp_executesql @sSQL, @sParmDefinition, @sIncidentIdIN=@sIncidentID, @iGlobalOUT=@iClosed OUTPUT

		IF (@iClosed > 0)
		BEGIN
			SET @iStatusID = 0
		END
	END
END

UPDATE FracasBHA
SET StatusID = @iStatusID
WHERE FracasID = @sFracasID

SET NOCOUNT OFF




/****** Object:  StoredProcedure [dbo].[usp_FracasUpdateComponent]    Script Date: 08/05/2014 20:20:30 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_FracasUpdateComponent]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_FracasUpdateComponent] (
	@sIncidentID as uniqueidentifier,
	@sToolStringID as uniqueidentifier,
	@iPartTypeID as int,
	@sSerialNum as varchar(30),
	@sCommentBox as varchar(20),
	@sValue as varchar(3000),
	@iUserID as int) 

AS
SET NOCOUNT ON

DECLARE @sFracasComponentID uniqueidentifier
SET @sFracasComponentID = (Select FracasComponentID From FracasComponents Where IncidentID = @sIncidentID And ToolStringID = @sToolStringID And PartTypeID = @iPartTypeID And SerialNum = @sSerialNum)

IF (@sCommentBox = 'MyFracas')
BEGIN
	IF (@sValue = 'true')
	BEGIN
		INSERT INTO FracasOwners
		VALUES (@sFracasComponentID, @iUserID)
	END
	ELSE
	BEGIN
		DELETE FROM FracasOwners WHERE FracasComponentID = @sFracasComponentID AND UserID = @iUserID
	END
END
ELSE
BEGIN
	
	IF (@sCommentBox = 'InitialReview')
	BEGIN
		UPDATE FracasComponents
		SET InitialReview = @sValue
		WHERE FracasComponentID = @sFracasComponentID
	END
	ELSE IF (@sCommentBox = 'TestResults')
	BEGIN
		UPDATE FracasComponents
		SET TestResults = @sValue
		WHERE FracasComponentID = @sFracasComponentID
	END
	ELSE IF (@sCommentBox = 'RootCause')
	BEGIN
		UPDATE FracasComponents
		SET RootCause = @sValue
		WHERE FracasComponentID = @sFracasComponentID
	END
	ELSE IF (@sCommentBox = 'CorrectiveAction')
	BEGIN
		UPDATE FracasComponents
		SET CorrectiveAction = @sValue
		WHERE FracasComponentID = @sFracasComponentID
	END

	DECLARE @iStageCount as tinyint
	SELECT @iStageCount = (Select Case When TestResults Is Null Then 1 
							When RootCause Is Null Then 2 
							When CorrectiveAction Is Null Then 3 
							When InitialReview Is Not Null And TestResults Is Not Null And RootCause Is Not Null And CorrectiveAction Is Not Null Then 4 
							Else 0 End 
							From FracasComponents 
							Where FracasComponentID = @sFracasComponentID)

	UPDATE FracasComponents
	SET StageCount = @iStageCount
	WHERE FracasComponentID = @sFracasComponentID

	INSERT INTO FracasAudit (FracasComponentID, CommentBox, UserID, CommentDate)
	VALUES (@sFracasComponentID, @sCommentBox, @iUserID, GetDate())
END

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[USP_GET_AIRTINFO]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[USP_GET_AIRTINFO]
	@AssetRepairTrackId varchar(200)=NULL
AS
BEGIN

Declare @SRPFTWOId varchar(200),@ITPFTWOId varchar(200),@HasFailedITPFTStep varchar(50)='',@HasFailedSRPFTStep varchar(50)=''
Declare @AIRTStatus varchar(50)='',@Disposition varchar(25)=''
Declare @SRPFTWorkOrderId varchar(200)

--Get AIRT details 
  SELECT  A.SerialNum as AIRTSerialNum,A.ItemNum as AIRTItemNum,A.RNItemNum as AIRTRNItemNum,B.InventoryItemNum as AIRTInvItemNum
         ,A.ARTNumber as AIRTNum,A.FixedAssetId as AIRTFixedAssetId,A.[Status] as AIRTFinalStatus
         ,A.CPARId as AIRTCPARId,  A.SRPFTWOId as AIRTSRPFTWOId,A.ITPFTWOId as AIRTITPFTWOId
		 ,A.FromBranchPlant as TestingBranch,TP.CompanyName as TestingBranchDesc , A.ShipToBranchPlant As RepaireBranch
		 ,RP.CompanyName as RepairingBranchDesc
		 ,A.ItemDesc as [AIRTDescription]
		 ,DP.DispatchNumber [AIRTDTNum]
		 ,BD.BranchPlant [AIRTDTBranch]
		 ,C.CustomerName [AIRTDTCustName]
		 ,A.ToolStringInfoId AIRTToolStringInfoId
		 ,ISNULL(U.lastname,'')+','+ISNULL(U.firstname,'') [AIRTClosedBy]
		 ,A.DateClosed [AIRTClosedDate]
		
	  INTO #TempAIRT
      FROM  AssetRepairTrack  A 
			INNER JOIN [dbo].[FixedAssets] B ON A.FixedAssetId=B.FixedAssetId
			LEFT  JOIN BranchPlants TP ON A.FromBranchPlant=TP.BranchPlant
			LEFT  JOIN BranchPlants RP ON A.ShipToBranchPlant=RP.BranchPlant
			LEFT  JOIN Dispatches DP ON DP.DispatchNumber= A.DispatchNumber
			LEFT  JOIN BranchPlants BD on BD.BranchPlant = DP.BranchPlant
			LEFT  JOIN Customers C ON C.CustomerNumber= DP.JDECustomerNumber
			LEFT  JOIN Users U   ON A.CloseBy = U.WFTUserName
			LEFT  JOIN WorkOrders W ON A.WorkOrderNum =W.WorkOrderNum
			LEFT  JOIN Users WU   ON W.ClosedBy = WU.WFTUserName
      WHERE AssetRepairTrackId=@AssetRepairTrackId

--InvItemNum
Declare @ToolStringInfoId varchar(200)
--SR and TI PFT status logic
select @SRPFTWOId=AIRTSRPFTWOId,@ITPFTWOId=AIRTITPFTWOId,@AIRTStatus=AIRTFinalStatus,@ToolStringInfoId=AIRTToolStringInfoId from #TempAIRT

SELECT TOP 1 @SRPFTWOId = pftwoid,@SRPFTWorkOrderId=WorkOrderId FROM PFTWO WHERE AssetRepairTrackId = @AssetRepairTrackId ORDER BY DateAdded desc

Declare @WOClosedDate datetime,@WOClosedBy varchar(30)

SELECT  @WOClosedDate = W.DateClosed  
		 ,@WOClosedBy = ISNULL(WU.lastname,'')+','+ISNULL(WU.firstname,'')   From WorkOrders w
		 LEFT  JOIN Users WU   ON W.ClosedBy = WU.WFTUserName where WorkOrderId = @SRPFTWorkOrderId 


if (IsNull(@SRPFTWOId,'')<>'')
BEGIN
	SELECT @HasFailedSRPFTStep =  CASE  
			 -- WHEN ReasonForChange in ('Closed - Failed','Closed – Failed') Then 'Complete With Failed Steps'
			 WHEN ReasonForChange in ('Closed - Passed','Closed – Passed') Then 'Passed – Complete'
			 WHEN ReasonForChange  = 'Closed – Rollback' Then 'Not Complete'
			 WHEN (ReasonForChange in ('Open') OR ReasonForChange IS NULL)  AND Active = 1 Then 
				  Case (Select Top 1  PFTResult from PFTWOSeq where  PFTWOId=@SRPFTWOId order by DateAdded desc)
						WHEN 'F' THEN 'Failed Step' 
						ELSE 'In Progress' END
			 WHEN Active = 0 Then 'Passed – Complete' -- For old PFTWO not set ReasonForChange 
	End  FROM PFTWO WHERE
	PFTWOId = @SRPFTWOId
END

SELECT @HasFailedITPFTStep =  CASE  
			 WHEN ReasonForChange in ('Closed - Failed','Closed – Failed') Then 'Failed Inspection'
			 WHEN ReasonForChange in ('Closed - Passed','Closed – Passed') Then 'Passed Inspection'
			 WHEN ReasonForChange in ('Closed – Skip to Services') Then 'Skip to Service'
			 WHEN (ReasonForChange in ('Open') OR ReasonForChange IS NULL)  AND Active = 1 Then 'In Progress'
			 WHEN ReasonForChange in ('Reactivate') Then 'Reactivate'
			 WHEN ReasonForChange is null AND Active = 0  -- For old PFTWO not set ReasonForChange 
				THEN CASE ((select count(1)  from vwPFTWOSeq where PFTResult='F' and PFTWOId=@ITPFTWOId)) 
				WHEN 1 THEN 'Failed Inspection' Else 'Passed Inspection' END
			END
			FROM PFTWO WHERE PFTWOId = @ITPFTWOId

 --AIRT Status logic

 if (@AIRTStatus='Closed')
 begin
      if (IsNull(@SRPFTWOId,'')='')
	  begin 
	     Set @AIRTStatus='Complete'
	  end		
	 else
	   begin
	     Set @AIRTStatus='Serviced/Repaired'
	 end
 end
 else
 begin
       Set @AIRTStatus='Pending'
 end

 
 
  --Get disposition details
 select @Disposition=DispositionDesc from vwARTDispositions where AssetRepairTrackId=@AssetRepairTrackId
 Declare @FailedRunNumber varchar(30) 
 select @FailedRunNumber=RunNumber from vwToolStringComponentInfo where ToolStringInfoId= @ToolStringInfoId
--Get run fail data
 select @HasFailedSRPFTStep as HasFailedSRPFTStep,@HasFailedITPFTStep as HasFailedITPFTStep,
        @AIRTStatus as AIRTStatus,@Disposition as Disposition,@FailedRunNumber as FailedRunNumber
		 ,@WOClosedDate [WOClosedDate]
		 ,@WOClosedBy [WOClosedBy],*
		 from #TempAIRT

 drop table #TempAIRT

End






GO
/****** Object:  StoredProcedure [dbo].[USP_GET_PFTWOFORMS]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
Author Name : Ganesh Abdagire
Descriotion : Created to get the Forms printing data
*/
CREATE PROCEDURE [dbo].[USP_GET_PFTWOFORMS]
	-- Add the parameters for the stored procedure here
	@PFTWOId uniqueidentifier
AS
BEGIN
	
	SET NOCOUNT ON;
    
	select Obj.[Name] FormName,Forms.Result,Forms.PFTWOFormId  
	from [dbo].[PFTWOForms]  Forms
	inner join dbo.PFTObjects Obj on  Forms.ObjectId =Obj.ObjectId
	where PFTWOId=@PFTWOId


END


GO
/****** Object:  StoredProcedure [dbo].[USP_GET_PFTWOFORMSCOLLECTION]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*
Author : Ganesh
Desc : This is used to get the collection information for the form
Date : 10/12/2019 
*/
CREATE PROCEDURE [dbo].[USP_GET_PFTWOFORMSCOLLECTION]
	-- Add the parameters for the stored procedure here
	@PFTWOFormId uniqueidentifier
AS
BEGIN
	
   SET NOCOUNT ON;

   select Obj.[Name] CollName,FormsColl.Result,FormsColl.PFTWOFormCollectionId 
   from dbo.[PFTWOFormCollections] FormsColl
   inner join dbo.PFTObjects Obj on  FormsColl.ObjectId =Obj.ObjectId
   where PFTWOFormId=@PFTWOFormId

END

GO
/****** Object:  StoredProcedure [dbo].[USP_GET_PFTWOFORMSCOLLECTIONFIELDS]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USP_GET_PFTWOFORMSCOLLECTIONFIELDS]
	-- Add the parameters for the stored procedure here
	@PFTWOFormCollectionId uniqueidentifier
AS
BEGIN
	
   SET NOCOUNT ON;

   SELECT  Obj1.[Name] FieldName,
          FormsColl1.Result,
		  UM.OptionLabel,
		  IsNull(obj1.Field8,'-') As Field8,
		  IsNull(FormsColl1.TextResult1,'-') As TextResult1,
		  IsNull(obj1.Field9,'-') As Field9,
		  IsNull(FormsColl1.TextResult2,'-') As TextResult2,
		  IsNull(obj1.Field10,'-') As Field10, 
		  IsNull(FormsColl1.TextResult3,'-') As TextResult3
   FROM [dbo].[PFTWOFormCollectionFields] FormsColl1
   INNER JOIN dbo.PFTObjects Obj1 on  FormsColl1.ObjectId = Obj1.ObjectId
   LEFT JOIN dbo.SelectOptions UM on UM.OptionValue = FormsColl1.UOM and UM.SelectName='FormFieldUOM'
   where PFTWOFormCollectionId =@PFTWOFormCollectionId


END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetActualMeterReading]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=====================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 30th Nov 2016
--DESCRIPTION: To get threshold value of tools for cbm
--=======================================================
--5/10/2019 -- Added condition 9(Pulse count) -- Sachin Mhalungekar
--=======================================================
CREATE PROCEDURE [dbo].[usp_GetActualMeterReading]
@FixedAssetId UNIQUEIDENTIFIER,
@MeterReadingType INTEGER,
@LastReadingValue DECIMAL(18,2) OUTPUT,
@TotalMeterReadingValue DECIMAL(18,2) OUTPUT
AS
BEGIN

	SELECT
		@TotalMeterReadingValue =	CASE	
											WHEN @MeterReadingType = 1 THEN SUM(OperHrs) 
											WHEN @MeterReadingType = 9 THEN SUM(PulseCount) 
											ELSE SUM(circhrs) 
									END,
		@LastReadingValue =			SUM(CASE 
											WHEN  r.EndDate > ISNULL(a.Dateadded,'1900-01-01')
											THEN 
												CASE 
													WHEN @MeterReadingType = 1  THEN OperHrs 
													WHEN @MeterReadingType = 2  THEN CircHrs 
													WHEN @MeterReadingType = 9  THEN PulseCount
												END

										ELSE  0 
										END) 
	FROM Runs (NOLOCK) r
	JOIN CBMRunAssetMappings (NOLOCK) m ON r.RunID = m.RunId
	LEFT JOIN (SELECT MAX(pws.DateAdded) DateAdded, @fixedAssetId [fixedAssetId]
				FROM PMDispositionItems pdi (NOLOCK) 
				JOIN PMDispositions pd (NOLOCK) ON pd.AssetRepairTrackId = pdi.AssetRepairTrackId AND pd.PFTConfigId = pdi.PFTConfigId AND MeterReadingTypeId = @MeterReadingType
				JOIN PFTWO pw (NOLOCK) ON pw.AssetRepairTrackId = pd.AssetRepairTrackId AND pw.PFTType = 3 AND pw.Active = 0
				JOIN PFTWOSeq pws (NOLOCK) ON pws.PFTWOId = pw.PFTWOId 
				WHERE pdi.FixedAssetId = @fixedAssetId
		) AS a ON a.FixedAssetId = m.FixedAssetId
	WHERE m.fixedAssetId = @fixedAssetId


 END

GO
/****** Object:  StoredProcedure [dbo].[USP_GETAIRTDETAILS]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- USP_GETAIRTDETAILS 'C577A7DB-B75F-4F42-95C5-A7A800C39DF2'
CREATE PROCEDURE [dbo].[USP_GETAIRTDETAILS]
@AssetRepairTrackId uniqueidentifier
As
begin
   
   Declare @AIRTCLOSEDATE datetime,@USERFULLNAME varchar(200)

   SELECT top 1 @AIRTCLOSEDATE=PWOSEQ.DATEADDED,@USERFULLNAME =ISNULL(US.LASTNAME,'')+','+ISNULL(US.FIRSTNAME,'')  
   FROM VWPFTWOSEQ PWOSEQ 
   INNER JOIN USERS US
   ON PWOSEQ.USERID=US.USERID
   WHERE  AssetRepairTrackId =@AssetRepairTrackId 
   order by PWOSEQ.DATEADDED desc
  
   /*============================================================================================================================================== */
   SELECT ARTNumber,SerialNum, ItemNum , ItemDesc,AddedBy ,DateAdded,DateClosed,CONVERT(datetime,@AIRTCLOSEDATE) AIRTCLOSEDATE ,CONVERT(varchar(200),@USERFULLNAME) USERFULLNAME
   FROM   
   ASSETREPAIRTRACK  
   where AssetRepairTrackId=@AssetRepairTrackId

end

GO
/****** Object:  StoredProcedure [dbo].[USP_GETAIRTWODETAILS]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_GETAIRTWODETAILS]
@ASSETREPAIRTRACKID uniqueidentifier,
@TimeZoneId int
AS 

BEGIN

	SELECT J.WORKORDERNUM, J.LINENUMBER AS [LINE NUMBER], J.SERIALNUM AS [SERIAL/LOT NUMBER], J.INVENTORYITEMNUM AS [ITEM NUMBER], 
		   I.DESCSHORT AS [ITEM DESCRIPTION], 
		   CASE WHEN QUANTITY < 0 THEN ABS(QUANTITY) 
		   WHEN QUANTITY > 0 THEN QUANTITY * - 1 ELSE QUANTITY END AS QUANTITY, 
		   [dbo].[ufnTimeZoneConvert](@TimeZoneId,J.TRANSACTIONDATE) AS [ISSUE DATE]
	FROM   ASSETREPAIRTRACK AS A WITH (NOLOCK) INNER JOIN
		   PFTWO AS P WITH (NOLOCK) ON P.ASSETREPAIRTRACKID = A.ASSETREPAIRTRACKID INNER JOIN
		   JDEWOSWAPINFEEDS AS J WITH (NOLOCK) ON J.WORKORDERNUM = P.JDEWORKORDERNUM INNER JOIN
		   ITEMNUMS AS I WITH (NOLOCK) ON I.ITEMNUM = J.INVENTORYITEMNUM
	WHERE  (A.ASSETREPAIRTRACKID = @ASSETREPAIRTRACKID)
	ORDER BY J.WORKORDERNUM,[LINE NUMBER]

END


GO
/****** Object:  StoredProcedure [dbo].[usp_GetAllDispatchInstanceToolstringsForExport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_GetAllDispatchInstanceToolstringsForExport]
	@xmlData xml
AS
BEGIN
	DECLARE @dispatchInstanceId uniqueidentifier
	
	select @dispatchInstanceId = T.c.value('.', 'uniqueidentifier') from @xmlData.nodes('/Filters/dispatchInstanceId') T(c);

	select t.ToolstringId 
		, t.SerialNumber As ToolSheet
		, t.[Description] As ToolDesc
		, (Select ts.ShortName From ToolStringSize ts Where ts.ToolSizeID = t.SizeID) As ToolSize
		, t.ToolYear
		, t.[Type] As ToolType
		, t.BuildNumber
		, t.District
		, t.CheckSum
		, t.MotorProperty
		, t.MotorType
		, t.ToolMod
		, (Select JobNumber From Jobs (NOLOCK) j Where j.JobID = d.JobId) As JobNumber
		, STUFF((select '' + ShortName from PartTypes (NOLOCK) pt
			join ToolStringFixedAssets (NOLOCK) ta2 on ta2.PartTypeID = pt.PartTypeId
			where ta2.ToolStringID = t.ToolStringID order by ta2.sortNumber for xml path('')), 1, 0, '') as ServiceType
		, (select MAX(case when pt.EM = 0 AND pt.HYPERPULSE = 1 then 1 else 0 end)
			from PartTypes (NOLOCK) pt 
			join ToolStringFixedAssets (NOLOCK) tsfa on tsfa.PartTypeID = pt.PartTypeId
			where tsfa.ToolStringID = t.ToolStringId) AS IsHyperPulse
	from ToolStrings (NOLOCK) t 
	join DispatchInstanceItems (NOLOCK) dii on dii.ToolStringId = t.ToolStringId
	join DispatchInstances (NOLOCK) di on di.DispatchInstanceId = dii.DispatchInstanceId
	join Dispatches (NOLOCK) d on d.DispatchId = di.DispatchId
	where dii.DispatchInstanceId = @dispatchInstanceId
	
	SELECT dii.ToolstringId 
		, ta.OrderPosition
		, pt.[Name] As ComponentName
		, ta.SerialNum As SerialNumber
		, fa.AssetNumber
		, ta.InventoryItemNum As InventoryItemNumber
		, ta.RNItemNum as RNItemNumber
		, ta.Revision
		, ta.FixedAssetID
		, ta.PartTypeID
		, ta.ToolCode
		, pt.EM
		, pt.HYPERPULSE
	FROM DispatchInstanceItems (NOLOCK) dii
		JOIN ToolStringFixedAssets (NOLOCK) ta on ta.ToolStringId = dii.ToolStringID
		LEFT JOIN FixedAssets (NOLOCK) fa on fa.FixedAssetId = ta.FixedAssetID
		LEFT JOIN PartTypes (NOLOCK) pt ON pt.PartTypeID = ta.PartTypeID
	where dii.DispatchInstanceId = @dispatchInstanceId
	ORDER BY ta.OrderPosition
	         

END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetAllJarRunToolstringsForExport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetAllJarRunToolstringsForExport]
	@xmlData xml
AS
BEGIN
	DECLARE @jobId uniqueidentifier
	
	select @jobId = T.c.value('.', 'uniqueidentifier') from @xmlData.nodes('/Filters/jobId') T(c);

	select distinct t.ToolstringId 
		, t.SerialNumber As ToolSheet
		, t.[Description] As ToolDesc
		, (Select ts.ShortName From ToolStringSize ts Where ts.ToolSizeID = t.SizeID) As ToolSize
		, t.ToolYear
		--, t.[Type] As ToolType
		,CASE UPPER(ISNULL(t.[Type],'')) 
	WHEN 'EM' THEN 'EM/HYPERPULSE'
	WHEN 'PP' THEN 'EM/HYPERPULSE' ELSE UPPER(ISNULL(t.[Type],'')) END  As ToolType
		, t.BuildNumber
		, t.District
		, t.CheckSum
		, t.MotorProperty
		, t.MotorType
		, t.ToolMod
		, (Select JobNumber From Jobs (NOLOCK) j Where j.JobID = @jobId) As JobNumber
		, STUFF((select '' + ShortName from PartTypes (NOLOCK) pt
			join ToolStringFixedAssets (NOLOCK) ta2 on ta2.PartTypeID = pt.PartTypeId
			where ta2.ToolStringID = t.ToolStringID order by ta2.sortNumber for xml path('')), 1, 0, '') as ServiceType
		, (select MAX(case when pt.EM = 0 AND pt.HYPERPULSE = 1 then 1 else 0 end)
			from PartTypes (NOLOCK) pt 
			join ToolStringFixedAssets (NOLOCK) tsfa on tsfa.PartTypeID = pt.PartTypeId
			where tsfa.ToolStringID = t.ToolStringId) AS IsHyperPulse
	from ToolStrings (NOLOCK) t 
	join JarRunTools jrt on jrt.ToolStringId = t.ToolStringId
	where jrt.JobId = @jobId
	
	SELECT distinct jrt.ToolstringId 
		, ta.OrderPosition
		, pt.[Name] As ComponentName
		, ta.SerialNum As SerialNumber
		, fa.AssetNumber
		, ta.InventoryItemNum As InventoryItemNumber
		, ta.RNItemNum as RNItemNumber
		, ta.Revision
		, ta.FixedAssetID
		, ta.PartTypeID
		, ta.ToolCode
		, pt.EM
		, pt.HYPERPULSE
	FROM JarRunTools (NOLOCK) jrt
		JOIN ToolStringFixedAssets (NOLOCK) ta on ta.ToolStringId = jrt.ToolStringID
		LEFT JOIN FixedAssets (NOLOCK) fa on fa.FixedAssetId = ta.FixedAssetID
		LEFT JOIN PartTypes (NOLOCK) pt ON pt.PartTypeID = ta.PartTypeID
	where jrt.JobId = @jobId
	ORDER BY jrt.ToolStringId, ta.OrderPosition
	         

END


GO
/****** Object:  StoredProcedure [dbo].[usp_GetApprovalAuditDetail]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_GetApprovalAuditDetail]
	@AuditId		UNIQUEIDENTIFIER,
	@RequestType	VARCHAR(10) = 'CR/NCR'
	
AS
BEGIN
	SET NOCOUNT ON;

		SELECT     AuditRequestApprovals.AuditRequestApprovalId, AuditRequestApprovals.AuditId, AuditRequestApprovals.ApprovalId, AuditRequestApprovals.RequestId, 
							  Approver.UserId AS ApproverUserId, Approver.UserName AS ApproverUserName, Approver.FirstName AS ApproverFirstName, Approver.LastName AS ApproverLastName, 
							  ApprovedBy.UserId AS ApprovedByUserId, ApprovedBy.UserName AS ApprovedByUserName, ApprovedBy.FirstName AS ApprovedByFirstName, ApprovedBy.LastName AS ApprovedByLastName,
							  IsApprovedByOther = CASE WHEN Approver.UserId <> ApprovedBy.UserId THEN 'Y' ELSE 'N' END
		FROM         AuditRequestApprovals WITH(NOLOCK) INNER JOIN
							  Users AS Approver WITH(NOLOCK) ON AuditRequestApprovals.UserId = Approver.UserId LEFT JOIN
							  Users AS ApprovedBy WITH(NOLOCK) ON AuditRequestApprovals.ApprovedBy = ApprovedBy.UserId
		WHERE		AuditRequestApprovals.AuditId = @AuditId
	
END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetARTDispositionApprovers]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetARTDispositionApprovers]
	@sApprovalCode varchar(16),
	@iApproverType smallint,
	@sLocId varchar(16),
	@sProductLine varchar(50)=NULL,
	@iAssetRepairTrackId varchar(36)=NULL,
	@iCurrentApproverId int=NULL,
	@iCurrentUserId int=NULL,
	@bIsLevel2Approver bit=0,
	@bGetInitialLevel2ApproverId bit=0,
	@bIsGlobalApprover bit=0,
	@bIncludeGlobal bit=0
AS

DECLARE @sSQL varchar(Max)
DECLARE @sWhere varchar(Max)


SET @sSQL = 'SELECT DISTINCT a.UserId, u.UserName, u.Email, LTRIM(RTRIM(u.FirstName + '' '' + u.LastName)) AS FullName, a.IsDefault'

IF @bIsLevel2Approver = 1 OR (@bIsGlobalApprover = 1 AND @iApproverType = 10)
BEGIN
	SET @sSQL = @sSQL + ', CONVERT(bit, 1) AS CanApproveLevel2'
END
ELSE
BEGIN
	SET @sSQL = @sSQL + ', CONVERT(bit, 0) AS CanApproveLevel2'
END

SET @sProductLine = ISNULL(@sProductLine,'-1')

SET @sSQL = @sSQL + ', CASE WHEN ( ProductLine = '''+ @sProductLine +''' AND LocId = '''+ @sLocId +''' ) THEN 1 '
SET @sSQL = @sSQL + '  WHEN ( ProductLine = '''+ @sProductLine +''' AND LocId IS NULL ) THEN 2 '
SET @sSQL = @sSQL + '  WHEN ( LocId = '''+ @sLocId +''' AND ProductLine IS NULL ) THEN 3 '
SET @sSQL = @sSQL + '  WHEN ( ProductLine IS NULL AND LocId IS NULL ) THEN 4 END ApproverFilterLevel '

SET @sSQL = @sSQL + ' FROM MCApprovers (NOLOCK) a LEFT JOIN Users (NOLOCK) u ON a.UserId=u.UserId'



SET @sWhere = ' WHERE ApprovalCode=''' + @sApprovalCode + ''' AND ApproverType=' + CONVERT(varchar(5),@iApproverType)

SET @sWhere = @sWhere + ' AND (	'
SET @sWhere = @sWhere + ' (ProductLine = '''+ @sProductLine +''' AND LocId = '''+ @sLocId +''') '
SET @sWhere = @sWhere + '  OR (ProductLine = '''+ @sProductLine +''' AND LocId IS NULL) '
SET @sWhere = @sWhere + '  OR (LocId = '''+ @sLocId +''' AND ProductLine IS NULL) '


IF @bIncludeGlobal = 1
BEGIN
SET @sWhere = @sWhere + '  OR (ProductLine IS NULL AND LocId IS NULL ) '
END

SET @sWhere = @sWhere + ' ) '

IF @bIsGlobalApprover = 1
BEGIN
	SET @sWhere = @sWhere + ' AND ProductLine IS NULL AND LocId IS NULL '
END

IF ISNULL(@iAssetRepairTrackId, '') <> '' AND ISNULL(@iCurrentApproverId, -1) <> -1 AND @bIsGlobalApprover = 0
BEGIN
	-- Exclude initial submitter and all previous approvers from the list
	SET @sWhere = @sWhere + ' AND a.UserId NOT IN (SELECT UserIdAdded FROM vwARTDispositions WHERE AssetRepairTrackId=''' + @iAssetRepairTrackId + ''' AND UserIdAdded <> ' + CONVERT(varchar(10),@iCurrentApproverId) + ')'
END

IF ISNULL(@iCurrentUserId, -1) <> -1 AND ISNULL(@iCurrentUserId, -1) <> -1
BEGIN
	-- Return only current user from the approvers list
	SET @sWhere = @sWhere + ' AND a.UserId = ' + CONVERT(varchar(10),@iCurrentUserId)
END


SET @sSQL = @sSQL + @sWhere

IF @bGetInitialLevel2ApproverId = 1
BEGIN
	SET @sSQL = 'SELECT TOP 1 UserId FROM ( ' + @sSQL + ' ) a ORDER BY ApproverFilterLevel '
END
ELSE
BEGIN
	SET @sSQL = @sSQL + ' ORDER BY ApproverFilterLevel , u.UserName'
END

--PRINT(@sSQL)

EXEC (@sSQL)



/****** Object:  StoredProcedure [dbo].[usp_GetDocItemSubscriptions]    Script Date: 08/06/2014 13:14:11 ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[usp_GetAssetByPartClassification]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




 CREATE PROCEDURE [dbo].[usp_GetAssetByPartClassification]
(
	@NodeLevel varchar(2) = '1',
	@PartClassification varchar(512) = null,
	@IsLeaf varchar(1) = '0',
	@SQL nvarchar(MAX) = null
)
AS
SET ANSI_NULLS ON
	
	set @SQL = 'select res.value as ''@Value'',	
	res.value' 
	IF (@IsLeaf != '1')
	BEGIN
		set @SQL = @SQL + '  + '' ('' +cast(count(*) as varchar)+ '')'''
	END
	ELSE
	BEGIN
		set @SQL = @SQL + ' + '' - '' + ISNULL(res.AssetDescription,''*'')'
	END
		
	set @SQL = @SQL + ' as ''@Text'',
	
	CASE WHEN LEFT(res.value,1) != ''@'' THEN  ''0'' ELSE ''1'' END as ''@IsLeafParent'''
	IF (@IsLeaf != '0')
	BEGIN
		set @SQL = @SQL + ',''../Parts/AssetInfoDisplay.aspx?id='' +lower(res.FixedAssetId) as ''@URL'''
	END
	set @SQL = @SQL + ' from (	
	Select CASE WHEN (LEFT(re.value,1) != ''@'' AND LEFT(re.value,1) != ''$'') THEN re.value ELSE 

	CASE WHEN LEFT(re.value,1) != ''$'' THEN ''@'' + re.ItemNum ELSE re.SerialNum END END as value,
	re.FixedAssetId, re.AssetDescription
	from (
	SELECT (select val from dbo.Split(''\'', CASE WHEN RIGHT(PartClassification,1) != ''\'' THEN PartClassification ELSE Left(PartClassification,LEN(PartClassification)-1) END + ''\@'' + ''\$'') where NodeLevel = ' + @NodeLevel + ') as Value,
	FixedAssetId, AssetDescription, ItemNum, SerialNum  
	FROM FixedAssets AS fa (NOLOCK) INNER JOIN
		 ItemNums AS i (NOLOCK) ON fa.InventoryItemNum = i.ItemNum 
	where SerialNum is not null'	
	
	IF (@NodeLevel != '1')
	BEGIN
		set @SQL = @SQL + ' AND LEFT(CASE WHEN RIGHT(PartClassification,1) != ''\'' THEN PartClassification ELSE Left(PartClassification,LEN(PartClassification)-1) END + ''\'' + ItemNum + ''\'', LEN(''' + @PartClassification + ''')) = ''' + @PartClassification + ''''
	END
	
	set @SQL = @SQL + ')re where re.Value is not null) res
	where res.value is not null
	group by res.value'
	
	IF (@IsLeaf != '0')
	BEGIN
		set @SQL = @SQL + ',res.FixedAssetId, res.AssetDescription'
	END
	
	set @SQL = @SQL + ' FOR XML PATH(''TreeViewNode''), TYPE, ROOT(''Nodes'')'

	EXECUTE sp_executesql @SQL  




GO
/****** Object:  StoredProcedure [dbo].[usp_GetAssetRequestOutstandingQty]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==============================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 06 Nov 2015
--DESCRIPTION: TO get asset request outstanding quamtity
--==============================================================
CREATE PROC [dbo].[usp_GetAssetRequestOutstandingQty]
	@XmlData XML
AS
BEGIN
	DECLARE @ToolPanel VARCHAR(20)
	DECLARE @ToolCode VARCHAR(20)
	DECLARE @PartNumber VARCHAR(20)
	DECLARE @ProvidingRegion VARCHAR(20)
	DECLARE @RequestingRegion VARCHAR(20)
	DECLARE @ProvidingDistrict VARCHAR(20)
	DECLARE @RequestingDistrict VARCHAR(20)
	DECLARE @Status VARCHAR(20)
	DECLARE @ToCreatedDate VARCHAR(20)
	DECLARE @FromCreatedDate VARCHAR(20)
	DECLARE @ToRequiredDate VARCHAR(20)
	DECLARE @FromRequiredDate VARCHAR(20)
	DECLARE @SQLQuery NVARCHAR(1000)
	DECLARE @Param NVARCHAR(1000) = ''
	DECLARE @ParamDefinition NVARCHAR(1000)

	SET @ToolPanel = (SELECT T.c.value('.', 'VARCHAR(20)') AS FromDate FROM @xmlData.nodes('/Filters/ToolPanel') T(c))
	SET @ToolCode = (SELECT T.c.value('.', 'VARCHAR(20)') AS ToDate FROM @xmlData.nodes('/Filters/ToolCode') T(c))
	SET @PartNumber = (SELECT T.c.value('.', 'VARCHAR(20)') AS ToDate FROM @xmlData.nodes('/Filters/PartNumber') T(c))
	SET @ProvidingRegion = (SELECT T.c.value('.', 'VARCHAR(20)') AS ToDate FROM @xmlData.nodes('/Filters/ProvidingRegion') T(c))
	SET @RequestingRegion = (SELECT T.c.value('.', 'VARCHAR(20)') AS FromDate FROM @xmlData.nodes('/Filters/RequestingRegion') T(c))
	SET @ProvidingDistrict = (SELECT T.c.value('.', 'VARCHAR(20)') AS ToDate FROM @xmlData.nodes('/Filters/ProvidingDistrict') T(c))
	SET @RequestingDistrict = (SELECT T.c.value('.', 'VARCHAR(20)') AS ToDate FROM @xmlData.nodes('/Filters/RequestingDistrict') T(c))
	SET @Status = (SELECT T.c.value('.', 'VARCHAR(20)') AS ToDate FROM @xmlData.nodes('/Filters/Status') T(c))
	SET @ToCreatedDate = (SELECT T.c.value('.', 'VARCHAR(20)') AS ToDate FROM @xmlData.nodes('/Filters/ToCreatedDate') T(c))
	SET @FromCreatedDate = (SELECT T.c.value('.', 'VARCHAR(20)') AS ToDate FROM @xmlData.nodes('/Filters/FromCreatedDate') T(c))
	SET @ToRequiredDate = (SELECT T.c.value('.', 'VARCHAR(20)') AS ToDate FROM @xmlData.nodes('/Filters/ToRequiredDate') T(c))
	SET @FromRequiredDate = (SELECT T.c.value('.', 'VARCHAR(20)') AS FromDate FROM @xmlData.nodes('/Filters/FromRequiredDate') T(c))

	SET @Param = 'IsActive = ''1'' AND IsArchived = ''0'''
	IF(@ToolPanel != '')
		BEGIN SET @Param = @Param + ' AND [ToolPanel] = @ToolPanelParam' END
	IF(@ToolCode != '')
		BEGIN SET @Param = @Param + ' AND [ToolCode] = @ToolCodeParam' END
	IF(@PartNumber != '')
		BEGIN SET @Param = @Param + ' AND [ItemNum] = @PartNoParam' END
	IF(@ProvidingRegion != '')
		BEGIN SET @Param = @Param + ' AND [FromRegion] = @ProvidingRegionParam' END
	IF(@RequestingRegion != '')
		BEGIN SET @Param = @Param + ' AND [ToRegion] = @RequestingRegionParam' END
	IF(@ProvidingDistrict != '')
		BEGIN SET @Param = @Param + ' AND [FromBranchPlant] = @ProvidingDistrictParam' END
	IF(@RequestingDistrict != '')
		BEGIN SET @Param = @Param + ' AND [ToBranchPlant] = @RequestingDistrictParam' END
	IF(@Status != '' AND @Status != 'All')
		BEGIN SET @Param = @Param + ' AND [StatusName] = @StatusParam' END	
	IF(@ToCreatedDate !='' AND @FromCreatedDate != '')
		BEGIN SET @Param = @Param + ' AND ([CreateDate] BETWEEN @FromCreatedDateParam AND @ToCreatedDateParam)' END
	IF(@ToRequiredDate !='' AND @FromRequiredDate != '')
		BEGIN SET @Param = @Param + ' AND ([RequiredDate] BETWEEN @FromRequiredDateParam AND @ToRequiredDateParam)' END

	SET @SQLQuery = N'SELECT [ToolCode], SUM (QtyOutstanding) AS [qty] FROM	[vwOutstandingRequestItems] WHERE '+ @Param +' GROUP BY [ToolCode]'
	print 	@SQLQuery  									
	SET @ParamDefinition = N'@ToolCodeParam VARCHAR(20), @ToolPanelParam VARCHAR(20), @PartNoParam VARCHAR(20), @ProvidingRegionParam VARCHAR(20),@RequestingRegionParam VARCHAR(20),
							@ProvidingDistrictParam VARCHAR(20), @RequestingDistrictParam VARCHAR(20), @StatusParam VARCHAR(20), 
							@ToCreatedDateParam VARCHAR(20), @FromCreatedDateParam VARCHAR(20), @ToRequiredDateParam VARCHAR(20), @FromRequiredDateParam VARCHAR(20)'
	EXECUTE sp_Executesql	@SQLQuery, @ParamDefinition, @ToolCodeParam = @ToolCode, @ToolPanelParam = @ToolPanel, @PartNoParam = @PartNumber, @ProvidingRegionParam = @ProvidingRegion,
							@RequestingRegionParam = @RequestingRegion, @ProvidingDistrictParam = @ProvidingDistrict, @RequestingDistrictParam = @RequestingDistrict,
							@StatusParam = @Status, @ToCreatedDateParam = @ToCreatedDate, @FromCreatedDateParam = @FromCreatedDate, @ToRequiredDateParam = @ToRequiredDate,
							@FromRequiredDateParam = @FromRequiredDate						 
END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetAssetTrendReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetAssetTrendReport]
	@xmlData xml
AS

DECLARE @inventoryDateFrom AS DATE
DECLARE @inventoryDateTo AS DATE
DECLARE @viewBy	AS VARCHAR(50)
DECLARE @whereClause AS VARCHAR(MAX)
DECLARE @sql AS VARCHAR(MAX)
DECLARE @innerSQL AS VARCHAR(MAX)

DECLARE @startIndex VARCHAR(10)
DECLARE @pageSize VARCHAR(10)
DECLARE @sortField VARCHAR(100)
DECLARE @sortDir VARCHAR(64)

SELECT @inventoryDateFrom = T.c.value('.', 'DATE') FROM @xmlData.nodes('/Filters/InventoryDateFrom') T(c)
SELECT @inventoryDateTo = T.c.value('.', 'DATE') FROM @xmlData.nodes('/Filters/InventoryDateTo') T(c)
SELECT @viewBy = T.c.value('.', 'VARCHAR(5)') FROM @xmlData.nodes('/Filters/ViewBy') T(c)


SELECT @startIndex = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/StartIndex')T(c);
SELECT @pageSize = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/PageSize')T(c);
SELECT @sortField = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/SortField')T(c);
SELECT @sortDir = T.c.value('.', 'VARCHAR(64)') FROM @xmlData.nodes('/Filters/SortDir')T(c);
SELECT @whereClause = T.c.value('.', 'VARCHAR(max)') FROM @xmlData.nodes('/Filters/WhereClause')T(c);

SET @innerSQL = '
SELECT 
  CONVERT(DATE, fas.InventoryDate, 101) as InventoryDate--, fas.SerialNum --, fas.TechId , pn.ToolVersion, pn.Size
  , YEAR(CONVERT(DATE, fas.InventoryDate, 101)) AS InventoryYear
  , MONTH(CONVERT(DATE, fas.InventoryDate, 101)) AS InventoryMonth
  , DATEPART(WK, CONVERT(DATE, fas.InventoryDate, 101)) AS InventoryWeek
  , ri.ToolPanel
  , ri.ToolCode
  , fas.EquipmentStatus
  , ps.Status AS EquipmentStatusDesc
  , fas.BranchPlant
  , bp.CompanyName AS BranchPlantName
  , c.Country
  , c.CountryDesc
  , rg.Region
  , rg.RegionDesc
  , A1.InventoryCount AS NumDates
  , B1.InventoryCount AS NumInWeek      
  ,COUNT(*) AS ToolCount
FROM FixedAssetSnapshots (NOLOCK) fas
LEFT JOIN ItemNums (NOLOCK) ri ON ri.ItemNum = fas.RNItemNum
LEFT JOIN PartStatus (NOLOCK) ps ON ps.Code = fas.EquipmentStatus
LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = fas.BranchPlant
LEFT JOIN Countries (NOLOCK) c ON c.Country = bp.Country
LEFT JOIN Regions (NOLOCK) rg ON rg.Region = bp.Region
LEFT JOIN (
		SELECT Month(InventoryDate) [InventoryMonth], Year(InventoryDate) [InventoryYear], COUNT(*) [InventoryCount]
		FROM
		( SELECT DISTINCT CONVERT(DATE, InventoryDate, 101) [InventoryDate]
			FROM FixedAssetSnapshots 
			Where InventoryDate BETWEEN CONVERT(DATE, ''' + CONVERT(VARCHAR(50), @inventoryDateFrom, 101) + ''', 101) AND CONVERT(DATE, ''' + CONVERT(VARCHAR(50), @inventoryDateTo, 101) + ''', 101)
		) A
		GROUP BY Month(InventoryDate) , Year(InventoryDate)
) A1 ON A1.InventoryYear = YEAR(fas.InventoryDate) AND A1.InventoryMonth = Month(fas.InventoryDate) 
LEFT JOIN (
		SELECT Year(InventoryDate) [InventoryYear], DATEPART(WK, CONVERT(DATE, InventoryDate, 101)) [InventoryWeek], COUNT(*) [InventoryCount]
		FROM
		( SELECT DISTINCT CONVERT(DATE, InventoryDate, 101) [InventoryDate]
			FROM FixedAssetSnapshots 
			Where InventoryDate BETWEEN CONVERT(DATE, ''' + CONVERT(VARCHAR(50), @inventoryDateFrom, 101) + ''', 101) AND CONVERT(DATE, ''' + CONVERT(VARCHAR(50), @inventoryDateTo, 101) + ''', 101)
		) B
		GROUP BY Year(InventoryDate), DATEPART(WK, CONVERT(DATE, InventoryDate, 101))
) B1 ON b1.InventoryYear = YEAR(fas.InventoryDate) AND b1.InventoryWeek = DATEPART(WK, CONVERT(DATE, fas.InventoryDate, 101)) 
' + @whereClause + ' AND ps.IsTrend = 1
GROUP BY CONVERT(DATE, fas.InventoryDate, 101), ri.ToolPanel, ri.ToolCode , c.CountryDesc, rg.RegionDesc,
		 c.Country, rg.Region, fas.EquipmentStatus, ps.Status, fas.BranchPlant,bp.CompanyName, A1.InventoryCount, B1.InventoryCount'




DECLARE @viewByColumn as varchar(255)
DECLARE @viewByCount as varchar(255)
SET @viewByColumn = CASE WHEN @viewBy = 'Week' THEN ' a.InventoryWeek ' ELSE ' a.InventoryMonth ' END
SET @viewByCount = CASE WHEN @viewBy = 'Week' THEN '  a.NumInWeek ' ELSE ' a.NumDates ' END



SET @sql = '
	SELECT 
	  a.InventoryYear, ' + @viewByColumn + ' AS InventoryInterval
	  , a.ToolPanel, a.ToolCode, a.BranchPlant,a.BranchPlantName
	  , a.CountryDesc, a.RegionDesc, a.EquipmentStatus, a.EquipmentStatusDesc
	  ,' + @viewByCount + ' AS IntervalCount
	  , SUM(a.ToolCount) AS TotalToolCount
	  , SUM(a.ToolCount)/' + @viewByCount + ' AS ToolCount
	FROM (' + @innerSQL + ') a
	group by a.InventoryYear
	  , a.ToolPanel, a.ToolCode, a.BranchPlant,a.BranchPlantName
	  , a.CountryDesc, a.RegionDesc , a.EquipmentStatus, a.EquipmentStatusDesc
	  ,' + @viewByColumn + ','+ @viewByCount

DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') t '


EXECUTE (@sqlString)

DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, * From ( ' + 
		@sql + ') query ) page 
		WHERE page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir

EXECUTE(@pagingSql)


GO
/****** Object:  StoredProcedure [dbo].[usp_GetAssetTrendReport_OLD]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetAssetTrendReport_OLD]
	@xmlData xml
AS

DECLARE @inventoryDateFrom AS DATE
DECLARE @inventoryDateTo AS DATE
DECLARE @viewBy	AS VARCHAR(50)
DECLARE @whereClause AS VARCHAR(MAX)
DECLARE @sql AS VARCHAR(MAX)
DECLARE @innerSQL AS VARCHAR(MAX)

DECLARE @startIndex VARCHAR(10)
DECLARE @pageSize VARCHAR(10)
DECLARE @sortField VARCHAR(100)
DECLARE @sortDir VARCHAR(64)

SELECT @inventoryDateFrom = T.c.value('.', 'DATE') FROM @xmlData.nodes('/Filters/InventoryDateFrom') T(c)
SELECT @inventoryDateTo = T.c.value('.', 'DATE') FROM @xmlData.nodes('/Filters/InventoryDateTo') T(c)
SELECT @viewBy = T.c.value('.', 'VARCHAR(5)') FROM @xmlData.nodes('/Filters/ViewBy') T(c)


SELECT @startIndex = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/StartIndex')T(c);
SELECT @pageSize = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/PageSize')T(c);
SELECT @sortField = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/SortField')T(c);
SELECT @sortDir = T.c.value('.', 'VARCHAR(64)') FROM @xmlData.nodes('/Filters/SortDir')T(c);
SELECT @whereClause = T.c.value('.', 'VARCHAR(max)') FROM @xmlData.nodes('/Filters/WhereClause')T(c);

SET @innerSQL = '
SELECT 
  CONVERT(DATE, fas.InventoryDate, 101) as InventoryDate--, fas.SerialNum --, fas.TechId , pn.ToolVersion, pn.Size
  , YEAR(CONVERT(DATE, fas.InventoryDate, 101)) AS InventoryYear
  , MONTH(CONVERT(DATE, fas.InventoryDate, 101)) AS InventoryMonth
  , DATEPART(WK, CONVERT(DATE, fas.InventoryDate, 101)) AS InventoryWeek
  , ri.ToolPanel
  , ri.ToolCode
  , fas.EquipmentStatus
  , ps.Status AS EquipmentStatusDesc
  , fas.BranchPlant
  , bp.CompanyName AS BranchPlantName
  , c.Country
  , c.CountryDesc
  , rg.Region
  , rg.RegionDesc
  ,(SELECT COUNT(DISTINCT CONVERT(DATE, c.InventoryDate, 101)) FROM FixedAssetSnapshots c
	  WHERE YEAR(CONVERT(DATE, c.InventoryDate, 101)) = YEAR(CONVERT(DATE, fas.InventoryDate, 101)) 
	  AND MONTH(CONVERT(DATE, c.InventoryDate, 101)) = MONTH(CONVERT(DATE, fas.InventoryDate, 101))
	  AND CONVERT(DATE, c.InventoryDate, 101) BETWEEN CONVERT(DATE, ''' + CONVERT(VARCHAR(50), @inventoryDateFrom, 101) + ''', 101) AND CONVERT(DATE, ''' + CONVERT(VARCHAR(50), @inventoryDateTo, 101) + ''', 101)
	  ) AS NumDates
  ,(SELECT COUNT(DISTINCT CONVERT(DATE, c.InventoryDate, 101)) FROM FixedAssetSnapshots c
	  WHERE YEAR(CONVERT(DATE, c.InventoryDate, 101)) = YEAR(CONVERT(DATE, fas.InventoryDate, 101)) 
	  AND MONTH(CONVERT(DATE, c.InventoryDate, 101)) = MONTH(CONVERT(DATE, fas.InventoryDate, 101)) 
	  AND DATEPART(WK, CONVERT(DATE, c.InventoryDate, 101)) = DATEPART(WK, CONVERT(DATE, fas.InventoryDate, 101))
	  AND CONVERT(DATE, c.InventoryDate, 101) BETWEEN CONVERT(DATE, ''' + CONVERT(VARCHAR(50), @inventoryDateFrom, 101) + ''', 101) AND CONVERT(DATE, ''' + CONVERT(VARCHAR(50), @inventoryDateTo, 101) + ''', 101)
	  ) AS NumInWeek      
  ,COUNT(*) AS ToolCount
FROM FixedAssetSnapshots (NOLOCK) fas
LEFT JOIN ItemNums (NOLOCK) ri ON ri.ItemNum = fas.RNItemNum
LEFT JOIN PartStatus (NOLOCK) ps ON ps.Code = fas.EquipmentStatus
LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = fas.BranchPlant
LEFT JOIN Countries (NOLOCK) c ON c.Country = bp.Country
LEFT JOIN Regions (NOLOCK) rg ON rg.Region = bp.Region
' + @whereClause + ' AND ps.IsTrend = 1
GROUP BY CONVERT(DATE, fas.InventoryDate, 101), ri.ToolPanel, ri.ToolCode , c.CountryDesc, rg.RegionDesc,
		 c.Country, rg.Region, fas.EquipmentStatus, ps.Status, fas.BranchPlant,bp.CompanyName '




DECLARE @viewByColumn as varchar(255)
DECLARE @viewByCount as varchar(255)
SET @viewByColumn = CASE WHEN @viewBy = 'Week' THEN ' a.InventoryWeek ' ELSE ' a.InventoryMonth ' END
SET @viewByCount = CASE WHEN @viewBy = 'Week' THEN '  a.NumInWeek ' ELSE ' a.NumDates ' END



SET @sql = '
	SELECT 
	  a.InventoryYear, ' + @viewByColumn + ' AS InventoryInterval
	  , a.ToolPanel, a.ToolCode, a.BranchPlant,a.BranchPlantName
	  , a.CountryDesc, a.RegionDesc, a.EquipmentStatus, a.EquipmentStatusDesc
	  ,' + @viewByCount + ' AS IntervalCount
	  , SUM(a.ToolCount) AS TotalToolCount
	  , SUM(a.ToolCount)/' + @viewByCount + ' AS ToolCount
	FROM (' + @innerSQL + ') a
	group by a.InventoryYear
	  , a.ToolPanel, a.ToolCode, a.BranchPlant,a.BranchPlantName
	  , a.CountryDesc, a.RegionDesc , a.EquipmentStatus, a.EquipmentStatusDesc
	  ,' + @viewByColumn + ','+ @viewByCount

DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') t '


EXECUTE (@sqlString)

DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, * From ( ' + 
		@sql + ') query ) page 
		WHERE page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir

EXECUTE(@pagingSql)



GO
/****** Object:  StoredProcedure [dbo].[usp_GetChildAssets]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--==========================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 2nd Feb 2016
--DESCRIPTION: To get child asset
--==========================================================
CREATE PROC [dbo].[usp_GetChildAssets]
	@xmlData XML
AS
BEGIN
	DECLARE @AssetNumber VARCHAR(50)
	DECLARE	@FixedAssetId UNIQUEIDENTIFIER;
	SELECT  @AssetNumber = T.c.value('.', 'VARCHAR(50)') FROM @xmlData.nodes('/Filters/AssetNumber')T(c);

	SELECT	@FixedAssetId = [FixedAssetId] FROM [FixedAssets](NOLOCK) WHERE [AssetNumber] = @AssetNumber
	SELECT	[FixedAssetId], [AssetNumber], [SerialNum], [InventoryItemNum], [RNItemNum], [AssetDescription], [Revision], [EquipmentStatus]
	FROM	[FixedAssets](NOLOCK) 
	WHERE	[ParentFixedAssetId] = @FixedAssetId
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetComponentHistory]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=====================================================================
--CREATED BY  : SUYEB MOHAMMAD
--CREATED DATE: 06 Jan 2016
--DESCRIPTION : To get component hostory of tools
--=====================================================================
CREATE PROC [dbo].[usp_GetComponentHistory] @xmlData XML
AS
BEGIN
  BEGIN TRY
    BEGIN TRAN
	   DECLARE @FixedAssetId UNIQUEIDENTIFIER
	   SELECT  @FixedAssetId = T.c.value('.', 'UNIQUEIDENTIFIER') FROM @xmlData.nodes('/Filters/FixedAssetId')T(c);
    
	  --get the initial fa results based upon filters.
      CREATE TABLE #tblFixedAssets (
        FixedAssetId uniqueidentifier,
        SerialNum varchar(30),
        InventoryItemNum varchar(30),
        RNItemNum varchar(30),
        TopFixedAssetId uniqueidentifier
      )

      INSERT INTO #tblFixedAssets
        SELECT
          FixedAssetId,
          SerialNum,
          InventoryItemNum,
          RNItemNum,
          TopLevelFixedAssetId
        FROM FixedAssets(NOLOCK)
        WHERE ParentFixedAssetId = @FixedAssetId

      CREATE TABLE #tblFixedAssetHistory (
        FixedAssetId uniqueidentifier,
        SerialNum varchar(30),
        InventoryItemNum varchar(30),
        RNItemNum varchar(30),
        Revision varchar(2),
        Qty int NULL,
        TopFixedAssetId uniqueidentifier,
        TopSerialNum varchar(30),
        TopInventoryItemNum varchar(30),
        WorkOrderIdInstalled uniqueidentifier NULL,
        WorkOrderIdRemoved uniqueidentifier NULL
      )

		INSERT INTO #tblFixedAssetHistory
		SELECT
			fah.FixedAssetId,
			fah.SerialNum,
			fah.InventoryItemNum,
			fah.RNItemNum,
			fah.Revision,
			fah.Qty,
			wo.FixedAssetId AS TopFixedAssetId,
			wo.SerialNum AS TopSerialNum,
			wo.InventoryItemNum AS TopInventoryItemNum,
			(SELECT TOP 1 ptd.RefId
				FROM PartTransferDtl(NOLOCK) ptd
				LEFT JOIN PartTransfers(NOLOCK) pt ON pt.PartTransferId = ptd.PartTransferId
				LEFT JOIN (SELECT TOP 1 wo.WorkOrderId, fah.FixedAssetId, wo.DateAdded
							FROM FixedAssetHistory(NOLOCK) fah2
							INNER JOIN WorkOrders(NOLOCK) wo2 ON wo2.WorkOrderId = fah2.WorkOrderId
							WHERE fah2.FixedAssetId = fah.FixedAssetId AND wo.FixedAssetId = wo2.FixedAssetId AND fah2.DatedAdded <= fah.DatedAdded
							ORDER BY fah2.DatedAdded ASC) firstEntry ON ptd.FixedAssetId = firstEntry.FixedAssetId
			WHERE ptd.DateAdded < firstEntry.DateAdded AND ptd.RefType = 'WO' AND pt.TransferType = 9 AND ptd.Dest = 'IN'
			ORDER BY ptd.DateAdded DESC) AS WorkOrderIdInstalled,
			(SELECT TOP 1 ptd.RefId 
				FROM PartTransferDtl(NOLOCK) ptd
				LEFT JOIN PartTransfers(NOLOCK) pt ON pt.PartTransferId = ptd.PartTransferId
				LEFT JOIN (SELECT TOP 1 wo.WorkOrderId, fah.FixedAssetId, wo.DateAdded
					FROM FixedAssetHistory(NOLOCK) fah2
					INNER JOIN WorkOrders(NOLOCK) wo2 ON wo2.WorkOrderId = fah2.WorkOrderId 
					WHERE fah2.FixedAssetId = fah.FixedAssetId AND wo.FixedAssetId = wo2.FixedAssetId AND fah2.DatedAdded >= fah.DatedAdded
					ORDER BY fah2.DatedAdded DESC) lastEntry ON ptd.FixedAssetId = lastEntry.FixedAssetId
			WHERE ptd.DateAdded > lastEntry.DateAdded AND ptd.RefType = 'WO' AND pt.TransferType = 9 AND ptd.Source = 'IN'
			ORDER BY ptd.DateAdded ASC) AS WorkOrderIdRemoved
		FROM FixedAssetHistory(NOLOCK) fah
		INNER JOIN #tblFixedAssets(NOLOCK) falocal ON falocal.FixedAssetId = fah.FixedAssetId
		INNER JOIN WorkOrders(NOLOCK) wo ON wo.WorkOrderId = fah.WorkOrderId

      INSERT INTO #tblFixedAssetHistory
        SELECT
          ptd.FixedAssetId,
          ptd.SerialNum,
          ptd.InventoryItemNum,
          ptd.RNItemNum,
          ptd.Revision,
          ptd.Quantity AS Qty,
          wo.FixedAssetId AS TopFixedAssetId,
          wo.SerialNum AS TopSerialNum,
          wo.InventoryItemNum AS TopInventoryItemNum,
          ptd.RefId AS WorkOrderIdInstalled,
          (SELECT TOP 1
            RefId
			FROM PartTransferDtl(NOLOCK) ptd2
			LEFT JOIN PartTransfers(NOLOCK) pt2 ON pt2.PartTransferId = ptd2.PartTransferId
          WHERE ptd2.RefType = 'WO' AND pt2.TransferType = 9 AND ptd2.Source = 'IN' AND ptd2.FixedAssetId = ptd.FixedAssetId 
			AND ptd2.DateAdded > ptd.DateAdded
          ORDER BY ptd.DateAdded ASC)
          AS WorkOrderIdRemoved
        FROM PartTransferDtl(NOLOCK) ptd
        LEFT JOIN PartTransfers(NOLOCK) pt ON pt.PartTransferId = ptd.PartTransferId
        INNER JOIN #tblFixedAssets(NOLOCK) falocal ON falocal.FixedAssetId = ptd.FixedAssetId
        INNER JOIN WorkOrders(NOLOCK) wo ON wo.WorkOrderId = ptd.RefId
        WHERE ptd.RefType = 'WO' AND pt.TransferType = 9 AND ptd.Dest = 'IN'

      INSERT INTO #tblFixedAssetHistory

        SELECT
          fa.FixedAssetId,
          fa.SerialNum,
          fa.InventoryItemNum,
          fa.RNItemNum,
          fa.Revision,
          fa.CurrentItemQty AS Qty,
          fap.FixedAssetId AS TopFixedAssetId,
          fap.SerialNum AS TopSerialNum,
          fap.InventoryItemNum AS TopInventoryItemNum,
          NULL AS WorkOrderIdInstalled,
          NULL AS WorkOrderIdRemoved
        FROM FixedAssets(NOLOCK) fa
        INNER JOIN #tblFixedAssets falocal ON falocal.FixedAssetId = fa.FixedAssetId 
		INNER JOIN FixedAssets(NOLOCK) fap ON fap.FixedAssetId = fa.TopLevelFixedAssetId
        LEFT JOIN #tblFixedAssetHistory fah ON fah.FixedAssetId = fa.FixedAssetId AND fah.TopFixedAssetId = fa.TopLevelFixedAssetId
        WHERE fa.EquipmentStatus = 'IN' AND fah.FixedAssetId IS NULL

      --get parents.

      CREATE TABLE #tblFixedAssetParents (
        FixedAssetId uniqueidentifier,
        SerialNum varchar(30),
        InventoryItemNum varchar(30),
        RNItemNum varchar(30),
        Revision varchar(2),
        Qty int NULL,
        TopFixedAssetId uniqueidentifier,
        TopSerialNum varchar(30),
        TopInventoryItemNum varchar(30),
        WorkOrderIdInstalled uniqueidentifier NULL,
        WorkOrderNumInstalled varchar(30),
        JDEWorkOrderNumInstalled varchar(30),
        WorkOrderBranchPlantInstalled varchar(12),
        WorkOrderBranchPlantNameInstalled varchar(50),
        DateInstalled datetime NULL,
        WorkOrderIdRemoved uniqueidentifier NULL,
        WorkOrderNumRemoved varchar(30),
        JDEWorkOrderNumRemoved varchar(30),
        WorkOrderBranchPlantRemoved varchar(12),
        WorkOrderBranchPlantNameRemoved varchar(50),
        DateRemoved datetime NULL
      )

      INSERT INTO #tblFixedAssetParents

        SELECT DISTINCT
          fah.FixedAssetId,
          fah.SerialNum,
          fah.InventoryItemNum,
          fah.RNItemNum,
          fah.Revision,
          fah.Qty,
          fah.TopFixedAssetId,
          fah.TopSerialNum,
          fah.TopInventoryItemNum,
          fah.WorkOrderIdInstalled,
          woi.WorkOrderNum AS WorkOrderNumInstalled,
          woi.JDEWorkOrderNum AS JDEWorkOrderNumInstalled,
          woi.BranchPlant AS WorkOrderBranchPlantInstalled,
          woibp.CompanyName AS WorkOrderBranchPlantNameInstalled,
          ISNULL(woi.DateAdded, CONVERT(datetime, '08/12/2014')) AS DateInstalled,
          fah.WorkOrderIdRemoved,
          wor.WorkOrderNum AS WorkOrderNumRemoved,
          wor.JDEWorkOrderNum AS JDEWorkOrderNumRemoved,
          wor.BranchPlant AS WorkOrderBranchPlantRemoved,
          worbp.CompanyName AS WorkOrderBranchPlantNameRemoved,
          wor.DateAdded AS DateRemoved
        FROM #tblFixedAssetHistory fah
        LEFT JOIN WorkOrders(NOLOCK) woi ON woi.WorkOrderId = fah.WorkOrderIdInstalled
		LEFT JOIN BranchPlants(NOLOCK) woibp ON woibp.BranchPlant = woi.BranchPlant
		LEFT JOIN WorkOrders(NOLOCK) wor ON wor.WorkOrderId = fah.WorkOrderIdRemoved
		LEFT JOIN BranchPlants(NOLOCK) worbp ON worbp.BranchPlant = wor.BranchPlant


      SELECT
        fa.FixedAssetId,
        fa.SerialNum,
        fa.InventoryItemNum,
        fa.RNItemNum,
        fa.Revision,
        fa.Qty,
        fa.TopFixedAssetId,
        fa.TopSerialNum,
        fa.TopInventoryItemNum,
        fa.WorkOrderIdInstalled,
        fa.WorkOrderNumInstalled,
        fa.JDEWorkOrderNumInstalled,
        fa.WorkOrderBranchPlantInstalled,
        fa.WorkOrderBranchPlantNameInstalled,
        fa.DateInstalled,
        fa.WorkOrderIdRemoved,
        fa.WorkOrderNumRemoved,
        fa.JDEWorkOrderNumRemoved,
        fa.WorkOrderBranchPlantRemoved,
        fa.WorkOrderBranchPlantNameRemoved,
        fa.DateRemoved,
        ts.SerialNumber AS ToolString,
        j.JobId,
        j.JobNumber,
        well.Well,
        j.BranchPlant AS JobBranchPlant,
        b.CompanyName AS JobBranchPlantName,
        reg.Region,
        reg.RegionDesc,
        co.Country,
        co.CountryDesc,
        dbo.DensityConvert(md.DensityEnd, md.DensityUnits, 'ppg') AS MudWeight,
        dbo.VolumeConvert(h.FlowRate, h.FlowRateUOM, 'gpm') AS FlowRate,
        run.RunID,
        run.RunNumber,
        run.StartDate,
        run.EndDate,
        run.OperHrs,
        run.CircHrs,
        run.DrillHrs,
        run.PulseCount,
        dbo.TempConvert(md.BoreHoleTempMax, md.BoreHoleTempUnits, '°F') AS MaxTempF,
        dbo.LengthConvert(h.HoleSize, h.HoleSizeUOM, 'in') AS HoleSize,
        ISNULL(comp.LostTime, i.AcceptedLostTime) AS NPTonTopLevelSN,
        i.AcceptedLostTime AS NPTbyRun,
        ISNULL(comp.TFF, 0) AS TFF,
        comp.SerialNum TopLevelSN,
        ifc.LevelOneCode + ifc.LevelTwoCode + ifc.LevelThreeCode AS FaultCodeTFF 
		INTO #tblRunInfo
		FROM #tblFixedAssetParents fa
		INNER JOIN ToolStringComponentInfo(NOLOCK) tsci ON tsci.SerialNum = fa.TopSerialNum AND tsci.InventoryItemNum = fa.TopInventoryItemNum
		LEFT JOIN ToolStrings(NOLOCK) ts ON ts.ToolStringId = tsci.ToolStringID 
		LEFT JOIN Runs(NOLOCK) run ON run.RunID = tsci.RunID  AND run.IsDownHole = 1  AND run.IsDeleted = 0 
			AND CONVERT(date, fa.DateInstalled, 101) <= CONVERT(date, run.StartDate, 101)
			AND (fa.DateRemoved IS NULL OR run.EndDate IS NULL OR CONVERT(date, fa.DateRemoved, 101) >= CONVERT(date, run.EndDate, 101))
		LEFT JOIN Wells(NOLOCK) well ON well.WellID = run.WellID AND well.IsDeleted = 0
		LEFT JOIN Jobs(NOLOCK) j ON j.JobId = well.JobID AND j.IsDeleted = 0
		LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = j.BranchPlant
		LEFT JOIN Regions reg WITH (NOLOCK) ON reg.Region = j.Region
		LEFT JOIN Countries co WITH (NOLOCK) ON co.Country = j.Country
		LEFT JOIN MudData md WITH (NOLOCK) ON md.RunID = run.RunID
		LEFT JOIN Hydraulics h WITH (NOLOCK) ON h.RunID = run.RunID
		LEFT JOIN Incidents i WITH (NOLOCK) ON i.RunID = run.RunID
		LEFT JOIN vwIncidentFaultCodes ifc WITH (NOLOCK) ON ifc.IncidentId = I.IncidentID
		LEFT JOIN 
		(
				SELECT  tsci.IncidentID, tsci.TFF, tsci.SerialNum, tsci.LostTime
				FROM ToolStringComponentInfo tsci WITH (NOLOCK)
				LEFT JOIN ToolStrings t WITH (NOLOCK) ON t.ToolStringID = tsci.ToolStringID
				LEFT JOIN PartTypes pt WITH (NOLOCK)  ON pt.PartTypeID = tsci.PartTypeID
				WHERE tsci.TFF = 1
		) AS comp ON comp.IncidentID = i.IncidentID
      WHERE run.RunID IS NOT NULL

      SELECT
		f.FixedAssetId,
        f.SerialNum,
        f.InventoryItemNum,
        f.RNItemNum,
		f.Revision,
		i.DescShort AS ItemDesc,
		CONVERT(VARCHAR, MAX(ri.DateInstalled),106) As DateInstalled,
		CONVERT(BIT, (CASE WHEN (SELECT count(*) FROM ItemNumConfigs (NOLOCK) WHERE ISNULL(IsToolString, 0) = 0 and ParentItemNum = i.ItemNum) > 0 THEN 1 ELSE 0 END)) AS HasBOM,
        CAST(SUM(ISNULL(OperHrs,0)) AS DECIMAL(19,2)) [LifetimeOperHrs],
		CAST(SUM(ISNULL(CircHrs,0)) AS DECIMAL(19,2)) [LifetimeCircHrs],
		CAST(SUM(ISNULL(DrillHrs,0)) AS DECIMAL(19,2)) [LifetimeDrillHrs],
        SUM(CASE WHEN ri.TopFixedAssetId = f.TopLevelFixedAssetId THEN  CAST(OperHrs AS DECIMAL(19,2)) ELSE 0 END) [CurrentOperHrs],
		SUM(CASE WHEN ri.TopFixedAssetId = f.TopLevelFixedAssetId THEN CAST(CircHrs AS DECIMAL(19,2)) ELSE 0 END) [CurrentCircHrs],
        SUM(CASE WHEN ri.TopFixedAssetId = f.TopLevelFixedAssetId THEN CAST(DrillHrs AS DECIMAL(19,2)) ELSE 0 END) [CurrentDrillHrs]
      FROM FixedAssets f
	  LEFT JOIN ItemNums i ON i.ItemNum = f.InventoryItemNum 
	  LEFT JOIN #tblRunInfo ri ON ri.FixedAssetId = f.FixedAssetId
	  Where f.ParentFixedAssetId = @FixedAssetId AND i.DefaultSerialProfile = 'S'

      GROUP BY f.SerialNum,
               f.InventoryItemNum,
               f.RNItemNum,
			   f.FixedAssetId,
			   f.Revision,
			   --ri.DateInstalled,
			   i.DescShort,
			   i.ItemNum
      ORDER BY f.SerialNum, f.InventoryItemNum, f.RNItemNum

      DROP TABLE #tblFixedAssets
      DROP TABLE #tblFixedAssetHistory
      DROP TABLE #tblFixedAssetParents
      DROP TABLE #tblRunInfo

    COMMIT TRAN

  END TRY
  BEGIN CATCH

    IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION;

    DECLARE @ErrorNumber int = ERROR_NUMBER();
    DECLARE @ErrorLine int = ERROR_LINE();
    DECLARE @ErrorMessage nvarchar(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity int = ERROR_SEVERITY();
    DECLARE @ErrorState int = ERROR_STATE();

    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

  END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetCoreFiles]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---=================================================
--CREATED BY : SUYEB MOHAMMAD 
--CREATED ON : 10 June 2016
--DESCRIPTION: To get core file data based on coreid
--==================================================
CREATE PROC [dbo].[usp_GetCoreFiles]
	@CoreId UNIQUEIDENTIFIER
AS
BEGIN
SELECT	[CoreId], 
		[Version], 
		[FileName], 
		[InputXml], 
		[BaseXml], 
		[Messages], 
		[IgnoreValidation],
		[Status], 
		[CreatedBy], 
		[CreatedOn]
FROM	[CoreFiles]
WHERE	[CoreId] = @CoreId
END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetCPARID]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---============================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 14 Nov 2017
--DESCRIPTION: To get CPARId based on incident Id
--=============================================================
CREATE PROC [dbo].[usp_GetCPARID]
@IncidentId UNIQUEIDENTIFIER
AS
BEGIN
	DECLARE @CPARId INT = 0
	SELECT	@CPARId = [CPARId] FROM [AssetRepairTrack] WHERE [IncidentId] = @IncidentId
	SELECT	@CPARId AS [CPARId]
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetDataToValidateHistogramXML]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Umesh 
-- Create date: 23 Nov 2016
-- Description:	Get data (runid,wellid,jobid,)
-- =============================================
CREATE PROCEDURE [dbo].[usp_GetDataToValidateHistogramXML] 
	@JobNumber VARCHAR(50)
AS
BEGIN
	
SELECT  j.JobNumber, w.Well, r.RunNumber, t.PartTypeID, f.SerialNum
FROM Jobs j
INNER JOIN Wells w ON w.JobId = j.jobId
INNER JOIN Runs r ON r.WellId = w.WellId
INNER JOIN ToolStringComponentInfo t ON t.RunID = r.RunID
INNER JOIN FixedAssets f ON f.FixedAssetId = t.FixedAssetID
WHERE JobNumber = @JobNumber

END
GO
/****** Object:  StoredProcedure [dbo].[Usp_getdemandfleetreport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--=============================================================== 
--CREATED BY : SUYEB MOHAMMAD 
--CREATED ON : 06 Nov 2015 
--DESCRIPTION: TO get demand fleet report by status 
--============================================================== 
CREATE PROC [dbo].[Usp_getdemandfleetreport] @XmlData XML 
AS 
  BEGIN 
      CREATE TABLE #temp 
        ( 
           toolcode VARCHAR(20), 
           quantity INT 
        ) 

      INSERT INTO #temp 
      EXECUTE [dbo].[Usp_getassetrequestoutstandingqty] 
        @XmlData 

      SELECT a.toolcode AS "ToolCode", 
             CONVERT(INT, Isnull(a.[qty1], 0)) AS "QuantityNotFilled", 
             CONVERT(INT, Isnull(b.qty1, 0))   AS "Assigned", 
             CONVERT(INT, Isnull(c.qty1, 0))   AS "UnderRepair", 
             CONVERT(INT, Isnull(d.qty1, 0))   AS "Working", 
             CONVERT(INT, Isnull(e.qty1, 0))   AS "InInspection" 
      FROM   (SELECT [toolcode], 
                     [quantity] AS [Qty1] 
              FROM   [#temp]) A 
             LEFT JOIN (SELECT i.toolcode, 
                               Sum(f.currentitemqty) [qty1] 
                        FROM   fixedassets f 
                               LEFT JOIN itemnums i 
                                      ON i.itemnum = f.rnitemnum 
                        WHERE  equipmentstatus = 'as' 
                               AND laststatuschangedate < 
                                   Dateadd(dd, -90, Getdate 
                                   ()) 
                        GROUP  BY toolcode) B 
                    ON a.toolcode = b.toolcode 
             LEFT JOIN (SELECT i.toolcode, 
                               Sum(f.currentitemqty) [qty1] 
                        FROM   fixedassets f 
                               LEFT JOIN itemnums i 
                                      ON i.itemnum = f.rnitemnum 
                        WHERE  equipmentstatus = 'UR' 
                               AND laststatuschangedate < 
                                   Dateadd(dd, -90, Getdate 
                                   ()) 
                        GROUP  BY toolcode) C 
                    ON a.toolcode = C.toolcode 
             LEFT JOIN (SELECT i.toolcode, 
                               Sum(f.currentitemqty) [qty1] 
                        FROM   fixedassets f 
                               LEFT JOIN itemnums i 
                                      ON i.itemnum = f.rnitemnum 
                        WHERE  equipmentstatus = 'WK' 
                               AND laststatuschangedate < 
                                   Dateadd(dd, -90, Getdate 
                                   ()) 
                        GROUP  BY toolcode) D 
                    ON a.toolcode = D.toolcode 
             LEFT JOIN (SELECT i.toolcode, 
                               Sum(f.currentitemqty) [qty1] 
                        FROM   fixedassets f 
                               LEFT JOIN itemnums i 
                                      ON i.itemnum = f.rnitemnum 
                        WHERE  equipmentstatus = 'II' 
                               AND laststatuschangedate < 
                                   Dateadd(dd, -90, Getdate 
                                   ()) 
                        GROUP  BY toolcode) e 
                    ON a.toolcode = e.toolcode 
      ORDER  BY a.toolcode 
  END 
 
GO
/****** Object:  StoredProcedure [dbo].[usp_GetDocItemSubscriptions]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_GetDocItemSubscriptions] 
	@DocItemId int,	
	@UserId int 
AS
BEGIN
	SET NOCOUNT ON;	
	
	With DocItemFolders_CTE
	AS
	(
	SELECT ChildDocItems.DocItemId, ChildDocItems.DocItemTitle, ChildDocItems.DocItemDesc, ChildDocItems.DocItemFilePath, 
		ChildDocItems.DocItemFileName, ChildDocItems.ParentDocItemId, ChildDocItems.DocItemType, ChildDocItems.DateAdded, 
		ChildDocItems.DocItemFileSize, ChildDocItems.DocItemDate, ChildDocItems.OriginalFileName, ChildDocItems.UploadedBy, 
		ChildDocItems.IsControlled, ChildDocItems.Uncontrolled
	From DocItems (NOLOCK) ParentDocItems
	INNER JOIN DocItems (NOLOCK) ChildDocItems ON ChildDocItems.ParentDocItemId = ParentDocItems.DocItemId
	Where ParentDocItems.DocItemId = @DocItemId

	UNION ALL

	SELECT ChildDocItems.DocItemId, ChildDocItems.DocItemTitle, ChildDocItems.DocItemDesc, ChildDocItems.DocItemFilePath, 
		ChildDocItems.DocItemFileName, ChildDocItems.ParentDocItemId, ChildDocItems.DocItemType, ChildDocItems.DateAdded, 
		ChildDocItems.DocItemFileSize, ChildDocItems.DocItemDate, ChildDocItems.OriginalFileName, ChildDocItems.UploadedBy, 
		ChildDocItems.IsControlled, ChildDocItems.Uncontrolled
	From DocItems (NOLOCK) ParentDocItems
	INNER JOIN DocItems (NOLOCK) ChildDocItems ON ChildDocItems.ParentDocItemId = ParentDocItems.DocItemId

	INNER JOIN DocItemFolders_CTE ON ChildDocItems.ParentDocItemId = DocItemFolders_CTE.DocItemId
	)

	SELECT di.DocItemId, di.DocItemTitle, di.DocItemDesc, di.DocItemFilePath, di.DocItemFileName, di.ParentDocItemId, 
			di.DocItemType, di.DateAdded, di.DocItemFileSize, di.DocItemDate, di.OriginalFileName, di.UploadedBy, 
			di.IsControlled, di.Uncontrolled, (SELECT CASE WHEN s.DocItemId IS NOT NULL 
            THEN 'Y' ELSE 'N' END FROM DocItemSubscriptions s WHERE s.UserId= @UserId AND DocItemId = di.DocItemId) AS IsSubscribed		
	FROM DocItems (NOLOCK) di
	WHERE (DocItemId IN (SELECT DocItemId from DocItemFolders_CTE) OR DocItemId = @DocItemId) AND DocItemType = 0	
	
	SET NOCOUNT OFF;
	
END





/****** Object:  StoredProcedure [dbo].[usp_GetFixedAssetHistory]    Script Date: 08/06/2014 13:15:47 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_GetDTBSComparisonReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--====================================================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 21 Oct 2015
--DESCRIPTION: To get DT / BS count agianst RNs
--=====================================================================================

CREATE PROCEDURE [dbo].[usp_GetDTBSComparisonReport]
	@XmlData XML
AS
BEGIN
	DECLARE @StartDate VARCHAR(20)
	DECLARE @EndDate VARCHAR(20)
	DECLARE @Region VARCHAR(20)
	DECLARE @District VARCHAR(20)
	DECLARE @SQLQuery NVARCHAR(1000)
	DECLARE @Param NVARCHAR(1000) = ''
	DECLARE @ParamDefinition NVARCHAR(1000)

	SET @StartDate = (SELECT T.c.value('.', 'VARCHAR(20)') AS FromDate FROM @xmlData.nodes('/Filters/StartDate') T(c))
	SET @EndDate = (SELECT T.c.value('.', 'VARCHAR(20)') AS ToDate FROM @xmlData.nodes('/Filters/EndDate') T(c))
	SET @Region = (SELECT T.c.value('.', 'VARCHAR(20)') AS ToDate FROM @xmlData.nodes('/Filters/Region') T(c))
	SET @District = (SELECT T.c.value('.', 'VARCHAR(20)') AS ToDate FROM @xmlData.nodes('/Filters/District') T(c))

	IF(@Region != '')
		BEGIN SET @Param = ' [Region] = @RegionParam' END

	IF(@District != '')
		BEGIN IF(@Param = '') SET @Param = ' [District] = @DistrictParam' ELSE SET @Param = @Param + ' AND [District] = @DistrictParam' END

	IF(@StartDate !='' AND @EndDate != '')
		BEGIN IF(@Param = '') SET @Param = ' [DateRange] BETWEEN @StartDateParam AND @EndDateParam' ELSE SET @Param = @Param + ' AND ([DateRange] BETWEEN @StartDateParam AND @EndDateParam)' END

	IF(@Param = '')
		BEGIN SET @SQLQuery = N'SELECT [Id], [Region], [District], SUM([BSCount]) AS BSCount, SUM([DTCount]) AS DTCount, [MonthYear] AS [MonthYear], [Months], [Years]

							  FROM [vwDTBSComparison] GROUP BY [Region], [MonthYear], [Months], [Years], [District], [Id] ORDER BY [Id]' END
	ELSE
		BEGIN SET @SQLQuery = N'SELECT	[Id], [Region], [District], SUM([BSCount]) AS BSCount, SUM([DTCount]) AS DTCount, [MonthYear] AS [MonthYear] , [Months], [Years]	

							  FROM [vwDTBSComparison] WHERE'+ @Param + ' GROUP BY [Region], [MonthYear], [Months], [Years], [District], [Id] ORDER BY [Id]' END
				  								
	SET @ParamDefinition = N'@RegionParam VARCHAR(20), @DistrictParam VARCHAR(20), @StartDateParam VARCHAR(20), @EndDateParam VARCHAR(20)'
	EXECUTE sp_Executesql @SQLQuery, @ParamDefinition, @RegionParam = @Region, @DistrictParam = @District, @StartDateParam = @StartDate, @EndDateParam = @EndDate 

END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetFailureCodeTypeList]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==================================================================
--CREATED BY : SUYEB MOHAMAD
--CREATED ON : 25th October
--DESCRIPTION: To get failure code type based on product line
--==================================================================
CREATE PROC [dbo].[usp_GetFailureCodeTypeList]
@ProductLine VARCHAR(10)
AS
BEGIN
	SELECT  DISTINCT [ProductLine] AS [Value], [ProductLine] AS [Text] FROM  [GLCodes] WHERE [GLProductLineId] = @ProductLine
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetFaultCode_CPAR_OfAIRT]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[usp_GetFaultCode_CPAR_OfAIRT]
	@AssetRepairTrackId uniqueidentifier
AS 
BEGIN
DECLARE	@CPARID int,
@FailureCodeId uniqueidentifier,
@ProceduralCodeId uniqueidentifier,
@OutOfSpecCodeId uniqueidentifier,
@FailureDesc varchar(50),
@ProcDesc varchar(50),
@OutSpecDesc varchar(50),
@Deliveryticket int,
@BranchPlant varchar(50),
@RevenueUnit varchar(50),
@ChargeableUnit varchar(50),
@CustomerName varchar(50),
@CustomerNumber varchar(50),
@JobType varchar(50),
@RepairUnit varchar(50)


BEGIN
SELECT @CPARID=CPARID, @FailureCodeId=FailureCodeId,@ProceduralCodeId=ProceduralCodeId,@OutOfSpecCodeId=OutOfSpecCodeId FROM AssetRepairTrack WHERE AssetRepairTrackId=@AssetRepairTrackId

SELECT @FailureDesc=FailCatCode.FailureCategoryCode+FailSubCatCode.FailureSubCategoryCode+FailCode.FailureCode from FailureCodes FailCode
JOIN FailureCategories FailCatCode on FailCode.FailureCategoryId=FailCatCode.FailureCategoryId
JOIN FailureSubCategories FailSubCatCode on FailCode.FailureSubCategoryId=FailSubCatCode.FailureSubCategoryId
WHERE FailCode.FailureCodeId=@FailureCodeId


SELECT @ProcDesc=FailCatCode.FailureCategoryCode+FailSubCatCode.FailureSubCategoryCode+FailCode.FailureCode from FailureCodes FailCode
JOIN FailureCategories FailCatCode on FailCode.FailureCategoryId=FailCatCode.FailureCategoryId
JOIN FailureSubCategories FailSubCatCode on FailCode.FailureSubCategoryId=FailSubCatCode.FailureSubCategoryId
WHERE FailCode.FailureCodeId=@ProceduralCodeId


SELECT @OutSpecDesc=FailCatCode.FailureCategoryCode+FailSubCatCode.FailureSubCategoryCode+FailCode.FailureCode from FailureCodes FailCode
join FailureCategories FailCatCode on FailCode.FailureCategoryId=FailCatCode.FailureCategoryId
JOIN FailureSubCategories FailSubCatCode on FailCode.FailureSubCategoryId=FailSubCatCode.FailureSubCategoryId
WHERE FailCode.FailureCodeId=@OutOfSpecCodeId


SELECT @Deliveryticket= a.DispatchNumber ,
@BranchPlant=d.BranchPlant
,@RevenueUnit=dii.RevenueBusinessUnit
,@ChargeableUnit=bu2.BusinessUnit 
,@CustomerName=c.CustomerName
,@CustomerNumber=c.CustomerNumber
,@JobType=bu1.GLCode 
,@RepairUnit=p.BranchPlant
FROM AssetRepairTrack a
LEFT JOIN dispatches d on d.DispatchNumber = a.DispatchNumber
LEFT JOIN DispatchInstances di on di.DispatchId = d.DispatchId and di.ShipType = 'dt-return'
LEFT JOIN DispatchInstanceItems dii on dii.DispatchInstanceId = di.DispatchInstanceId
LEFT JOIN BusinessUnits bu1 on bu1.BusinessUnit = dii.RevenueBusinessUnit and bu1.IsActive=1
LEFT JOIN GLCodes g on g.GLCode = bu1.GLCode
LEFT JOIN BusinessUnits bu2 on bu2.glcode =g.RollUpJobType and bu1.OrgCountryCode = bu2.OrgCountryCode and bu2.BUType = 'cc' and bu2.Department = 'dpr' and d.BranchPlant = bu2.BranchPlant
LEFT JOIN customers c on c.CustomerNumber = d.JDECustomerNumber
LEFT JOIN pftwo p on p.PFTWOId = a.SRPFTWOId
WHERE a.AssetRepairTrackId = @AssetRepairTrackId and dii.SerialNum = a.SerialNum and dii.ItemNum = a.RNItemNum

SELECT @CPARID as CPARID ,@FailureDesc as FailureDesc,@ProcDesc as ProcDesc,@OutSpecDesc as OutSpecDesc,@Deliveryticket as Deliveryticket,@BranchPlant as BranchPlant,@RevenueUnit as RevenueUnit, @ChargeableUnit as ChargeableUnit,@CustomerName as CustomerName,@CustomerNumber as CustomerNumber, @JobType as JobType,@RepairUnit as RepairUnit
END	
END





GO
/****** Object:  StoredProcedure [dbo].[usp_getFaultCodes]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[usp_getFaultCodes]
@GLProductLineId INT,
@FailureCodeTypeId INT,
@FailureType VARCHAR(50)
AS
BEGIN
	SELECT
		 failCat.FailureCategoryDesc       as CategoryDesc,
		 failSubCat.FailureSubCategoryDesc    as SubCategoryDesc,
		 failCode.FailureDesc   as Description,
		 failCode.FailureCode    as Code,
		 failCode.FailureCodeTypeId    as FailureCodeTypeId,
		 failCode.FailureCodeId     as Id 
	from FailureCodes failCode
	JOIN FailureCategories failCat on failCode.FailureCategoryId=failCat.FailureCategoryId
	JOIN FailureSubCategories failSubCat on failCode.FailureSubCategoryId=failSubCat.FailureSubCategoryId
	WHERE failCat.FailureType=@FailureType and failCat.GLProductLineId=@GLProductLineId and failCode.IsHistorical=0 and failCode.FailureCodeTypeId=@FailureCodeTypeId and failCat.FailureCategoryDesc is not null order by  failCat.FailureCategoryDesc,failSubCat
.
FailureSubCategoryDesc,failCode.FailureCode
END




GO
/****** Object:  StoredProcedure [dbo].[usp_GetFixedAssetHistory]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_GetFixedAssetHistory]
	@WorkOrderId uniqueidentifier
AS

;WITH FixedAssetHistoryCTE( 
			ParentFixedAssetId, FixedAssetId,FixedAssetHistoryId
		)
		AS 
		( 
		SELECT  ParentFixedAssetId, FixedAssetId,FixedAssetHistoryId
		  FROM FixedAssetHistory (NOLOCK) 
		 WHERE WorkOrderId = @WorkOrderId
 
UNION ALL

SELECT			
		pc.ParentFixedAssetId, pc.FixedAssetId,pc.FixedAssetHistoryId
  FROM FixedAssetHistory   (NOLOCK)   pc
  INNER JOIN FixedAssetHistoryCTE    ct
    ON pc.ParentFixedAssetId = ct.FixedAssetId  AND pc.ParentFixedAssetId <> pc.FixedAssetId
    where pc.WorkOrderId = @WorkOrderId
)
SELECT ParentFixedAssetId, FixedAssetId,FixedAssetHistoryId FROM FixedAssetHistoryCTE




/****** Object:  StoredProcedure [dbo].[usp_GetNextAssetNum]    Script Date: 08/06/2014 13:19:37 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_GetFixedAssetInfo]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetFixedAssetInfo]
	@xmlData AS XML
AS
BEGIN

SET NOCOUNT ON;

DECLARE @FixedAssetId UNIQUEIDENTIFIER
--DECLARE @AssetNumber varchar(10) 

SELECT @FixedAssetId = T.c.value('(FixedAssetId/text())[1]', 'uniqueidentifier')
FROM @xmlData.nodes('/Filters') T(c);

--select @AssetNumber = AssetNumber from FixedAssets (NOLOCK)
--where FixedAssetId = @FixedAssetId 

--- Asset Info Panel ---
SELECT  fa.FixedAssetId, fa.SerialNum, fa.LegacySerialNumber, fa.InventoryItemNum, fa.RNItemNum,
		pfa.SerialNum AS ParentSerialNum,pfa.InventoryItemNum As ParentInventoryItemNum, pfa.RNItemNum AS ParentRNItemNum, pfa.AssetNumber AS ParentAssetNumber,				
		fa.AssetDescription as FixedAssetDescription,
		i.DescShort as AssetDescription,
		ri.DescShort as RNAssetDescription,
		i.DescLong as InventoryDescLong,
		fa.BranchPlant, fa.Ownership, fa.AssetNumber,
		fa.ManufacturersSerialNumber, 
		fa.EquipmentStatus, fa.LastStatusChangeDate,
		fa.PhysicalLocation, fa.CatCode16, fa.Cost, fa.NetBookValue, 
		fa.AccumDepreciation, fa.CurrencyCode, fa.ContractAccount, fa.DateAcquired, fa.LifeMonths, 
		fa.StartDepreciation_Date, fa.NewUsed, fa.Manufacturer, fa.ModelYear, fa.DateDisposed, 
		fa.FiscalYear,fa.LedgerType
		, CASE WHEN fa.EquipmentStatus IN ('PT', 'IT') THEN
			(SELECT TOP 1 SendingLocation FROM PartTransferDtl ptd WITH(NOLOCK)
				WHERE ptd.FixedAssetId=fa.FixedAssetId AND fa.EquipmentStatus IN ('PT', 'IT')
				ORDER BY ptd.DateofTransaction DESC, ptd.JDETransactionID DESC, ptd.DateAdded DESC) ELSE NULL 
		  END AS SourceBranchPlant
		, CASE WHEN fa.EquipmentStatus IN ('PT', 'IT') THEN
			(SELECT TOP 1 ReceivingLocation FROM PartTransferDtl ptd WITH(NOLOCK)
				WHERE ptd.FixedAssetId=fa.FixedAssetId AND fa.EquipmentStatus IN ('PT', 'IT')
				ORDER BY ptd.DateofTransaction DESC, ptd.JDETransactionID DESC, ptd.DateAdded DESC) ELSE NULL
		  END AS DestBranchPlant
		, (SELECT TOP 1 ReceivingLocation FROM PartTransferDtl ptd WITH(NOLOCK)
				LEFT OUTER JOIN BranchPlants(NOLOCK) ibp ON ibp.BranchPlant = ptd.ReceivingLocation
				WHERE ptd.FixedAssetId = fa.FixedAssetId AND ibp.IsOperationsBillableLocation = 1 
				ORDER BY ptd.DateofTransaction DESC, ptd.JDETransactionID DESC, ptd.DateAdded DESC
			) AS LastBillableBranchPlant,
		ISNULL(ri.ToolPanel, i.ToolPanel) as ToolPanel, 
		ISNULL(ri.ToolCode, i.ToolCode) as ToolCode, 
		ISNULL(ri.ItemNum3, i.ItemNum3) as ItemNum3, 
		ISNULL(ri.PartClassification, i.PartClassification) as PartClassification,
		i.Size, i.DescShort, i.DescLong, i.Critical, i.ToolPerJob, fa.ThirdItemNumber,
		fa.FirmwareVersion,
		fa.MasterFirmwareItemNum,
		fa.MasterFirmwareRevision,
		
		inbp.HTSUS, inbp.ECCN,
		
		bp.Country, bp.Region, 
		
		ps.Status AS StatusDesc,
		
		j.JobNumber, bp.CompanyName as BranchPlantName, j.JobId

FROM dbo.FixedAssets (NOLOCK) fa
LEFT JOIN dbo.ItemNums (NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
LEFT JOIN dbo.ItemNumBranchPlants (NOLOCK) inbp ON inbp.BranchPlant = fa.BranchPlant AND inbp.ItemNum = fa.InventoryItemNum
LEFT JOIN dbo.BranchPlants (NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
LEFT JOIN dbo.PartStatus (NOLOCK) ps ON ps.Code = fa.EquipmentStatus
LEFT JOIN dbo.DispatchInstanceItems (NOLOCK) dii ON dii.SerialNum = fa.SerialNum
LEFT JOIN dbo.DispatchInstances (NOLOCK) di ON di.DispatchInstanceId = dii.DispatchInstanceId
LEFT JOIN dbo.Dispatches (NOLOCK) d ON d.DispatchId = di.DispatchId
LEFT JOIN dbo.Jobs (NOLOCK) j ON j.JobId = d.JobId
LEFT OUTER JOIN dbo.FixedAssets (NOLOCK) pfa ON pfa.FixedAssetId = fa.ParentFixedAssetId
WHERE fa.FixedAssetId=@FixedAssetId


--- Documents Grid ---
SELECT dia.DocItemId, di.DocItemTitle, di.DocItemDesc, di.DocItemFileSize, di.DocItemDate, p.WO_NO, p.PFTWOId,di.DocumentCategory
FROM dbo.DocItemAttach (NOLOCK) dia
LEFT JOIN dbo.DocItems (NOLOCK) di ON di.DocItemId = dia.DocItemId
LEFT JOIN dbo.PFTWO (NOLOCK) p ON p.PFTWOId = dia.GuidKeyId
WHERE di.DocItemType = 1 AND p.FixedAssetId = @FixedAssetId
UNION
SELECT dia.DocItemId, di.DocItemTitle, di.DocItemDesc, di.DocItemFileSize, di.DocItemDate, NULL, NULL,di.DocumentCategory
FROM dbo.DocItemAttach (NOLOCK) dia
LEFT JOIN dbo.DocItems (NOLOCK) di ON di.DocItemId = dia.DocItemId
WHERE di.DocItemType = 1 AND dia.GuidKeyId = @FixedAssetId

ORDER BY di.DocItemTitle



END

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_GetFixedAssetsStructure]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_GetFixedAssetsStructure] 
	@RootFixedAssetId uniqueidentifier
AS
BEGIN
	DECLARE @startDateTime DATETIME,@RunId  uniqueidentifier=NEWID();
    SET @startDateTime = GETDATE();

	DECLARE @FixedAssets TABLE
	(
		FixedAssetId uniqueidentifier,
		ParentFixedAssetId uniqueidentifier,
		InventoryItemNum varchar(30),
		SerialNum varchar(50)
	)
	

	INSERT INTO @FixedAssets
	SELECT FixedAssetId,
		ParentFixedAssetId,
		InventoryItemNum,
		SerialNum
	FROM FixedAssets (NOLOCK)
	WHERE TopLevelFixedAssetId IN (SELECT TopLevelFixedAssetId
	FROM FixedAssets (NOLOCK) Where FixedAssetId = @RootFixedAssetId)
	UNION
	SELECT FixedAssetId,
		ParentFixedAssetId,
		InventoryItemNum,
		SerialNum
	FROM FixedAssets (NOLOCK)
	WHERE   FixedAssetId = @RootFixedAssetId


	exec usp_MyAdvisor_Logs @RunId,'usp_GetFixedAssetsStructure', '01.Asset Temp Table ', @startDateTime

    SET @startDateTime=GETDATE();

	;WITH FixedAssetCTE
	(
		FixedAssetId,
		ParentFixedAssetId,
		InventoryItemNum,
		SerialNum,
		Level
	)
	AS
	(
		SELECT
		fa.FixedAssetId,
		fa.ParentFixedAssetId,
		fa.InventoryItemNum,
		fa.SerialNum,
		0 as Level
		FROM @FixedAssets fa
		WHERE FixedAssetId = @RootFixedAssetId
		
		UNION ALL 
		
		SELECT 
		fa2.FixedAssetId,
		fa2.ParentFixedAssetId,
		fa2.InventoryItemNum,
		fa2.SerialNum,
		Level + 1 as Level
		FROM @FixedAssets fa2
		INNER JOIN FixedAssetCTE ct ON fa2.ParentFixedAssetId =  ct.FixedAssetId
	)

	SELECT cte.FixedAssetId, 
			cte.ParentFixedAssetId, 
			cte.InventoryItemNum, 
			cte.SerialNum,
			(CASE WHEN i.DefaultSerialProfile = 'S' THEN 1 ELSE 0 END) as HasBOM,
			cte.Level
	FROM FixedAssetCTE cte
	LEFT JOIN ItemNums(NOLOCK) i ON i.ItemNum = cte.InventoryItemNum

    exec usp_MyAdvisor_Logs @RunId,'usp_GetFixedAssetsStructure', '02.Get Asset Structure', @startDateTime

END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetItemNumConfigsStructure]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_GetItemNumConfigsStructure] 
	@RootItemNum varchar(100)
AS
BEGIN
	WITH ItemNumCTE
	(
		ItemNum,
		ParentItemNum,
		level1
	)
	AS
	(
		SELECT
		inc.ItemNum,
		inc.ParentItemNum,
		0 as level1
		FROM ItemNumConfigs inc With (NOLOCK)
		WHERE ParentItemNum = @RootItemNum AND ISNULL(inc.IsToolString, 0) = 0
		
		UNION ALL 
		
		SELECT 
		inc2.ItemNum,
		inc2.ParentItemNum,
		level1 + 1
		FROM ItemNumConfigs  inc2 With (NOLOCK)
		INNER JOIN ItemNumCTE ct ON inc2.ParentItemNum =  ct.ItemNum
		Where ISNULL(inc2.IsToolString, 0) = 0
	)

	SELECT * FROM ItemNumCTE
END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetItemNumConfigTree]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetItemNumConfigTree]
	@ItemNum VARCHAR(100)
AS

WITH RecursiveCTE(ItemNum, ParentItemNum, LineNum, IsMandatoryReplacement, IsRequired, OptionText, Qty, ECNNumber, LastModifiedUserName, LastDateModified, Level)
AS 
( 
	SELECT  CAST(i.ItemNum AS VARCHAR(100)) as ItemNum
			, CAST('' AS VARCHAR(100)) AS ParentItemNum
			, CAST(0 AS Numeric (15,2)) AS LineNum
			, CONVERT(BIT, 0) AS IsMandatoryReplacement
			, CONVERT(BIT, 0) AS IsRequired
			, CAST('' AS VARCHAR(100)) AS OptionText
			, CAST(NULL AS INT) AS Qty
			, CAST('' AS VARCHAR(15)) AS ECNNumber
			, CAST('' AS VARCHAR(15)) AS LastModifiedUserName
			, CAST(NULL AS DATETIME) AS LastDateModified
			, 0 AS Level
	FROM ItemNums i (NOLOCK)
	WHERE i.ItemNum = @ItemNum
 
	UNION ALL

	SELECT  pinc.ItemNum
			, ct.ItemNum AS ParentItemNum
			, pinc.LineNum
			, pinc.IsMandatoryReplacement
			, pinc.IsRequired
			, pinc.OptionText
			, pinc.Qty
			, pinc.ECNNumber
			, pinc.LastModifiedUserName
			, pinc.LastDateModified
			, Level+1
	FROM VwItemNumConfigs pinc (NOLOCK)
	INNER JOIN RecursiveCTE ct ON pinc.ParentItemNum = ct.ItemNum AND pinc.ParentItemNum <> pinc.ItemNum
	WHERE ISNULL(pinc.IsToolString, 0) = 0 AND [Level] <= 10
) 

SELECT cte.ItemNum
		, i.DescShort as Description
		, cte.ParentItemNum
		, ISNULL(ip.DescShort, '') as ParentDescription
		, cte.LineNum
		, cte.IsMandatoryReplacement
		, cte.IsRequired
		, cte.OptionText
		, cte.Qty
		, cte.ECNNumber
		, cte.LastModifiedUserName
		, cte.LastDateModified
		, cte.Level
FROM RecursiveCTE cte
LEFT JOIN ItemNums(NOLOCK) i ON i.ItemNum = cte.ItemNum
LEFT JOIN ItemNums(NOLOCK) ip ON ip.ItemNum = cte.ParentItemNum
ORDER BY level

GO
/****** Object:  StoredProcedure [dbo].[usp_GetItemNumsTree]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[usp_GetItemNumsTree]
(
	@ToolPanel  varchar(max) = null,
	@ToolCode  varchar(max) = null
)
AS
SET ANSI_NULLS ON
IF (@ToolCode IS NOT NULL AND @ToolPanel != '' AND @ToolCode != '')
BEGIN
	SELECT 
	'chkItemNum' as '@ID',
	ItemNum as '@Value',
	ItemNum + ' - ' + IsNull(DescShort,'') as '@Text'
	FROM ItemNums (NOLOCK) 
	where ToolCode = @ToolCode
	AND ToolPanel = @ToolPanel
	order by ItemNum
	FOR XML PATH('TreeViewNode'), TYPE, ROOT('Nodes')	
END
ELSE IF (@ToolPanel IS NOT NULL AND @ToolPanel != '')
BEGIN
	SELECT 
	'chkToolCode' as '@ID',
	ToolCode as '@Value',
	ToolCode as '@Text'
	FROM ItemNums (NOLOCK) 
	where ToolCode is not null
	AND ToolPanel = @ToolPanel
	group by ToolPanel,ToolCode
	order by ToolCode
	FOR XML PATH('TreeViewNode'), TYPE, ROOT('Nodes')
END
ELSE
BEGIN
	SELECT ToolPanel as '@Value',
	'chkToolPanel' as '@ID',
    ToolPanel as '@Text'
	FROM ItemNums (NOLOCK) 
	where ToolPanel is not null
	group by ToolPanel
	order by ToolPanel
	FOR XML PATH('TreeViewNode'), TYPE, ROOT('Nodes')
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetJDECafeOneAssetInfo]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--=============================================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 01 Aug 2016
--DESCRIPTION: To get JDE Cafe One Asset info based on asset number
--=============================================================================
CREATE PROCEDURE [dbo].[usp_GetJDECafeOneAssetInfo]
	@xmlData AS XML
AS
BEGIN

SET NOCOUNT ON;
DECLARE @AssetNumber VARCHAR(10) 

SELECT	@AssetNumber = T.c.value('(AssetNum/text())[1]', 'VARCHAR(10)')
FROM	@xmlData.nodes('/Filters') T(c);

--jobs
SELECT 	j.JobId, CustomerName, JobNumber, b.BranchPlant, b.CompanyName AS BranchPlantCompanyName, Well, 
		RunNumber, r.StartDate, r.EndDate,
		MdStart, MdStartUOM, MdEnd, MdEndUOM, p.SerialNum,
		itemNum.DescShort AS CompDesc, OperHrs, CircHrs, DrillHrs,
		IncidentNumber, i.IncidentId
FROM	ToolStringComponentInfo tsci WITH (NOLOCK)
		INNER JOIN FixedAssets p WITH (NOLOCK) ON p.FixedAssetId = tsci.FixedAssetID
		INNER JOIN Runs r WITH (NOLOCK) ON r.RunID = tsci.RunID AND r.IsDeleted = 0
		INNER JOIN Wells w WITH (NOLOCK) ON w.WellID = r.WellID AND w.IsDeleted = 0
		INNER JOIN Jobs j WITH (NOLOCK) ON j.JobId = w.JobID and j.IsDeleted = 0
		LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = j.BranchPlant
		LEFT JOIN Customers C WITH (NOLOCK) ON C.CustomerId= j.CustomerId
		LEFT JOIN Incidents i WITH (NOLOCK) ON i.RunID = r.RunID
		LEFT JOIN ItemNums itemNum WITH (NOLOCK) ON itemNum.ItemNum = p.InventoryItemNum
WHERE	p.AssetNumber = @AssetNumber
ORDER BY p.DateAdded DESC

--AIRTs
SELECT	a.AssetRepairTrackId, a.ARTNumber, a.FromBranchPlant, a.ItemNum, a.NCRNumber, j.JobNumber, i.IncidentNumber,
		a.DateAdded, a.DateClosed, a.Status, b.CompanyName AS BranchPlantCompanyName, j.JobId
FROM	dbo.AssetRepairTrack (NOLOCK) a
		LEFT JOIN dbo.Jobs (NOLOCK) j ON j.JobId = a.JobId
		LEFT JOIN dbo.Incidents (NOLOCK) i ON i.IncidentID = a.IncidentId
		LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = a.FromBranchPlant
WHERE	a.AssetNumber = @AssetNumber
ORDER BY a.DateAdded DESC

--Components
;WITH RecursiveCTE(Level, FixedAssetId, SerialNum, InventoryItemNum, RNItemNum, Qty, AssetDescription, ParentFixedAssetId, ParentSerialNum, ParentInventoryItemNum)
AS
(
	SELECT  0 as Level, fa.FixedAssetId, fa.SerialNum, fa.RNItemNum, fa.InventoryItemNum, fa.CurrentItemQty as Qty, fa.AssetDescription,
			fa.ParentFixedAssetId, fap.SerialNum as ParentSerialNum, fap.InventoryItemNum as ParentInventoryItemNum
	FROM	FixedAssets fa (NOLOCK)
			LEFT OUTER JOIN FixedAssets (NOLOCK) fap ON fap.FixedAssetId = fa.ParentFixedAssetId
	WHERE	fa.AssetNumber = @AssetNumber
	
	UNION ALL
	
	SELECT	Level + 1 as Level, pc.FixedAssetId, pc.SerialNum, pc.InventoryItemNum, pc.RNItemNum, pc.CurrentItemQty as Qty, pc.AssetDescription,
			pc.ParentFixedAssetId, ct.SerialNum as ParentSerialNum, ct.InventoryItemNum as ParentInventoryItemNum
	FROM	FixedAssets pc (NOLOCK)
			INNER JOIN RecursiveCTE ct ON pc.ParentFixedAssetId = ct.FixedAssetId  AND pc.ParentFixedAssetId <> pc.FixedAssetId
)

SELECT	cte.Level, cte.FixedAssetId, cte.SerialNum, cte.InventoryItemNum, cte.RNItemNum, cte.Qty, cte.AssetDescription, 
		cte.ParentFixedAssetId, cte.ParentSerialNum, cte.ParentInventoryItemNum, IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) as IsAsset 
FROM	RecursiveCTE cte
		LEFT JOIN dbo.ItemNums (NOLOCK) i ON i.ItemNum = cte.InventoryItemNum
		LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = cte.RNItemNum
ORDER BY Level, ParentSerialNum

END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetJobActivityExceptionReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[usp_GetJobActivityExceptionReport]
	@xmlData xml
AS

DECLARE @fromDate AS DATE
DECLARE @toDate AS DATE
DECLARE @whereClause AS VARCHAR(MAX)
DECLARE @sql AS VARCHAR(MAX)

DECLARE @startIndex VARCHAR(10)
DECLARE @pageSize VARCHAR(10)
DECLARE @sortField VARCHAR(100)
DECLARE @sortDir VARCHAR(64)

SELECT @fromDate = T.c.value('.', 'DATE') FROM @xmlData.nodes('/Filters/DateRangeFrom') T(c)
SELECT @toDate = T.c.value('.', 'DATE') FROM @xmlData.nodes('/Filters/DateRangeTo') T(c)
SET @fromDate = CONVERT(DATE, @fromDate, 101)
SET @toDate = CONVERT(DATE, ISNULL(@toDate,GETDATE()), 101)

IF(@toDate < @fromDate)
	SET @toDate = @fromDate

SELECT @startIndex = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/StartIndex')T(c);
SELECT @pageSize = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/PageSize')T(c);
SELECT @sortField = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/SortField')T(c);
SELECT @sortDir = T.c.value('.', 'VARCHAR(64)') FROM @xmlData.nodes('/Filters/SortDir')T(c);
SELECT @whereClause = T.c.value('.', 'VARCHAR(max)') FROM @xmlData.nodes('/Filters/WhereClause')T(c);


CREATE TABLE #DateRange
( 
	Id  INT IDENTITY(1,1),
	DateValue DATE
) 

;WITH dt(dateval) AS (
    SELECT @fromDate
    UNION ALL
    SELECT CONVERT(DATE, DATEADD(dd,1,dateval))
    FROM dt
    WHERE dateval < @toDate
)
INSERT INTO #DateRange
SELECT * FROM dt 
OPTION (MAXRECURSION 0);

SET @sql = '

	SELECT a.*, d.DateValue AS MissingDate, ja.JarActivityId FROM (
		SELECT j.JobId,
		  j.JobNumber,
		  j.StartDate,
		  j.EndDate,
		  j.Region,
		  r.RegionDesc,
		  j.Country,
		  c.CountryDesc,
		  j.BranchPlant,
		  b.CompanyName AS BranchPlantName,
		  j.CustomerId,
		  cu.CustomerName
		FROM Jobs(NOLOCK) j
		LEFT JOIN Regions(NOLOCK) r ON r.Region = j.Region
		LEFT JOIN Countries(NOLOCK) c ON c.Country = j.Country
		LEFT JOIN BranchPlants(NOLOCK) b ON b.BranchPlant = j.BranchPlant
		LEFT JOIN Customers(NOLOCK) cu ON cu.CustomerId = j.CustomerId
		' + @whereClause + '
	) a 
	CROSS JOIN #DateRange (NOLOCK) d 
	LEFT JOIN JarActivities(NOLOCK) ja ON ja.JobId = a.JobId AND CONVERT(DATE, ja.StartDate, 101) = CONVERT(DATE, d.DateValue, 101) 
	WHERE 
		CONVERT(DATE, d.DateValue, 101) BETWEEN ''' + CONVERT(VARCHAR(10), @fromDate , 101) + ''' AND ''' + CONVERT(VARCHAR(10), @toDate, 101) + '''
		AND ja.JarActivityId IS NULL  
		AND (CASE WHEN CONVERT(DATE, d.DateValue, 101) >= CONVERT(DATE, a.StartDate,101) AND CONVERT(DATE, d.DateValue, 101) < CONVERT(DATE, ISNULL(a.EndDate, ''' + CONVERT(VARCHAR(10), DATEADD(DAY, 1, @toDate), 101) + '''), 101)
				  THEN CONVERT(DATE, d.DateValue, 101) ELSE NULL END) IS NOT NULL 
			  
 '

DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') t'

EXECUTE (@sqlString)

DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, * From ( ' + 
		@sql + ') query ) page 
		where page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir


EXECUTE(@pagingSql)

DROP TABLE #DateRange


GO
/****** Object:  StoredProcedure [dbo].[usp_GetJobCapacitySummaryReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[usp_GetJobCapacitySummaryReport]
	@xmlData xml
AS

DECLARE @locationGroup AS VARCHAR (100)
DECLARE @toolsPerJob as INT
DECLARE @numberOfJobs as INT
DECLARE @locationColumns	AS VARCHAR(255)

DECLARE @whereClause AS VARCHAR(MAX)
DECLARE @sql AS VARCHAR(MAX)

DECLARE @startIndex VARCHAR(10)
DECLARE @pageSize VARCHAR(10)
DECLARE @sortField VARCHAR(100)
DECLARE @sortDir VARCHAR(64)

SELECT @locationGroup = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/LocationGroup') T(c)

SELECT @toolsPerJob = T.c.value('.', 'INT') FROM @xmlData.nodes('/Filters/ToolsPerJob') T(c)
IF(@toolsPerJob IS NULL OR @toolsPerJob <= 0)
BEGIN
	Set @toolsPerJob = 1
END

SELECT @numberOfJobs = T.c.value('.', 'INT') FROM @xmlData.nodes('/Filters/NumberOfJobs') T(c)
IF(@numberOfJobs IS NULL OR @numberOfJobs <= 0)
BEGIN
	Set @numberOfJobs = 1
END

Declare @totalToolsRequired as decimal(15,2)	
Set @totalToolsRequired = @toolsPerJob * @numberOfJobs

SELECT @startIndex = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/StartIndex')T(c);
SELECT @pageSize = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/PageSize')T(c);
SELECT @sortField = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/SortField')T(c);
SELECT @sortDir = T.c.value('.', 'VARCHAR(64)') FROM @xmlData.nodes('/Filters/SortDir')T(c);
SELECT @whereClause = T.c.value('.', 'VARCHAR(max)') FROM @xmlData.nodes('/Filters/WhereClause')T(c);


SET @locationColumns = 'a.RegionDesc'


IF(@locationGroup = 'Country')
	SET @locationColumns = ' a.RegionDesc, a.CountryDesc '
ELSE IF(@locationGroup = 'BranchPlant')
	SET @locationColumns = ' a.RegionDesc, a.CountryDesc, a.BranchPlant, a.BranchPlantName '
	


SET @sql = '
SELECT 
	a.ToolPanel
  , a.ToolCode 
  , ' + @locationColumns + '
  , a.Size AS ToolSize

  , SUM(a.IsActive) AS TotalActive
  , SUM(a.IsAssigned) AS TotalAssigned
  , SUM(a.IsAvailable) AS TotalAvailable
  , SUM(a.IsTesting) AS TotalTesting

  , SUM(a.IsActive) 
    + SUM(a.IsAssigned)
    + SUM(a.IsAvailable)
    + SUM(a.IsTesting) AS TotalCanUse
    
  , SUM(CASE WHEN a.IsActive=1 OR a.IsAssigned=1 OR a.IsAvailable=1 OR a.IsTesting=1 THEN  a.NetBookValue * dbo.fnGetUSDConversionFactor(a.CurrencyCode,NULL) ELSE 0 END) AS TotalCanUseNetBookValue
  , SUM(CASE WHEN a.IsActive=1 OR a.IsAssigned=1 OR a.IsAvailable=1 OR a.IsTesting=1 THEN a.Cost * dbo.fnGetUSDConversionFactor(a.CurrencyCode,NULL) ELSE 0 END) AS TotalCanUseCost
  
  , CONVERT(DECIMAL(18, 2), 100 *
		CASE WHEN (SUM(a.IsActive) + SUM(a.IsAssigned) + SUM(a.IsAvailable) + SUM(a.IsTesting)) > 0 THEN
			SUM(a.IsActive) / ((SUM(a.IsActive) + SUM(a.IsAssigned) + SUM(a.IsAvailable) + SUM(a.IsTesting))*1.00)
		ELSE 
			0
		END
	) as PercentActive
  
  , ((SUM(a.IsActive) + SUM(a.IsAssigned) + SUM(a.IsAvailable) + SUM(a.IsTesting)) / ' + CONVERT(VARCHAR(50), @toolsPerJob*1.00) + ') as TotalCanUseJobs
  , CONVERT(INT, (SUM(a.IsActive) + SUM(a.IsAssigned) + SUM(a.IsAvailable) + SUM(a.IsTesting)) - ' + CONVERT(VARCHAR(50), @totalToolsRequired) + ') as TotalCanUsePlusShort
  
  , SUM(a.IsTransit) AS TotalTransit
  , SUM(a.IsRepair) AS TotalRepair
  , SUM(a.IsParked) AS TotalParked
  , SUM(a.IsOther) AS TotalOther

  , SUM(a.IsTransit)
    + SUM(a.IsRepair)
    + SUM(a.IsParked)
    + SUM(a.IsOther) AS TotalCannotUse
  
  , SUM(CASE WHEN a.IsTransit=1 OR a.IsRepair=1 OR a.IsParked=1 OR a.IsOther=1 THEN a.NetBookValue * dbo.fnGetUSDConversionFactor(a.CurrencyCode,NULL) ELSE 0 END) AS TotalCannotUseNetBookValue
  , SUM(CASE WHEN a.IsTransit=1 OR a.IsRepair=1 OR a.IsParked=1 OR a.IsOther=1 THEN a.Cost * dbo.fnGetUSDConversionFactor(a.CurrencyCode,NULL) ELSE 0 END) AS TotalCannotUseCost
  
  , CONVERT(DECIMAL(18, 2), 100 *
		CASE WHEN (SUM(a.IsActive) + SUM(a.IsAssigned) + SUM(a.IsAvailable) + SUM(a.IsTesting) + SUM(a.IsTransit) + SUM(a.IsRepair) + SUM(a.IsParked) + SUM(a.IsOther)) > 0 THEN
			(SUM(a.IsTransit) + SUM(a.IsRepair) + SUM(a.IsParked) + SUM(a.IsOther))
			 / ((SUM(a.IsActive) + SUM(a.IsAssigned) + SUM(a.IsAvailable) + SUM(a.IsTesting) + SUM(a.IsTransit) + SUM(a.IsRepair) + SUM(a.IsParked) + SUM(a.IsOther))*1.00)
		ELSE 
			0
		END
	) as PercentCannotUse
	
  , ((SUM(a.IsTransit) + SUM(a.IsRepair) + SUM(a.IsParked) + SUM(a.IsOther)) / ' + CONVERT(VARCHAR(50), @toolsPerJob*1.00) + ') as TotalCannotUseJobs 
  
  , SUM(a.IsActive)
    + SUM(a.IsAssigned)
    + SUM(a.IsAvailable)
    + SUM(a.IsTesting)
    + SUM(a.IsTransit) 
    + SUM(a.IsRepair)
    + SUM(a.IsParked)
    + SUM(a.IsOther) AS TotalCount

  --, SUM(a.NetBookValue * dbo.fnGetUSDConversionFactor(a.CurrencyCode,NULL)) AS TotalNetBookValue
  --, SUM(a.Cost * dbo.fnGetUSDConversionFactor(a.CurrencyCode,NULL)) AS TotalCost
  , SUM(CASE WHEN a.IsTransit=1 OR a.IsRepair=1 OR a.IsParked=1 OR a.IsOther=1 OR a.IsActive=1 OR a.IsAssigned=1 OR a.IsAvailable=1 OR a.IsTesting=1
		THEN a.NetBookValue * dbo.fnGetUSDConversionFactor(a.CurrencyCode,NULL) ELSE 0 END) AS TotalNetBookValue
  , SUM(CASE WHEN a.IsTransit=1 OR a.IsRepair=1 OR a.IsParked=1 OR a.IsOther=1 OR a.IsActive=1 OR a.IsAssigned=1 OR a.IsAvailable=1 OR a.IsTesting=1
		THEN a.Cost * dbo.fnGetUSDConversionFactor(a.CurrencyCode,NULL) ELSE 0 END) AS TotalCost  
		
  , ''USD'' AS CurrencyCode
FROM vwWAMFixedAssetReport (NOLOCK) a

 ' + @whereClause + '
GROUP BY
  a.ToolPanel, a.ToolCode, a.Size, ' + @locationColumns



DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') t '

EXECUTE (@sqlString)

DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, *
		From ( ' + 
		@sql + ') query ) page 
		WHERE page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir
		


EXECUTE(@pagingSql)




GO
/****** Object:  StoredProcedure [dbo].[usp_GetJobMonthlyInvoiceReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_GetJobMonthlyInvoiceReport]
	@xmlData xml
AS

SET NOCOUNT ON

DECLARE @locationGroup AS VARCHAR (100)
DECLARE @locationColumns	AS VARCHAR(255)
DECLARE @StartDate AS DATE
DECLARE @EndDate AS DATE
DECLARE @whereClause AS VARCHAR(MAX)
DECLARE @sql AS VARCHAR(MAX)
DECLARE @viewBy	AS VARCHAR(20)
DECLARE @viewByColumn AS VARCHAR(250)
DECLARE @viewByGroup  AS VARCHAR(250)

DECLARE @startIndex VARCHAR(10)
DECLARE @pageSize VARCHAR(10)
DECLARE @sortField VARCHAR(100)
DECLARE @sortDir VARCHAR(64)

SELECT @locationGroup = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/LocationGroup') T(c)
SELECT @StartDate = T.c.value('.', 'DATE') FROM @xmlData.nodes('/Filters/StartDate') T(c)
SELECT @EndDate = T.c.value('.', 'DATE') FROM @xmlData.nodes('/Filters/EndDate') T(c)
SELECT @whereClause = T.c.value('.', 'VARCHAR(max)') FROM @xmlData.nodes('/Filters/ExtraWhereClause')T(c);
SELECT @viewBy = T.c.value('.', 'VARCHAR(20)') FROM @xmlData.nodes('/Filters/ViewBy') T(c)

SELECT @startIndex = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/StartIndex')T(c);
SELECT @pageSize = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/PageSize')T(c);
SELECT @sortField = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/SortField')T(c);
SELECT @sortDir = T.c.value('.', 'VARCHAR(64)') FROM @xmlData.nodes('/Filters/SortDir')T(c);

-- set first and last day of week/month/year.
IF(@ViewBy = 'Monthly')
BEGIN
	Set @StartDate = CONVERT(DATE, DATEADD(month, DATEDIFF(month, 0, @StartDate), 0), 101)  -- first day of month
	Set @EndDate = CONVERT(DATE, DATEADD(s, -1, DATEADD(mm, DATEDIFF(m, 0, @EndDate) + 1, 0)), 101)  -- last day of month
END
ELSE IF(@ViewBy = 'Yearly')
BEGIN
	Set @StartDate = CONVERT(DATE, DATEADD(yy, DATEDIFF(yy, 0, @StartDate), 0), 101)  -- first day of year
	Set @EndDate = CONVERT(DATE, DATEADD(yy, DATEDIFF(yy, 0, @EndDate) + 1, -1), 101)  -- last day of year
END

SELECT  
	YEAR(dii.DateBilled) AS BillingYear , 
	MONTH(dii.DateBilled) AS BillingMonth ,
	r.RegionDesc, 
	c.CountryDesc , 
	dis.BranchPlant, 
	bp.CompanyName,
	SUM(dii.AmountExtendedPrice * dbo.fnGetUSDConversionFactor(dii.TrxnCurrency, dii.DateBilled)) AS Amount,
	'USD' AS CurrShortName
INTO #Results
FROM Dispatches dis (NOLOCK) 
INNER JOIN DispatchInstances di (NOLOCK) ON dis.DispatchId = di.DispatchId  
INNER JOIN DispatchInstanceItems dii (NOLOCK) ON dii.DispatchInstanceId = di.DispatchInstanceId
LEFT OUTER JOIN BranchPlants bp (NOLOCK) ON bp.BranchPlant = dis.BranchPlant
LEFT OUTER JOIN Regions r (NOLOCK) ON r.Region = bp.Region
LEFT OUTER JOIN Countries c (NOLOCK) ON c.Country = bp.Country 
WHERE di.ShipType = 'DT-INVOICE'
		AND CONVERT(DATE, dii.DateBilled, 101) BETWEEN CONVERT(DATE,  @StartDate, 101)  AND CONVERT(DATE,  @EndDate, 101)
GROUP BY 
	YEAR(dii.DateBilled), MONTH(dii.DateBilled), r.RegionDesc, c.CountryDesc , dis.BranchPlant, bp.CompanyName


SET @locationColumns = ' RegionDesc '

IF(@locationGroup = 'Country')
	SET @locationColumns = ' RegionDesc, CountryDesc '
ELSE IF(@locationGroup = 'BranchPlant')
	SET @locationColumns = ' RegionDesc, CountryDesc, BranchPlant, CompanyName '


IF(@viewBy = 'Yearly')
BEGIN
	SET @viewByColumn = 'BillingYear '
	SET @viewByGroup = 'BillingYear'
END
ELSE IF(@viewBy = 'Monthly')
BEGIN
	SET @viewByColumn = 'BillingYear , BillingMonth '
	SET @viewByGroup = 'BillingYear , BillingMonth'
END

SET @sql = '

SELECT  
	' + @viewByColumn + ',
	' + @locationColumns + ',
	ROUND(SUM(Amount), 2) AS Amount,
	CurrShortName
FROM #Results (NOLOCK) 
WHERE ' + @whereClause + ' 
GROUP BY CurrShortName, ' + @viewByGroup + 	', ' + @locationColumns


DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') t '

EXECUTE (@sqlString)

DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, * From ( ' + 
		@sql + ') query ) page 
		where page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir
		


EXECUTE(@pagingSql)


DROP TABLE #Results

SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[usp_GetLocationsTree]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[usp_GetLocationsTree]
(
	@Region  varchar(max) = null,
	@Country  varchar(max) = null
)
AS
SET ANSI_NULLS ON
IF (@Country IS NOT NULL AND @Region != '' AND @Country != '')
BEGIN
	SELECT 
	'chkCity' as '@ID', 
	b.CompanyName as '@Value',
	c.CountryDesc + ' - ' + b.CompanyName as '@Text'
	FROM BranchPlants AS b (NOLOCK) LEFT OUTER JOIN
		 Regions AS r (NOLOCK) ON b.Region = r.Region LEFT OUTER JOIN
		 Countries AS c (NOLOCK) ON b.Country = c.Country 
	where 
	  b.Region = @Region 
	  AND b.Country = @Country
	  AND b.Active = 1
	group by b.CompanyName, c.CountryDesc
	order by b.CompanyName
	FOR XML PATH('TreeViewNode'), TYPE, ROOT('Nodes')	
END
ELSE IF (@Region IS NOT NULL AND @Region != '')
BEGIN
	SELECT 
	'chkCountry' as '@ID',
	b.Country as '@Value',
	c.CountryDesc '@Text'
	FROM BranchPlants AS b (NOLOCK) LEFT OUTER JOIN
		 Countries AS c (NOLOCK) ON b.Country = c.Country 
	where b.Country is not null
	AND b.Region = @Region
	AND b.Active = 1
	group by b.Region, b.Country, c.CountryDesc
	order by c.CountryDesc
	FOR XML PATH('TreeViewNode'), TYPE, ROOT('Nodes')
END
ELSE
BEGIN
	SELECT b.Region as '@Value',
	'chkRegion' as '@ID', 
    r.RegionDesc as '@Text'
	FROM BranchPlants AS b (NOLOCK) LEFT OUTER JOIN
		 Regions AS r (NOLOCK) ON b.Region = r.Region 
	where b.Region is not null
	AND b.Active = 1
	group by b.Region, r.RegionDesc
	order by r.RegionDesc
	FOR XML PATH('TreeViewNode'), TYPE, ROOT('Nodes')
END






GO
/****** Object:  StoredProcedure [dbo].[usp_getNCRComponents]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_getNCRComponents] (
	@RequestId int,
	@BOMNum VARCHAR(30) = NULL
)
AS
SET NOCOUNT ON

CREATE TABLE #tbl (
	ComponentId UNIQUEIDENTIFIER,
	RequestId INT,
	BOMNum VARCHAR(30),
	PartNum VARCHAR(30),
	PartDesc VARCHAR(255),
	SerialNum VARCHAR(30),
	Item VARCHAR(15),
	Reference VARCHAR(255),
	Qty INT,
	FailureCode VARCHAR(100),
	IsOtherCode BIT,
	[Description] VARCHAR(MAX),
	LastEditedBy VARCHAR(50),
	LastEditedDate DATETIME,
	AddedBy VARCHAR(50),
	AddedDate DATETIME
)

EXEC usp_getNCRComponentsEx @RequestId, @BOMNum

SELECT * FROM #tbl

DROP TABLE #tbl


GO
/****** Object:  StoredProcedure [dbo].[usp_getNCRComponentsEx]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Batch submitted through debugger: SQLQuery7.sql|9|0|C:\Users\kashif\AppData\Local\Temp\~vs75DC.sql




Create PROCEDURE [dbo].[usp_getNCRComponentsEx] (
	@ParentRequestId INT,  
	@ParentBOMNum varchar(30)
)
as
set nocount on

DECLARE @ComponentId UNIQUEIDENTIFIER
DECLARE @RequestId INT
DECLARE @BOMNum VARCHAR(30)
DECLARE @PartNum VARCHAR(30)
DECLARE @PartDesc VARCHAR(255)
DECLARE @SerialNum VARCHAR(30)
DECLARE @Item VARCHAR(15)
DECLARE @Reference VARCHAR(255)
DECLARE @Qty INT
DECLARE @FailureCode VARCHAR(100)
DECLARE @IsOtherCode BIT
DECLARE @Description VARCHAR(MAX)
DECLARE @LastEditedBy VARCHAR(50)
DECLARE @LastEditedDate DATETIME
DECLARE @AddedBy VARCHAR(50)
DECLARE @AddedDate DATETIME

DECLARE cur CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY FOR
SELECT ComponentId, RequestId, BOMNum, PartNum, PartDesc, SerialNum, Item, Reference, 
       Qty, FailureCode, IsOtherCode, [Description], LastEditedBy, LastEditedDate,
	   AddedBy, AddedDate
FROM NCRComponents With (NoLock)
WHERE RequestId = @ParentRequestId AND BOMNum = @ParentBOMNum 
ORDER BY PartNum

OPEN cur

FETCH NEXT FROM cur
INTO @ComponentId, @RequestId, @BOMNum, @PartNum, @PartDesc, @SerialNum, 
     @Item, @Reference, @Qty, @FailureCode, @IsOtherCode, @Description, @LastEditedBy, @LastEditedDate,
	@AddedBy, @AddedDate

WHILE @@FETCH_STATUS = 0
  BEGIN
	
	INSERT INTO #tbl (ComponentId, RequestId, BOMNum, PartNum, PartDesc, SerialNum, Item, Reference, Qty, FailureCode, IsOtherCode, [Description], LastEditedBy, LastEditedDate, AddedBy, AddedDate)
	VALUES (@ComponentId, @RequestId, @BOMNum, @PartNum, @PartDesc, @SerialNum, @Item, @Reference, @Qty, @FailureCode, @IsOtherCode, @Description, @LastEditedBy, @LastEditedDate, @AddedBy, @AddedDate)

	DECLARE cur2 CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY FOR
	SELECT ComponentId, RequestId, BOMNum, PartNum, PartDesc, SerialNum, Item, Reference, 
		   Qty, FailureCode, IsOtherCode, [Description], LastEditedBy, LastEditedDate, AddedBy, AddedDate 
	FROM NCRComponents With (NoLock)
	WHERE RequestId = @ParentRequestId AND BOMNum = @PartNum
	ORDER BY PartNum

	OPEN cur2
	
	FETCH NEXT FROM cur2
	INTO @ComponentId, @RequestId, @BOMNum, @PartNum, @PartDesc, @SerialNum,
         @Item, @Reference, @Qty, @FailureCode, @IsOtherCode, @Description, @LastEditedBy, @LastEditedDate, @AddedBy, @AddedDate

	WHILE @@FETCH_STATUS = 0
	  BEGIN
		
		INSERT INTO #tbl (ComponentId, RequestId, BOMNum, PartNum, PartDesc, SerialNum, Item, Reference, Qty, FailureCode, IsOtherCode, [Description], LastEditedBy, LastEditedDate, AddedBy, AddedDate) 
		          VALUES (@ComponentId, @RequestId, @BOMNum, @PartNum, @PartDesc, @SerialNum, @Item, @Reference, @Qty, @FailureCode, @IsOtherCode, @Description, @LastEditedBy, @LastEditedDate, @AddedBy, @AddedDate)
		
		EXEC usp_getNCRComponentsEx @ParentRequestId, @PartNum

	  FETCH NEXT FROM cur2
	  INTO @ComponentId, @RequestId, @BOMNum, @PartNum, @PartDesc, @SerialNum,
	       @Item, @Reference, @Qty, @FailureCode, @IsOtherCode, @Description, @LastEditedBy, @LastEditedDate, @AddedBy, @AddedDate

	END
	CLOSE cur2
	DEALLOCATE cur2

  FETCH NEXT FROM cur
  INTO @ComponentId, @RequestId, @BOMNum, @PartNum, @PartDesc, @SerialNum,
       @Item, @Reference, @Qty, @FailureCode, @IsOtherCode, @Description, @LastEditedBy, @LastEditedDate, @AddedBy, @AddedDate

END

CLOSE cur
DEALLOCATE cur

SET NOCOUNT OFF




GO
/****** Object:  StoredProcedure [dbo].[usp_GetNCRUtilization]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_GetNCRUtilization]
	@xmlData xml
AS
BEGIN

declare	@Interval as varchar(10)
declare	@StartDate as datetime
declare	@EndDate as datetime
declare	@BranchPlant varchar(25)

Set @Interval = (Select T.c.value('.', 'varchar(10)') as Interval 
FROM @xmlData.nodes('/Filters/Interval') T(c))
					
Set @StartDate = (Select T.c.value('.', 'datetime') as StartDate 
FROM @xmlData.nodes('/Filters/StartDate') T(c))

Set @EndDate = (Select T.c.value('.', 'datetime') as EndDate 
FROM @xmlData.nodes('/Filters/EndDate') T(c))

Set @BranchPlant = (Select T.c.value('.', 'varchar(15)') as BranchPlant 
FROM @xmlData.nodes('/Filters/BranchPlant') T(c))

	
if @BranchPlant = ''
begin
	SET @BranchPlant = NULL
end;
	
--addInterval is used to keep logic consistant with existing implementation
With ncrCTE AS
(
	SELECT
		1 as addInterval,
		@StartDate AS StartDate,
		CASE WHEN @Interval='Monthly' THEN DATEADD(m,1,@StartDate) 
			 WHEN @Interval='Yearly' THEN DATEADD(yyyy,1,@StartDate) 
			 WHEN @Interval='Weekly' THEN DATEADD(wk,1,@StartDate) 
			 WHEN @Interval='Daily' THEN DATEADD(d,1,@StartDate) 
		END AS EndDate
	Union ALL
		SELECT 
			addInterval + 1 AS addInterval,
			CASE WHEN @Interval='Monthly' THEN DATEADD(m,addInterval,@StartDate) 
				 WHEN @Interval='Yearly' THEN DATEADD(yyyy,addInterval,@StartDate) 
				 WHEN @Interval='Weekly' THEN DATEADD(wk,addInterval,@StartDate) 
				 WHEN @Interval='Daily' THEN DATEADD(d,addInterval,@StartDate) 
			END AS StartDate,
			CASE WHEN @Interval='Monthly' THEN DATEADD(m,addInterval + 1,@StartDate) 
				 WHEN @Interval='Yearly' THEN DATEADD(yyyy,addInterval + 1,@StartDate) 
				 WHEN @Interval='Weekly' THEN DATEADD(wk,addInterval + 1,@StartDate) 
				 WHEN @Interval='Daily' THEN DATEADD(d,addInterval + 1,@StartDate) 
			END AS EndDate
		FROM
			ncrCTE
		WHERE
			(CASE WHEN @Interval='Monthly' THEN DATEADD(m,addInterval + 1,@StartDate) 
				 WHEN @Interval='Yearly' THEN DATEADD(yyyy,addInterval + 1,@StartDate) 
				 WHEN @Interval='Weekly' THEN DATEADD(wk,addInterval + 1,@StartDate) 
				 WHEN @Interval='Daily' THEN DATEADD(d,addInterval + 1,@StartDate) 
			END) <= @EndDate
)
SELECT
	StartDate,
	EndDate,
	(SELECT COUNT(*) FROM Requests WITH(NOLOCK) WHERE RequestType='NCR' AND DateEntered Between ncrCTE.StartDate AND ncrCTE.EndDate and IsNull(@BranchPlant, BranchPlant) = BranchPlant) AS OpenTotal,
	(SELECT COUNT(*) FROM Requests WITH(NOLOCK) WHERE OpenClosed='C' AND RequestType='NCR' AND DateClosed Between ncrCTE.StartDate AND ncrCTE.EndDate and IsNull(@BranchPlant, BranchPlant) = BranchPlant) AS ClosedTotal
FROM
	ncrCTE
OPTION (MAXRECURSION 0)
END





GO
/****** Object:  StoredProcedure [dbo].[usp_GetNextAssetNum]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[usp_GetNextAssetNum]
AS
SET NOCOUNT ON

declare @KeyName varchar(25)
declare @BaseCode varchar(12)
declare @found varchar(1)
declare @SerialNum varchar(30)
declare @KeyValue varchar(1024)

Set @KeyName = 'NextAssetNum'
Set @BaseCode = 'XX'

Set @found = 'N'

Set @KeyValue = Null
Select @KeyValue = KeyValue From BranchPlantSettings (NOLOCK) Where KeyName=@KeyName And BranchPlant = @BaseCode

-- set default if not found
if @KeyValue is Null
begin
	Set @KeyValue = '100'

	Insert Into BranchPlantSettings (KeyName, BranchPlant, KeyValue)
	Values (@KeyName, @BaseCode, @KeyValue)
	
	Set @found = 'Y'
end

while @found = 'N'
begin
	Set @SerialNum = null
	Select @SerialNum = SerialNum from FixedAssets (NOLOCK) where SerialNum = @KeyValue
	
	if @SerialNum is null
	begin
		Set @found = 'Y'
	end

	if @found = 'N'
	begin
		Set @KeyValue = @KeyValue + 1
	end
end

Update BranchPlantSettings 
Set KeyValue = @KeyValue + 1
Where KeyName=@KeyName And BranchPlant = @BaseCode

Select @KeyValue

SET NOCOUNT OFF




/****** Object:  StoredProcedure [dbo].[usp_GetOpsAssetInfo]    Script Date: 08/06/2014 13:20:23 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_GetNonBuildSheetContainer]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- =============================================
-- Author:		Mangesh Taware
-- Create date: 12 Jan 2021
-- Description:	To get NonBuild Sheet report Container info
-- =============================================
CREATE PROCEDURE [dbo].[usp_GetNonBuildSheetContainer]
	  @ToolStringId UNIQUEIDENTIFIER

AS
BEGIN
	 

SELECT        tsc.Name AS ContainerName, tsc.SerialNum AS ContainerSerialNum,
			  tsc.Description AS ContainerDesc, tsf.OrderPosition AS AssetPosition, 
				tsf.SerialNum AS AssetSerialNum, tsf.InventoryItemNum AS AssetInvItemNum,
				tsf.Description AS AssetDesc, NULL AS AssetQty, tsf.Comments AS AssetComments, 
				tsc.ContainerId, tsf.SortNumber, 'Asset' AS Type,tsc.Weight As ContainerWeight,tsc.Dimension As ContainerDimension
FROM            ToolStrings AS ts INNER JOIN
                         ToolStringContainers AS tsc ON tsc.ToolStringId = ts.ToolStringId INNER JOIN
                         ToolStringFixedAssets AS tsf ON tsf.ToolStringID = ts.ToolStringId AND tsf.ContainerId = tsc.ContainerId
WHERE        (ts.ToolStringId = @ToolStringId)
UNION
SELECT        tsc.Name AS ContainerName, tsc.SerialNum AS ContainerSerialNum, tsc.Description AS ContainerDesc, NULL AS AssetPosition, 
                         tsnf.SerialNum AS AssetSerialNum, NULL AS AssetInvItemNum, tsnf.Description AS AssetDesc, tsnf.Quantity AS AssetQty, tsnf.Comments AS AssetComments, 
                         tsc.ContainerId, NULL AS SortNumber, 'NonAsset' AS Type,tsc.Weight As ContainerWeight,tsc.Dimension As ContainerDimension
FROM            ToolStrings AS ts INNER JOIN
                         ToolStringContainers AS tsc ON tsc.ToolStringId = ts.ToolStringId INNER JOIN
                         ToolStringNonSerialParts AS tsnf ON tsnf.ToolStringId = ts.ToolStringId AND tsnf.ContainerId = tsc.ContainerId
WHERE        (ts.ToolStringId = @ToolStringId)
ORDER BY tsc.ContainerId, tsf.SortNumber

END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetNonBuildSheetPFTDetail]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- =============================================
-- Author:		Mangesh Taware
-- Create date: 12 Jan 2021
-- Description:	To get Nono Build Sheet report detail info
-- =============================================
CREATE PROCEDURE [dbo].[usp_GetNonBuildSheetPFTDetail]
	  @ToolStringId UNIQUEIDENTIFIER,
	  @Language VARCHAR(3)='en',
	  @TimeZoneId int
AS
BEGIN
	 
	Declare @TimeZoneName varchar(100);
	Select @TimeZoneName = isnull(OptionLabel,'') from SelectOptions where SelectName = 'TimeZone' and OptionValue = @TimeZoneId

	SELECT		PWO.PFTType,
				PWO.PFTWOId,
				PFTC.ProcessName,
				PFTResult, PFTConfigSeqId , Comment, 
				[dbo].[ufnTimeZoneConvert](@TimeZoneId,PWOSeq.DateAdded) As [DateAdded]
				,Seq, 
				IsNUll( (Select TOP 1 TranslatedObjectName FROM PFTMultilingualObject WHERE PFTObjectId = PWOSeq.ObjectId AND Language = @Language) ,SeqName)
				SeqName, 
				IsNUll( (Select TOP 1 CASE WHEN len(TranslatedObjectDesc) > 355 then SUBSTRING(TranslatedObjectDesc, 1, 355) + '...(more)' Else TranslatedObjectDesc
						END FROM PFTMultilingualObject WHERE PFTObjectId = PWOSeq.ObjectId AND Language = @Language) ,
						CASE WHEN len(SeqDesc) > 355 then SUBSTRING(SeqDesc, 1, 355) + '...(more)' Else [SeqDesc] END)
				[SeqDesc],
    			LabName, PFTResultDesc,  Hours, 
				us.UserName,IsNull(us.LastName,'')+','+IsNull(us.FirstName,'') as Technician,
				(SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = PWOSF.UOM) AS UOM
				, PWOSF.Result	
				, PWOSF.FieldResult	
				, PWOSF.ResultInEmpirical	
				, PWOSF.TextResult1	
				, PWOSF.TextResult2	
				, PWOSF.TextResult3	
				, PWOSF.TextResult4
				, IsNUll( (Select TOP 1 TranslatedObjectName FROM PFTMultilingualObject WHERE PFTObjectId = FormField.ObjectId AND Language = @Language) ,FormField.PFTObjectName)  [FormFieldName]
				, IsNUll( (Select TOP 1 TranslatedObjectDesc FROM PFTMultilingualObject WHERE PFTObjectId = FormField.ObjectId AND Language = @Language) ,FormField.PFTObjectDescription)  [FormFieldDesc]
				, FormField.Field1
				, FormField.Field1Name
				, FormField.Field2
				, FormField.Field2Name
				, FormField.Field3
				, FormField.Field4
				, FormField.Field4Name
				, FormField.Field5
				, FormField.Field5Name
				, FormField.Field6
				, FormField.Field7
				, FormField.Field8
				, FormField.Field9
				, FormField.Field10
				, FormField.Field11
				, FormField.Field11Name
				, FormField.Field12
				, FormField.Field12Name
				, FormField.Field13
				, FormField.Field13Name
				, CASE WHEN FormField.ObjectType = 3 THEN
										 (SELECT  top 1 SUBSTRING(CONVERT([varchar](MAX), BlobContent), CHARINDEX(',', BlobContent) + 1, len(BlobContent))
										   FROM	 PFTBlobObjects
										   WHERE ObjectId = FormField.ObjectId) ELSE NULL END AS PicContent
				,pom.SequenceNumber
				,FormField.ObjectType
				, @TimeZoneName As [TimeZoneName]
				,PWO.FixedAssetId
				,PWO.SerialNum
				,pwo.DESCRIPTION As [SerialNumDesc]
			FROM  vwPFTWOSeq PWOSeq 
				  INNER JOIN VWPFTWOSearch PWO on PWOSeq.PFTWOId=PWO.PFTWOId
				  INNER JOIN PFTConfig PFTC ON PFTC.PFTConfigId   = PWO.PFTConfigId
				  LEFT JOIN PFTObjectMappings AS POM ON POM.ParentId = PWOSeq.ObjectId 
				  LEFT JOIN VW_PFTObjectSearch AS FormField ON FormField.ObjectId = POM.ObjectId and (FormField.ObjectType = 5 or FormField.ObjectType = 3)
				  LEFT JOIN PFTWOSeqFields PWOSF ON PWOSF.PFTWOSeqId = PWOSeq.PFTWOSeqId and PWOSF.ObjectId= POM.ObjectId 
				  LEFT JOIN Users us ON PWOSeq.UserId=us.UserId
				  WHERE  PWO.AssetRepairTrackId = @ToolStringId AND 
						 (PWO.ReasonForChange != 'Closed – Cancelled' or isnull(PWO.ReasonForChange,'0') = '0')
				  ORDER BY   PWO.DateAdded, PWOSeq.Seq 
END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetNonBuildSheetPFTFormsDetail]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- =============================================
-- Author:		Mangesh Taware
-- Create date: Jun2021
-- Description:	Get Buildsheet buildup/teardown PFTs forms detail
-- =============================================
CREATE PROCEDURE [dbo].[usp_GetNonBuildSheetPFTFormsDetail]
	  @PFTWOId UNIQUEIDENTIFIER,
	  @TimeZoneId int,
	  @Language VARCHAR(3)='en',
	  @WithPic bit
AS
BEGIN
	
	if (@PFTWOId != null)
	Declare  @TimeZoneName varchar(100) 
	Select @TimeZoneName = isnull(OptionLabel,'') from SelectOptions where SelectName = 'TimeZone' and OptionValue = @TimeZoneId

	begin
	 SELECT	
			pftw.WO_NO,
			pftw.PFTType,
			pftw.PFTWOId,
			pwf.PFTWOFormId,
			pftw.SerialNum,
			form.Name [FormName],
			form.Description [FormDesc],
			formColl.ObjectId,
			formColl.Name [FormCollectionsName],
			formColl.Description [FormCollectionsDesc]
			, IsNUll( (Select TOP 1 TranslatedObjectName FROM PFTMultilingualObject WHERE PFTObjectId = FormField.ObjectId AND Language = @Language) ,FormField.Name)  [FormFieldName]
    		, IsNUll( (Select TOP 1 TranslatedObjectDesc FROM PFTMultilingualObject WHERE PFTObjectId = FormField.ObjectId AND Language = @Language) ,FormField.Description) [FormFieldDesc]
    		, FormField.Field1
    		, CASE WHEN FormField.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldType' AND OptionValue = FormField.Field1  )                        
				Else FormField.Field1 END [Field1Name]   
    		, FormField.Field2
    		, CASE WHEN (FormField.type = 5 and FormField.Field1 ='1') THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field2)                        
				Else Null END [Field2Name]
			, FormField.Field3
    		, FormField.Field4
    		, CASE WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'MathSign' and OptionValue = FormField.Field4)                        
				Else FormField.Field4 END [Field4Name]
 			, FormField.Field5
    		, CASE  WHEN FormField.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = FormField.Field5)                        
				Else FormField.Field5 END [Field5Name]
    		, FormField.Field6
    		, FormField.Field7
    		, FormField.Field8
    		, FormField.Field9
    		, FormField.Field10
    		, FormField.Field11
    		, CASE  WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field11)                        
					Else FormField.Field11 END [Field11Name]
    		, FormField.Field12
    		, CASE WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field12)                        
					Else FormField.Field12 END [Field12Name]
    		, FormField.Field13
			, CASE  WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field13)                        
				  Else FormField.Field13 END [Field13Name]
			, (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = pwfcf.UOM) AS UOM
			, pwfcf.Result	
			, pwfcf.FieldResult	
			, pwfcf.ResultInEmpirical	
			, pwfcf.TextResult1	
			, pwfcf.TextResult2	
			, pwfcf.TextResult3	
			, pwfcf.TextResult4
			, IsNull(us.LastName,'')+','+IsNull(us.FirstName,'') as Technician
			, [dbo].[ufnTimeZoneConvert](1,pwfcf.DateAdded) As [DateAdded]  
			, CASE WHEN 1 = 1 THEN CASE WHEN FormField.Type = 3 THEN
										 (SELECT  top 1 SUBSTRING(CONVERT([varchar](MAX), BlobContent), CHARINDEX(',', BlobContent) + 1, len(BlobContent))
										   FROM	 PFTBlobObjects
										   WHERE ObjectId = FormField.ObjectId) ELSE NULL END
						ELSE NULL END AS PicContent
			,pom.SequenceNumber
			,@TimeZoneName As [TimeZoneName]
		    ,FormField.Type [ObjectType]
		FROM PFTWO AS pftw
			JOIN PFTWOForms AS pwf ON pwf.PFTWOId = pftw.PFTWOId
			JOIN PFTObjects AS form ON form.ObjectId = pwf.ObjectId
			JOIN PFTObjectMappings AS pomf ON pomf.ParentId =  pwf.ObjectId
			JOIN PFTWOFormCollections AS pwfc ON pwfc.PFTWOFormId = pwf.PFTWOFormId and pwfc.ObjectId = pomf.ObjectId
			JOIN PFTObjects AS formColl ON pwfc.ObjectId = formColl.ObjectId
			JOIN PFTObjectMappings AS pom ON pom.ParentId = pwfc.ObjectId
			JOIN PFTObjects AS FormField ON FormField.ObjectId = pom.ObjectId  
			Left JOIN PFTWOFormCollectionFields AS pwfcf ON pom.ObjectId = pwfcf.ObjectId And   pwfcf.PFTWOFormCollectionId = pwfc.PFTWOFormCollectionId
			Left JOIN Users us on pwfcf.UserId = us.UserId
	WHERE pftw.PFTWOId = @PFTWOId
	ORDER BY     pwf.PFTWOFormId,pomf.SequenceNumber, pom.SequenceNumber
	end 
END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetNonBuildSheetReportHeader]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Mangesh Taware
-- Create date: 12 Jan 2021
-- Description:	To get Nono Build Sheet report header info
-- =============================================
CREATE PROCEDURE [dbo].[usp_GetNonBuildSheetReportHeader]
	  @ToolStringId UNIQUEIDENTIFIER
AS
BEGIN
	 
SELECT        ts.SerialNumber AS ToolNumber, ts.ToolYear, 
(Select top 1 
	  d.DispatchNumber
FROM toolstrings ts
	JOIN jarruntools (NOLOCK) j on j.ToolStringId = ts.ToolStringId
	LEFT JOIN Dispatches (NOLOCK) d   ON j.JobId = d.DispatchId
	LEFT OUTER JOIN Customers (NOLOCK) cu ON d.JDECustomerNumber = cu.CustomerNumber   
WHERE  (ts.ToolStringId = @ToolStringId) order by j.DateAdded  desc) As DeliveryTicket,
 (Select top 1 
	 cu.CustomerName
FROM toolstrings ts
	JOIN jarruntools (NOLOCK) j on j.ToolStringId = ts.ToolStringId
	LEFT JOIN Dispatches (NOLOCK) d   ON j.JobId = d.DispatchId
	LEFT OUTER JOIN Customers (NOLOCK) cu ON d.JDECustomerNumber = cu.CustomerNumber   
WHERE  (ts.ToolStringId = @ToolStringId) order by j.DateAdded  desc) As CustomerName, 
 bst.TemplateName AS BuildSheetType, 
                         ts.District + ' - ' + bpl.CompanyName AS BranchPlant,
						  glp.Code AS ProductLine, ISNULL(us.LastName, '') + ',' + ISNULL(us.FirstName, '') AS Technician,
	   ts.CreateDate
FROM            ToolStrings AS ts INNER JOIN
                         GLProductLines AS glp ON ts.ProductLineId = glp.Id INNER JOIN
                         BranchPlants AS bpl ON ts.District = bpl.BranchPlant LEFT OUTER JOIN
                         Users AS us ON ts.CreateUserId = us.UserId
						 LEFT JOIN BuildSheetTemplates bst ON bst.TemplateID = ts.TemplateId
WHERE        (ts.ToolStringId = @ToolStringId)
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetOpsAssetInfo]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_GetOpsAssetInfo]    
 @xmlData AS XML,  
 @ViewName varchar(50) = NULL  
AS    
BEGIN    
    
SET NOCOUNT ON;    
    
DECLARE @FixedAssetId UNIQUEIDENTIFIER    
--DECLARE @AssetNumber varchar(10)     
    
SELECT @FixedAssetId = T.c.value('(FixedAssetId/text())[1]', 'uniqueidentifier')    
FROM @xmlData.nodes('/Filters') T(c);    
    
--select @AssetNumber = AssetNumber from FixedAssets (NOLOCK)    
--where FixedAssetId = @FixedAssetId     
   
IF (ISNULL(@ViewName,'AssetInfo') = 'AssetInfo')  
BEGIN   
 --- Asset Info Panel ---    
 SELECT  fa.FixedAssetId, fa.SerialNum, fa.LegacySerialNumber, fa.InventoryItemNum, fa.RNItemNum,    
   pfa.SerialNum AS ParentSerialNum,pfa.InventoryItemNum As ParentInventoryItemNum, pfa.RNItemNum AS ParentRNItemNum, pfa.AssetNumber AS ParentAssetNumber,        
   fa.AssetDescription as FixedAssetDescription,    
   i.DescShort as AssetDescription,    
   ri.DescShort as RNAssetDescription,    
   i.DescLong as InventoryDescLong,    
   fa.BranchPlant, fa.Ownership, fa.AssetNumber,    
   fa.ManufacturersSerialNumber,    
   fa.EquipmentStatus, fa.LastStatusChangeDate,    
   fa.PhysicalLocation, fa.CatCode16, fa.Cost, fa.NetBookValue,     
   fa.AccumDepreciation, fa.CurrencyCode, fa.ContractAccount, fa.DateAcquired, fa.LifeMonths,     
   fa.StartDepreciation_Date, fa.NewUsed, fa.Manufacturer, fa.ModelYear, fa.DateDisposed,     
   fa.FiscalYear,fa.LedgerType    
   , CASE WHEN fa.EquipmentStatus IN ('PT', 'IT') THEN    
    (SELECT TOP 1 SendingLocation from PartTransferDtl (NOLOCK) ptd     
  WHERE ptd.FixedAssetId=fa.FixedAssetId AND fa.EquipmentStatus IN ('PT', 'IT')    
  ORDER BY ptd.DateofTransaction DESC) ELSE NULL    
    END AS SourceBranchPlant    
   , CASE WHEN fa.EquipmentStatus IN ('PT', 'IT') THEN    
    (SELECT TOP 1 ReceivingLocation from PartTransferDtl (NOLOCK) ptd     
  WHERE ptd.FixedAssetId=fa.FixedAssetId AND fa.EquipmentStatus IN ('PT', 'IT')    
  ORDER BY ptd.DateofTransaction DESC) ELSE NULL    
    END AS DestBranchPlant    
   , (SELECT TOP 1 ReceivingLocation FROM PartTransferDtl ptd WITH(NOLOCK)    
  LEFT OUTER JOIN BranchPlants(NOLOCK) ibp ON ibp.BranchPlant = ptd.ReceivingLocation    
  WHERE ptd.FixedAssetId = fa.FixedAssetId AND ibp.IsOperationsBillableLocation = 1     
  ORDER BY ptd.DateofTransaction DESC  
    ) AS LastBillableBranchPlant,    
   ISNULL(ri.ToolPanel, i.ToolPanel) as ToolPanel,     
   ISNULL(ri.ToolCode, i.ToolCode) as ToolCode,     
   ISNULL(ri.ItemNum3, i.ItemNum3) as ItemNum3,     
   ISNULL(ri.PartClassification, i.PartClassification) as PartClassification,    
   i.Size, i.DescShort, i.DescLong, i.Critical, i.ToolPerJob, fa.ThirdItemNumber,    
   fa.FirmwareVersion,    
   fa.MasterFirmwareItemNum,    
   fa.MasterFirmwareRevision,    
   fa.LastComments,    
      
   inbp.HTSUS, inbp.ECCN,    
      
   bp.Country, bp.Region,     
      
   ps.Status AS StatusDesc,    
      
   j.JobNumber, bp.CompanyName as BranchPlantName, j.JobId    
    
 FROM dbo.FixedAssets (NOLOCK) fa    
 LEFT JOIN dbo.ItemNums (NOLOCK) i ON i.ItemNum = fa.InventoryItemNum    
 LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = fa.RNItemNum    
 LEFT JOIN dbo.ItemNumBranchPlants (NOLOCK) inbp ON inbp.BranchPlant = fa.BranchPlant AND inbp.ItemNum = fa.InventoryItemNum    
 LEFT JOIN dbo.BranchPlants (NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant    
 LEFT JOIN dbo.PartStatus (NOLOCK) ps ON ps.Code = fa.EquipmentStatus    
 LEFT JOIN dbo.DispatchInstanceItems (NOLOCK) dii ON dii.SerialNum = fa.SerialNum    
 LEFT JOIN dbo.DispatchInstances (NOLOCK) di ON di.DispatchInstanceId = dii.DispatchInstanceId    
 LEFT JOIN dbo.Dispatches (NOLOCK) d ON d.DispatchId = di.DispatchId    
 LEFT JOIN dbo.Jobs (NOLOCK) j ON j.JobId = d.JobId    
 LEFT OUTER JOIN dbo.FixedAssets (NOLOCK) pfa ON pfa.FixedAssetId = fa.ParentFixedAssetId    
 WHERE fa.FixedAssetId=@FixedAssetId    
  
END  
  
--- Event View Grid ---    
IF (ISNULL(@ViewName,'EventView') = 'EventView')  
BEGIN   
  
DECLARE @jobOrDTData TABLE (KeyId uniqueidentifier NOT NULL, JobId uniqueidentifier NOT NULL, JobPFTNum varchar(100) NOT NULL,  
StartDate datetime NULL, PFTType varchar(100) NULL, OperHrs float NULL, CircHrs float NULL,  
DrillHrs float NULL, IncidentNumber varchar (50) NULL, IncidentId uniqueidentifier NULL,  
FieldSummary varchar (5000) NULL, FailureCodes nvarchar(4000) NULL, IsMatch int NULL,  
RecordType varchar (50) NULL, CustomerName varchar (100) NULL, BranchPlant varchar (30) NULL,  
BranchPlantCompanyName varchar (100) NULL, Well varchar (200) NULL, RunNumber varchar (50) NULL,  
MdStart float NULL, MdStartUOM varchar (30) NULL, MdEnd float NULL,  
MdEndUOM varchar (30) NULL, SerialNum varchar (50) NULL, CompDesc varchar (100) NULL)  
  
INSERT INTO @jobOrDTData  
SELECT  NEWID() [KeyId], 
   j.JobId, JobNumber AS JobPFTNum, r.StartDate, 'Job' AS PFTType  
 , OperHrs, CircHrs, DrillHrs, IncidentNumber, i.IncidentId, FieldSummary  
 , STUFF((SELECT ', ' + (fcc.FailureCategoryCode + sfc.FailureSubCategoryCode + fc.FailureCode)  
    FROM Incidents i2  
    INNER JOIN ToolStringComponentInfo tsci WITH (NOLOCK) ON tsci.IncidentID = i2.IncidentID  
    INNER JOIN FailureCodes fc WITH (NOLOCK) ON fc.FailureCodeId = tsci.CompFailureCodeID  
    INNER JOIN FailureCategories fcc WITH (NOLOCK) ON fcc.FailureCategoryId = fc.FailureCategoryId  
    INNER JOIN FailureSubCategories sfc WITH (NOLOCK) ON sfc.FailureSubCategoryId = fc.FailureSubCategoryId  
    WHERE i2.IncidentID = i.IncidentID  
    FOR XML PATH('')), 1, 1, '')   
 AS FailureCodes  
 ,(SELECT COUNT(1) FROM ToolStringComponentInfo WITH (NOLOCK)  
   WHERE CompFailureCodeID IS NOT NULL  
   AND IncidentID = i.IncidentID   
   AND ToolStringComponentInfo.FixedAssetID = tsci.FixedAssetID)   
 AS IsMatch  
 , 'J' As RecordType, c.CustomerName, b.BranchPlant, b.CompanyName AS BranchPlantCompanyName  
 , Well, RunNumber, MdStart, MdStartUOM,   
 MdEnd, MdEndUOM, p.SerialNum, itemNum.DescShort AS CompDesc  
FROM ToolStringComponentInfo tsci WITH (NOLOCK)  
INNER JOIN FixedAssets p WITH (NOLOCK) ON p.FixedAssetId = tsci.FixedAssetID  
INNER JOIN Runs r WITH (NOLOCK) ON r.RunID = tsci.RunID AND r.IsDeleted = 0  
INNER JOIN Wells w WITH (NOLOCK) ON w.WellID = r.WellID AND w.IsDeleted = 0  
INNER JOIN Jobs j WITH (NOLOCK) ON j.JobId = w.JobID and j.IsDeleted = 0  
LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = j.BranchPlant  
LEFT JOIN Customers C WITH (NOLOCK) ON C.CustomerId= j.CustomerId  
LEFT JOIN Incidents i WITH (NOLOCK) ON i.RunID = r.RunID  
LEFT JOIN ItemNums itemNum WITH (NOLOCK) ON itemNum.ItemNum = p.InventoryItemNum  
WHERE p.FixedAssetID = @FixedAssetId and r.StartDate is not null  
  
IF NOT EXISTS (SELECT TOP 1 JobId FROM @jobOrDTData)  
BEGIN  
-------- IF job data is not available then display DT data -------------------------   

	-- new select statement  by vivek bhati--
	INSERT INTO @jobOrDTData  
	SELECT  NEWID() [KeyId], d.DispatchId AS JobId,  CAST(d.DispatchNumber As varchar(100)) AS JobPFTNum, di.DateShipped AS StartDate,
		'Delivery Ticket' AS PFTType, NULL, NULL, NULL, null, null, null, null, null, 'D' as RecordType,  
		null, b.BranchPlant, b.CompanyName AS BranchPlantCompanyName, null, null, null, null, null, null, dii.SerialNum, itemNum.DescShort AS CompDesc    
	FROM	Dispatches d WITH (NOLOCK)
	JOIN	DispatchInstances di WITH (NOLOCK)		ON di.DispatchId = d.Dispatchid and di.ShipType = 'DT-SEQ-ADD'
	JOIN	DispatchInstanceItems dii WITH (NOLOCK)	ON dii.DispatchInstanceId = di.DispatchInstanceId AND ISNULL(dii.ErrorMessage, '') = ''
	JOIN	FixedAssets f WITH (NOLOCK)				ON f.SerialNum = dii.SerialNum and f.RNItemNum = dii.ItemNum
	LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = d.BranchPlant 
	LEFT JOIN ItemNums itemNum WITH (NOLOCK) ON itemNum.ItemNum = f.InventoryItemNum  
	WHERE	f.fixedassetid = @FixedAssetId
END		
  
SELECT * FROM @jobOrDTData  
UNION
select NEWID() [KeyId],ts.ToolStringId as jobid,SerialNumber AS JobPFTNum,tsf.DateAdded as StartDate ,'Build Sheet' AS PFTType,
NULL, NULL, NULL, null, null, null, null, null, TS.[Type] as RecordType, 
null, b.BranchPlant, b.CompanyName AS BranchPlantCompanyName, null, null, null, null, null, null, f.SerialNum, itemNum.DescShort AS CompDesc 
from ToolStrings ts 
join ToolStringFixedAssets tsf on ts.ToolStringId =tsf.ToolStringID
join FixedAssets f on tsf.FixedAssetID=f.FixedAssetId
LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = f.BranchPlant 
LEFT JOIN ItemNums itemNum WITH (NOLOCK) ON itemNum.ItemNum = f.InventoryItemNum  
where 
f.FixedAssetId=@FixedAssetId
UNION    
SELECT NEWID() [KeyId],    
 AssetRepairTrackId as JobId, ARTNumber as JobPFTNum, DateAdded As StartDate, OptionLabel AS PFTType    
 , (SELECT  SUM(ISNULL(r.OperHrs, 0))    
  FROM ToolStringComponentInfo tsci (NOLOCK)    
  INNER JOIN Runs r (NOLOCK) ON R.RunID = tsci.RunID AND R.IsDeleted = 0    
  WHERE tsci.FixedAssetId = a.FixedAssetId AND r.OperHrs IS NOT NULL AND r.EndDate <= a.DateAdded    
   AND r.EndDate >= ISNULL((SELECT MAX(pft2.DateAdded) FROM AssetRepairTrack pft2 (NOLOCK)     
         WHERE pft2.FixedAssetId = a.FixedAssetId AND pft2.DateAdded < a.DateAdded AND pft2.SRPFTWOId IS NOT NULL), '1-1-2001')    
    AND r.IsDeleted = 0    
 ) as OperHoursSinceRepair    
 , ( SELECT     
    SUM(ISNULL(r.CircHrs, 0))    
  FROM ToolStringComponentInfo tsci (NOLOCK)    
  INNER JOIN Runs r (NOLOCK) ON R.RunID = tsci.RunID AND R.IsDeleted = 0    
  WHERE tsci.FixedAssetId = a.FixedAssetId AND r.OperHrs IS NOT NULL AND r.EndDate <= a.DateAdded    
   AND r.EndDate >= ISNULL((SELECT MAX(pft2.DateAdded) FROM AssetRepairTrack pft2 (NOLOCK)     
         WHERE pft2.FixedAssetId = a.FixedAssetId AND pft2.DateAdded < a.DateAdded AND pft2.SRPFTWOId IS NOT NULL), '1-1-2001')    
    AND r.IsDeleted = 0    
 ) as CircHoursSinceRepair    
 , ( SELECT     
   SUM(ISNULL(r.DrillHrs, 0))    
  FROM ToolStringComponentInfo tsci (NOLOCK)    
  INNER JOIN Runs r (NOLOCK) ON R.RunID = tsci.RunID AND R.IsDeleted = 0    
  WHERE tsci.FixedAssetId = a.FixedAssetId AND r.OperHrs IS NOT NULL AND r.EndDate <= a.DateAdded    
   AND r.EndDate >= ISNULL((SELECT MAX(pft2.DateAdded) FROM AssetRepairTrack pft2 (NOLOCK)     
         WHERE pft2.FixedAssetId = a.FixedAssetId AND pft2.DateAdded < a.DateAdded AND pft2.SRPFTWOId IS NOT NULL), '1-1-2001')    
    AND r.IsDeleted = 0    
 ) AS DrillHoursSinceRepair    
 , null, null, null, null, null, 'P' as RecordType,    
 null, null, null, null, null, null, null, null, null, null, null    
FROM AssetRepairTrack a (NOLOCK)    
left join SelectOptions sl (NOLOCK) on sl.SelectName = 'PFTConfigType' and 
sl.OptionValue = (CASE WHEN a.SRPFTWOId IS NOT NULL THEN '1' ELSE '2' END)  -- added by vivek bhati
WHERE a.FixedAssetID = @FixedAssetId    
order by StartDate desc    
    
END    

--- Jobs Grid ---    
IF (ISNULL(@ViewName,'JobView') = 'JobView')  
BEGIN   
SELECT     
  j.JobId, CustomerName, JobNumber, b.BranchPlant, b.CompanyName AS BranchPlantCompanyName, Well,     
  RunNumber, r.StartDate, r.EndDate,    
  MdStart, MdStartUOM, MdEnd, MdEndUOM, p.SerialNum,    
  itemNum.DescShort AS CompDesc, OperHrs, CircHrs, DrillHrs,    
  IncidentNumber, i.IncidentId    
FROM ToolStringComponentInfo tsci WITH (NOLOCK)    
INNER JOIN FixedAssets p WITH (NOLOCK) ON p.FixedAssetId = tsci.FixedAssetID    
INNER JOIN Runs r WITH (NOLOCK) ON r.RunID = tsci.RunID AND r.IsDeleted = 0    
INNER JOIN Wells w WITH (NOLOCK) ON w.WellID = r.WellID AND w.IsDeleted = 0    
INNER JOIN Jobs j WITH (NOLOCK) ON j.JobId = w.JobID and j.IsDeleted = 0    
LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = j.BranchPlant    
LEFT JOIN Customers C WITH (NOLOCK) ON C.CustomerId= j.CustomerId    
LEFT JOIN Incidents i WITH (NOLOCK) ON i.RunID = r.RunID    
LEFT JOIN ItemNums itemNum WITH (NOLOCK) ON itemNum.ItemNum = p.InventoryItemNum    
WHERE p.FixedAssetID = @FixedAssetId    
END  
  
--- PFTs Grid ---    
IF (ISNULL(@ViewName,'PFTView') = 'PFTView')  
BEGIN   
  
SELECT     
  p.PFTWOId, p.WO_NO, p.BranchPlant, p.SerialNum, p.ItemNum, pc.ProcessName, so.OptionLabel AS PFTType,    
  p.DateAdded    
  , (SELECT TOP 1 DateAdded     
     FROM  dbo.PFTWOSeq (NOLOCK) a    
     WHERE a.PFTWOId = p.PFTWOId AND a.UserName IS NOT NULL    
     ORDER BY DateAdded DESC) AS LastDateAdded    
  , '1' AS OperHoursSinceRepair, '1' AS DrillHoursSinceRepair, '1' AS CircHoursSinceRepair    
  , b.CompanyName AS BranchPlantCompanyName    
FROM dbo.PFTWO (NOLOCK) p    
LEFT JOIN dbo.PFTConfig (NOLOCK) pc ON pc.PFTConfigId = p.PFTConfigId    
LEFT JOIN dbo.SelectOptions (NOLOCK) so ON so.SelectName = 'PFTConfigType' AND so.OptionValue = p.PFTType    
LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = p.BranchPlant    
WHERE p.FixedAssetId = @FixedAssetId    
ORDER BY p.DateAdded DESC    
    
END  
  
--- Tool Mods Grid ---    
  
IF (ISNULL(@ViewName,'ToolMod') = 'ToolMod')  
BEGIN   
  
 SELECT tm.ToolModId, tm.ModNum, tm.ModSubject, tm.ModDesc     
 FROM ToolModFixedAssets tmf (NOLOCK)    
 INNER JOIN ToolMods tm (NOLOCK) ON tm.ToolModId = tmf.ToolModId    
 WHERE tmf.FixedAssetId = @FixedAssetId    
  
END   
  
   
-- Work Orders Grid--    
IF (ISNULL(@ViewName,'WorkOrderView') = 'WorkOrderView')  
BEGIN   
 Select w.WorkOrderId, w.WorkOrderNum, w.JDEWorkOrderNum, s.OptionLabel as WorkOrderTypeName, w.BranchPlant,     
   w.SerialNum, w.InventoryItemNum, w.AddedBy, w.DateAdded, w.DateClosed, w.Status    
   , b.CompanyName AS BranchPlantCompanyName    
 from WorkOrders(NOLOCK) w    
 left join SelectOptions s (NOLOCK) on s.OptionValue =  w.WorkOrderType and SelectName = 'WorkOrderType'    
 left join PFTWO p (NOLOCK) on w.WorkOrderId = p.WorkOrderId    
 LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = w.BranchPlant    
 Where w.FixedAssetId = @FixedAssetId    
  
END    
  
  
--- AIRTs Grid ---    
IF (ISNULL(@ViewName,'AIRTView') = 'AIRTView')  
BEGIN   
  
 SELECT      
   a.AssetRepairTrackId, a.ARTNumber, a.FromBranchPlant, a.ItemNum, a.NCRNumber, j.JobNumber, i.IncidentNumber,    
   a.DateAdded, a.DateClosed, a.Status, b.CompanyName AS BranchPlantCompanyName, j.JobId    
 FROM dbo.AssetRepairTrack (NOLOCK) a    
 LEFT JOIN dbo.Jobs (NOLOCK) j ON j.JobId = a.JobId    
 LEFT JOIN dbo.Incidents (NOLOCK) i ON i.IncidentID = a.IncidentId    
 LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = a.FromBranchPlant    
 WHERE a.FixedAssetId = @FixedAssetId    
 ORDER BY a.DateAdded DESC    
   
END  
  
--- Movements Grid ---    
IF (ISNULL(@ViewName,'Movements') = 'Movements')  
BEGIN   
  
SELECT    
  ptd.PartTransferDtlId    
  , ptd.SendingLocation    
  , bps.CompanyName as SendingLocationName    
  , ptd.ReceivingLocation    
  , bpr.CompanyName as ReceivingLocationName    
  , ptd.JDETransactionId  , ptd.Quantity    
  , ptd.DateofTransaction    
  , ptd.DocumentNumber    
  , ptd.DocumentType    
  , sodt.OptionLabel as DocumentDesc    
  , ptd.InventoryItemNum as ItemNo    
  , ptd.UserCreatedDocument    
  , case when ptd.DocumentType = 'SR' then     
  (select top 1 di.DispatchInstanceId     
  from Dispatches d     
  join DispatchInstances di on di.DispatchId = d.DispatchId    
  join DispatchInstanceItems dii on dii.DispatchInstanceId = di.DispatchInstanceId    
  where d.DispatchNumber = ptd.DocumentNumber    
  and di.ShipType = 'DT-SEQ-ADD'    
  and dii.AssetNumber = ptd.AssetNumber    
  )    
 else null end as DispatchInstanceId    
FROM PartTransferDtl(NOLOCK) ptd    
LEFT JOIN BranchPlants(NOLOCK) bps ON bps.BranchPlant = ptd.SendingLocation    
LEFT JOIN BranchPlants(NOLOCK) bpr ON bpr.BranchPlant = ptd.ReceivingLocation    
LEFT JOIN SelectOptions(NOLOCK) sodt ON sodt.OptionValue = ptd.DocumentType AND sodt.SelectName = 'TransferDocumentType'    
WHERE ptd.FixedAssetId = @FixedAssetId    
--ORDER BY   ptd.DateofTransaction    DESC      
UNION    
select    
  dii.DispatchInstanceItemId as PartTransferDtlId    
  , case dii.QtyShipped when 0 then j.JobNumber else d.BranchPlant end  as SendingLocation    
  , case dii.QtyShipped when 0 then 'Job' else bp.CompanyName end  as SendingLocationName    
  , case dii.QtyShipped when 0 then d.BranchPlant else j.JobNumber end as ReceivingLocation    
  , case dii.QtyShipped when 0 then bp.CompanyName else 'Job' end as ReceivingLocationName    
  , case dii.QtyShipped when 0 then di.ReturnSequenceNum else di.SequenceNum end as JDETransactionId    
  , case dii.QtyShipped when 0 then dii.QtyReturned else dii.QtyShipped end as Quantity    
  , case dii.QtyShipped when 0 then dii.DateReturned else di.DateShipped end as DateofTransaction    
  , Convert(varchar(30), d.DispatchNumber) as DocumentNumber    
  , case dii.QtyShipped when 0 then 'Return' else 'Ship' end as DocumentType    
  , NULL as DocumentTypeDesc    
  , dii.ItemNum as ItemNo    
  , NULL as UserCreatedDocument  
  , di.DispatchInstanceId    
from DispatchInstanceItems(NOLOCK) dii  
INNER JOIN DispatchInstances(NOLOCK) di on di.DispatchInstanceId = dii.DispatchInstanceId    
INNER JOIN Dispatches(NOLOCK) d on d.DispatchId = di.DispatchId    
LEFT JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = d.BranchPlant and bp.IsNonLiveLocation = 0  
LEFT JOIN Jobs(NOLOCK) j on j.JobId = d.JobId  
WHERE dii.FixedAssetId = @FixedAssetId  
ORDER BY ptd.DateofTransaction DESC    
  
END  
--- Firmware Grid ---    
  
IF (ISNULL(@ViewName,'FirmwareView') = 'FirmwareView')  
BEGIN   
  
 SELECT  pbf.PFTBoardFirmwareId, pbf.BoardItemNum, pbf.Component, pbf.EndFirmwareItemNum, pbf.EndFirmwareRevision,    
   p.SerialNum, p.ItemNum, p.AssetNumber, i.DescShort    
 FROM dbo.PFTBoardFirmwares (NOLOCK) pbf    
 LEFT JOIN dbo.PFTWO (NOLOCK) p ON p.PFTWOId = pbf.PFTWOId    
 LEFT JOIN dbo.ItemNums (NOLOCK) i ON i.ItemNum = pbf.EndFirmwareItemNum    
 WHERE p.FixedAssetId = @FixedAssetId    
 ORDER BY pbf.DateAdded DESC    
    
END  
  
--- TCNs Grid ---    
IF (ISNULL(@ViewName,'TCNView') = 'TCNView')  
BEGIN   
  
 SELECT cn.CNId, cn.CNNum, cn.ECNNum, cn.CRNum, cn.CNDesc, cn.CNType, cn.DateAdded, cn.CNDateClosed, cn.CNStatus,    
   cnp.DateCompleted, r.RequestType    
 FROM dbo.ChangeNoticeParts (NOLOCK) cnp    
 LEFT JOIN dbo.ChangeNotices (NOLOCK) cn ON cn.CNId = cnp.CNId    
 LEFT JOIN Requests r (NOLOCK) On cn.CRNum = CONVERT(varchar(50), r.RequestId)    
 WHERE cnp.FixedAssetId = @FixedAssetId    
 ORDER BY cn.DateAdded DESC    
    
END  
  
--- Components Grid ---    
IF (ISNULL(@ViewName,'ComponentView') = 'ComponentView')  
BEGIN   
  
 ;WITH RecursiveCTE(Level, FixedAssetId, SerialNum, InventoryItemNum, RNItemNum, Qty, AssetDescription, ParentFixedAssetId, ParentSerialNum, ParentInventoryItemNum)    
 AS    
 (    
  SELECT  0 as Level, fa.FixedAssetId, fa.SerialNum, fa.RNItemNum, fa.InventoryItemNum, fa.CurrentItemQty as Qty, fa.AssetDescription,    
   fa.ParentFixedAssetId, fap.SerialNum as ParentSerialNum, fap.InventoryItemNum as ParentInventoryItemNum    
  FROM FixedAssets fa (NOLOCK)    
  LEFT OUTER JOIN FixedAssets (NOLOCK) fap ON fap.FixedAssetId = fa.ParentFixedAssetId    
  WHERE fa.FixedAssetId = @FixedAssetId    
     
  UNION ALL    
     
  SELECT Level + 1 as Level, pc.FixedAssetId, pc.SerialNum, pc.InventoryItemNum, pc.RNItemNum, pc.CurrentItemQty as Qty, pc.AssetDescription,    
   pc.ParentFixedAssetId, ct.SerialNum as ParentSerialNum, ct.InventoryItemNum as ParentInventoryItemNum    
  FROM FixedAssets pc (NOLOCK)    
  INNER JOIN RecursiveCTE ct ON pc.ParentFixedAssetId = ct.FixedAssetId  AND pc.ParentFixedAssetId <> pc.FixedAssetId    
 )    
 Select cte.Level, cte.FixedAssetId, cte.SerialNum, cte.InventoryItemNum, cte.RNItemNum, cte.Qty, cte.AssetDescription,     
   cte.ParentFixedAssetId, cte.ParentSerialNum, cte.ParentInventoryItemNum, IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) as IsAsset     
 from RecursiveCTE cte    
 LEFT JOIN dbo.ItemNums (NOLOCK) i ON i.ItemNum = cte.InventoryItemNum    
 LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = cte.RNItemNum    
 ORDER BY Level, ParentSerialNum    
  
END  
    
--- Documents Grid ---    
IF (ISNULL(@ViewName,'DocumentView') = 'DocumentView')  
BEGIN   
  
 SELECT dia.DocItemId, di.DocItemTitle, di.DocItemDesc, di.DocItemFileSize, di.DocItemDate, p.WO_NO, p.PFTWOId    
 FROM dbo.DocItemAttach (NOLOCK) dia    
 LEFT JOIN dbo.DocItems (NOLOCK) di ON di.DocItemId = dia.DocItemId    
 LEFT JOIN dbo.PFTWO (NOLOCK) p ON p.PFTWOId = dia.GuidKeyId    
 WHERE di.DocItemType = 1 AND p.FixedAssetId = @FixedAssetId    
 UNION    
 SELECT dia.DocItemId, di.DocItemTitle, di.DocItemDesc, di.DocItemFileSize, di.DocItemDate, NULL, NULL    
 FROM dbo.DocItemAttach (NOLOCK) dia    
 LEFT JOIN dbo.DocItems (NOLOCK) di ON di.DocItemId = dia.DocItemId    
 WHERE di.DocItemType = 1 AND dia.GuidKeyId = @FixedAssetId    
 ORDER BY di.DocItemTitle    
  
    
SELECT distinct p.WO_NO, p.PFTWOId     
FROM dbo.DocItemAttach (NOLOCK) dia      
LEFT JOIN dbo.DocItems (NOLOCK) di ON di.DocItemId = dia.DocItemId      
LEFT JOIN dbo.PFTWO (NOLOCK) p ON p.PFTWOId = dia.GuidKeyId      
WHERE di.DocItemType = 1 AND p.FixedAssetId = @FixedAssetId    
    
END  
    
  
IF (ISNULL(@ViewName, '') ='MaintenanceView')  
 BEGIN  
 DECLARE @AssetrepairTrackId UNIQUEIDENTIFIER ;  
 SET @AssetrepairTrackId = (SELECT top 1 assetRepairTrackId FROM AssetRepairTrack where FixedAssetId = @FixedAssetId order by DateAdded desc);  
   
 SELECT CASE WHEN LastMeterReadingValue >  dbo.ufn_CBMMonitor_GetTriggerValue(ItemNum,  @AssetrepairTrackId, PFTConfigId, MeterReadingTypeId)  THEN 3   
 WHEN LastMeterReadingValue > (dbo.ufn_CBMMonitor_GetTriggerValue(ItemNum,  @AssetrepairTrackId, PFTConfigId, MeterReadingTypeId) * 0.9) THEN 2  
 ELSE 1 END [PMCheckStatus], *   
 FROM  
 (  
  SELECT f.FixedAssetId,   
      pd.PMDispositionId,  
      c.CreateJDEWO,   
      pc.PFTConfigID,   
      f.SerialNum,   
      f.InventoryItemNum [ItemNum],   
      inum.DescShort [AssetDescription],   
      c.MeterReadingTypeId,   
      s.OptionLabel [MeterReadingType],   
   -- Current calculation for LastMeterReadingValue ---------------------------------  
    --CASE  WHEN r.LastMeterReadingValue IS NOT NULL AND r.MeterReadingTypeId = 5 THEN DATEDIFF(dd, r.LastMeterReadingValue, getdate())   
    ---- for scheduled case date needs to be converted to int  
    -- WHEN r.LastMeterReadingValue IS NOT NULL THEN r.LastMeterReadingValue  
    -- ELSE (CASE WHEN ISNULL(c.EffectiveDate,GETDATE()) >  ISNULL((SELECT Min(DateofTransaction) FROM PartTransferDtl WHERE FixedAssetid = f.fixedAssetId AND Dest = 'IN'),  
    --               (SELECT DateAdded from FixedAssets Where FixedAssetId = f.FixedAssetId))   
    --    THEN DefaultMeterReading ELSE 0 END) END AS LastMeterReadingValue,  
   -- As per CBM history calculations should be as below --------------------------------------------------  
   COALESCE( CASE WHEN c.MeterReadingTypeId != 5 THEN r.LastMeterReadingValue END,     
      CASE WHEN c.MeterReadingTypeId = 5 THEN -- scheduled    
        DATEDIFF(dd,     
        -- Check Last PM PFT Completed    
        COALESCE(r.LastMeterReadingValue   
        ,(SELECT MIN(DateofTransaction) [DateofTransaction]     
         FROM PartTransferDtl p (NOLOCK)     
         Where Dest = 'IN' AND p.FixedAssetId = f.fixedAssetId)    
        , f.DateAdded), GETDATE())   
        WHEN c.MeterReadingTypeId = 8 THEN -- AIRT    
      CASE WHEN ---check active airt count pmpft  
       (SELECT COUNT(pw.PFTWOId) FROM PFTWO pw   
       WHERE pw.FixedAssetId = f.FixedAssetId AND pw.PFTType = 3 AND pw.PFTConfigId = CASE WHEN ISNULL(CAST(i.PFTConfigId AS NVARCHAR(50)), '') != '' THEN i.PFTConfigId ELSE pc.PFTConfigId END     
       AND c.MeterReadingTypeId = 8 AND pw.Active = 1) >= 1   
      THEN 0 WHEN --check latest airt count pmpft  
       (SELECT COUNT(pw.PFTWOId) FROM PFTWO pw   
       WHERE pw.FixedAssetId = f.FixedAssetId AND pw.PFTType = 3 AND pw.PFTConfigId = CASE WHEN ISNULL(CAST(i.PFTConfigId AS NVARCHAR(50)), '') != '' THEN i.PFTConfigId ELSE pc.PFTConfigId END     
       AND c.MeterReadingTypeId = 8) >= 1   
      THEN  
        (SELECT COUNT(*) FROM AssetRepairTrack art   
       WHERE art.FixedAssetId = f.FixedAssetId AND art.DateAdded >= (SELECT MAX(pws.DateAdded) [DateAdded] FROM PFTWO pw JOIN PFTWOSeq pws on pw.PFTWOId = pws.PFTWOId  
       WHERE pw.FixedAssetId = f.FixedAssetId and pw.PFTType = 3 AND pw.PFTConfigId = CASE WHEN ISNULL(CAST(i.PFTConfigId AS NVARCHAR(50)), '') != '' THEN i.PFTConfigId ELSE pc.PFTConfigId END     
       AND c.MeterReadingTypeId = 8 AND pw.Active = 0))  
      ELSE   
       (SELECT COUNT(*) FROM AssetRepairTrack art WHERE art.FixedAssetId = f.FixedAssetId)   
      END   
      WHEN c.MeterReadingTypeId IN (10, 11) THEN -- Days Since DT Return   
       dbo.ufn_CbmMonitor_GetDTLastMeterReadingValue(f.fixedAssetid, c.CBMMonitorId)   
      END  , DefaultMeterReading, 0) AS LastMeterReadingValue,  
   dbo.ufn_CBMMonitor_GetTriggerValue(f.InventoryItemNum, a.AssetRepairTrackId, pc.PFTConfigId, c.MeterReadingTypeId) [TriggerValue],  
   pc.ProcessName AS [PFTProcessName]  
  FROM AssetRepairTrack a (NOLOCK)  
    JOIN CBMMonitorAssetItemNums mi (NOLOCK) ON a.ItemNum = mi.ItemNum and IsParent = 1  
    JOIN CBMMonitor c (NOLOCK) ON c.CBMMonitorId = mi.CBMMonitorId and c.Active = 1  
    JOIN CBMMonitorAssetItemNums p(NOLOCK) ON p.CBMMonitorId = c.CBMMonitorId and p.IsParent = 0  
    JOIN FixedAssets f (NOLOCK) ON a.FixedAssetId = ISNULL(f.TopLevelFixedAssetId, f.FixedAssetId) and f.InventoryItemNum = p.ItemNum  
    JOIN ItemNums inum ON inum.ItemNum = f.InventoryItemNum  
    JOIN SelectOptions s (NOLOCK) ON s.SelectName = 'CBMMeterTypes' AND s.OptionValue = c.MeterReadingTypeId  
    JOIN PFTConfig pc ON pc.ObjectNumber = c.ObjectNumber AND pc.IsObsolete = 0  
    --JOIN PFTConfig G(NOLOCK) ON G.PFTConfigId = c.PFTConfigID  
    LEFT JOIN CBMCalculatedMeterReadings r (NOLOCK) ON r.FixedAssetId = f.FixedAssetid AND r.CBMMonitorId = c.CBMMonitorId --r.MeterReadingTypeId = c.MeterReadingTypeId AND  
    LEFT JOIN PMDispositionItems i (NOLOCK)on i.AssetRepairTrackId = a.AssetrepairTrackId and i.FixedAssetId = f.FixedAssetId  
      and i.MeterReadingTypeId = c.MeterReadingTypeId and i.ObjectNumber = c.ObjectNumber  
    LEFT JOIN PMDispositions PD(NOLOCK) ON PD.AssetRepairTrackId = a.AssetRepairTrackId and pd.PFTConfigId = CASE WHEN ISNULL(CAST(i.PFTConfigId AS NVARCHAR(50)), '') != '' THEN i.PFTConfigId ELSE pc.PFTConfigId END   
      
   WHERE a.AssetRepairTrackId =  @AssetrepairTrackId  
 ) A   
 ORDER BY a.SerialNum, a.MeterReadingTypeId  
  
  
 --PM History grid  
 SELECT distinct  
  F.SerialNum,  
  f.InventoryItemNum [ItemNum],  
  F.AssetDescription,  
  S.OptionLabel [MeterReadingType],   
  i.MeterReadingValue,   
  i.TriggerValue,  
  C.ProcessName AS PFTName,   
  CONVERT(varchar(20), pw.DateAdded,101) AS PFTCreationDate  
 FROM AssetRepairTrack A (NOLOCK)  
   JOIN AssetRepairTrack a1 (NOLOCK) ON a1.FixedAssetId = a.FixedAssetId  
   JOIN PFTWO pw (NOLOCK) ON  pw.AssetRepairTrackId = a1.AssetRepairTrackId  
   JOIN PMDispositions p (NOLOCK) ON p.AssetRepairTrackId = a1.AssetRepairTrackId AND p.DispositionOption = 1   
   INNER JOIN PMDispositionItems i (NOLOCK) ON i.AssetRepairTrackId = a1.AssetRepairTrackId and pw.PFTConfigId = i.PFTConfigId  
   INNER JOIN FixedAssets F (NOLOCK) ON i.FixedAssetId = F.FixedAssetId  
   INNER JOIN SelectOptions S (NOLOCK) ON S.SelectName = 'CBMMeterTypes' AND S.OptionValue = i.MeterReadingTypeId  
   INNER JOIN PFTConfig c (NOLOCK) ON c.PFTConfigId = i.PFTConfigId  
 WHERE f.FixedAssetId=@FixedAssetId  
  
 --A.AssetRepairTrackId =  (SELECT top 1 assetRepairTrackId FROM AssetRepairTrack where FixedAssetId = @FixedAssetId order by DateAdded desc) AND i.CreatedOn < a.DateAdded  
   
 --SELECT PD.PMDispositionId,   
 --  PC.PFTConfigId,   
 --  PC.ProcessName [PFTName],   
 --  PC.ProcessDesc [Description],   
 --  ISNULL(DispositionOption, -1) [DispositionOption]  
 --FROM PMDispositions PD (NOLOCK)   
 --  JOIN PFTConfig PC (NOLOCK) ON PD.PFTConfigId = PC.PFTConfigId  
 --WHERE PD.AssetRepairTrackId = (SELECT top 1 assetRepairTrackId FROM AssetRepairTrack where FixedAssetId = @FixedAssetId order by DateAdded desc)  
  
  
 --SELECT PD.PFTConfigId,   
 --  F.SerialNum,   
 --  F.InventoryItemNum [ItemNum],   
 --  F.AssetDescription,   
 --  i.MeterReadingTypeId,   
 --  S.OptionLabel [MeterReadingType],   
 --  CONVERT(DECIMAL(18,2), i.MeterReadingValue)[LastMeterReadingValue],   
 --  CONVERT(DECIMAL(18,2), i.TriggerValue) [TriggerValue]  
 --FROM PMDispositions PD (NOLOCK)  
 --  JOIN PMDispositionItems i (NOLOCK) ON i.AssetRepairTrackId = pd.AssetRepairTrackId and pd.PFTConfigId = i.PFTConfigId  
 --  JOIN FixedAssets F (NOLOCK) ON f.FixedAssetId = i.FixedAssetId  
 --  JOIN SelectOptions S (NOLOCK) ON S.SelectName = 'CBMMeterTypes' AND S.OptionValue = i.MeterReadingTypeId  
 --WHERE f.FixedAssetId = @FixedAssetId  
     
      
  
  
 END  
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetOutstandingDemandReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_GetOutstandingDemandReport]
	@xmlData xml
AS

SET NOCOUNT ON

DECLARE @locationGroup AS VARCHAR (100)
DECLARE @toolGroup AS VARCHAR(100)
DECLARE @locationColumns	AS VARCHAR(255)
DECLARE @toolColumns	AS VARCHAR(255)
DECLARE @whereClause AS VARCHAR(MAX)
DECLARE @sql AS VARCHAR(MAX)

DECLARE @startIndex VARCHAR(10)
DECLARE @pageSize VARCHAR(10)
DECLARE @sortField VARCHAR(100)
DECLARE @sortDir VARCHAR(64)

SELECT @locationGroup = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/LocationGroup') T(c)
SELECT @toolGroup = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/ToolGroup') T(c)


SELECT @startIndex = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/StartIndex')T(c);
SELECT @pageSize = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/PageSize')T(c);
SELECT @sortField = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/SortField')T(c);
SELECT @sortDir = T.c.value('.', 'VARCHAR(64)') FROM @xmlData.nodes('/Filters/SortDir')T(c);
SELECT @whereClause = T.c.value('.', 'VARCHAR(max)') FROM @xmlData.nodes('/Filters/WhereClause')T(c);


SET @locationColumns = 'rf.ToRegion'
SET @toolColumns = 'rf.ToolPanel'

IF(@locationGroup = 'Country')
	SET @locationColumns = 'rf.ToRegion, rf.ToCountry'
ELSE IF(@locationGroup = 'BranchPlant')
	SET @locationColumns = 'rf.ToRegion, rf.ToCountry, rf.ToBranchPlant, rf.ToCompanyName'
	
IF(@toolGroup = 'ToolPanel,ToolCode')
	SET @toolColumns = 'rf.ToolPanel, rf.ToolCode'	
ELSE IF(@toolGroup = 'ToolPanel,ToolCode,ItemNum')
	SET @toolColumns = 'rf.ToolPanel, rf.ToolCode, rf.ItemNum'	
	

SET @sql = '

SELECT 
	YEAR(rf.RequiredDate) as Year,
	MONTH(rf.RequiredDate) as Month,
	' + @locationColumns + ',' + @toolColumns + ',
    SUM(rf.QtyOutstanding) AS QtyOutstanding,
    SUM(rf.QtyOutstanding * rf.StandardCost * dbo.fnGetUSDConversionFactor(rf.CurrShortName,NULL)) AS TotalCost,
    ''USD'' AS CurrencyCode
FROM vwOutstandingRequestItems (NOLOCK) rf '
+ @whereClause + '
GROUP BY  YEAR(rf.RequiredDate), MONTH(rf.RequiredDate),' + @locationColumns + ',' + @toolColumns 



DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') t '

EXECUTE (@sqlString)

DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, * From ( ' + 
		@sql + ') query ) page 
		where page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir
		


EXECUTE(@pagingSql)

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_GetParentByItemNum]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_GetParentByItemNum]
(
	@ItemNum  varchar(30),
	@IsRootParentSearch bit = 1
)
AS

IF(@IsRootParentSearch = 1)
BEGIN
	;WITH CTE AS
	(
		SELECT ParentItemNum,
				ItemNum 
		FROM ItemNumConfigs anchor 
		WHERE ItemNum = @ItemNum AND ISNULL(anchor.IsToolString, 0) = 0
		GROUP BY ParentItemNum, itemnum
			
		UNION ALL 

		SELECT anchor2.ParentItemNum,
				anchor2.ItemNum 
		FROM ItemNumConfigs (NOLOCK) anchor2
		INNER JOIN CTE  on anchor2.ItemNum = CTE.ParentItemNum
		Where ISNULL(anchor2.IsToolString, 0) = 0
	)

	SELECT inc.ItemNum,
			i.DescShort,
			inc.Qty,
			CASE WHEN(SELECT COUNT(*) from ItemNumConfigs inc2 where inc2.ParentItemNum = inc.ItemNum AND ISNULL(inc2.IsToolString, 0) = 0) > 0 THEN 1 ELSE 0 END AS HasChildren
	FROM ItemNumConfigs (NOLOCK) inc
	LEFT OUTER JOIN ItemNums (NOLOCK) i on i.ItemNum = inc.ItemNum
	WHERE inc.ItemNum in (Select ParentItemNum from CTE)
	AND ISNULL(inc.IsToolString, 0) = 0 
	GROUP BY inc.ItemNum, i.descshort, inc.Qty
	ORDER BY itemnum
	--option (maxrecursion 0)
END
ELSE
BEGIN
	SELECT inc.ItemNum,
			i.DescShort,
			inc.Qty,
			CASE WHEN(SELECT COUNT(*) from ItemNumConfigs inc2 where inc2.ParentItemNum = inc.ItemNum AND ISNULL(inc2.IsToolString, 0) = 0) > 0 THEN 1 ELSE 0 END AS HasChildren
	FROM ItemNumConfigs (NOLOCK) inc
	INNER JOIN ItemNums (NOLOCK) i on i.ItemNum = inc.ItemNum
	WHERE inc.ParentItemNum = @ItemNum
	AND ISNULL(inc.IsToolString, 0) = 0
	GROUP BY inc.ItemNum, i.descshort, inc.Qty
	ORDER BY itemnum		
END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetStatusUpdateRules_WAM]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==================================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 06th July 2017
--DESCRIPTION: To get status list for asset status update
--==================================================================
CREATE PROC [dbo].[usp_GetStatusUpdateRules_WAM]
@State VARCHAR(100)
AS
  BEGIN
	SELECT	[UR].[Source], [PS].[Code], [PS].[Status], [UR].[State], [UR].[Islive]
	FROM	[StatusUpdateRules] [UR]
			INNER JOIN [PartStatus] [PS] ON [PS].[Code] = [UR].[Dest] 
	WHERE	[UR].[State] = @State
	ORDER BY[UR].[Sort]
  END
GO
/****** Object:  StoredProcedure [dbo].[usp_GetTapRoot]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_GetTapRoot]
	@TapRootId uniqueidentifier
AS
BEGIN
	SET NOCOUNT ON;
	
	WITH
	  cteFaultCodeTapRoots (TapRootId, TapRootDesc, ParentTapRootId, [Level])
	  AS
	  (
		SELECT TapRootId, TapRootDesc, ParentTapRootId, 1
		FROM FaultCodeTapRoots (NOLOCK) 
		WHERE TapRootId = @TapRootId
		UNION ALL

		SELECT f.TapRootId, f.TapRootDesc, f.ParentTapRootId, c.[Level] + 1
		FROM FaultCodeTapRoots (NOLOCK) f
		  INNER JOIN cteFaultCodeTapRoots c
			ON f.TapRootId = c.ParentTapRootId
	  )
	SELECT
	  TapRootDesc, [Level]
	FROM cteFaultCodeTapRoots

	ORDER BY [Level] DESC
END


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON





/****** Object:  StoredProcedure [dbo].[usp_GetUserPermissionWithParents]    Script Date: 08/06/2014 13:27:46 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_GetToolTree]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_GetToolTree]
(
	@ToolPanel  varchar(40) = null,
	@ToolCode  varchar(40) = null
)
AS
SET ANSI_NULLS ON
IF (@ToolCode IS NOT NULL AND @ToolPanel != '' AND @ToolCode != '')
BEGIN
	SELECT 
		FixedAssetId as '@Value',
		SerialNum + ' - ' + ISNULL(AssetDescription,'*') as '@Text',
		'../Parts/AssetInfoDisplay.aspx?id='+lower(FixedAssetId) as '@URL'
	FROM FixedAssets(NOLOCK) AS fa 
	LEFT OUTER JOIN ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
	LEFT OUTER JOIN ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum 
	where ISNULL(ri.ToolCode, i.ToolCode) = @ToolCode
	AND ISNULL(ri.ToolPanel, i.ToolPanel) = @ToolPanel
	AND SerialNum IS NOT NULL
	order by SerialNum
	FOR XML PATH('TreeViewNode'), TYPE, ROOT('Nodes')	
END
ELSE IF (@ToolPanel IS NOT NULL AND @ToolPanel != '')
BEGIN
	SELECT 
		ISNULL(ri.ToolCode, i.ToolCode) as '@Value',
		ISNULL(ri.ToolCode, i.ToolCode) + ' (' +cast(count(*) as varchar)+ ')' as '@Text'
	FROM FixedAssets(NOLOCK) fa  
	LEFT OUTER JOIN ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
	LEFT OUTER JOIN ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum 
	where ISNULL(ri.ToolCode, i.ToolCode) IS NOT NULL
	AND SerialNum IS NOT NULL
	AND ISNULL(ri.ToolPanel, i.ToolPanel) IS NOT NULL
	AND ISNULL(ri.ToolPanel, i.ToolPanel) = @ToolPanel	
	group by ISNULL(ri.ToolPanel, i.ToolPanel), ISNULL(ri.ToolCode, i.ToolCode)
	order by ISNULL(ri.ToolCode, i.ToolCode)
	FOR XML PATH('TreeViewNode'), TYPE, ROOT('Nodes')
END
ELSE
BEGIN
	SELECT 
		ISNULL(ri.ToolPanel, i.ToolPanel) as '@Value',
		ISNULL(ri.ToolPanel, i.ToolPanel) + ' (' +cast(count(*) as varchar)+ ')' as '@Text'
    FROM FixedAssets(NOLOCK) fa 
    LEFT OUTER JOIN ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
	LEFT OUTER JOIN ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
	where ISNULL(ri.ToolPanel, i.ToolPanel) IS NOT NULL
	AND SerialNum IS NOT NULL
	AND ISNULL(ri.ToolCode, i.ToolCode) IS NOT NULL
	group by ISNULL(ri.ToolPanel, i.ToolPanel)
	order by ISNULL(ri.ToolPanel, i.ToolPanel)
	FOR XML PATH('TreeViewNode'), TYPE, ROOT('Nodes')
END







GO
/****** Object:  StoredProcedure [dbo].[usp_GetUserPermissionWithParents]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[usp_GetUserPermissionWithParents](@id int)
AS
BEGIN 


CREATE TABLE #UserPermissions(
	[DocItemUserPermissionId] [int] NOT NULL,
	[DocItemId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[HasWriteAccess] [bit] NOT NULL,
	[HasDeleteAccess] [bit] NOT NULL,
	[HasFullAccess] [bit] NOT NULL
) 

INSERT INTO #UserPermissions
SELECT * FROM DocItemUserPermissions  WHERE DocItemId = @id

DECLARE @parentID int
SET @parentID = (SELECT  ParentDocItemId FROM DocItems (NOLOCK) WHERE DocItemId = @id)
  
WHILE @parentID IS NOT NULL 
BEGIN
	IF @parentID = 0
		BREAK


	DECLARE @CurrentPath varchar (512)
	SET @id = @parentID
    
	SELECT @parentID = ParentDocItemId
      FROM DocItems (NOLOCK) 
      WHERE DocItemId = @id
	
	INSERT INTO #UserPermissions
	SELECT diup.* FROM DocItemUserPermissions diup
	WHERE diup.DocItemId = @id AND UserId NOT IN (SELECT UserId FROM #UserPermissions)
		
END

SELECT up.DocItemUserPermissionId, up.DocItemId, up.UserId, up.HasWriteAccess, up.HasDeleteAccess, 
	up.HasFullAccess, u.UserName, u.FirstName + ' ' + u.LastName AS FullName
FROM #UserPermissions up
LEFT JOIN Users (NOLOCK) u ON u.UserId = up.UserId


DROP TABLE #UserPermissions	

END





/****** Object:  StoredProcedure [dbo].[usp_GetWOFixedAssetTree]    Script Date: 08/06/2014 13:28:51 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_GetWOFixedAssetTree]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_GetWOFixedAssetTree]
	@FixedAssetId uniqueidentifier
AS

WITH RecursiveCTE(
	ParentAssetNumber, ParentSerialNum, AssetNumber,ParentNumber,
	ParentFixedAssetId,FixedAssetId,
	InventoryItemNum,RNItemNum,SerialNum,Revision,level,CurrentItemQty
)
	AS 
	( 
		SELECT  fap.AssetNumber as ParentAssetNumber,
				fap.SerialNum as ParentSerialNum,
				fa.AssetNumber, 
				fap.AssetNumber as ParentNumber,
				fa.FixedAssetId as ParentFixedAssetId,
				fa.FixedAssetId,
				fa.InventoryItemNum,
				fa.RNItemNum,
				fa.SerialNum,
				fa.Revision, 
				0 as level,
				fa.CurrentItemQty
		 FROM FixedAssets (NOLOCK) fa
		 LEFT OUTER JOIN FixedAssets (NOLOCK) fap ON fap.FixedAssetId = fa.ParentFixedAssetId
		 WHERE fa.FixedAssetId = @FixedAssetId
 
		UNION ALL

		SELECT			
				ct.AssetNumber as ParentAssetNumber,
				ct.SerialNum as  ParentSerialNum,
				pc.AssetNumber,
				ct.AssetNumber as ParentNumber,
				ct.FixedAssetId as ParentFixedAssetId,
				pc.FixedAssetId,
				pc.InventoryItemNum,
				pc.RNItemNum,
				pc.SerialNum,
				pc.Revision,
				level+1,
				pc.CurrentItemQty
		  FROM FixedAssets (NOLOCK) pc
		  INNER JOIN RecursiveCTE ct  ON pc.ParentFixedAssetId = ct.FixedAssetId  AND pc.ParentFixedAssetId <> pc.FixedAssetId
	) 
SELECT 
	level, 
	ParentAssetNumber, 
	ParentSerialNum, 
	AssetNumber,
	ParentNumber,
	ParentFixedAssetId,
	FixedAssetId,
	InventoryItemNum,
	RNItemNum,
	SerialNum,
	Revision,
	CurrentItemQty
FROM RecursiveCTE order by level,ParentNumber






/****** Object:  StoredProcedure [dbo].[usp_Import_BatteryCreate]    Script Date: 08/06/2014 13:32:20 ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[usp_GetWorkOrderCount]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_GetWorkOrderCount]
	@xmlData AS XML
AS
BEGIN
	SET NOCOUNT ON;

    DECLARE @StartDate AS DATETIME 
	DECLARE @EndDate AS DATETIME 
	DECLARE @StartIndex AS INT
	DECLARE @EndIndex AS INT

	DECLARE @TotalCount AS INT

	SET ARITHABORT ON

	SELECT @StartDate = (CASE WHEN T.c.value('.', 'varchar') = '' THEN NULL ELSE T.c.value('.', 'datetime') END) from @xmlData.nodes('/Filters/StartDate') T(c)
	SELECT @EndDate = (CASE WHEN T.c.value('.', 'varchar') = '' THEN NULL ELSE T.c.value('.', 'datetime') END) from @xmlData.nodes('/Filters/EndDate') T(c)
	SELECT @StartIndex = T.c.value('.', 'INT') from @xmlData.nodes('/Filters/StartIndex') T(c)
	SELECT @EndIndex = T.c.value('.', 'INT') from @xmlData.nodes('/Filters/EndIndex') T(c)
	
	SET @EndIndex = @StartIndex + @EndIndex
	SET @StartIndex = @StartIndex + 1

  	 SELECT @TotalCount = Count(*) FROM 
		( 
			SELECT wo.BranchPlant,i.ToolPanel,
			CONVERT(VARCHAR, month(wo.DateAdded)) + '/' + CONVERT(VARCHAR, year(wo.DateAdded)) AS MonthYear,  
			COUNT(*) WOCount

			FROM WorkOrders wo (NOLOCK)
				LEFT OUTER JOIN ItemNums i (NOLOCK) ON wo.InventoryItemNum = i.ItemNum

			WHERE	wo.DateAdded >= CASE WHEN @StartDate Is not null then @StartDate else (Select min(dateAdded) from WorkOrders (NOLOCK)) end AND
					wo.DateAdded <= CASE WHEN @EndDate Is not null then @EndDate else (Select max(dateAdded) from WorkOrders (NOLOCK)) end

				            
    		GROUP BY wo.BranchPlant,i.ToolPanel,
    			CONVERT(VARCHAR, MONTH(wo.DateAdded)) + '/' + CONVERT(VARCHAR, YEAR(wo.DateAdded))
    			
    	) AS A 
	
	--define data table
	CREATE TABLE #tblWOCountData
	(
		id INT IDENTITY NOT NULL,
		RowId INT,
		BranchPlant VARCHAR(12),
		BranchPlantName VARCHAR(50),
		ToolPanel VARCHAR(30),
		MonthYear VARCHAR(7),
		SortMonthYear VARCHAR(25),
		WOCount INT,
		WOClosedCount INT
	)

	--get all work order count
	INSERT INTO #tblWOCountData(RowId,BranchPlant,BranchPlantName,ToolPanel,MonthYear,SortMonthYear,WOCount)
	SELECT RowId, BranchPlant,BranchPlantName, ToolPanel, MonthYear, SortMonthYear, WOCount FROM
	(
		SELECT ROW_NUMBER() OVER (ORDER BY BranchPlant,BranchPlantName, ToolPanel, SortMonthYear) AS RowId, BranchPlant, BranchPlantName, ToolPanel, MonthYear, SortMonthYear, WOCount FROM 
			( 
       			SELECT BranchPlant, BranchPlantName, ToolPanel, MonthYear, SortMonthYear, WOCount FROM 
       			( 
       				SELECT wo.BranchPlant, bp.CompanyName as BranchPlantName, i.ToolPanel,
       				CONVERT(VARCHAR, month(wo.DateAdded)) + '/' + CONVERT(VARCHAR, year(wo.DateAdded)) AS MonthYear,  
       				CONVERT(DATETIME, CONVERT(VARCHAR, YEAR(wo.DateAdded)) + '-' + CONVERT(VARCHAR, MONTH(wo.DateAdded)) + '-01') AS SortMonthYear, 
       				COUNT(*) WOCount

       				FROM WorkOrders wo (NOLOCK)
						LEFT OUTER JOIN ItemNums i (NOLOCK) ON wo.InventoryItemNum = i.ItemNum
						LEFT OUTER JOIN BranchPlants bp (NOLOCK) ON bp.BranchPlant = wo.BranchPlant

					WHERE 	wo.DateAdded >= CASE WHEN @StartDate Is not null then @StartDate else (Select min(dateAdded) from WorkOrders (NOLOCK)) end AND
							wo.DateAdded <= CASE WHEN @EndDate Is not null then @EndDate else (Select max(dateAdded) from WorkOrders (NOLOCK)) end

						            
            		GROUP BY wo.BranchPlant, bp.CompanyName,i.ToolPanel,
            			CONVERT(VARCHAR, MONTH(wo.DateAdded)) + '/' + CONVERT(VARCHAR, YEAR(wo.DateAdded)), 
            			CONVERT(DATETIME, CONVERT(VARCHAR, YEAR(wo.DateAdded)) + '-' + CONVERT(VARCHAR, MONTH(wo.DateAdded)) + '-01') 
            	) AS A 
            ) AS B 
     ) AS C 
	
	WHERE C.RowId BETWEEN @StartIndex AND @EndIndex ORDER BY BranchPlant,ToolPanel,SortMonthYear 


	--get closed work order count
	UPDATE #tblWOCountData SET WOClosedCount = (
											SELECT COUNT(*) 
											FROM WorkOrders wo (NOLOCK)
												INNER JOIN ItemNums i (NOLOCK) ON wo.InventoryItemNum = i.ItemNum
												
											WHERE
												MONTH(wo.DateClosed) = MONTH(#tblWOCountData.SortMonthYear) AND 
												YEAR(wo.DateClosed)= YEAR(#tblWOCountData.SortMonthYear) AND
												wo.BranchPlant = #tblWOCountData.BranchPlant AND 
												i.ToolPanel = #tblWOCountData.ToolPanel	
										)

	SELECT * FROM #tblWOCountData 
	SELECT @TotalCount as TotalCount 

	SET ARITHABORT OFF
	DROP TABLE #tblWOCountData

END





GO
/****** Object:  StoredProcedure [dbo].[usp_GetWorkOrderHistoryTree]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[usp_GetWorkOrderHistoryTree]
	@FixedAssetId uniqueidentifier,
	@WorkOrderId uniqueidentifier
AS

WITH RecursiveCTE( 
	ParentFixedAssetId,
	FixedAssetId,
	WorkOrderId,
	InventoryItemNum,
	RNItemNum,
	SerialNum,
	Revision,
	level,
	Qty,
	FixedAssetHistoryId,
	ParentSerialNum
)AS( 
	SELECT  fa.FixedAssetId as ParentFixedAssetId,
			fa.FixedAssetId,
			fa.WorkOrderId,
			fa.InventoryItemNum,
			fa.RNItemNum,
			fa.SerialNum,
			fa.Revision, 
			0 AS level,
			fa.Qty,
			fa.FixedAssetHistoryId,
			f.SerialNum as ParentSerialNum
	FROM FixedAssetHistory fa (NOLOCK)
	LEFT JOIN FixedAssets f (NOLOCK) on f.FixedAssetId = fa.ParentFixedAssetId
	WHERE fa.FixedAssetId = @FixedAssetId and fa.WorkOrderId =  @WorkOrderId
	UNION ALL
	SELECT			
		ct.FixedAssetId as ParentFixedAssetId,
		pc.FixedAssetId,
		ct.WorkOrderId,
		pc.InventoryItemNum,
		pc.RNItemNum,
		pc.SerialNum,
		pc.Revision,
		level+1,pc.Qty,
		pc.FixedAssetHistoryId,
		f.SerialNum as ParentSerialNum
	FROM FixedAssetHistory pc (NOLOCK)
	INNER JOIN RecursiveCTE ct ON pc.ParentFixedAssetId = ct.FixedAssetId AND pc.WorkOrderId = ct.WorkOrderId AND pc.ParentFixedAssetId <> pc.FixedAssetId
	INNER JOIN FixedAssets f (NOLOCK) on f.FixedAssetId = ct.FixedAssetId
) 
SELECT 
	cte.level,
	cte.ParentFixedAssetId,
	cte.FixedAssetId,
	cte.WorkOrderId,
	cte.InventoryItemNum,
	cte.RNItemNum,
	cte.SerialNum,
	cte.Revision,
	cte.Qty,
	cte.FixedAssetHistoryId,
	cte.ParentSerialNum,
	IsNull(ri.DescShort, i.DescShort) as AssetDescription
FROM RecursiveCTE cte
LEFT JOIN ItemNums i (NOLOCK) on i.ItemNum = cte.InventoryItemNum
LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = cte.RNItemNum 
ORDER BY level, ParentSerialNum, InventoryItemNum, SerialNum





GO
/****** Object:  StoredProcedure [dbo].[usp_GetWorkOrderToolCodeCount]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_GetWorkOrderToolCodeCount]
    @xmlData AS XML
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @StartDate AS DATETIME 
    DECLARE @EndDate AS DATETIME 
    DECLARE @StartIndex AS INT
    DECLARE @EndIndex AS INT

    DECLARE @TotalCount AS INT

    SET ARITHABORT ON

    SELECT @StartDate = (CASE WHEN T.c.value('.', 'varchar') = '' THEN NULL ELSE T.c.value('.', 'datetime') END) from @xmlData.nodes('/Filters/StartDate') T(c)
    SELECT @EndDate = (CASE WHEN T.c.value('.', 'varchar') = '' THEN NULL ELSE T.c.value('.', 'datetime') END) from @xmlData.nodes('/Filters/EndDate') T(c)
    SELECT @StartIndex = T.c.value('.', 'INT') from @xmlData.nodes('/Filters/StartIndex') T(c)
    SELECT @EndIndex = T.c.value('.', 'INT') from @xmlData.nodes('/Filters/EndIndex') T(c)
    
    SET @EndIndex = @StartIndex + @EndIndex
    SET @StartIndex = @StartIndex + 1

     SELECT @TotalCount = Count(*) FROM 
        ( 
            SELECT wo.BranchPlant,i.ToolCode,
            CONVERT(VARCHAR, month(wo.DateAdded)) + '/' + CONVERT(VARCHAR, year(wo.DateAdded)) AS MonthYear,  
            CONVERT(DATETIME, CONVERT(VARCHAR, YEAR(wo.DateAdded)) + '-' + CONVERT(VARCHAR, MONTH(wo.DateAdded)) + '-01') AS SortMonthYear, 
            COUNT(*) WOCount

            FROM WorkOrders wo (NOLOCK)
            LEFT OUTER JOIN ItemNums i (NOLOCK) ON wo.InventoryItemNum = i.ItemNum 
            WHERE   wo.DateAdded >= CASE WHEN @StartDate Is not null then @StartDate else (Select min(dateAdded) from WorkOrders (NOLOCK)) end AND
            wo.DateAdded <= CASE WHEN @EndDate Is not null then @EndDate else (Select max(dateAdded) from WorkOrders (NOLOCK)) end
            and i.Active = 1
                
            GROUP BY wo.BranchPlant,i.ToolCode,
            CONVERT(VARCHAR, MONTH(wo.DateAdded)) + '/' + CONVERT(VARCHAR, YEAR(wo.DateAdded)), 
            CONVERT(DATETIME, CONVERT(VARCHAR, YEAR(wo.DateAdded)) + '-' + CONVERT(VARCHAR, MONTH(wo.DateAdded)) + '-01')               
        ) AS A 
    
    --define data table
    CREATE TABLE #tblWOCountData
    (
        id INT IDENTITY NOT NULL,
        RowId INT,
        BranchPlant VARCHAR(12),
        BranchPlantName VARCHAR(50),
        ToolCode VARCHAR(30),
        MonthYear VARCHAR(7),
        SortMonthYear VARCHAR(25),
        WOCount INT,
        WOClosedCount INT
    )

    --get all work order count
    INSERT INTO #tblWOCountData(RowId,BranchPlant, BranchPlantName, ToolCode,MonthYear,SortMonthYear,WOCount)
    SELECT RowId, BranchPlant,BranchPlantName, ToolCode, MonthYear, SortMonthYear, WOCount FROM
    (
        SELECT ROW_NUMBER() OVER (ORDER BY BranchPlant, BranchPlantName, ToolCode, SortMonthYear) AS RowId, BranchPlant, BranchPlantName, ToolCode, MonthYear, SortMonthYear, WOCount FROM 
            ( 
                SELECT BranchPlant, BranchPlantName, ToolCode, MonthYear, SortMonthYear, WOCount FROM 
                ( 
                    SELECT wo.BranchPlant,bp.CompanyName as BranchPlantName, i.ToolCode,
                    CONVERT(VARCHAR, month(wo.DateAdded)) + '/' + CONVERT(VARCHAR, year(wo.DateAdded)) AS MonthYear,  
                    CONVERT(DATETIME, CONVERT(VARCHAR, YEAR(wo.DateAdded)) + '-' + CONVERT(VARCHAR, MONTH(wo.DateAdded)) + '-01') AS SortMonthYear, 
                    COUNT(*) WOCount

                    FROM WorkOrders wo (NOLOCK)
                        LEFT OUTER JOIN ItemNums i (NOLOCK) ON wo.InventoryItemNum = i.ItemNum 
                        LEFT OUTER JOIN BranchPlants bp (NOLOCK) ON bp.BranchPlant = wo.BranchPlant
                    WHERE   wo.DateAdded >= CASE WHEN @StartDate Is not null then @StartDate else (Select min(dateAdded) from WorkOrders (NOLOCK)) end AND
                            wo.DateAdded <= CASE WHEN @EndDate Is not null then @EndDate else (Select max(dateAdded) from WorkOrders (NOLOCK)) end
                            and i.Active = 1
                                    
                    GROUP BY wo.BranchPlant, bp.CompanyName,i.ToolCode,
                        CONVERT(VARCHAR, MONTH(wo.DateAdded)) + '/' + CONVERT(VARCHAR, YEAR(wo.DateAdded)), 
                        CONVERT(DATETIME, CONVERT(VARCHAR, YEAR(wo.DateAdded)) + '-' + CONVERT(VARCHAR, MONTH(wo.DateAdded)) + '-01') 
                ) AS A 
            ) AS B 
     ) AS C 
    
    WHERE C.RowId BETWEEN @StartIndex AND @EndIndex ORDER BY BranchPlant,ToolCode,SortMonthYear 


    --get closed work order count
    UPDATE #tblWOCountData SET WOClosedCount = (
                                            SELECT COUNT(*) 
                                            FROM WorkOrders wo (NOLOCK)
                                                INNER JOIN FixedAssets fa (NOLOCK) ON wo.SerialNum = fa.SerialNum AND wo.InventoryItemNum = fa.InventoryItemNum
                                                INNER JOIN ItemNums i (NOLOCK) ON wo.InventoryItemNum = i.ItemNum 
                                            WHERE
                                                MONTH(wo.DateClosed) = MONTH(#tblWOCountData.SortMonthYear) AND 
                                                YEAR(wo.DateClosed)= YEAR(#tblWOCountData.SortMonthYear) AND
                                                wo.BranchPlant = #tblWOCountData.BranchPlant AND 
                                                i.ToolCode = #tblWOCountData.ToolCode  
                                        )

    SELECT * FROM #tblWOCountData 
    SELECT @TotalCount as TotalCount 

    SET ARITHABORT OFF
    DROP TABLE #tblWOCountData

END





GO
/****** Object:  StoredProcedure [dbo].[usp_GlobalAssetDistributionMap]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_GlobalAssetDistributionMap]
	@xmlData XML
AS

DECLARE @sWhere VARCHAR(MAX)
DECLARE @sql VARCHAR(MAX)

SELECT @sWhere = T.c.value('.', 'varchar(max)') FROM @xmlData.nodes('/Filters/WhereClause') T(c)
---------------All Region------------------------
SET @sql = 'SELECT r.RegionDesc as regionmap
				, SUM(CAST(ps.IsActive AS INT)) AS activecount
				, SUM(CAST(ISNULL(ps.IsInActive,0) AS INT)) AS inactivecount
				, SUM(CAST(ps.IsTransit AS INT)) AS intransitcount
				, COUNT(*) AS totalcount 
				, r.Region
				, r.RegionDesc
		FROM FixedAssets fa WITH(NOLOCK)
		LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
		LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
		LEFT JOIN Regions r WITH(NOLOCK) ON r.Region = bp.Region
		LEFT JOIN Countries (NOLOCK) c ON c.Country = bp.Country
		LEFT JOIN PartStatus ps WITH(NOLOCK) ON ps.Code = fa.EquipmentStatus 
		LEFT JOIN ItemNums ri WITH (NOLOCK) ON ri.ItemNum = fa.RNItemNum '
SET @sql = @sql + @sWhere		
SET @sql = @sql + 	' AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1 '
SET @sql = @sql + 	' AND ( ps.IsDisposed = 0 ) GROUP BY r.RegionDesc, r.Region'
  
EXEC(@sql)
---------------Europe------------------------
SET @sql = 'SELECT ''GlobalSupportEuropeOnly''
				, SUM(CAST(ps.IsActive AS INT)) AS activecount
				, SUM(CAST(ISNULL(ps.IsInActive,0) AS INT)) AS inactivecount
				, SUM(CAST(ps.IsTransit AS INT)) AS intransitcount
				, COUNT(*) AS totalcount 
		FROM FixedAssets fa WITH(NOLOCK)
		LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
		LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
		LEFT JOIN Regions r WITH(NOLOCK) ON r.Region = bp.Region
		LEFT JOIN Countries (NOLOCK) c ON c.Country = bp.Country
		LEFT JOIN PartStatus ps WITH(NOLOCK) ON ps.Code = fa.EquipmentStatus 
		LEFT JOIN ItemNums ri WITH (NOLOCK) ON ri.ItemNum = fa.RNItemNum '
SET @sql = @sql + @sWhere		
SET @sql = @sql + 	' AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1 '
SET @sql = @sql + 	' AND ( ps.IsDisposed = 0 ) AND bp.BranchPlant IN (SELECT OptionValue FROM SelectOptions WHERE SelectName = ''FAGobalSupportEuropeOnly'')'
  
EXEC(@sql)
---------------US------------------------
SET @sql = 'SELECT ''GlobalSupportUSOnly''
				, SUM(CAST(ps.IsActive AS INT)) AS activecount
				, SUM(CAST(ISNULL(ps.IsInActive,0) AS INT)) AS inactivecount
				, SUM(CAST(ps.IsTransit AS INT)) AS intransitcount
				, COUNT(*) AS totalcount 
		FROM FixedAssets fa WITH(NOLOCK)
		LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
		LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
		LEFT JOIN Regions r WITH(NOLOCK) ON r.Region = bp.Region
		LEFT JOIN Countries (NOLOCK) c ON c.Country = bp.Country
		LEFT JOIN PartStatus ps WITH(NOLOCK) ON ps.Code = fa.EquipmentStatus 
		LEFT JOIN ItemNums ri WITH (NOLOCK) ON ri.ItemNum = fa.RNItemNum '
SET @sql = @sql + @sWhere		
SET @sql = @sql + 	' AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1 '
SET @sql = @sql + 	' AND ( ps.IsDisposed = 0 ) AND bp.BranchPlant IN (SELECT OptionValue FROM SelectOptions WHERE SelectName = ''FAGobalSupportUSOnly'')'
  
EXEC(@sql)

---------------Gobal------------------------

SET @sql = 'SELECT ''GlobalOnly''
				, SUM(CAST(ps.IsActive AS INT)) AS activecount
				, SUM(CAST(ISNULL(ps.IsInActive,0) AS INT)) AS inactivecount
				, SUM(CAST(ps.IsTransit AS INT)) AS intransitcount
				, COUNT(*) AS totalcount 
		FROM FixedAssets fa WITH(NOLOCK)
		LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
		LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
		LEFT JOIN Regions r WITH(NOLOCK) ON r.Region = bp.Region
		LEFT JOIN Countries (NOLOCK) c ON c.Country = bp.Country
		LEFT JOIN PartStatus ps WITH(NOLOCK) ON ps.Code = fa.EquipmentStatus
		LEFT JOIN ItemNums ri WITH (NOLOCK) ON ri.ItemNum = fa.RNItemNum '
SET @sql = @sql + @sWhere		
SET @sql = @sql + 	' AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1 '	
SET @sql = @sql + 	' AND ( ps.IsDisposed = 0 )'
  
EXEC(@sql)


---------------Functional Region------------------------

SET @sql = 'SELECT r.RegionDesc
				, ps.Status
				, fa.EquipmentStatus
				, Count(fa.EquipmentStatus) as StatusCount
				, ps.IsDisposed
				, r.Region
		FROM FixedAssets fa WITH(NOLOCK)
		LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
		LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = fa.BranchPlant
		LEFT JOIN Regions r WITH(NOLOCK) ON r.Region = bp.Region
		LEFT JOIN Countries (NOLOCK) c ON c.Country = bp.Country
		LEFT JOIN PartStatus ps WITH(NOLOCK) ON ps.Code = fa.EquipmentStatus
		LEFT JOIN ItemNums ri WITH (NOLOCK) ON ri.ItemNum = fa.RNItemNum '
SET @sql = @sql + @sWhere		
SET @sql = @sql + 	' AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1 '
SET @sql = @sql + 	' AND ps.Status IS NOT NULL AND r.RegionDesc IS NOT NULL'
SET @sql = @sql + 	' GROUP BY r.RegionDesc, ps.Status, fa.EquipmentStatus, ps.IsDisposed, r.Region'
SET @sql = @sql + 	' ORDER BY r.RegionDesc, ps.Status, fa.EquipmentStatus, ps.IsDisposed'
  
EXEC(@sql)



GO
/****** Object:  StoredProcedure [dbo].[usp_GlobalDSGFAChart]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_GlobalDSGFAChart]
	@xmlData AS XML
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @StartDate DATETIME
	DECLARE @EndDate DATETIME

	SELECT @StartDate = T.c.value('(StartDate/text())[1]', 'datetime')
	FROM @xmlData.nodes('/Filters') T(c);

	SELECT @EndDate = T.c.value('(EndDate/text())[1]', 'datetime')
	FROM @xmlData.nodes('/Filters') T(c);


	-- Set Start Date And End date
	
	IF DATEPART(DW, @StartDate) <= 4
	BEGIN
		SELECT @StartDate = DATEADD(DD, 4-DATEPART(DW, @StartDate), @StartDate)			-- StartDate is Wednesday of the same week
	END
	ELSE
	BEGIN
		SELECT @StartDate = DATEADD(DD, 11-DATEPART(DW, @StartDate), @StartDate)		-- StartDate is Wednesday of the following week
	END

	IF DATEPART(DW, @StartDate) <= 4
	BEGIN
		SELECT @EndDate = DATEADD(DD, 4-DATEPART(DW, @EndDate), @EndDate)-7				-- EndDate is Wednesday of the previous week
	END
	ELSE
	BEGIN
		SELECT @EndDate = DATEADD(DD, 4-DATEPART(DW, @EndDate), @EndDate)				-- EndDate is Wednesday of the same week
	END
	
	--Get GFAs data 
	
	DECLARE @NullRegionId uniqueidentifier
	select @NullRegionId = NEWID()
	
	Select ISNULL(r.RegionId, @NullRegionId) as RegionId, ISNULL(r.RegionDesc,'N/A') as Region, d.DD, d.EM, d.PP, d.LWD, d.RSS
		, CONVERT(DATETIME,CONVERT(VARCHAR, d.StartDate + 1, 101)) AS DateGroup
	INTO #tempGlobalReport
	from GFAIncidents (NOLOCK) gfa
	LEFT JOIN vwOpsJarActivityDailies (NOLOCK) d on d.JobId = gfa.JobId
	LEFT JOIN Jobs (NOLOCK) j on j.JobID = d.JobID
	LEFT JOIN BranchPlants (NOLOCK) dist ON dist.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c ON c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r ON r.Region = j.Region
	WHERE gfa.IsDeleted = 0 AND j.IsDeleted = 0
	AND d.StartDate >= CONVERT(VARCHAR, @StartDate - 1,101)
	AND d.StartDate < CONVERT(VARCHAR, @EndDate,101) 
	AND DATEPART(DW, d.StartDate) = 3
	AND (j.EndDate >= CONVERT(VARCHAR, @StartDate - 1,101) OR j.EndDate IS NULL)
	AND d.RevenueStatus IN ('Operating', 'Standby or in transit on Revenue')
	ORDER by d.StartDate
	
	
	-- CREATE Union to Extract Data against toolpanels
	
	CREATE TABLE #tempUnion
	(	ToolPanel varchar(3) null,
		RegionId uniqueidentifier null, 
		Region varchar(100) null,
		GFACount int null,
		DateGroup datetime
	)
	
	INSERT INTO #tempUnion (ToolPanel, RegionId, Region, GFACount, DateGroup)
	SELECT 'DD' As ToolPanel, RegionId, Region, COUNT(1) AS GFACount, DateGroup
	FROM #tempGlobalReport
	WHERE DD = 1
	GROUP BY RegionId, Region, DateGroup
	UNION
	SELECT 'MWD' As ToolPanel, RegionId, Region, COUNT(1) AS GFACount, DateGroup
	FROM #tempGlobalReport
	WHERE EM = 1 Or PP = 1
	GROUP BY RegionId, Region, DateGroup
	UNION
	SELECT 'LWD' As ToolPanel, RegionId, Region, COUNT(1) AS GFACount, DateGroup
	FROM #tempGlobalReport
	WHERE LWD = 1
	GROUP BY RegionId, Region, DateGroup
	UNION
	SELECT 'RSS' As ToolPanel, RegionId, Region, COUNT(1) AS GFACount, DateGroup
	FROM #tempGlobalReport
	WHERE RSS = 1
	GROUP BY RegionId, Region, DateGroup
		
	UNION
		
	SELECT 'DD' AS ToolPanel, RegionId, Region, 0 AS GFACount, DateGroup
	FROM #tempGlobalReport
	GROUP BY RegionId, Region, DateGroup
	UNION
	SELECT 'MWD' AS ToolPanel, RegionId, Region, 0 AS GFACount, DateGroup
	FROM #tempGlobalReport
	GROUP BY RegionId, Region, DateGroup
	UNION
	SELECT 'LWD' AS ToolPanel, RegionId, Region, 0 AS GFACount, DateGroup
	FROM #tempGlobalReport
	GROUP BY RegionId, Region, DateGroup
	UNION
	SELECT 'RSS' AS ToolPanel, RegionId, Region, 0 AS GFACount, DateGroup
	FROM #tempGlobalReport
	GROUP BY RegionId, Region, DateGroup
	
	
	--CREATE QUERY fot Dynamic PIVOTING
	
	DECLARE @dynSql AS VARCHAR(MAX)
	DECLARE @dynCol AS VARCHAR(MAX)
	
	SELECT @dynCol = STUFF(( SELECT DISTINCT ',[' + ToolPanel + ']' FROM #tempUnion ORDER BY 1 FOR XML PATH('')), 1, 1, '')
	
	SELECT @dynSql = 'SELECT * FROM (SELECT ToolPanel,GFACount,DateGroup, SUM(GFACount) OVER (PARTITION BY DateGroup) as Total FROM #tempUnion) DataTable
	PIVOT
	(	SUM(GFACount)
		FOR ToolPanel IN ('+@dynCol+')) AS PivotTable ORDER by DateGroup'

	print(@dynSql)
	exec(@dynSql)
  
	DROP TABLE #tempGlobalReport
	DROP TABLE #tempUnion
	
END











GO
/****** Object:  StoredProcedure [dbo].[usp_GlobalDSGFAReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_GlobalDSGFAReport]
	@xmlData AS XML
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @StartDate DATETIME
	DECLARE @EndDate DATETIME

	SELECT @StartDate = T.c.value('(StartDate/text())[1]', 'datetime')
	FROM @xmlData.nodes('/Filters') T(c);

	SELECT @EndDate = T.c.value('(EndDate/text())[1]', 'datetime')
	FROM @xmlData.nodes('/Filters') T(c);


	-- Set Start and End Dates
	
	IF DATEPART(DW, @StartDate) <= 4
	BEGIN
		SELECT @StartDate = DATEADD(DD, 4-DATEPART(DW, @StartDate), @StartDate)			-- StartDate is Wednesday of the same week
	END
	ELSE
	BEGIN
		SELECT @StartDate = DATEADD(DD, 11-DATEPART(DW, @StartDate), @StartDate)		-- StartDate is Wednesday of the following week
	END

	IF DATEPART(DW, @StartDate) <= 4
	BEGIN
		SELECT @EndDate = DATEADD(DD, 4-DATEPART(DW, @EndDate), @EndDate)-7				-- EndDate is Wednesday of the previous week
	END
	ELSE
	BEGIN
		SELECT @EndDate = DATEADD(DD, 4-DATEPART(DW, @EndDate), @EndDate)				-- EndDate is Wednesday of the same week
	END
	
	
	-- Get GFAs Data
	
	DECLARE @NullRegionId uniqueidentifier
	select @NullRegionId = NEWID()
	
	Select ISNULL(r.RegionId, @NullRegionId) as RegionId, ISNULL(r.RegionDesc,'N/A') as Region, d.DD, d.EM, d.PP, d.LWD, d.RSS
		, CONVERT(DATETIME,CONVERT(VARCHAR, d.StartDate + 1, 101)) AS DateGroup
	INTO #tempGlobalReport
	from GFAIncidents (NOLOCK) gfa
	LEFT JOIN vwOpsJarActivityDailies (NOLOCK) d on d.JobId = gfa.JobId
	LEFT JOIN Jobs (NOLOCK) j on j.JobID = d.JobID
	LEFT JOIN BranchPlants (NOLOCK) dist ON dist.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c ON c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r ON r.Region = j.Region
	WHERE gfa.IsDeleted = 0 AND j.IsDeleted = 0
	AND d.StartDate >= CONVERT(VARCHAR, @StartDate - 1,101)
	AND d.StartDate < CONVERT(VARCHAR, @EndDate,101) 
	AND DATEPART(DW, d.StartDate) = 3
	AND (j.EndDate >= CONVERT(VARCHAR, @StartDate - 1,101) OR j.EndDate IS NULL)
	AND d.RevenueStatus IN ('Operating', 'Standby or in transit on Revenue')
	ORDER by d.StartDate
	
	
	-- Create UNION Of the Data for Extracting count against ToolPanels
	
	CREATE TABLE #tempUnion
	(	ToolPanel varchar(3) null,
		RegionId uniqueidentifier null, 
		Region varchar(100) null,
		GFACount int null,
		DateGroup datetime
	)
	
	INSERT INTO #tempUnion (ToolPanel, RegionId, Region, GFACount, DateGroup)
	SELECT 'DD' As ToolPanel, RegionId, Region, COUNT(1) AS GFACount, DateGroup
	FROM #tempGlobalReport
	WHERE DD = 1
	GROUP BY RegionId, Region, DateGroup
	UNION
	SELECT 'MWD' As ToolPanel, RegionId, Region, COUNT(1) AS GFACount, DateGroup
	FROM #tempGlobalReport
	WHERE EM = 1 Or PP = 1
	GROUP BY RegionId, Region, DateGroup
	UNION
	SELECT 'LWD' As ToolPanel, RegionId, Region, COUNT(1) AS GFACount, DateGroup
	FROM #tempGlobalReport
	WHERE LWD = 1
	GROUP BY RegionId, Region, DateGroup
	UNION
	SELECT 'RSS' As ToolPanel, RegionId, Region, COUNT(1) AS GFACount, DateGroup
	FROM #tempGlobalReport
	WHERE RSS = 1
	GROUP BY RegionId, Region, DateGroup
		
	UNION
		
	SELECT 'DD' AS ToolPanel, RegionId, Region, 0 AS GFACount, DateGroup
	FROM #tempGlobalReport
	GROUP BY RegionId, Region, DateGroup
	UNION
	SELECT 'MWD' AS ToolPanel, RegionId, Region, 0 AS GFACount, DateGroup
	FROM #tempGlobalReport
	GROUP BY RegionId, Region, DateGroup
	UNION
	SELECT 'LWD' AS ToolPanel, RegionId, Region, 0 AS GFACount, DateGroup
	FROM #tempGlobalReport
	GROUP BY RegionId, Region, DateGroup
	UNION
	SELECT 'RSS' AS ToolPanel, RegionId, Region, 0 AS GFACount, DateGroup
	FROM #tempGlobalReport
	GROUP BY RegionId, Region, DateGroup
	
	
	-- Building Dynamic SQL for PIVOTING
	
	Select Distinct DateGroup 
	INTO #tblDates
	from #tempGlobalReport ORDER by DateGroup
	
	DECLARE @dynSql AS VARCHAR(MAX)
	DECLARE @dynCol AS VARCHAR(MAX)
	
	Select @dynCol = (CASE WHEN @dynCol IS NULL THEN '' ELSE (@dynCol + ',') END) + '[' + CONVERT(VARCHAR,DateGroup,101) + ']' from #tblDates
	
	SELECT @dynSql = 'SELECT * FROM (SELECT ToolPanel,RegionId,Region,GFACount,CONVERT(varchar,DateGroup,101) as DateGroup FROM #tempUnion) DataTable
	PIVOT
	(	SUM(GFACount)
		FOR DateGroup IN ('+@dynCol+')) PivotTable'

	print(@dynSql)
	exec(@dynSql)
  
	DROP TABLE #tempGlobalReport
	DROP TABLE #tempUnion
	DROP TABLE #tblDates
	
END








GO
/****** Object:  StoredProcedure [dbo].[usp_GlobalDSGFAReportCountries]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_GlobalDSGFAReportCountries]
	@xmlData AS XML
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @StartDate DATETIME
	DECLARE @EndDate DATETIME
	DECLARE @ToolPanel VARCHAR(3)
	DECLARE @Region VARCHAR(50)
	DECLARE @Where VARCHAR(255)
	
	SELECT @StartDate = T.c.value('(StartDate/text())[1]', 'datetime')
	FROM @xmlData.nodes('/Filters') T(c);

	SELECT @EndDate = T.c.value('(EndDate/text())[1]', 'datetime')
	FROM @xmlData.nodes('/Filters') T(c);

	SELECT @ToolPanel = T.c.value('(ToolPanel/text())[1]', 'varchar(3)')
	FROM @xmlData.nodes('/Filters') T(c);

	SELECT @Region = T.c.value('(Region/text())[1]', 'varchar(50)')
	FROM @xmlData.nodes('/Filters') T(c);

	SELECT @Where = 'WHERE 1=1 '
	
	-- Setting Start Date and End Date And Other Filters
	
	IF @ToolPanel IS NOT NULL 
	BEGIN
		SELECT @Where = @Where + ' AND ToolPanel=''' + @ToolPanel + ''''
	END

	IF @Region IS NOT NULL 
	BEGIN
		SELECT @Where = @Where + ' AND Region=''' + @Region + ''''
	END
	
	IF DATEPART(DW, @StartDate) <= 4
	BEGIN
		SELECT @StartDate = DATEADD(DD, 4-DATEPART(DW, @StartDate), @StartDate)			-- StartDate is Wednesday of the same week
	END
	ELSE
	BEGIN
		SELECT @StartDate = DATEADD(DD, 11-DATEPART(DW, @StartDate), @StartDate)		-- StartDate is Wednesday of the following week
	END

	IF DATEPART(DW, @StartDate) <= 4
	BEGIN
		SELECT @EndDate = DATEADD(DD, 4-DATEPART(DW, @EndDate), @EndDate)-7				-- EndDate is Wednesday of the previous week
	END
	ELSE
	BEGIN
		SELECT @EndDate = DATEADD(DD, 4-DATEPART(DW, @EndDate), @EndDate)				-- EndDate is Wednesday of the same week
	END
	
	-- Get GFAs data
	
	SELECT r.RegionId, ISNULL(r.RegionDesc, 'N/A') AS Region, c.CountryDesc as Country, DD, EM, PP, LWD, RSS
	  , CONVERT(DATETIME,CONVERT(VARCHAR, d.StartDate + 1, 101)) AS DateGroup
	INTO #tempGlobalReport
	from GFAIncidents (NOLOCK) gfa
	LEFT JOIN vwOpsJarActivityDailies (NOLOCK) d on d.JobId = gfa.JobId
	LEFT JOIN Jobs (NOLOCK) j on j.JobID = d.JobID
	LEFT JOIN BranchPlants (NOLOCK) dist ON dist.BranchPlant = j.BranchPlant
	LEFT JOIN Countries (NOLOCK) c ON c.Country = j.Country
	LEFT JOIN Regions (NOLOCK) r ON r.Region = j.Region
	WHERE gfa.IsDeleted = 0 AND j.IsDeleted = 0
	AND d.StartDate >= CONVERT(VARCHAR, @StartDate - 1,101)
	AND d.StartDate < CONVERT(VARCHAR, @EndDate,101) 
	AND DATEPART(DW, d.StartDate) = 3
	AND (j.EndDate >= CONVERT(VARCHAR, @StartDate - 1,101) OR j.EndDate IS NULL)
	AND d.RevenueStatus IN ('Operating', 'Standby or in transit on Revenue')
	ORDER by d.StartDate
	
	-- CReating UNION and Extractying ToolPanel data
	
	CREATE TABLE #tempUnion
	(	ToolPanel varchar(3) null,
		RegionId uniqueidentifier null, 
		Region varchar(100) null,
		Country varchar(100) null,
		GFACount int null,
		DateGroup datetime
	)
	
	INSERT INTO #tempUnion (ToolPanel, RegionId, Region, Country, GFACount, DateGroup)
	SELECT 'DD' As ToolPanel, RegionId, Region, Country, COUNT(1) AS GFACount, DateGroup
	FROM #tempGlobalReport
	WHERE DD = 1
	GROUP BY RegionId, Region, Country, DateGroup
	UNION
	SELECT 'MWD' As ToolPanel, RegionId, Region, Country, COUNT(1) AS GFACount, DateGroup
	FROM #tempGlobalReport
	WHERE EM = 1 Or PP = 1
	GROUP BY RegionId, Region, Country, DateGroup
	UNION
	SELECT 'LWD' As ToolPanel, RegionId, Region, Country, COUNT(1) AS GFACount, DateGroup
	FROM #tempGlobalReport
	WHERE LWD = 1
	GROUP BY RegionId, Region, Country, DateGroup
	UNION
	SELECT 'RSS' As ToolPanel, RegionId, Region, Country, COUNT(1) AS GFACount, DateGroup
	FROM #tempGlobalReport
	WHERE RSS = 1
	GROUP BY RegionId, Region, Country, DateGroup
		
	UNION
		
	SELECT 'DD' AS ToolPanel, RegionId, Region, Country, 0 AS GFACount, DateGroup
	FROM #tempGlobalReport
	GROUP BY RegionId, Region, Country, DateGroup
	UNION
	SELECT 'MWD' AS ToolPanel, RegionId, Region, Country, 0 AS GFACount, DateGroup
	FROM #tempGlobalReport
	GROUP BY RegionId, Region, Country, DateGroup
	UNION
	SELECT 'LWD' AS ToolPanel, RegionId, Region, Country, 0 AS GFACount, DateGroup
	FROM #tempGlobalReport
	GROUP BY RegionId, Region, Country, DateGroup
	UNION
	SELECT 'RSS' AS ToolPanel, RegionId, Region, Country, 0 AS GFACount, DateGroup
	FROM #tempGlobalReport
	GROUP BY RegionId, Region, Country, DateGroup
	
	
	-- Building Dynamic SQL for PIVOTING
	
	Select Distinct DateGroup 
	INTO #tblDates
	from #tempGlobalReport ORDER by DateGroup
	
	DECLARE @dynSql AS VARCHAR(MAX)
	DECLARE @dynCol AS VARCHAR(MAX)
	
	Select @dynCol = (CASE WHEN @dynCol IS NULL THEN '' ELSE (@dynCol + ',') END) + '[' + CONVERT(VARCHAR,DateGroup,101) + ']' from #tblDates
	
	SELECT @dynSql = 'SELECT * FROM (SELECT ToolPanel,RegionId,Region,Country,GFACount,CONVERT(VARCHAR,DateGroup,101) as DateGroup FROM #tempUnion ' + @Where +') DataTable
	PIVOT
	(	SUM(GFACount)
		FOR DateGroup IN ('+@dynCol+')) PivotTable'

	print(@dynSql)
	exec(@dynSql)
  
	DROP TABLE #tempGlobalReport
	DROP TABLE #tempUnion
	DROP TABLE #tblDates
	
END








GO
/****** Object:  StoredProcedure [dbo].[usp_GlobalDSJobsReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_GlobalDSJobsReport]
	@xmlData AS XML
AS

	SET NOCOUNT ON

	DECLARE @StartDate DATETIME
	DECLARE @EndDate DATETIME
	DECLARE @ToolPanel VARCHAR(3)
	DECLARE @Region VARCHAR(50)
	DECLARE @ViewType VARCHAR(50)
	DECLARE @Where VARCHAR(MAX)
	SET @Where = 'WHERE 1=1 AND ISNULL(JobCount, 0) > 0 '
	
	-- Get Filters
	SELECT @StartDate = T.c.value('(StartDate/text())[1]', 'datetime')	FROM @xmlData.nodes('/Filters') T(c);
	SELECT @EndDate = T.c.value('(EndDate/text())[1]', 'datetime') FROM @xmlData.nodes('/Filters') T(c);
	SELECT @ToolPanel = T.c.value('(ToolPanel/text())[1]', 'varchar(3)') FROM @xmlData.nodes('/Filters') T(c);
	SELECT @Region = T.c.value('(Region/text())[1]', 'varchar(50)')	FROM @xmlData.nodes('/Filters') T(c);
	SELECT @ViewType = T.c.value('(ViewType/text())[1]', 'varchar(50)')	FROM @xmlData.nodes('/Filters') T(c);
	
	-- Set Start and End Date
	IF DATEPART(DW, @StartDate) <= 4
	BEGIN
		SELECT @StartDate = DATEADD(DD, 4-DATEPART(DW, @StartDate), @StartDate)			-- StartDate is Wednesday of the same week
	END
	ELSE
	BEGIN
		SELECT @StartDate = DATEADD(DD, 11-DATEPART(DW, @StartDate), @StartDate)		-- StartDate is Wednesday of the following week
	END

	IF DATEPART(DW, @StartDate) <= 4
	BEGIN
		SELECT @EndDate = DATEADD(DD, 4-DATEPART(DW, @EndDate), @EndDate)-7				-- EndDate is Wednesday of the previous week
	END
	ELSE
	BEGIN
		SELECT @EndDate = DATEADD(DD, 4-DATEPART(DW, @EndDate), @EndDate)				-- EndDate is Wednesday of the same week
	END
	
	-- Set Tool Panel and Region Where Caluse in case of Country View.
	IF @ToolPanel IS NOT NULL 
	BEGIN
		SELECT @Where = @Where + ' AND ToolPanel=''' + @ToolPanel + ''''
	END

	IF @Region IS NOT NULL 
	BEGIN
		SELECT @Where = @Where + ' AND Region=''' + @Region + ''''
	END
	
	-- Comment Type	
	CREATE TABLE #tblRevenueStatus(
		id INT not null IDENTITY(1,1),
		RevenueStatus VARCHAR(50)
	)
	
	INSERT INTO #tblRevenueStatus
	SELECT T.c.value('.', 'varchar(100)') as RevenueStatus
	FROM @xmlData.nodes('/Filters/RevenueType/Name') T(c)
	
	--Select * from #tblCommentType
	
	-- Product Type
	CREATE TABLE #tblProductType(
		id INT not null IDENTITY(1,1),
		ProductType VARCHAR(10)
	)
	
	INSERT INTO #tblProductType
	SELECT T.c.value('.', 'varchar(10)') as ProductType
	FROM @xmlData.nodes('/Filters/ProductType/Name') T(c)
	
	IF(SELECT COUNT(*) from #tblProductType) = 0
	BEGIN
		INSERT INTO #tblProductType
		SELECT 'RSS'
		UNION
		SELECT 'LWD'
		UNION
		SELECT 'MWD'
		UNION
		SELECT 'DD'
	END
	
	--Select * from #tblProductType
	
	-- Extra Country Column
	DECLARE @extraColumn as VARCHAR(15)
	IF(@ViewType = 'Country' OR @ViewType = 'CountryUniqueJobs')
	BEGIN
		SET @extraColumn = ' CountryDesc,'
	END
	ELSE
	BEGIN
		SET @extraColumn = ''
	END
		
	-- CREATE TEMP TABLE AND FILL DATA
	
	CREATE TABLE #tempGlobalReport(
		RegionId UNIQUEIDENTIFIER,
		Region VARCHAR(50),
		DateGroup DATETIME
	)
	
	IF(@ViewType = 'Country' OR @ViewType = 'CountryUniqueJobs')
	BEGIN
		ALTER TABLE #tempGlobalReport ADD CountryDesc VARCHAR(50) NULL
	END
		
	DECLARE @NullRegionId uniqueidentifier
	Set @NullRegionId = NEWID()
	
	DECLARE @sqlInititalData as VARCHAR(MAX)
	DECLARE @selectColumns as VARCHAR(MAX)
	DECLARE @createColumns as VARCHAR(MAX)
	DECLARE @queryColumns as VARCHAR(MAX)
	
	Select @selectColumns = (CASE WHEN @selectColumns IS NULL THEN '' ELSE (@selectColumns + ',') END) + (CASE WHEN ProductType = 'MWD' THEN '[EM],[PP]' ELSE '[' + ProductType + ']' END) from #tblProductType
	Select @createColumns = (CASE WHEN @createColumns IS NULL THEN '' ELSE (@createColumns + ',') END) + (CASE WHEN ProductType = 'MWD' THEN '[EM] bit,[PP] bit' ELSE '[' + ProductType + '] bit' END) from #tblProductType
	Select @queryColumns = (CASE WHEN @queryColumns IS NULL THEN '' ELSE (@queryColumns + ' OR ') END) + (CASE WHEN ProductType = 'MWD' THEN ' [EM] = 1 OR [PP] = 1 ' ELSE ' [' + ProductType + '] = 1 ' END) from #tblProductType
	
	exec('ALTER TABLE #tempGlobalReport ADD ' + @createColumns)
	
	Set @sqlInititalData = 'INSERT INTO #tempGlobalReport
				SELECT ISNULL(r.RegionId, ''' + CONVERT(VARCHAR(50), @NullRegionId) + ''') as RegionId, ISNULL(r.RegionDesc, ''N/A'') AS Region , 
					CONVERT(DATETIME,CONVERT(VARCHAR, jd.StartDate + 1, 101)) AS DateGroup, 
					' + (CASE WHEN @extraColumn = '' THEN '' ELSE ('c.' + @extraColumn) END) + ' ' + @selectColumns + '
	FROM Jobs AS j
	LEFT JOIN vwOpsJarActivityDailies AS jd ON jd.JobID = j.JobId
	LEFT JOIN BranchPlants AS bp ON bp.BranchPlant = j.BranchPlant
	LEFT JOIN Countries c ON c.Country = j.Country
	LEFT JOIN Regions r ON r.Region = j.Region
	WHERE j.IsDeleted = 0
	  AND jd.StartDate >= ''' + CONVERT(VARCHAR, @StartDate - 1, 101) + '''
	  AND jd.StartDate < ''' + CONVERT(VARCHAR, @EndDate, 101) + '''
	  AND DATEPART(DW, jd.StartDate) = 3
	  AND (j.EndDate >= ''' + CONVERT(VARCHAR, @StartDate - 1, 101) + ''' OR j.EndDate IS NULL)
	  AND jd.RevenueStatus IN (Select RevenueStatus from #tblRevenueStatus)
	  AND (' + @queryColumns + ')
	ORDER by jd.StartDate'
	
	--print(@sqlInititalData)
	EXEC(@sqlInititalData)
	--SELECT * from #tempGlobalReport
	
	DECLARE @dynSql AS VARCHAR(MAX)
	DECLARE @dynCol AS VARCHAR(MAX)
	
	-- GET DATE COLUMNS
	SELECT DISTINCT DateGroup 
	INTO #tblDates
	FROM #tempGlobalReport ORDER BY DateGroup
	
	IF(@ViewType <> 'CountryUniqueJobs')
	BEGIN
		-- CREATE UNION DATA
		CREATE TABLE #tempUnion
		(	ToolPanel VARCHAR(20) NULL,
			RegionId UNIQUEIDENTIFIER NULL, 
			Region VARCHAR(100) NULL,
			JobCount INT NULL,
			DateGroup DATETIME
		)
		
		IF(@ViewType = 'Country')
		BEGIN
			ALTER TABLE #tempUnion ADD CountryDesc varchar(50) NULL
		END
		
		-- FILL UNION DATA
		DECLARE @pType as VARCHAR(10)
		DECLARE @pTypeWhereClause as VARCHAR(MAX)
		DECLARE @id as INT
		SET @id = 1
		SELECT @pType = ProductType FROM #tblProductType WHERE id = @id
		WHILE(@pType IS NOT NULL)
		BEGIN
			SET @pTypeWhereClause = ' Where 1=1 '
			IF (@pType = 'MWD')
			BEGIN
				SET @pTypeWhereClause += ' AND EM = 1 OR PP = 1 '
			END
			ELSE 
			BEGIN
				SET @pTypeWhereClause += ' AND ' + @pType + ' = 1 '
			END
			
			EXEC('INSERT INTO #tempUnion (ToolPanel, RegionId, Region,' + @extraColumn + ' JobCount, DateGroup)
			SELECT ''' + @pType + ''' As ToolPanel, RegionId, Region,' + @extraColumn +' COUNT(1) AS JobCount, DateGroup
			FROM #tempGlobalReport
			' + @pTypeWhereClause + '
			GROUP BY RegionId, Region,' + @extraColumn + ' DateGroup
			UNION
			SELECT ''' + @pType + ''' AS ToolPanel, RegionId, Region,' + @extraColumn + ' 0 AS JobCount, DateGroup
			FROM #tempGlobalReport
			GROUP BY RegionId, Region,' + @extraColumn + ' DateGroup')
			
			SET @id = @id + 1
			SET @pType = NULL
			SELECT @pType = ProductType FROM #tblProductType WHERE id = @id
		END
		
		IF(@ViewType = 'Chart')
		BEGIN
		
			-- In Case of Chart , Add Unique Jobs as a ToolPanel
			EXEC('INSERT INTO #tempUnion (ToolPanel, RegionId, Region,' + @extraColumn + ' JobCount, DateGroup)
			SELECT ''Unique Jobs'' As ToolPanel, RegionId, Region,' + @extraColumn +' COUNT(1) AS JobCount, DateGroup
			FROM #tempGlobalReport
			GROUP BY RegionId, Region,' + @extraColumn + ' DateGroup
			UNION
			SELECT ''Unique Jobs'' AS ToolPanel, RegionId, Region,' + @extraColumn + ' 0 AS JobCount, DateGroup
			FROM #tempGlobalReport
			GROUP BY RegionId, Region,' + @extraColumn + ' DateGroup')
		
			SELECT @dynCol = STUFF(( SELECT DISTINCT ',[' + ToolPanel + ']' FROM #tempUnion ORDER BY 1 FOR XML PATH('')), 1, 1, '')
			SELECT @dynSql = 'SELECT * FROM (SELECT ToolPanel, JobCount, DateGroup FROM #tempUnion) DataTable
			PIVOT
			(	SUM(JobCount)
				FOR ToolPanel IN ('+@dynCol+')) AS PivotTable ORDER by DateGroup'
		END
		ELSE
		BEGIN
			SELECT @dynCol = (CASE WHEN @dynCol IS NULL THEN '' ELSE (@dynCol + ',') END) + '[' + CONVERT(VARCHAR, DateGroup, 101) + ']' FROM #tblDates
			SELECT @dynSql = 'SELECT * FROM (SELECT ToolPanel, RegionId, Region,' + @extraColumn + ' ISNULL(JobCount,0) as JobCount, CONVERT(varchar,DateGroup,101) as DateGroup FROM #tempUnion ' + @Where + ') DataTable
			PIVOT
			(	SUM(JobCount)
				FOR DateGroup IN (' + @dynCol + ')) PivotTable ORDER BY ToolPanel, Region'
		END
		--print(@dynSql)
		exec(@dynSql)
	
		DROP TABLE #tempUnion
	END

	-- Unique Jobs
	IF(@ViewType = 'Region' OR @ViewType = 'CountryUniqueJobs')
	BEGIN
		IF(@dynCol IS NULL)
		BEGIN
			SELECT @dynCol = (CASE WHEN @dynCol IS NULL THEN '' ELSE (@dynCol + ',') END) + '[' + CONVERT(VARCHAR, DateGroup, 101) + ']' FROM #tblDates
		END
		
		SELECT @dynSql = 'SELECT * FROM (SELECT * FROM (SELECT RegionId, Region,' + @extraColumn + ' COUNT(*) as JobCount, CONVERT(varchar,DateGroup,101) as DateGroup FROM #tempGlobalReport GROUP BY RegionId, Region,' + @extraColumn + ' DateGroup) DataTable ' + @Where + ') DataTable2
		PIVOT
		(	SUM(JobCount)
			FOR DateGroup IN (' + @dynCol + ')) PivotTable ORDER BY Region'
		--print(@dynSql)
		exec(@dynSql)
	END

	DROP TABLE #tblRevenueStatus
	DROP TABLE #tblProductType
	DROP TABLE #tempGlobalReport
	DROP TABLE #tblDates
	
	SET NOCOUNT OFF






GO
/****** Object:  StoredProcedure [dbo].[usp_Import_AcceptedLostTimeUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_AcceptedLostTimeUpdate] (
	@sIncidentID as uniqueidentifier
)
AS
SET NOCOUNT ON

DECLARE @iHasTFF bit
SET @iHasTFF = (Select Max(Cast(TFF as tinyint)) From LostTime Where IncidentID = @sIncidentID)			

DECLARE @iHoursTotal float

IF (@iHasTFF = 1)
BEGIN
	SET @iHoursTotal = (Select Sum(Hours) From LostTime Where TFF = 1 And IncidentID = @sIncidentID)
END
ELSE
BEGIN
	SET @iHoursTotal = (Select Sum(Hours) From LostTime Where CSI = 1 And IncidentID = @sIncidentID)
END

UPDATE Incidents
SET AcceptedLostTime = @iHoursTotal
WHERE IncidentID = @sIncidentID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_BatteryCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_BatteryCreate] (
	@sRunID as uniqueidentifier,
	@sToolString varchar(50),
	@sPartTypeID as int,
	@sSensor as varchar(50),
	@sSerialNumber as varchar(50),
	@sStartAmpHrs as float,
	@sEndAmpHrs as float,
	@sUsedAmpHrs as float,
	@sPreVoltage as float,
	@sPreVoltageUOM as varchar(5),
	@sPostVoltage as float,
	@sPostVoltageUOM as varchar(5)) 

AS
SET NOCOUNT ON

DECLARE @startDateTime DATETIME, @runId UNIQUEIDENTIFIER;
	SET @startDateTime = GETDATE();
	SET @runId = NEWID();

Declare @sBatteryID uniqueidentifier
Set @sBatteryID = newid()

Declare @sToolStringID uniqueidentifier
Set @sToolStringID = (Select ToolStringID From ToolStrings (NOLOCK) Where SerialNumber = @sToolString AND ISNULL(IsDeleted,0) = 0)

	EXEC usp_MyAdvisor_Logs @runId, 'usp_Import_BatteryCreate', 'Get toolstrinId', @startDateTime;
	SET @startDateTime = GETDATE();

Declare @sFixedAssetID uniqueidentifier
Set @sFixedAssetID = (Select Top 1 FixedAssetID From ToolStringFixedAssets (NOLOCK) Where PartTypeID = @sPartTypeID And SerialNum = @sSerialNumber)

	EXEC usp_MyAdvisor_Logs @runId, 'usp_Import_BatteryCreate', 'Get FixedAssetId', @startDateTime;
	SET @startDateTime = GETDATE();

INSERT INTO Batteries (BatteryID, RunID, ToolStringSN, [Type], SerialNumber, StartAmpHrs, EndAmpHrs, UsedAmpHrs
	, PreVoltage, PreVoltageUOM, PostVoltage, PostVoltageUOM, ToolStringID, FixedAssetID)
VALUES (@sBatteryID, @sRunID, @sToolString, @sSensor, @sSerialNumber, @sStartAmpHrs, @sEndAmpHrs, @sUsedAmpHrs
	, @sPreVoltage, @sPreVoltageUOM, @sPostVoltage, @sPostVoltageUOM, @sToolStringID, @sFixedAssetID)

	EXEC usp_MyAdvisor_Logs @runId, 'usp_Import_BatteryCreate', 'Insert Batteries', @startDateTime;	

SELECT @sBatteryID

SET NOCOUNT OFF




/****** Object:  StoredProcedure [dbo].[usp_Import_IncidentFromAIRTUpdate]    Script Date: 08/06/2014 13:34:34 ******/
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_Import_BHAComponentCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_BHAComponentCreate] (
	@sBHAID as uniqueidentifier,
	@sComponent as varchar(50),
	@sSerialNumber as varchar(50),
	@sType as varchar(50),
	@iOrderPosition as int,
	@iNonMag as bit,
	@sID as varchar(20),
	@sIDUOM as varchar(10),
	@sOD as varchar(50),
	@sODUOM as varchar(10),
	@sLength as varchar(50),
	@sLengthUOM as varchar(10),
	@sStabilizerBladeOD as varchar(50),
	@sStabilizerBladeODUOM as varchar(10),
	@sFishNeck as float,
	@sFishNeckUOM as varchar(5),
	@sTopConnectionType as varchar(50),
	@sBottomConnectionType as varchar(50),
	@iQuantityOnRig as int) 

AS
SET NOCOUNT ON

Declare @sBHACompID uniqueidentifier
set @sBHACompID = newid()

INSERT INTO BHAComponents (BHACompID, BHAID, Component, SerialNumber, [Type], OrderPosition, IsNonMagDrillCollar, InsideDiameter, InsideDiameterUOM,
	OutsideDiameter, OutsideDiameterUOM, [Length], LengthUOM, StabilizerBladeOD, StabilizerBladeODUOM, FishNeck, FishNeckUOM, 
	TopConnectionType, BottomConnectionType, QuantityOnRig)
VALUES (@sBHACompId, @sBHAID, @sComponent, @sSerialNumber, @sType, @iOrderPosition, @iNonMag, @sID, @sIDUOM, @sOD, @sODUOM, @sLength, @sLengthUOM,
	@sStabilizerBladeOD, @sStabilizerBladeODUOM, @sFishNeck, @sFishNeckUOM, @sTopConnectionType, @sBottomConnectionType, @iQuantityOnRig)

SELECT @sBHACompID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_BHADataCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_BHADataCreate] (
	@sRunID as uniqueidentifier)
AS
SET NOCOUNT ON

Declare @sBHAID uniqueidentifier
SET @sBHAID = newid()

INSERT INTO BHA (BHAID, RunID, BHANumber, BHAType, Torque, TorqueUOM, WeightOnBit, WeightOnBitUOM, RotaryRPM, SurfaceRPM)
SELECT @sBHAID, @sRunID, r.BHANumber, r.BHAType, rd.TorqueReamMax, rd.TorqueReamUOM, WOBRotatingMax, WOBRotatingUOM, RPMMotorMax, SurfaceRPMMax
FROM Runs r
LEFT JOIN RunActivity ra ON ra.RunID = r.RunID
LEFT JOIN RunDrilling rd ON rd.RunID = r.RunID
LEFT JOIN BHA bha ON bha.RunID = r.RunID
WHERE r.RunID = @sRunID

SELECT @sBHAID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_BitDataCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_BitDataCreate] (
	@sRunID as uniqueidentifier,
	@sBitType as varchar(50),
	@sSerialNumber as varchar(50),
	@sBitTFA as float,	
	@sBitTFAUOM as varchar(10),
	@sBitDeltaP as float,
	@sBitDeltaPUOM as varchar(10),
	@sEstimatedFlowRate as float,
	@sComments as varchar(255),
	@sGradingIn as varchar(30),
	@sGradingOut as varchar(30),
	@sNozzles as varchar(30),
	@sBitSize as float,
	@sBitSizeUOM as varchar(10),
	@sBitManufacturer as varchar(50),
	@sModel as varchar(50),
	@sMaxOuterD as float,
	@sTopConnectionType as varchar(50),
	@sGaugeType as varchar(20),
	@sGaugeLength as float,
	@sGaugeLengthUOM as varchar(5),
	@sPDCCutterSize as float,
	@sPDCCutterSizeUOM as varchar(5),
	@sNumberOfBlades as float,
	@sBitLength as float,
	@sBitLengthUOM as varchar(5)
) 

AS
SET NOCOUNT ON

Declare @sBitDataID uniqueidentifier
set @sBitDataID = newid()

INSERT INTO BitData (BitDataID, RunID, BitType, SerialNumber, BitTFA, BitTFAUOM, BitDeltaP, BitDeltaPUOM, EstimatedFlowRate, Comments
	, GradingIn, GradingOut, Nozzles, BitSize, BitSizeUOM, BitManufacturer, Model, MaxOuterD, TopConnectionType, GaugeType, GaugeLength
	, GaugeLengthUOM, PDCCutterSize	, PDCCutterSizeUOM, NumberOfBlades, BitLength, BitLengthUOM)
VALUES (@sBitDataID, @sRunID, @sBitType, @sSerialNumber, @sBitTFA, @sBitTFAUOM, @sBitDeltaP, @sBitDeltaPUOM, @sEstimatedFlowRate, @sComments
	, @sGradingIn, @sGradingOut, @sNozzles, @sBitSize, @sBitSizeUOM, @sBitManufacturer, @sModel, @sMaxOuterD, @sTopConnectionType
	, @sGaugeType, @sGaugeLength, @sGaugeLengthUOM, @sPDCCutterSize, @sPDCCutterSizeUOM, @sNumberOfBlades, @sBitLength, @sBitLengthUOM)

SELECT @sBitDataID

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_BitDataGradingCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_BitDataGradingCreate] (
	@sRunID as uniqueidentifier,
	@sBitDataID as uniqueidentifier,
	@sInnerRowsIn as varchar(50),
	@sOuterRowsIn as varchar(50),
	@sDullCharacteristicsIn as varchar(50),
	@sLocationLIn as varchar(50),
	@sBearingSeatBIn as varchar(50),
	@sOtherDullOIn as varchar(50),
	@sReasonPulledRIn as varchar(50),
	@sGaugeGIn as varchar(50),
	@sInnerRowsOut as varchar(50),
	@sOuterRowsOut as varchar(50),
	@sDullCharacteristicsOut as varchar(50),
	@sLocationLOut as varchar(50),
	@sBearingSeatBOut as varchar(50),
	@sOtherDullOOut as varchar(50),
	@sReasonPulledROut as varchar(50),
	@sGaugeGOut as varchar(50)
) 

AS
SET NOCOUNT ON

Declare @sBitDataGradingID uniqueidentifier
set @sBitDataGradingID = newid()

INSERT INTO BitDataGrading (BitDataGradingID, RunID, BitDataID, InnerRowsIn, OuterRowsIn, DullCharacteristicsIn, LocationLIn, BearingSeatBIn
	, OtherDullOIn, ReasonPulledRIn, GaugeGIn, InnerRowsOut, OuterRowsOut, DullCharacteristicsOut, LocationLOut, BearingSeatBOut
	, OtherDullOOut, ReasonPulledROut, GaugeGOut)
VALUES (@sBitDataGradingID, @sRunID, @sBitDataID, @sInnerRowsIn, @sOuterRowsIn, @sDullCharacteristicsIn, @sLocationLIn, @sBearingSeatBIn
	, @sOtherDullOIn, @sReasonPulledRIn, @sGaugeGIn, @sInnerRowsOut, @sOuterRowsOut, @sDullCharacteristicsOut, @sLocationLOut, @sBearingSeatBOut
	, @sOtherDullOOut, @sReasonPulledROut, @sGaugeGOut)

SELECT @sBitDataGradingID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_BitDataNozzlesCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_BitDataNozzlesCreate] (
	@sRunID as uniqueidentifier,
	@sQuantity as int,
	@sSize as varchar(20),
	@sSizeUOM as varchar(10),
	@sArea as varchar(20),
	@sAreaUOM as varchar(10)
) 

AS
SET NOCOUNT ON

Declare @sBitDataNozzleID uniqueidentifier
set @sBitDataNozzleID = newid()

INSERT INTO BitDataNozzles (BitDataNozzleID, RunID, Quantity, [Size], SizeUOM, Area, AreaUOM)
VALUES (@sBitDataNozzleID, @sRunID, @sQuantity, @sSize, @sSizeUOM, @sArea, @sAreaUOM)

SELECT @sBitDataNozzleID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_BoreholeCasingCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_BoreholeCasingCreate](
					@sWellID as varchar(38),
					@sOD as float,
					@sODUOM as varchar(10),
					@sWeight as float,
					@sWeightUOM as varchar(10),
					@sDepthFrom as float,
					@sDepthFromUOM as varchar(10),
					@sDepthTo as float,
					@sDepthToUOM as varchar(10),
					@sID as float,
					@sIDUOM as varchar(5),
					@sHoleSize as float,
					@sHoleSizeUOM as varchar(5))
AS
 
SET NOCOUNT ON

DECLARE @sBoreholeCasingID as uniqueidentifier
SET @sBoreholeCasingID = newid()

INSERT INTO BoreholeCasing (BoreholeCasingID, WellID, OD, ODUOM, Weight, WeightUOM, DepthFrom, DepthFromUOM, DepthTo, DepthToUOM,
								ID, IDUOM, HoleSize, HoleSizeUOM)
VALUES (@sBoreholeCasingID, @sWellID, @sOD, @sODUOM, @sWeight, @sWeightUOM, @sDepthFrom, @sDepthFromUOM, @sDepthTo, @sDepthToUOM,
		@sID, @sIDUOM, @sHoleSize, @sHoleSizeUOM)

SELECT @sBoreholeCasingID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_BoreholeDevRecsCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_BoreholeDevRecsCreate](
				@sWellID as uniqueidentifier,
				@sRunBHAName as varchar(50),
				@sBHAType as varchar(50),
				@sHoleSize as float,
				@sHoleSizeUOM as varchar(10),
				@sHoleMDStart as float,
				@sHoleMDStartUOM as varchar(5),
				@sHoleMDEnd as float,
				@sHoleMDEndUOM as varchar(5),
				@sMinInc as float,
				@sMinIncUOM as varchar(10),
				@sMaxInc as float,
				@sMaxIncUOM as varchar(10))
AS
 
SET NOCOUNT ON

DECLARE @sBoreholeDevRecID as uniqueidentifier
SET @sBoreholeDevRecID = newid()

INSERT INTO BoreholeDevRecs (BoreholeDevRecID, WellID, RunBHAName, BHAType, HoleSize, HoleSizeUOM,
	HoleMDStart, HoleMDStartUOM, HoleMDEnd, HoleMDEndUOM, MinInc, MinIncUOM, MaxInc, MaxIncUOM)
VALUES (@sBoreholeDevRecID, @sWellID, @sRunBHAName, @sBHAType, @sHoleSize, @sHoleSizeUOM,
		@sHoleMDStart, @sHoleMDStartUOM, @sHoleMDEnd, @sHoleMDEndUOM, @sMinInc, @sMinIncUOM, @sMaxInc, @sMaxIncUOM)

SELECT @sBoreholeDevRecID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_BoreholeRecsCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_BoreholeRecsCreate](
					@sWellID as varchar(38),
					@sSection as varchar(50),
					@sHoleSize as float,
					@sHoleSizeUOM as varchar(10),
					@sDepthFrom as float,
					@sDepthFromUOM as varchar(10),
					@sDepthTo as float,
					@sDepthToUOM as varchar(10),
					@sIncStart float,
					@sIncStartUOM as varchar(5),
					@sIncEnd float,
					@sIncEndUOM as varchar(5))
AS
 
SET NOCOUNT ON

DECLARE @sBoreholeRecID as uniqueidentifier
SET @sBoreholeRecID = newid()

INSERT INTO BoreholeRecs (BoreholeRecID, WellID, Section, HoleSize, HoleSizeUOM, DepthFrom, DepthFromUOM, DepthTo, DepthToUOM,
								 IncStart, IncStartUOM, IncEnd, IncEndUOM)
VALUES (@sBoreholeRecID, @sWellID, @sSection, @sHoleSize, @sHoleSizeUOM, @sDepthFrom, @sDepthFromUOM, @sDepthTo, @sDepthToUOM, @sIncStart, @sIncStartUOM, @sIncEnd, @sIncEndUOm)

SELECT @sBoreholeRecID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_CoreImportCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_CoreImportCreate] (
	@sFileName as varchar(100),
	@sBranchPlant as varchar(10),
	@sJobNumber as varchar(50),
	@iIsUploaded as tinyint,
	@iUploadUserID as int,
	@iIsImported as tinyint,
	@iImportUserID as int,
	@iIsImportFailure as tinyint,
	@sDesc as varchar(500),
	@sVersionNumber as varchar(10)) 

AS
SET NOCOUNT ON

Declare @sCoreImportID uniqueidentifier
Set @sCoreImportID = newid()

Declare @dUploadDate smalldatetime
Set @dUploadDate = NULL

Declare @dImportDate smalldatetime
Set @dImportDate = NULL

Declare @iImportAttempts tinyint
Set @iImportAttempts = 0

If (@iIsUploaded = 1)
Begin
    Set @dUploadDate = GetDate()
End

If (@iIsImported = 1)
Begin
    Set @iImportAttempts = 1
    Set @dImportDate = GetDate()
End

If (@sBranchPlant IS NULL)
BEGIN
	SET @sBranchPlant = (Select BranchPlant From Jobs Where JobNumber = @sJobNumber)
END

INSERT INTO CoreImport (CoreImportID, [FileName], BranchPlant, JobNumber, IsUploaded, UploadUserID, UploadDate, 
							IsImported, ImportUserID, ImportDate, ImportAttempts, IsImportFailure, [Desc], IsDeleted, VersionNumber)
VALUES 
(
	@sCoreImportID, @sFileName, @sBranchPlant, @sJobNumber, @iIsUploaded, @iUploadUserID, @dUploadDate, 
	@iIsImported, @iImportUserID, @dImportDate, @iImportAttempts, @iIsImportFailure, @sDesc, 0, @sVersionNumber
)

SELECT @sCoreImportID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_CreateAttachment]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_CreateAttachment] (
	@sRunID as varchar(38),
	@sIncidentID as varchar(38),
	@sFileType as varchar(100),
	@sFilePath as varchar(255),
	@sFileSize as varchar(30),
	@sImageIcon as varchar(20)
)

AS
SET NOCOUNT ON

Declare @sAttachmentID uniqueidentifier
Set @sAttachmentID = newid()

INSERT INTO Attachments(AttachmentID, RunID, IncidentID, FileType, FilePath, FileSize, ImageIcon, Legacy)
VALUES (@sAttachmentID, @sRunID, @sIncidentID, @sFileType, @sFilePath, @sFileSize, @sImageIcon, 2)

SELECT @sAttachmentID

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_CreateToolStringComponentInfo]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_CreateToolStringComponentInfo] (
	@sToolStringID as uniqueidentifier,
	@sFixedAssetID as uniqueidentifier,
	@sSerialNum as varchar(30),
	@sRNItemNum as varchar(30),
	@sInventoryItemNum as varchar(30),
	@sRevision varchar(2),
	@sToolCode varchar(40), 
	@iPartTypeID as int,
	@sRunID as uniqueidentifier,
	@sIncidentID as uniqueidentifier,
	@sOperHrs as varchar(50),
	@sCircHrs as varchar(50),
	@sDrillHrs as varchar(50),
	@sFailureDesc as varchar(2500),
	@iIsUsed as bit,
	@sCorrectiveAction as varchar(2500),
	@sLostTime as varchar(10),
	@iTFF as bit,
	@iCSI as bit,
	@dIncidentDate as datetime)

AS
BEGIN
SET NOCOUNT ON

Declare @sToolStringInfoID uniqueidentifier
Set @sToolStringInfoID = newid()

INSERT INTO ToolStringComponentInfo(
				ToolStringInfoID, ToolStringID, FixedAssetID, SerialNum, RNItemNum, InventoryItemNum, PartTypeID, RunID, IncidentID
				, EndingOperHrs, EndingCircHrs, EndingDrillHrs, FailureDesc, IsUsed, CorrectiveAction, LostTime, TFF, CSI, IncidentDate
				, Revision, ToolCode)
VALUES (@sToolStringInfoID, @sToolStringID, @sFixedAssetID, @sSerialNum, @sRNItemNum, @sInventoryItemNum, @iPartTypeID, @sRunID, @sIncidentID
		, @sOperHrs, @sCircHrs, @sDrillHrs, @sFailureDesc, @iIsUsed, @sCorrectiveAction, @sLostTime, @iTFF, @iCSI, @dIncidentDate
		, @sRevision, @sToolCode)

SELECT @sToolStringInfoID

SET NOCOUNT OFF
END


GO
/****** Object:  StoredProcedure [dbo].[usp_Import_DailyCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_DailyCreate] (
	@WellID as uniqueidentifier,
	@RunID as uniqueidentifier,
	@ActivityName as varchar(50),
	@ActivityStart as datetime,
	@ActivityEnd as datetime,
	@BelowRotataryDatetime as datetime,
	@AboveRotaryDatetime as datetime,
	@TotalBelowRotaryTime as float,
	@TotalAboveRotaryTime as float,
	@MDStart as float,
	@MDFinish as float,
	@MDUOM as varchar(10),
	@TVDStart as float,
	@TVDFinish as float,
	@TVDUOM as varchar(10),
	@InclinationStart as float,
	@InclinationFinish as float,
	@InclinationUOM as varchar(10),
	@AzimuthStart as float,
	@AzimuthFinish as float,
	@AzimuthUOM as varchar(10),
	@MDTotalDrilling as float,
	@AvgROP as float,
	@AvgROPUOM as varchar(10),
	@OperatingHours as float,
	@TVDTotalDrilling as float,
	@RotatingHours as float,
	@ReamHours as float,
	@DrillingHours as float,
	@BuildRateDD as float,
	@BuildRateDDUOM as varchar(10),
	@MaxDogLegDD as float,
	@MaxDogLegDDUOM as varchar(10),
	@PumpsOnHoursLWD as float,
	@MeasuredDipAngleLWD as float,
	@MeasuredDipAngleLWDUOM as varchar(10),
	@MeasuredBTotalLWD as float,
	@MeasuredBTotalLWDUOM as varchar(10),
	@MeasuredGTotalLWD as float,
	@MeasuredGTotalLWDUOM as varchar(10),
	@CommentsLWD as varchar(2000),
	@MaterialsRequestedLWD as varchar(2000),
	@CommentsDD as varchar(2000),
	@MaterialsRequestedDD as varchar(2000),
	@CommentsRSS as varchar(2000),
	@MaterialsRequestedRSS as varchar(2000),
	@AvgROPDD as float,
	@AvgROPDDUOM as varchar(10),
	@AvgROPRSS as float,
	@AvgROPRSSUOM as varchar(10),
	@RptPath as varchar(255),
	@ImportUserID as int,
	@ImportSource as varchar(10),
	@CircHrs as float
) 

AS
SET NOCOUNT ON

Declare @DailyID uniqueidentifier
set @DailyID = newid()

INSERT INTO Daily (DailyID, WellID, RunID, ActivityName, ActivityStart, ActivityEnd, BelowRotataryDatetime, AboveRotaryDatetime, TotalBelowRotaryTime
	, TotalAboveRotaryTime, MDStart, MDFinish, MDUOM, TVDStart, TVDFinish, TVDUOM, InclinationStart, InclinationFinish, InclinationUOM, AzimuthStart
	, AzimuthFinish, AzimuthUOM, MDTotalDrilling, AvgROP, AvgROPUOM, OperatingHours, TVDTotalDrilling, RotatingHours, ReamHours, DrillingHours, BuildRateDD
	, BuildRateDDUOM, MaxDogLegDD, MaxDogLegDDUOM, PumpsOnHoursLWD, MeasuredDipAngleLWD, MeasuredDipAngleLWDUOM, MeasuredBTotalLWD, MeasuredBTotalLWDUOM
	, MeasuredGTotalLWD, MeasuredGTotalLWDUOM, CommentsLWD, MaterialsRequestedLWD, CommentsDD, MaterialsRequestedDD, CommentsRSS, MaterialsRequestedRSS
	, AvgROPDD, AvgROPDDUOM, AvgROPRSS, AvgROPRSSUOM, RptPath, ImportUserID, ImportSource, CircHrs)
VALUES (@DailyID, @WellID, @RunID, @ActivityName, @ActivityStart, @ActivityEnd, @BelowRotataryDatetime, @AboveRotaryDatetime, @TotalBelowRotaryTime
	, @TotalAboveRotaryTime, @MDStart, @MDFinish, @MDUOM, @TVDStart, @TVDFinish, @TVDUOM, @InclinationStart, @InclinationFinish, @InclinationUOM
	, @AzimuthStart, @AzimuthFinish, @AzimuthUOM, @MDTotalDrilling, @AvgROP, @AvgROPUOM, @OperatingHours, @TVDTotalDrilling, @RotatingHours, @ReamHours
	, @DrillingHours, @BuildRateDD, @BuildRateDDUOM, @MaxDogLegDD, @MaxDogLegDDUOM, @PumpsOnHoursLWD, @MeasuredDipAngleLWD, @MeasuredDipAngleLWDUOM
	, @MeasuredBTotalLWD, @MeasuredBTotalLWDUOM, @MeasuredGTotalLWD, @MeasuredGTotalLWDUOM, @CommentsLWD, @MaterialsRequestedLWD, @CommentsDD
	, @MaterialsRequestedDD, @CommentsRSS, @MaterialsRequestedRSS, @AvgROPDD, @AvgROPDDUOM, @AvgROPRSS, @AvgROPRSSUOM, @RptPath, @ImportUserID, @ImportSource
	, @CircHrs)

SELECT @DailyID

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_DailyDrillingCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_DailyDrillingCreate] (
	@DailyID as uniqueidentifier,
	@SurfaceTorque as float,
	@SurfaceTorqueUOM as varchar(10),
	@SurfaceRPM as float,
	@WOBSliding as float,
	@WOBSlidingUOM as varchar(10),
	@WOBRotating as float,
	@WOBRotatingUOM as varchar(10),
	@DrillingFlowRate as float,
	@StringWeightRotating as float,
	@StringWeightRotatingUOM as varchar(10),
	@StringWeightPickup as float,
	@StringWeightPickupUOM as varchar(10),
	@StringWeightSlackOff as float,
	@StringWeightSlackOffUOM as varchar(10),
	@RPMMotor as float,
	@TorqueReam as float,
	@TorqueReamUOM as varchar(10),
	@MtrDeltaPOnBottom as float,
	@MtrDeltaPOffBottom as float,
	@MtrDeltaPUOM as varchar(10),
	@SurvVerticalSection as float,
	@SurvVerticalSectionUOM as varchar(10),
	@SurvMaxInc as float,
	@SurvMinInc as float,
	@SurvIncUOM as varchar(10),
	@BHATorque as float,
	@BHATorqueUOM as varchar(10),
	@BHAWOB as float,
	@BHAWOBUOM as varchar(10),
	@BHASurfaceRPM as float
) 

AS
SET NOCOUNT ON

Declare @DailyDrillingID uniqueidentifier
set @DailyDrillingID = newid()

INSERT INTO DailyDrilling (DailyDrillingID, DailyID, SurfaceTorque, SurfaceTorqueUOM, SurfaceRPM, WOBSliding, WOBSlidingUOM
	, WOBRotating, WOBRotatingUOM, DrillingFlowRate, StringWeightRotating, StringWeightRotatingUOM, StringWeightPickup, StringWeightPickupUOM
	, StringWeightSlackOff, StringWeightSlackOffUOM, RPMMotor, TorqueReam, TorqueReamUOM
	, MtrDeltaPOnBottom, MtrDeltaPOffBottom, MtrDeltaPUOM, SurvVerticalSection, SurvVerticalSectionUOM, SurvMaxInc, SurvMinInc, SurvIncUOM
	, BHATorque, BHATorqueUOM, BHAWOB, BHAWOBUOM, BHASurfaceRPM
)
VALUES (@DailyDrillingID, @DailyID, @SurfaceTorque, @SurfaceTorqueUOM, @SurfaceRPM, @WOBSliding, @WOBSlidingUOM
	, @WOBRotating, @WOBRotatingUOM, @DrillingFlowRate, @StringWeightRotating, @StringWeightRotatingUOM, @StringWeightPickup, @StringWeightPickupUOM
	, @StringWeightSlackOff, @StringWeightSlackOffUOM, @RPMMotor, @TorqueReam, @TorqueReamUOM
	, @MtrDeltaPOnBottom, @MtrDeltaPOffBottom, @MtrDeltaPUOM, @SurvVerticalSection, @SurvVerticalSectionUOM, @SurvMaxInc, @SurvMinInc, @SurvIncUOM
	, @BHATorque, @BHATorqueUOM, @BHAWOB, @BHAWOBUOM, @BHASurfaceRPM)

SELECT @DailyDrillingID

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_DailyEMCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_DailyEMCreate] (
	@DailyID as uniqueidentifier,
	@DrillingStart as datetime,
	@DrillingEnd as datetime,
	@SignalLevelStart as float,
	@SignalLevelStartUOM as varchar(10),
	@SignalLevelEnd as float,
	@SignalLevelEndUOM as varchar(10),
	@NoiseLevelStart as float,
	@NoiseLevelStartUOM as varchar(10),
	@NoiseLevelEnd as float,
	@NoiseLevelEndUOM as varchar(10),
	@EmittingCurrentStart as float,
	@EmittingCurrentStartUOM as varchar(10),
	@EmittingCurrentEnd as float,
	@EmittingCurrentEndUOM as varchar(10),
	@MainGroundStart as varchar(50),
	@MainGroundEnd as varchar(50),
	@ReceptionStart as varchar(50),
	@ReceptionEnd as varchar(50),
	@MainGroundVoltageStart as float,
	@MainGroundVoltageStartUOM as varchar(10),
	@MainGroundVoltageEnd as float,
	@MainGroundVoltageEndUOM as varchar(10),
	@MainGroundCurrentStart as float,
	@MainGroundCurrentStartUOM as varchar(10),
	@MainGroundCurrentEnd as float,
	@MainGroundCurrentEndUOM as varchar(10),
	@MainGroundResistanceStart as float,
	@MainGroundResistanceStartUOM as varchar(10),
	@MainGroundResistanceEnd as float,
	@MainGroundResistanceEndUOM as varchar(10),
	@Transceiversn as varchar(50),
	@ExtendedRangeRun as varchar(50),
	@ExtendedRangeCableLength as float,
	@ExtendedRangeCableLengthUOM as varchar(10)
) 

AS
SET NOCOUNT ON

Declare @DailyEMID uniqueidentifier
set @DailyEMID = newid()

INSERT INTO DailyEM (DailyEMID, DailyID, DrillingStart, DrillingEnd, SignalLevelStart, SignalLevelStartUOM, SignalLevelEnd, SignalLevelEndUOM
	, NoiseLevelStart, NoiseLevelStartUOM, NoiseLevelEnd, NoiseLevelEndUOM, EmittingCurrentStart, EmittingCurrentStartUOM, EmittingCurrentEnd, EmittingCurrentEndUOM
	, MainGroundStart, MainGroundEnd, ReceptionStart, ReceptionEnd, MainGroundVoltageStart, MainGroundVoltageStartUOM, MainGroundVoltageEnd, MainGroundVoltageEndUOM
	, MainGroundCurrentStart, MainGroundCurrentStartUOM, MainGroundCurrentEnd, MainGroundCurrentEndUOM, MainGroundResistanceStart, MainGroundResistanceStartUOM
	, MainGroundResistanceEnd, MainGroundResistanceEndUOM, Transceiversn, ExtendedRangeRun, ExtendedRangeCableLength, ExtendedRangeCableLengthUOM)
VALUES (@DailyEMID, @DailyID, @DrillingStart, @DrillingEnd, @SignalLevelStart, @SignalLevelStartUOM, @SignalLevelEnd, @SignalLevelEndUOM
	, @NoiseLevelStart, @NoiseLevelStartUOM, @NoiseLevelEnd, @NoiseLevelEndUOM, @EmittingCurrentStart, @EmittingCurrentStartUOM, @EmittingCurrentEnd, @EmittingCurrentEndUOM
	, @MainGroundStart, @MainGroundEnd, @ReceptionStart, @ReceptionEnd, @MainGroundVoltageStart, @MainGroundVoltageStartUOM, @MainGroundVoltageEnd, @MainGroundVoltageEndUOM
	, @MainGroundCurrentStart, @MainGroundCurrentStartUOM, @MainGroundCurrentEnd, @MainGroundCurrentEndUOM, @MainGroundResistanceStart, @MainGroundResistanceStartUOM
	, @MainGroundResistanceEnd, @MainGroundResistanceEndUOM, @Transceiversn, @ExtendedRangeRun, @ExtendedRangeCableLength, @ExtendedRangeCableLengthUOM)

SELECT @DailyEMID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_DailyHydraulicsCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_DailyHydraulicsCreate] (
	@DailyID as uniqueidentifier,
	@DeltaPTotal as float,
	@DeltaPTotalUOM as varchar(10),
	@HydrostaticPressure as float,
	@HydrostaticPressureUOM as varchar(10),
	@MaxOperPressure as float,
	@MaxOperPressureUOM as varchar(10),
	@MaxObservedPressure as float,
	@MaxObservedPressureUOM as varchar(10),
	@StandPipePressureOnBottom as float,
	@StandPipePressureOnBottomUOM as varchar(10),
	@StandPipePressureOffBottom as float,
	@StandPipePressureOffBottomUOM as varchar(10),
	@UnderBalanced as varchar(50),
	@GasFlowRate as float,
	@GasFlowRateUOM as varchar(10),
	@LiquidFlowRate as float,
	@LiquidFlowRateUOM as varchar(10),
	@OrientingDrillingFlowRate as float,
	@OrientingDrillingFlowRateUOM as varchar(10),
	@RotatingDrillingFlowRate as float,
	@RotatingDrillingFlowRateUOM as varchar(10),
	@RotaryDrillingFlowRate as float,
	@RotaryDrillingFlowRateUOM as varchar(10),
	@DrillingFlowRate as float,
	@DrillingFlowRateUOM as varchar(10),
	@PulseAmplitudeObserved as float,
	@PulseAmplitudeObservedUOM as varchar(10),
	@DetectionPercent as float,
	@AnnularVelocity as float,
	@AnnularVelocityUOM as varchar(10),
	@CriticalVelocity as float,
	@CriticalVelocityUOM as varchar(10),
	@StrokeRate as float,
	@StrokeRateUOM as varchar(10),
	@DifferentialPressure as float,
	@DifferentialPressureUOM as varchar(10),
	@DeltaPBit as float,
	@DeltaPBitUOM as varchar(10),
	@PulseAmplitudeDownholeCalculated as float,
	@PulseAmplitudeDownholeCalculatedUOM as varchar(10),
	@OrificeSize as float,
	@OrificSizeUOM as varchar(5),
	@OrificeSizeCanadian as float,
	@OrificSizeCanadianUOM as varchar(5)
) 

AS
SET NOCOUNT ON

Declare @DailyHydraulicID uniqueidentifier
set @DailyHydraulicID = newid()

INSERT INTO DailyHydraulics (DailyHydraulicID, DailyID, DeltaPTotal, DeltaPTotalUOM, HydrostaticPressure, HydrostaticPressureUOM
	, MaxOperPressure, MaxOperPressureUOM, MaxObservedPressure, MaxObservedPressureUOM, StandPipePressureOnBottom, StandPipePressureOnBottomUOM
	, StandPipePressureOffBottom, StandPipePressureOffBottomUOM, UnderBalanced, GasFlowRate, GasFlowRateUOM, LiquidFlowRate, LiquidFlowRateUOM
	, OrientingDrillingFlowRate, OrientingDrillingFlowRateUOM, RotatingDrillingFlowRate, RotatingDrillingFlowRateUOM, RotaryDrillingFlowRate, RotaryDrillingFlowRateUOM
	, DrillingFlowRate, DrillingFlowRateUOM, PulseAmplitudeObserved, PulseAmplitudeObservedUOM, DetectionPercent, AnnularVelocity, AnnularVelocityUOM
	, CriticalVelocity, CriticalVelocityUOM, StrokeRate, StrokeRateUOM, DifferentialPressure, DifferentialPressureUOM, DeltaPBit, DeltaPBitUOM
	, PulseAmplitudeDownholeCalculated, PulseAmplitudeDownholeCalculatedUOM, OrificeSize, OrificeSizeUOM)
VALUES (@DailyHydraulicID, @DailyID, @DeltaPTotal, @DeltaPTotalUOM, @HydrostaticPressure, @HydrostaticPressureUOM, @MaxOperPressure, @MaxOperPressureUOM
	, @MaxObservedPressure, @MaxObservedPressureUOM, @StandPipePressureOnBottom, @StandPipePressureOnBottomUOM, @StandPipePressureOffBottom, @StandPipePressureOffBottomUOM
	, @UnderBalanced, @GasFlowRate, @GasFlowRateUOM, @LiquidFlowRate, @LiquidFlowRateUOM, @OrientingDrillingFlowRate, @OrientingDrillingFlowRateUOM, @RotatingDrillingFlowRate
	, @RotatingDrillingFlowRateUOM, @RotaryDrillingFlowRate, @RotaryDrillingFlowRateUOM, @DrillingFlowRate, @DrillingFlowRateUOM, @PulseAmplitudeObserved, @PulseAmplitudeObservedUOM
	, @DetectionPercent, @AnnularVelocity, @AnnularVelocityUOM, @CriticalVelocity, @CriticalVelocityUOM, @StrokeRate, @StrokeRateUOM, @DifferentialPressure, @DifferentialPressureUOM
	, @DeltaPBit, @DeltaPBitUOM, @PulseAmplitudeDownholeCalculated, @PulseAmplitudeDownholeCalculatedUOM, @OrificeSize, 'deg')

SELECT @DailyHydraulicID

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_DailyMudDataCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_DailyMudDataCreate] (
	@DailyID as uniqueidentifier,
	@BaseFluid as varchar(50),
	@MudType as varchar(50),
	@GasType as varchar(50),
	@Density as float,
	@DensityUOM as varchar(10),
	@Viscosity as float,
	@ViscosityUOM as varchar(10),
	@WaterLoss as float,
	@WaterLossUOM as varchar(10),
	@PlasticViscosity as float,
	@PlasticViscosityUOM as varchar(10),
	@YieldPoint as float,
	@YieldPointUOM as varchar(10),
	@DownholeMaxTemp as float,
	@DownholeMaxTempUOM as varchar(10),
	@pH as float,
	@SandPercent as float,
	@SolidPercent as float,
	@OilPercent as float,
	@WaterPercent as float,
	@LCMConcentration as float,
	@LCMConcentrationUOM as varchar(10),
	@LCMTypeGrade as varchar(100),
	@GEL as float,
	@GELUOM as varchar(10),
	@KClConcentration as float,
	@KClConcentrationUOM as varchar(10),
	@NaCI as float,
	@NaCIUOM as varchar(10),
	@CaCI as float,
	@CaCIUOM as varchar(10),
	@TotalChlorides as float,
	@TotalChloridesUOM as varchar(10),
	@EquivalentNaCI as float,
	@EquivalentNaCIUOM as varchar(10),
	@Rm as float,
	@RMTemp as float,
	@Rmf as float,
	@RmfTemp as float,
	@Rmc as float,
	@RmcTemp as float,
	@RmTool as float,
	@RmMaxToolTemp as float,
	@RmGroupUOM as varchar(10),
	@RmTempGroupUOM as varchar(10)
) 

AS
SET NOCOUNT ON

Declare @DailyMudDataID uniqueidentifier
set @DailyMudDataID = newid()

INSERT INTO DailyMudData (DailyMudDataID, DailyID, BaseFluid, MudType, GasType, Density, DensityUOM, Viscosity, ViscosityUOM, WaterLoss
	, WaterLossUOM, PlasticViscosity, PlasticViscosityUOM, YieldPoint, YieldPointUOM, DownholeMaxTemp, DownholeMaxTempUOM, pH, SandPercent, SolidPercent, OilPercent
	, WaterPercent, LCMConcentration, LCMConcentrationUOM, LCMTypeGrade, GEL, GELUOM, KClConcentration, KClConcentrationUOM, NaCI, NaCIUOM, CaCI, CaCIUOM, TotalChlorides
	, TotalChloridesUOM, EquivalentNaCI, EquivalentNaCIUOM, Rm, RMTemp, Rmf, RmfTemp, Rmc, RmcTemp, RmTool, RmMaxToolTemp, RmGroupUOM, RmTempGroupUOM)
VALUES (@DailyMudDataID, @DailyID, @BaseFluid, @MudType, @GasType, @Density, @DensityUOM, @Viscosity, @ViscosityUOM, @WaterLoss, @WaterLossUOM
	, @PlasticViscosity, @PlasticViscosityUOM, @YieldPoint, @YieldPointUOM, @DownholeMaxTemp, @DownholeMaxTempUOM, @pH, @SandPercent, @SolidPercent
	, @OilPercent, @WaterPercent, @LCMConcentration, @LCMConcentrationUOM, @LCMTypeGrade, @GEL, @GELUOM, @KClConcentration, @KClConcentrationUOM, @NaCI, @NaCIUOM
	, @CaCI, @CaCIUOM, @TotalChlorides, @TotalChloridesUOM, @EquivalentNaCI, @EquivalentNaCIUOM, @Rm, @RMTemp, @Rmf, @RmfTemp, @Rmc, @RmcTemp, @RmTool, @RmMaxToolTemp
	, @RmGroupUOM, @RmTempGroupUOM)

SELECT @DailyMudDataID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_DailyRigDataCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_DailyRigDataCreate] (
	@DailyID as uniqueidentifier,
	@Date as datetime,
	@StartTime as datetime,
	@EndTime as datetime,
	@TimeInterval as float,
	@BRT as bit,
	@ActivityMode as varchar(50),
	@Activity as varchar(50),
	@Comments as varchar(255)
) 

AS
SET NOCOUNT ON

Declare @DailyRigDataID uniqueidentifier
set @DailyRigDataID = newid()

INSERT INTO DailyRigData (DailyRigDataID, DailyID, Date, StartTime, EndTime, TimeInterval, BRT, ActivityMode, Activity, Comments)
VALUES (@DailyRigDataID, @DailyID, @Date, @StartTime, @EndTime, @TimeInterval, @BRT, @ActivityMode, @Activity, @Comments)

SELECT @DailyRigDataID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_DailyUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_DailyUpdate] (
	@DailyID as uniqueidentifier,
	@ActivityName as varchar(50),
	@ActivityStart as datetime,
	@ActivityEnd as datetime,
	@BelowRotataryDatetime as datetime,
	@AboveRotaryDatetime as datetime,
	@TotalBelowRotaryTime as float,
	@TotalAboveRotaryTime as float,
	@MDStart as float,
	@MDFinish as float,
	@MDUOM as varchar(10),
	@TVDStart as float,
	@TVDFinish as float,
	@TVDUOM as varchar(10),
	@InclinationStart as float,
	@InclinationFinish as float,
	@InclinationUOM as varchar(10),
	@AzimuthStart as float,
	@AzimuthFinish as float,
	@AzimuthUOM as varchar(10),
	@MDTotalDrilling as float,
	@AvgROP as float,
	@AvgROPUOM as varchar(10),
	@OperatingHours as float,
	@TVDTotalDrilling as float,
	@RotatingHours as float,
	@ReamHours as float,
	@DrillingHours as float,
	@BuildRateDD as float,
	@BuildRateDDUOM as varchar(10),
	@MaxDogLegDD as float,
	@MaxDogLegDDUOM as varchar(10),
	@PumpsOnHoursLWD as float,
	@MeasuredDipAngleLWD as float,
	@MeasuredDipAngleLWDUOM as varchar(10),
	@MeasuredBTotalLWD as float,
	@MeasuredBTotalLWDUOM as varchar(10),
	@MeasuredGTotalLWD as float,
	@MeasuredGTotalLWDUOM as varchar(10),
	@CommentsLWD as varchar(2000),
	@MaterialsRequestedLWD as varchar(2000),
	@CommentsDD as varchar(2000),
	@MaterialsRequestedDD as varchar(2000),
	@CommentsRSS as varchar(2000),
	@MaterialsRequestedRSS as varchar(2000),
	@AvgROPDD as float,
	@AvgROPDDUOM as varchar(10),
	@AvgROPRSS as float,
	@AvgROPRSSUOM as varchar(10),
	@RptPath as varchar(255),
	@ImportUserID as int,
	@ImportSource as varchar(10),
	@CircHrs as float
) 

AS
SET NOCOUNT ON

UPDATE Daily
SET	ActivityName = @ActivityName,
	ActivityStart = @ActivityStart,
	ActivityEnd = @ActivityEnd,
	BelowRotataryDatetime = @BelowRotataryDatetime,
	AboveRotaryDatetime = @AboveRotaryDatetime,
	TotalBelowRotaryTime = @TotalBelowRotaryTime,
	TotalAboveRotaryTime = @TotalAboveRotaryTime,
	MDStart = @MDStart,
	MDFinish = @MDFinish,
	MDUOM = @MDUOM,
	TVDStart = @TVDStart,
	TVDFinish = @TVDFinish,
	TVDUOM = @TVDUOM,
	InclinationStart = @InclinationStart,
	InclinationFinish = @InclinationFinish,
	InclinationUOM = @InclinationUOM,
	AzimuthStart = @AzimuthStart,
	AzimuthFinish = @AzimuthFinish,
	AzimuthUOM = @AzimuthUOM,
	MDTotalDrilling = @MDTotalDrilling,
	AvgROP = @AvgROP,
	AvgROPUOM = @AvgROPUOM,
	OperatingHours = @OperatingHours,
	TVDTotalDrilling = @TVDTotalDrilling,
	RotatingHours = @RotatingHours,
	ReamHours = @ReamHours,
	DrillingHours = @DrillingHours,
	BuildRateDD = @BuildRateDD,
	BuildRateDDUOM = @BuildRateDDUOM,
	MaxDogLegDD = @MaxDogLegDD,
	MaxDogLegDDUOM = @MaxDogLegDDUOM,
	PumpsOnHoursLWD = @PumpsOnHoursLWD,
	MeasuredDipAngleLWD = @MeasuredDipAngleLWD,
	MeasuredDipAngleLWDUOM = @MeasuredDipAngleLWDUOM,
	MeasuredBTotalLWD = @MeasuredBTotalLWD,
	MeasuredBTotalLWDUOM = @MeasuredBTotalLWDUOM,
	MeasuredGTotalLWD = @MeasuredGTotalLWD,
	MeasuredGTotalLWDUOM = @MeasuredGTotalLWDUOM,
	CommentsLWD = @CommentsLWD,
	MaterialsRequestedLWD = @MaterialsRequestedLWD,
	CommentsDD = @CommentsDD,
	MaterialsRequestedDD = @MaterialsRequestedDD,
	CommentsRSS = @CommentsRSS,
	MaterialsRequestedRSS = @MaterialsRequestedRSS,
	AvgROPDD = @AvgROPDD,
	AvgROPDDUOM = @AvgROPDDUOM,
	AvgROPRSS = @AvgROPRSS,
	AvgROPRSSUOM = @AvgROPRSSUOM,
	RptPath = @RptPath,
	ImportUserID = @ImportUserID,
	ImportDate = GetDate(),
	ImportSource = @ImportSource, 
	CircHrs = @CircHrs
WHERE DailyID = @DailyID

SELECT @DailyID

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_DataDictionaryCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_DataDictionaryCreate] (
	@sRunID as uniqueidentifier,
	@sDownloadDataID as uniqueidentifier,
	@sItemIndex as int,
	@sShortName as varchar(20),
	@sBits as float,
	@sParity as float,
	@sNumErrorCodes as float,
	@sHexCodes as varchar(50),
	@sMnemonic as varchar(50),
	@sDecimalPlaces as float,
	@sUnits as float,
	@sScale as float,
	@sOffset as float,
	@sDHScale as float,
	@sDHOffset as float,
	@sCommTies as float,
	@sRetryDelay as float,
	@sRTParameter as float,
	@sTool as varchar(50)) 

AS
SET NOCOUNT ON

Declare @sDataDictionaryId uniqueidentifier
set @sDataDictionaryId = newid()

INSERT INTO DataDictionary (DataDictionaryId, RunID, ShortName, Bits, Parity, NumErrorCodes
	, HexCodes, Mnemonic, DecimalPlaces, Units, Scale, Offset, DHScale, DHOffset, CommTies, RetryDelay, RTParameter, Tool, DownloadDataID, ItemIndex)
VALUES (@sDataDictionaryID, @sRunID, @sShortName, @sBits, @sParity, @sNumErrorCodes,
	@sHexCodes, @sMnemonic, @sDecimalPlaces, @sUnits, @sScale, @sOffset,
	@sDHScale, @sDHOffset, @sCommTies, @sRetryDelay, @sRTParameter, @sTool, @sDownloadDataID, @sItemIndex)

SELECT @sDataDictionaryId

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_DownloadDataCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_DownloadDataCreate] (
	@sRunID as uniqueidentifier,
	@sVersion as float,
	@sPrimaryMode as float,
	@sPrimaryFreq as float,
	@sModeSwitchWindowStart as float,
	@sModeSwitchWindowStop as float,
	@sFreqSwitchWindowStart as float,
	@sFreqSwitchWindowStop as float,
	@sXmitDelay as float,
	@sSurveyDelay as float,
	@sNumFreqs as float,
	@sNumModes as float) 

AS
SET NOCOUNT ON

Declare @sDownloadDataId uniqueidentifier
set @sDownloadDataId = newid()

INSERT INTO DownloadData (DownloadDataID, RunID, Version, PrimaryMode, PrimaryFreq, ModeSwitchWindowStart
	, ModeSwitchWindowStop, FreqSwitchWindowStart, FreqSwitchWindowStop, XmitDelay, SurveyDelay, NumFreqs, NumModes)
VALUES (@sDownloadDataId, @sRunID, @sVersion, @sPrimaryMode, @sPrimaryFreq, 
	@sModeSwitchWindowStart, @sModeSwitchWindowStop, @sFreqSwitchWindowStart,
	@sFreqSwitchWindowStop, @sXmitDelay, @sSurveyDelay, @sNumFreqs, @sNumModes)

SELECT @sDownloadDataId

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_DownloadFrequencyCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_DownloadFrequencyCreate] (
	@sRunID as uniqueidentifier,
	@sOn as float,
	@sOff as float,
	@sTD as float, 
	@sDownloadDataID as uniqueidentifier) 

AS
SET NOCOUNT ON

Declare @sDownloadFrequencyId uniqueidentifier
set @sDownloadFrequencyId = newid()

INSERT INTO DownloadFrequencies (DownloadFrequencyID, RunID, [On], [Off], TD, DownloadDataID)
VALUES (@sDownloadFrequencyId, @sRunID, @sOn, @sOff, @sTD, @sDownloadDataID)

SELECT @sDownloadFrequencyId

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_DownloadModeCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_DownloadModeCreate] (
	@sRunID as uniqueidentifier,
	@sModeName as varchar(50),
	@NumLists as int,
	@sCycles as float, 
	@sDownloadDataID as uniqueidentifier) 

AS
SET NOCOUNT ON

Declare @sDownloadModeId uniqueidentifier
Set @sDownloadModeId = newid()

INSERT INTO DownloadModes (DownloadModeId, RunID, ModeName, NumLists, Cycles, DownloadDataID)
VALUES (@sDownloadModeId, @sRunID, @sModeName, @NumLists, @sCycles, @sDownloadDataID)

SELECT @sDownloadModeId

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_IncidentCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_IncidentCreate] (
	@sRunID as varchar(38),
	@sIncidentNumber as varchar(50),
	@sFailureDate as datetime,
	@sUserID as int,
	@sRptPath as varchar(255),
	@sCoreVersion as varchar(10),
	@sPreRunNumber as varchar(50),
	@sIsDownHole as tinyint)

AS
SET NOCOUNT ON

Declare @sIncidentID uniqueidentifier
Set @sIncidentID = newid()

INSERT INTO Incidents (IncidentID, RunID, IncidentNumber, CreateDate, FailureDate, ImportUserID, ImportDate, IsDeleted, IsOpen, RptPath, CoreVersion, IsDownHole, PreRunNumber)
VALUES (@sIncidentID, @sRunID, @sIncidentNumber, GetDate(), @sFailureDate, @sUserID, GetDate(),	0, 1, @sRptPath, @sCoreVersion, @sIsDownHole, @sPreRunNumber)

SELECT @sIncidentID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_IncidentFromAIRTUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_IncidentFromAIRTUpdate] (
	@sRunID as uniqueidentifier,
	@sIncidentID as uniqueidentifier) 
AS
BEGIN

DECLARE @sDeletedRunID as uniqueidentifier
DECLARE @sDeletedIncidentID as uniqueidentifier

SET @sDeletedRunID = (Select Top 1 RunID From Runs (NOLOCK) r 
					Where WellID = (Select WellID From Runs (NOLOCK) Where RunID = @sRunID)
					And RunNumber = (Select RunNumber From Runs (NOLOCK) Where RunID = @sRunID)
					And IsDeleted = 1
					Order By ImportDate Desc)

IF (@sDeletedRunID Is Not Null)
BEGIN	--checks to see if there isn't a more recent deleted incident from the current runid than the incident from the deleted runid
	DECLARE @dCreateDateFromDeletedRunID as datetime
	DECLARE @dCreateDateFromCurrentRunID as datetime
	SET @dCreateDateFromDeletedRunID = (Select Max(CreateDate) From Incidents (NOLOCK) Where RunID = @sDeletedRunID And IsDeleted = 1)
	SET @dCreateDateFromCurrentRunID = (Select Max(CreateDate) From Incidents (NOLOCK) Where RunID = @sRunID And IsDeleted = 1)

	IF (@dCreateDateFromCurrentRunID > @dCreateDateFromDeletedRunID)
	BEGIN
		SET @sDeletedRunID = NULL
	END
END

IF (@sDeletedRunID Is Null) --Only the FR was deleted
BEGIN
	SET @sDeletedIncidentID = (Select Top 1 IncidentID From Incidents (NOLOCK) Where RunID = @sRunID And IsDeleted = 1 Order By CreateDate Desc)

	IF (@sDeletedIncidentID Is Not Null)
	BEGIN
		UPDATE art
		SET art.IncidentID = tsci.IncidentID
		, art.ToolStringInfoID = tsci.ToolStringInfoID
		FROM Incidents i
		LEFT JOIN ToolStringComponentInfo tsci ON tsci.IncidentID = i.IncidentID
		JOIN AssetRepairTrack art ON tsci.ArtNumber = art.ArtNumber
		WHERE i.IsDeleted = 0
		AND i.RunID = @sRunID

		UPDATE AuditRMAnalysis
		SET IncidentID = @sIncidentID
		WHERE ToolStringID Is Not Null And FixedAssetID Is Not Null
		AND IncidentID = @sDeletedIncidentID
	END
END
ELSE	--The FR was deleted along with the Run
BEGIN
	SET @sDeletedIncidentID = (Select Top 1 IncidentID From Incidents (NOLOCK) Where RunID = @sDeletedRunID And IsDeleted = 1 Order By CreateDate Desc)

	IF (@sDeletedIncidentID Is Not Null)
	BEGIN
		UPDATE tsci2
		SET tsci2.FieldSymptom = tsci.FieldSymptom,
		tsci2.TFF = tsci.TFF,
		tsci2.CSI = tsci.CSI,
		tsci2.NCI = tsci.NCI,
		tsci2.OS = tsci.OS,
		tsci2.PR = tsci.PR,
		tsci2.CompFailureCodeID = tsci.CompFailureCodeID,
		tsci2.StatusCodeID = tsci.StatusCodeID,
		tsci2.GlobalStatusCodeID = tsci.GlobalStatusCodeID,
		tsci2.TIPFT = tsci.TIPFT,
		tsci2.ArtNumber = tsci.ArtNumber,
		tsci2.OutOfSpecCodeID = tsci.OutOfSpecCodeID,
		tsci2.ProceduralCodeID = tsci.ProceduralCodeID
		FROM AssetRepairTrack a
		JOIN ToolStringComponentInfo tsci ON tsci.ArtNumber = a.ArtNumber AND tsci.IncidentID = @sDeletedIncidentID
		JOIN ToolStringComponentInfo tsci2 ON tsci2.ToolStringID = tsci.ToolStringID AND tsci2.FixedAssetID = tsci.FixedAssetID AND tsci2.IncidentID = @sIncidentID

		UPDATE a
		SET a.IncidentID = tsci.IncidentID,
		a.ToolStringInfoID = tsci.ToolStringInfoID
		FROM ToolStringComponentInfo tsci
		JOIN AssetRepairTrack a ON a.ARTNumber = tsci.ArtNumber
		WHERE tsci.IncidentID = @sIncidentID

		UPDATE c
		SET c.ToolStringInfoID = tsci2.ToolStringInfoID
		FROM RMAnalysisComments c
		JOIN ToolStringComponentInfo tsci ON tsci.ToolStringInfoID = c.ToolStringInfoID AND tsci.IncidentID = @sDeletedIncidentID
		JOIN ToolStringComponentInfo tsci2 ON tsci2.ToolStringID = tsci.ToolStringID AND tsci2.FixedAssetID = tsci.FixedAssetID AND tsci2.IncidentID = @sIncidentID
		 
		UPDATE e
		SET e.ToolStringInfoID = tsci2.ToolStringInfoID,
		e.IncidentID = tsci2.IncidentID
		FROM RMAnalysisEmail e
		JOIN ToolStringComponentInfo tsci ON tsci.ToolStringInfoID = e.ToolStringInfoID AND tsci.IncidentID = @sDeletedIncidentID
		JOIN ToolStringComponentInfo tsci2 ON tsci2.ToolStringID = tsci.ToolStringID AND tsci2.FixedAssetID = tsci.FixedAssetID AND tsci2.IncidentID = @sIncidentID

		UPDATE a
		SET a.IncidentID = @sIncidentID
		FROM AuditRMAnalysis a
		JOIN ToolStringComponentInfo tsci ON tsci.IncidentID = a.IncidentID AND tsci.ToolStringID = a.ToolStringID AND tsci.FixedAssetID = a.FixedAssetID
		WHERE a.IncidentID = @sDeletedIncidentID
	END
END

END




/****** Object:  StoredProcedure [dbo].[usp_Import_IncidentSetRptInfo]    Script Date: 08/06/2014 13:36:20 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_IncidentSetRptInfo]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_IncidentSetRptInfo] (
	@sIncidentID as uniqueidentifier) 

AS
SET NOCOUNT ON

DECLARE @sFailureDate as datetime
SET @sFailureDate = (SELECT TOP 1 IncidentDate FROM ToolStringComponentInfo (NOLOCK) tsci WHERE IncidentDate IS NOT NULL AND IncidentID = @sIncidentID ORDER BY IncidentDate ASC)

UPDATE Incidents
SET FailureDate = @sFailureDate
WHERE IncidentID = @sIncidentID

UPDATE i
SET i.FieldSummary = dbo.fnFailureDescGroup(tsci.IncidentID)
FROM ToolStringComponentInfo tsci
LEFT JOIN Incidents i ON tsci.IncidentID = i.IncidentID
WHERE tsci.IncidentID = @sIncidentID
AND tsci.FailureDesc Is Not Null

UPDATE i
SET i.FieldSurfCheckSummary = dbo.fnCorrectiveActionGroup(tsci.IncidentID)
FROM ToolStringComponentInfo tsci
LEFT JOIN Incidents i ON tsci.IncidentID = i.IncidentID
WHERE tsci.IncidentID = @sIncidentID
AND CorrectiveAction Is Not Null

IF ((SELECT Top 1 ToolStringInfoID FROM ToolStringComponentinfo (NOLOCK) WHERE IncidentID = @sIncidentID AND StatusCodeID = 1) IS NOT NULL)
BEGIN
	UPDATE Incidents
	SET IsOpen = 1
	, Dist_LWD = 0
	, Dist_DD = 0
	, Dist_MWD = 0
	, Dist_RSS = 0
	, Dist_SURVEY = 0
	, Global_LWD = 0
	, Global_DD = 0
	, Global_MWD = 0
	, Global_RSS = 0
	, Global_SURVEY = 0
	WHERE IncidentID = @sIncidentID
	AND IsOpen = 0
END

SET NOCOUNT OFF




/****** Object:  StoredProcedure [dbo].[usp_Import_MotorDataCreate]    Script Date: 08/06/2014 13:37:37 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_IncidentUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_IncidentUpdate] (
	@sIncidentID as varchar(38),
	@sIncidentNumber as varchar(50),
	@sFailureDate as datetime,
	@sUserID as int,
	@sRptPath as varchar(255),
	@sCoreVersion as varchar(10),
	@sPreRunNumber as varchar(50),
	@sIsDownHole as tinyint)

AS
SET NOCOUNT ON

UPDATE Incidents
SET 
	IncidentNumber = @sIncidentNumber,
	FailureDate = @sFailureDate,
	ImportUserID = @sUserID,
	ImportDate = GetDate(),
	RptPath = @sRptPath,
	CoreVersion = @sCoreVersion,
	PreRunNumber = @sPreRunNumber,
	IsDownHole = @sIsDownHole
WHERE IncidentID = @sIncidentID AND CPARId IS NULL

SELECT @sIncidentID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_JobAuditCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_JobAuditCreate] (
	@sJobID as uniqueidentifier,
	@sCoreImportID as uniqueidentifier,
	@sCommentType as varchar(20),
	@sComment as varchar(2000),
	@sCode as varchar(4),
	@iUserID as int)
AS
INSERT INTO JobAudit(JobAuditID, JobID, CoreImportID, CommentType, Comment, Code, CreateUserID, CreateDate)
VALUES 
(
	newid(), @sJobID, @sCoreImportID, @sCommentType, @sComment, @sCode, @iUserID, GetDate()
)

IF (@sCode = '1.10' OR @sCode = '1.11' OR @sCode = '1.12')
BEGIN
DELETE FROM JobAudit WHERE Code = '3.2' AND JobID = @sJobID

UPDATE Jobs SET ImportStatus = 0 WHERE JobID = @sJobID
END

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_LostTimeCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_LostTimeCreate] (
	@sIncidentID as uniqueidentifier,
	@iIsFailure as bit,
	@iIsCustomerImpact as bit,
	@iHours as float,
	@sComments as varchar(3000))

AS
SET NOCOUNT ON

Declare @sLostTimeID uniqueidentifier
Set @sLostTimeID = newid()

INSERT INTO LostTime
VALUES (@sLostTimeID, @sIncidentID, @iIsFailure, @iIsCustomerImpact, @iHours, @sComments)

SELECT @sLostTimeID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_MotorDataCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[usp_Import_MotorDataCreate] (
	@sRunID as uniqueidentifier,
	@sSerialNumber as varchar(50),
	@sMotorSize as float,
	@sMotorSizeUOM as varchar(10),
	@sMotorSetting as varchar(50),
	@sMaxDogleg as float,
	@sMaxDoglegUOM as varchar(15),
	@sMaxDoglegSliding as float,
	@sMaxDoglegSlidingUOM as varchar(15),
	@sOffsetKickpad as bit,
	@sMotorStabilizer as varchar(50),
	@sMotorPressureDrop as float,
	@sMotorPressureDropUOM as varchar(5),
	@sMotorDifferential as float,
	@sMotorDifferentialUOM as varchar(10),
	@sWFEntity as varchar(50),
	@sAHSMaxRecommended as float,
	@sAHSCurrent as float,
	@sClientRep as uniqueidentifier,
	@sWFRep as uniqueidentifier,
	@sMotorNominalSize as float,
	@sMotorNominalSizeUOM as varchar(5),
	@sLength as float,
	@sLengthUOM as varchar(10),
	@sMotorType as varchar(50),
	@sPowerSectionConfiguration as varchar(20),
	@sBearingPackConfiguration as varchar(20),
	@sBitToBend as float,
	@sBitToBendUOM as varchar(5),
	@sAdjustableHousing as varchar(50),
	@sNoLoadRPMFlowUnit as float,
	@sManufacturer as varchar(50)
) 

AS
SET NOCOUNT ON

Declare @sMotorDataID uniqueidentifier
Set @sMotorDataID = newid()

Declare @sToolStringID uniqueidentifier
Set @sToolStringID = (Select ToolStringID From ToolStrings Where IsDeleted = 0 And SerialNumber = @sSerialNumber)

INSERT INTO MotorData (MotorDataID, RunID, SerialNumber, MotorSize, MotorSizeUOM, MotorSetting, MaxDogleg, MaxDoglegUOM, MaxDogLegSliding, MaxDogLegSlidingUOM, OffsetKickpad
	, MotorStabilizer, MotorPressureDrop, MotorPressureDropUOM, MotorDifferential, MotorDifferentialUOM, WFEntity, AHSMaxRecommended, AHSCurrent
	, ClientRep, WFRep, MotorNominalSize, MotorNominalSizeUOM, [Length], LengthUOM, MotorType, PowerSectionConfiguration, BearingPackConfiguration, BitToBend
	, BitToBendUOM, AdjustableHousing, NoLoadRPMFlowUnit, ToolStringID, Manufacturer)
VALUES 
	(@sMotorDataID, @sRunID, @sSerialNumber, @sMotorSize, @sMotorSizeUOM, @sMotorSetting, @sMaxDogleg, @sMaxDoglegUOM, @sMaxDoglegSliding, @sMaxDoglegSlidingUOM, @sOffsetKickpad, @sMotorStabilizer
	, @sMotorPressureDrop, @sMotorPressureDropUOM, @sMotorDifferential, @sMotorDifferentialUOM, @sWFEntity, @sAHSMaxRecommended, @sAHSCurrent, @sClientRep
	, @sWFRep, @sMotorNominalSize, @sMotorNominalSizeUOM, @sLength, @sLengthUOM, @sMotorType, @sPowerSectionConfiguration, @sBearingPackConfiguration, @sBitToBend
	, @sBitToBendUOM, @sAdjustableHousing, @sNoLoadRPMFlowUnit, @sToolStringID, @sManufacturer)

SELECT @sMotorDataID

SET NOCOUNT OFF




GO
/****** Object:  StoredProcedure [dbo].[usp_Import_NonToolComponentInfoMapping]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_Import_NonToolComponentInfoMapping] (
	@sToolStringId as uniqueidentifier,
	@sIncidentId as uniqueidentifier,
	@sSerialNum as varchar(30))

AS
SET NOCOUNT ON

Declare @sToolStringInfoID uniqueidentifier
Set @sToolStringInfoID = newid()

INSERT INTO ToolStringComponentInfo(ToolStringInfoID, ToolStringID, IncidentID, IsUsed, FailedNonPartName, SerialNum)
VALUES (@sToolStringInfoID, @sToolStringID, @sIncidentID, 1 ,'Non Tool Related', @sSerialNum)

SELECT @sToolStringInfoID

SET NOCOUNT OFF




GO
/****** Object:  StoredProcedure [dbo].[usp_Import_PressureSwitchCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_PressureSwitchCreate] (
	@sRunID as uniqueidentifier,
	@sPumps as varchar(20),
	@sDeltaP as float,
	@sDeltaPUOM as varchar(10),
	@sSampleCount as float,
	@sDelay as float,
	@sDelayUOM as varchar(10),
	@sSampleRate as float,
	@sSampleRateUOM as varchar(10),
	@sVibrationSwitch as float) 

AS
SET NOCOUNT ON

Declare @sPressureSwitchId uniqueidentifier
set @sPressureSwitchId = newid()

IF (@sPumps = 'Pumps On')
BEGIN
	INSERT INTO PressureSwitchOnData (PressureSwitchOnDataID, RunID, DeltaP, DeltaPUOM, SampleCount, [Delay], DelayUOM,
		SampleRate, SampleRateUOM, VibrationSwitch)
	VALUES (@sPressureSwitchId, @sRunID, @sDeltaP, @sDeltaPUOM, @sSampleCount,
		@sDelay, @sDelayUOM, @sSampleRate, @sSampleRateUOM, @sVibrationSwitch)
END
ELSE
BEGIN
	INSERT INTO PressureSwitchOffData (PressureSwitchOffDataID, RunID, DeltaP, DeltaPUOM, SampleCount, [Delay], DelayUOM,
		SampleRate, SampleRateUOM, VibrationSwitch)
	VALUES (@sPressureSwitchId, @sRunID, @sDeltaP, @sDeltaPUOM, @sSampleCount,
		@sDelay, @sDelayUOM, @sSampleRate, @sSampleRateUOM, @sVibrationSwitch)
END

SELECT @sPressureSwitchId

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_PulseCountDataCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_PulseCountDataCreate] (
	@sRunID as uniqueidentifier,
	@sToolString varchar(50),
	@sPartTypeID as int,
	@sSensor as varchar(50),
	@sSerialNumber as varchar(50),
	@sPulseCount as varchar(20),
	@sOrificeSize as varchar(20),
	@sOrificeSizeUOM as varchar(10),
	@sPoppetSize as varchar(20),
	@sPoppetSizeUOM as varchar(5),
	@sEOR as varchar(50),
	@sEORUOM as varchar(5),
	@sTotalNumberOfPulses as varchar(20)) 

AS
SET NOCOUNT ON

Declare @sPulseCountDataID uniqueidentifier
Set @sPulseCountDataID = newid()

Declare @sToolStringID uniqueidentifier
Set @sToolStringID = (Select ToolStringID From ToolStrings (NOLOCK) Where SerialNumber = @sToolString and ISNULL(IsDeleted,0) = 0)

Declare @sFixedAssetID uniqueidentifier
Set @sFixedAssetID = (Select Top 1 FixedAssetID From ToolStringFixedAssets (NOLOCK) Where PartTypeID = @sPartTypeID And SerialNum = @sSerialNumber)

INSERT INTO PulseCountData (PulseCountDataID, RunID, Sensor, SerialNumber, PulseCountEnd, OrificeSize, OrificeSizeUOM, PoppetSize, PoppetSizeUOM,
	EOR, EORUOM, TotalNumberOfPulses, ToolStringID, FixedAssetID)
VALUES (@sPulseCountDataID, @sRunID, @sSensor, @sSerialNumber, @sPulseCount, @sOrificeSize, @sOrificeSizeUOM, @sPoppetSize, @sPoppetSizeUOM,
	@sEOR, @sEORUOM, @sTotalNumberOfPulses, @sToolStringID, @sFixedAssetID)

SELECT @sPulseCountDataID

SET NOCOUNT OFF




/****** Object:  StoredProcedure [dbo].[usp_Import_RSSConnectTimeCreate]    Script Date: 08/06/2014 13:38:47 ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_PumpCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_PumpCreate] (
	@sRunID as uniqueidentifier,
	@sModel as varchar(50),
	@sType as varchar(50),
	@sStrokeLength as float,
	@sStrokeLengthUOM as varchar(10),
	@sLinerSize as float,
	@sLinerSizeUOM as varchar(10),
	@sDampenerCharge as float,
	@sDampenerChargeUOM as varchar(10),
	@sDampenerType as varchar(50),
	@sStrokeVolume as float,
	@sStrokeVolumeUOM as varchar(50),
	@sEfficiency as varchar(50),
	@sManufacturer as varchar(50),
	@sDampenerManufacturer as varchar(50),
	@sPressureRating as varchar(20),
	@sPressureRatingUOM as varchar(10))

AS
SET NOCOUNT ON

Declare @sPumpId uniqueidentifier
set @sPumpId = newid()

INSERT INTO Pumps (PumpID, RunID, Model, [Type], StrokeLength, StrokeLengthUOM, LinerSize, LinerSizeUOM, DampenerCharge, DampenerChargeUOM
	, DampenerType, StrokeVolume, StrokeVolumeUOM, Efficiency, Manufacturer, DampenerManufacturer, PressureRating, PressureRatingUOM)
VALUES (@sPumpId, @sRunID, @sModel, @sType, @sStrokeLength, @sStrokeLengthUOM, @sLinerSize, @sLinerSizeUOM, @sDampenerCharge, @sDampenerChargeUOM
	, @sDampenerType, @sStrokeVolume, @sStrokeVolumeUOM, @sEfficiency, @sManufacturer, @sDampenerManufacturer, @sPressureRating, @sPressureRatingUOM)

SELECT @sPumpId

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RentalMotorComponentInfoMapping]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_RentalMotorComponentInfoMapping] (
	@sToolStringId as uniqueidentifier,
	@sFixedAssetId as uniqueidentifier,
	@sSerialNum As varchar(30),
	@sRunId as uniqueidentifier,
	@sIncidentId as uniqueidentifier)

AS
SET NOCOUNT ON

Declare @sToolStringInfoID uniqueidentifier
Set @sToolStringInfoID = newid()

INSERT INTO ToolStringComponentInfo(ToolStringInfoID, ToolStringID, FixedAssetID, SerialNum, RunID, IncidentID, IsUsed, FailedNonPartName)
VALUES (@sToolStringInfoID, @sToolStringID, @sFixedAssetId, @sSerialNum, @sRunID, @sIncidentID, 1 ,'Rental Motor')

SELECT @sToolStringInfoID

SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RSSConnectTimeCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_RSSConnectTimeCreate] (
	@sRunID as uniqueidentifier,
	@sToolString varchar(50),
	@sPartTypeID as int,
	@sBatteryType as varchar(50),
	@sSerialNumber as varchar(50),
	@sBatteryInsert as datetime,
	@sBatteryInitialized as datetime,
	@sToolRead as datetime,
	@sConnectToHEL as datetime) 

AS
SET NOCOUNT ON

Declare @sRSSConnectTimeID uniqueidentifier
Set @sRSSConnectTimeID = newid()

Declare @sToolStringID uniqueidentifier
Set @sToolStringID = (Select ToolStringID From ToolStrings (NOLOCK) Where SerialNumber = @sToolString)

Declare @sFixedAssetID uniqueidentifier
Set @sFixedAssetID = (Select Top 1 FixedAssetID From ToolStringFixedAssets (NOLOCK) Where PartTypeID = @sPartTypeID And SerialNum = @sSerialNumber)

INSERT INTO RSSConnectTimes (RSSConnectTimeID, RunID, ToolStringSN, BatteryType, SerialNumber, BatteryInsert, BatteryInitialized
	, ToolRead, ConnectToHEL, ToolStringID, FixedAssetID)
VALUES (@sRSSConnectTimeID, @sRunID, @sToolString, @sBatteryType, @sSerialNumber, @sBatteryInsert, @sBatteryInitialized
	, @sToolRead, @sConnectToHEL, @sToolStringID, @sFixedAssetID)

SELECT @sRSSConnectTimeID

SET NOCOUNT OFF




/****** Object:  StoredProcedure [dbo].[usp_Import_RunV3DataUpdate]    Script Date: 08/06/2014 13:40:24 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunActivityCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_RunActivityCreate](
	@sRunID as uniqueidentifier,
	@sMDMin as float,
	@sMDMinUOM as varchar(5),
	@sMDMax as float,
	@sMDMaxUOM as varchar(5),
	@sTVDMin as float,
	@sTVDMinUOM as varchar(5),
	@sTVDMax as float,
	@sTVDMaxUOM as varchar(5),
	@sDrillOutofShoe as bit,
	@sMaxBuildRate as float,
	@sMaxBuildRateUOM as varchar(10),
	@sMaxDogLeg as float,
	@sMaxDogLegUOM as varchar(10),
	@sAvgROP_DD as float,
	@sAvgROP_DDUOM as varchar(5),
	@sAvgROP_RSS as float,
	@sAvgROP_RSSUOM as varchar(5), 
	@sGammaRayScaleFactorK1 as float,
	@sBouyancyFactor as float,
	@sWeightInAir as float,
	@sWeightBouyancyFactorApplied as float,
	@sMinStringID as float, 
	@sEstimatedMudWeight as float,
	@sPMTT as float,
	@sPMTTUOM as varchar(5))

AS
 
SET NOCOUNT ON

DECLARE @sRunActivityID as uniqueidentifier
SET @sRunActivityID = newid()

INSERT INTO RunActivity (RunActivityID, RunID, MDMin, MDMinUOM, MDMax, MDMaxUOM, TVDMin, TVDMinUOM, TVDMax, TVDMaxUOM, DrillOutofShoe, 
								MaxBuildRate, MaxBuildRateUOM, MaxDogLeg, MaxDogLegUOM, AvgROP_DD, AvgROP_DDUOM, AvgROP_RSS, AvgROP_RSSUOM, 
								GammaRayScaleFactorK1, BouyancyFactor, WeightInAir, WeightBouyancyFactorApplied, MinStringID, 
								EstimatedMudWeight, PMTT, PMTTUOM)
VALUES (
	@sRunActivityID, @sRunID, @sMDMin, @sMDMinUOM, @sMDMax, @sMDMaxUOM, @sTVDMin, @sTVDMinUOM, @sTVDMax, @sTVDMaxUOM, @sDrillOutofShoe, 
	@sMaxBuildRate, @sMaxBuildRateUOM, @sMaxDogLeg, @sMaxDogLegUOM, @sAvgROP_DD, @sAvgROP_DDUOM, @sAvgROP_RSS, @sAvgROP_RSSUOM, 
	@sGammaRayScaleFactorK1, @sBouyancyFactor, @sWeightInAir, @sWeightBouyancyFactorApplied, @sMinStringID, 
	@sEstimatedMudWeight, @sPMTT, @sPMTTUOM
)

SELECT @sRunActivityID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunActivityUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_RunActivityUpdate](
	@sRunActivityID uniqueidentifier,
	@sMDMin as float,
	@sMDMinUOM as varchar(5),
	@sMDMax as float,
	@sMDMaxUOM as varchar(5),
	@sTVDMin as float,
	@sTVDMinUOM as varchar(5),
	@sTVDMax as float,
	@sTVDMaxUOM as varchar(5),
	@sDrillOutofShoe as bit,
	@sMaxBuildRate as float,
	@sMaxBuildRateUOM as varchar(10),
	@sMaxDogLeg as float,
	@sMaxDogLegUOM as varchar(10),
	@sAvgROP_DD as float,
	@sAvgROP_DDUOM as varchar(5),
	@sAvgROP_RSS as float,
	@sAvgROP_RSSUOM as varchar(5), 
	@sGammaRayScaleFactorK1 as float,
	@sBouyancyFactor as float,
	@sWeightInAir as float,
	@sWeightBouyancyFactorApplied as float,
	@sMinStringID as float, 
	@sEstimatedMudWeight as float,
	@sPMTT as float,
	@sPMTTUOM as varchar(5))

AS
 
SET NOCOUNT ON

UPDATE RunActivity
SET
	MDMin = @sMDMin,
	MDMinUOM = @sMDMinUOM,
	MDMax = @sMDMax,
	MDMaxUOM = @sMDMaxUOM,
	TVDMin = @sTVDMin,
	TVDMinUOM = @sTVDMinUOM,
	TVDMax = @sTVDMax,
	TVDMaxUOM = @sTVDMaxUOM,
	DrillOutofShoe = @sDrillOutofShoe,
	MaxBuildRate = @sMaxBuildRate,
	MaxBuildRateUOM = @sMaxBuildRateUOM,
	MaxDogLeg = @sMaxDogLeg,
	MaxDogLegUOM = @sMaxDogLegUOM,
	AvgROP_DD = @sAvgROP_DD,
	AvgROP_DDUOM = @sAvgROP_DDUOM,
	AvgROP_RSS = @sAvgROP_RSS,
	AvgROP_RSSUOM = @sAvgROP_RSSUOM,
	GammaRayScaleFactorK1 = @sGammaRayScaleFactorK1,
	BouyancyFactor = @sBouyancyFactor,
	WeightInAir = @sWeightInAir,
	WeightBouyancyFactorApplied = @sWeightBouyancyFactorApplied,
	MinStringID = @sMinStringID,
	EstimatedMudWeight = @sEstimatedMudWeight,
	PMTT = @sPMTT,
	PMTTUOM = @sPMTTUOM
WHERE RunActivityID = @sRunActivityID
	
SELECT @sRunActivityID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunBhaJarDetailsCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_RunBhaJarDetailsCreate] (
	@sRunID as uniqueidentifier
	, @sSerialNumber as varchar(50)
	, @sJarHitsRun as int
	, @sNonMag as bit
	, @sOuterDTop as float
	, @sOuterDTopUOM as varchar(5)
	, @sOuterDBottom as float
	, @sOuterDBottomUOM as varchar(5)
	, @sMaxOuterD as float
	, @sMaxOuterDUOM as varchar(5)
	, @sInnerD as float
	, @sInnerDUOM as varchar(5)
	, @sFishNeck as float
	, @sFishNeckUOM as varchar(5)
	, @sLength as float
	, @sLengthUOM as varchar(5)
	, @sJarType as varchar(50)
	, @sJarForceUp as float
	, @sJarForceUpUOM as varchar(10)
	, @sJarForceDown as float
	, @sJarForceDownUOM as varchar(10)
	, @sJarDelay as float
	, @sInitialJarHits as float
	, @sTopConnectionType as varchar(30)
	, @sBottomConnectionType as varchar(30)) 

AS
SET NOCOUNT ON

Declare @sRunBhaJarDetailID uniqueidentifier
Set @sRunBhaJarDetailID = newid()

INSERT INTO RunBhaJarDetails (RunBhaJarDetailID, RunID, SerialNumber, JarHitsRun, NonMag, OuterDTop, OuterDTopUOM, OuterDBottom, OuterDBottomUOM, MaxOuterD, MaxOuterDUOM
	, InnerD, InnerDUOM, FishNeck, FishNeckUOM, [Length], LengthUOM, JarType, JarForceUp, JarForceUpUOM, JarForceDown, JarForceDownUOM, JarDelay
	, InitialJarHits, TopConnectionType, BottomConnectionType)
VALUES 
	(@sRunBhaJarDetailID, @sRunID, @sSerialNumber, @sJarHitsRun, @sNonMag, @sOuterDTop, @sOuterDTopUOM, @sOuterDBottom, @sOuterDBottomUOM, @sMaxOuterD, @sMaxOuterDUOM
	, @sInnerD, @sInnerDUOM, @sFishNeck, @sFishNeckUOM, @sLength, @sLengthUOM, @sJarType, @sJarForceUp, @sJarForceUpUOM, @sJarForceDown, @sJarForceDownUOM
	, @sJarDelay, @sInitialJarHits, @sTopConnectionType, @sBottomConnectionType)

SELECT @sRunBhaJarDetailID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunCommentsCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_RunCommentsCreate](
	@sRunID as uniqueidentifier,
	@sDD_ReasonForPOOH as varchar(2000),
	@sDD_MotorEvaluationComments as varchar(2000),
	@sDD_JarEvaluationComments as varchar(2000),
	@sDD_SideTrackingProcedureComments as varchar(2000),
	@sDD_RunBHASummary as varchar(2000),
	@sDD_SurveyType as varchar(2000),
	@sDD_FormationCharacteristics as varchar(2000),
	@sRSS_ReasonForPOOH as varchar(2000),
	@sRSS_Incident as varchar(2000),
	@sRSS_RunBHASummary as varchar(2000))

AS
 
SET NOCOUNT ON

DECLARE @sRunCommentID as uniqueidentifier
SET @sRunCommentID = newid()

INSERT INTO RunComments (RunCommentID, RunID, DD_ReasonForPOOH, DD_MotorEvaluationComments, DD_JarEvaluationComments, DD_SideTrackingProcedureComments, 
	DD_RunBHASummary, DD_SurveyType, DD_FormationCharacteristics, RSS_ReasonForPOOH, RSS_Incident, RSS_RunBHASummary)
VALUES (
	@sRunCommentID, @sRunID, @sDD_ReasonForPOOH, @sDD_MotorEvaluationComments, @sDD_JarEvaluationComments, @sDD_SideTrackingProcedureComments, 
	@sDD_RunBHASummary, @sDD_SurveyType, @sDD_FormationCharacteristics, @sRSS_ReasonForPOOH, @sRSS_Incident, @sRSS_RunBHASummary
)

SELECT @sRunCommentID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunCommentsUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_RunCommentsUpdate](
	@sRunCommentID uniqueidentifier,
	@sDD_ReasonForPOOH as varchar(2000),
	@sDD_MotorEvaluationComments as varchar(2000),
	@sDD_JarEvaluationComments as varchar(2000),
	@sDD_SideTrackingProcedureComments as varchar(2000),
	@sDD_RunBHASummary as varchar(2000),
	@sDD_SurveyType as varchar(2000),
	@sDD_FormationCharacteristics as varchar(2000),
	@sRSS_ReasonForPOOH as varchar(2000),
	@sRSS_Incident as varchar(2000),
	@sRSS_RunBHASummary as varchar(2000))

AS
 
SET NOCOUNT ON

UPDATE RunComments
SET
	DD_ReasonForPOOH = @sDD_ReasonForPOOH,
	DD_MotorEvaluationComments = @sDD_MotorEvaluationComments,
	DD_JarEvaluationComments = @sDD_JarEvaluationComments,
	DD_SideTrackingProcedureComments = @sDD_SideTrackingProcedureComments,
	DD_RunBHASummary = @sDD_RunBHASummary,
	DD_SurveyType = @sDD_SurveyType,
	DD_FormationCharacteristics = @sDD_FormationCharacteristics,
	RSS_ReasonForPOOH = @sRSS_ReasonForPOOH,
	RSS_Incident = @sRSS_Incident,
	RSS_RunBHASummary = @sRSS_RunBHASummary
WHERE RunCommentID = @sRunCommentID
	
SELECT @sRunCommentID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_RunCreate](
		@sWellID uniqueidentifier, @sRunNumber as varchar(50), @sReportNumber as varchar(50), @sBHANumber as varchar(50), @sBHAType as varchar(20), @sSectionType as varchar(15), @sHoleSize as varchar(20), @sHoleSizeUOM as varchar(5),
		@sStartDate as datetime, @sEndDate as datetime, @sRecordedLogPercentage as varchar(20), @sRealtimeLogPercentage as varchar(20), @sDistanceWiped as varchar(20), @sDistanceWipedUOM as varchar(10),
		@sStartLogDate as datetime, @sEndLogDate as datetime, @sReasonsForPooh as text, @sComments as text, @sClientComments as text, @sServiceType as varchar(100),
		@sMDStart as varchar(50), @sMDStartUOM as varchar(10), @sMDEnd as varchar(50), @sMDEndUOM as varchar(10), @sTVDStart as varchar(50), @sTVDStartUOM as varchar(10),
		@sTVDEnd as varchar(50), @sTVDEndUOM as varchar(10), @sDrillHrs as varchar(50), @sEMReamingHrs as varchar(50), @sRotatingHrs as varchar(50), @sCircHrs as varchar(50),
		@sAverageROP as varchar(20), @sAverageROPUOM as varchar(10), @sFormation as varchar(20), @sOperHrs as varchar(50), 
		@DrillOutCasingShoe as varchar(20), @ShoeWeight as varchar(20), @ShoeWeightUOM as varchar(20), @ShoeLength as varchar(20), @ShoeLengthUOM as varchar(20), 
		@TypeCasingShoe as varchar(20), @iIsDownHole as tinyint, @sImportUserID as int, @sFileName as varchar(255))

AS
 
SET NOCOUNT ON

DECLARE @sRunID as uniqueidentifier
SET @sRunID = newid()

INSERT INTO Runs (RunID, WellID, RunNumber, ReportNumber, BHANumber, BHAType, SectionType, HoleSize, HoleSizeUOM, StartDate, EndDate, RecordedLogPercentage, RealtimeLogPercentage, DistanceWiped, DistanceWipedUOM, 
						 StartLogDate, EndLogDate, ReasonsForPooh, Comments, ClientComments, ServiceType, MDStart, MDStartUOM, MDEnd, MDEndUOM, TVDStart, TVDStartUOM, 
						 TVDEnd, TVDEndUOM, DrillHrs, EMReamingHrs, RotatingHrs, CircHrs, AverageROP, AverageROPUOM, Formation, OperHrs, 
						 DrillOutCasingShoe, ShoeWeight, ShoeWeightUOM, ShoeLength, ShoeLengthUOM, TypeCasingShoe,
						 IsDownHole, ImportUserID, ImportDate, RptPath, ProductLineId)
VALUES (
	@sRunID, @sWellID, @sRunNumber, @sReportNumber, @sBHANumber, @sBHAType, @sSectionType, @sHoleSize, @sHoleSizeUOM, @sStartDate, @sEndDate, @sRecordedLogPercentage, @sRealtimeLogPercentage, @sDistanceWiped, @sDistanceWipedUOM, 
	@sStartLogDate, @sEndLogDate, @sReasonsForPooh, @sComments, @sClientComments, @sServiceType, @sMDStart, @sMDStartUOM, @sMDEnd, @sMDEndUOM, @sTVDStart, @sTVDStartUOM, 
	@sTVDEnd, @sTVDEndUOM, @sDrillHrs, @sEMReamingHrs, @sRotatingHrs, @sCircHrs, @sAverageROP, @sAverageROPUOM, @sFormation, @sOperHrs, 
	@DrillOutCasingShoe, @ShoeWeight, @ShoeWeightUOM, @ShoeLength, @ShoeLengthUOM, @TypeCasingShoe, @iIsDownHole, @sImportUserID, GetDate(), @sFileName, 1
)

SELECT @sRunID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunDrillingCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_RunDrillingCreate](
	@sRunID as uniqueidentifier, 
	@sSurfaceTorqueStart as float,
	@sSurfaceTorqueEnd as float,
	@sSurfaceTorqueMin as float,
	@sSurfaceTorqueMax as float,
	@sSurfaceTorqueUOM as varchar(10),
	@sSurfaceRPMStart as float,
	@sSurfaceRPMEnd as float,
	@sSurfaceRPMMin as float,
	@sSurfaceRPMMax as float,
	@sWOBSlidingStart as float,
	@sWOBSlidingEnd as float,
	@sWOBSlidingMin as float,
	@sWOBSlidingMax as float,
	@sWOBSlidingUOM as varchar(10),
	@sWOBRotatingStart as float,
	@sWOBRotatingEnd as float,
	@sWOBRotatingMin as float,
	@sWOBRotatingMax as float,
	@sWOBRotatingUOM as varchar(10),
	@sStringWeightRotatingStart as float,
	@sStringWeightRotatingEnd as float,
	@sStringWeightRotatingMin as float,
	@sStringWeightRotatingMax as float,
	@sStringWeightRotatingUOM as varchar(10),
	@sStringWeightPickupStart as float,
	@sStringWeightPickupEnd as float,
	@sStringWeightPickupMin as float,
	@sStringWeightPickupMax as float,
	@sStringWeightPickupUOM as varchar(10),
	@sStringWeightSlackoffStart as float,
	@sStringWeightSlackoffEnd as float,
	@sStringWeightSlackoffMin as float,
	@sStringWeightSlackoffMax as float,
	@sStringWeightSlackoffUOM as varchar(10),
	@sRPMMotorStart as float,
	@sRPMMotorEnd as float,
	@sRPMMotorMin as float,
	@sRPMMotorMax as float,
	@sTorqueReamStart as float,
	@sTorqueReamEnd as float,
	@sTorqueReamMin as float,
	@sTorqueReamMax as float,
	@sTorqueReamUOM as varchar(10)
)

AS
 
SET NOCOUNT ON

DECLARE @sRunDrillingID as uniqueidentifier
SET @sRunDrillingID = newid()

INSERT INTO RunDrilling (RunDrillingID, RunID, SurfaceTorqueStart, SurfaceTorqueEnd, SurfaceTorqueMin, SurfaceTorqueMax, SurfaceTorqueUOM
	, SurfaceRPMStart, SurfaceRPMEnd, SurfaceRPMMin, SurfaceRPMMax, WOBSlidingStart, WOBSlidingEnd, WOBSlidingMin, WOBSlidingMax, WOBSlidingUOM
	, WOBRotatingStart, WOBRotatingEnd, WOBRotatingMin, WOBRotatingMax, WOBRotatingUOM, StringWeightRotatingStart, StringWeightRotatingEnd, StringWeightRotatingMin
	, StringWeightRotatingMax, StringWeightRotatingUOM, StringWeightPickupStart, StringWeightPickupEnd, StringWeightPickupMin, StringWeightPickupMax, StringWeightPickupUOM
	, StringWeightSlackoffStart, StringWeightSlackoffEnd, StringWeightSlackoffMin, StringWeightSlackoffMax, StringWeightSlackoffUOM, RPMMotorStart, RPMMotorEnd
	, RPMMotorMin, RPMMotorMax, TorqueReamStart, TorqueReamEnd, TorqueReamMin, TorqueReamMax, TorqueReamUOM

)
VALUES (@sRunDrillingID, @sRunID, @sSurfaceTorqueStart, @sSurfaceTorqueEnd, @sSurfaceTorqueMin, @sSurfaceTorqueMax, @sSurfaceTorqueUOM
	, @sSurfaceRPMStart, @sSurfaceRPMEnd, @sSurfaceRPMMin, @sSurfaceRPMMax, @sWOBSlidingStart, @sWOBSlidingEnd, @sWOBSlidingMin, @sWOBSlidingMax, @sWOBSlidingUOM
	, @sWOBRotatingStart, @sWOBRotatingEnd, @sWOBRotatingMin, @sWOBRotatingMax, @sWOBRotatingUOM, @sStringWeightRotatingStart, @sStringWeightRotatingEnd, @sStringWeightRotatingMin
	, @sStringWeightRotatingMax, @sStringWeightRotatingUOM, @sStringWeightPickupStart, @sStringWeightPickupEnd, @sStringWeightPickupMin, @sStringWeightPickupMax, @sStringWeightPickupUOM
	, @sStringWeightSlackoffStart, @sStringWeightSlackoffEnd, @sStringWeightSlackoffMin, @sStringWeightSlackoffMax, @sStringWeightSlackoffUOM, @sRPMMotorStart, @sRPMMotorEnd
	, @sRPMMotorMin, @sRPMMotorMax, @sTorqueReamStart, @sTorqueReamEnd, @sTorqueReamMin, @sTorqueReamMax, @sTorqueReamUOM
)

SELECT @sRunDrillingID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunEMCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_Import_RunEMCreate](
	@sRunID as uniqueidentifier, 
	@sExtendedRangeRun as varchar(20),
	@sExtendedRangeCableLength as float,
	@sExtendedRangeCableLengthUOM as varchar(10),
	@sTransceiverSNEnd as varchar(20),
	@sDrillingStart as datetime,
	@sDrillingEnd as datetime,
	@sSignalLevelStart as float,
	@sSignalLevelStartUOM as varchar(10),
	@sSignalLevelEnd as float,
	@sSignalLevelEndUOM as varchar(10),
	@sNoiseLevelStart as float,
	@sNoiseLevelStartUOM as varchar(10),
	@sNoiseLevelEnd as float,
	@sNoiseLevelEndUOM as varchar(10),
	@sEmittingCurrentStart as float,
	@sEmittingCurrentStartUOM as varchar(10),
	@sEmittingCurrentEnd as float,
	@sEmittingCurrentEndUOM as varchar(10),
	@sMainGroundStart as varchar(20),
	@sMainGroundEnd as varchar(20),
	@sReceptionStart as varchar(20),
	@sReceptionEnd as varchar(20),
	@sMainGroundVoltageStart as float,
	@sMainGroundVoltageStartUOM as varchar(10),
	@sMainGroundVoltageEnd as float,
	@sMainGroundVoltageEndUOM as varchar(10),
	@sMainGroundCurrentStart as float,
	@sMainGroundCurrentStartUOM as varchar(10),
	@sMainGroundCurrentEnd as float,
	@sMainGroundCurrentEndUOM as varchar(10),
	@sMainGroundResistanceStart as float,
	@sMainGroundResistanceStartUOM as varchar(10),
	@sMainGroundResistanceEnd as float,
	@sMainGroundResistanceEndUOM as varchar(10),
	@sConnectMWD as datetime,
	@sDisconnectMWD as datetime,
	@sConnectGammaRay as datetime,
	@sDisconnectGammaRay as datetime,
	@sGammaRayScaleFactorK1 as varchar(20),
	@sConnectCSGX as datetime,
	@sDisconnectCSGX as datetime,
	@sTransceiverSNStart as varchar(20),
	@sReceptionStartOther as varchar(20),
	@sReceptionEndOther as varchar(20),
	@sConnectGabis as datetime,
	@sDisconnectGabis as datetime,
	@sMainGroundStartOther as varchar(20),
	@sMainGroundEndOther as varchar(20)
)

AS
 
SET NOCOUNT ON

DECLARE @sRunEMDataID as uniqueidentifier
SET @sRunEMDataID = newid()

INSERT INTO RunEMData (RunEMDataID, RunID, ExtendedRangeRun, ExtendedRangeCableLength, ExtendedRangeCableLengthUOM, TransceiverSNEnd, DrillingStart, DrillingEnd
	, SignalLevelStart, SignalLevelStartUOM, SignalLevelEnd, SignalLevelEndUOM, NoiseLevelStart, NoiseLevelStartUOM, NoiseLevelEnd, NoiseLevelEndUOM, EmittingCurrentStart
	, EmittingCurrentStartUOM, EmittingCurrentEnd, EmittingCurrentEndUOM, MainGroundStart, MainGroundEnd, ReceptionStart, ReceptionEnd, MainGroundVoltageStart, MainGroundVoltageStartUOM
	, MainGroundVoltageEnd, MainGroundVoltageEndUOM, MainGroundCurrentStart, MainGroundCurrentStartUOM, MainGroundCurrentEnd, MainGroundCurrentEndUOM, MainGroundResistanceStart
	, MainGroundResistanceStartUOM, MainGroundResistanceEnd, MainGroundResistanceEndUOM
	, ConnectMWD, DisconnectMWD, ConnectGammaRay, DisconnectGammaRay, GammaRayScaleFactorK1, ConnectCSGX, DisconnectCSGX
	, TransceiverSNStart, ReceptionStartOther, ReceptionEndOther, ConnectGabis, DisconnectGabis, MainGroundStartOther, MainGroundEndOther
)
VALUES (@sRunEMDataID, @sRunID, @sExtendedRangeRun, @sExtendedRangeCableLength, @sExtendedRangeCableLengthUOM, @sTransceiverSNEnd, @sDrillingStart, @sDrillingEnd
	, @sSignalLevelStart, @sSignalLevelStartUOM, @sSignalLevelEnd, @sSignalLevelEndUOM, @sNoiseLevelStart, @sNoiseLevelStartUOM, @sNoiseLevelEnd, @sNoiseLevelEndUOM
	, @sEmittingCurrentStart, @sEmittingCurrentStartUOM, @sEmittingCurrentEnd, @sEmittingCurrentEndUOM, @sMainGroundStart, @sMainGroundEnd, @sReceptionStart, @sReceptionEnd
	, @sMainGroundVoltageStart, @sMainGroundVoltageStartUOM, @sMainGroundVoltageEnd, @sMainGroundVoltageEndUOM, @sMainGroundCurrentStart, @sMainGroundCurrentStartUOM, @sMainGroundCurrentEnd
	, @sMainGroundCurrentEndUOM, @sMainGroundResistanceStart, @sMainGroundResistanceStartUOM, @sMainGroundResistanceEnd, @sMainGroundResistanceEndUOM
	, @sConnectMWD, @sDisconnectMWD, @sConnectGammaRay, @sDisconnectGammaRay, @sGammaRayScaleFactorK1, @sConnectCSGX, @sDisconnectCSGX
	, @sTransceiverSNStart, @sReceptionStartOther, @sReceptionEndOther, @sConnectGabis, @sDisconnectGabis, @sMainGroundStartOther, @sMainGroundEndOther
)

SELECT @sRunEMDataID

SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunEngineerCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_RunEngineerCreate] (
	@sRunID as uniqueidentifier,
	@sDailyID as uniqueidentifier,
	@sFirstName as varchar(50),
	@sLastName as varchar(50),
	@sIsLead as bit,
	@sDescription as varchar(50),
	@sProductLine as varchar(30),
	@sCoreID as varchar(10)) 

AS
SET NOCOUNT ON

Declare @EngId uniqueidentifier
set @EngId = newid()

INSERT INTO EngineersOnDuty (EmpID, RunID, DailyID, FirstName, LastName, IsLead, [Description], ProductLine, CoreID)
VALUES (@EngId,	@sRunID, @sDailyID, @sFirstName, @sLastName, @sIsLead, @sDescription, @sProductLine, @sCoreID)

SELECT @EngId

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunHydraulicsCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_Import_RunHydraulicsCreate](
	@sRunID as uniqueidentifier 
	, @sDeltaPTotalStart as float
	, @sDeltaPTotalEnd as float
	, @sDeltaPTotalMin as float
	, @sDeltaPTotal as float
	, @sDeltaPTotalUOM as varchar(10)
	, @sDeltaPBitStart as float
	, @sDeltaPBitEnd as float
	, @sDeltaPBitMin as float
	, @sDeltaPBitMax as float
	, @sDeltaPBitUOM as varchar(10)
	, @sHydroPressureStart as float
	, @sHydroPressureEnd as float
	, @sHydroPressureMin as float
	, @sMaxPressure as float
	, @sMaxPressureUOM as varchar(10)
	, @sMaxOperPressureStart as float
	, @sMaxOperPressureEnd as float
	, @sMaxOperPressureMin as float
	, @sMaxOperPressure as float
	, @sMaxOperPressureUOM as varchar(10)
	, @sMaxObservedPressureStart as float
	, @sMaxObservedPressureEnd as float
	, @sMaxObservedPressureMin as float
	, @sMaxObservedPressure as float
	, @sMaxObservedPressureUOM as varchar(10)
	, @sSPPOnBottomStart as float
	, @sSPPOnBottomEnd as float
	, @sSPPOnBottomMin as float
	, @sSPP as float
	, @sSPPUOM as varchar(10)
	, @sSPPOffBottomStart as float
	, @sSPPOffBottomEnd as float
	, @sSPPOffBottomMin as float
	, @sSPPOffBottomMax as float
	, @sSPPOffBottomUOM as varchar(10)
	, @sDifferentialPressureStart as float
	, @sDifferentialPressureEnd as float
	, @sDifferentialPressureMin as float
	, @sDifferentialPressureMax as float
	, @sDifferentialPressureUOM as varchar(10)
	, @sGasFlowRateStart as float
	, @sGasFlowRateEnd as float
	, @sGasFlowRateMin as float
	, @sGasFlowRate as float
	, @sGasFlowRateUOM as varchar(10)
	, @sFlowRateStart as float
	, @sFlowRateEnd as float
	, @sFlowRateMin as float
	, @sFlowRate as float
	, @sFlowRateUOM as varchar(10)
	, @sOrientingFRStart as float
	, @sOrientingFREnd as float
	, @sOrientingFRMin as float
	, @sOrientingFRMax as float
	, @sOrientingFRUOM as varchar(10)
	, @sRotatingFRStart as float
	, @sRotatingFREnd as float
	, @sRotatingFRMin as float
	, @sRotatingFRMax as float
	, @sRotatingFRUOM as varchar(10)
	, @sRotaryFRStart as float
	, @sRotaryFREnd as float
	, @sRotaryFRMin as float
	, @sRotaryFRMax as float
	, @sRotaryFRUOM as varchar(10)
	, @sDrillingFRStart as float
	, @sDrillingFREnd as float
	, @sDrillingFRMin as float
	, @sDrillingFRMax as float
	, @sDrillingFRUOM as varchar(10)
	, @sPulseAmplitudeObservedStart as float
	, @sPulseAmplitudeObservedEnd as float
	, @sPulseAmplitudeObservedMin as float
	, @sPulseAmplitude as float
	, @sPulseAmplitudeUOM as varchar(10)
	, @sAnnularVelocityStart as float
	, @sAnnularVelocityEnd as float
	, @sAnnularVelocityMin as float
	, @sAnnularVelocityMax as float
	, @sAnnularVelocityUOM as varchar(10)
	, @sCriticalVelocityStart as float
	, @sCriticalVelocityEnd as float
	, @sCriticalVelocityMin as float
	, @sCriticalVelocityMax as float
	, @sCriticalVelocityUOM as varchar(10)
	, @sDetectionStart as float
	, @sDetectionEnd as float
	, @sDetectionMin as float
	, @sDetectionPercentage as float
	, @sStrokeRateStart as float
	, @sStrokeRateEnd as float
	, @sStrokeRateMin as float
	, @sStrokes as float
	, @sStrokesUOM as varchar(10)
	, @sUnderBalancedStart as varchar(3)
	, @sUnderBalanced as varchar(3)
	, @sPulseAmplitudeDownholeStart as float
	, @sPulseAmplitudeDownholeEnd as float
	, @sPulseAmplitudeDownholeMin as float
	, @sPulseAmplitudeDownhole as float
	, @sPulseAmplitudeDownholeUOM as varchar(10)
	, @sOrificeSize as float
	, @sOrificSizeUOM as varchar(5)
	, @sOrificeSizeCanadian as float
	, @sOrificSizeCanadianUOM as varchar(5)
	, @sMotorBend as float
	, @sMotorBendUOM as varchar(10)
	, @sRSSRevolutions as float
	, @sRSSRevolutionsUOM as varchar(10)
)

AS
 
SET NOCOUNT ON

DECLARE @sHydraulicID as uniqueidentifier
SET @sHydraulicID = newid()

INSERT INTO Hydraulics (HydraulicID, RunID
	, DeltaPTotalStart, DeltaPTotalEnd, DeltaPTotalMin, DeltaPTotal, DeltaPTotalUOM
	, DeltaPBitStart, DeltaPBitEnd, DeltaPBitMin, DeltaPBitMax, DeltaPBitUOM
	, HydroPressureStart, HydroPressureEnd, HydroPressureMin, MaxPressure, MaxPressureUOM
	, MaxOperPressureStart, MaxOperPressureEnd, MaxOperPressureMin, MaxOperPressure, MaxOperPressureUOM
	, MaxObservedPressureStart, MaxObservedPressureEnd, MaxObservedPressureMin, MaxObservedPressure, MaxObservedPressureUOM
	, SPPOnBottomStart, SPPOnBottomEnd, SPPOnBottomMin, SPP, SPPUOM
	, SPPOffBottomStart, SPPOffBottomEnd, SPPOffBottomMin, SPPOffBottomMax, SPPOffBottomUOM
	, DifferentialPressureStart, DifferentialPressureEnd, DifferentialPressureMin, DifferentialPressureMax, DifferentialPressureUOM
	, GasFlowRateStart, GasFlowRateEnd, GasFlowRateMin, GasFlowRate, GasFlowRateUOM
	, FlowRateStart, FlowRateEnd, FlowRateMin, FlowRate, FlowRateUOM
	, OrientingFRStart, OrientingFREnd, OrientingFRMin, OrientingFRMax, OrientingFRUOM
	, RotatingFRStart, RotatingFREnd, RotatingFRMin, RotatingFRMax, RotatingFRUOM
	, RotaryFRStart, RotaryFREnd, RotaryFRMin, RotaryFRMax, RotaryFRUOM
	, DrillingFRStart, DrillingFREnd, DrillingFRMin, DrillingFRMax, DrillingFRUOM
	, PulseAmplitudeObservedStart, PulseAmplitudeObservedEnd, PulseAmplitudeObservedMin, PulseAmplitude, PulseAmplitudeUOM
	, AnnularVelocityStart, AnnularVelocityEnd, AnnularVelocityMin, AnnularVelocityMax, AnnularVelocityUOM
	, CriticalVelocityStart, CriticalVelocityEnd, CriticalVelocityMin, CriticalVelocityMax, CriticalVelocityUOM
	, DetectionStart, DetectionEnd, DetectionMin, DetectionPercentage
	, StrokeRateStart, StrokeRateEnd, StrokeRateMin, Strokes, StrokesUOM
	, UnderBalancedStart, UnderBalanced
	, PulseAmplitudeDownholeStart, PulseAmplitudeDownholeEnd, PulseAmplitudeDownholeMin, PulseAmplitudeDownhole, PulseAmplitudeDownholeUOM
	, Orifice, OrificeUOM, OrificeSizeCanadian, OrificeSizeCanadianUOM
	, MotorBend, MotorBendUOM, RSSRevolutions, RSSRevolutionsUOM)
VALUES (@sHydraulicID, @sRunID
	, @sDeltaPTotalStart, @sDeltaPTotalEnd, @sDeltaPTotalMin, @sDeltaPTotal, @sDeltaPTotalUOM
	, @sDeltaPBitStart, @sDeltaPBitEnd, @sDeltaPBitMin, @sDeltaPBitMax, @sDeltaPBitUOM
	, @sHydroPressureStart, @sHydroPressureEnd, @sHydroPressureMin, @sMaxPressure, @sMaxPressureUOM
	, @sMaxOperPressureStart, @sMaxOperPressureEnd, @sMaxOperPressureMin, @sMaxOperPressure, @sMaxOperPressureUOM
	, @sMaxObservedPressureStart, @sMaxObservedPressureEnd, @sMaxObservedPressureMin, @sMaxObservedPressure, @sMaxObservedPressureUOM
	, @sSPPOnBottomStart, @sSPPOnBottomEnd, @sSPPOnBottomMin, @sSPP, @sSPPUOM
	, @sSPPOffBottomStart, @sSPPOffBottomEnd, @sSPPOffBottomMin, @sSPPOffBottomMax, @sSPPOffBottomUOM
	, @sDifferentialPressureStart, @sDifferentialPressureEnd, @sDifferentialPressureMin, @sDifferentialPressureMax, @sDifferentialPressureUOM
	, @sGasFlowRateStart, @sGasFlowRateEnd, @sGasFlowRateMin, @sGasFlowRate, @sGasFlowRateUOM
	, @sFlowRateStart, @sFlowRateEnd, @sFlowRateMin, @sFlowRate, @sFlowRateUOM
	, @sOrientingFRStart, @sOrientingFREnd, @sOrientingFRMin, @sOrientingFRMax, @sOrientingFRUOM
	, @sRotatingFRStart, @sRotatingFREnd, @sRotatingFRMin, @sRotatingFRMax, @sRotatingFRUOM
	, @sRotaryFRStart, @sRotaryFREnd, @sRotaryFRMin, @sRotaryFRMax, @sRotaryFRUOM
	, @sDrillingFRStart, @sDrillingFREnd, @sDrillingFRMin, @sDrillingFRMax, @sDrillingFRUOM
	, @sPulseAmplitudeObservedStart, @sPulseAmplitudeObservedEnd, @sPulseAmplitudeObservedMin, @sPulseAmplitude, @sPulseAmplitudeUOM
	, @sAnnularVelocityStart, @sAnnularVelocityEnd, @sAnnularVelocityMin, @sAnnularVelocityMax, @sAnnularVelocityUOM
	, @sCriticalVelocityStart, @sCriticalVelocityEnd, @sCriticalVelocityMin, @sCriticalVelocityMax, @sCriticalVelocityUOM
	, @sDetectionStart, @sDetectionEnd, @sDetectionMin, @sDetectionPercentage
	, @sStrokeRateStart, @sStrokeRateEnd, @sStrokeRateMin, @sStrokes, @sStrokesUOM
	, @sUnderBalancedStart, @sUnderBalanced
	, @sPulseAmplitudeDownholeStart, @sPulseAmplitudeDownholeEnd, @sPulseAmplitudeDownholeMin, @sPulseAmplitudeDownhole, @sPulseAmplitudeDownholeUOM
	, @sOrificeSize, @sOrificSizeUOM, @sOrificeSizeCanadian, @sOrificSizeCanadianUOM
	, @sMotorBend, @sMotorBendUOM, @sRSSRevolutions, 'revs')

SELECT @sHydraulicID

SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunMudDataCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_RunMudDataCreate](
	@sRunID as uniqueidentifier, @sMudTypeStart as varchar(50), @sMudTypeEnd as varchar(50), @sBaseFluidStart as varchar(50), @sBaseFluidEnd as varchar(50), @sGasTypeStart as varchar(50), @sGasTypeEnd as varchar(50), 
	@sDensityStart as float, @sDensityEnd as float, @sDensityMin as float, @sDensityMax as float, @sDensityUnits varchar(10), 
	@sFunnelViscosityStart as float, @sFunnelViscosityEnd as float, @sFunnelViscosityMin as float, @sFunnelViscosityMax as float, @sFunnelViscosityUnits varchar(10), 
	@sWaterLossStart as float, @sWaterLossEnd as float, @sWaterLossMin as float, @sWaterLossMax as float, @sWaterLostUnits varchar(10), 
	@sPVStart as float, @sPVEnd as float, @sPVMin as float, @sPVMax as float, @sPVUnits varchar(10), 
	@sYieldPointStart as float, @sYieldPointEnd as float, @sYieldPointMin as float, @sYieldPointMax as float, @sYieldPointUnits varchar(10), 
	@sBoreHoleTempStart as float, @sBoreHoleTempEnd as float, @sBoreHoleTempMin as float, @sBoreHoleTempMax as float, @sBoreHoleTempUnits varchar(10), 
	@spHStart as float, @spHEnd as float, @spHMin as float, @spHMax as float, 
	@sSandPercentageStart as float, @sSandPercentageEnd as float, @sSandPercentageMin as float, @sSandPercentageMax as float, 
	@sSolidPercentageStart as float, @sSolidPercentageEnd as float, @sSolidPercentageMin as float, @sSolidPercentageMax as float, 
	@sOilPercentageStart as float, @sOilPercentageEnd as float, @sOilPercentMin as float, @sOilPercentMax as float, 
	@sWaterPercentageStart as float, @sWaterPercentageEnd as float, @sWaterPercentMin as float, @sWaterPercentMax as float, 
	@sLCMStart as float, @sLCMEnd as float, @sLCMMin as float, @sLCMMax as float, @sLCMUnits varchar(10), 
	@sLCMTypeGradeStart as varchar(50), @sLCMTypeGradeEnd as varchar(50), @sGELStart as float, @sGELEnd as float, @sGELMin as float, @sGELMax as float, @sGELUnits varchar(10), 
	@sKClStart as float, @sKClEnd as float, @sKClMin as float, @sKClMax as float, @sKClUnits varchar(10), 
	@sNaClStart as float, @sNaClEnd as float, @sNaClMin as float, @sNaClMax as float, @sNaClUnits varchar(10), 
	@sCaClStart as float, @sCaClEnd as float, @sCaClMin as float, @sCaClMax as float, @sCaClUnits varchar(10), 
	@sTotalChloridesStart as float, @sTotalChloridesEnd as float, @sTotalChloridesMin as float, @sTotalChloridesMax as float, @sTotalChloridesUnits varchar(10), 
	@sEqvNaClStart as float, @sEqvNaClEnd as float, @sEqvNaClMin as float, @sEqvNaClMax as float, @sEqvNaClUnits varchar(10)
)

AS
 
SET NOCOUNT ON

DECLARE @sMudDataID as uniqueidentifier
SET @sMudDataID = newid()

INSERT INTO MudData (MudDataID, RunID, MudTypeStart, MudTypeEnd, BaseFluidStart, BaseFluidEnd, GasTypeStart, GasTypeEnd, DensityStart, DensityEnd, DensityMin, DensityMax, DensityUnits, 
	FunnelViscosityStart, FunnelViscosityEnd, FunnelViscosityMin, FunnelViscosityMax, FunnelViscosityUnits, WaterLossStart, WaterLossEnd, WaterLossMin, WaterLossMax, WaterLostUnits, 
	PVStart, PVEnd, PVMin, PVMax, PVUnits, YieldPointStart, YieldPointEnd, YieldPointMin, YieldPointMax, YieldPointUnits, BoreHoleTempStart, BoreHoleTempEnd, BoreHoleTempMin, BoreHoleTempMax, BoreHoleTempUnits, 
	pHStart, pHEnd, pHMin, pHMax, SandPercentageStart, SandPercentageEnd, SandPercentageMin, SandPercentageMax, SolidPercentageStart, SolidPercentageEnd, SolidPercentageMin, SolidPercentageMax, 
	OilPercentageStart, OilPercentageEnd, OilPercentageMin, OilPercentageMax, WaterPercentageStart, WaterPercentageEnd, WaterPercentageMin, WaterPercentageMax, 
	LCMStart, LCMEnd, LCMMin, LCMMax, LCMUnits, LCMTypeGradeStart, LCMTypeGradeEnd, GELStart, GELEnd, GELMin, GELMax, GELUnits, KClStart, KClEnd, KClMin, KClMax, KClUnits, NaClStart, NaClEnd, 
	NaClMin, NaClMax, NaClUnits, CaClStart, CaClEnd, CaClMin, CaClMax, CaClUnits, TotalChloridesStart, TotalChloridesEnd, TotalChloridesMin, TotalChloridesMax, TotalChloridesUnits, 
	EqvNaClStart, EqvNaClEnd, EqvNaClMin, EqvNaClMax, EqvNaClUnits)
VALUES (@sMudDataID, @sRunID, @sMudTypeStart, @sMudTypeEnd, @sBaseFluidStart, @sBaseFluidEnd, @sGasTypeStart, @sGasTypeEnd, @sDensityStart, @sDensityEnd, @sDensityMin, @sDensityMax, @sDensityUnits
	, @sFunnelViscosityStart, @sFunnelViscosityEnd, @sFunnelViscosityMin, @sFunnelViscosityMax, @sFunnelViscosityUnits, @sWaterLossStart, @sWaterLossEnd, @sWaterLossMin, @sWaterLossMax, @sWaterLostUnits
	, @sPVStart, @sPVEnd, @sPVMin, @sPVMax, @sPVUnits, @sYieldPointStart, @sYieldPointEnd, @sYieldPointMin, @sYieldPointMax, @sYieldPointUnits, @sBoreHoleTempStart, @sBoreHoleTempEnd, @sBoreHoleTempMin, @sBoreHoleTempMax, @sBoreHoleTempUnits
	, @spHStart, @spHEnd, @spHMin, @spHMax, @sSandPercentageStart, @sSandPercentageEnd, @sSandPercentageMin, @sSandPercentageMax, @sSolidPercentageStart, @sSolidPercentageEnd, @sSolidPercentageMin, @sSolidPercentageMax
	, @sOilPercentageStart, @sOilPercentageEnd, @sOilPercentMin, @sOilPercentMax, @sWaterPercentageStart, @sWaterPercentageEnd, @sWaterPercentMin, @sWaterPercentMax, @sLCMStart, @sLCMEnd, @sLCMMin, @sLCMMax, @sLCMUnits
	, @sLCMTypeGradeStart, @sLCMTypeGradeEnd, @sGELStart, @sGELEnd, @sGELMin, @sGELMax, @sGELUnits, @sKClStart, @sKClEnd, @sKClMin, @sKClMax, @sKClUnits, @sNaClStart, @sNaClEnd, @sNaClMin, @sNaClMax, @sNaClUnits
	, @sCaClStart, @sCaClEnd, @sCaClMin, @sCaClMax, @sCaClUnits, @sTotalChloridesStart, @sTotalChloridesEnd, @sTotalChloridesMin, @sTotalChloridesMax, @sTotalChloridesUnits
	, @sEqvNaClStart, @sEqvNaClEnd, @sEqvNaClMin, @sEqvNaClMax, @sEqvNaClUnits)

SELECT @sMudDataID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunMudDataRmCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_RunMudDataRmCreate](
	@sRunID as uniqueidentifier, 
	@sRmAtTempStart as float,
	@sRmAtTempEnd as float,
	@sRmAtTempMin as float,
	@sRmAtTempMax as float,
	@sRmAtTempUnits as varchar(10),
	@sRmfAtTempStart as float,
	@sRmfAtTempEnd as float,
	@sRmfAtTempMin as float,
	@sRmfAtTempMax as float,
	@sRmfAtTempUnits as varchar(10),
	@sRmcAtTempStart as float,
	@sRmcAtTempEnd as float,
	@sRmcAtTempMin as float,
	@sRmcAtTempMax as float,
	@sRmcAtTempUnits as varchar(10),
	@sRmAtMaxToolTempStart as float,
	@sRmAtMaxToolTempEnd as float,
	@sRmAtMaxToolTempMin as float,
	@sRmAtMaxToolTempMax as float,
	@sRmAtMaxToolTempUnits as varchar(10),
	@sRmStart as float,
	@sRmEnd as float,
	@sRmMin as float,
	@sRmMax as float,
	@sRmUnits as varchar(10),
	@sRmfStart as float,
	@sRmfEnd as float,
	@sRmfMin as float,
	@sRmfMax as float,
	@sRmfUnits as varchar(10),
	@sRmcStart as float,
	@sRmcEnd as float,
	@sRmcMin as float,
	@sRmcMax as float,
	@sRmcUnits as varchar(10),
	@sRmToolStart as float,
	@sRmToolEnd as float,
	@sRmToolMin as float,
	@sRmToolMax as float,
	@sRmToolUnits as varchar(10)
)

AS
 
SET NOCOUNT ON

DECLARE @sMudDataRmID as uniqueidentifier
SET @sMudDataRmID = newid()

INSERT INTO MudDataRm (MudDataRmID, RunID, RmAtTempStart, RmAtTempEnd, RmAtTempMin, RmAtTempMax, RmAtTempUnits, RmfAtTempStart, RmfAtTempEnd, RmfAtTempMin, RmfAtTempMax, RmfAtTempUnits
	, RmcAtTempStart, RmcAtTempEnd, RmcAtTempMin, RmcAtTempMax, RmcAtTempUnits, RmAtMaxToolTempStart, RmAtMaxToolTempEnd, RmAtMaxToolTempMin, RmAtMaxToolTempMax, RmAtMaxToolTempUnits
	, RmStart, RmEnd, RmMin, RmMax, RmUnits, RmfStart, RmfEnd, RmfMin, RmfMax, RmfUnits, RmcStart, RmcEnd, RmcMin, RmcMax, RmcUnits, RmToolStart, RmToolEnd, RmToolMin, RmToolMax, RmToolUnits)
VALUES (@sMudDataRmID, @sRunID, 
dbo.NumCheck(Replace(@sRmAtTempStart,'@','')), 
dbo.NumCheck(Replace(@sRmAtTempEnd,'@','')), 
dbo.NumCheck(Replace(@sRmAtTempMin,'@','')), 
dbo.NumCheck(Replace(@sRmAtTempMax,'@','')), 
@sRmAtTempUnits, 
dbo.NumCheck(Replace(@sRmfAtTempStart,'@','')), 
dbo.NumCheck(Replace(@sRmfAtTempEnd,'@','')), 
dbo.NumCheck(Replace(@sRmfAtTempMin,'@','')), 
dbo.NumCheck(Replace(@sRmfAtTempMax,'@','')), 
@sRmfAtTempUnits, 
dbo.NumCheck(Replace(@sRmcAtTempStart,'@','')), 
dbo.NumCheck(Replace(@sRmcAtTempEnd,'@','')), 
dbo.NumCheck(Replace(@sRmcAtTempMin,'@','')), 
dbo.NumCheck(Replace(@sRmcAtTempMax,'@','')), 
@sRmcAtTempUnits, 
dbo.NumCheck(Replace(@sRmAtMaxToolTempStart,'@','')), 
dbo.NumCheck(Replace(@sRmAtMaxToolTempEnd,'@','')), 
dbo.NumCheck(Replace(@sRmAtMaxToolTempMin,'@','')), 
dbo.NumCheck(Replace(@sRmAtMaxToolTempMax,'@','')), 
@sRmAtMaxToolTempUnits, 
dbo.NumCheck(Replace(@sRmStart,'@','')), 
dbo.NumCheck(Replace(@sRmEnd,'@','')), 
dbo.NumCheck(Replace(@sRmMin,'@','')), 
dbo.NumCheck(Replace(@sRmMax,'@','')), 
@sRmUnits, 
dbo.NumCheck(Replace(@sRmfStart,'@','')), 
dbo.NumCheck(Replace(@sRmfEnd,'@','')), 
dbo.NumCheck(Replace(@sRmfMin,'@','')), 
dbo.NumCheck(Replace(@sRmfMax,'@','')), 
@sRmfUnits, 
dbo.NumCheck(Replace(@sRmcStart,'@','')), 
dbo.NumCheck(Replace(@sRmcEnd,'@','')), 
dbo.NumCheck(Replace(@sRmcMin,'@','')), 
dbo.NumCheck(Replace(@sRmcMax,'@','')), 
@sRmcUnits, 
dbo.NumCheck(Replace(@sRmToolStart,'@','')), 
dbo.NumCheck(Replace(@sRmToolEnd,'@','')), 
dbo.NumCheck(Replace(@sRmToolMin,'@','')), 
dbo.NumCheck(Replace(@sRmToolMax,'@','')), 
@sRmToolUnits)

SELECT @sMudDataRmID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunSurveyDataCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_RunSurveyDataCreate](
	@sRunID as uniqueidentifier,@sMinInc as float,@sMinIncUOM as varchar(5),@sMaxInc as float,@sMaxIncUOM as varchar(5),@sIncIn as float,@sIncInUOM as varchar(5),
	@sIncOut as float,@sIncOutUOM as varchar(5),@sAzimuthIn as float,@sAzimuthInUOM as varchar(5),@sAzimuthOut as float,@sAzimuthOutUOM as varchar(5),
	@sInternalTFO as float,@sInternalTFOUOM as varchar(5),@sDrillCollarOffset as float,@sDrillCollarOffsetUOM as varchar(5),@sTFO as float,@sTFOUOM as varchar(5),
	@sCasingShoe as float,@sCasingShoeUOM as varchar(5),@sTFSwitch as float,@sTFSwitchUOM as varchar(5),@sBtotal as float,@sBtotalUOM as varchar(5),
	@sActualBTotal as float,@sActualBTotalUOM as varchar(5),@sBTotalMin as float,@sBTotalMinUOM as varchar(5),@sBTotalMax as float,@sBTotalMaxUOM as varchar(5),
	@sGtotal as float,@sGtotalUOM as varchar(5),@sActualGTotal as float,@sActualGTotalUOM as varchar(5),@sGTotalMin as float,@sGTotalMinUOM as varchar(5),
	@sGTotalMax as float,@sGTotalMaxUOM as varchar(5),@sMagneticDip as float,@sMagneticDipUOM as varchar(5),@sActualMagneticDip as float,@sActualMagneticDipUOM as varchar(5),
	@sDipMeasuredMin as float,@sDipMeasuredMinUOM as varchar(5),@sDipMeasuredMax as float,@sDipMeasuredMaxUOM as varchar(5),@sGTotalWorst as float,@sGTotalWorstUOM as varchar(5),
	@sBTotalWorst as float,@sBTotalWorstUOM as varchar(5),@sDipWorst as float,@sDipWorstUOM as varchar(5)
	, @sConvergence as float, @sConvergenceUOM as varchar(10), @sDeclination as float, @sDeclinationUOM as varchar(10), @sTargetAzimuth as float
	, @sTargetAzimuthUOM as varchar(10), @sTotalCorrection as float, @sTotalCorrectionUOM as varchar(10), @sVerticalSection as float
	, @sVerticalSectionUOM as varchar(10), @sMagneticDataSource as varchar(20), @sMagneticDataSourceOther as varchar(30)
)

AS
 
SET NOCOUNT ON

DECLARE @sSurveyDataID as uniqueidentifier
SET @sSurveyDataID = newid()

INSERT INTO SurveyData (SurveyDataID, RunID, MinInc, MinIncUOM, MaxInc, MaxIncUOM, IncIn, IncInUOM, IncOut, IncOutUOM, AzimuthIn, AzimuthInUOM, AzimuthOut, AzimuthOutUOM, 
	InternalTFO, InternalTFOUOM, DrillCollarOffset, DrillCollarOffsetUOM, TFO, TFOUOM, CasingShoe, CasingShoeUOM, TFSwitch, TFSwitchUOM, Btotal, BtotalUOM, ActualBTotal, ActualBTotalUOM, 
	BTotalMin, BTotalMinUOM, BTotalMax, BTotalMaxUOM, Gtotal, GtotalUOM, ActualGTotal, ActualGTotalUOM, GTotalMin, GTotalMinUOM, GTotalMax, GTotalMaxUOM, MagneticDip, MagneticDipUOM, 
	ActualMagneticDip, ActualMagneticDipUOM, DipMeasuredMin, DipMeasuredMinUOM, DipMeasuredMax, DipMeasuredMaxUOM, GTotalWorst, GTotalWorstUOM, BTotalWorst, BTotalWorstUOM, 
	DipWorst, DipWorstUOM, Convergence, ConvergenceUOM, Declination, DeclinationUOM, TargetAzimuth, TargetAzimuthUOM, TotalCorrection
	, TotalCorrectionUOM, VerticalSection, VerticalSectionUOM, MagneticDataSource, MagneticDataSourceOther
)
VALUES (
	@sSurveyDataID, @sRunID, @sMinInc, @sMinIncUOM, @sMaxInc, @sMaxIncUOM, @sIncIn, @sIncInUOM, @sIncOut, @sIncOutUOM, @sAzimuthIn, @sAzimuthInUOM, @sAzimuthOut, @sAzimuthOutUOM, 
	@sInternalTFO, @sInternalTFOUOM, @sDrillCollarOffset, @sDrillCollarOffsetUOM, @sTFO, @sTFOUOM, @sCasingShoe, @sCasingShoeUOM, @sTFSwitch, @sTFSwitchUOM, @sBtotal, @sBtotalUOM, @sActualBTotal, @sActualBTotalUOM, 
	@sBTotalMin, @sBTotalMinUOM, @sBTotalMax, @sBTotalMaxUOM, @sGtotal, @sGtotalUOM, @sActualGTotal, @sActualGTotalUOM, @sGTotalMin, @sGTotalMinUOM, @sGTotalMax, @sGTotalMaxUOM, @sMagneticDip, @sMagneticDipUOM, 
	@sActualMagneticDip, @sActualMagneticDipUOM, @sDipMeasuredMin, @sDipMeasuredMinUOM, @sDipMeasuredMax, @sDipMeasuredMaxUOM, @sGTotalWorst, @sGTotalWorstUOM, @sBTotalWorst, @sBTotalWorstUOM, 
	@sDipWorst, @sDipWorstUOM, @sConvergence, @sConvergenceUOM, @sDeclination, @sDeclinationUOM, @sTargetAzimuth, @sTargetAzimuthUOM
	, @sTotalCorrection, @sTotalCorrectionUOM, @sVerticalSection, @sVerticalSectionUOM, @sMagneticDataSource, @sMagneticDataSourceOther

)

SELECT @sSurveyDataID

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_RunUpdate](
		@sRunID uniqueidentifier, @sBHANumber as varchar(50), @sBHAType as varchar(20), @sSectionType as varchar(15), @sHoleSize as varchar(20), @sHoleSizeUOM as varchar(5), @sStartDate as datetime,
		@sEndDate as datetime, @sRecordedLogPercentage as varchar(20), @sRealtimeLogPercentage as varchar(20), @sDistanceWiped as varchar(20), @sDistanceWipedUOM as varchar(10),
		@sStartLogDate as datetime, @sEndLogDate as datetime, @sReasonsForPooh as text, @sComments as text, @sClientComments as text, @sServiceType as varchar(100),
		@sMDStart as varchar(50), @sMDStartUOM as varchar(10), @sMDEnd as varchar(50), @sMDEndUOM as varchar(10), @sTVDStart as varchar(50), @sTVDStartUOM as varchar(10),
		@sTVDEnd as varchar(50), @sTVDEndUOM as varchar(10), @sDrillHrs as varchar(50), @sEMReamingHrs as varchar(50), @sRotatingHrs as varchar(50), @sCircHrs as varchar(50),
		@sAverageROP as varchar(20), @sAverageROPUOM as varchar(10), @sFormation as varchar(20), @sOperHrs as varchar(50), 
		@DrillOutCasingShoe as varchar(20), @ShoeWeight as varchar(20), @ShoeWeightUOM as varchar(20), @ShoeLength as varchar(20), @ShoeLengthUOM as varchar(20), 
		@TypeCasingShoe as varchar(20), @iIsDownHole as tinyint, @sImportUserID as int, @sFileName as varchar(255))

AS
 
SET NOCOUNT ON

UPDATE Runs
SET
	BHANumber = @sBHANumber,
	BHAType = @sBHAType,
	SectionType = @sSectionType,
	HoleSize = @sHoleSize,
	HoleSizeUOM = @sHoleSizeUOM,
	StartDate = @sStartDate,
	EndDate = @sEndDate,
	RecordedLogPercentage = @sRecordedLogPercentage,
	RealtimeLogPercentage = @sRealtimeLogPercentage,
	DistanceWiped = @sDistanceWiped,
	DistanceWipedUOM = @sDistanceWipedUOM,
	StartLogDate = @sStartLogDate,
	EndLogDate = @sEndLogDate,
	ReasonsForPooh = @sReasonsForPooh,
	Comments = @sComments,
	ClientComments = @sClientComments,
	ServiceType = @sServiceType,
	MDStart = @sMDStart,
	MDStartUOM = @sMDStartUOM,
	MDEnd = @sMDEnd,
	MDEndUOM = @sMDEndUOM,
	TVDStart = @sTVDStart,
	TVDStartUOM = @sTVDStartUOM,
	TVDEnd = @sTVDEnd,
	TVDEndUOM = @sTVDEndUOM,
	DrillHrs = @sDrillHrs,
	EMReamingHrs = @sEMReamingHrs,
	RotatingHrs = @sRotatingHrs,
	CircHrs = @sCircHrs,
	AverageROP = @sAverageROP,
	AverageROPUOM = @sAverageROPUOM,
	Formation = @sFormation,
	OperHrs = @sOperHrs,
	DrillOutCasingShoe = @DrillOutCasingShoe, 
	ShoeWeight = @ShoeWeight, 
	ShoeWeightUOM = @ShoeWeightUOM, 
	ShoeLength = @ShoeLength, 
	ShoeLengthUOM = @ShoeLengthUOM, 
	TypeCasingShoe = @TypeCasingShoe, 
	IsDownHole = @iIsDownHole,
	ImportUserID = @sImportUserID,
	ImportDate = GetDate(),
	RptPath = @sFileName
WHERE RunID = @sRunID
	
SELECT @sRunID

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_RunV3DataUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_Import_RunV3DataUpdate] (
	@sRunID as uniqueidentifier
)
AS
SET NOCOUNT ON

Declare @iPulseCount int
Set @iPulseCount = (Select Sum(dbo.NumCheck(PulseCountEnd)) From PulseCountData Where RunID = @sRunID)

Declare @fHoleSize float
Set @fHoleSize = (Select HoleSize From Runs Where RunID = @sRunID)

Declare @sHoleSizeUOM varchar(4)
Set @sHoleSizeUOM = (Select HoleSizeUOM From Runs Where RunID = @sRunID)

Declare @fGammaRayScaleFactorK1 float
Set @fGammaRayScaleFactorK1 = (Select GammaRayScaleFactorK1 From RunActivity Where RunID = @sRunID)

Declare @fDifferentialPressureMax float
Set @fDifferentialPressureMax = (Select DeltaPBitStart From Hydraulics Where RunID = @sRunID)

Declare @fDifferentialPressureMin float
Set @fDifferentialPressureMin = (Select DeltaPBitEnd From Hydraulics Where RunID = @sRunID)

Declare @sDifferentialPressureUOM varchar(10)
Set @sDifferentialPressureUOM = (Select DifferentialPressureUOM From Hydraulics Where RunID = @sRunID)

Declare @fDeltaPBitMax float
Set @fDeltaPBitMax = (Select DeltaPBitMax From Hydraulics Where RunID = @sRunID)

Declare @sDeltaPBitUOM varchar(10)
Set @sDeltaPBitUOM = (Select DeltaPBitUOM From Hydraulics Where RunID = @sRunID)

Declare @fMotorRPM float
Set @fMotorRPM = (Select RPMMotorMax From RunDrilling Where RunID = @sRunID)

Declare @fWOBRotatingMax float
Set @fWOBRotatingMax = (Select WOBRotatingMax From RunDrilling Where RunID = @sRunID)

Declare @sWOBRotatingUOM varchar(10)
Set @sWOBRotatingUOM = (Select WOBRotatingUOM From RunDrilling Where RunID = @sRunID)

Declare @fSurfaceTorqueMax float
Set @fSurfaceTorqueMax = (Select SurfaceTorqueMax From RunDrilling Where RunID = @sRunID)

Declare @sSurfaceTorqueUOM varchar(10)
Set @sSurfaceTorqueUOM = (Select SurfaceTorqueUOM From RunDrilling Where RunID = @sRunID)

Declare @fRPMMotorMax float
Set @fRPMMotorMax = (Select RPMMotorMax From RunDrilling Where RunID = @sRunID)

Declare @fSurfaceRPMMax float
Set @fSurfaceRPMMax = (Select SurfaceRPMMax From RunDrilling Where RunID = @sRunID)

--Declare @sJarType varchar(50)
--Set @sJarType = (Select JarType From JarDetails Where RunID = @sRunID)

Update Runs
Set PulseCount = @iPulseCount
Where RunID = @sRunID

Update Hydraulics
Set HoleSize = Cast(@fHoleSize as varchar(20))
, HoleSizeUOM = @sHoleSizeUOM
Where RunID = @sRunID

--SET Motor Data info from Hydraulics
If ((Select MotorDataID From MotorData Where RunID = @sRunID) IS NOT NULL)
BEGIN
	Update MotorData
	Set DeltaPOnBottom = Cast(@fDifferentialPressureMax as varchar(20))
	, DeltaPOnBottomUOM = @sDifferentialPressureUOM
	, DeltaPOffBottom = Cast(@fDifferentialPressureMin as varchar(20))
	, DeltaPOffBottomUOM = @sDifferentialPressureUOM
	, MotorRPM = Cast(@fMotorRPM as varchar(20))
	Where RunID = @sRunID
END
ELSE
BEGIN
	INSERT INTO MotorData (MotorDataID, RunID, DeltaPOnBottom, DeltaPOnBottomUOM, DeltaPOffBottom, DeltaPOffBottomUOM, MotorRPM)
	VALUES (NEWID(), @sRunID, @fDifferentialPressureMax, @sDifferentialPressureUOM, @fDifferentialPressureMin, @sDifferentialPressureUOM, @fMotorRPM)
END

--SET Bit Data info from Hydraulics
If ((Select BitDataID From BitData Where RunID = @sRunID) IS NOT NULL)
BEGIN
	Update BitData
	Set BitDeltaP = @fDeltaPBitMax
	, BitDeltaPUOM = @sDeltaPBitUOM
	Where RunID = @sRunID
END
ELSE
BEGIN
	INSERT INTO BitData (BitDataID, RunID, BitDeltaP, BitDeltaPUOM)
	VALUES (NEWID(), @sRunID, @fDeltaPBitMax, @sDeltaPBitUOM)
END

/*
--Commented out since SpecNav will be modified to include this field (10/27/2014)
Update EMData
Set GammaRayScaleFactorK1 = Cast(@fGammaRayScaleFactorK1 as varchar(20))
Where RunID = @sRunID

--Commented out right now since importing CORE v3 format for BHA data. (10/27/2014)
Update BHA
Set 
--JarType = @sJarType, 
WeightOnBit = Cast(@fWOBRotatingMax as varchar(50))
, WeightOnBitUOM = @sWOBRotatingUOM
, Torque = Cast(@fSurfaceTorqueMax as varchar(50))
, TorqueUOM = @sSurfaceTorqueUOM
, RotaryRPM = Cast(@fRPMMotorMax as varchar(50))
, SurfaceRPM = Cast(@fSurfaceRPMMax as varchar(50))
Where RunID = @sRunID
*/

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_SensorConnectTimeCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_SensorConnectTimeCreate] (
	@sRunID as uniqueidentifier,
	@sToolString varchar(50),
	@sPartTypeID as int,
	@sSensor as varchar(50),
	@sSerialNumber as varchar(50),
	@sConnectTime as datetime,
	@sDisconnectTime as datetime,
	@sElapsedTime as varchar(15)) 

AS
SET NOCOUNT ON

Declare @sSensorConnectTimeID uniqueidentifier
Set @sSensorConnectTimeID = newid()

Declare @sToolStringID uniqueidentifier
Set @sToolStringID = (Select ToolStringID From ToolStrings (NOLOCK) Where SerialNumber = @sToolString)

Declare @sFixedAssetID uniqueidentifier
Set @sFixedAssetID = (Select Top 1 FixedAssetID From ToolStringFixedAssets (NOLOCK) Where PartTypeID = @sPartTypeID And SerialNum = @sSerialNumber)

INSERT INTO SensorConnectTimes (SensorConnectTimeID, RunID, Sensor, SerialNumber, ConnectTime, DisconnectTime, ElapsedTime, ToolStringID, FixedAssetID)
VALUES 
	(@sSensorConnectTimeID, @sRunID, @sSensor, @sSerialNumber, @sConnectTime, @sDisconnectTime, @sElapsedTime, @sToolStringID, @sFixedAssetID)

SELECT @sSensorConnectTimeID

SET NOCOUNT OFF




/****** Object:  StoredProcedure [dbo].[usp_InsertToolCodePartType]    Script Date: 08/06/2014 13:42:57 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_ToolDetailCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_ToolDetailCreate] (
	@sToolStringID as uniqueidentifier,
	@sArriveDate as datetime,
	@sDepartDate as datetime,
	@sInitialFieldDate as datetime,
	@sNonMag as varchar(3),
	@sOuterDTop as varchar(20),
	@sOuterDTopUOM as varchar(10),
	@sOuterDBottom as varchar(20),
	@sOuterDBottomUOM as varchar(10),
	@sMaxOuterD as varchar(20),
	@sMaxOuterDUOM as varchar(10),
	@sInnerD as varchar(20),
	@sInnerDUOM as varchar(10),
	@sBladeDiameter as varchar(20),
	@sBladeDiameterUOM as varchar(10),
	@sBladeType as varchar(10),
	@sFullGaugeLength as varchar(20),
	@sFullGaugeLengthUOM as varchar(10),
	@sFishNeck as varchar(20),
	@sFishNeckUOM as varchar(10),
	@sLength as varchar(20),
	@sLengthUOM as varchar(10),
	@sWeight as varchar(20),
	@sWeightUOM as varchar(10),
	@sWeightPerFM as varchar(20),
	@sWeightPerFMUOM as varchar(10),
	@sTopConnectionType as varchar(50),
	@sBottomConnectionType as varchar(50),
	@sWFTEquipment as bit,
	@sInitialOperatingHours as varchar(20),
	@sTotalOperatingHours as varchar(20),
	@sInitialCirculatingHours as varchar(20),
	@sTotalCirculatingHours as varchar(20),
	@sInitialDrillHours as varchar(20),
	@sTotalDrillHours as varchar(20),
	@sInitialKRevs as varchar(20),
	@sTotalKRevs as varchar(20),
	@sBitToBend as varchar(20),
	@sNoLoadRPMFlowUnit as varchar(20),
	@sBearingPackConfiguration as varchar(50),
	@sPowerSectionConfiguration as varchar(50),
	@sMotorType as varchar(50),
	@sMotorNominalSize as varchar(20),
	@sMotorNominalSizeUOM as varchar(10),
	@sAdjustableHousing as varchar(50),
	@sCutForFloat as varchar(50),
	@sJarForceUp as varchar(20),
	@sJarForceUpUOM as varchar(10),
	@sJarForceDown as varchar(20),
	@sJarForceDownUOM as varchar(10),
	@sJarDelay as varchar(20),
	@sJarType as varchar(50),
	@sInitialJarHits as varchar(20),
	@sTotalJarHits as varchar(20),
	@sBitSize as varchar(20),
	@sBitSizeUOM as varchar(10),
	@sBitModel as varchar(50),
	@sInnerRows as varchar(50),
	@sOuterRows as varchar(50),
	@sDullCharacteristics as varchar(50),
	@sLocationL as varchar(50),
	@sBearingSeatB as varchar(50),
	@sGaugeG as varchar(50),
	@sOtherDullO as varchar(50),
	@sReasonPulledR as varchar(50),
	@sGaugeLength as varchar(20),
	@sGaugeLengthUOM as varchar(10),
	@sActivePassive as varchar(50),
	@sNumberOfBlades as varchar(20),
	@sPDCCutterSize as varchar(20),
	@sPDCCutterSizeUOM as varchar(10),
	@sBitManufacturer as varchar(50),
	@sQuantityOnRig as varchar(20),
	@sPumpManufacturer as varchar(50),
	@sPumpModel as varchar(50),
	@sPumpType as varchar(50),
	@sPumpStrokeLength as varchar(20),
	@sPumpStrokeLengthUOM as varchar(10),
	@sPumpEfficiency as varchar(50),
	@sPumpPressureRating as varchar(50),
	@sPumpPressureRatingUOM as varchar(10),
	@sDampenerType as varchar(50),
	@sPressureDampenerManufacturer as varchar(50),
	@sMotorProperty as varchar(100),
	@sFixedBendAngle as varchar(20),
	@sManufacturer as varchar(100),
	@sBitState as varchar(15))
AS
SET NOCOUNT ON

Declare @sToolDetailID uniqueidentifier
set @sToolDetailID = newid()

INSERT INTO ToolDetail (ToolDetailID, ToolStringID, ArriveDate, DepartDate, InitialFieldDate, NonMag, OuterDTop, OuterDTopUOM, OuterDBottom, OuterDBottomUOM
	, MaxOuterD, MaxOuterDUOM, InnerD, InnerDUOM, BladeDiameter, BladeDiameterUOM, BladeType, FullGaugeLength, FullGaugeLengthUOM, FishNeck
	, FishNeckUOM, [Length], LengthUOM, Weight, WeightUOM, WeightPerFM, WeightPerFMUOM, TopConnectionType, BottomConnectionType, WFTEquipment
	, InitialOperatingHours, TotalOperatingHours, InitialCirculatingHours, TotalCirculatingHours, InitialDrillHours, TotalDrillHours, InitialKRevs
	, TotalKRevs, BitToBend, NoLoadRPMFlowUnit, BearingPackConfiguration, PowerSectionConfiguration, MotorType, MotorNominalSize, MotorNominalSizeUOM
	, AdjustableHousing, CutForFloat, JarForceUp, JarForceUpUOM, JarForceDown, JarForceDownUOM, JarDelay, JarType, InitialJarHits, TotalJarHits
	, BitSize, BitSizeUOM, BitModel, InnerRows, OuterRows, DullCharacteristics, LocationL, BearingSeatB, GaugeG, OtherDullO, ReasonPulledR, GaugeLength
	, GaugeLengthUOM, ActivePassive, NumberOfBlades, PDCCutterSize, PDCCutterSizeUOM, BitManufacturer, QuantityOnRig, PumpManufacturer, PumpModel
	, PumpType, PumpStrokeLength, PumpStrokeLengthUOM, PumpEfficiency, PumpPressureRating, PumpPressureRatingUOM, DampenerType, PressureDampenerManufacturer
	, MotorProperty, FixedBendAngle, Manufacturer, BitState
)
VALUES (@sToolDetailID, @sToolStringID, @sArriveDate, @sDepartDate, @sInitialFieldDate, @sNonMag, @sOuterDTop, @sOuterDTopUOM, @sOuterDBottom, @sOuterDBottomUOM
		, @sMaxOuterD, @sMaxOuterDUOM, @sInnerD, @sInnerDUOM, @sBladeDiameter, @sBladeDiameterUOM, @sBladeType, @sFullGaugeLength, @sFullGaugeLengthUOM, @sFishNeck
		, @sFishNeckUOM, @sLength, @sLengthUOM, @sWeight, @sWeightUOM, @sWeightPerFM, @sWeightPerFMUOM, @sTopConnectionType, @sBottomConnectionType, @sWFTEquipment
		, @sInitialOperatingHours, @sTotalOperatingHours, @sInitialCirculatingHours, @sTotalCirculatingHours, @sInitialDrillHours, @sTotalDrillHours, @sInitialKRevs
		, @sTotalKRevs, @sBitToBend, @sNoLoadRPMFlowUnit, @sBearingPackConfiguration, @sPowerSectionConfiguration, @sMotorType, @sMotorNominalSize, @sMotorNominalSizeUOM
		, @sAdjustableHousing, @sCutForFloat, @sJarForceUp, @sJarForceUpUOM, @sJarForceDown, @sJarForceDownUOM, @sJarDelay, @sJarType, @sInitialJarHits, @sTotalJarHits
		, @sBitSize, @sBitSizeUOM, @sBitModel, @sInnerRows, @sOuterRows, @sDullCharacteristics, @sLocationL, @sBearingSeatB, @sGaugeG, @sOtherDullO, @sReasonPulledR
		, @sGaugeLength, @sGaugeLengthUOM, @sActivePassive, @sNumberOfBlades, @sPDCCutterSize, @sPDCCutterSizeUOM, @sBitManufacturer, @sQuantityOnRig, @sPumpManufacturer
		, @sPumpModel, @sPumpType, @sPumpStrokeLength, @sPumpStrokeLengthUOM, @sPumpEfficiency, @sPumpPressureRating, @sPumpPressureRatingUOM, @sDampenerType
		, @sPressureDampenerManufacturer, @sMotorProperty, @sFixedBendAngle, @sManufacturer, @sBitState)
						
SELECT @sToolDetailID

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_ToolStringComponentInfoMapping]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Import_ToolStringComponentInfoMapping] (
	@sToolStringId as uniqueidentifier,
	@sToolStringFixedAssetId as uniqueidentifier,
	@sRunId as uniqueidentifier,
	@sIncidentId as uniqueidentifier)

AS
SET NOCOUNT ON

Declare @sToolStringInfoID uniqueidentifier
Set @sToolStringInfoID = newid()

INSERT INTO ToolStringComponentInfo(ToolStringInfoID, ToolStringID, FixedAssetID, SerialNum, RNItemNum, InventoryItemNum, PartTypeID, 
									Revision, ToolCode, CustomProperty, RunID, IncidentID, IsUsed)
SELECT 
	@sToolStringInfoID, @sToolStringID, FixedAssetID, SerialNum, RNItemNum, InventoryItemNum, PartTypeID
	, Revision, ToolCode, CustomProperty, @sRunID, @sIncidentID, 1
FROM ToolStringFixedAssets tfa
WHERE tfa.ToolStringFixedAssetsId = @sToolStringFixedAssetId

SELECT @sToolStringInfoID

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_v3BHAComponentCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_Import_v3BHAComponentCreate] (
	@sBHAID as varchar(38),
	@sComponent as varchar(50),
	@sSerialNumber as varchar(50),
	@bNonMagDrillCollar as bit,
	@sOD as varchar(50),
	@sODUOM as varchar(10),
	@sStabilizerBladeOD as varchar(50),
	@sStabilizerBladeODUOM as varchar(10),
	@sID as varchar(50),
	@sIDUOM as varchar(10),
	@sLength as varchar(50),
	@sLengthUOM as varchar(10),
	@sType as varchar(50),
	@iOrderPosition as int) 

AS
SET NOCOUNT ON

Declare @sBHACompId uniqueidentifier
set @sBHACompId = newid()

INSERT INTO BHAComponents (BHACompID, BHAID, SerialNumber, Component, OrderPosition, IsNonMagDrillCollar,
	InsideDiameter, InsideDiameterUOM, OutsideDiameter, OutsideDiameterUOM, [Length], LengthUOM, StabilizerBladeOD, StabilizerBladeODUOM, [Type])
VALUES (@sBHACompId, @sBHAID, @sSerialNumber, @sComponent, @iOrderPosition, @bNonMagDrillCollar,
	@sID, @sIDUOM, @sOD, @sODUOM, @sLength, @sLengthUOM, @sStabilizerBladeOD, @sStabilizerBladeODUOM, @sType)

SELECT @sBHACompId

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_v3BHACreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [dbo].[usp_Import_v3BHACreate] (
	@sRunID as varchar(38),
	@sIncidentID as varchar(38),
	@sSerialNumber as varchar(50),
	@sType as varchar(50),
	@sShockSub as varchar(50),
	@sFloatType as varchar(50),
	@sJarType as varchar(50),
	@sWeightOnBit as float,
	@sWeightOnBitUOM as varchar(10),
	@sRotaryRPM as float,
	@sTorque as float,
	@sTorqueUOM as varchar(10),
	@sSurfaceRPM as float,
	@sRestrictorSub as varchar(50)) 

AS
SET NOCOUNT ON

Declare @sBHAId uniqueidentifier
set @sBHAId = newid()

INSERT INTO BHA (BHAID, RunID, IncidentID, BHANumber, BHAType, Torque, TorqueUOM, WeightOnBit, WeightOnBitUOM,
		    ShockSub, JarType, FloatType, RotaryRPM, SurfaceRPM, RestrictorSub)
VALUES (@sBHAID, @sRunID, @sIncidentID, @sSerialNumber, @sType, @sTorque, @sTorqueUOM, @sWeightOnBit, @sWeightOnBitUOM,
	@sShockSub, @sJarType, @sFloatType, @sRotaryRPM, @sSurfaceRPM, @sRestrictorSub)

SELECT @sBHAId

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_v3BHAUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO



CREATE PROCEDURE [dbo].[usp_Import_v3BHAUpdate] (
	@sBHAID as varchar(38),
	@sSerialNumber as varchar(50),
	@sType as varchar(50),
	@sShockSub as varchar(50),
	@sFloatType as varchar(50),
	@sJarType as varchar(50),
	@sWeightOnBit as float,
	@sWeightOnBitUOM as varchar(10),
	@sRotaryRPM as float,
	@sTorque as float,
	@sTorqueUOM as varchar(10),
	@sSurfaceRPM as float,
	@sRestrictorSub as varchar(50)) 

AS
SET NOCOUNT ON

UPDATE BHA
SET
	BHANumber = @sSerialNumber, 
	BHAType = @sType,
	Torque = @sTorque, 
	TorqueUOM = @sTorqueUOM, 
	WeightOnBit = @sWeightOnBit, 
	WeightOnBitUOM = @sWeightOnBitUOM,
	ShockSub = @sShockSub, 
	JarType = @sJarType, 
	FloatType = @sFloatType, 
	RotaryRPM = @sRotaryRPM,
	SurfaceRPM = @sSurfaceRPM,
	RestrictorSub = @sRestrictorSub
WHERE BHAID = @sBHAID

SELECT @sBHAID

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_Import_WellCoordinatesCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_WellCoordinatesCreate](
		@sWellID uniqueidentifier,
		@sCoordinate varchar(50),
		@iCoordinateLoc int,
		@sType1 varchar(50),
		@sType2 varchar(50),
		@sType1Value1 varchar(30),
		@sType1Value2 varchar(30),
		@sType2Value1 varchar(30),
		@sType2Value2 varchar(30))

AS
 
SET NOCOUNT ON

DECLARE @sWellCoordinateID as uniqueidentifier
SET @sWellCoordinateID = newid()

INSERT INTO WellCoordinates (
	WellCoordinateID,
	WellID,
	Coordinate,
	CoordinateLoc,
	Type1,
	Type2,
	Type1Value1,
	Type1Value2,
	Type2Value1,
	Type2Value2)
VALUES (
	@sWellCoordinateID,
	@sWellID,
	@sCoordinate,
	@iCoordinateLoc,
	@sType1,
	@sType2,
	@sType1Value1,
	@sType1Value2,
	@sType2Value1,
	@sType2Value2)

SELECT @sWellCoordinateID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_WellCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_WellCreate](
	@sJobID as uniqueidentifier,
	@sWell as varchar(50),
	@sTieOnMD as float,
	@sTieOnMDUOM as varchar(10),
	@sTieOnInc as float,
	@sTieOnIncUOM as varchar(10),
	@sTieOnNSDep as float,
	@sTieOnNSDepUOM as varchar(10),
	@sTieOnEWDep as float,
	@sTieOnEWDepUOM as varchar(10),
	@sTieOnTVD as float,
	@sTieOnTVDUOM as varchar(10),
	@sTieOnAZ as float,
	@sTieOnAZUOM as varchar(10),
	@sSurveyCalcMethod as varchar(50),
	@sMagRef as varchar(50),
	@sAZMMethod as varchar(50),
	@sSpudDate as datetime,
	@sTieOnSurvProvBy as varchar(50),
	@sKellyBushing as float,
	@sKellyBushingUOM as varchar(10),
	@sGroundLevel as float,
	@sGroundLevelUOM as varchar(10),
	@sDrillFloor as float,
	@sDrillFloorUOM as varchar(10),
	@sWaterDepth as float,
	@sWaterDepthUOM as varchar(10),
	@sPermanentDatum as varchar(50),
	@sLogMeasuredFrom as varchar(50),
	@sElevationOfLogDatum as float,
	@sElevationOfLogDatumUOM as varchar(10),
	@sDepthReference as varchar(50),
	@sLWDMWDServiceCompany varchar(50),
	@sDDServiceCompany varchar(50),
	@sAPIUWIWellLicense varchar(50),
	@sWellType varchar(50),
	@sTargetDirection float,
	@sTargetDirectionUOM varchar(5),
	@sMagneticDeclination float,
	@sMagneticDeclinationUOM varchar(5),
	@sGridConvergence float,
	@sGridConvergenceUOM varchar(5),
	@sBTotalRef float,
	@sBTotalRefUOM varchar(5),
	@sDipReference float,
	@sDipReferenceUOM  varchar(5),
	@sGTotalRef float,
	@sGTotalRefUOM varchar(5),
	@sTotalCorrection float,
	@sTotalCorrectionUOM varchar(5),
	@sGeoMagModel varchar(50),
	@sMapSystem varchar(50),
	@sMapZone varchar(50),
	@sGeoDatum varchar(50),
	@sWellPlanDate datetime,
	@sMagneticDataSource varchar(50),
	@sImportUserID as int,
	@sImportSource as varchar(50)) 

AS
 
SET NOCOUNT ON

DECLARE @sWellID as uniqueidentifier
SET @sWellID = newid()

INSERT INTO Wells (WellID, JobID, Well, TieOnMD, TieOnMDUOM, TieOnInc, TieOnIncUOM, TieOnNSDep, TieOnNSDepUOM, TieOnEWDep, TieOnEWDepUOM,
		      TieOnTVD, TieOnTVDUOM, TieOnAZ, TieOnAZUOM, SurveyCalcMethod, MagRef, AZMMethod, SpudDate, TieOnSurvProvBy,
		      KellyBushing, KellyBushingUOM, GroundLevel, GroundLevelUOM, DrillFloor, DrillFloorUOM, WaterDepth, WaterDepthUOM,
		      PermanentDatum, LogMeasuredFrom, ElevationOfLogDatum, ElevationOfLogDatumUOM, DepthReference,
			  LWDMWDServiceCompany, DDServiceCompany, APIUWIWellLicense, WellType, TargetDirection, TargetDirectionUOM,
			  MagneticDeclination, MagneticDeclinationUOM, GridConvergence, GridConvergenceUOM, BTotalRef, BTotalRefUOM, 
			  DipReference, DipReferenceUOM, GTotalRef, GTotalRefUOM, TotalCorrection, TotalCorrectionUOM,
			  GeoMagModel, MapSystem, MapZone, GeoDatum, WellPlanDate, MagneticDataSource,
		      ImportUserID, ImportDate, ImportSource, IsDeleted)

VALUES (@sWellID, @sJobID, @sWell, @sTieOnMD, @sTieOnMDUOM, @sTieOnInc, @sTieOnIncUOM, @sTieOnNSDep, @sTieOnNSDepUOM,
	@sTieOnEWDep, @sTieOnEWDepUOM, @sTieOnTVD, @sTieOnTVDUOM, @sTieOnAZ, @sTieOnAZUOM, @sSurveyCalcMethod, @sMagRef,
	@sAZMMethod, @sSpudDate, @sTieOnSurvProvBy, @sKellyBushing, @sKellyBushingUOM, @sGroundLevel, @sGroundLevelUOM,
	@sDrillFloor, @sDrillFloorUOM, @sWaterDepth, @sWaterDepthUOM, @sPermanentDatum,
	@sLogMeasuredFrom, @sElevationOfLogDatum, @sElevationOfLogDatumUOM, @sDepthReference,
	@sLWDMWDServiceCompany, @sDDServiceCompany, @sAPIUWIWellLicense, @sWellType, @sTargetDirection, @sTargetDirectionUOM, 
	@sMagneticDeclination, @sMagneticDeclinationUOM, @sGridConvergence, @sGridConvergenceUOM, @sBTotalRef, @sBTotalRefUOM, 
    @sDipReference, @sDipReferenceUOM, @sGTotalRef, @sGTotalRefUOM, @sTotalCorrection, @sTotalCorrectionUOM,
    @sGeoMagModel, @sMapSystem, @sMapZone, @sGeoDatum, @sWellPlanDate, @sMagneticDataSource, 
	@sImportUserID, GetDate(), @sImportSource, 0)

SELECT @sWellID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_WellTargetsChangeRequestsCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_WellTargetsChangeRequestsCreate](
		@sWellID uniqueidentifier,
		@sTargetDate datetime,
		@sTargetChangeRequestBy uniqueidentifier,
		@sTargetChangeRecordedBy uniqueidentifier,
		@fLastSurveyMD float,
		@sLastSurveyMDUOM varchar(10),
		@fLastSurveyInc float,
		@sLastSurveyIncUOM varchar(10),
		@fLastSurveyAzimuth float,
		@sLastSurveyAzimuthUOM varchar(10),
		@fLastSurveyTVD float,
		@sLastSurveyTVDUOM varchar(10),
		@fETBMD float,
		@sETBMDUOM varchar(10),
		@fETBInc float,
		@sETBIncUOM varchar(10),
		@fETBAzimuth float,
		@sETBAzimuthUOM varchar(10),
		@fETBTVD float,
		@sETBTVDUOM varchar(10),
		@fETBNSCoordinates float,
		@sETBNSCoordinatesUOM varchar(10),
		@fETBEWCoordinates float,
		@sETBEWCoordinatesUOM varchar(10),
		@fETBVerticalSection float,
		@sETBVerticalSectionUOM varchar(10),
		@fETBDogleg float,
		@sETBDoglegUOM varchar(10),
		@fNewMD float,
		@sNewMDUOM varchar(10),
		@fNewInc float,
		@sNewIncUOM varchar(10),
		@fNewAzimuth float,
		@sNewAzimuthUOM varchar(10),
		@fNewTVD float,
		@sNewTVDUOM varchar(10),
		@fNewNSCoordinates float,
		@sNewNSCoordinatesUOM varchar(10),
		@fNewEWCoordinates float,
		@sNewEWCoordinatesUOM varchar(10),
		@fNewVerticalSection float,
		@sNewVerticalSectionUOM varchar(10),
		@fNewDogleg float,
		@sNewDoglegUOM varchar(10),
		@sComments varchar(2000))
AS
 
SET NOCOUNT ON

DECLARE @sWellTargetsChangeRequestID as uniqueidentifier
SET @sWellTargetsChangeRequestID = newid()

INSERT INTO WellTargetsChangeRequests (
	WellTargetsChangeRequestID,
	WellID,
	TargetDate,
	TargetChangeRequestBy,
	TargetChangeRecordedBy,
	LastSurveyMD,
	LastSurveyMDUOM,
	LastSurveyInc,
	LastSurveyIncUOM,
	LastSurveyAzimuth,
	LastSurveyAzimuthUOM,
	LastSurveyTVD,
	LastSurveyTVDUOM,
	ETBMD,
	ETBMDUOM,
	ETBInc,
	ETBIncUOM,
	ETBAzimuth,
	ETBAzimuthUOM,
	ETBTVD,
	ETBTVDUOM,
	ETBNSCoordinates,
	ETBNSCoordinatesUOM,
	ETBEWCoordinates,
	ETBEWCoordinatesUOM,
	ETBVerticalSection,
	ETBVerticalSectionUOM,
	ETBDogleg,
	ETBDoglegUOM,
	NewMD,
	NewMDUOM,
	NewInc,
	NewIncUOM,
	NewAzimuth,
	NewAzimuthUOM,
	NewTVD,
	NewTVDUOM,
	NewNSCoordinates,
	NewNSCoordinatesUOM,
	NewEWCoordinates,
	NewEWCoordinatesUOM,
	NewVerticalSection,
	NewVerticalSectionUOM,
	NewDogleg,
	NewDoglegUOM,
	Comments)
VALUES (
	@sWellTargetsChangeRequestID,
	@sWellID,
	@sTargetDate,
	@sTargetChangeRequestBy,
	@sTargetChangeRecordedBy,
	@fLastSurveyMD,
	@sLastSurveyMDUOM,
	@fLastSurveyInc,
	@sLastSurveyIncUOM,
	@fLastSurveyAzimuth,
	@sLastSurveyAzimuthUOM,
	@fLastSurveyTVD,
	@sLastSurveyTVDUOM,
	@fETBMD,
	@sETBMDUOM,
	@fETBInc,
	@sETBIncUOM,
	@fETBAzimuth,
	@sETBAzimuthUOM,
	@fETBTVD,
	@sETBTVDUOM,
	@fETBNSCoordinates,
	@sETBNSCoordinatesUOM,
	@fETBEWCoordinates,
	@sETBEWCoordinatesUOM,
	@fETBVerticalSection,
	@sETBVerticalSectionUOM,
	@fETBDogleg,
	@sETBDoglegUOM,
	@fNewMD,
	@sNewMDUOM,
	@fNewInc,
	@sNewIncUOM,
	@fNewAzimuth,
	@sNewAzimuthUOM,
	@fNewTVD,
	@sNewTVDUOM,
	@fNewNSCoordinates,
	@sNewNSCoordinatesUOM,
	@fNewEWCoordinates,
	@sNewEWCoordinatesUOM,
	@fNewVerticalSection,
	@sNewVerticalSectionUOM,
	@fNewDogleg,
	@sNewDoglegUOM,
	@sComments)

SELECT @sWellTargetsChangeRequestID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_WellTargetsCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_WellTargetsCreate](
					@sWellID as uniqueidentifier,
					@sKickOffPoint float,
					@sKickOffPointUOM varchar(5),
					@sProposedMaxAngle float,
					@sProposedMaxAngleUOM varchar(5))

AS
 
SET NOCOUNT ON

DECLARE @sWellTargetID as uniqueidentifier
SET @sWellTargetID = newid()

INSERT INTO WellTargets (WellTargetID, WellID, KickOffPoint, KickOffPointUOM, ProposedMaxAngle, ProposedMaxAngleUOM)
VALUES (@sWellTargetID, @sWellID, @sKickOffPoint, @sKickOffPointUOM, @sProposedMaxAngle, @sProposedMaxAngleUOM)

SELECT @sWellTargetID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_WellTargetsPlannedCreate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_WellTargetsPlannedCreate](
					@sWellID as uniqueidentifier,
					@sTarget varchar(50),
					@sType varchar(50),
					@fRadius float,
					@sRadiusUOM varchar(5),
					@sFormation varchar(50),
					@fLatitude float,
					@sLatitudeUOM varchar(5),
					@fDeparture float,
					@sDepartureUOM varchar(5),
					@fAzimuth float,
					@sAzimuthUOM varchar(10),
					@fVerticalSection float,
					@sVerticalSectionUOM varchar(5),
					@fTVD float,
					@sTVDUOM varchar(5),
					@fMaxBuildRate float,
					@sMaxBuildRateUOM varchar(10))
AS
 
SET NOCOUNT ON

DECLARE @sWellTargetPlannedID as uniqueidentifier
SET @sWellTargetPlannedID = newid()

INSERT INTO WellTargetsPlanned (WellTargetPlannedID, WellID, Target, [Type], Radius, RadiusUOM, Formation, Latitude, LatitudeUOM, Departure, DepartureUOM,
								Azimuth, AzimuthUOM, VerticalSection, VerticalSectionUOM, TVD, TVDUOM, MaxBuildRate, MaxBuildRateUOM)
VALUES (@sWellTargetPlannedID, @sWellID, @sTarget, @sType, @fRadius, @sRadiusUOM, @sFormation, @fLatitude, @sLatitudeUOM, @fDeparture, @sDepartureUOM,
@fAzimuth, @sAzimuthUOM, @fVerticalSection, @sVerticalSectionUOM, @fTVD, @sTVDUOM, @fMaxBuildRate, @sMaxBuildRateUOM)

SELECT @sWellTargetPlannedID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_Import_WellUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_Import_WellUpdate](
	@sWellID as uniqueidentifier,
	@sWell as varchar(50),
	@sTieOnMD as float,
	@sTieOnMDUOM as varchar(10),
	@sTieOnInc as float,
	@sTieOnIncUOM as varchar(10),
	@sTieOnNSDep as float,
	@sTieOnNSDepUOM as varchar(10),
	@sTieOnEWDep as float,
	@sTieOnEWDepUOM as varchar(10),
	@sTieOnTVD as float,
	@sTieOnTVDUOM as varchar(10),
	@sTieOnAZ as float,
	@sTieOnAZUOM as varchar(10),
	@sSurveyCalcMethod as varchar(50),
	@sMagRef as varchar(50),
	@sAZMMethod as varchar(50),
	@sSpudDate as datetime,
	@sTieOnSurvProvBy as varchar(50),
	@sKellyBushing as float,
	@sKellyBushingUOM as varchar(10),
	@sGroundLevel as float,
	@sGroundLevelUOM as varchar(10),
	@sDrillFloor as float,
	@sDrillFloorUOM as varchar(10),
	@sWaterDepth as float,
	@sWaterDepthUOM as varchar(10),
	@sPermanentDatum as varchar(50),
	@sLogMeasuredFrom as varchar(50),
	@sElevationOfLogDatum as float,
	@sElevationOfLogDatumUOM as varchar(10),
	@sDepthReference as varchar(50),
	@sLWDMWDServiceCompany varchar(50),
	@sDDServiceCompany varchar(50),
	@sAPIUWIWellLicense varchar(50),
	@sWellType varchar(50),
	@sTargetDirection float,
	@sTargetDirectionUOM varchar(5),
	@sMagneticDeclination float,
	@sMagneticDeclinationUOM varchar(5),
	@sGridConvergence float,
	@sGridConvergenceUOM varchar(5),
	@sBTotalRef float,
	@sBTotalRefUOM varchar(5),
	@sDipReference float,
	@sDipReferenceUOM  varchar(5),
	@sGTotalRef float,
	@sGTotalRefUOM varchar(5),
	@sTotalCorrection float,
	@sTotalCorrectionUOM varchar(5),
	@sGeoMagModel varchar(50),
	@sMapSystem varchar(50),
	@sMapZone varchar(50),
	@sGeoDatum varchar(50),
	@sWellPlanDate datetime,
	@sMagneticDataSource varchar(50),
	@sImportUserID as int,
	@sImportSource as varchar(50)) 

AS
 
SET NOCOUNT ON

UPDATE Wells 
SET
	Well = @sWell,
	TieOnMD = @sTieOnMD,
	TieOnMDUOM = @sTieOnMDUOM,
	TieOnInc = @sTieOnInc,
	TieOnIncUOM = @sTieOnIncUOM,
	TieOnNSDep = @sTieOnNSDep,
	TieOnNSDepUOM = @sTieOnNSDepUOM,
	TieOnEWDep = @sTieOnEWDep,
	TieOnEWDepUOM = @sTieOnEWDepUOM,
	TieOnTVD = @sTieOnTVD,
	TieOnTVDUOM = @sTieOnTVDUOM,
	TieOnAZ = @sTieOnAZ,
	TieOnAZUOM = @sTieOnAZUOM,
	SurveyCalcMethod = @sSurveyCalcMethod,
	MagRef = @sMagRef,
	AZMMethod = @sAZMMethod,
	SpudDate = @sSpudDate,
	TieOnSurvProvBy = @sTieOnSurvProvBy,
	KellyBushing = @sKellyBushing,
	KellyBushingUOM = @sKellyBushingUOM,
	GroundLevel = @sGroundLevel,
	GroundLevelUOM = @sGroundLevelUOM,
	DrillFloor = @sDrillFloor,
	DrillFloorUOM = @sDrillFloorUOM,
	WaterDepth = @sWaterDepth,
	WaterDepthUOM = @sWaterDepthUOM,
	PermanentDatum = @sPermanentDatum,
	LogMeasuredFrom = @sLogMeasuredFrom,
	ElevationOfLogDatum = @sElevationOfLogDatum,
	ElevationOfLogDatumUOM = @sElevationOfLogDatumUOM,
	DepthReference = @sDepthReference,
	LWDMWDServiceCompany = @sLWDMWDServiceCompany,
	DDServiceCompany = @sDDServiceCompany,
	APIUWIWellLicense = @sAPIUWIWellLicense,
	WellType = @sWellType,
	TargetDirection = @sTargetDirection,
	TargetDirectionUOM = @sTargetDirectionUOM,
	MagneticDeclination = @sMagneticDeclination,
	MagneticDeclinationUOM = @sMagneticDeclinationUOM,
	GridConvergence = @sGridConvergence,
	GridConvergenceUOM = @sGridConvergenceUOM,
	BTotalRef = @sBTotalRef,
	BTotalRefUOM = @sBTotalRefUOM,
	DipReference = @sDipReference,
	DipReferenceUOM = @sDipReferenceUOM,
	GTotalRef = @sGTotalRef,
	GTotalRefUOM = @sGTotalRefUOM,
	TotalCorrection = @sTotalCorrection,
	TotalCorrectionUOM = @sTotalCorrectionUOM,
	GeoMagModel = @sGeoMagModel,
	MapSystem = @sMapSystem,
	MapZone = @sMapZone,
	GeoDatum = @sGeoDatum,
	WellPlanDate = @sWellPlanDate,
	MagneticDataSource = @sMagneticDataSource,
	ImportUserID = @sImportUserID,
	ImportDate = GetDate()
WHERE WellID = @sWellID
	
SELECT @sWellID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_ImportHistogramXMLData]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Umesh
-- Create date: 24 Nov 2016
-- Description:	Import histogram xml data to database
-- =============================================
CREATE PROCEDURE [dbo].[usp_ImportHistogramXMLData] 
	@HistogramXMLData XML,
	@CoreId VARCHAR(50),
	@UserName VARCHAR(50)
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
   BEGIN TRANSACTION HISTOGRAMIMPORT
   DECLARE @JobNumber VARCHAR(100)

	;WITH XMLNAMESPACES (DEFAULT 'http://tempuri.org/') 
	SELECT DISTINCT @JobNumber = Hxml.x.value('JobNumber[1]','varchar(100)')
    FROM @HistogramXMLData.nodes('CBMCore/tblHistogramJobInfo') Hxml(x)

	;WITH XMLNAMESPACES (DEFAULT 'http://tempuri.org/')
	DELETE Hbin
	FROM HistogramBin AS Hbin 
	JOIN [Histogram] AS H ON Hbin.HistogramId=H.HistogramId
	JOIN HistogramMonitor AS Hmoni ON Hmoni.HistogramMonitorId=H.HistogramMonitorId
	JOIN HistogramToolInfo AS HTInfo ON HTInfo.HistogramToolInfoId=Hmoni.HistogramToolInfoId
	JOIN HistogramJobInfo AS hJobInfo ON hJobInfo.HistogramJobInfoId=HTInfo.HistogramJobInfoId
	WHERE hJobInfo.JobNumber=@JobNumber
	AND hJobInfo.RunNumber IN ( SELECT DISTINCT Hxml.x.value('RunNumber[1]','varchar(100)')
								FROM @HistogramXMLData.nodes('CBMCore/tblHistogramJobInfo') Hxml(x))
    AND hJobInfo.WellName IN(SELECT DISTINCT Hxml.x.value('WellName[1]','varchar(100)')
							 FROM @HistogramXMLData.nodes('CBMCore/tblHistogramJobInfo') Hxml(x))

	;WITH XMLNAMESPACES (DEFAULT 'http://tempuri.org/')
	DELETE H
	FROM Histogram AS H 
	JOIN HistogramMonitor AS Hmoni ON Hmoni.HistogramMonitorId=H.HistogramMonitorId
	JOIN HistogramToolInfo AS HTInfo ON HTInfo.HistogramToolInfoId=Hmoni.HistogramToolInfoId
	JOIN HistogramJobInfo AS hJobInfo ON hJobInfo.HistogramJobInfoId=HTInfo.HistogramJobInfoId
	WHERE hJobInfo.JobNumber=@JobNumber
	AND hJobInfo.RunNumber IN ( SELECT DISTINCT Hxml.x.value('RunNumber[1]','varchar(100)')
								FROM @HistogramXMLData.nodes('CBMCore/tblHistogramJobInfo') Hxml(x))
    AND hJobInfo.WellName IN(SELECT DISTINCT Hxml.x.value('WellName[1]','varchar(100)')
							 FROM @HistogramXMLData.nodes('CBMCore/tblHistogramJobInfo') Hxml(x))

	;WITH XMLNAMESPACES (DEFAULT 'http://tempuri.org/')
	DELETE Hmoni
	FROM HistogramMonitor AS Hmoni 
	JOIN HistogramToolInfo AS HTInfo ON HTInfo.HistogramToolInfoId=Hmoni.HistogramToolInfoId
	JOIN HistogramJobInfo AS hJobInfo ON hJobInfo.HistogramJobInfoId=HTInfo.HistogramJobInfoId
	WHERE hJobInfo.JobNumber=@JobNumber
	AND hJobInfo.RunNumber IN ( SELECT DISTINCT Hxml.x.value('RunNumber[1]','varchar(100)')
								FROM @HistogramXMLData.nodes('CBMCore/tblHistogramJobInfo') Hxml(x))
    AND hJobInfo.WellName IN(SELECT DISTINCT Hxml.x.value('WellName[1]','varchar(100)')
							 FROM @HistogramXMLData.nodes('CBMCore/tblHistogramJobInfo') Hxml(x))

	;WITH XMLNAMESPACES (DEFAULT 'http://tempuri.org/')
	DELETE HTInfo
	FROM HistogramToolInfo AS HTInfo 
	JOIN HistogramJobInfo AS hJobInfo ON hJobInfo.HistogramJobInfoId=HTInfo.HistogramJobInfoId
	WHERE hJobInfo.JobNumber=@JobNumber
	AND hJobInfo.RunNumber IN ( SELECT DISTINCT Hxml.x.value('RunNumber[1]','varchar(100)')
								FROM @HistogramXMLData.nodes('CBMCore/tblHistogramJobInfo') Hxml(x))
    AND hJobInfo.WellName IN(SELECT DISTINCT Hxml.x.value('WellName[1]','varchar(100)')
							 FROM @HistogramXMLData.nodes('CBMCore/tblHistogramJobInfo') Hxml(x))

	;WITH XMLNAMESPACES (DEFAULT 'http://tempuri.org/')
	DELETE hJobInfo
	FROM  HistogramJobInfo AS hJobInfo 
	WHERE hJobInfo.JobNumber=@JobNumber
	AND hJobInfo.RunNumber IN ( SELECT DISTINCT Hxml.x.value('RunNumber[1]','varchar(100)')
								FROM @HistogramXMLData.nodes('CBMCore/tblHistogramJobInfo') Hxml(x))
    AND hJobInfo.WellName IN(SELECT DISTINCT Hxml.x.value('WellName[1]','varchar(100)')
							 FROM @HistogramXMLData.nodes('CBMCore/tblHistogramJobInfo') Hxml(x))
	
;WITH XMLNAMESPACES (DEFAULT 'http://tempuri.org/')
   INSERT INTO HistogramJobInfo 
	SELECT 
    Hxml.x.value('HistogramJobInfoId[1]','varchar(100)') AS HistogramJobInfoId,
    Hxml.x.value('JobNumber[1]','varchar(100)') AS JobNumber,
	Hxml.x.value('WellName[1]','varchar(100)') AS WellName,
	Hxml.x.value('RunNumber[1]','varchar(100)') AS RunNumber,
	@UserName,
	GETDATE()
	FROM @HistogramXMLData.nodes('CBMCore/tblHistogramJobInfo') Hxml(x)

;WITH XMLNAMESPACES (DEFAULT 'http://tempuri.org/')
	INSERT INTO HistogramToolInfo
	SELECT 
    Hxml.x.value('HistogramToolInfoId[1]','varchar(100)') AS HistogramToolInfoId,
    Hxml.x.value('HistogramJobInfoId[1]','varchar(100)') AS HistogramJobInfoId,
	Hxml.x.value('SensorName[1]','varchar(100)') AS SensorName,
	Hxml.x.value('SensorDist[1]','varchar(100)') AS SensorDist,
	Hxml.x.value('PartTypeID[1]','varchar(100)') AS PartTypeID,
	Hxml.x.value('SerialNumber[1]','varchar(100)') AS SerialNumber,
	Hxml.x.value('Units[1]','varchar(10)') AS Units
	FROM @HistogramXMLData.nodes('CBMCore/tblHistogramJobInfo/tblHistogramToolInfo') Hxml(x)

;WITH XMLNAMESPACES (DEFAULT 'http://tempuri.org/')
	INSERT INTO HistogramMonitor
	SELECT 
	Hxml.x.value('HistogramMonitorId[1]','varchar(100)') AS HistogramMonitorId,
	Hxml.x.value('HistogramToolInfoId[1]','varchar(100)') AS HistogramToolInfoId,
    Hxml.x.value('MonitorName[1]','varchar(100)') AS MonitorName
	FROM @HistogramXMLData.nodes('CBMCore/tblHistogramMonitor') Hxml(x)

;WITH XMLNAMESPACES (DEFAULT 'http://tempuri.org/')
	INSERT INTO [Histogram]
	SELECT
	Hxml.x.value('HistogramId[1]','varchar(100)') AS HistogramId,
	Hxml.x.value('HistogramMonitorId[1]','varchar(100)') AS HistogramMonitorId,
	Hxml.x.value('HistogramUnits[1]','varchar(100)') AS HistogramUnits,
	Hxml.x.value('BinUnits[1]','varchar(100)') AS BinUnits,
	Hxml.x.value('CurveName[1]','varchar(100)') AS CurveName,
	Hxml.x.value('MetricName[1]','varchar(100)') AS MetricName,
	hxml.x.value('Recorded[1]', 'bit') AS Recorded,
	Hxml.x.value('ToolMnem[1]','varchar(100)') AS ToolMnem
	FROM @HistogramXMLData.nodes('CBMCore/tblHistogramMonitor/tblHistogram') Hxml(x)

;WITH XMLNAMESPACES (DEFAULT 'http://tempuri.org/')
	INSERT INTO HistogramBin
	SELECT
	Hxml.x.value('HistogramBinId[1]','varchar(100)') AS HistogramBinId,
	Hxml.x.value('HistogramId[1]','varchar(100)') AS HistogramId, 
    Hxml.x.value('Start[1]','varchar(100)') AS Start,
    Hxml.x.value('End[1]','varchar(100)') AS [End],
	Hxml.x.value('Value[1]','varchar(100)') AS Value
	FROM @HistogramXMLData.nodes('CBMCore/tblHistogramBin') Hxml(x)

UPDATE CoreFiles SET Status=1,BaseXML=@HistogramXMLData WHERE CoreId=@CoreId

  COMMIT TRANSACTION HISTOGRAMIMPORT
END TRY

BEGIN CATCH 
  IF (@@TRANCOUNT > 0)
   BEGIN
      ROLLBACK TRANSACTION HISTOGRAMIMPORT  
   END 

	UPDATE CoreFiles SET Status=0, InputXML = @HistogramXMLData, Messages=(SELECT ERROR_MESSAGE()) 
	WHERE CoreId= @CoreId 

END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[USP_INSERT_ASSETREPAIRTRACK]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[USP_INSERT_ASSETREPAIRTRACK]
   @ARTNumber nvarchar(14)
  ,@ITPFTWOId uniqueidentifier
  ,@SRPFTWOId uniqueidentifier
  ,@FixedAssetId uniqueidentifier
  ,@SerialNum nvarchar(7)
  ,@ItemNum nvarchar(6)
  ,@RNItemNum nvarchar(7)
  ,@ItemDesc nvarchar(29)
  ,@Revision nvarchar(4000)
  ,@AssetNumber nvarchar(7)
  ,@IncidentId uniqueidentifier
  ,@JobId uniqueidentifier
  ,@ToolStringInfoId uniqueidentifier
  ,@NCRNumber int
  ,@FromBranchPlant nvarchar(5)
  ,@ShipToBranchPlant nvarchar(4000)
  ,@Comments nvarchar(4000)
  ,@Status nvarchar(4)
  ,@DateClosed datetime
  ,@IsPFTWorkOrderRequired bit
  ,@IsNCRRequired bit
  ,@PartRepairCost decimal(1,0)
  ,@IsAssetFromField bit
  ,@IsRedTag bit
  ,@FailureCodeId uniqueidentifier
  ,@OutOfSpecCodeId uniqueidentifier
  ,@ProceduralCodeId uniqueidentifier
  ,@AddedBy nvarchar(7)
  ,@DateAdded datetime
  ,@IsIRNotificationSent bit
  ,@FailureType nvarchar(4000)
  ,@WorkOrderNum nvarchar(4000)
  ,@FailureDescriptionCommentId uniqueidentifier
  ,@CorrectiveMaintenanceCommentId uniqueidentifier
  ,@CloseStatus nvarchar(4000)
  ,@NeedsCustomerFeedback bit
  ,@IsNeedsCustomerFeedbackEmailSent bit
  ,@CPARId int
  ,@AssetRepairTrackId uniqueidentifier
As
 Begin

   --SET @AssetRepairTrackId=NEWID();

    INSERT INTO AssetRepairTrack 
    (
     ARTNumber,
     ITPFTWOId, 
     SRPFTWOId, 
     FixedAssetId, 
     SerialNum, 
     ItemNum, 
     RNItemNum, 
     ItemDesc, 
     Revision, 
     AssetNumber, 
     IncidentId, 
     JobId, 
     ToolStringInfoId, 
     NCRNumber, 
     FromBranchPlant, 
     ShipToBranchPlant, 
     Comments, 
     [Status], 
     DateClosed, 
     IsPFTWorkOrderRequired, 
     IsNCRRequired, 
     PartRepairCost, 
     IsAssetFromField, 
     IsRedTag, 
     FailureCodeId, 
     OutOfSpecCodeId, 
     ProceduralCodeId, 
     AddedBy, 
     DateAdded, 
     IsIRNotificationSent, 
     FailureType, 
     WorkOrderNum, 
     FailureDescriptionCommentId, 
     CorrectiveMaintenanceCommentId, 
     CloseStatus,
     NeedsCustomerFeedback, 
     IsNeedsCustomerFeedbackEmailSent, 
     CPARId, 
     AssetRepairTrackId) 
    
    VALUES 
    (
      @ARTNumber,
      @ITPFTWOId, 
      @SRPFTWOId, 
      @FixedAssetId, 
      @SerialNum, 
      @ItemNum, 
      @RNItemNum, 
      @ItemDesc, 
      @Revision, 
      @AssetNumber, 
      @IncidentId, 
      @JobId, 
      @ToolStringInfoId, 
      @NCRNumber, 
      @FromBranchPlant, 
      @ShipToBranchPlant, 
      @Comments, 
      @Status, 
      @DateClosed, 
      @IsPFTWorkOrderRequired, 
      @IsNCRRequired, 
      @PartRepairCost, 
      @IsAssetFromField, 
      @IsRedTag, 
      @FailureCodeId, 
      @OutOfSpecCodeId, 
      @ProceduralCodeId, 
      @AddedBy, 
      @DateAdded, 
      @IsIRNotificationSent, 
      @FailureType, 
      @WorkOrderNum, 
      @FailureDescriptionCommentId, 
      @CorrectiveMaintenanceCommentId, 
      @CloseStatus,
      @NeedsCustomerFeedback, 
      @IsNeedsCustomerFeedbackEmailSent, 
      @CPARId, 
      @AssetRepairTrackId
     )
	 
end
GO
/****** Object:  StoredProcedure [dbo].[USP_INSERT_PFTWO]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure  [dbo].[USP_INSERT_PFTWO]
 @WO_NO nvarchar(11)
,@WorkOrderId uniqueidentifier
,@BranchPlant nvarchar(5)
,@FixedAssetId uniqueidentifier
,@AssetNumber nvarchar(7)
,@ItemNum nvarchar(6)
,@PFTConfigId uniqueidentifier
,@Active bit
,@CurPFTWOSeqId uniqueidentifier
,@UserIdAdded int
,@Revision nvarchar(4000)
,@IsDynamic bit
,@ReferenceDocs nvarchar(4000)
,@SerialNum nvarchar(7)
,@IncidentNum nvarchar(4000)
,@JobNum nvarchar(4000)
,@Combo nvarchar(4000)
,@IsDebug bit
,@IsRTV bit
,@DateAdded datetime
,@PFTType smallint
,@FWSensorId uniqueidentifier
,@SensorName nvarchar(4000)
,@NCRRequestId int
,@JDEWorkOrderNum nvarchar(4000)
,@AssetRepairTrackId uniqueidentifier
,@UpdatedBy int
,@ReasonForChange nvarchar(4)
,@PFTWOId uniqueidentifier

As
Begin         

         INSERT INTO PFTWO 
         (
		 WO_NO, 
		 WorkOrderId,   
         BranchPlant, 
         FixedAssetId, 
         AssetNumber, 
         ItemNum, 
         PFTConfigId, 
         Active, 
         CurPFTWOSeqId, 
         UserIdAdded, 
         Revision, 
         IsDynamic, 
         ReferenceDocs, 
         SerialNum, 
         IncidentNum,              
         JobNum, 
         Combo,   
         IsDebug, 
         IsRTV,   
         DateAdded, 
         PFTType,   
         FWSensorId, 
         SensorName, 
         NCRRequestId, 
         JDEWorkOrderNum, 
         AssetRepairTrackId,
         UpdatedBy, 
         ReasonForChange, 
         PFTWOId) 
         VALUES           
         (
		  @WO_NO, 
          @WorkOrderId, 
          @BranchPlant, 
          @FixedAssetId, 
          @AssetNumber, 
          @ItemNum, 
          @PFTConfigId, 
          @Active, 
          @CurPFTWOSeqId, 
          @UserIdAdded, 
          @Revision, 
          @IsDynamic, 
          @ReferenceDocs, 
          @SerialNum, 
          @IncidentNum, 
          @JobNum, 
          @Combo, 
          @IsDebug, 
          @IsRTV,
          @DateAdded,
          @PFTType,
          @FWSensorId, 
          @SensorName, 
          @NCRRequestId, 
          @JDEWorkOrderNum,
          @AssetRepairTrackId, 
          @UpdatedBy,
          @ReasonForChange, 
          @PFTWOId)


end
GO
/****** Object:  StoredProcedure [dbo].[Usp_Insert_SwapInFeed_To_JdeComponents]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
-- =================================================================================================================
-- Author:		Ganesh Abdagire
-- Create date: 17-March-2021
-- Description:	This procedure is used add processed SwapIn Feed to  JDEWorkOrdeComponent
-- Use AesOpsUAT
-- ===============================================================================================================
Create PROCEDURE [dbo].[Usp_Insert_SwapInFeed_To_JdeComponents]
@ParentFixedAssetId uniqueidentifier,
@ParentNumber varchar(250),
@ParentItemNumber varchar(250),
@ParentRevision varchar(250),
@TopLevelFixedAssetId uniqueidentifier,
@FixedAssetId uniqueidentifier,
@ChildSerNumber varchar(250),
@ChildItemNumber varchar(250),
@ChildRevision  varchar(20),
@Qty int,
@WorkOrderNum varchar(100),
--@WorkOrderType varchar(50),
@InstallDate datetime=NULL,
@InstallBy varchar(15) = null

AS
BEGIN

 print('test');	

END

GO
/****** Object:  StoredProcedure [dbo].[usp_InsertPartEx]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE PROCEDURE [dbo].[usp_InsertPartEx] (
	@SerialNum varchar(15),
	@PartNum varchar(30),
	@BaseCode varchar(25),
	@IsAddByWorkOrder bit
	, @EquipmentStatus varchar(2) = 'AV'
	, @Source varchar(15) = 'SYSTEM'
)
AS
SET NOCOUNT ON

declare @doesExist uniqueidentifier

select top 1 @doesExist = FixedAssetId  from FixedAssets where SerialNum = @SerialNum and InventoryItemNum = @PartNum
if @doesExist is not null
begin
	select 'Already exists:', @SerialNum, @PartNum
	return -1;
end

Declare @PartId uniqueidentifier
Set @PartId = newid()

insert into FixedAssets (FixedAssetId, SerialNum, InventoryItemNum, BranchPlant
  , IsAddByWorkOrder, EquipmentStatus, [Source])
values (@PartId, @SerialNum, @PartNum, @BaseCode
  , @IsAddByWorkOrder, @EquipmentStatus, @Source)

Select @PartId As PartId

SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[usp_InsertToolCodePartType]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_InsertToolCodePartType] 
	@ToolPanel varchar(30), 
	@ToolCode varchar(30),
	@PartTypeId int 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @ToolCodePartTypeId uniqueidentifier
		
	set @ToolCodePartTypeId = null
	select @ToolCodePartTypeId = ToolCodePartTypeId from ToolCodePartTypes (NOLOCK) 
	where ToolCode=@ToolCode and ToolPanel=@ToolPanel and (PartTypeId is null or PartTypeId = @PartTypeId)
	
	if @ToolCodePartTypeId is not null
	begin
		select 'updated ' + @ToolPanel + ':' + @ToolCode

		update ToolCodePartTypes set PartTypeId=@PartTypeId  
		where ToolCodePartTypeId = @ToolCodePartTypeId
	end
	else
	begin
		select 'inserted ' + @ToolPanel + ':' + @ToolCode

		insert into ToolCodePartTypes (ToolPanel, ToolCode, PartTypeId)
		values (@ToolPanel, @ToolCode, @PartTypeId)
	end
	
	
END





/****** Object:  StoredProcedure [dbo].[usp_JobMapBranchPlants]    Script Date: 08/06/2014 13:43:54 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_JarDailyManagement]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[usp_JarDailyManagement]
	@xmlData xml
AS
BEGIN
SET NOCOUNT ON;

DECLARE @sql VARCHAR(MAX)
DECLARE @whereClause VARCHAR(MAX)

DECLARE @date DATE
DECLARE @jobStatus VARCHAR(50)

select @date = T.c.value('.', 'DATE') from @xmlData.nodes('/Filters/Date') T(c)
select @jobStatus = T.c.value('.', 'VARCHAR(50)') from @xmlData.nodes('/Filters/JobStatus') T(c)
SELECT @whereClause = T.c.value('.', 'VARCHAR(MAX)') FROM @xmlData.nodes('/Filters/WhereClause')T(c);

DECLARE @startIndex VARCHAR(10)
DECLARE @pageSize VARCHAR(10)
DECLARE @sortField VARCHAR(100)
DECLARE @sortDir VARCHAR(64)

SELECT @startIndex = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/StartIndex')T(c);
SELECT @pageSize = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/PageSize')T(c);
SELECT @sortField = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/SortField')T(c);
SELECT @sortDir = T.c.value('.', 'VARCHAR(64)') FROM @xmlData.nodes('/Filters/SortDir')T(c);

if @jobStatus = 'Open'
begin
	set @whereClause += ' AND (j.EndDate IS NULL OR CONVERT(DATE, j.EndDate, 101) >= CONVERT(DATE, ''' + CONVERT(varchar(10), @date, 101) + ''', 101))'
end
else if @jobStatus = 'Closed'
begin
	set @whereClause += ' AND (j.EndDate IS NOT NULL AND CONVERT(DATE, j.EndDate, 101) BETWEEN CONVERT(DATE, GetDATE()-10, 101) AND CONVERT(DATE, GETDATE(), 101))'
end

Set @sql = '
	Select JobId
			, JobNumber
			, BranchPlant
			, BranchPlantName
			, RegionDesc
			, CountryDesc
			, CustomerId
			, CustomerName
			, JarWell
			, Rig
			, StartDate
			, EstEndDate
			, EndDate
			, JarActivityId
			, PreviousJarActivityId
			, ISNULL(RunNumber, PreviousRunNumber) as RunNumber
			, ISNULL(RevenueStatus, PreviousRevenueStatus) as RevenueStatus
			, LastSaved
	from(
		Select j.JobId
				, j.JobNumber
				, j.BranchPlant
				, bp.CompanyName as BranchPlantName
				, r.RegionDesc
				, c.CountryDesc
				, j.CustomerId
				, cust.CustomerName
				, j.JarWell
				, j.Rig
				, j.StartDate
				, j.EstDays as EstEndDate
				, j.EndDate
				, (Select top 1 JarActivityId from JarActivities(NOLOCK) ja Where ja.JobId = j.JobId AND Convert(DATE, ja.StartDate, 101) = CONVERT(DATE, ''' + CONVERT(varchar(10), @date, 101) + ''', 101) ORDER by EndDate DESC) as JarActivityId
				, (Select top 1 RunNumber from JarActivities(NOLOCK) ja Where ja.JobId = j.JobId AND Convert(DATE, ja.StartDate, 101) = CONVERT(DATE, ''' + CONVERT(varchar(10), @date, 101) + ''', 101) ORDER by EndDate DESC) as RunNumber
				, (Select top 1 RevenueStatus from JarActivities(NOLOCK) ja Where ja.JobId = j.JobId AND Convert(DATE, ja.StartDate, 101) = CONVERT(DATE, ''' + CONVERT(varchar(10), @date, 101) + ''', 101) ORDER by EndDate DESC) as RevenueStatus
				, (Select top 1 JarActivityId from JarActivities(NOLOCK) ja Where ja.JobId = j.JobId AND Convert(DATE, ja.StartDate, 101) < CONVERT(DATE, ''' + CONVERT(varchar(10), @date, 101) + ''', 101) ORDER by EndDate DESC) as PreviousJarActivityId
				, (Select top 1 RunNumber from JarActivities(NOLOCK) ja Where ja.JobId = j.JobId AND Convert(DATE, ja.StartDate, 101) < CONVERT(DATE, ''' + CONVERT(varchar(10), @date, 101) + ''', 101) ORDER by EndDate DESC) as PreviousRunNumber
				, (Select top 1 RevenueStatus from JarActivities(NOLOCK) ja Where ja.JobId = j.JobId AND Convert(DATE, ja.StartDate, 101) < CONVERT(DATE, ''' + CONVERT(varchar(10), @date, 101) + ''', 101) ORDER by EndDate DESC) as PreviousRevenueStatus
				, (Select top 1 DateLastEdit from JarActivities(NOLOCK) ja Where ja.JobId = j.JobId AND Convert(DATE, ja.StartDate, 101) = CONVERT(DATE, ''' + CONVERT(varchar(10), @date, 101) + ''', 101) ORDER by EndDate DESC) as LastSaved
		from Jobs(NOLOCK) j
		LEFT JOIN BranchPlants(NOLOCK) bp on bp.BranchPlant = j.BranchPlant
		LEFT JOIN Regions(NOLOCK) r on r.Region = j.Region
		LEFT JOIN countries(NOLOCK) c on c.Country = j.Country
		LEFT JOIN Customers(NOLOCK) cust on cust.CustomerId = j.CustomerId
		' + @whereClause + ' AND j.IsDeleted = 0
	)a
'

DECLARE @countSql VARCHAR(MAX)
SET @countSql = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') t'

DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, * From ( ' + 
		@sql + ') query ) page 
		where page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir


EXECUTE(@countSql)
EXECUTE(@pagingSql)


END
GO
/****** Object:  StoredProcedure [dbo].[usp_JarJobServices]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [dbo].[usp_JarJobServices]
	@JobId as uniqueidentifier
AS
	
	CREATE TABLE #JarJobServiceQty
	(
		JobId uniqueidentifier not null,
		RunNumber  varchar(60),
		ToolPanel  varchar(60),
		ToolCode  varchar(60),
		QtyType varchar(25),
		Qty int null
	)

	INSERT INTO #JarJobServiceQty
	SELECT jr.JobId,
			ISNULL(jr.RunNumber, '') as RunNumber,
			ISNULL(i.ToolPanel, '') as ToolPanel,
			ISNULL(i.ToolCode, '') as ToolCode,
			'QtyForecasted',
			SUM(inci.Qty) AS QtyForecasted
	FROM JarRunForecastTools jts WITH(NOLOCK)
	LEFT OUTER JOIN JarRuns jr WITH(NOLOCK) ON jr.JarRunId = jts.JarRunId
	INNER JOIN ItemNumConfigs inc WITH(NOLOCK) ON inc.ItemNumConfigId = jts.ItemNumConfigId 
	INNER JOIN ItemNumConfigs inci WITH(NOLOCK) ON inci.ParentItemNum = inc.ItemNum AND ISNULL(inci.ToolSizeID, -1) = ISNULL(inc.ToolSizeID, -1) AND inci.IsToolString = 1
	INNER JOIN ItemNums i on i.ItemNum = inci.ItemNum
	WHERE jr.JobId = @JobId
	GROUP by jr.JobId, jr.RunNumber, i.ToolPanel, i.ToolCode

	INSERT INTO #JarJobServiceQty
	SELECT jrt.JobId,
		ISNULL(jr.RunNumber, '') as RunNumber, 
		ISNULL(i.ToolPanel, '') as ToolPanel,
		ISNULL(i.ToolCode, '') as ToolCode,
		'QtyAssigned',
		COUNT(tsfa.SerialNum) AS QtyAssigned
	FROM JarRunTools jrt WITH(NOLOCK)
	LEFT OUTER JOIN JarRuns jr WITH(NOLOCK) ON jr.JarRunId = jrt.JarRunId
	INNER JOIN ToolStringFixedAssets tsfa WITH(NOLOCK) ON tsfa.ToolStringId = jrt.ToolStringId
	INNER JOIN ItemNums i WITH(NOLOCK) on i.ItemNum = tsfa.InventoryItemNum
	WHERE jrt.JobId = @JobId
	GROUP by jrt.JobId, jr.RunNumber, i.ToolPanel, i.ToolCode

	INSERT INTO #JarJobServiceQty
	Select 
			w.JobID as JobId,
			ISNULL(r.RunNumber, '') as RunNumber, 
			ISNULL(i.ToolPanel, '') as ToolPanel,
			ISNULL(i.ToolCode, '') as ToolCode,
			'QtyActual',
			COUNT(tsci.SerialNum) AS QtyAssigned
	from ToolStringComponentInfo tsci
	LEFT OUTER JOIN Runs r on r.RunID = tsci.RunID
	LEFT OUTER JOIN Wells w on w.WellID = r.WellID
	LEFT OUTER JOIN ItemNums i WITH(NOLOCK) on i.ItemNum = tsci.InventoryItemNum
	WHERE w.JobID = @JobId
	GROUP by w.JobID, r.RunNumber, i.ToolPanel, i.ToolCode


	SELECT JobId, RunNumber, ToolPanel, ToolCode, QtyForecasted, QtyAssigned, QtyActual
	FROM (
		SELECT * FROM #JarJobServiceQty
	) AS src
	PIVOT (
		SUM(Qty) FOR QtyType IN (QtyForecasted, QtyAssigned, QtyActual)
	) AS pvt
	
	DROP TABLE #JarJobServiceQty






GO
/****** Object:  StoredProcedure [dbo].[usp_JDEWorkOrderStatus]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_JDEWorkOrderStatus]
 @Status varchar(4),  
 @WoType varchar(4),
 @WorkOrderNumber varchar(30)
AS  
  
BEGIN  

	-- Select Wo Status and Description
	SELECT
		s.Dest as WOStatus,  
		r.OptionLabel as WOStatusDescription,  
		State,  
		Source, 
		Sort  
	FROM StatusUpdateRules s  
	LEFT JOIN  SelectOptions r ON r.OptionValue = s.Dest    
	WHERE State = @WoType AND Source = @Status AND SelectName = 'JDEWOStatus' 
	ORDER BY Sort   


	-- Select BusinessUnits
	SELECT   
		bu.BusinessUnit, 
		bu.Description
	FROM  BusinessUnits bu  
	LEFT outer JOIN JDEWorkOrders jde on bu.BranchPlant = jde.Branch
	WHERE jde.WorkOrderNumber = @WorkOrderNumber


	-- Select Current Status with Description
	SELECT OptionValue + ' - ' + OptionLabel as CurrentStatusName 
	FROM SelectOptions WHERE OptionValue = @Status

 END 

GO
/****** Object:  StoredProcedure [dbo].[usp_JobCapacityCategoryReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_JobCapacityCategoryReport]
	@reportName as varchar(50),
	@toolPanel as varchar(25),
	@cPerJob as decimal(15,2),
	@noOfJobs as int,
	@includeQAQCCannotUse as varchar(16),
	@whereClause as varchar(max)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	
	IF(@cPerJob IS NULL OR @cPerJob <= 0)
	BEGIN
		Set @cPerJob = 1
	END
	IF(@whereClause IS NULL OR @whereClause = '')
	BEGIN
		Set @whereClause = '1=1'
	END

	IF(@noOfJobs IS NULL OR @noOfJobs <= 0)
	BEGIN
		Set @noOfJobs = 1
	END
    
	Declare @toolRequired as decimal(15,2)	
	Set @toolRequired = @cPerJob * @noOfJobs
	
	DECLARE @sql as VARCHAR(MAX)
	
	if(@includeQAQCCannotUse != '')
	begin
	
	set @sql = 'Select ROW_NUMBER() OVER(ORDER by DisplayOrder) as ID,a.ReportName,a.GroupName,a.ToolCode,a.DisplayOrder,
		a.Active,
		a.Assigned,
		a.Available,
		a.CanUse,
		a.CanUseCost,
		(CASE WHEN ISNULL(CanUse,0) > 0 THEN (CONVERT(INT,ROUND((CONVERT(DECIMAL,ISNULL(Active,0)) / CONVERT(DECIMAL,ISNULL(CanUse,0)) )*100,0))) ELSE 0 END) as PerCanUse, -- (Active / Can Use)*100
		( CONVERT(Decimal,ISNULL(CanUse,0)) / (' + CAST(@cPerJob AS VARCHAR(50)) + ' * CASE WHEN CHARINDEX(''BAT'', a.ToolCode) >0 THEN 2 ELSE 1 END) ) as NoJobsCanUse, -- Can Use / No Of Jobs
		(CONVERT(INT,ROUND(ISNULL(CanUse,0)-' + CAST(@toolRequired AS VARCHAR(50)) + ',0))) as PlusShort,
		a.InTransit,
		a.Missing,
		a.OutForRepair,
		a.OutOfService,
		a.Parked,
		a.TestingQAQC,
		a.CanNotUse,
		a.CanNotUseCost,
		(CASE WHEN ISNULL(GrandTotal,0) > 0 THEN (CONVERT(INT, ROUND((CONVERT(DECIMAL,ISNULL(CanNotUse,0)) / CONVERT(DECIMAL,ISNULL(GrandTotal,0)) )*100,0))) ELSE 0 END) as PerCanNotUse, -- (CanNotUse / Grand Total)*100,
		( CONVERT(Decimal,ISNULL(CanNotUse,0)) / (' + CAST(@cPerJob AS VARCHAR(50)) + ' * CASE WHEN CHARINDEX(''BAT'', a.ToolCode) >0 THEN 2 ELSE 1 END) ) as NoJobsCanNotUse, -- Can Not Use / No Of Jobs,
		a.GrandTotal
	from
	(
		Select a.ReportName,a.GroupName,a.ToolCode,a.DisplayOrder,
				SUM(CASE WHEN b.EquipmentStatus IN (''WK'') THEN 1 ELSE 0 END) as [Active], --TBD
				SUM(CASE WHEN b.EquipmentStatus IN (''AS'') THEN 1 ELSE 0 END) as [Assigned],
				SUM(CASE WHEN b.EquipmentStatus IN (''AV'') THEN 1 ELSE 0 END) as [Available],
				SUM(CASE WHEN b.EquipmentStatus IN (''WK'',''AS'',''AV'') THEN (IsNull(b.Cost,0) * dbo.fnGetUSDConversionFactor(b.CurrencyCode,NULL)) ELSE 0 END) as [CanUseCost],
				SUM(CASE WHEN b.EquipmentStatus IN (''WK'',''AS'',''AV'') THEN 1 ELSE 0 END) as [CanUse],
				SUM(CASE WHEN b.EquipmentStatus IN (''IT'') THEN 1 ELSE 0 END) as [InTransit],
				SUM(CASE WHEN b.EquipmentStatus IN (''NC'') THEN 1 ELSE 0 END) as [Missing], --TBD
				SUM(CASE WHEN b.EquipmentStatus IN (''UR'') THEN 1 ELSE 0 END) as [OutForRepair],
				SUM(CASE WHEN b.EquipmentStatus IN (''FA'') THEN 1 ELSE 0 END) as [OutOfService], --TBD
				SUM(CASE WHEN b.EquipmentStatus IN (''PT'') THEN 1 ELSE 0 END) as [Parked],
				SUM(CASE WHEN b.EquipmentStatus IN (''II'') THEN 1 ELSE 0 END) as [TestingQAQC],
				SUM(CASE WHEN b.EquipmentStatus IN (''IT'',''NC'',''UR'',''FA'',''PT'',''II'') THEN 1 ELSE 0 END) as [CanNotUse],
				SUM(CASE WHEN b.EquipmentStatus IN (''IT'',''NC'',''UR'',''FA'',''PT'',''II'') THEN (IsNull(b.Cost,0) * dbo.fnGetUSDConversionFactor(b.CurrencyCode,NULL)) ELSE 0 END) as [CanNotUseCost],
				SUM(CASE WHEN b.EquipmentStatus IN (''WK'',''AS'',''AV'',''IT'',''NC'',''UR'',''FA'',''PT'',''II'') THEN 1 ELSE 0 END) as [GrandTotal]
		from JobCapacityReportConfig a
		LEFT OUTER JOIN vwFixedAssetsSearch b on b.ToolCode = a.ToolCode AND b.ToolPanel = a.ToolPanel AND b.IsAsset = 1 AND ' + @whereClause + '
		Where a.ReportName = ''' + @reportName + ''' And a.ToolPanel = ''' + @toolPanel + '''  
		GROUP by a.ReportName,a.GroupName,a.ToolCode,a.DisplayOrder
	) a
	ORDER by a.DisplayOrder'
	end
	else
	begin
	set @sql = 'Select ROW_NUMBER() OVER(ORDER by DisplayOrder) as ID,a.ReportName,a.GroupName,a.ToolCode,a.DisplayOrder,
		a.Active,
		a.Assigned,
		a.Available,
		a.CanUse,
		a.CanUseCost,
		(CASE WHEN ISNULL(CanUse,0) > 0 THEN (CONVERT(INT,ROUND((CONVERT(DECIMAL,ISNULL(Active,0)) / CONVERT(DECIMAL,ISNULL(CanUse,0)) )*100,0))) ELSE 0 END) as PerCanUse, -- (Active / Can Use)*100
		( CONVERT(Decimal,ISNULL(CanUse,0)) / (' + CAST(@cPerJob AS VARCHAR(50)) + ' * CASE WHEN CHARINDEX(''BAT'', a.ToolCode) >0 THEN 2 ELSE 1 END) ) as NoJobsCanUse, -- Can Use / No Of Jobs
		(CONVERT(INT,ROUND(ISNULL(CanUse,0)-' + CAST(@toolRequired AS VARCHAR(50)) + ',0))) as PlusShort,
		a.InTransit,
		a.Missing,
		a.OutForRepair,
		a.OutOfService,
		a.Parked,
		a.TestingQAQC,
		a.CanNotUse,
		a.CanNotUseCost,
		(CASE WHEN ISNULL(GrandTotal,0) > 0 THEN (CONVERT(INT, ROUND((CONVERT(DECIMAL,ISNULL(CanNotUse,0)) / CONVERT(DECIMAL,ISNULL(GrandTotal,0)) )*100,0))) ELSE 0 END) as PerCanNotUse, -- (CanNotUse / Grand Total)*100,
		( CONVERT(Decimal,ISNULL(CanNotUse,0)) / (' + CAST(@cPerJob AS VARCHAR(50)) + ' * CASE WHEN CHARINDEX(''BAT'', a.ToolCode) >0 THEN 2 ELSE 1 END) ) as NoJobsCanNotUse, -- Can Not Use / No Of Jobs,
		a.GrandTotal
	from
	(
		Select a.ReportName,a.GroupName,a.ToolCode,a.DisplayOrder,
				SUM(CASE WHEN b.EquipmentStatus IN (''WK'') THEN 1 ELSE 0 END) as [Active], --TBD
				SUM(CASE WHEN b.EquipmentStatus IN (''AS'') THEN 1 ELSE 0 END) as [Assigned],
				SUM(CASE WHEN b.EquipmentStatus IN (''AV'') THEN 1 ELSE 0 END) as [Available],
				SUM(CASE WHEN b.EquipmentStatus IN (''II'') THEN 1 ELSE 0 END) as [TestingQAQC],
				SUM(CASE WHEN b.EquipmentStatus IN (''WK'',''AS'',''AV'',''II'') THEN (IsNull(b.Cost,0) * dbo.fnGetUSDConversionFactor(b.CurrencyCode,NULL)) ELSE 0 END) as [CanUseCost],
				SUM(CASE WHEN b.EquipmentStatus IN (''WK'',''AS'',''AV'',''II'') THEN 1 ELSE 0 END) as [CanUse],
				SUM(CASE WHEN b.EquipmentStatus IN (''IT'') THEN 1 ELSE 0 END) as [InTransit],
				SUM(CASE WHEN b.EquipmentStatus IN (''NC'') THEN 1 ELSE 0 END) as [Missing], --TBD
				SUM(CASE WHEN b.EquipmentStatus IN (''UR'') THEN 1 ELSE 0 END) as [OutForRepair],
				SUM(CASE WHEN b.EquipmentStatus IN (''FA'') THEN 1 ELSE 0 END) as [OutOfService], --TBD
				SUM(CASE WHEN b.EquipmentStatus IN (''PT'') THEN 1 ELSE 0 END) as [Parked],
				SUM(CASE WHEN b.EquipmentStatus IN (''IT'',''NC'',''UR'',''FA'',''PT'') THEN 1 ELSE 0 END) as [CanNotUse],
				SUM(CASE WHEN b.EquipmentStatus IN (''IT'',''NC'',''UR'',''FA'',''PT'') THEN (IsNull(b.Cost,0) * dbo.fnGetUSDConversionFactor(b.CurrencyCode,NULL)) ELSE 0 END) as [CanNotUseCost],
				SUM(CASE WHEN b.EquipmentStatus IN (''WK'',''AS'',''AV'',''II'',''IT'',''NC'',''UR'',''FA'',''PT'') THEN 1 ELSE 0 END) as [GrandTotal]
		from JobCapacityReportConfig a
		LEFT OUTER JOIN vwFixedAssetsSearch b on b.ToolCode = a.ToolCode AND b.ToolPanel = a.ToolPanel AND b.IsAsset = 1 AND ' + @whereClause + '
		Where a.ReportName = ''' + @reportName + ''' And a.ToolPanel = ''' + @toolPanel + '''  
		GROUP by a.ReportName,a.GroupName,a.ToolCode,a.DisplayOrder
	) a
	ORDER by a.DisplayOrder'
	
	
	end
	
	--print @sql
	exec(@sql)
END







GO
/****** Object:  StoredProcedure [dbo].[usp_JobMapBranchPlants]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_JobMapBranchPlants]
	@xmlData as xml
AS
	SET NOCOUNT ON
	set arithabort ON

	declare @Country varchar(50)
	select @Country = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Country') T(c);

	declare @Region varchar(50)
	select @Region = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Region') T(c);

	declare @JobsPrevMonths int
	select @JobsPrevMonths = -1 * T.c.value('.', 'int') from @xmlData.nodes('/Filters/JobsPreviousMonths') T(c);

	select r.Region, c.Country, d.BranchPlant,d.BranchPlant, d.CompanyName, d.Latitude, d.Longitude
	from BranchPlants (NOLOCK) d
	left join Countries (NOLOCK) c on c.Country = d.Country
	left join Regions (NOLOCK) r on r.Region = d.Region
	where r.Active=1 
	  AND d.Active = 1
	  AND c.Country = IsNull(@Country, c.Country)
	  AND r.Region = IsNull(@Region, r.Region)
	order by r.Region, c.Country, d.BranchPlant

	select r.Region, c.Country, d.BranchPlant, j.ImportStatus as status, count(1) as StatusCount
	from Jobs (NOLOCK) j
	left join BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	left join Countries (NOLOCK) c on c.Country = j.Country
	left join Regions (NOLOCK) r on r.Region = j.Region
	where r.Active = 1 
	  and j.IsJAROnly = 0
	  and j.EndDate is null
	  and c.Country = IsNull(@Country, c.Country)
	  and r.Region = IsNull(@Region, r.Region)
	group by r.Region, c.Country, d.BranchPlant,j.ImportStatus 
	order by r.Region, c.Country, d.BranchPlant,j.ImportStatus 

	select 
	  d.BranchPlant
	  , count(1) as [Runs]
	  , (select count(1) as [Incidents]
			from Incidents (NOLOCK) i
			join Runs (NOLOCK) runs2 on runs2.RunID = i.RunID
			join Wells (NOLOCK) wells2 on wells2.WellID=runs2.WellID 
			join Jobs (NOLOCK) j2 on j2.JobID = wells2.JobID
			left join BranchPlants (NOLOCK) d2 on d2.BranchPlant = j2.BranchPlant
			left join Countries (NOLOCK) c2 on c2.Country = j2.Country
			left join Regions (NOLOCK) r2 on r2.Region = j2.Region
			where i.IsDeleted=0 and runs2.IsDeleted=0
			  and wells2.IsDeleted=0
			  and runs2.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
			  and runs2.MDStart is not NULL and runs2.IsDownHole = 1
			  and r2.Active=1 
			  and d2.Active=1 
			  and r2.Region = r.Region
			  and c2.Country = c.Country
			  and d2.BranchPlant = d.BranchPlant
			  and c2.Country = IsNull(@Country, c2.Country)
			  and r2.Region = IsNull(@Region, r2.Region)
		) as [Incidents]
	  , (select count(1) from Runs (NOLOCK) runs3  
			join Wells (NOLOCK) wells3 on wells3.WellID=runs3.WellID 
			join Jobs (NOLOCK) j3 on j3.JobID = wells3.JobID
			left join BranchPlants (NOLOCK) d3 on d3.BranchPlant = j3.BranchPlant
			left join Countries (NOLOCK) c3 on c3.Country = j3.Country
			left join Regions (NOLOCK) r3 on r3.Region = j3.Region
			where 
			  runs3.IsDeleted=0 and runs3.RunID not in (select i2.RunID from Incidents (NOLOCK) i2 where i2.IsDeleted=0)
			  and wells3.IsDeleted=0
			  and runs3.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
			  and runs3.MDStart is not NULL and runs3.IsDownHole = 1
			  and r3.Active=1 
			  and d3.Active=1 
			  and r3.Region = r.Region
			  and c3.Country = c.Country
			  and d3.BranchPlant = d.BranchPlant
			  and c3.Country = IsNull(@Country, c3.Country)
			  and r3.Region = IsNull(@Region, r3.Region)
		) as [%]
	  , sum(HEL_LWD) as [LWD]
	  , sum(EM) as [EM]
	  , sum(PP) as [HyperPulse]
	  , sum(RSS) as [RSS]
	  , sum(TENSOR) as [TENSOR]
	  , sum(GEOLINK) as [GEOLINK]
	  , sum(BECFIELD) as [BECFIELD]
	  , sum(MOTOR) as [MOTOR]
	  , sum(AGS) as [AGS]
	  , sum(WPR) as [WPR]
	  , sum(GWD) as [GWD]
	from Runs (NOLOCK) runs 
	join Wells (NOLOCK) wells on wells.WellID=runs.WellID 
	join Jobs (NOLOCK) j on j.JobID = wells.JobID
	left join BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	left join Countries (NOLOCK) c on c.Country = j.Country
	left join Regions (NOLOCK) r on r.Region = j.Region
	where runs.IsDeleted=0
	  and wells.IsDeleted=0
	  and j.IsJAROnly = 0
	  and runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	  and runs.MDStart is not NULL and runs.IsDownHole = 1
	  and r.Active=1 
	  and d.Active=1 
	  and c.Country = IsNull(@Country, c.Country)
	  and r.Region = IsNull(@Region, r.Region)
	group by r.Region, c.Country, d.BranchPlant
	order by r.Region, c.Country, d.BranchPlant
	 
select 
	ISNULL(js.RevenueStatus, 'Projected') as RevenueStatus
	, dist.BranchPlant
	, COUNT(*) as JobCount
    , SUM(ISNULL(js.LWD,0)) AS LWD
    , SUM(ISNULL(js.RSS,0)) AS RSS
    , SUM(ISNULL(js.EM,0)) AS EM
    , SUM(ISNULL(js.PP,0)) AS PP
    , SUM(ISNULL(js.MWD,0)) AS MWD
    , SUM(ISNULL(js.DD,0)) AS DD
    , SUM(ISNULL(js.Survey,0)) AS Survey
FROM Jobs (NOLOCK) j
LEFT JOIN vwJarLatestOpsActivityServices(NOLOCK) js ON js.JobId = j.JobId
LEFT JOIN BranchPlants (NOLOCK) dist ON dist.BranchPlant = j.BranchPlant
LEFT JOIN Countries (NOLOCK) c ON c.Country = j.Country
LEFT JOIN Regions (NOLOCK) r ON r.Region = j.Region
WHERE r.Active =  1
	AND (j.EndDate is NULL OR j.EndDate >= CONVERT(VARCHAR, GETDATE(), 101))
	AND ISNULL(js.RevenueStatus, 'Projected') IN ('Operating', 'Standby or in transit on Revenue','Standby or in transit off Revenue','Projected')
GROUP BY ISNULL(js.RevenueStatus, 'Projected'), dist.BranchPlant
 
select 
	d.BranchPlant as Location,
	p.OpsGFAServiceLine as ProductLine,
	count(*) as GFACount
from GFAIncidents (NOLOCK) gfa
LEFT JOIN Jobs (NOLOCK) j ON j.JobID = gfa.JobID
left JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
left JOIN Countries (NOLOCK) cntry on cntry.Country = j.Country
left JOIN Regions (NOLOCK) r on r.Region = j.Region
JOIN ProductLines (NOLOCK) p on p.SystemName = gfa.ProductLine
WHERE gfa.FailureDate >= convert(varchar, getdate()-7,101)
group by d.BranchPlant, p.OpsGFAServiceLine

select 
	d.BranchPlant as Location,
	p.OpsGFAServiceLine as ProductLine,
	count(*) as GFACount
from GFAIncidents (NOLOCK) gfa
LEFT JOIN Jobs (NOLOCK) j ON j.JobID = gfa.JobID
left JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
left JOIN Countries (NOLOCK) cntry on cntry.Country = j.Country
left JOIN Regions (NOLOCK) r on r.Region = j.Region
JOIN ProductLines (NOLOCK) p on p.SystemName = gfa.ProductLine
WHERE gfa.FailureDate >= convert(varchar, getdate()-30,101) 
group by d.BranchPlant, p.OpsGFAServiceLine

-- Top 5 Clients
select BranchPlant, CustomerName as Customer, [Circ Hrs], DownHole AS Runs, Incidents AS I
from (
	select D.BranchPlant, cl.CustomerName, 
		sum(convert(float, r.CircHrs, 0)) as [Circ Hrs], 
		SUM(CONVERT(int, r.IsDownHole, 0)) as [DownHole],
		COUNT(i.IncidentID) as Incidents,
		RANK() over (Partition By d.BranchPlant order by sum(convert(float, r.CircHrs, 0)) desc) as [Rank]
	from Jobs (NOLOCK) j
		join Wells (NOLOCK) w on j.JobId = w.JobId
		join Runs (NOLOCK) r on w.WellId = r.WellId
		left join Incidents (NOLOCK) i on i.RunID = r.RunID
		left join BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
		left join Countries (NOLOCK) c on c.Country = j.Country
		left join Regions (NOLOCK) re on re.Region = j.Region
		join Customers (NOLOCK) cl on j.CustomerId = cl.CustomerId
	where w.IsDeleted = 0
		and r.IsDeleted = 0 
		and d.Active = 1
		and re.Active = 1
		and r.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
		and c.Country = IsNull(@Country, c.Country)
		and re.Region = IsNull(@Region, re.Region)
	group by d.BranchPlant, cl.CustomerName
) As T
where T.[RANK] <= 5
order by BranchPlant, [Circ Hrs] desc

-- Top 5 Crisis Job
select BranchPlant, [Job Number], [% Failed], DownHole AS Runs, Incidents AS I
from (
	select BranchPlant, [Job Number], DownHole, Incidents,
		Convert(float, Incidents, 0)/Runs As [% Failed], 
		Rank() over (Partition By BranchPlant Order By Convert(float, Incidents, 0)/Runs DESC) AS [Rank]
	from (
		select d.BranchPlant, j.JobNumber as [Job Number]
			, count(1) as [Runs]
			, SUM(runs.IsDownHole) AS DownHole
			, (select count(1) as [Incidents]
				from Incidents (NOLOCK) i
					join Runs (NOLOCK) runs2 on runs2.RunID = i.RunID
					join Wells (NOLOCK) wells2 on wells2.WellID=runs2.WellID 
					join Jobs (NOLOCK) j2 on j2.JobID = wells2.JobID
					left join BranchPlants (NOLOCK) d2 on d2.BranchPlant = j2.BranchPlant
					left join Countries (NOLOCK) c2 on c2.Country = j2.Country
					left join Regions (NOLOCK) r2 on r2.Region = j2.Region
					join Customers (NOLOCK) co2 on j2.CustomerId = co2.CustomerId
				where i.IsDeleted=0 and runs2.IsDeleted=0
					and wells2.IsDeleted=0
					and runs2.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
					and r2.Active=1 
					and d2.Active=1 
					and j2.JobNumber = j.JobNumber
					and c2.Country = c2.Country
				) as [Incidents]
		from Runs (NOLOCK) runs 
			join Wells (NOLOCK) wells on wells.WellID=runs.WellID 
			join Jobs (NOLOCK) j on j.JobID = wells.JobID
			left join BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
			left join Countries (NOLOCK) c on c.Country = j.Country
			left join Regions (NOLOCK) r on r.Region = j.Region
			join Customers (NOLOCK) co on j.CustomerId = co.CustomerId
		where runs.IsDeleted=0
			and wells.IsDeleted=0
			and j.IsJAROnly = 0
			and runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
			and r.Active=1 
			and d.Active=1 
			and c.Country = IsNull(@Country, c.Country)
			and r.Region = IsNull(@Region, r.Region)
		group by d.BranchPlant, j.JobNumber
	) as tmp
) as tmp2
where [RANK] <= 5
order by BranchPlant, [% Failed] desc, [Job Number]

	SET NOCOUNT OFF

--  JAR Service Lines
Select distinct 
	OpsServiceLine
	, JarActivityServiceLine 
from ProductLines
Where OpsServiceLine IS NOT NULL
UNION
Select 'MWD', 'HP'
UNION
Select 'MWD', 'EM'

-- GFA Service Lines
Select distinct 
	OpsGFAServiceLine
	, SystemName
from ProductLines
Where OpsGFAServiceLine IS NOT NULL



SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_JobMapCountries]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_JobMapCountries]
	@xmlData as xml
AS
	SET NOCOUNT ON
	set arithabort ON

	declare @Region varchar(50)
	select @Region = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Region') T(c);

	declare @JobsPrevMonths int
	select @JobsPrevMonths = -1 * T.c.value('.', 'int') from @xmlData.nodes('/Filters/JobsPreviousMonths') T(c);

	select r.Region, c.Country,c.CountryDesc, c.Latitude, c.Longitude
	from Countries (NOLOCK) c
	join Regions (NOLOCK) r on r.Region = c.RegionCode
	where r.Active = 1 
	  AND r.Region = IsNull(@Region, r.Region)
	order by r.Region, c.Country

	select r.Region, c.Country, j.ImportStatus as status, count(1) as StatusCount
	from Jobs(NOLOCK) j
	left join BranchPlants(NOLOCK) d on d.BranchPlant = j.BranchPlant
	left join Countries(NOLOCK) c on c.Country = j.Country
	left join Regions(NOLOCK) r on r.Region = j.Region
	where 1=1
	  and r.Active=1 
	  and j.IsJAROnly = 0
	  and j.EndDate is null
	  and r.Region = IsNull(@Region, r.Region)
	group by r.Region, c.Country,j.ImportStatus 
	order by r.Region, c.Country,j.ImportStatus 

	select 
	  c.Country
	  , count(1) as [Runs]
	  , (select count(1) as [Incidents]
			from Incidents (NOLOCK) i
			join Runs (NOLOCK) runs2 on runs2.RunID = i.RunID
			join Wells (NOLOCK) wells2 on wells2.WellID=runs2.WellID 
			join Jobs (NOLOCK) j2 on j2.JobID = wells2.JobID
			left join BranchPlants (NOLOCK) d2 on d2.BranchPlant = j2.BranchPlant
			left join Countries (NOLOCK) c2 on c2.Country = j2.Country
			left join Regions (NOLOCK) r2 on r2.Region = j2.Region
			where i.IsDeleted=0 and runs2.IsDeleted=0
			  and wells2.IsDeleted=0
			  and runs2.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
			  and runs2.MDStart is not NULL and runs2.IsDownHole = 1
			  and r2.Active=1 
			  and d2.Active=1 
			  and r2.Region = r.Region
			  and c2.Country = c.Country
			  and r2.Region = IsNull(@Region, r.Region)
		) as [Incidents]
	  , (select count(1) from Runs (NOLOCK) runs3  
			join Wells (NOLOCK) wells3 on wells3.WellID=runs3.WellID 
			join Jobs (NOLOCK) j3 on j3.JobID = wells3.JobID
			left join BranchPlants (NOLOCK) d3 on d3.BranchPlant = j3.BranchPlant
			left join Countries (NOLOCK) c3 on c3.Country = j3.Country
			left join Regions (NOLOCK) r3 on r3.Region = j3.Region
			where 
			  runs3.IsDeleted=0 and runs3.RunID not in (select i2.RunID from Incidents (NOLOCK) i2 where i2.IsDeleted=0)
			  and wells3.IsDeleted=0
			  and runs3.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
			  and runs3.MDStart is not NULL and runs3.IsDownHole = 1
			  and r3.Active=1 
			  and d3.Active=1 
			  and r3.Region = r.Region
			  and c3.Country = c.Country
			  and r3.Region = IsNull(@Region, r.Region)
		) as [%]
	  , sum(HEL_LWD) as [LWD]
	  , sum(EM) as [EM]
	  , sum(PP) as [HyperPulse]
	  , sum(RSS) as [RSS]
	  , sum(TENSOR) as [TENSOR]
	  , sum(GEOLINK) as [GEOLINK]
	  , sum(BECFIELD) as [BECFIELD]
	  , sum(MOTOR) as [MOTOR]
	  , sum(AGS) as [AGS]
	  , sum(WPR) as [WPR]
	  , sum(GWD) as [GWD]
	from Runs (NOLOCK) runs 
	join Wells (NOLOCK) wells on wells.WellID=runs.WellID 
	join Jobs (NOLOCK) j on j.JobID = wells.JobID
	left join BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	left join Countries (NOLOCK) c on c.Country = j.Country
	left join Regions (NOLOCK) r on r.Region = j.Region
	where runs.IsDeleted=0
	  and wells.IsDeleted=0
	  and j.IsJAROnly = 0
	  and runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	  and runs.MDStart is not NULL and runs.IsDownHole = 1
	  and r.Active=1 
	  and d.Active=1 
	  and r.Region = IsNull(@Region, r.Region)
	group by r.Region, c.Country
	order by r.Region, c.Country
	  
select 
	ISNULL(js.RevenueStatus, 'Projected') as RevenueStatus
	, c.Country
	, COUNT(*) as JobCount
    , SUM(ISNULL(js.LWD,0)) AS LWD
    , SUM(ISNULL(js.RSS,0)) AS RSS
    , SUM(ISNULL(js.EM,0)) AS EM
    , SUM(ISNULL(js.PP,0)) AS PP
    , SUM(ISNULL(js.MWD,0)) AS MWD
    , SUM(ISNULL(js.DD,0)) AS DD
    , SUM(ISNULL(js.Survey,0)) AS Survey
	FROM Jobs (NOLOCK) j
LEFT JOIN vwJarLatestOpsActivityServices(NOLOCK) js ON js.JobId = j.JobId
LEFT JOIN BranchPlants (NOLOCK) dist ON dist.BranchPlant = j.BranchPlant
LEFT JOIN Countries (NOLOCK) c ON c.Country = j.Country
LEFT JOIN Regions (NOLOCK) r ON r.Region = j.Region
WHERE r.Active =  1
	AND (j.EndDate is NULL OR j.EndDate >= CONVERT(VARCHAR, GETDATE(), 101))
	AND ISNULL(js.RevenueStatus, 'Projected') IN ('Operating', 'Standby or in transit on Revenue','Standby or in transit off Revenue','Projected')
GROUP BY ISNULL(js.RevenueStatus, 'Projected'), c.Country

select 
	cntry.Country as Location,
	p.OpsGFAServiceLine as ProductLine,
	count(*) as GFACount
from GFAIncidents (NOLOCK) gfa
LEFT JOIN Jobs (NOLOCK) j ON j.JobID = gfa.JobID
left JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
left JOIN Countries (NOLOCK) cntry on cntry.Country = j.Country
left JOIN Regions (NOLOCK) r on r.Region = j.Region
JOIN ProductLines (NOLOCK) p on p.SystemName = gfa.ProductLine
WHERE gfa.FailureDate >= convert(varchar, getdate()-7,101)
group by cntry.Country, p.OpsGFAServiceLine

select 
	cntry.Country as Location,
	p.OpsGFAServiceLine as ProductLine,
	count(*) as GFACount
from GFAIncidents (NOLOCK) gfa
LEFT JOIN Jobs (NOLOCK) j ON j.JobID = gfa.JobID
left JOIN BranchPlants (NOLOCK) d ON d.BranchPlant = j.BranchPlant
left JOIN Countries (NOLOCK) cntry ON cntry.Country = j.Country
left JOIN Regions (NOLOCK) r ON r.Region = j.Region
JOIN ProductLines (NOLOCK) p on p.SystemName = gfa.ProductLine
WHERE gfa.FailureDate >= CONVERT(VARCHAR, GETDATE()-30,101)
GROUP BY cntry.Country, p.OpsGFAServiceLine


-- Top 5 Clients
select Country, CustomerName as Customer, [Circ Hrs], DownHole AS Runs, Incidents AS I
from (
	select c.Country, cl.CustomerName, 
		sum(convert(float, r.CircHrs, 0)) AS [Circ Hrs], 
		SUM(CONVERT(int, r.IsDownHole, 0)) AS [DownHole],
		COUNT(i.IncidentID) as Incidents,
		RANK() OVER (PARTITION BY c.Country ORDER BY SUM(CONVERT(FLOAT, r.CircHrs, 0)) DESC) AS [Rank]
	from Jobs (NOLOCK) j
		JOIN Wells (NOLOCK) w on j.JobId = w.JobId
		JOIN Runs (NOLOCK) r on w.WellId = r.WellId
		LEFT join Incidents (NOLOCK) i on i.RunID = r.RunID
		left JOIN BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
		left JOIN Countries (NOLOCK) c on c.Country = j.Country
		left JOIN Regions (NOLOCK) re on re.Region = j.Region
		JOIN Customers (NOLOCK) cl on j.CustomerId = cl.CustomerId
	where w.IsDeleted = 0
		AND r.IsDeleted = 0 
		AND d.Active = 1
		AND r.StartDate >= CONVERT(VARCHAR, DATEADD(m, @JobsPrevMonths, GETDATE()), 101)
		AND re.Region = ISNULL(@Region, re.Region)
	GROUP BY c.Country, cl.CustomerName
) AS T
WHERE T.[RANK] <= 5
ORDER BY Country, [Circ Hrs] DESC

-- Top 5 Crises
SELECT Country, [Job Number], [% Failed], DownHole AS DH, Incidents AS I
FROM (
	SELECT Country, [Job Number], DownHole, Incidents,
		CONVERT(FLOAT, Incidents, 0)/Runs As [% Failed], 
		RANK() OVER (PARTITION BY Country ORDER BY CONVERT(FLOAT, Incidents, 0)/Runs DESC) AS [Rank]
	FROM (
		SELECT c.Country, j.JobNumber as [Job Number]
			, COUNT(1) AS [Runs]
			, SUM(runs.IsDownHole) AS DownHole
			, (SELECT COUNT(1) AS [Incidents]
				FROM Incidents (NOLOCK) i
					JOIN Runs (NOLOCK) runs2 ON runs2.RunID = i.RunID
					JOIN Wells (NOLOCK) wells2 ON wells2.WellID=runs2.WellID 
					JOIN Jobs (NOLOCK) j2 ON j2.JobID = wells2.JobID
					left JOIN BranchPlants (NOLOCK) d2 ON d2.BranchPlant = j2.BranchPlant
					left JOIN Countries (NOLOCK) c2 ON c2.Country = j2.Country
					left JOIN Regions (NOLOCK) r2 ON r2.Region = j2.Region
					JOIN Customers (NOLOCK) co2 ON j2.CustomerId = co2.CustomerId
				WHERE i.IsDeleted=0 AND runs2.IsDeleted=0
					AND wells2.IsDeleted=0
					AND runs2.StartDate >= CONVERT(VARCHAR, DATEADD(m, @JobsPrevMonths, GETDATE()), 101)
					AND r2.Active=1 
					AND d2.Active=1 
					AND j2.JobNumber = j.JobNumber
					AND c2.Country = c2.Country
				) AS [Incidents]
		FROM Runs (NOLOCK) runs 
			JOIN Wells (NOLOCK) wells ON wells.WellID=runs.WellID 
			JOIN Jobs (NOLOCK) j ON j.JobID = wells.JobID
			left JOIN BranchPlants (NOLOCK) d ON d.BranchPlant = j.BranchPlant
			left JOIN Countries (NOLOCK) c ON c.Country = j.Country
			left JOIN Regions (NOLOCK) r ON r.Region = j.Region
			JOIN Customers (NOLOCK) co ON j.CustomerId = co.CustomerId
		WHERE runs.IsDeleted=0
			AND wells.IsDeleted=0
			AND j.IsJAROnly = 0
			AND runs.StartDate >= CONVERT(VARCHAR, DATEADD(m, @JobsPrevMonths, GETDATE()), 101)
			AND r.Active=1 
			AND d.Active=1 
			AND r.Region = ISNULL(@Region, r.Region)
		GROUP BY c.Country, j.JobNumber
	) AS tmp
) AS tmp2
WHERE [RANK] <= 5
ORDER BY Country, [% Failed] DESC, [Job Number]

	SET NOCOUNT OFF

--  JAR Service Lines
Select distinct 
	OpsServiceLine
	, JarActivityServiceLine 
from ProductLines
Where OpsServiceLine IS NOT NULL
UNION
Select 'MWD', 'HP'
UNION
Select 'MWD', 'EM'

-- GFA Service Lines
Select distinct 
	OpsGFAServiceLine
	, SystemName
from ProductLines
Where OpsGFAServiceLine IS NOT NULL



SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_JobMapRegions]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_JobMapRegions]
	@xmlData as xml
AS
	SET NOCOUNT ON
	set arithabort ON

	declare @JobsPrevMonths int
	select @JobsPrevMonths = -1 * T.c.value('.', 'int') from @xmlData.nodes('/Filters/JobsPreviousMonths') T(c);

	select r.Region, r.RegionDesc, r.Latitude, r.Longitude
	from Regions(NOLOCK) r
	where r.Active = 1 
	union 
	select 'Global' as Region,'Global' as RegionDesc, '30.35' as Latitude, '-35.40' as Longitude
	order by Region
	
	-- Job By Status
	select r.Region, j.ImportStatus as status, count(1) as StatusCount
	from Jobs(NOLOCK) j
	left join BranchPlants(NOLOCK) bp on bp.BranchPlant = j.BranchPlant
	left join Countries(NOLOCK) c on c.Country = j.Country
	left join Regions(NOLOCK) r on r.Region = j.Region
	where r.Active = 1 
	  and j.EndDate is null
	  and j.IsJAROnly = 0
	group by r.Region, j.ImportStatus
	order by r.Region, j.ImportStatus
	
	-- Runs - DownHole  
	select 
	  r.Region
	  , count(1) as [Runs]
	  , (select count(1) as [Incidents]
			from Incidents (NOLOCK) i
			join Runs (NOLOCK) runs2 on runs2.RunID = i.RunID
			join Wells (NOLOCK) wells2 on wells2.WellID=runs2.WellID 
			join Jobs (NOLOCK) j2 on j2.JobID = wells2.JobID
			left join BranchPlants (NOLOCK) d2 on d2.BranchPlant = j2.BranchPlant
			left join Countries (NOLOCK) c2 on c2.Country = j2.Country
			left join Regions (NOLOCK) r2 on r2.Region = j2.Region
			where i.IsDeleted=0 and runs2.IsDeleted=0
			  and wells2.IsDeleted=0
			  and runs2.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
			  and runs2.MDStart is not NULL and runs2.IsDownHole = 1
			  and r2.Active=1 
			  and d2.Active=1 
			  and r2.Region = r.Region
		) as [Incidents]
	  , (select count(1) from Runs (NOLOCK) runs3  
			join Wells (NOLOCK) wells3 on wells3.WellID=runs3.WellID 
			join Jobs (NOLOCK) j3 on j3.JobID = wells3.JobID
			left join BranchPlants (NOLOCK) d3 on d3.BranchPlant = j3.BranchPlant
			left join Countries (NOLOCK) c3 on c3.Country = j3.Country
			left join Regions (NOLOCK) r3 on r3.Region = j3.Region
			where 
			  runs3.IsDeleted=0 and runs3.RunID not in (select i2.RunID from Incidents (NOLOCK) i2 where i2.IsDeleted=0)
			  and wells3.IsDeleted=0
			  and runs3.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
			  and runs3.MDStart is not NULL and runs3.IsDownHole = 1
			  and r3.Active=1 
			  and d3.Active=1 
			  and r3.Region = r.Region
		) as [%]
	  , sum(HEL_LWD) as [LWD]
	  , sum(EM) as [EM]
	  , sum(PP) as [HyperPulse]
	  , sum(RSS) as [RSS]
	  , sum(TENSOR) as [TENSOR]
	  , sum(GEOLINK) as [GEOLINK]
	  , sum(BECFIELD) as [BECFIELD]
	  , sum(MOTOR) as [MOTOR]
	  , sum(AGS) as [AGS]
	  , sum(WPR) as [WPR]
	  , sum(GWD) as [GWD]
	from Runs (NOLOCK) runs 
	join Wells (NOLOCK) wells on wells.WellID=runs.WellID 
	join Jobs (NOLOCK) j on j.JobID = wells.JobID
	left join BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
	left join Countries (NOLOCK) c on c.Country = j.Country
	left join Regions (NOLOCK) r on r.Region = j.Region
	where runs.IsDeleted=0
	  and wells.IsDeleted=0
	  and j.IsJAROnly = 0
	  and runs.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	  and runs.MDStart is not NULL and runs.IsDownHole = 1
	  and r.Active=1 
	  and d.Active=1 
	group by r.Region
	order by r.Region

-- Jobs by Service Line
select 
	ISNULL(js.RevenueStatus, 'Projected') as RevenueStatus
    , r.Region
    , COUNT(*) as JobCount
    , SUM(ISNULL(js.LWD,0)) AS LWD
    , SUM(ISNULL(js.RSS,0)) AS RSS
    , SUM(ISNULL(js.EM,0)) AS EM
    , SUM(ISNULL(js.PP,0)) AS PP
    , SUM(ISNULL(js.MWD,0)) AS MWD
    , SUM(ISNULL(js.DD,0)) AS DD
    , SUM(ISNULL(js.Survey,0)) AS Survey
FROM Jobs(NOLOCK) j
LEFT JOIN vwJarLatestOpsActivityServices(NOLOCK) js ON js.JobID = j.JobID
LEFT JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
left join Countries(NOLOCK) c ON c.Country = j.Country
left join Regions(NOLOCK) r ON r.Region = j.Region
WHERE r.Active =  1
    AND (j.EndDate is NULL OR j.EndDate > CONVERT(VARCHAR, GETDATE(), 101))
    AND ISNULL(js.RevenueStatus, 'Projected') IN ('Operating', 'Standby or in transit on Revenue','Standby or in transit off Revenue','Projected')
GROUP BY ISNULL(js.RevenueStatus, 'Projected'), r.Region

UNION

SELECT 
	ISNULL(js.RevenueStatus, 'Projected') as RevenueStatus
	, 'Global'
	, COUNT(*) as JobCount
    , SUM(ISNULL(js.LWD,0)) AS LWD
    , SUM(ISNULL(js.RSS,0)) AS RSS
    , SUM(ISNULL(js.EM,0)) AS EM
    , SUM(ISNULL(js.PP,0)) AS PP
    , SUM(ISNULL(js.MWD,0)) AS MWD
    , SUM(ISNULL(js.DD,0)) AS DD
    , SUM(ISNULL(js.Survey,0)) AS Survey
FROM Jobs (NOLOCK) j
LEFT JOIN vwJarLatestOpsActivityServices js ON js.JobID = j.JobID
LEFT JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
left join Countries(NOLOCK) c on c.Country = j.Country
left join Regions(NOLOCK) r on r.Region = j.Region
WHERE r.Active =  1
	AND (j.EndDate is NULL OR j.EndDate >= CONVERT(VARCHAR, GETDATE(), 101))
	AND ISNULL(js.RevenueStatus, 'Projected') in ('Operating', 'Standby or in transit on Revenue','Standby or in transit off Revenue','Projected')
GROUP BY ISNULL(js.RevenueStatus, 'Projected')
ORDER BY RevenueStatus

--GFAs <= 7 days
SELECT 
	r.Region AS Location,
	p.OpsGFAServiceLine AS ProductLine,
	count(*) AS GFACount
FROM GFAIncidents (NOLOCK) gfa
LEFT JOIN Jobs (NOLOCK) j ON j.JobID = gfa.JobID
left JOIN BranchPlants (NOLOCK) d ON d.BranchPlant = j.BranchPlant
left JOIN Countries (NOLOCK) cntry ON cntry.Country = j.Country
left JOIN Regions (NOLOCK) r ON r.Region = j.Region
JOIN ProductLines (NOLOCK) p ON p.SystemName = gfa.ProductLine
WHERE gfa.FailureDate >= CONVERT(VARCHAR, GETDATE()-7, 101)
group by r.Region, p.OpsGFAServiceLine

--GFAs <= 30 days
SELECT 
	r.Region AS Location,
	p.OpsGFAServiceLine AS ProductLine,
	count(*) AS GFACount
FROM GFAIncidents (NOLOCK) gfa
LEFT JOIN Jobs (NOLOCK) j ON j.JobID = gfa.JobID
left JOIN BranchPlants (NOLOCK) d ON d.BranchPlant = j.BranchPlant
left JOIN Countries (NOLOCK) cntry ON cntry.Country = j.Country
left JOIN Regions (NOLOCK) r ON r.Region = j.Region
JOIN ProductLines (NOLOCK) p ON p.SystemName = gfa.ProductLine
WHERE gfa.FailureDate >= CONVERT(VARCHAR, GETDATE()-30,101)
group by r.Region, p.OpsGFAServiceLine

-- Top 5 Clients by Total Circ. Hrs
select Region, CustomerName, [Circ Hrs], [DownHole] AS [Runs], Incidents AS I
from (
	select re.Region, cl.CustomerName, 
		sum(convert(float, r.CircHrs, 0)) as [Circ Hrs], 
		SUM(CONVERT(int, r.IsDownHole, 0)) as [DownHole],
		COUNT(i.IncidentID) as Incidents,
		RANK() over (Partition By re.Region order by sum(convert(float, r.CircHrs, 0)) desc) as [Rank]
	from Jobs (NOLOCK) j
		join Wells (NOLOCK) w on j.JobId = w.JobId
		join Runs (NOLOCK) r on w.WellId = r.WellId
		left join Incidents (NOLOCK) i on i.RunID = r.RunID
		left join BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
		left join Countries (NOLOCK) c on c.Country = j.Country
		left join Regions (NOLOCK) re on re.Region = j.Region
		join Customers (NOLOCK) cl on j.CustomerId = cl.CustomerId
	where w.IsDeleted = 0
		and r.IsDeleted = 0 
		and d.Active = 1
		and re.Active = 1
		--and r.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
		and r.MDStart IS NOT NULL
	group by re.Region, cl.CustomerName
) As T
where T.[RANK] <= 5
union
select Region, CustomerName as Customer, [Circ Hrs], [DownHole] AS Runs, Incidents AS I
from (
	select 'Global' As Region, cl.CustomerName, 
		sum(convert(float, r.CircHrs, 0)) as [Circ Hrs], 
		SUM(CONVERT(int, r.IsDownHole, 0)) as [DownHole],
		COUNT(i.IncidentID) as Incidents,
		RANK() over (Partition By 'Global' order by sum(convert(float, r.CircHrs, 0)) desc) as [Rank]
	from Jobs (NOLOCK) j
		join Wells (NOLOCK) w on j.JobId = w.JobId
		join Runs (NOLOCK) r on w.WellId = r.WellId
		left join Incidents (NOLOCK) i on i.RunID = r.RunID
		left join BranchPlants (NOLOCK) d on d.BranchPlant = j.BranchPlant
		left join Countries (NOLOCK) c on c.Country = j.Country
		left join Regions (NOLOCK) re on re.Region = j.Region
		join Customers (NOLOCK) cl on j.CustomerId = cl.CustomerId
	where w.IsDeleted = 0
		and r.IsDeleted = 0 
		and d.Active = 1
		and re.Active = 1
		--and r.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
	group by cl.CustomerName
) As T
where T.[RANK] <= 5
order by Region, [Circ Hrs] desc

-- Top 5 Crisis Job
select Region, [Job Number], [% Failed], DownHole AS Runs, Incidents AS I
from (
	select Region, [Job Number], DownHole, Incidents,
		Convert(float, Incidents, 0)/Runs As [% Failed], 
		Rank() over (Partition By Region Order By Convert(float, Incidents, 0)/Runs DESC) AS Rank
	from (
		select r.Region, j.JobNumber as [Job Number]
			, count(1) as [Runs]
			, SUM(runs.IsDownHole) AS DownHole
			, (select count(1) as [Incidents]
				from Incidents (NOLOCK) i
					join Runs (NOLOCK) runs2 on runs2.RunID = i.RunID
					join Wells (NOLOCK) wells2 on wells2.WellID=runs2.WellID 
					join Jobs (NOLOCK) j2 on j2.JobID = wells2.JobID
					left join BranchPlants (NOLOCK) d2 on d2.BranchPlant = j2.BranchPlant
					left join Countries (NOLOCK) c2 on c2.Country = j2.Country
					left join Regions (NOLOCK) r2 on r2.Region = j2.Region
					join Customers (NOLOCK) co2 on j2.CustomerId = co2.CustomerId
				where i.IsDeleted=0 and runs2.IsDeleted=0
					and wells2.IsDeleted=0
					and runs2.StartDate >= convert(varchar, dateadd(m, @JobsPrevMonths, getdate()), 101)
					and runs2.MDStart is not NULL
					and r2.Active=1 
					and d2.Active=1 
					and j2.JobNumber = j.JobNumber
					and r2.Region = r.Region
				) AS [Incidents]
		FROM Runs (NOLOCK) runs 
			JOIN Wells (NOLOCK) wells ON wells.WellID=runs.WellID 
			JOIN Jobs (NOLOCK) j ON j.JobID = wells.JobID
			left JOIN BranchPlants (NOLOCK) d ON d.BranchPlant = j.BranchPlant
			left JOIN Countries (NOLOCK) c ON c.Country = j.Country
			left JOIN Regions (NOLOCK) r ON r.Region = j.Region
			JOIN Customers (NOLOCK) co ON j.CustomerId = co.CustomerId
		WHERE runs.IsDeleted=0
			AND wells.IsDeleted=0
			AND j.IsJAROnly = 0
			AND runs.StartDate >= CONVERT(VARCHAR, DATEADD(m, @JobsPrevMonths, GETDATE()), 101)
			AND runs.MDStart IS NOT NULL
			AND r.Active=1 
			AND d.Active=1
		GROUP BY r.Region, j.JobNumber
	) AS tmp
) AS tmp2
WHERE [RANK] <= 5
UNION
SELECT Region, [Job Number], [% Failed], DownHole AS DH, Incidents AS I
FROM (
	SELECT Region, [Job Number], DownHole, Incidents,
		CONVERT(FLOAT, Incidents, 0)/Runs AS [% Failed], 
		Rank() OVER (PARTITION BY Region ORDER BY CONVERT(FLOAT, Incidents, 0)/Runs DESC) AS Rank
	FROM (
		SELECT 'Global' AS Region, j.JobNumber AS [Job Number]
			, count(1) AS [Runs]
			, SUM(runs.IsDownHole) AS DownHole
			, (SELECT COUNT(1) AS [Incidents]
				FROM Incidents (NOLOCK) i
					JOIN Runs (NOLOCK) runs2 ON runs2.RunID = i.RunID
					JOIN Wells (NOLOCK) wells2 ON wells2.WellID=runs2.WellID 
					JOIN Jobs (NOLOCK) j2 ON j2.JobID = wells2.JobID
					left JOIN BranchPlants (NOLOCK) d2 ON d2.BranchPlant = j2.BranchPlant
					left JOIN Countries (NOLOCK) c2 ON c2.Country = j2.Country
					left JOIN Regions (NOLOCK) r2 ON r2.Region = j2.Region
					JOIN Customers (NOLOCK) co2 ON j2.CustomerId = co2.CustomerId
				WHERE i.IsDeleted=0 AND runs2.IsDeleted=0
					AND wells2.IsDeleted=0
					AND runs2.StartDate >= CONVERT(VARCHAR, DATEADD(m, @JobsPrevMonths, GETDATE()), 101)
					--and runs2.MDStart is not NULL
					AND r2.Active=1 
					AND d2.Active=1 
					AND j2.JobNumber = j.JobNumber
				) AS [Incidents]
		FROM Runs (NOLOCK) runs 
			JOIN Wells (NOLOCK) wells ON wells.WellID=runs.WellID 
			JOIN Jobs (NOLOCK) j on j.JobID = wells.JobID
			left JOIN BranchPlants (NOLOCK) d ON d.BranchPlant = j.BranchPlant
			left JOIN Countries (NOLOCK) c ON c.Country = j.Country
			left JOIN Regions (NOLOCK) r ON r.Region = j.Region
			JOIN Customers (NOLOCK) co ON j.CustomerId = co.CustomerId
		WHERE runs.IsDeleted=0
			AND wells.IsDeleted=0
			AND j.IsJAROnly = 0
			AND runs.StartDate >= CONVERT(VARCHAR, DATEADD(m, @JobsPrevMonths, GETDATE()), 101)
			AND runs.MDStart IS NOT NULL
			AND r.Active=1 
			AND d.Active=1 
		GROUP BY r.Region, j.JobNumber
	) AS tmp
) AS tmp2
WHERE [RANK] <= 5
ORDER BY Region, [% Failed] DESC, [Job Number]

--  JAR Service Lines
Select distinct 
	OpsServiceLine
	, JarActivityServiceLine 
from ProductLines
Where OpsServiceLine IS NOT NULL
UNION
Select 'MWD', 'HP'
UNION
Select 'MWD', 'EM'

-- GFA Service Lines
Select distinct 
	OpsGFAServiceLine
	, SystemName
from ProductLines
Where OpsGFAServiceLine IS NOT NULL




/****** Object:  StoredProcedure [dbo].[usp_PartStatusAgingDetailReport]    Script Date: 08/06/2014 13:48:16 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_LinkAttachmentsFailureGFA]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_LinkAttachmentsFailureGFA] (
	@sIncidentID as uniqueidentifier
	, @sGFAID as uniqueidentifier)
AS
BEGIN
SET NOCOUNT ON;

UPDATE Attachments
SET IncidentID = @sIncidentID
WHERE GFAID = @sGFAID
AND IncidentID IS NULL

UPDATE Attachments
SET GFAID = @sGFAID
WHERE IncidentID = @sIncidentID
AND GFAID IS NULL

SET NOCOUNT OFF;
END


/****** Object:  StoredProcedure [dbo].[usp_CreateGFAComponents]   ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_CreateGFAComponents]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[usp_CreateGFAComponents]

SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_LinkFailureReportToGFA]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_LinkFailureReportToGFA] (
	@sJobNumber as varchar(50)
	, @sRunNumber as varchar(50)
	, @sIncidentID as uniqueidentifier
	, @sIncidentNumber as varchar(50)) AS
SET NOCOUNT ON

UPDATE i
SET i.IncidentNumber = @sIncidentNumber
, i.IncidentID = @sIncidentID
FROM GFAIncidents i 
JOIN Jobs j ON j.JobID = i.JobID
WHERE i.IncidentID Is Null
AND j.JobNumber = @sJobNumber
AND i.RunNumber = @sRunNumber
AND i.IsDeleted = 0

UPDATE Attachments
SET IncidentID = @sIncidentID
WHERE GFAID in (Select GFAID From GFAIncidents Where IncidentID = @sIncidentID)
AND IncidentID Is Null

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_MapReliabilityAsset]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--============================================================
--CREATED BY: SUYEB MOHAMMAD
--CREATED ON: 15 Jan 2016
--DESCIPTION: To map reliability asset 
--=============================================================
CREATE PROC [dbo].[usp_MapReliabilityAsset]
@NewSerialNum VARCHAR(50),
@NewInventoryItemNum VARCHAR(50),
@OldSerialNum VARCHAR(50),
@OldInventoryItemNum VARCHAR(50),
@UserId INT = 0
AS
	BEGIN
		SET NOCOUNT ON
		BEGIN TRAN
			BEGIN TRY
				DECLARE @ERR INT = 0;
				DECLARE @COUNT INT = 0;
				DECLARE @FixedAssetId UNIQUEIDENTIFIER = NULL;

				SELECT  @FixedAssetId = [FixedAssetId] FROM [FixedAssets](NOLOCK) 
				WHERE   [SerialNum] = @NewSerialNum AND [InventoryItemNum] = @NewInventoryItemNum
				IF(@FixedAssetId IS NULL)
				BEGIN
					SET @ERR = -10 -- Invalid New SerialNum or New InventoryItemNum
					ROLLBACK TRAN
					SELECT @ERR
					RETURN
				END

				SELECT @COUNT = COUNT(*) FROM [ToolStringComponentInfo](NOLOCK) WHERE [SerialNum] = @OldSerialNum AND [InventoryItemNum] = @OldInventoryItemNum				
				IF(@COUNT = 0 )
				BEGIN
					SET @ERR = -20 -- Invalid Old SerialNum or Old InventoryItemNum
					ROLLBACK TRAN
					SELECT @ERR
					RETURN
				END
								
				UPDATE  [ToolStringComponentInfo]
				SET		[FixedAssetID] = @FixedAssetId
				WHERE	[SerialNum] = @OldSerialNum AND [InventoryItemNum] = @OldInventoryItemNum

				INSERT INTO AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
				VALUES (99, @UserId, 'NewSerialNum:'+ @NewSerialNum +' NewInventoryItemNum:'+ @NewInventoryItemNum +' OldSerialNum:'+ @OldSerialNum +' OldInventoryItemNum:'+ @OldInventoryItemNum+'FixedAssetId:' + CONVERT(VARCHAR(50),@FixedAssetId), GETDATE(), '', 'ToolStringComponentInfo')		
				
				SELECT  0
				COMMIT TRAN
				SET NOCOUNT OFF
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK TRAN
				SELECT -50
				RETURN
			END CATCH
	END
GO
/****** Object:  StoredProcedure [dbo].[usp_MergeFixedAssets]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_MergeFixedAssets]
	@fixedAssetId uniqueidentifier,
	@scrappedFixedAssetId uniqueidentifier
AS
BEGIN
	SET NOCOUNT ON
	
	declare @assetNum varchar(30)
		, @serialNum varchar(30)
		, @scrappedAssetNum varchar(30)
		, @auditActionId int
	
	select @assetNum = AssetNumber
		, @serialNum = SerialNum
	from FixedAssets (NOLOCK)
	where FixedAssetId = @fixedAssetId
	
	select @scrappedAssetNum = AssetNumber
	from FixedAssets  (NOLOCK) 
	where FixedAssetId = @scrappedFixedAssetId
	
	begin tran
	
		update AssetRepairTrack set
			FixedAssetId = @fixedAssetId
			, AssetNumber = @assetNum
			, SerialNum = @serialNum
		where FixedAssetId = @scrappedFixedAssetId
	
		if @@ERROR <> 0
		begin
			rollback tran
			select -10
			return -10
		end
	
		update Batteries set
			FixedAssetID = @fixedAssetId
			, SerialNumber = @serialNum
		where FixedAssetID = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -20
			return -20
		end		
		
		--update Calibrations set
		--	AssetNumber = @assetNum,
		--	SerialNumber = @serialNum
		--where AssetNumber = @scrappedAssetNum
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -30
			return -30
		end
		
		update ChangeNoticeParts set
			FixedAssetId = @fixedAssetId
		where FixedAssetId = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -40
			return -40
		end
	
		update ComponentProperties set
			FixedAssetID = @fixedAssetId
		where FixedAssetID = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -50
			return -50
		end
		
		update DailyToolComponents set
			FixedAssetID = @fixedAssetId
			, SerialNum = @serialNum
		where FixedAssetID = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -60
			return -60
		end

		update DispatchInstanceItems set
			FixedAssetId = @fixedAssetId
			, AssetNumber = @assetNum
			, SerialNum = @serialNum
		where FixedAssetId = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -70
			return -70
		end
	
		update FixedAssets set
			ParentFixedAssetId = @fixedAssetId
		where ParentFixedAssetId = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -80
			return -80
		end
		
		update FixedAssetValues set
			FixedAssetId = @fixedAssetId
		where FixedAssetId = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -90
			return -90
		end
		
		update FracasComponents set
			FixedAssetID = @fixedAssetId
		where FixedAssetID = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -100
			return -100
		end
		
		update GFAComponents set
			FixedAssetId = @fixedAssetId
		where FixedAssetId = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -110
			return -110
		end
		
		update NCRFailedComponents set
			FixedAssetId = @fixedAssetId
			, AssetNumber = @assetNum
			, SerialNum = @serialNum
		where FixedAssetId = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -120
			return -120
		end

		update PartTransferDtl set
			FixedAssetId = @fixedAssetId
			, AssetNumber = @assetNum
			, SerialNum = @serialNum
		where FixedAssetId = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -130
			return -130
		end
		
		update PFTWO set
			FixedAssetId = @fixedAssetId
			, AssetNumber = @assetNum
			, SerialNum = @serialNum
		where FixedAssetId = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -140
			return -140
		end
		
		update PulseCountData set
			FixedAssetID = @fixedAssetId
			, SerialNumber = @serialNum
		where FixedAssetID = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -150
			return -150
		end
		
		update RSSConnectTimes set
			FixedAssetID = @fixedAssetId
			, SerialNumber = @serialNum
		where FixedAssetID = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -160
			return -160
		end

		update RunConnectTimes set
			FixedAssetID = @fixedAssetId
			, SerialNumber = @serialNum
		where FixedAssetID = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -170
			return -170
		end

		update SensorConnectTimes set
			FixedAssetID = @fixedAssetId
			, SerialNumber = @serialNum
		where FixedAssetID = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -190
			return -190
		end
		update SensorToBitOffsets set
			FixedAssetID = @fixedAssetId
			, SerialNumber = @serialNum
		where FixedAssetID = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -200
			return -200
		end
		
		update ShipmentFormDetailAssets set
			FixedAssetId = @fixedAssetId
			, SerialNum = @serialNum
		where FixedAssetId = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -210
			return -210
		end
		
		update ToolModFixedAssets set
			FixedAssetId = @fixedAssetId
		where FixedAssetId = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -220
			return -220
		end
		
		update ToolStringComponentInfo set 
			FixedAssetID = @fixedAssetId
			, SerialNum = @serialNum
		where FixedAssetID = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -230
			return -230
		end
		
		update ToolStringFixedAssets set
			FixedAssetID = @fixedAssetId
			, SerialNum = @serialNum
		where FixedAssetID = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -240
			return -240
		end
			
		update WorkOrders set
			FixedAssetId = @fixedAssetId
			, AssetNumber = @assetNum
			, SerialNum = @serialNum
		where FixedAssetId = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -250
			return -250
		end
		
		update FixedAssetHistory set
			FixedAssetId = @fixedAssetId
			, AssetNumber = @assetNum
			, SerialNum = @serialNum
		where FixedAssetId = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -260
			return -260
		end

		update FixedAssetHistory set
			ParentFixedAssetId = @fixedAssetId
		where ParentFixedAssetId = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -270
			return -270
		end
		
		insert into AuditActions values (2020, 4365, @fixedAssetId, 'FixedAssets', 'Merged fixed assets. Retained FixedAssetId: ' + CAST(@fixedAssetId as varchar(36)), GETDATE(), '127.0.0.1', '127.0.0.1')
		set @auditActionId = SCOPE_IDENTITY()
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -500
			return -500
		end
		
		UPDATE FixedAssets SET DateAdded = LastStatusChangeDate WHERE FixedAssetId = @scrappedFixedAssetId AND DateAdded IS NULL

		insert into AuditFixedAssets 
		select @auditActionId, * 
		from FixedAssets (NOLOCK)
		where FixedAssetId = @scrappedFixedAssetId

		if @@ERROR <> 0
		begin
			rollback tran
			select -510
			return -510
		end
		
		delete from FixedAssets where FixedAssetId = @scrappedFixedAssetId
		
		if @@ERROR <> 0
		begin
			rollback tran
			select -520
			return -520
		end
		
	commit tran
	
	select 0
	return 0
	
	SET NOCOUNT OFF
END

GO
/****** Object:  StoredProcedure [dbo].[usp_MergeOldPFTWoSeq]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:	 Mangesh 
-- Create date: Aug 2021
-- Description:	Procedure add PFTWOSeq for new strcture 
-- Old strcture add one after one seq 
-- New web add all steps one time when create PFTWo
-- This Procedure only add steps for old (alreday Open pft wo) 
-- =============================================
CREATE PROCEDURE [dbo].[usp_MergeOldPFTWoSeq]
	 @PFTWOId uniqueidentifier,
	 @UserName varchar(15),
	 @UserId int

AS
BEGIN
	-- Check all Seq added in PFTWoSeq
	IF EXISTS( SELECT  pw.PFTWOId FROM PFTWO pw
			LEFT JOIN PFTConfigSeq pc ON pc.PFTConfigId = pw.PFTConfigId  
			LEFT JOIN   PFTWOSeq psw ON psw.PFTConfigSeqId = pc.PFTConfigSeqId and psw.PFTWOId = pw.PFTWOId
			WHERE pw.PFTWOId = @PFTWOId and  psw.PFTWOId IS  NULL
			GROUP BY pw.PFTWOId,psw.PFTWOId)  
	  BEGIN
	  --Insert all sequences that are not inserted 
	    INSERT INTO dbo.PFTWOSeq
               (PFTWOId, PFTConfigSeqId, PFTResult, UserName, UserId)
		SELECT pw.PFTWOId, pc.PFTConfigSeqId, '' As PFTResult,@UserName, @UserId 
			FROM PFTWO pw
			LEFT JOIN PFTConfigSeq pc ON pc.PFTConfigId = pw.PFTConfigId  
			LEFT JOIN   PFTWOSeq psw ON psw.PFTConfigSeqId = pc.PFTConfigSeqId and psw.PFTWOId = pw.PFTWOId
			WHERE pw.PFTWOId = @PFTWOId and  psw.PFTWOId IS  NULL

	  END 
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Monitor_RemoveItemNums]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 12/19/2016
-- Description:	
-- =============================================
CREATE PROCEDURE [dbo].[usp_Monitor_RemoveItemNums] 
	-- Add the parameters for the stored procedure here
	@CBMMonitorId INT,
	@ItemNums VARCHAR(MAX),
	@UserId int
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @PFTConfigId uniqueidentifier

	SELECT @PFTConfigId = PFTConfigId FROM CBMMonitor (NOLOCK) WHERE CBMMonitorId = @CBMMonitorId

	-- Audit Starts
	
	insert into AuditActions (AuditTypeId, UserId, ActionDesc, ActionDate, RemoteHost, AuditTable)
	values (2028, @UserId, @CBMMonitorId, getdate(), NULL, 'PartDescPFTConfigs')

	Insert into AuditPartDescPFTConfigs 
	select @@IDENTITY, * from  PartDescPFTConfigs Where PFTConfigID = @PFTConfigId AND PFTType = 3

	-- Audit Ends

    DELETE FROM PartDescPFTConfigs WHERE PFTConfigID = @PFTConfigId AND PFTType = 3 
	AND ITemNum IN (SELECT a.Entry  FROM dbo.ListToTable(@ItemNums) a)

END
GO
/****** Object:  StoredProcedure [dbo].[usp_MTBFReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 4/7/16
-- Description:	MTBF Report
-- =============================================
CREATE PROCEDURE [dbo].[usp_MTBFReport] 
	-- Add the parameters for the stored procedure here
	@GroupType INT = 1,
	@PartTypeId VARCHAR(MAX) = NULL, 
	@ToolCode VARCHAR(MAX) = NULL,
	@Region VARCHAR(MAX) = NULL,
	@District VARCHAR(MAX) = NULL,
	@StartDate DATETIME = NULL,
	@EndDate DATETIME = NULL,
	@ToolStringType VARCHAR(MAX) = NULL,
	@ToolStringSize VARCHAR(MAX) = NULL,
	@Productline VARCHAR(MAX) = NULL,
	@CustomerName VARCHAR(MAX)=NULL
AS

BEGIN

SET @CustomerName = REPLACE(@CustomerName,'*', '%')

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SET @PartTypeId = REPLACE(@PartTypeId, '*', '%')
	SET @ToolCode = REPLACE(@ToolCode, '*', '%')
	SET @Region = REPLACE(@Region, '*', '%')
	SET @District = REPLACE(@District, '*', '%')
	SET @ToolStringType = REPLACE(@ToolStringType, '*', '%')
	SET @ToolStringSize = REPLACE(@ToolStringSize, '*', '%')

	DECLARE @SQLQUERY VARCHAR(MAX),
			@GroupColumn VARCHAR(MAX),
			@SortColumn VARCHAR(MAX)

	SELECT @SortColumn = CASE WHEN  @GroupType = 1 THEN 'CONVERT(varchar(4), bi.RunYear)'
			WHEN  @GroupType = 2 THEN 'CONVERT(varchar(4), bi.RunYear) + '' '' + bi.Quarter'
			WHEN  @GroupType = 3 THEN 'bi.MonthYear'
			END

	SELECT @GroupColumn = CASE WHEN  @GroupType = 1 THEN 'CONVERT(varchar(4), bi.RunYear)'
			WHEN  @GroupType = 2 THEN 'CONVERT(varchar(4), bi.RunYear) + '' '' + bi.Quarter'
			WHEN  @GroupType = 3 THEN 'bi.MonthYear'
			END

    -- Insert statements for procedure here

	SET @SQLQUERY = 'SELECT 
	' + @SortColumn +' [SortColumn],
	' +  @GroupColumn + ' [GroupColumn],
		ROUND(Sum(OperHrs),2)		AS TotalOperHrs, 
		ROUND(Sum(CircHrs),2)		AS TotalCircHrs,
		ROUND(Sum([tffcount]),2)		AS TotalTFF, 
		ROUND(Sum([csicount]),2)		AS TotalCSI, 
		ROUND(Sum(operhrs) / CASE WHEN Sum([tffcount]) = 0 THEN 1 ELSE Sum(tffcount) END ,2) [MTBTFF_Operhrs], 
		ROUND(Sum(circhrs) / CASE WHEN Sum([tffcount]) = 0 THEN 1 ELSE Sum(tffcount) END ,2) [MTBTFF_Circhrs], 
		ROUND(Sum(operhrs) / CASE WHEN Sum([csicount]) = 0 THEN 1 ELSE Sum([csicount]) END ,2) [MTBCSI_Operhrs], 
		ROUND(Sum(circhrs) / CASE WHEN Sum([csicount]) = 0 THEN 1 ELSE Sum([csicount]) END ,2) [MTBCSI_Circhrs] 
	FROM   RelBusinessIntelligenceDataset bi (NOLOCK)
	INNER JOIN (SELECT runid, 
						Sum(CONVERT(INT, tff)) [TFFCount], 
						CASE WHEN Sum(CONVERT(INT, csi)) > 0 THEN 1 ELSE 0 END [CSICount] 
				FROM   ToolStringComponentInfo tc  (NOLOCK)
				WHERE 1 = 1 
				'
	+ CASE WHEN @PartTypeId IS NULL THEN '' ELSE ' AND (CONVERT(varchar(max),tc.PartTypeID) IN (SELECT ENTRY FROM listtotable('''+ ISNULL(@PartTypeId,'') +''')) OR CONVERT(varchar(max),tc.PartTypeID) LIKE '''+ ISNULL(@PartTypeId,'') + ''')' END
	+ CASE WHEN @ToolCode IS NULL THEN '' ELSE ' AND (tc.ToolCode IN (SELECT ENTRY FROM listtotable('''+ ISNULL(@ToolCode,'') + ''')) OR tc.ToolCode LIKE '''+ ISNULL(@ToolCode,'') + ''')' END

	----------------------------------- ToolString Filters Start 
	+ CASE WHEN @ToolStringType IS NULL AND @ToolStringSize IS NULL AND @Productline IS NULL THEN '' ELSE ' AND tc.ToolStringId IN (SELECT t.ToolStringId FROM ToolStrings t 
		inner join ToolStringComponentInfo tc1 on t.ToolStringId = tc1.ToolStringId
					WHERE 1 = 1 ' END
						
							-- ToolString type filter
	+ CASE WHEN @ToolStringType IS NULL THEN ' ' ELSE ' AND dbo.fnGetToolStringTypeBySerialNumber(t.type, t.serialnumber, tc1.ToolCode) IN ( SELECT ENTRY FROM listtotable('''+ ISNULL(@ToolStringType,'') + ''')) ' END

	-- Tool String Size Filter
	+ CASE WHEN @ToolStringSize IS NULL THEN ' ' ELSE ' AND t.SizeId IN ( SELECT toolsizeid FROM ToolStringSize WHERE (ShortName IN (SELECT ENTRY FROM listtotable('''+ @ToolStringSize + ''')) OR ShortName LIKE '''+ @ToolStringSize + ''') )' END

	-- Product Line Filter
	+ CASE WHEN @Productline IS NULL THEN ' ' ELSE ' AND dbo.fnGetProductlineByToolStringType(t.type) IN ( SELECT ENTRY FROM listtotable('''+ ISNULL(@Productline,'') + ''')) ' END

	+ CASE WHEN @ToolStringType IS NULL AND @ToolStringSize IS NULL AND @Productline IS NULL THEN '' ELSE ' ) ' END

	----------------------------------- ToolString Filters Ends
	+ 'GROUP  BY runid) a ON a.runid = bi.runid 
	WHERE 1 = 1 
	' 
	+ CASE WHEN @Region IS NULL THEN '' ELSE ' AND ( bi.region IN (SELECT ENTRY FROM listtotable(''' + ISNULL(@Region,'')+ ''')) OR bi.region LIKE ''' + ISNULL(@Region,'')+ ''')' END
	+ CASE WHEN @District IS NULL THEN '' ELSE ' AND ( bi.District IN (SELECT ENTRY FROM listtotable(''' + ISNULL(@District,'')+ ''')) OR bi.District LIKE ''' + ISNULL(@District,'')+ ''')' END
	+ CASE WHEN @StartDate IS NULL THEN '' ELSE ' AND bi.EndDate >= CONVERT(DATETIME, ''' + CONVERT(varchar(10), ISNULL(@StartDate, GETDATE()), 103) + ''', 103) ' END
	+ CASE WHEN @EndDate IS NULL THEN '' ELSE ' AND bi.EndDate < CONVERT(DAtetime, ''' + CONVERT(varchar(10), ISNULL(@EndDate, GETDATE()), 103) + ''', 103) ' END

  --Customer line Filter
	+ CASE WHEN @CustomerName IS NULL THEN '' ELSE +' AND ( bi.customername IN (SELECT ENTRY FROM listtotable(''' + ISNULL(@CustomerName,'')+ ''')) OR bi.customername LIKE ''' + ISNULL(@CustomerName,'')+ ''')' END
	+ ' GROUP  BY ' + @GroupColumn + ', ' +  @SortColumn + '

	--HAVING Sum([tffcount]) > 0 OR Sum([csicount]) > 0 '
	
	print @SQLQUERY
	
	exec (@SQLQUERY)

END




GO
/****** Object:  StoredProcedure [dbo].[usp_MyAdvisor_Logs]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[usp_MyAdvisor_Logs]
    @RunId              uniqueidentifier, 
    @spName				VARCHAR(150),
    @activity			VARCHAR(500),
    @startDateTime		datetime,
    @isDeleteOldRecs	bit = 0
AS
	BEGIN
        DECLARE @endDateTime DATETIME;
		SET @endDateTime = GETDATE();	

		BEGIN TRY
			-------INSERT LOG FOR EACH STATEMENT IN SP
			INSERT INTO MyAdvisorProcedureLogs (RunId,ProcedureName, Activity, StartDateTime, EndDateTime)
			VALUES (@RunId,@spName, @activity, @startDateTime, @endDateTime);
		END TRY
		BEGIN CATCH
			
		END CATCH

	END
GO
/****** Object:  StoredProcedure [dbo].[usp_OpsPFTMetrics]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_OpsPFTMetrics] 
	@xmlData as xml
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

CREATE TABLE #PFTMetrics
(
	pftwoid uniqueidentifier
	, FailSuspension varchar(1)
	, FixedAssetId uniqueidentifier
	, DateAdded datetime
) 

DECLARE @PFTItemNum varchar(32)
DECLARE @StartDate datetime
DECLARE @EndDate datetime

	SELECT @PFTItemNum = T.c.value('.', 'varchar(32)') from @xmlData.nodes('/Filters/PFTItemNum') T(c)
	SELECT @StartDate = T.c.value('.', 'datetime') from @xmlData.nodes('/Filters/StartDate') T(c)
	SELECT @EndDate = T.c.value('.', 'datetime') from @xmlData.nodes('/Filters/EndDate') T(c)

	SET @PFTItemNum = REPLACE(@PFTItemNum, '*', '%')

--set @PFTItemNum = '%00007'
--set @StartDate = '01/01/2010'
--set @EndDate = '12/31/2013'

INSERT INTO #PFTMetrics
SELECT a.PFTWOId, 'F', a.FixedAssetId, a.DateAdded 
FROM dbo.PFTWO a (NOLOCK)
left join dbo.WorkOrders wo (NOLOCK) on wo.WorkOrderNum = a.WO_NO
left join dbo.SelectOptions sl (NOLOCK) on sl.SelectName = 'PFTConfigType' and sl.OptionValue = a.PFTType
left join dbo.PFTConfig pc (NOLOCK) ON a.PFTConfigId = pc.PFTConfigId
left join dbo.FixedAssets imp (NOLOCK) on a.FixedAssetId = imp.FixedAssetId

WHERE
  a.PFTType = 1
  and a.DateAdded >= @StartDate 
  and a.DateAdded <= @EndDate
  and a.ItemNum like @PFTItemNum  


INSERT INTO #PFTMetrics
SELECT DISTINCT NULL, 'S', imp.FixedAssetId, @EndDate
FROM dbo.FixedAssets imp (NOLOCK)
left join dbo.ItemNums  pn (NOLOCK) on imp.InventoryItemNum = pn.ItemNum
WHERE pn.ItemNum like @PFTItemNum

select 
  pftmetrics.FailSuspension, pftmetrics.DateAdded
  , a.PFTWOId, a.WO_NO, a.BranchPlant, a.ItemNum
  , imp.AssetNumber, imp.SerialNum
	
  , (SELECT 
		sum(convert(float, IsNull(R.OperHrs, 0)))
	FROM dbo.ToolStringComponentInfo tsci (NOLOCK)
	JOIN dbo.FixedAssets p (NOLOCK) ON p.FixedAssetId = tsci.FixedAssetID --and p.IsDeleted = 0
	JOIN dbo.Runs R (NOLOCK) on R.RunID = tsci.RunID AND R.IsDeleted = 0
	JOIN dbo.FixedAssets comp (NOLOCK) ON comp.FixedAssetId = tsci.FixedAssetID
	WHERE comp.FixedAssetId = a.FixedAssetId AND R.CircHrs is not null and R.EndDate <= a.DateAdded
	  and R.EndDate >= (select max(pft2.DateAdded) from dbo.PFTWO pft2 (NOLOCK) where pft2.FixedAssetId = a.FixedAssetId and pft2.DateAdded < a.DateAdded and pft2.PFTType in ( 0, 1))
	  --and p.IsDeleted = 0
	  and R.IsDeleted = 0
  ) as OperHoursSinceRepair

  , (SELECT 
		sum(convert(float, IsNull(R.DrillHrs, 0)))
	FROM dbo.ToolStringComponentInfo tsci (NOLOCK)
	JOIN dbo.FixedAssets p (NOLOCK) ON p.FixedAssetId = tsci.FixedAssetID --and p.IsDeleted = 0
	JOIN dbo.Runs R (NOLOCK) on R.RunID = tsci.RunID AND R.IsDeleted = 0
	JOIN dbo.FixedAssets comp (NOLOCK) ON comp.FixedAssetId = tsci.FixedAssetID
	WHERE comp.FixedAssetId = a.FixedAssetId AND R.CircHrs is not null and R.EndDate <= a.DateAdded
	  and R.EndDate >= (select max(pft2.DateAdded) from dbo.PFTWO pft2 (NOLOCK) where pft2.FixedAssetId = a.FixedAssetId and pft2.DateAdded < a.DateAdded and pft2.PFTType in ( 0, 1))
	  --and p.IsDeleted = 0
	  and R.IsDeleted = 0
  ) as DrillHoursSinceRepair

  , (SELECT 
		sum(convert(float, IsNull(R.CircHrs, 0)))
	FROM dbo.ToolStringComponentInfo tsci (NOLOCK)
	JOIN dbo.FixedAssets p (NOLOCK) ON p.FixedAssetId = tsci.FixedAssetID --and p.IsDeleted = 0
	JOIN dbo.Runs R (NOLOCK) on R.RunID = tsci.RunID AND R.IsDeleted = 0
	JOIN dbo.FixedAssets comp (NOLOCK) ON comp.FixedAssetId = tsci.FixedAssetID
	WHERE comp.FixedAssetId = a.FixedAssetId AND R.CircHrs is not null and R.EndDate <= a.DateAdded
	  and R.EndDate >= (select max(pft2.DateAdded) from dbo.PFTWO pft2 (NOLOCK) where pft2.FixedAssetId = a.FixedAssetId and pft2.DateAdded < a.DateAdded and pft2.PFTType in ( 0, 1))
	  --and p.IsDeleted = 0
	  and R.IsDeleted = 0
  ) as CircHoursSinceRepair
  , bp.CompanyName as BranchPlantName

from #PFTMetrics pftmetrics
left join dbo.PFTWO a (NOLOCK) on pftmetrics.PFTWOId = a.PFTWOId
left join dbo.WorkOrders wo (NOLOCK) on wo.WorkOrderNum = a.WO_NO
left join dbo.SelectOptions sl (NOLOCK) on sl.SelectName = 'PFTConfigType' and sl.OptionValue = a.PFTType
left join dbo.PFTConfig pc (NOLOCK) ON a.PFTConfigId = pc.PFTConfigId
left join dbo.FixedAssets imp (NOLOCK) on imp.FixedAssetId=pftmetrics.FixedAssetId
left join BranchPlants bp (NOLOCK) on bp.BranchPlant =  a.BranchPlant
--left join part p (NOLOCK) on imp.SAPEquipmentId = p.serialnum
--left join partnum pn (NOLOCK) on p.partnumid = pn.partnumid

DROP TABLE #PFTMetrics
END


GO
/****** Object:  StoredProcedure [dbo].[usp_PartComponentsToXml]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:   Sachin Mhalungekar
-- Create date: 06/13/2019  
-- Description: Get PartComponents To Xml  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_PartComponentsToXml] 
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
	SELECT 
			1						AS tag,
			NULL					AS parent,
			p.EM_TWINWELLS			[tblparttypes!1!EM_TWINWELLS],
			p.surface				[tblparttypes!1!SURFACE],
			p.WPR					[tblparttypes!1!WPR],
			p.DMT_AMS				[tblparttypes!1!DMT_AMS],
			p.MOTOR					[tblparttypes!1!MOTOR],
			p.TENSOR				[tblparttypes!1!TENSOR],
			p.GWD					[tblparttypes!1!GWD],
			p.BECFIELD				[tblparttypes!1!BEC],
			p.GEOLINK				[tblparttypes!1!GEOLINK],
			p.AGS					[tblparttypes!1!AGS],
			p.RSS					[tblparttypes!1!RSS],
			p.HEL_EM				[tblparttypes!1!HEL_EM],
			p.HEL_LWD				[tblparttypes!1!HEL_LWD],
			p.HYPERPULSE			[tblparttypes!1!PP],
			p.EM					[tblparttypes!1!EM],
			p.Occurrence			[tblparttypes!1!Occurrence],
			p.Description			[tblparttypes!1!Description],
			p.[Primary]				[tblparttypes!1!primary],
			p.Name					[tblparttypes!1!Name],
			p.PartTypeId			[tblparttypes!1!PartTypeID],
			CASE WHEN ShortName IS NOT NULL THEN p.ShortName  ELSE NULL END [tblparttypes!1!shortname]
	FROM	PartTypes p
	FOR XML EXPLICIT, ROOT ('parttypes')

END
GO
/****** Object:  StoredProcedure [dbo].[usp_PartStatusAgingDetailReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_PartStatusAgingDetailReport]
	@xmlData XML
AS

DECLARE @sql VARCHAR(max)
DECLARE @whereClause VARCHAR(max)
DECLARE @ReportDetail VARCHAR(max)
DECLARE @IsIncludeBranchPlant VARCHAR(max)

SELECT @whereClause = T.c.value('.', 'VARCHAR(max)')
FROM @xmlData.nodes('/Filters/WhereClause')T(c);

SELECT @ReportDetail = T.c.value('.', 'VARCHAR(max)')
FROM @xmlData.nodes('/Filters/ReportDetail')T(c);

SELECT @IsIncludeBranchPlant = T.c.value('.', 'VARCHAR(max)')
FROM @xmlData.nodes('/Filters/IsIncludeBranchPlant')T(c);

DECLARE @IncludeBranchPlant VARCHAR(MAX)
SET @IncludeBranchPlant = ''

IF @IsIncludeBranchPlant = '1'
BEGIN
	SET @IncludeBranchPlant = ', BranchPlant'
END

SET @sql = 'SELECT SerialNum, ' + @ReportDetail + @IncludeBranchPlant + '
	, DaysInStatus
FROM VwFixedAssetsSearch '
+ @whereClause

EXECUTE (@sql)


SET NOCOUNT OFF





/****** Object:  StoredProcedure [dbo].[usp_PartStatusAgingReport]    Script Date: 08/06/2014 13:49:01 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_PartStatusAgingReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_PartStatusAgingReport]
	@xmlData XML
AS

DECLARE @sql VARCHAR(max)
DECLARE @whereClause VARCHAR(max)
DECLARE @ReportDetail VARCHAR(max)
DECLARE @IsIncludeBranchPlant VARCHAR(max)

SELECT @whereClause = T.c.value('.', 'VARCHAR(max)')
FROM @xmlData.nodes('/Filters/WhereClause')T(c);

SELECT @ReportDetail = T.c.value('.', 'VARCHAR(max)')
FROM @xmlData.nodes('/Filters/ReportDetail')T(c);

SELECT @IsIncludeBranchPlant = T.c.value('.', 'VARCHAR(max)')
FROM @xmlData.nodes('/Filters/IsIncludeBranchPlant')T(c);

DECLARE @IncludeBranchPlant VARCHAR(MAX)
SET @IncludeBranchPlant = ''

IF @IsIncludeBranchPlant = '1'
BEGIN
	SET @IncludeBranchPlant = ', BranchPlant, BranchPlantName'
END

SET @sql = 'SELECT ' + @ReportDetail + @IncludeBranchPlant + '
	,sum(case when DaysInStatus > 180 then 1 else 0 end) as GreaterThan180 
	,sum(case when DaysInStatus between 91 and 180 then 1 else 0 end) as LessThanEqual180 
	,sum(case when DaysInStatus between 61 and 90 then 1 else 0 end) as LessThanEqual90 
	,sum(case when DaysInStatus between 31 and 60 then 1 else 0 end) as LessThanEqual60 
	,sum(case when DaysInStatus <= 30 then 1 else 0 end) as LessThanEqual30 
FROM VwFixedAssetsSearch '
+ @whereClause +
' GROUP BY ' + @ReportDetail + @IncludeBranchPlant

EXECUTE (@sql)


SET NOCOUNT OFF





/****** Object:  StoredProcedure [dbo].[usp_PartStatusInDayHistoryReport]    Script Date: 08/06/2014 13:49:36 ******/
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[usp_PartStatusInDayHistoryReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_PartStatusInDayHistoryReport]
	@xmlData XML
AS

DECLARE @sql VARCHAR(max)
DECLARE @startIndex VARCHAR(10)
DECLARE @pageSize VARCHAR(10)
DECLARE @sortField VARCHAR(64)
DECLARE @sortDir VARCHAR(64)
DECLARE @whereClause VARCHAR(max)
DECLARE @viewByColumns VARCHAR(max)

SELECT @startIndex = T.c.value('.', 'VARCHAR(10)')
FROM @xmlData.nodes('/Filters/StartIndex')T(c);

SELECT @pageSize = T.c.value('.', 'VARCHAR(10)')
FROM @xmlData.nodes('/Filters/PageSize')T(c);

SELECT @sortField = T.c.value('.', 'VARCHAR(64)')
FROM @xmlData.nodes('/Filters/SortField')T(c);

SELECT @sortDir = T.c.value('.', 'VARCHAR(64)')
FROM @xmlData.nodes('/Filters/SortDir')T(c);

SELECT @whereClause = T.c.value('.', 'VARCHAR(max)')
FROM @xmlData.nodes('/Filters/WhereClause')T(c);

SELECT @viewByColumns = T.c.value('.', 'VARCHAR(max)')
FROM @xmlData.nodes('/Filters/ViewByColumns')T(c);


SET @sql = 'SELECT ROW_NUMBER() OVER(ORDER BY ' + @viewByColumns + ' ASC ) AS RowNum, ' + @viewByColumns + '
		,COUNT(DISTINCT(fa.FixedAssetId)) AS NumAsset
		,SUM (ISNULL(fas.NumDaysInEquipmentStatus,0)) AS NumDays
		,ISNULL(SUM (fas.NumDaysInEquipmentStatus), 0) / ISNULL(COUNT(DISTINCT(fa.FixedAssetId)), 1) AS AvgDayInStatus

FROM FixedAssetSnapshots (NOLOCK) fas
LEFT JOIN FixedAssets (NOLOCK) fa ON fa.FixedAssetId=fas.FixedAssetId
LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum=fas.InventoryItemNum
LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant=fas.BranchPlant
LEFT JOIN Regions (NOLOCK) r ON r.Region=bp.Region
LEFT JOIN Countries (NOLOCK) c ON c.Country=bp.Country '
+ @whereClause + ' AND i.IsAsset=1
GROUP BY ' + @viewByColumns


DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (' + @sql + ') page 
		WHERE page.RowNum > ' + @startIndex + ' ORDER BY ' + @sortField + ' ' + @sortDir

EXECUTE(@pagingSql)

DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') a'
EXECUTE (@sqlString)


GO
/****** Object:  StoredProcedure [dbo].[usp_PFTFormReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[usp_PFTFormReport]
  (
  @FormObjectIds int  
)
AS

BEGIN
 SELECT        vp1.ObjectId AS FormId, vp1.Revision AS FormRevision, vp1.ObjectNumber AS FormObjNum, vp1.PFTObjectName AS FormName, 
                         vp1.PFTObjectDescription AS FormDesc, vp1.CreatedByName, vp1.UpdatedByName, vp2.ObjectId AS FormColId, vp2.PFTObjectName AS FormColName, 
                         vp2.PFTObjectDescription AS FormColDesc, vp3.ObjectId AS FormFiledId, vp3.PFTObjectName AS FormFieldName, vp3.PFTObjectDescription AS FormFieldDesc, 
                         vp3.ObjectType, vp3.Field1, vp3.Field1Name, vp3.Field2, vp3.Field2Name, vp3.Field3, vp3.Field4, vp3.Field4Name, vp3.Field5, vp3.Field5Name, vp3.Field6, 
                         vp3.Field7, vp3.Field8, vp3.Field9, vp3.Field10, 
vp3.Field11,
vp3.Field11Name,
vp3.Field12,
vp3.Field12Name,
vp3.Field13,
vp3.Field13Name,
CASE WHEN vp3.ObjectType = 3 THEN
                             (SELECT        SUBSTRING(CONVERT([varchar](MAX), BlobContent), CHARINDEX(',', BlobContent) + 1, len(BlobContent))
                               FROM            PFTBlobObjects
                               WHERE        ObjectId = vp3.ObjectId) ELSE NULL END AS PicContent, pftm2.SequenceNumber AS FormFiledSeq, pftm1.SequenceNumber AS FormColSeq,  vp1.CreatedOn,vp1.UpdatedOn
FROM            VW_PFTObjectSearch AS vp1 INNER JOIN
                         PFTObjectMappings AS pftm1 ON pftm1.ParentId = vp1.ObjectId INNER JOIN
                         VW_PFTObjectSearch AS vp2 ON pftm1.ObjectId = vp2.ObjectId INNER JOIN
                         PFTObjectMappings AS pftm2 ON pftm2.ParentId = vp2.ObjectId INNER JOIN
                         VW_PFTObjectSearch AS vp3 ON pftm2.ObjectId = vp3.ObjectId
						 Where  vp1.ObjectId=@FormObjectIds
ORDER BY FormColSeq, vp3.ObjectType, FormFiledSeq
End


GO
/****** Object:  StoredProcedure [dbo].[usp_PFTMassReleased]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_PFTMassReleased]
  (
  @StepObjectIds VARCHAR(MAX),
  @ReasonForChange VARCHAR(4000),
  @WFTUserName VARCHAR(50)
)
AS

BEGIN

  DECLARE @PFTChanges table (OldPFTObjectId int,
    OldPFTStepObjectId int,
    NewPFTStepObjectId int)

  INSERT INTO @PFTChanges
  SELECT DISTINCT oldPFT.ObjectId, oldPftSteps.ObjectId, steps.entry
  FROM dbo.ListToTable(@StepObjectIds) As steps
    JOIN PFTObjects newPftSteps ON steps.entry = newPftSteps.ObjectId
    JOIN PFTObjects oldPftSteps ON oldPftSteps.ObjectNumber = newPftSteps.ObjectNumber and oldPftSteps.[State] = 4 -- superseded
    JOIN PFTObjectMappings oldMapping ON oldMapping.ObjectId = oldPftSteps.ObjectId
    JOIN PFTObjects oldPFT ON oldPFT.ObjectId = oldMapping.ParentId AND oldPFT.[State] = 3 -- released
    LEFT JOIN PFTObjects inWorkPFT on oldPFT.ObjectNumber = inWorkPFT.ObjectNumber AND inWorkPFT.[State] < 3
  -- In Work Or submitted
  WHERE inWorkPFT.ObjectId IS NULL


  -- SELECT DISTINCT OldPFTObjectId FROM @PFTChanges

  DECLARE @PFTId int

  DECLARE pft_released CURSOR FOR     
    SELECT DISTINCT OldPFTObjectId  FROM @PFTChanges
           ORDER BY OldPFTObjectId

  OPEN pft_released

  FETCH NEXT FROM pft_released     
INTO @PFTId


  WHILE @@FETCH_STATUS = 0    
BEGIN
    --- Update PFT state Superseded 
    UPDATE PFTObjects SET [State] = 4  WHERE
        ObjectNumber in (
            SELECT ObjectNumber
      FROM PFTObjects
      WHERE ObjectId = @PFTId
         ) AND [State] = 3

    --- Copy Relese version and create new PFT with new Revision number and state released
    INSERT INTO PFTObjects
    SELECT
      ObjectNumber, 
      Revision + 1 AS Revision,
      Type,
      Name, 
	  Description, 
	  ProductLineId, 
	  3 As State,
      Field1, 
	  Field2, 
	  Field3, 
	  Field4, 
	  Field5,
      @WFTUserName, 
	  GETDATE(), 
	  null, 
	  null,
      @ReasonForChange ReasonForChange,
      Field6, 
	  Field7, 
	  Field8,
	  Field9,
	  Field10,
	  [Field11],
	  [Field12],
	  [Field13],
	  [Field14],
	  [Field15]
    FROM PFTObjects
    WHERE ObjectId = @PFTId

    --- Find new version PFT object Id
    DECLARE @newPFTObjectId  int;
    SELECT @newPFTObjectId = ObjectId
    FROM PFTObjects
    WHERE ObjectNumber in (SELECT ObjectNumber
      FROM PFTObjects
      WHERE ObjectId = @PFTId)
      AND [State] = 3

    -- Insert in mapping table steps object id with new objectid
    INSERT INTO PFTObjectMappings
    SELECT @newPFTObjectId ParentId,
      isnull((SELECT top 1 NewPFTStepObjectId
      FROM @PFTChanges
      where OldPFTObjectId = @PFTId and OldPFTStepObjectId = pm.ObjectId),pm.ObjectId)
               ObjectId,
      pm.SequenceNumber, pm.CreatedBy, pm.CreatedOn, null, null
    FROM PFTObjects pft
	JOIN PFTObjectMappings pm ON pm.ObjectId = pft.ObjectId
    WHERE pm.ParentId = @PFTId


    EXECUTE usp_PFTObject_ReleasePFT @newPFTObjectId

    FETCH NEXT FROM pft_released     
INTO @PFTId

  END
  CLOSE pft_released;
  DEALLOCATE pft_released;

END

GO
/****** Object:  StoredProcedure [dbo].[usp_PFTMassUpdateReleased]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Done
CREATE PROCEDURE [dbo].[usp_PFTMassUpdateReleased]
  (
	@OldStepObjectId  int,
	@NewStepObjectId  int,
	@WFTUserName VARCHAR(50),
	@ReasonForChange VARCHAR(4000),
	@ExcludePFTObjectId VARCHAR(max)
)
AS

BEGIN

  DECLARE @PFTChanges table (OldPFTObjectId int,
    OldPFTStepObjectId int,
    NewPFTStepObjectId int)

  INSERT INTO @PFTChanges
  SELECT oldPFT.ObjectId,  steps.ObjectId, @NewStepObjectId
  FROM PFTObjects As steps
    JOIN PFTObjects newPftSteps ON steps.ObjectId = newPftSteps.ObjectId
    JOIN PFTObjects oldPftSteps ON oldPftSteps.ObjectNumber = newPftSteps.ObjectNumber 
    JOIN PFTObjectMappings oldMapping ON oldMapping.ObjectId = oldPftSteps.ObjectId
    JOIN PFTObjects oldPFT ON oldPFT.ObjectId = oldMapping.ParentId AND oldPFT.[State] = 3 -- released
    LEFT JOIN PFTObjects inWorkPFT on oldPFT.ObjectNumber = inWorkPFT.ObjectNumber AND inWorkPFT.[State] < 3
  -- In Work Or submitted
  WHERE inWorkPFT.ObjectId IS NULL and steps.ObjectId =  @OldStepObjectId
  AND oldPFT.ObjectId NOT IN (SELECT ENTRY FROM  dbo.ListToTable(@ExcludePFTObjectId) )

  -- SELECT DISTINCT OldPFTObjectId FROM @PFTChanges

  DECLARE @OldPFTObjectId int;
  DECLARE @OldPFTStepObjectId int;
  DECLARE @NewPFTStepObjectId  int;

  DECLARE pft_Update CURSOR FOR     
    SELECT distinct  OldPFTObjectId,OldPFTStepObjectId,NewPFTStepObjectId  FROM @PFTChanges
           ORDER BY OldPFTObjectId

  OPEN pft_Update

  FETCH NEXT FROM pft_Update     
INTO @OldPFTObjectId, 
    @OldPFTStepObjectId,
	@NewPFTStepObjectId;

  WHILE @@FETCH_STATUS = 0    
BEGIN

  ------ Update Old PFT state Superseded 
    UPDATE PFTObjects SET [State] = 4 WHERE
        ObjectNumber in (
            SELECT ObjectNumber   FROM PFTObjects   WHERE ObjectId = @OldPFTObjectId
         ) AND [State] = 3

   ---- --- Copy Relese version and create new PFT with new Revision number and state released
    INSERT INTO PFTObjects
    SELECT
      ObjectNumber, 
      Revision + 1 AS Revision,
      Type,
      Name, 
	  Description, 
	  ProductLineId, 
	  3 As State,
      Field1, Field2, Field3, Field4, Field5,
      @WFTUserName, GETDATE(),  null, 
	  null,
      @ReasonForChange ReasonForChange,
      Field6, Field7, Field8, Field9, Field10,  [Field11],  [Field12],  [Field13],  [Field14],  [Field15]
    FROM PFTObjects
    WHERE ObjectId = @OldPFTObjectId

   ---- --- Find new version New PFT object Id
    DECLARE @newPFTObjectId  int;
    SELECT @newPFTObjectId = ObjectId
    FROM PFTObjects
    WHERE ObjectNumber in (SELECT ObjectNumber
								FROM PFTObjects
								WHERE ObjectId = @OldPFTObjectId)    AND [State] = 3

   ---- -- Insert in mapping table steps object id with new steps objectid
    INSERT INTO PFTObjectMappings
    SELECT @newPFTObjectId ParentId,
      isnull((SELECT distinct NewPFTStepObjectId
      FROM @PFTChanges
      WHERE OldPFTObjectId = @OldPFTObjectId and OldPFTStepObjectId = pm.ObjectId ),pm.ObjectId)
               ObjectId,
      pm.SequenceNumber, @WFTUserName CreatedBy, GETDATE() As CreatedOn, null, null
    FROM PFTObjects pft
      JOIN PFTObjectMappings pm ON pm.ObjectId = pft.ObjectId
    WHERE pm.ParentId = @OldPFTObjectId


    EXECUTE usp_PFTObject_ReleasePFT @newPFTObjectId

    FETCH NEXT FROM pft_Update     
INTO @OldPFTObjectId, 
    @OldPFTStepObjectId,
	@NewPFTStepObjectId;

  END
  CLOSE pft_Update;
  DEALLOCATE pft_Update;

END









GO
/****** Object:  StoredProcedure [dbo].[usp_PFTObject_ReleaseForm]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author: Mangesh Taware
-- Create date: 17-Sep-2019
-- Description:	To Relese form 
-- =============================================
CREATE PROCEDURE [dbo].[usp_PFTObject_ReleaseForm]
	@PftObjectId int = 0
AS
BEGIN
	 
	SET NOCOUNT ON;
	DECLARE @oldPFTConfigId uniqueidentifier, @newPFTConfigId uniqueidentifier = NEWID()

	SELECT @oldPFTConfigId = PftConfigId 
	FROM PFTConfig
	WHERE IsObsolete = 0 AND PftObjectId IN (SELECT p.ObjectId 
						FROM PFTObjects p 
						JOIN PFTObjects p1 ON p.ObjectNumber = p1.ObjectNumber 
						WHERE p1.ObjectId = @PftObjectId)

	-- Make old from Inactive
	UPDATE PFTConfig
	SET IsObsolete = 1
	WHERE PFTConfigId = @oldPFTConfigId

    -- Create new PFT object form record
	INSERT INTO PFTConfig
	(
		PFTConfigId
		,ProcessName
		,ProcessDesc
		,IsDynamic
		,DateAdded
		,IsObsolete
		,PFTObjectId
		,ObjectNumber
	)
	SELECT 
		@newPFTConfigId,
		Name,
		[Description],
		0 [IsDynamic],
		GETDATE(),
		0 [IsObsolete],
		ObjectId,
		ObjectNumber		
	FROM PFTObjects
	WHERE ObjectId = @PftObjectId

	-- Create FormField collection 
    INSERT INTO PFTConfigSeq
    (
        PFTConfigSeqId
        ,PFTConfigId
        ,Seq
        ,SeqName
        ,SeqDesc
        ,PFTLabId
        ,IsTestDataReq
        ,IsCommentRequired
        ,IsCommentNumeric
        ,EstimatedHours
        ,IsLabourHrRequired
        ,SendEmailOnPass
        ,DateAdded
        ,ObjectId
    )
    SELECT 
        NEWID(),
        @newPFTConfigId,
        m.SequenceNumber,
        p.Name,
        p.[Description],
        p.Field1 [PFTLabId],
        p.Field2 [IsTestDataReq],
        p.Field3 [IsCommentRequired],
        p.Field4 [IsCommentNumeric],
        p.Field5 [EstimatedHours],
        p.Field6 [IsLabourHrRequired],
        null [SendEmailOnPass],
        GETDATE(),
        p.ObjectId
    FROM PFTObjects p
    JOIN PFTObjectMappings m ON p.ObjectId = m.ObjectId
    WHERE m.ParentId = @PftObjectId

    INSERT INTO PFTConfigSequenceObjects
    (
        PFTConfigSequenceId,
        PFTObjectId,
        DateAdded
    )
    SELECT 
        c.PFTConfigSeqId,
        sm.ObjectId,
        GETDATE()
    FROM PFTObjects p
    JOIN PFTObjectMappings pm ON p.ObjectId = pm.ParentId
    INNER JOIN PFTObjects s ON pm.ObjectId = s.ObjectId
    JOIN PFTObjectMappings sm ON s.ObjectId = sm.ParentId
    JOIN PFTConfigSeq c ON c.Seq = pm.SequenceNumber and c.PFTConfigId = @newPFTConfigId
    WHERE p.ObjectId = @PftObjectId
	 

	-- Create Part Mapping to PFT
	INSERT INTO PartDescPFTConfigs
	(
		PartDescPFTConfigID
		,ItemNum
		,PFTConfigID
		,PFTType
		, CreatedOn
	)
	SELECT NEWID(),
		ItemNum,
		@newPFTConfigId,
		PFTType,
		GETDATE()
	FROM PartDescPFTConfigs
	WHERE PFTConfigID = @oldPFTConfigId


    INSERT INTO PFTConfigFormPFT
	(
		PFTConfigFormId,
		ObjectNumber,
		PFTObjectId,
		DateAdded
	)
	SELECT 
		 @newPFTConfigId,
		 ObjectNumber,
		 PFTObjectId,
		 GETDATE()
	FROM PFTConfigFormPFT 
	WHERE PFTConfigFormId = @oldPFTConfigId


End
GO
/****** Object:  StoredProcedure [dbo].[usp_PFTObject_ReleasePFT]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:      Yogesh Mane
-- Create date: 8-Oct-2017
-- Description: 
-- =============================================
CREATE PROCEDURE [dbo].[usp_PFTObject_ReleasePFT]
    -- Add the parameters for the stored procedure here
    @PftObjectId int = 0
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NOCOUNT ON;
    DECLARE @oldPFTConfigId uniqueidentifier, @newPFTConfigId uniqueidentifier = NEWID()

    SELECT @oldPFTConfigId = PftConfigId 
    FROM PFTConfig
    WHERE IsObsolete = 0 AND PftObjectId IN (SELECT p.ObjectId 
                                        FROM PFTObjects p 
                                        JOIN PFTObjects p1 ON p.ObjectNumber = p1.ObjectNumber 
                                        WHERE p1.ObjectId = @PftObjectId)

    -- Make old PFT's Inactive
    UPDATE PFTConfig
    SET IsObsolete = 1
    WHERE PFTConfigId = @oldPFTConfigId

    -- Create new PFT record
    INSERT INTO PFTConfig
    (
        PFTConfigId
        ,ProcessName
        ,ProcessDesc
        ,IsDynamic
        ,DateAdded
        ,IsObsolete
        ,PFTObjectId
        ,ObjectNumber
    )
    SELECT 
        @newPFTConfigId,
        Name,
        [Description],
        0 [IsDynamic],
        GETDATE(),
        0 [IsObsolete],
        ObjectId
        ,ObjectNumber
    FROM PFTObjects
    WHERE ObjectId = @PftObjectId

    -- Create steps
    INSERT INTO PFTConfigSeq
    (
        PFTConfigSeqId
        ,PFTConfigId
        ,Seq
        ,SeqName
        ,SeqDesc
        ,PFTLabId
        ,IsTestDataReq
        ,IsCommentRequired
        ,IsCommentNumeric
        ,EstimatedHours
        ,IsLabourHrRequired
		,isSupervisorSignOff
        ,SendEmailOnPass
        ,DateAdded
        ,ObjectId
    )
    SELECT 
        NEWID(),
        @newPFTConfigId,
        m.SequenceNumber,
        p.Name,
        p.[Description],
        p.Field1 [PFTLabId],
        p.Field2 [IsTestDataReq],
        p.Field3 [IsCommentRequired],
        p.Field4 [IsCommentNumeric],
        p.Field5 [EstimatedHours],
        p.Field6 [IsLabourHrRequired],
		p.Field7 [isSupervisorSignOff],
        null [SendEmailOnPass],
        GETDATE(),
        p.ObjectId
    FROM PFTObjects p
    JOIN PFTObjectMappings m ON p.ObjectId = m.ObjectId
    WHERE m.ParentId = @PftObjectId

    INSERT INTO PFTConfigSequenceObjects
    (
        PFTConfigSequenceId,
        PFTObjectId,
        DateAdded
    )
    SELECT 
        c.PFTConfigSeqId,
        sm.ObjectId,
        GETDATE()
    FROM PFTObjects p
    JOIN PFTObjectMappings pm ON p.ObjectId = pm.ParentId
    INNER JOIN PFTObjects s ON pm.ObjectId = s.ObjectId
    JOIN PFTObjectMappings sm ON s.ObjectId = sm.ParentId
    JOIN PFTConfigSeq c ON c.Seq = pm.SequenceNumber and c.PFTConfigId = @newPFTConfigId
    WHERE p.ObjectId = @PftObjectId

    -- Create Part Mapping to PFT
    INSERT INTO PartDescPFTConfigs
    (
        PartDescPFTConfigID
        ,ItemNum
        ,PFTConfigID
        ,PFTType
        , CreatedOn
    )
    SELECT NEWID(),
        ItemNum,
        @newPFTConfigId,
        PFTType,
        GETDATE()
    FROM PartDescPFTConfigs
    WHERE PFTConfigID = @oldPFTConfigId


	-- Update latest pftconfig to CBM Monitor
	UPDATE	cm	SET cm.PFTConfigId = pc.PFTConfigId 
	FROM	CBMMonitor cm JOIN PFTConfig pc 
	ON		cm.ObjectNumber = pc.ObjectNumber 
	WHERE	pc.PFTConfigId = @newPFTConfigId AND pc.IsObsolete = 0

END

GO
/****** Object:  StoredProcedure [dbo].[usp_PFTObjects_CreatePFTUtility]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_PFTObjects_CreatePFTUtility]
	@PFTConfigName VARCHAR(1024),
	@WindchillDocNumber VARCHAR(100),
	@PFTType INT,
	@ProductlineId INT,
	@CreatedBy VARCHAR(20),
	@PFTStepObjectNumbers VARCHAR(MAX)
AS

DECLARE @PftConfigObjectId int;

BEGIN TRY
		
	BEGIN TRANSACTION

	INSERT INTO [dbo].[PFTObjects]
				([ObjectNumber]
				,[Revision]
				,[Type]
				,[Name]
				,[Description]
				,[ProductLineId]
				,[State]
				,[Field1]
				,[Field2]
				,[CreatedBy]
				,[CreatedOn])
			SELECT
				MAX(ObjectNumber) + 1
				,1
				,1
				,@PFTConfigName
				,@PFTConfigName
				,@ProductlineId
				,1
				,@PFTType
				,@WindchillDocNumber
				,@CreatedBy
				,GETDATE()
		FROM PFTObjects

	SET @PftConfigObjectId = @@IDENTITY

	INSERT INTO [dbo].[PFTObjectMappings]
				([ParentId]
				,[ObjectId]
				,[SequenceNumber]
				,[CreatedBy]
				,[CreatedOn])
			SELECT
				@PftConfigObjectId,
				o.ObjectId,
				s.NodeLevel,
				@CreatedBy,
				GETDATE()
		FROM dbo.Split(',', @PFTStepObjectNumbers) s
		JOIN PFTObjects o ON ltrim(rtrim(s.val)) = o.ObjectNumber and o.[State] = 3
		ORDER BY s.NodeLevel ASC

	COMMIT TRANSACTION

	-- select pft object details
	SELECT * from PFTObjects WHERE ObjectId = @PftConfigObjectId
	SELECT * from PFTObjectMappings WHERE ParentId = @PftConfigObjectId

END TRY
BEGIN CATCH

    SELECT  
        ERROR_NUMBER() AS ErrorNumber  
        ,ERROR_SEVERITY() AS ErrorSeverity  
        ,ERROR_STATE() AS ErrorState  
        ,ERROR_PROCEDURE() AS ErrorProcedure  
        ,ERROR_LINE() AS ErrorLine  
        ,ERROR_MESSAGE() AS ErrorMessage;  

	ROLLBACK TRANSACTION

END CATCH


GO
/****** Object:  StoredProcedure [dbo].[usp_PFTObjects_GetAuditData]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_PFTObjects_GetAuditData]
(
	@objectId	INT
)
AS
-------------------------------------------------------------------------------------------------------------
--   Purpose  : Get the PFT audit data to display audit information.
--
--   Modified : 
--				[Sachin Mhalungekar] - 27/11/2017 - Created
-------------------------------------------------------------------------------------------------------------
BEGIN

	SET NOCOUNT ON
	
	BEGIN
		;WITH CTE
		AS
		(
		    SELECT DISTINCT
					pom.objectId,
					pom.SequenceNumber,
					vw.objectnumber [ParentId]
		    FROM 
					VW_PftObjectSearch vw
		    LEFT JOIN 
					PftObjectMappings pom ON vw.objectid = pom.parentid
		    WHERE  
					vw.objectId=@objectId
		    UNION ALL
		    SELECT 
					p.objectId,
					p.SequenceNumber,
					v.objectnumber [parentid] 
		    FROM 
					CTE C
		    JOIN 
				pftobjectMappings p ON C.objectId = p.parentid
			JOIN 
				VW_PftObjectSearch v ON C.objectId = v.objectId
		)
		SELECT 
				c.ParentId,c.SequenceNumber, vw.* FROM VW_PftObjectSearch vw
		Join 
				CTE c on vw.objectId=c.objectId
		Union
		select '' as ParentId,'' as SequenceNumber,* from VW_PftObjectSearch where objectId=@objectId

	END
	
	
	SET NOCOUNT OFF

	RETURN 0          -- (success code)	
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ProcessJDEWOOutboundFeedXml]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--WO-CREATE-OUT
--WO-CHANGE-OUT
CREATE PROCEDURE [dbo].[usp_ProcessJDEWOOutboundFeedXml]
	@xmlData xml
AS
BEGIN
	SET NOCOUNT ON
	 DECLARE @startDateTime DATETIME,@RunId  uniqueidentifier=NEWID();
    SET @startDateTime = GETDATE();

    

--BEGIN TRANSACTION
	
	DECLARE @JDEWorkOrderId as uniqueidentifier
	DECLARE @WorkOrderNumber as varchar(30)
	DECLARE @Source as varchar(30)
	DECLARE @Target as varchar(30)
	DECLARE @Method as varchar(30)
	DECLARE @TransactionUserId as varchar(30)
	DECLARE @TransactionId as varchar(30)
	DECLARE @TransactionName as varchar(30)
	DECLARE @EdgeKey as varchar(30)
	DECLARE @EquipmentStatus as varchar(4)
	DECLARE @OrderType as varchar(4)
	DECLARE @OrderSuffix as varchar(30)
	DECLARE @RelatedOrderType as varchar(4)
	DECLARE @RelatedWONumber as varchar(30)
	DECLARE @ParentWONumber as varchar(30)
	DECLARE @TypeWO as varchar(6)
	DECLARE @WorkOrderPriority as int
	DECLARE @Description as varchar(255)
	DECLARE @StatusComment as varchar(255)
	DECLARE @Company as varchar(50)
	DECLARE @BusinessUnit as varchar(30)
	DECLARE @Branch as varchar(12)
	DECLARE @WorkOrderStatusCode as varchar(4)
	
	DECLARE @StatusChangedDateStr as varchar(40)
	DECLARE @StatusChangedDate as datetime
	
	DECLARE @Subsidiary as varchar(30)
	
	DECLARE @TransactionDateStr as varchar(40)
	DECLARE @TransactionDate as datetime
	
	DECLARE @StartDateStr as varchar(40)
	DECLARE @StartDate as datetime
	
	DECLARE @RequestedDateStr as varchar(40)
	DECLARE @RequestedDate as datetime
	
	DECLARE @CompletionDateStr as varchar(40)
	DECLARE @CompletionDate as datetime
	
	DECLARE @AssignedToDateStr as varchar(40)
	DECLARE @AssignedToDate as datetime
	
	DECLARE @AssignedToInspectorDateStr as varchar(40)
	DECLARE @AssignedToInspectorDate as datetime
	
	DECLARE @Reference as varchar(50)
	DECLARE @Reference2 as varchar(50)
	DECLARE @EstimatedAmount as float
	DECLARE @OriginalDollarsAmount as float
	DECLARE @EstimatedHours as float
	DECLARE @OriginalHours as float
	DECLARE @ActualAmount as float
	DECLARE @ActualHours as float
	DECLARE @ShortItemNumber as varchar(30)
	DECLARE @SecondItemNumber as varchar(30)
	DECLARE @ThirdItemNumber as varchar(30)
	DECLARE @AssetItemNumber as varchar(30)
	DECLARE @PostingEdit as varchar(30)
	DECLARE @LotNumber as varchar(30)
	DECLARE @LotPotency as varchar(30)
	DECLARE @LotGrade as varchar(30)
	
	DECLARE @UpdatedDateStr as varchar(40)
	DECLARE @UpdatedDate as datetime
	
	DECLARE @TimeOfDay as varchar(30)
	DECLARE @ParentNumber as varchar(30)
	DECLARE @WorkOrderCriticality as varchar(30)
	DECLARE @EstimatedDowntimeHours as float
	DECLARE @ActualDowntimeHours as float
	DECLARE @MeterPosition as varchar(30)
	DECLARE @EstimatedLaborAmount as float
	DECLARE @EstimatedMaterialAmount as float
	DECLARE @EstimatedOtherAmount as float
	DECLARE @ActualLaborAmount as float
	DECLARE @ActualMaterialAmount as float
	DECLARE @DocumentType as varchar(6)
	
	DECLARE @DispatchNumber varchar(30), 
	@CustomerNumber int

	;WITH XMLNAMESPACES ('http://www.wft.com/OutboundWO/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/OutboundWO/Response/v1.0')
	Select @Source = T.C.value('(Source/text())[1]', 'varchar(30)'),
		@Target = T.C.value('(Target/text())[1]', 'varchar(30)'),
		@Method = T.C.value('(Method/text())[1]', 'varchar(30)'),
		@TransactionUserId = T.C.value('(TransactionUserId/text())[1]', 'varchar(30)'),
		@TransactionId = T.C.value('(TransactionId/text())[1]', 'varchar(30)'),
		@TransactionName = T.C.value('(TransactionName/text())[1]', 'varchar(30)')
	FROM @xmlData.nodes('/WorkOrderInfo/WorkOrderCollection/MessageHeader') AS T(c)
	
	;WITH XMLNAMESPACES ('http://www.wft.com/OutboundWO/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/OutboundWO/Response/v1.0')
	Select @WorkOrderNumber = T.C.value('(WorkOrderNumber/text())[1]', 'varchar(30)'),
		@EdgeKey = T.C.value('(EdgeKey/text())[1]', 'varchar(30)'),
		@EquipmentStatus = T.C.value('(EquipmentStatus/text())[1]', 'varchar(4)'),
		@OrderType = T.C.value('(OrderType/text())[1]', 'varchar(4)'),
		@OrderSuffix = T.C.value('(OrderSuffix/text())[1]', 'varchar(30)'),
		@RelatedOrderType = T.C.value('(RelatedOrderType/text())[1]', 'varchar(4)'),
		@RelatedWONumber = T.C.value('(RelatedWONumber/text())[1]', 'varchar(30)'),
		@ParentWONumber = T.C.value('(ParentWONumber/text())[1]', 'varchar(30)'),
		@TypeWO = T.C.value('(TypeWO/text())[1]', 'varchar(6)'),
		@WorkOrderPriority = T.C.value('(WorkOrderPriority/text())[1]', 'int'),
		@Description = T.C.value('(Description/text())[1]', 'varchar(255)'),
		@StatusComment = T.C.value('(StatusComment/text())[1]', 'varchar(255)'),
		@Company = T.C.value('(Company/text())[1]', 'varchar(50)'),
		@BusinessUnit = T.C.value('(BusinessUnit/text())[1]', 'varchar(30)'),
		@Branch = T.C.value('(Branch/text())[1]', 'varchar(12)'),
		@WorkOrderStatusCode = T.C.value('(WorkOrderStatusCode/text())[1]', 'varchar(4)'),
		@Subsidiary = T.C.value('(Subsidiary/text())[1]', 'varchar(30)'),
		@Reference = T.C.value('(Reference/text())[1]', 'varchar(50)'),
		@Reference2 = T.C.value('(Reference2/text())[1]', 'varchar(50)'),
		@EstimatedAmount = T.C.value('(EstimatedAmount/text())[1]', 'float'),
		@OriginalDollarsAmount = T.C.value('(OriginalDollarsAmount/text())[1]', 'float'),
		@EstimatedHours = T.C.value('(EstimatedHours/text())[1]', 'float'),
		@OriginalHours = T.C.value('(OriginalHours/text())[1]', 'float'),
		@ActualAmount = T.C.value('(ActualAmount/text())[1]', 'float'),
		@ActualHours = T.C.value('(ActualHours/text())[1]', 'float'),
		@ShortItemNumber = T.C.value('(ShortItemNumber/text())[1]', 'varchar(30)'),
		@SecondItemNumber = T.C.value('(SecondItemNumber/text())[1]', 'varchar(30)'),
		@ThirdItemNumber = T.C.value('(ThirdItemNumber/text())[1]', 'varchar(30)'),
		@AssetItemNumber = T.C.value('(AssetItemNumber/text())[1]', 'varchar(30)'),
		@PostingEdit = T.C.value('(PostingEdit/text())[1]', 'varchar(30)'),
		@LotNumber = T.C.value('(LotNumber/text())[1]', 'varchar(30)'),
		@LotPotency = T.C.value('(LotPotency/text())[1]', 'varchar(30)'),
		@LotGrade = T.C.value('(LotGrade/text())[1]', 'varchar(30)'),
		@TimeOfDay = T.C.value('(TimeOfDay/text())[1]', 'varchar(30)'),
		@ParentNumber = T.C.value('(ParentNumber/text())[1]', 'varchar(30)'),
		@WorkOrderCriticality = T.C.value('(WorkOrderCriticality/text())[1]', 'varchar(30)'),
		@EstimatedDowntimeHours = T.C.value('(EstimatedDowntimeHours/text())[1]', 'float'),
		@ActualDowntimeHours = T.C.value('(ActualDowntimeHours/text())[1]', 'float'),
		@MeterPosition = T.C.value('(MeterPosition/text())[1]', 'varchar(30)'),
		@EstimatedLaborAmount = T.C.value('(EstimatedLaborAmount/text())[1]', 'float'),
		@EstimatedMaterialAmount = T.C.value('(EstimatedMaterialAmount/text())[1]', 'float'),
		@EstimatedOtherAmount = T.C.value('(EstimatedOtherAmount/text())[1]', 'float'),
		@ActualLaborAmount = T.C.value('(ActualLaborAmount/text())[1]', 'float'),
		@ActualMaterialAmount = T.C.value('(ActualMaterialAmount/text())[1]', 'float'),
		@DocumentType = T.C.value('(DocumentType/text())[1]', 'varchar(6)'),
		@DispatchNumber = T.C.value('(DTNumber/text())[1]', 'varchar(30)'),
		@CustomerNumber = T.C.value('(CustomerNo/text())[1]', 'int')
	FROM @xmlData.nodes('/WorkOrderInfo/WorkOrderCollection/MessageDetail') AS T(c)
	
	;WITH XMLNAMESPACES ('http://www.wft.com/OutboundWO/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/OutboundWO/Response/v1.0')
	Select @StatusChangedDateStr = T.C.value('(StatusChangedDate/text())[1]', 'varchar(40)'),
		   @TransactionDateStr = T.C.value('(TransactionDate/text())[1]', 'varchar(40)'),
		   @StartDateStr = T.C.value('(StartDate/text())[1]', 'varchar(40)'),
		   @RequestedDateStr = T.C.value('(RequestedDate/text())[1]', 'varchar(40)'),
		   @CompletionDateStr = T.C.value('(CompletionDate/text())[1]', 'varchar(40)'),
		   @AssignedToDateStr = T.C.value('(AssignedToDate/text())[1]', 'varchar(40)'),
		   @AssignedToInspectorDateStr = T.C.value('(AssignedToInspectorDate/text())[1]', 'varchar(40)'),
		   @UpdatedDateStr = T.C.value('(UpdatedDate/text())[1]', 'varchar(40)')
	FROM @xmlData.nodes('/WorkOrderInfo/WorkOrderCollection/MessageDetail') AS T(c)
	
	IF (@StatusChangedDateStr <> '0')
	BEGIN
		;WITH XMLNAMESPACES ('http://www.wft.com/OutboundWO/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/OutboundWO/Response/v1.0')
		Select @StatusChangedDate = T.C.value('(StatusChangedDate/text())[1]', 'datetime')
		FROM @xmlData.nodes('/WorkOrderInfo/WorkOrderCollection/MessageDetail') AS T(c)
	END
	
	IF (@TransactionDateStr <> '0')
	BEGIN
		;WITH XMLNAMESPACES ('http://www.wft.com/OutboundWO/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/OutboundWO/Response/v1.0')
		Select @TransactionDate = T.C.value('(TransactionDate/text())[1]', 'datetime')
		FROM @xmlData.nodes('/WorkOrderInfo/WorkOrderCollection/MessageDetail') AS T(c)
	END
	
	IF (@StartDateStr <> '0')
	BEGIN
		;WITH XMLNAMESPACES ('http://www.wft.com/OutboundWO/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/OutboundWO/Response/v1.0')
		Select @StartDate = T.C.value('(StartDate/text())[1]', 'datetime')
		FROM @xmlData.nodes('/WorkOrderInfo/WorkOrderCollection/MessageDetail') AS T(c)
	END
	
	IF (@RequestedDateStr <> '0')
	BEGIN
		;WITH XMLNAMESPACES ('http://www.wft.com/OutboundWO/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/OutboundWO/Response/v1.0')
		Select @RequestedDate = T.C.value('(RequestedDate/text())[1]', 'datetime')
		FROM @xmlData.nodes('/WorkOrderInfo/WorkOrderCollection/MessageDetail') AS T(c)
	END
	
	IF (@CompletionDateStr <> '0')
	BEGIN
		;WITH XMLNAMESPACES ('http://www.wft.com/OutboundWO/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/OutboundWO/Response/v1.0')
		Select @CompletionDate = T.C.value('(CompletionDate/text())[1]', 'datetime')
		FROM @xmlData.nodes('/WorkOrderInfo/WorkOrderCollection/MessageDetail') AS T(c)
	END
	
	IF (@AssignedToDateStr <> '0')
	BEGIN
		;WITH XMLNAMESPACES ('http://www.wft.com/OutboundWO/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/OutboundWO/Response/v1.0')
		Select @AssignedToDate = T.C.value('(AssignedToDate/text())[1]', 'datetime')
		FROM @xmlData.nodes('/WorkOrderInfo/WorkOrderCollection/MessageDetail') AS T(c)
	END
	
	IF (@AssignedToInspectorDateStr <> '0')
	BEGIN
		;WITH XMLNAMESPACES ('http://www.wft.com/OutboundWO/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/OutboundWO/Response/v1.0')
		Select @AssignedToInspectorDate = T.C.value('(AssignedToInspectorDate/text())[1]', 'datetime')
		FROM @xmlData.nodes('/WorkOrderInfo/WorkOrderCollection/MessageDetail') AS T(c)
	END
	
	IF (@UpdatedDateStr <> '0')
	BEGIN
		;WITH XMLNAMESPACES ('http://www.wft.com/OutboundWO/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/OutboundWO/Response/v1.0')
		Select @UpdatedDate = T.C.value('(UpdatedDate/text())[1]', 'datetime')
		FROM @xmlData.nodes('/WorkOrderInfo/WorkOrderCollection/MessageDetail') AS T(c)
	END
	
	SET @JDEWorkOrderId = null
	
	Select @JDEWorkOrderId = JDEWorkOrderId From AesOps.dbo.JDEWorkOrders Where WorkOrderNumber = @WorkOrderNumber
	
	exec usp_MyAdvisor_Logs @RunId,'usp_ProcessJDEWOOutboundFeedXml', '01.XML Data read', @startDateTime

	IF (ISNUMERIC(@DispatchNumber) = 0)
		SET @DispatchNumber = null

	if @JDEWorkOrderId is null
	BEGIN

	SET @startDateTime=GETDATE();

	INSERT INTO JDEWorkOrders 
	(
		JDEWorkOrderId,
		WorkOrderNumber,
		[Source],
		[Target],
		Method,
		TransactionUserId,
		TransactionId,
		TransactionName,
		EdgeKey,
		EquipmentStatus,
		OrderType,
		OrderSuffix,
		RelatedOrderType,
		RelatedWONumber,
		ParentWONumber,
		TypeWO,
		WorkOrderPriority,
		[Description],
		StatusComment,
		Company,
		BusinessUnit,
		Branch,
		WorkOrderStatusCode,
		StatusChangedDate,
		Subsidiary,
		TransactionDate,
		StartDate,
		RequestedDate,
		CompletionDate,
		AssignedToDate,
		AssignedToInspectorDate,
		Reference,
		Reference2,
		EstimatedAmount,
		OriginalDollarsAmount,
		EstimatedHours,
		OriginalHours,
		ActualAmount,
		ActualHours,
		ShortItemNumber,
		SecondItemNumber,
		ThirdItemNumber,
		AssetItemNumber,
		PostingEdit,
		LotNumber,
		LotPotency,
		LotGrade,
		UpdatedDate,
		TimeOfDay,
		ParentNumber,
		WorkOrderCriticality,
		EstimatedDowntimeHours,
		ActualDowntimeHours,
		MeterPosition,
		EstimatedLaborAmount,
		EstimatedMaterialAmount,
		EstimatedOtherAmount,
		ActualLaborAmount,
		ActualMaterialAmount,
		DocumentType,
		DateAdded,
		LastUpdatedDate,
		DispatchNumber,
		CustomerNumber
	)
	SELECT 
		NEWID(),
		@WorkOrderNumber,
		@Source,
		@Target,
		@Method,
		@TransactionUserId,
		@TransactionId,
		@TransactionName,
		@EdgeKey,
		@EquipmentStatus,
		@OrderType,
		@OrderSuffix,
		@RelatedOrderType,
		@RelatedWONumber,
		@ParentWONumber,
		@TypeWO,
		@WorkOrderPriority,
		@Description,
		@StatusComment,
		@Company,
		@BusinessUnit,
		@Branch,
		@WorkOrderStatusCode,
		@StatusChangedDate,
		@Subsidiary,
		@TransactionDate,
		@StartDate,
		@RequestedDate,
		@CompletionDate,
		@AssignedToDate,
		@AssignedToInspectorDate,
		@Reference,
		@Reference2,
		@EstimatedAmount,
		@OriginalDollarsAmount,
		@EstimatedHours,
		@OriginalHours,
		@ActualAmount,
		@ActualHours,
		@ShortItemNumber,
		@SecondItemNumber,
		@ThirdItemNumber,
		@AssetItemNumber,
		@PostingEdit,
		@LotNumber,
		@LotPotency,
		@LotGrade,
		@UpdatedDate,
		@TimeOfDay,
		@ParentNumber,
		@WorkOrderCriticality,
		@EstimatedDowntimeHours,
		@ActualDowntimeHours,
		@MeterPosition,
		@EstimatedLaborAmount,
		@EstimatedMaterialAmount,
		@EstimatedOtherAmount,
		@ActualLaborAmount,
		@ActualMaterialAmount,
		@DocumentType,
		GETDATE(),
		GETDATE(),
		@DispatchNumber,
		@CustomerNumber
	
	exec usp_MyAdvisor_Logs @RunId,'usp_ProcessJDEWOOutboundFeedXml', '02.JDEWorkOrders Insert', @startDateTime
	
	END

	ELSE
	BEGIN

	SET @startDateTime=GETDATE();

	UPDATE JDEWorkOrders 
	SET [Source] = @Source,
		[Target] = @Target,
		Method = @Method,
		TransactionUserId = @TransactionUserId,
		TransactionId = @TransactionId,
		TransactionName = @TransactionName,
		EdgeKey = @EdgeKey,
		EquipmentStatus = @EquipmentStatus,
		OrderType = @OrderType,
		OrderSuffix = @OrderSuffix,
		RelatedOrderType = @RelatedOrderType,
		RelatedWONumber = @RelatedWONumber,
		ParentWONumber = @ParentWONumber,
		TypeWO = @TypeWO,
		WorkOrderPriority = @WorkOrderPriority,
		[Description] = @Description,
		StatusComment = @StatusComment,
		Company = @Company,
		BusinessUnit = @BusinessUnit,
		Branch = @Branch,
		WorkOrderStatusCode = @WorkOrderStatusCode,
		StatusChangedDate = @StatusChangedDate,
		Subsidiary = @Subsidiary,
		TransactionDate = @TransactionDate,
		StartDate = @StartDate,
		RequestedDate = @RequestedDate,
		CompletionDate = @CompletionDate,
		AssignedToDate = @AssignedToDate,
		AssignedToInspectorDate = @AssignedToInspectorDate,
		Reference = @Reference,
		Reference2 = @Reference2,
		EstimatedAmount = @EstimatedAmount,
		OriginalDollarsAmount = @OriginalDollarsAmount,
		EstimatedHours = @EstimatedHours,
		OriginalHours = @OriginalHours,
		ActualAmount = @ActualAmount,
		ActualHours = @ActualHours,
		ShortItemNumber = @ShortItemNumber,
		SecondItemNumber = @SecondItemNumber,
		ThirdItemNumber = @ThirdItemNumber,
		AssetItemNumber = @AssetItemNumber,
		PostingEdit = @PostingEdit,
		LotNumber = @LotNumber,
		LotPotency = @LotPotency,
		LotGrade = @LotGrade,
		UpdatedDate = @UpdatedDate,
		TimeOfDay = @TimeOfDay,
		ParentNumber = @ParentNumber,
		WorkOrderCriticality = @WorkOrderCriticality,
		EstimatedDowntimeHours = @EstimatedDowntimeHours,
		ActualDowntimeHours = @ActualDowntimeHours,
		MeterPosition = @MeterPosition,
		EstimatedLaborAmount = @EstimatedLaborAmount,
		EstimatedMaterialAmount = @EstimatedMaterialAmount,
		EstimatedOtherAmount = @EstimatedOtherAmount,
		ActualLaborAmount = @ActualLaborAmount,
		ActualMaterialAmount = @ActualMaterialAmount,
		DocumentType = @DocumentType,
		LastUpdatedDate = GETDATE(),
		DispatchNumber = @DispatchNumber,
		CustomerNumber = @CustomerNumber
	WHERE JDEWorkOrderId = @JDEWorkOrderId 
	
	exec usp_MyAdvisor_Logs @RunId,'usp_ProcessJDEWOOutboundFeedXml', '03.JDEWorkOrders Update', @startDateTime
	
	END

	;WITH XMLNAMESPACES ('http://www.wft.com/OutboundWO/Response/v1.0' AS inp1,
	DEFAULT 'http://www.wft.com/OutboundWO/Response/v1.0')
	insert into AesImport.dbo.SOAProcessedLog (TransactionId, TransactionName, DateAdded)
	select 
        ltrim(rtrim(T.c.value('(TransactionId/text())[1]', 'int'))) AS TransactionId,
        ltrim(rtrim(T.c.value('(TransactionName/text())[1]', 'varchar(25)'))) AS TransactionName,
		GETDATE()
	FROM @xmlData.nodes('/WorkOrderInfo/WorkOrderCollection/MessageHeader') AS T(c)

--IF @@ERROR <> 0
--BEGIN
--	ROLLBACK
--	RAISERROR ('Error in Processing JDE WO Outbound Feed, using usp_ProcessJDEWOOutboundFeedXml', 16, 1)
--	RETURN
--END

--COMMIT

END
GO
/****** Object:  StoredProcedure [dbo].[usp_ProcessJDEWOSummaryFeedXml]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- WO-CLOSE 
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	For WO-CLOSE transaction name
-- =============================================
CREATE PROCEDURE [dbo].[usp_ProcessJDEWOSummaryFeedXml]
	@xmlData xml
AS
BEGIN
	SET NOCOUNT ON
	
-- BEGIN TRANSACTION
	DECLARE @JDEWorkOrderId as uniqueidentifier
	DECLARE @WorkOrderNumber as varchar(30)
	DECLARE @Description as varchar(255)
	DECLARE @Source as varchar(30)
	DECLARE @Target as varchar(30)
	DECLARE @Method as varchar(30)
	DECLARE @TransactionUserId as varchar(30)
	DECLARE @TransactionId as varchar(30)
	DECLARE @TransactionName as varchar(30)
	DECLARE @WorkOrderStatus as varchar(6)
	DECLARE @DocumentType as varchar(6)
	DECLARE @MiscCost as float
	DECLARE @ExchangeRate as float
	DECLARE @ActaulLaborInUSD as float
	DECLARE @ActualMaterialInUSD as float
	DECLARE @ActaulMiscCostInUSD as float
	DECLARE @MiscCostInUSD as float
	
	;WITH XMLNAMESPACES ('http://www.wft.com/WOSummary/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/WOSummary/Response/v1.0')
	Select @Source = T.C.value('(Source/text())[1]', 'varchar(30)'),
		@Target = T.C.value('(Target/text())[1]', 'varchar(30)'),
		@Method = T.C.value('(Method/text())[1]', 'varchar(30)'),
		@TransactionUserId = T.C.value('(TransactionUserId/text())[1]', 'varchar(30)'),
		@TransactionId = T.C.value('(TransactionId/text())[1]', 'varchar(30)'),
		@TransactionName = T.C.value('(TransactionName/text())[1]', 'varchar(30)')
	FROM @xmlData.nodes('/WOSummaryInfo/WOSummaryCollection/MessageHeader') AS T(c)
			
	;WITH XMLNAMESPACES ('http://www.wft.com/WOSummary/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/WOSummary/Response/v1.0')
	Select @WorkOrderNumber = T.C.value('(WorkOrderNumber/text())[1]', 'varchar(30)'),
		@Description = T.C.value('(Description/text())[1]', 'varchar(255)'),
		@WorkOrderStatus = T.C.value('(WorkOrderStatus/text())[1]', 'varchar(6)'),
		@DocumentType = T.C.value('(DocumentType/text())[1]', 'varchar(6)'),
		@MiscCost = T.C.value('(MiscCost/text())[1]', 'float'),
		@ExchangeRate = T.C.value('(ExchangeRate/text())[1]', 'float'),
		@ActaulLaborInUSD = T.C.value('(ActaulLaborInUSD/text())[1]', 'float'),
		@ActualMaterialInUSD = T.C.value('(ActualMaterialInUSD/text())[1]', 'float'),
		@ActaulMiscCostInUSD = T.C.value('(ActaulMiscCostInUSD/text())[1]', 'float'),
		@MiscCostInUSD = T.C.value('(MiscCostInUSD/text())[1]', 'float')
	FROM @xmlData.nodes('/WOSummaryInfo/WOSummaryCollection/MessageDetail') AS T(c)
	
	SET @JDEWorkOrderId = null
	
	Select @JDEWorkOrderId = JDEWorkOrderId From dbo.JDEWorkOrders Where WorkOrderNumber = @WorkOrderNumber
	
	if @JDEWorkOrderId is null
	BEGIN
	
	INSERT INTO JDEWorkOrders 
	(
		JDEWorkOrderId,
		WorkOrderNumber,
		[Source],
		[Target],
		Method,
		TransactionUserId,
		TransactionId,
		TransactionName,
		[Description],
		DocumentType,
		WorkOrderStatus,
		MiscCost,
		ExchangeRate,
		ActaulLaborInUSD,
		ActualMaterialInUSD,
		ActaulMiscCostInUSD,
		MiscCostInUSD,
		DateAdded,
		LastUpdatedDate
	)
	SELECT 
		NEWID(),
		@WorkOrderNumber,
		@Source,
		@Target,
		@Method,
		@TransactionUserId,
		@TransactionId,
		@TransactionName,
		@Description,
		@DocumentType,
		@WorkOrderStatus,
		@MiscCost,
		@ExchangeRate,
		@ActaulLaborInUSD,
		@ActualMaterialInUSD,
		@ActaulMiscCostInUSD,
		@MiscCostInUSD,
		GETDATE(),
		GETDATE()
	END
	ELSE
	BEGIN
	
	UPDATE JDEWorkOrders 
	SET [Source] = @Source,
		[Target] = @Target,
		Method = @Method,
		TransactionUserId = @TransactionUserId,
		TransactionId = @TransactionId,
		TransactionName = @TransactionName,
		[Description] = @Description,
		DocumentType = @DocumentType,
		WorkOrderStatus = @WorkOrderStatus,
		MiscCost = @MiscCost,
		ExchangeRate = @ExchangeRate,
		ActaulLaborInUSD = @ActaulLaborInUSD,
		ActualMaterialInUSD = @ActualMaterialInUSD,
		ActaulMiscCostInUSD = @ActaulMiscCostInUSD,
		MiscCostInUSD = @MiscCostInUSD,
		LastUpdatedDate = GETDATE()
	WHERE JDEWorkOrderId = @JDEWorkOrderId
	END
	
	;WITH XMLNAMESPACES ('http://www.wft.com/WOSummary/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/WOSummary/Response/v1.0')
	insert into AesImport.dbo.SOAProcessedLog (TransactionId, TransactionName, DateAdded)
	select 
        ltrim(rtrim(@TransactionId)) AS TransactionId,
        ltrim(rtrim(@TransactionName)) AS TransactionName,
		GETDATE()

--IF @@ERROR <> 0
--BEGIN
--	ROLLBACK
--	RAISERROR ('Error in Processing JDE WO Summary Feed, using usp_ProcessJDEWOSummaryFeedXml', 16, 1)
--	RETURN
--END

--COMMIT

END
GO
/****** Object:  StoredProcedure [dbo].[usp_ProcessJDEWOSwapInFeedXml]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--WOISSUE
CREATE PROCEDURE [dbo].[usp_ProcessJDEWOSwapInFeedXml]
	@xmlData xml
AS
BEGIN
	SET NOCOUNT ON
	
--BEGIN TRANSACTION
	
	DECLARE @JDEWOSwapInFeedId as uniqueidentifier
	DECLARE @InventoryItemNum as varchar(255)
	DECLARE @SerialNum as varchar(255)
	
	Set @JDEWOSwapInFeedId = NEWID()
	
	;WITH XMLNAMESPACES ('http://www.wft.com/WorkOrderIssueInfo/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/WorkOrderIssueInfo/Response/v1.0')
	Select @SerialNum = T.c.value('(LotNumber/text())[1]', 'varchar(30)'),
		@InventoryItemNum = T.c.value('(ItemNumberShort/text())[1]', 'varchar(30)')
	FROM @xmlData.nodes('/WorkOrderCollection/MessageDetail') AS T(c)

	;WITH XMLNAMESPACES ('http://www.wft.com/WorkOrderIssueInfo/Response/v1.0' AS inp1,
		DEFAULT 'http://www.wft.com/WorkOrderIssueInfo/Response/v1.0')
	
	INSERT INTO JDEWOSwapInFeeds 
	(
		JDEWOSwapInFeedId, 
		WorkOrderNum, 
		BranchPlant,
		LineNumber,
		JournalEntryLineNumber,
		SerialNum, 
		InventoryItemNum, 
		AssetNumber, 
		Quantity,
		Revision,
		TransactionDate,
		TransactionReference,
		UniqueKeyID,
		ParentSerialNum,
		ProcessState
	)
	SELECT 
		@JDEWOSwapInFeedId,
		T.c.value('(WorkOrderNumber/text())[1]', 'varchar(30)') AS WorkOrderNum,
		T.c.value('(InventoryBranchPlant/text())[1]', 'varchar(12)') AS BranchPlant,
		T.c.value('(LineNumber/text())[1]', 'int') AS LineNumber,
		T.c.value('(JournalEntryLineNumber/text())[1]', 'int') AS JournalEntryLineNumber,
		T.c.value('(LotNumber/text())[1]', 'varchar(30)') AS SerialNum,
		T.c.value('(ItemNumberShort/text())[1]', 'varchar(30)') AS InventoryItemNum,
		T.c.value('(AssetItemNumber/text())[1]', 'varchar(30)') AS AssetNumber,
		T.c.value('(QuantityAvailable/text())[1]', 'int') AS Quantity,
		T.c.value('(LotGrade/text())[1]', 'varchar(2)') AS Revision,
		T.c.value('(TransactionDate/text())[1]', 'datetime') AS TransactionDate,
		T.c.value('(TransactionReference/text())[1]', 'varchar(30)') AS TransactionReference,
		T.c.value('(UniqueKeyID/text())[1]', 'int') AS UniqueKeyID,
		T.c.value('(Reference2/text())[1]', 'varchar(30)') AS ParentSerialNum,
		0 AS ProcessState
	FROM @xmlData.nodes('/WorkOrderCollection/MessageDetail') AS T(c)

	;WITH XMLNAMESPACES ('http://www.wft.com/WorkOrderIssueInfo/Response/v1.0' AS inp1,
	DEFAULT 'http://www.wft.com/WorkOrderIssueInfo/Response/v1.0')

	insert into AesImport.dbo.SOAProcessedLog (TransactionId, TransactionName, DateAdded)
	select 
        ltrim(rtrim(T.c.value('(TransactionId/text())[1]', 'int'))) AS TransactionId,
        ltrim(rtrim(T.c.value('(TransactionName/text())[1]', 'varchar(25)'))) AS TransactionName,
		GETDATE()
	FROM @xmlData.nodes('/WorkOrderCollection/MessageHeader') AS T(c)
	

--IF @@ERROR <> 0
--BEGIN
--	ROLLBACK
--	RAISERROR ('Error in Processing JDE WO Swap-In Feed, using usp_ProcessJDEWOSwapInFeedXml', 16, 1)
--	RETURN
--END

--COMMIT

END



GO
/****** Object:  StoredProcedure [dbo].[usp_ReceivedReleasedMfgReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_ReceivedReleasedMfgReport]
(
	@xmlData XML
)
AS
BEGIN
SET NOCOUNT ON;

DECLARE @ToolPanel AS VARCHAR(25)
DECLARE @ReportName AS VARCHAR(50)
DECLARE @SelectedDate AS DATETIME
DECLARE @NumberOfWeeks AS INT 
DECLARE @reportType AS INT 
DECLARE @assetType AS VARCHAR(6) 

DECLARE @branchPlant varchar(256)

SELECT @ToolPanel = T.c.value('.', 'VARCHAR(25)')  FROM  @xmlData.nodes('/Filters/ToolPanel') T(c);
SELECT @ReportName = T.c.value('.', 'VARCHAR(50)')  FROM  @xmlData.nodes('/Filters/ReportName') T(c);
SELECT @SelectedDate =  T.c.value('.', 'DATETIME')  FROM  @xmlData.nodes('/Filters/SelectedDate') T(c);
SELECT @NumberOfWeeks =  T.c.value('.', 'INT') FROM  @xmlData.nodes('/Filters/NumberOfWeeks') T(c);
SELECT @reportType =  T.c.value('.', 'INT') FROM  @xmlData.nodes('/Filters/ReportType') T(c);
SELECT @assetType =  T.c.value('.', 'VARCHAR(6)') FROM  @xmlData.nodes('/Filters/assetType') T(c);

Create Table #tblData (
	Id int IDENTITY(1,1) NOT NULL,
	ToolCode varchar(50),
	InOut varchar(3),
)

if @reportType = 1
begin
	set @branchPlant = 'UK'
end
else if @reportType = 2
begin
	set @branchPlant = 'XX'
end
else
begin
	set @branchPlant = 'GO'
end

Declare @dateCounter as int
Declare @dateSelect as datetime
Declare @sql as varchar(8000)

set @dateCounter = 0
set @dateSelect = @SelectedDate
set @sql = ''

While @dateCounter <= @NumberOfWeeks
BEGIN
	if(@dateCounter = 0)
	begin
	    set @sql = @sql + ' Alter table #tblData add [' + 
								convert(varchar(10),@dateSelect, 101)+ ']  varchar(10) ' 
	end
	else
	Begin
		set @dateSelect = DateAdd(d,-7,@dateSelect)
		set @sql = @sql + ' Alter table #tblData add [' + convert(varchar(10),@dateSelect, 101) + '] varchar(10) '
	end
	
	set @dateCounter = @dateCounter + 1
END
--print @sql
Exec(@sql)


INSERT INTO #tblData (ToolCode,InOut) 
Select Distinct ToolCode,'In' from JobCapacityReportConfig Where ToolPanel = @ToolPanel AND ReportName = @ReportName order by ToolCode

DECLARE @sIndex AS INT
DECLARE @eIndex AS INT
Declare @ToolCode as varchar(50)

set @dateCounter = 0
set @dateSelect = @SelectedDate
set @sql = ''

SELECT @sIndex = Min(Id) FROM #tblData where InOut = 'In'
SELECT @eIndex = MAX(Id) FROM #tblData where InOut = 'In'
WHILE(@sIndex <= @eIndex)
BEGIN
	
	Select @ToolCode = ToolCode from #tblData where Id = @sIndex And InOut = 'In'
	if(@ToolCode is not null)
	BEGIN
		While @dateCounter <= @NumberOfWeeks
		BEGIN


				set @sql = ' Update #tblData Set [' + 
										convert(varchar(10),@dateSelect, 101)+ '] = ' +
										'( Select  Count(Distinct cid.CustomsInvoiceDetailId) 
											From CustomsInvoiceDetails cid INNER JOIN 
											CustomsInvoices ci on cid.CustomsInvoiceId = ci.CustomsInvoiceId
											Where	cid.ToolCode = ''' + @ToolCode + ''' And
													cid.AssetId is not null '
													
													if (@assetType is not null)
													Begin
														if (@assetType = 'NEW') 
														Begin
															 set @sql = @sql + ' And AssetId not in (select FixedAssetId from PartTransferDtl) '
														end
														
														if (@assetType = 'REPAIR') 
														Begin
															set @sql = @sql + ' And AssetId in (select FixedAssetId from PartTransferDtl) '
														end
													End
													
													set @sql = @sql + ' And
													ci.FromBranchPlant in (''AC'',''AE'',''FW'',''RH'', ''AW'') And 
													ci.ToBranchPlant in (''' + @branchPlant + ''') And
													ci.CustomsInvoiceStatusId not in (3,4) And
													(ci.IsCancelled is null OR ci.IsCancelled = 0) 
													And DATEADD(D, 0, DATEDIFF(D, 0, ci.InvoiceDate)) > ''' 
												+ CONVERT(VARCHAR(10),DateAdd(d,-7,@dateSelect),101) + ''' AND DATEADD(D, 0, DATEDIFF(D, 0, ci.InvoiceDate)) <= ''' +
												  convert(varchar(10),@dateSelect, 101) + ''' )'

				set @sql = @sql + ' Where Id = ' + Convert(varchar(10),@sIndex) + ' And ToolCode = ''' + @ToolCode + ''' And InOut = ''In'''

				
														
			--print @sql
			exec(@sql)										
			set @dateSelect = DateAdd(d,-7,@dateSelect)
			set @dateCounter = @dateCounter + 1
		END
	END
	SET @dateCounter = 0
	SET @dateSelect = @SelectedDate
	SET @sql = ''
	SET @sIndex = @sIndex + 1
End


INSERT INTO #tblData (ToolCode,InOut) 
Select Distinct ToolCode,'Out' from JobCapacityReportConfig Where ToolPanel = @ToolPanel AND ReportName = @ReportName order by ToolCode

set @dateCounter = 0
set @dateSelect = @SelectedDate
set @sql = ''

SELECT @sIndex = Min(Id) FROM #tblData where InOut = 'Out'
SELECT @eIndex = MAX(Id) FROM #tblData where InOut = 'Out'
WHILE(@sIndex <= @eIndex)
BEGIN
	
	Select @ToolCode = ToolCode from #tblData where Id = @sIndex And InOut = 'Out'
	if(@ToolCode is not null)
	BEGIN
		While @dateCounter <= @NumberOfWeeks
		BEGIN

				set @sql = ' Update #tblData Set [' + 
										convert(varchar(10),@dateSelect, 101) + '] = ' +
										'( Select Count(srda.FixedAssetId) 
											From ShipmentRequestForms sr INNER JOIN
											ShipmentRequestFormDetails srd on sr.ShipmentRequestFormId = srd.ShipmentRequestFormId INNER JOIN 
											ShipmentFormDetailAssets srda on srd.ShipmentRequestFormDetailId = srda.ShipmentRequestFormDetailId INNER JOIN
											ItemNums i on i.ItemNum = srd.ItemNum
											Where	i.ToolCode = ''' + @ToolCode + ''' And 
													sr.FromBranchPlant=''' +@branchPlant+ ''' And 
													srda.FixedAssetId is not null '
											
												if (@assetType is not null)
													Begin
														if (@assetType = 'NEW') 
															Begin
																 set @sql = @sql + ' And srda.FixedAssetId not in (select FixedAssetId from PartTransferDtl) '
															end
														
														if (@assetType = 'REPAIR') 
															Begin
																set @sql = @sql + ' And srda.FixedAssetId in (select FixedAssetId from PartTransferDtl) '
															end
													End
													
											set @sql = @sql + ' And DATEADD(D, 0, DATEDIFF(D, 0, sr.CreateDate)) > ''' 
											+ CONVERT(VARCHAR(10),DateAdd(d,-7,@dateSelect),101) + ''' AND DATEADD(D, 0, DATEDIFF(D, 0, sr.CreateDate)) <= ''' +
											  convert(varchar(10),@dateSelect, 101) + ''' )'
				set @sql = @sql + ' Where Id = ' + Convert(varchar(10),@sIndex) + ' And ToolCode = ''' + @ToolCode + ''' And InOut = ''Out'''
				
														
			print @sql
			exec(@sql)										
			set @dateSelect = DateAdd(d,-7,@dateSelect)
			set @dateCounter = @dateCounter + 1
		END
	END
	SET @dateCounter = 0
	SET @dateSelect = @SelectedDate
	SET @sql = ''
	SET @sIndex = @sIndex + 1
End





select ToolCode + ' ' + InOut as ToolCodeString, * from #tblData order by ToolCode,InOut

Drop Table #tblData
END

GO
/****** Object:  StoredProcedure [dbo].[usp_RegDistToXml]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:   Sachin Mhalungekar
-- Create date: 06/13/2019  
-- Description: Get Locations To Xml  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_RegDistToXml] 
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;
	SELECT 1 AS TAG
	       ,NULL AS PARENT
		   ,reg.[RegionDesc] AS [Region!1!Region]
		   ,reg.[Region] AS [Region!1!RegionCode]
		   ,reg.[RegionId] AS [Region!1!RegionId]
		   ,NULL AS  [Country!2!Country]
		   ,NULL AS  [Country!2!CountryCode]
		   ,NULL AS  [Country!2!CountryId]
		   ,NULL AS  [BranchPlant!3!BranchPlant]
		   ,NULL AS  [BranchPlant!3!BranchPlantId]
		   ,NULL AS  [BranchPlant!3!BranchPlantName]
		   ,NULL AS  [BranchPlant!3!RelBaseCode]
		   FROM [Regions] AS reg
	
		   UNION ALL
	
	SELECT 2 AS TAG
	       ,1 AS PARENT
		   ,reg.[RegionDesc] AS [Region!1!Region]
		   ,reg.[Region] AS [Region!1!RegionCode]
		   ,reg.[RegionId] AS [Region!1!RegionId]
		   ,ctry.[CountryDesc] AS  [Country!2!Country]
		   ,ctry.[Country] AS  [Country!2!CountryCode]
		   ,ctry.[CountryId] AS  [Country!2!CountryId]
		   ,NULL AS  [BranchPlant!3!BranchPlant]
		   ,NULL AS  [BranchPlant!3!BranchPlantId]
		   ,NULL AS  [BranchPlant!3!BranchPlantName]
		   ,NULL AS  [BranchPlant!3!RelBaseCode]
		   FROM [Countries] AS ctry, [Regions] AS reg
		   WHERE ctry.[RegionCode] = reg.[Region]
	
		   UNION ALL
	
	SELECT 3 AS TAG
	       ,2 AS PARENT
		   ,reg.[RegionDesc] AS [Region!1!Region]
		   ,reg.[Region] AS [Region!1!RegionCode]
		   ,reg.[RegionId] AS [Region!1!RegionId]
		   ,ctry.CountryDesc AS  [Country!2!Country]
		   ,ctry.Country AS  [Country!2!CountryCode]
		   ,ctry.CountryId AS  [Country!2!CountryId]
		   ,plant.[BranchPlant] AS  [BranchPlant!3!BranchPlant]
		   ,plant.[BranchPlantId] AS  [BranchPlant!3!BranchPlantId]
		   ,plant.[MCDL01] AS  [BranchPlant!3!BranchPlantName]
		   ,plant.[RelBaseCode] AS  [BranchPlant!3!RelBaseCode]
		   FROM [Countries] AS ctry, [Regions] AS reg, [BranchPlants] AS plant
		   WHERE ctry.[RegionCode] = reg.[Region]
		   AND plant.[Country] = ctry.[Country]
		   AND plant.[RelBaseCode] IS NOT NULL
		   
		   ORDER BY [Region!1!RegionCode], [Country!2!CountryCode], [BranchPlant!3!BranchPlant]
	
	FOR XML EXPLICIT, ROOT ('Locations')
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Rel_GetBuildSheetProgress]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHAULNGEKAR
-- Create date: 11/02/2020
-- Description: GET RELIABILITY BUILD SHEET PROGRESS STATUS  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_Rel_GetBuildSheetProgress]   
 -- Add the parameters for the stored procedure here  
 @toolStringId uniqueidentifier
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  

	DECLARE @startDateTime DATETIME, @runId UNIQUEIDENTIFIER;
	SET @startDateTime = GETDATE();
	SET @runId = NEWID();

 --below are buildSheetProgressIds -----------------------------
 --InAssetAdd = 1,
 --InBuildUp = 2,
 --InTearDown = 3,
 --InMaintenance = 4

 DECLARE @buildSheetProgressId VARCHAR(2), @isBuildSheetEdiatable VARCHAR(2) = 1;

 SELECT TOP 1 @buildSheetProgressId = CAST(ISNULL([Status], '1') AS VARCHAR(2)) FROM ToolStrings (NOLOCK) WHERE  ToolStringID = @toolStringId;

  EXEC usp_MyAdvisor_Logs @runId, 'usp_Rel_GetBuildSheetProgress', 'Get buildSheetProgressId from toolstrings', @startDateTime
  SET @startDateTime = GETDATE();

IF (EXISTS(SELECT TOP 1 AssetRepairTrackId FROM PFTWO (NOLOCK) WHERE  AssetRepairTrackId = @toolStringId AND PFTType = 5) OR
	EXISTS(SELECT	TOP 1 JobId FROM JobQueue (NOLOCK)
		WHERE JobId = '50' AND JobQueueStatusId IN (1, 4) and RequestXml.value('(/BHAMaintenance/MaintenanceFormSourceId/text())[1]', 'uniqueidentifier') = @toolStringId) OR 
		@buildSheetProgressId = '3' OR @buildSheetProgressId = '4')
	BEGIN
		SET @isBuildSheetEdiatable = '0';		-- isBuildSheetEdiatable false		
	END

	EXEC usp_MyAdvisor_Logs @runId, 'usp_Rel_GetBuildSheetProgress', 'Set & Get buildSheetProgressId on condition as per pftwo, jobqueue', @startDateTime

SELECT @buildSheetProgressId 'ProgressId', @isBuildSheetEdiatable 'IsBuildSheetEdiatable';

 END

GO
/****** Object:  StoredProcedure [dbo].[usp_Rel_GetJarToolInventory]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHAULNGEKAR
-- Create date: 03/02/2021
-- Description: GET JarToolInventory 
-- =============================================  
CREATE PROCEDURE [dbo].[usp_Rel_GetJarToolInventory]   
 -- Add the parameters for the stored procedure here  
 @jobId uniqueidentifier
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  

 SELECT 
			jrt.ToolStringId, t.SerialNumber, t.[Type], t.[CheckSum], t.LegacyCheckSum
 FROM		JarRunTools jrt
 LEFT JOIN	Jobs j ON j.JobId = jrt.JobID
 LEFT JOIN	ToolStrings t ON t.ToolStringID = jrt.ToolStringID
 WHERE		t.IsDeleted = 0 AND	jrt.JobId = @jobId
 GROUP BY	jrt.ToolStringId, t.SerialNumber, t.[Type], t.[CheckSum], t.LegacyCheckSum
 ORDER BY	t.[Type], t.SerialNumber

 END
GO
/****** Object:  StoredProcedure [dbo].[usp_RelBusinessIntelligenceDataSetUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--==================================================================
--MODIFIED BY : SUYEB MOHAMMAD
--MODIFIED ON : 9 Aug 2017
--DESCRIPTION : To add two new fields X and Y from jobs table
--===================================================================
CREATE PROCEDURE [dbo].[usp_RelBusinessIntelligenceDataSetUpdate]
(
	@PreferredLoadDate as datetime = NULL
)
AS
BEGIN

DECLARE @LastLoadDate As datetime

IF (@PreferredLoadDate IS NOT NULL)
BEGIN
	SET @LastLoadDate = @PreferredLoadDate
END
ELSE
BEGIN
	SET @LastLoadDate = (SELECT MAX(LoadDate) From RelBusinessIntelligenceDataSet (NOLOCK))
END

DECLARE @TableVar TABLE (Id uniqueidentifier NOT NULL, Name varchar(20))

--find the new run data (since an incident report is always attached to a run report, the run report will always import with an incident report)
INSERT INTO @TableVar (Id, Name)
SELECT r.RunID, 'RunId' As Name
FROM Jobs (NOLOCK) j 
LEFT JOIN Wells (NOLOCK) w on w.JobID = j.JobID AND w.IsDeleted = 0
LEFT JOIN Runs (NOLOCK) r on r.WellID = w.WellID AND r.IsDeleted = 0
LEFT JOIN Incidents (NOLOCK) i on r.RunID = i.RunID AND i.IsDeleted = 0
WHERE j.IsDeleted = 0 AND r.IsDownHole = 1
AND r.ImportDate > @LastLoadDate
GROUP BY r.RunID

--find the updated incident data (any time an incident is updated in R&M Analysis, an audit timestamp is set for that incident in AuditRMAnalysis)
INSERT INTO @TableVar (Id, Name)
SELECT IncidentID, 'IncidentId' As Name
FROM AuditRMAnalysis (NOLOCK)
WHERE ActionDate > @LastLoadDate
GROUP BY IncidentID

--remove any updated incidents that are duplicates for a run
--BEGIN INC DUPS REMOVAL
SELECT RunID, Count(*) IncCnt
INTO #DUPS
FROM Incidents 
WHERE IsDeleted = 0
AND IsDownHole = 1
AND ImportDate >= DateAdd(yyyy, -2, GETDATE())
GROUP BY RunID
HAVING Count(*) > 1

IF ((Select Count(*) From #DUPS) > 0)
BEGIN
	DELETE FROM @TableVar
	WHERE Name = 'IncidentId'
	AND Id IN (
				SELECT IncidentID FROM Incidents
				WHERE IsDeleted = 0
				AND RunID IN (Select RunID From #DUPS)
				)
				
	DELETE FROM @TableVar
	WHERE Name = 'RunId'
	AND Id IN (Select RunID From #DUPS)
	
	DECLARE @RunIDs as varchar(500)
	SET @RunIDs = ''

	SELECT 
		@RunIDs = @RunIDs + RunID + ', '
	FROM #DUPS
	
	IF LEN(@RunIDs) > ''
    BEGIN
		SET @RunIDs = LEFT(@RunIDs, LEN(@RunIDs) - 1)
    END
	
	INSERT INTO JobQueue (JobId, CreateDate, RequestXml, JobQueueStatusId) 
	VALUES
	(
		1
		, getdate()
		, '<mail><to>yogesh.mane@weatherford.com</to><cc></cc><from></from><subject>BI Report Job Process Error</subject><body>The following RunIDs have multiple Incidents mapped: ' + @RunIDs + '</body><html>N</html></mail>'
		, 1
	)
	
END

DROP TABLE #DUPS
--END INC DUPS REMOVAL

--remove any records identified above that already exist in RelBusinessIntelligenceDataSet to make room for them to be reinserted
DELETE FROM RelBusinessIntelligenceDataSet
WHERE (
RunId in (Select Id From @TableVar Where Name = 'RunId')
OR IncidentId in (Select Id From @TableVar Where Name = 'IncidentId')
)

--insert records into tblBusinessIntelligenceDataSet based on the the Runs and Incidents identified as new or updated
INSERT INTO RelBusinessIntelligenceDataSet (
RunId
, RunYear
, RunMonth
, RunMonthName
, [Quarter]
, MonthYear
, Region
, Country
, District
, CustomerID
, Hemisphere
, RegionDesc
, DistrictDesc
, CustomerName
, JobNumber
, WptsReportId
, Rig
, JobStartDate
, JobEndDate
, JobEstEndDate
, TFF
, CSI
, NCI
, OS
, PR
, Others
, GFA
, NPT
, B2B
, MaxTempF
, MaxTempC
, OperHrs
, CircHrs
, DrillHrs
, LWD
, HELEM
, EM
, PP
, RSS
, MotorWFT
, RentalMotor
, AllMWD
, BECFIELD
, TENSOR
, GEOLINK
, GWD
, WPR
, AGS
, EMTwinwells
, Well
, RunNumber
, RunNumberCnt
, OffShore
, InHoleDate
, EndDate
, OutHoleDate
, IncidentId
, IncidentNumber
, TFFToolString
, TFFComponentID
, TFFComponent
, TFFComponentDesc
, TFFSerialNumber
, RMReportStatus
, MDStart
, MDEnd
, MDDistance
, TVDStart
, TVDEnd
, HoleSize
, MaxHydrostaticPressure
, MaxOperPressure
, MaxObservedPressure
, MudDensity
, BaseFluidEnd
, MaxDoglegRotating
, MaxDoglegSliding
, MaxInc
, FlowRate
, MotorSerialNumber
, MotorSize
, MotorLength
, MotorType
, Manufacturer
, LobesRS
, MotorRPM
, MotorOnBottom
, MotorOffBottom
, MotorDifferential
, Tools
, ToolSize
, CountryDesc
, FieldSymptom
, FieldSymptom2
, RSSFailureTFF
, RSSFailureCSI
, LWDFailureTFF
, LWDFailureCSI
, CompFailureCode
, CompFailureCodeDesc
, OutOfSpecCode
, OutOfSpecCodeDesc
, ProceduralCode
, ProceduralCodeDesc
, PRModes
, AverageROP
, RunLeadEngineers
, RunEngineers
, [Pulser (AES)]
, [DualPulser]
, [Driver Insert]
, [IDS]
, [DualIDS]
, [Gamma Ray Insert]
, [HAGR]
, [SAGR]
, [MFR Collar]
, [Azimuthal MFR]
, [Neutron Insert]
, [Density Insert]
, [Collar, SST Sensor]
, [BAP Insert]
, [Battery High Temp]
, [Battery IBM]
, [Battery Low Temp]
, [Battery Medium Temp]
, [Battery, Formation Tester]
, [Bias Unit]
, [Controller Insert]
, [Collar, Formation Tester]
, [Compensation Assembly]
, [TVM]
, [MWD Pulser (AES)]
, [MWD Pulser 2"]
, [Control Module Sonde]
, [BTR]
, [CDS]
, [CDST (Clever Deviation Sonde Top Mounted)]
, [GRG4]
, [Oriented Gamma Ray]
, [UGR]
, [MWD Battery High Temp]
, [MWD Battery Low Temp]
, [CSGX]
, [Gabis]
, [Gabis Battery]
, [Inclination Sonde]
, [VMS]
, [ExtendedRange]
, [DLC]
, [SMI]
, TotalComponentCount
, TotalCSICount
, TotalNCICount
, SolidPercentageMax
, SandPercentageMax
, WaterPercentageMax
, OilPercentageMax
, pHMax
, RotatingHrs
, ReasonsForPooh
, WaterDepth
, BitDeltaP
, WeightOnBit
, Torque
, SurfaceRPM
, UnderBalanced
, GasFlowRate
, SPP
, OrificeSize
, Latitude
, Longitude
, LocationCountry
, LocationState
, LocationCounty
, MotorFailureTFF
, MotorFailureCSI
, EMFailureTFF
, EMFailureCSI
, PPFailureTFF
, PPFailureCSI
, MWDFailureTFF
, MWDFailureCSI
, FaultCodeLevelOne
, FaultCodeDescLevelOne
, FaultCodeLevelTwo
, FaultCodeDescLevelTwo
, FaultCodeLevelThree
, FaultCodeDescLevelThree
, FieldSummary
, FieldSymptomSummary
, HeatWave
, HEX
, PulseCount
, RSSRevolutions
, CasingLink
, TBSMotorySteerable
, Geosteering
, LoadDate
, Criticality
, X
, Y
, RssMagnus
, WptsCparId
)
SELECT
RunID
, Year(OutHoleDate) As RunYear
, Month(OutHoleDate) As RunMonth
, Left(DateName(mm,OutHoleDate),3) As RunMonthName
, Case	When Month(OutHoleDate) >= 1 And Month(OutHoleDate) <= 3 Then 'Q1' 
		When Month(OutHoleDate) >= 4 And Month(OutHoleDate) <= 6 Then 'Q2' 
		When Month(OutHoleDate) >= 7 And Month(OutHoleDate) <= 9 Then 'Q3' 
		When Month(OutHoleDate) >= 10 And Month(OutHoleDate) <= 12 Then 'Q4' 
  End As [Quarter]
, Left(DateName(mm,OutHoleDate),3) + ' ' + Cast(Year(OutHoleDate) as varchar(4)) As MonthYear
, Region
, Country
, BranchPlant
, CustomerID
, Hemisphere
, RegionDesc
, BranchPlantName
, CustomerName
, JobNumber
, ReportID
, Rig
, Max(JobStartDate) As JobStartDate
, Max(JobEndDate) As JobEndDate
, Max(JobEstEndDate) As JobEstEndDate
, Max(TFF) As TFF
, Max(CSI) As CSI
, Max(NCI) As NCI
, Max(OS) As OS
, Max(PR) As PR
, Max(Others) As Others
, Case When (Select Top 1 GFANumber From GFAIncidents (NOLOCK) gfa Where gfa.IsDeleted = 0 And gfa.IncidentID = TMP.IncidentID Order By LastEdit Desc) Is Not Null Then 1 Else 0 End As GFA
, Max(AcceptedLostTime) As NPT
, 0
, ISNULL(Max(MaxTempF),0) As MaxTempF
, Max(MaxTempC) As MaxTempC
, Max(OperHrs) As OperHrs
, Max(CircHrs) As CircHrs
, Max(DrillHrs) As DrillHrs
, Max(LWD) As LWD
, Max(HELEM) As HELEM
, Max(EM) As EM
, Max(PP) As PP
, Max(RSS) As RSS
, Max(MotorWFT) As MotorWFT
, Max(MotorRental) As MotorRental
, Max(AllMWD) As AllMWD
, Max(BECFIELD) As BECFIELD
, Max(TENSOR) As TENSOR
, Max(GEOLINK) As GEOLINK
, Max(GWD) As GWD
, Max(WPR) As WPR
, Max(AGS) As AGS
, Max(EMTwinwells) As EMTwinwells
, Well
, RunNumber
, ROW_NUMBER() OVER (PARTITION BY JobNumber, Well ORDER BY JobNumber, Well, OutHoleDate ASC) AS Row_Number
, OffShore
, InHoleDate
, EndDate
, OutHoleDate
, IncidentId
, IncidentNumber
, Max(TFFToolString) As TFFToolString
, Max(TFFComponentID) As TFFComponentID
, Max(TFFComponent) As TFFComponent
, Max(TFFComponentDesc) As TFFComponentDesc
, Max(TFFSerialNumber) As TFFSerialNumber
, Max(RMReportStatus) As RMReportStatus
, Max(MDStart) As MDStart
, Max(MDEnd) As MDEnd
, (Max(MDEnd) - Max(MDStart)) As MDDistance
, Max(TVDStart) As TVDStart
, Max(TVDEnd) As TVDEnd
, Max(HoleSize) As HoleSize
, Max(MaxHydrostaticPressure) As MaxHydrostaticPressure
, Max(MaxOperPressure) As MaxOperPressure
, Max(MaxObservedPressure) As MaxObservedPressure
, Max(MudDensity) As MudDensity
, Max(BaseFluidEnd) As BaseFluidEnd
, Max(MaxDoglegRotating) As MaxDoglegRotating
, Max(MaxDoglegSliding) As MaxDoglegSliding
, Max(MaxInc) As MaxInc
, Max(FlowRate) As FlowRate
, Max(MotorSerialNumber) As MotorSerialNumber
, Max(MotorSize) As MotorSize
, Max(MotorLength) As MotorLength
, Max(MotorType) As MotorType
, Max(Manufacturer) As Manufacturer
, Max(LobesRS) As LobesRS
, Max(MotorRPM) As MotorRPM
, Max(MotorOnBottom) As MotorOnBottom
, Max(MotorOffBottom) As MotorOffBottom
, Max(MotorDifferential) As MotorDifferential
, STUFF((Select ', ' + t.SerialNumber 
		From ToolStrings (NOLOCK) t
		Left Join ToolStringComponentInfo (NOLOCK) tsci ON tsci.ToolStringId = t.ToolStringId 
		Where tsci.RunID = TMP.RunId
		Group By t.SerialNumber FOR XML PATH ('')
),1,2,'') AS Tools
, Max(ToolSize) As ToolSize
, CountryDesc
, Max(FieldSymptom) As FieldSymptom
, Max(FieldSymptom2) As FieldSymptom2
, Max(RSSFailureTFF) As RSSFailureTFF
, Max(RSSFailureCSI) As RSSFailureCSI
, Max(LWDFailureTFF) As LWDFailureTFF
, Max(LWDFailureCSI) As LWDFailureCSI
, Max(CompFailureCode) As CompFailureCode
, Max(CompFailureCodeDesc) As CompFailureCodeDesc
, Max(OutOfSpecCode) As OutOfSpecCode
, Max(OutOfSpecCodeDesc) As OutOfSpecCodeDesc
, Max(ProceduralCode) As ProceduralCode
, Max(ProceduralCodeDesc) As ProceduralCodeDesc
, Max(PRModes) As PRModes
, Max(AverageROP) As AverageROP
, STUFF((Select ', ' + e.FirstName + ' ' + e.LastName
		From EngineersOnDuty (NOLOCK) e
		Where e.IsLead = 1
		And e.RunID = TMP.RunId
		Group By e.LastName, e.FirstName FOR XML PATH ('')
),1,2,'') AS RunLeadEngineers
, STUFF((Select ', ' + e.FirstName + ' ' + e.LastName
		From EngineersOnDuty (NOLOCK) e
		Where e.RunID = TMP.RunId
		Group By e.LastName, e.FirstName FOR XML PATH ('')
),1,2,'') AS RunEngineers
, Max([Pulser (AES)]) As [Pulser (AES)]
, Case When Sum([Pulser (AES)]) > 1 Then 1 Else 0 End As [DualPulser]
, Max([Driver Insert]) As [Driver Insert]
, Max([IDS]) As [IDS]
, Case When Sum([IDS]) > 1 Then 1 Else 0 End As [DualIDS]
, Max([Gamma Ray Insert]) As [Gamma Ray Insert]
, Max([HAGR]) As [HAGR]
, Max([SAGR]) As [SAGR]
, Max([MFR Collar]) As [MFR Collar]
, Max([Azimuthal MFR]) As [Azimuthal MFR]
, Max([Neutron Insert]) As [Neutron Insert]
, Max([Density Insert]) As [Density Insert]
, Max([Collar, SST Sensor]) As [Collar, SST Sensor]
, Max([BAP Insert]) As [BAP Insert]
, Max([Battery High Temp]) As [Battery High Temp]
, Max([Battery IBM]) As [Battery IBM]
, Max([Battery Low Temp]) As [Battery Low Temp]
, Max([Battery Medium Temp]) As [Battery Medium Temp]
, Max([Battery, Formation Tester]) As [Battery, Formation Tester]
, Max([Bias Unit]) As [Bias Unit]
, Max([Controller Insert]) As [Controller Insert]
, Max([Collar, Formation Tester]) As [Collar, Formation Tester]
, Max([Compensation Assembly]) As [Compensation Assembly]
, Max([TVM]) As [TVM]
, Max([MWD Pulser (AES)]) As [MWD Pulser (AES)]
, Max([MWD Pulser 2"]) As [MWD Pulser 2"]
, Max([Control Module Sonde]) As [Control Module Sonde]
, Max([BTR]) As [BTR]
, Max([CDS]) As [CDS]
, Max([CDST (Clever Deviation Sonde Top Mounted)]) As [CDST (Clever Deviation Sonde Top Mounted)]
, Max([GRG4]) As [GRG4]
, Max([Oriented Gamma Ray]) As [Oriented Gamma Ray]
, Max([UGR]) As [UGR]
, Max([MWD Battery High Temp]) As [MWD Battery High Temp]
, Max([MWD Battery Low Temp]) As [MWD Battery Low Temp]
, Max([CSGX]) As [CSGX]
, Max([Gabis]) As [Gabis]
, Max([Gabis Battery]) As [Gabis Battery]
, Max([Inclination Sonde]) As [Inclination Sonde]
, Max(VMS) As [VMS]
, Max(ExtendedRange) As [ExtendedRange]
, Max(DLC) As [DLC]
, Max(SMI) As [SMI]
, Sum(TotalComponentCount) As TotalComponentCount
, Sum(CSI) As TotalCSICount
, Sum(NCI) As TotalNCICount
, Max(SolidPercentageMax) As SolidPercentageMax
, Max(SandPercentageMax) As SandPercentageMax
, Max(WaterPercentageMax) As WaterPercentageMax
, Max(OilPercentageMax) As OilPercentageMax
, Max(pHMax) As pHMax
, Max(RotatingHrs) As RotatingHrs
, Max(SUBSTRING(ISNULL(ReasonsForPooh,''),0, 2000)) As ReasonsForPooh
, Max(WaterDepth) As WaterDepth
, Max(BitDeltaP) As BitDeltaP
, Max(WeightOnBit) As WeightOnBit
, Max(Torque) As Torque
, Max(SurfaceRPM) As SurfaceRPM
, Max(UnderBalanced) As UnderBalanced
, Max(GasFlowRate) As GasFlowRate
, Max(SPP) As SPP
, Max(OrificeSize) As OrificeSize
, Max(Latitude) As Latitude
, Max(Longitude) As Longitude
, Max(LocationCountry) As LocationCountry
, Max(LocationState) As LocationState
, Max(LocationCounty) As LocationCounty
, Max(MotorFailureTFF) As MotorFailureTFF
, Max(MotorFailureCSI) As MotorFailureCSI
, Max(EMFailureTFF) As EMFailureTFF
, Max(EMFailureCSI) As EMFailureCSI
, Max(PPFailureTFF) As PPFailureTFF
, Max(PPFailureCSI) As PPFailureCSI
, Max(MWDFailureTFF) As MWDFailureTFF
, Max(MWDFailureCSI) As MWDFailureCSI
, Max(FaultCodeLevelOne) As FaultCodeLevelOne
, Max(FaultCodeDescLevelOne) As FaultCodeDescLevelOne
, Max(FaultCodeLevelTwo) As FaultCodeLevelTwo
, Max(FaultCodeDescLevelTwo) As FaultCodeDescLevelTwo
, Max(FaultCodeLevelThree) As FaultCodeLevelThree
, Max(FaultCodeDescLevelThree) As FaultCodeDescLevelThree
, Max(ISNULL(SUBSTRING(FieldSummary,0,5000),'')) As FieldSummary
, Max(ISNULL(SUBSTRING(FieldSymptomSummary,0,5000),'')) As FieldSymptomSummary
, Max(HeatWave) As HeatWave
, Max(HEX) As HEX
, Max(PulseCount) As PulseCount
, Max(RSSRevolutions) As RSSRevolutions
, Case When (Select Top 1 1 From JarActivities ja
	Left Join Jobs j On j.JobId = ja.JobId
	Left Join JarActivityServices jas On jas.JarActivityId = ja.JarActivityId
	Where Sensor = 'Casing Link'
	And J.JobNumber = TMP.JobNumber
	And ja.RunNumber = TMP.RunNumber) Is Not Null Then 1 Else 0 End As CasingLink
, Case When (Select Top 1 1 From JarActivities ja
	Left Join Jobs j On j.JobId = ja.JobId
	Left Join JarActivityServices jas On jas.JarActivityId = ja.JarActivityId
	Where Sensor = 'TBS/Motary Steerable'
	And J.JobNumber = TMP.JobNumber
	And ja.RunNumber = TMP.RunNumber) Is Not Null Then 1 Else 0 End As TBSMotorySteerable
, Case When (Select Top 1 1 From JarActivities ja
	Left Join Jobs j On j.JobId = ja.JobId
	Left Join JarActivityServices jas On jas.JarActivityId = ja.JarActivityId
	Where Sensor = 'Geosteering'
	And J.JobNumber = TMP.JobNumber
	And ja.RunNumber = TMP.RunNumber) Is Not Null Then 1 Else 0 End As Geosteering
, GETDATE()
, Criticality
, X
, Y
, MAX(RssMagnus)
, MAX(WptsCparId)
FROM (SELECT * FROM dbo.vwRelBusinessIntelligenceInnerTable (NOLOCK)) As TMP where 1 = 1
--AND EndDate >= Cast(Month(DateAdd(yyyy, -4, GetDate())) as varchar(2)) + '/01/' + Cast(Year(DateAdd(yyyy, -4, GetDate())) as varchar(4))
AND (
RunId in (Select Id From @TableVar Where Name = 'RunId')
OR IncidentId in (Select Id From @TableVar Where Name = 'IncidentId')
)
GROUP BY RunID,Hemisphere,Region,RegionDesc,Country,CountryDesc,BranchPlant,BranchPlantName,CustomerID,CustomerName,JobNumber,
ReportId,Rig,Field,Well,RunNumber,OffShore,InHoleDate,EndDate,OutHoleDate,IncidentID,IncidentNumber,Criticality,X,Y


UPDATE RelBusinessIntelligenceDataSet
SET
  NCI = Case When CSI = 1 Then 0 Else NCI End
, Others = Case When OS = 1 And PR = 1 Then 0 Else Others End
, LWDFailureTFF = Case When LWD = 0 Then 0 Else LWDFailureTFF End
, LWDFailureCSI = Case When LWD = 0 Then 0 Else LWDFailureCSI End
, NonTFFRun = Case When TFF = 0 Then 1 Else 0 End
, NPTRun = Case When NPT > 0 Then 1 Else 0 End
, NonNPTRun = Case When NPT = 0 Then 1 Else 0 End
, NPTRunNoTFF = Case When NPT > 0 And TFF = 0 Then 1 Else 0 End
, CIRunNoNPT = Case When CSI = 1 And NPT = 0 Then 1 Else 0 End
, GoodRun = Case When NPT = 0 And CSI = 0 Then 1 Else 0 End
, MaxTempWindowF = Case When MaxTempF <= 100.0 Then '0-100' 
	When MaxTempF > 100.0 And MaxTempF <= 130.0 Then '101-130' 
	When MaxTempF > 130.0 And MaxTempF <= 160.0 Then '131-160' 
	When MaxTempF > 160.0 And MaxTempF <= 190.0 Then '161-190' 
	When MaxTempF > 190.0 And MaxTempF <= 220.0 Then '191-220'
	When MaxTempF > 220.0 And MaxTempF <= 250.0 Then '221-250'
	When MaxTempF > 250.0 And MaxTempF <= 280.0 Then '251-280'
	When MaxTempF > 280.0 And MaxTempF <= 310.0 Then '281-310'
	When MaxTempF > 310.0 And MaxTempF <= 340.0 Then '311-340'
	When MaxTempF > 340.0 And MaxTempF <= 370.0 Then '341-370'
	When MaxTempF > 370.0 And MaxTempF <= 400.0 Then '371-400'
	Else '+401'	End
, MaxTempWindowC = Case When MaxTempC <= 100.0 Then '0-100' 
	When MaxTempC > 100.0 And MaxTempC <= 130.0 Then '101-130' 
	When MaxTempC > 130.0 And MaxTempC <= 160.0 Then '131-160' 
	When MaxTempC > 160.0 And MaxTempC <= 190.0 Then '161-190' 
	When MaxTempC > 190.0 And MaxTempC <= 220.0 Then '191-220'
	When MaxTempC > 220.0 And MaxTempC <= 250.0 Then '221-250'
	When MaxTempC > 250.0 And MaxTempC <= 280.0 Then '251-280'
	When MaxTempC > 280.0 And MaxTempC <= 310.0 Then '281-310'
	When MaxTempC > 310.0 And MaxTempC <= 340.0 Then '311-340'
	When MaxTempC > 340.0 And MaxTempC <= 370.0 Then '341-370'
	When MaxTempC > 370.0 And MaxTempC <= 400.0 Then '371-400'
	Else '+401'	End
, CircHrsWindow = Case When CircHrs <= 9.0 Then '0-9'
	When CircHrs > 9.0 And CircHrs <= 19.0 Then '10-19'
	When CircHrs > 19.0 And CircHrs <= 29.0 Then '20-29'
	When CircHrs > 29.0 And CircHrs <= 39.0 Then '30-39'
	When CircHrs > 39.0 And CircHrs <= 49.0 Then '40-49'
	When CircHrs > 49.0 And CircHrs <= 59.0 Then '50-59'
	When CircHrs > 59.0 And CircHrs <= 69.0 Then '60-69'
	When CircHrs > 69.0 And CircHrs <= 79.0 Then '70-79'
	When CircHrs > 79.0 And CircHrs <= 89.0 Then '80-89'
	When CircHrs > 89.0 And CircHrs <= 99.0 Then '90-99'
	Else '+100'	End
, Less30CircHrEvents = Case When CircHrs <= 30.0 Then 1 Else 0 End
, Less30CircHr = Case When CircHrs <= 30.0 Then CircHrs Else 0.0 End
, Greater30HrsNPTEvents = Case When NPT >=30 Then 1 Else 0 End
, Greater30HrNPTHrs = Case When NPT >=30 Then NPT Else 0.0 End
, Is3030 = Case When CSI = 1 And (CircHrs <= 30.0 Or NPT >= 30.0) Then 1 Else 0 End
, Non3030 = Case When CSI = 1 And (CircHrs <= 30.0 Or NPT >= 30.0) Then 0 Else 1 End
, MDEndWindow = Case When MDEnd <= 3000.0 Then '0-3000'
	When MDEnd > 3000.0 And MDEnd <= 6000.0 Then '3001-6000'
	When MDEnd > 6000.0 And MDEnd <= 9000.0 Then '6001-9000'
	When MDEnd > 9000.0 And MDEnd <= 12000.0 Then '9001-12000'
	When MDEnd > 12000.0 And MDEnd <= 15000.0 Then '12001-15000'
	When MDEnd > 15000.0 And MDEnd <= 18000.0 Then '15001-18000'
	When MDEnd > 18000.0 And MDEnd <= 21000.0 Then '18001-21000'
	When MDEnd > 21000.0 And MDEnd <= 24000.0 Then '21000-24000'
	Else '+24000' End
, HoleSizeWindow = Case When HoleSize <= 6.75 Then '0-6.75'
	When HoleSize > 6.75 And HoleSize <= 9.0 Then '6.76-9'
	When HoleSize > 9.0 And HoleSize <= 14.00 Then '9.1-14.00'
	When HoleSize > 14.01 And HoleSize <= 26.0 Then '14.01-26.0'
	Else '+26' End
, MaxDoglegRotatingWindow = Case When MaxDoglegRotating <= 2.0 Then '0-2'
	When MaxDoglegRotating > 2.0 And MaxDoglegRotating <= 4.0 Then '2-4'
	When MaxDoglegRotating > 4.0 And MaxDoglegRotating <= 6.0 Then '4-6'
	When MaxDoglegRotating > 6.0 And MaxDoglegRotating <= 8.0 Then '6-8'
	When MaxDoglegRotating > 8.0 And MaxDoglegRotating <= 10.0 Then '8-10'
	Else '+10' End
, MaxDoglegSlidingWindow = Case When MaxDoglegSliding <= 2.0 Then '0-2'
	When MaxDoglegSliding > 2.0 And MaxDoglegSliding <= 4.0 Then '2-4'
	When MaxDoglegSliding > 4.0 And MaxDoglegSliding <= 6.0 Then '4-6'
	When MaxDoglegSliding > 6.0 And MaxDoglegSliding <= 8.0 Then '6-8'
	When MaxDoglegSliding > 8.0 And MaxDoglegSliding <= 10.0 Then '8-10'
	Else '+10' End
, FieldSymptom = Case When TFF = 1 And FieldSymptom = '' Then 'Uncoded' Else FieldSymptom End
, FieldSymptom2 = Case When CSI = 1 And FieldSymptom2 = '' Then 'Uncoded' Else FieldSymptom2 End
, TotalRSSNPTTFF = Case When RSSFailureTFF = 1 Then NPT Else 0.0 End
, RSSOT = Case When RSS = 1 Then OperHrs Else 0.0 End
, RSSNPTnonTFF = Case When RSSFailureCSI = 1 And TFF = 0 Then NPT Else 0.0 End -- Incorrect calculation, please check calculation in below statements
, LWDNPTTFF = Case When LWD = 1 And LWDFailureTFF = 1 Then NPT Else 0.0 End
, LWDNPTnonTFF = Case When LWD = 1 And LWDFailureCSI = 1 And TFF = 0 Then NPT Else 0.0 End  -- Incorrect calculation, please check calculation in below statements
, LWDOT = Case When LWD = 1 Then OperHrs Else 0.0 End
, MotorNPTTFF = Case When MotorWFT = 1 And (MotorFailureTFF = 1 Or MotorFailureCSI = 1) Then NPT Else 0.0 End
, EMNPTTFF = Case When EM = 1 And (EMFailureTFF = 1 Or EMFailureCSI = 1) Then NPT Else 0.0 End
, PPNPTTFF = Case When PP = 1 And (PPFailureTFF = 1 Or PPFailureCSI = 1) Then NPT Else 0.0 End
, MWDNPTTFF = Case When AllMWD = 1 And (MWDFailureTFF = 1 Or MWDFailureCSI = 1) Then NPT Else 0.0 End
, CompFailureCode = Case When CompFailureCode = '' Then 'Uncoded' Else CompFailureCode End
, CompFailureCodeDesc = Case When CompFailureCodeDesc = '' Then 'Uncoded' Else CompFailureCodeDesc End
, OutOfSpecCode = Case When OutOfSpecCode = '' Then '0' Else OutOfSpecCode End
, OutOfSpecCodeDesc = Case When OutOfSpecCodeDesc = '' Then '0' Else OutOfSpecCodeDesc End
, OSNPT = Case When OS = 1 Then NPT Else 0.0 End
, ProceduralCode = Case When ProceduralCode = '' Then '0' Else ProceduralCode End
, ProceduralCodeDesc = Case When ProceduralCodeDesc = '' Then '0' Else ProceduralCodeDesc End
, PRModes = Case When PRModes = '' Then '0' Else PrModes End
, PRNPT = Case When PR = 1 Then NPT Else 0.0 End
, LWDGammaCombine = Case When ([Gamma Ray Insert] = 1 Or [HAGR] = 1 Or [SAGR] = 1) Then 1 Else 0 End
, MFRCombine = Case When ([MFR Collar] = 1 Or [Azimuthal MFR] = 1) Then 1 Else 0 End
, NeutronDensityCombine = Case When ([Neutron Insert] = 1 Or [Density Insert] = 1) Then 1 Else 0 End
, LWDBatteryCombine = Case When ([Battery High Temp] = 1 Or [Battery IBM] = 1 Or [Battery Low Temp] = 1 Or [Battery Medium Temp] = 1) Then 1 Else 0 End
, MWDPulserCombine = Case When ([MWD Pulser (AES)] = 1 Or [MWD Pulser 2"] = 1) Then 1 Else 0 End
, MWDGammaCombine = Case When ([GRG4] = 1 Or [Oriented Gamma Ray] = 1 Or [UGR] = 1) Then 1 Else 0 End
, MWDBatteryCombine = Case When ([MWD Battery High Temp] = 1 Or [MWD Battery Low Temp] = 1) Then 1 Else 0 End
, EMDirGam = Case When [BTR] = 1 And [CDS] = 1 And ([GRG4] = 1 Or [Oriented Gamma Ray] = 1 Or [UGR] = 1) Then 1 Else 0 End
, PPDirOnly = Case When [MWD Pulser (AES)] = 1 And [GRG4] = 0 And [Oriented Gamma Ray] = 0 And [UGR] = 0 Then 1 Else 0 End
, PPDirGam = Case When [MWD Pulser (AES)] = 1 And ([GRG4] = 1 Or [Oriented Gamma Ray] = 1 Or [UGR] = 1) Then 1 Else 0 End
, MWDOT = Case When AllMWD = 1 Then OperHrs Else 0.0 End
, EMOT = Case When EM = 1 Then OperHrs Else 0.0 End
, HPOT = Case When PP = 1 Then OperHrs Else 0.0 End
, MotorOT = Case When MotorWFT = 1 Then OperHrs Else 0.0 End
WHERE (RunId in (Select Id From @TableVar Where Name = 'RunId')
OR IncidentId in (Select Id From @TableVar Where Name = 'IncidentId')
)


UPDATE RelBusinessIntelligenceDataSet
SET RSSNPTnonTFF = Case When RSSNPTnonTFF = LWDNPTnonTFF Then 0 Else RSSNPTnonTFF End
, LWDDirOnly = Case When [IDS] = 1 And LWDGammaCombine = 0 And MFRCombine = 0 And NeutronDensityCombine = 0 And [Collar, SST Sensor] = 0 Then 1 Else 0 End
, LWDDirGam = Case When [IDS] = 1 And LWDGammaCombine = 1 And MFRCombine = 0 And NeutronDensityCombine = 0 And [Collar, SST Sensor] = 0 Then 1 Else 0 End
, LWDDirGamMFRCombo = Case When [IDS] = 1 And LWDGammaCombine = 1 And MFRCombine = 1 And NeutronDensityCombine = 0 And [Collar, SST Sensor] = 0 Then 1 Else 0 End
, LWDTripleCombo = Case When [IDS] = 1 And LWDGammaCombine = 1 And MFRCombine = 1 And NeutronDensityCombine = 1 And [Collar, SST Sensor] = 0 Then 1 Else 0 End
, LWDQuadCombo = Case When LWDGammaCombine = 1 And MFRCombine = 1 And NeutronDensityCombine = 1 And [Collar, SST Sensor] = 1 Then 1 Else 0 End
, EMDirOnly = Case When MWDGammaCombine = 0 And [BTR] = 1 And [CDS] = 1 Then 1 Else 0 End
, MotorNPTTFF = Case When MotorNPTTFF > 0 And (EMNPTTFF > 0 or PPNPTTFF > 0) Then 0 Else MotorNPTTFF End
WHERE (RunId in (Select Id From @TableVar Where Name = 'RunId')
OR IncidentId in (Select Id From @TableVar Where Name = 'IncidentId')
)


-- Changes made by Yogesh
-- change started of TFS# 40953
UPDATE RelBusinessIntelligenceDataSet 
SET LWDNPTnonTFF = (CASE WHEN r.tff = 1 THEN 0 ELSE a.LWD END), 
RSSNPTnonTFF = (CASE WHEN r.tff = 1 THEN 0 ELSE a.RSS END)
FROM RelBusinessIntelligenceDataSet r
INNER JOIN (
	SELECT t.RunID,
		SUM(CONVERT(DECIMAL(18,2), ISNULL(CASE WHEN (ts.type = 'HEL/LWD'or ts.type = 'HEL/EM'or ts.type = 'GWD') and tff = '0' and csi = '1' and ru.isdeleted = '0'THEN CONVERT(DECIMAL(18,2), t.LostTime) ELSE 0 end,0), 0)) [LWD],
		SUM(CONVERT(DECIMAL(18,2), ISNULL(CASE WHEN ts.Type = 'RSS' and tff = '0' and csi = '1'and ru.isdeleted = '0'THEN CONVERT(DECIMAL(18,2), t.LostTime) ELSE 0 end,0),0)) [RSS]
	FROM ToolStringComponentInfo t
	INNER JOIN ToolStringS ts on t.ToolStringID = ts.ToolStringId
	INNER JOIN Runs ru on ru.RunID = t.RunID
	WHERE ru.RunID in (Select Id From @TableVar Where Name = 'RunId') and ISNUMERIC(t.LostTime) = 1
	GROUP BY t.RunID) A ON a.RunID = r.RunId
-- Change completed of TFS# 40953

--changes made by Suyeb M for the TFS #51250 
UPDATE rd
SET rd.Longitude = j.longitude,
	rd.Latitude = j.Latitude,
	rd.X = j.x,
	rd.Y = j.y,
	rd.LocationCounty = j.LocationCounty
FROM RelBusinessIntelligenceDataSet rd
	inner join runs r on rd.runid=r.runid
	inner join wells w on w.wellid=r.wellid 
	inner join jobs j on j.jobid=w.jobid
where r.runid = rd.runid
--changes complted for TFS #51250

UPDATE RelBusinessIntelligenceDataset
SET TotalLWDNPT = Case When LWD = 1 Then  LWDNPTTFF + LWDNPTnonTFF Else 0 End,
  TOTALRSSNPT = TotalRSSNPTTFF + RSSNPTnonTFF
WHERE (RunId in (Select Id From @TableVar Where Name = 'RunId')
OR IncidentId in (Select Id From @TableVar Where Name = 'IncidentId')
)


UPDATE a
SET a.B2B = 1
FROM RelBusinessIntelligenceDataSet a
JOIN RelBusinessIntelligenceDataSet b ON a.JobNumber = b.JobNumber AND a.Well = b.Well AND a.RunNumberCnt = b.RunNumberCnt + 1 AND b.TFF = 1
WHERE a.TFF = 1
AND (a.RunId in (Select Id From @TableVar Where Name = 'RunId')
OR a.IncidentId in (Select Id From @TableVar Where Name = 'IncidentId')
)

DELETE FROM RelBusinessIntelligenceDataSet
WHERE RunId IN (
SELECT r.RunID 
	FROM RelBusinessIntelligenceDataSet ri WITH (NOLOCK)
	INNER JOIN Runs r WITH (NOLOCK) on r.runid = ri.RunId
WHERE r.IsDeleted = 1
)

DECLARE @Date datetime
SET @Date = GETDATE()
--insert jobnumber in jobqueue
INSERT	INTO JobQueue(JobId, CreateDate, RequestXml, JobQueueStatusId)
SELECT	DISTINCT 29, @Date,'<ReliabilityWPTSJob><jobNumber>'+ [RB].[JobNumber] +'</jobNumber></ReliabilityWPTSJob>',1 
FROM	[Runs](NOLOCK) R 
		INNER JOIN [RelBusinessIntelligenceDataSet](NOLOCK) [RB]  ON [RB].[RunId] = [R].[RunID] 
WHERE	CAST([R].[ImportDate] AS DATE) = CAST(GETDATE() AS DATE) 

EXEC	[dbo].[usp_AssetLifeCycleReportDatasetUpdate]
END
GO
/****** Object:  StoredProcedure [dbo].[usp_RemoveChildAsset]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--=================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 4th Feb 2016
--DESCRIPTION: To remove parent child relation
--==================================================
CREATE PROC [dbo].[usp_RemoveChildAsset]
	@FixedAssetId UNIQUEIDENTIFIER,
	@UserId VARCHAR(10)
AS
BEGIN
	BEGIN TRY
		BEGIN TRAN
			DECLARE	@ParentFixedAssetId UNIQUEIDENTIFIER;
			DECLARE @AuditActionId INT;
			DECLARE @ParentAssetNum VARCHAR(50);
			DECLARE @ParentSerialNum VARCHAR(50);
			DECLARE @ParentItemNum VARCHAR(50);

			SELECT	@ParentFixedAssetId = [ParentFixedAssetId] FROM [FixedAssets](NOLOCK) WHERE [FixedAssetId] = @FixedAssetId

			IF(@ParentFixedAssetId IS NOT NULL)
			BEGIN

				--Create Part Transfer Record
				INSERT INTO PartTransferDtl (
						PartTransferDtlId,
						JDETransactionId,
						FixedAssetId,
						AssetNumber,
						DocumentType,
						DocumentNumber,
						AddressNumber,
						InventoryItemNum,
						RNItemNum,
						SerialNum,
						Quantity,
						AssetStatus,
						DateShipConfirmed,
						UserCreatedDocument,
						UserApprovedonRecvSide,
						DateApproved,
						SendingLocation,
						ReceivingLocation,
						AssetTransferReqNo,
						DateofTransaction,
						OwnershipCode,
						Source,
						Dest,
						DateAdded,
						ParentNumber)
					SELECT 
						NEWID(),
						NULL,
						@fixedAssetId,
						AssetNumber,
						'MAPC',
						NULL,
						NULL,
						InventoryItemNum,
						RNItemNum,
						SerialNum,
						0,
						EquipmentStatus,
						NULL,
						@UserId,
						NULL,
						NULL,
						BranchPlant,
						0,
						NULL,
						GETDATE(),
						NULL,
						EquipmentStatus,
						'AV',
						GETDATE(),
						ParentNumber
					FROM FixedAssets
					WHERE FixedAssetId = @FixedAssetId

				UPDATE  [dbo].[FixedAssets]
				SET		[ParentNumber] = AssetNumber,
						[ParentFixedAssetId] = NULL,
						[EquipmentStatus] = 'AV'
				WHERE	[FixedAssetId] = @FixedAssetId


				-- Reset Top Level FixedAssetId 
				exec usp_UpdateTopLevelFixedAssetId @FixedAssetId

			END
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		DECLARE @ErrorMessage VARCHAR(4000) = ERROR_MESSAGE();
		DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
		DECLARE @ErrorState INT = ERROR_STATE();
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[usp_RequestFormDetailCountReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_RequestFormDetailCountReport]
	@xmlData XML
AS

DECLARE @sql VARCHAR(max)
DECLARE @sortField VARCHAR(64)
DECLARE @sortDir VARCHAR(64)
DECLARE @whereClause VARCHAR(max)
DECLARE @dynamicGroupByColumns VARCHAR(max)

SELECT @sortField = T.c.value('.', 'VARCHAR(64)')
FROM @xmlData.nodes('/Filters/SortField')T(c);

SELECT @sortDir = T.c.value('.', 'VARCHAR(64)')
FROM @xmlData.nodes('/Filters/SortDir')T(c);

SELECT @whereClause = T.c.value('.', 'VARCHAR(max)')
FROM @xmlData.nodes('/Filters/WhereClause')T(c);

SELECT @dynamicGroupByColumns = T.c.value('.', 'VARCHAR(max)')
FROM @xmlData.nodes('/Filters/DynamicGroupByColumns')T(c);

SET @sql = 'SELECT ' + @dynamicGroupByColumns + ', RequestNumber, CreateDate, RequiredDate, IsArchived 
				, SUM(ISNULL(QtyOrdered, 0)) as QtyOrdered 
				, SUM(QtyInProcess) as QtyInProcess
				, (SUM(ISNULL(QtyOrdered,0)) - SUM(ISNULL(QtyInProcess,0))) AS QtyOutstanding 
				, sum(StandardCost) as StandardCost 
				, CurrShortName
				FROM vwRequestFormDetailCountReport (NOLOCK) '
                + @whereClause + 
                ' GROUP BY ' + @dynamicGroupByColumns + ', RequestNumber, CreateDate, RequiredDate, IsArchived, CurrShortName '

EXECUTE (@sql)


SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[usp_RequestItemDetailReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[usp_RequestItemDetailReport]
	@xmlData XML
AS

DECLARE @sql VARCHAR(max)
DECLARE @startIndex VARCHAR(10)
DECLARE @pageSize VARCHAR(10)
DECLARE @sortField VARCHAR(64)
DECLARE @sortDir VARCHAR(64)
DECLARE @whereClause VARCHAR(max)
DECLARE @includeDetail VARCHAR(64)

SELECT @startIndex = T.c.value('.', 'VARCHAR(10)')
FROM @xmlData.nodes('/Filters/StartIndex')T(c);

SELECT @pageSize = T.c.value('.', 'VARCHAR(10)')
FROM @xmlData.nodes('/Filters/PageSize')T(c);

SELECT @sortField = T.c.value('.', 'VARCHAR(64)')
FROM @xmlData.nodes('/Filters/SortField')T(c);

SELECT @sortDir = T.c.value('.', 'VARCHAR(64)')
FROM @xmlData.nodes('/Filters/SortDir')T(c);

SELECT @whereClause = T.c.value('.', 'VARCHAR(max)')
FROM @xmlData.nodes('/Filters/WhereClause')T(c);

SELECT @includeDetail = T.c.value('.', 'VARCHAR(max)')
FROM @xmlData.nodes('/Filters/IncludeDetail')T(c);

SET @sql = 'SELECT a.RequestFormId as a_RequestFormId, ''AR-'' + a.ToBranchPlant + ''-'' + CAST(a.RequestFormId AS varchar) AS a_RequestNumber
                ,rf.RegionDesc as a_FromRegion
                ,cf.CountryDesc as a_FromCountry
                ,bpf.BranchPlant as a_FromBranchPlant
                ,bpf.CompanyName as a_FromBranchPlantName
                ,rt.RegionDesc as a_ToRegion
                ,ct.CountryDesc as a_ToCountry
                ,bpt.BranchPlant as a_ToBranchPlant
                ,bpt.CompanyName as a_ToBranchPlantName
                ,a.CreateDate as a_CreateDate
                ,a.RequiredDate as a_RequiredDate
                ,a.ToolPanel as a_ToolPanel
                ,a.CreatedUserName as a_CreatedUserName
                ,so.OptionValue AS a_StatusDesc
                ,''SR-'' + s.ToBranchPlant + ''-'' + CAST(s.ShipmentRequestformId AS varchar) AS s_RequestNumber
                ,s.ToBranchPlant as s_ToBranchPlant
                ,s.FromBranchPlant as s_FromBranchPlant
                ,s.Customer as s_Customer
                ,s.ShipmentRequestformId as s_ShipmentRequestFormId
                ,s.ShipmentMethod as s_ShipmentMethod
                ,s.CreateDate as s_CreateDate
                ,s.CreatedUserName as s_CreatedUserName'
				IF @includeDetail = 1
				BEGIN
					SET @sql = @sql + ',i.ToolPanel as i_ToolPanel, i.ToolCode as i_ToolCode, i.ItemNum as i_ItemNum, i.ItemNum3 as i_ItemNum3'
				END
				SET @sql = @sql + ' FROM RequestForms (NOLOCK) a
                JOIN RequestFormDetails (NOLOCK) rfd on rfd.RequestFormId = a.RequestFormId
                LEFT JOIN SelectOptions (NOLOCK) so ON so.SelectName=''RequestFormStatus'' AND so.SortOrder = a.Status
                LEFT JOIN ItemNums (NOLOCK) i on i.ItemNum = rfd.ItemNum
                
                LEFT JOIN BranchPlants (NOLOCK) bpf on bpf.BranchPlant = a.FromBranchPlant
                LEFT JOIN Regions (NOLOCK) rf on rf.Region = bpf.Region
                LEFT JOIN Countries (NOLOCK) cf on cf.Country = bpf.Country
                
                LEFT JOIN BranchPlants (NOLOCK) bpt on bpt.BranchPlant = a.ToBranchPlant
                LEFT JOIN Regions (NOLOCK) rt on rt.Region = bpt.Region
                LEFT JOIN Countries (NOLOCK) ct on ct.Country = bpt.Country
                
                LEFT JOIN ShipmentRequestFormDetails (NOLOCK) sd on sd.RequestFormDetailId = rfd.RequestFormDetailId
                LEFT JOIN ShipmentRequestForms (NOLOCK) s on s.ShipmentRequestFormId = sd.ShipmentRequestFormId'
                + @whereClause + 'group by 
                a.RequestFormId
                ,rt.RegionDesc,ct.CountryDesc,a.ToBranchPlant,bpt.BranchPlant,bpt.CompanyName
                ,rf.RegionDesc,cf.CountryDesc,a.FromBranchPlant,bpf.BranchPlant,bpf.CompanyName,a.CreateDate, a.RequiredDate,a.ToolPanel,a.CreatedUserName, s.ToBranchPlant
                ,s.FromBranchPlant,s.Customer ,s.ShipmentRequestformId,s.ShipmentMethod,s.CreateDate,s.CreatedUserName,so.OptionValue'
				IF @includeDetail = 1
				BEGIN                
				SET @sql = @sql + ',i.ToolPanel, i.ToolCode, i.ItemNum, i.ItemNum3'
				END

DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') a'
EXECUTE (@sqlString)

DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, * From ( ' + 
		@sql + ') query ) page 
		where page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir

EXECUTE(@pagingSql)


SET NOCOUNT OFF





GO
/****** Object:  StoredProcedure [dbo].[usp_RigView_CreateOrUpdateGFAComponent]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_RigView_CreateOrUpdateGFAComponent]
	@GFAId	uniqueidentifier,
	@IncidentId	uniqueidentifier,
	@ToolStringId	uniqueidentifier,
	@FixedAssetId	uniqueidentifier,
	@PartTypeId	int,
	@NPT	float,
	@TFF	bit,
	@CI	bit,
	@FieldSymptom	varchar(200),
	@FailureDesc	text,
	@CorrectiveAction	varchar(3100),
	@Temp	float,
	@TempUOM	varchar(10)
AS
BEGIN
	declare @GFAComponentId uniqueidentifier
	
	set @GFAComponentId = null
	SELECT @GFAComponentId = GFAComponentId FROM GFAComponents (NOLOCK) 
		where IncidentId = @IncidentId And ToolStringId = @ToolStringId
		And FixedAssetId = @FixedAssetId And PartTypeId = @PartTypeId
	
	if @GFAComponentId is not null
	BEGIN
		UPDATE GFAComponents 
		SET GFAID = @GFAId 
		, NPT = @NPT
		, TFF = @TFF
		, CI = @CI
		, [FieldSymptom] = @FieldSymptom
		, FailureDesc = @FailureDesc
		, CorrectiveAction = @CorrectiveAction
		, Temp = @Temp
		, TempUOM = @TempUOM
		where IncidentId = @IncidentId And ToolStringId = @ToolStringId
		And FixedAssetId = @FixedAssetId And PartTypeId = @PartTypeId
	END
	ELSE
	BEGIN
		set @GFAComponentId = newid();
		INSERT INTO GFAComponents (GFAComponentId, GFAId, IncidentId, ToolStringId, FixedAssetId, PartTypeId, NPT, TFF, CI, [FieldSymptom], FailureDesc, CorrectiveAction, Temp, TempUOM)
		VALUES (@GFAComponentId, @GFAId, @IncidentId, @ToolStringId, @FixedAssetId, @PartTypeId, @NPT, @TFF, @CI, @FieldSymptom, @FailureDesc, @CorrectiveAction, @Temp, @TempUOM)
	END
	
	SELECT @GFAComponentId
	SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_RigView_CreateOrUpdateIncident]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_RigView_CreateOrUpdateIncident]
	@RunID uniqueidentifier,
	@IncidentNumber	varchar(50),
	@FailureDate datetime,
	@CreateDate datetime,
	@IsDownHole bit,
	@IsGFA bit
AS
BEGIN
	
	declare @IncidentId uniqueidentifier
	
	set @IncidentId = null
	SELECT @IncidentId = IncidentId FROM Incidents (NOLOCK) where RunID = @RunID And IncidentNumber = @IncidentNumber
	
	if @IncidentId is not null
	BEGIN
		UPDATE Incidents 
		SET FailureDate = @FailureDate
		, CreateDate = @CreateDate
		, IsDownHole = @IsDownHole
		, IsGFA = @IsGFA
		where RunID = @RunID And IncidentNumber = @IncidentNumber
	END
	ELSE
	BEGIN
		set @IncidentId = newid();
		INSERT INTO Incidents (IncidentID, RunID, IncidentNumber, FailureDate, CreateDate, IsDownHole, IsGFA)
		VALUES (@IncidentId, @RunID, @IncidentNumber, @FailureDate, @CreateDate, @IsDownHole, @IsGFA)
	END
	
	SELECT @IncidentId
	SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_RigView_DoesIncidentExist]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_RigView_DoesIncidentExist]
	@RunID uniqueidentifier,
	@IncidentNumber	varchar(50)
AS
BEGIN

	declare @IncidentID uniqueidentifier
	
	set @IncidentID = null
	
	Select @IncidentID = IncidentID From AesOps.dbo.Incidents Where RunID = @RunID And IncidentNumber = @IncidentNumber
	
	SELECT @IncidentID
	SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_RigView_GetOrCreateRun]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_RigView_GetOrCreateRun]
	@WellID uniqueidentifier,
	@RunNumber	varchar(50),
	@ReportNumber	varchar(50),
	@StartDate	datetime,
	@EndDate	datetime,
	@OperHrs	float,
	@CircHrs	float,
	@MDStart	float,
	@MDStartUOM	varchar(10),
	@MDEnd	float,
	@MDEndUOM	varchar(10),
	@TVDStart	float,
	@TVDStartUOM	varchar(10),
	@TVDEnd	float,
	@TVDEndUOM	varchar(10)
AS
BEGIN
	declare @RunID uniqueidentifier
	
	Select @RunID = RunId From AesOps.dbo.Runs Where WellID = @WellID And RunNumber = @RunNumber

	if @RunID is null
	BEGIN
		INSERT INTO Runs (WellID, RunNumber, ReportNumber, StartDate, EndDate, OperHrs, CircHrs, MDStart, MDStartUOM, MDEnd, MDEndUOM, TVDStart, TVDStartUOM, TVDEnd, TVDEndUOM)
		VALUES (@WellID, @RunNumber, @ReportNumber, @StartDate, @EndDate, @OperHrs, @CircHrs, @MDStart, @MDStartUOM, @MDEnd, @MDEndUOM, @TVDStart, @TVDStartUOM, @TVDEnd, @TVDEndUOM)
		
		Select @RunID = RunId From AesOps.dbo.Runs Where WellID = @WellID And RunNumber = @RunNumber	
	END
	
	SELECT @RunID
	SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_RigView_GetOrCreateWell]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_RigView_GetOrCreateWell] 
	@JobNumber varchar(50), 
	@WellName varchar(50)
AS
BEGIN

	declare @JobId uniqueidentifier
	declare @WellID uniqueidentifier
	
	set @JobId = null
	SELECT @JobId = JobId FROM AesOps.dbo.Jobs (NOLOCK) where JobNumber = @JobNumber
	
	Select @WellID = WellID From AesOps.dbo.Wells Where JobId = @JobId And Well = @WellName

	if @WellID is null
	BEGIN
		INSERT INTO Wells (JobId, Well, IsDeleted)
		VALUES (@JobId, @WellName, 0)
		
		Select @WellID = WellID From AesOps.dbo.Wells Where JobId = @JobId And Well = @WellName	
	END
	
	SELECT @WellID
	SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_RigViewJobs]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_RigViewJobs]
(
	@xmlData xml
)
AS

SELECT --top 25 
  rvj.JobNumber, j.Region, j.Country, j.BranchPlant, j.StartDate, j.EndDate, rvj.Latitude, rvj.Longitude, rvj.LastUpdate
  , rvj.RunNumber, rvj.MD, rvj.MDUOM, rvj.TVD, rvj.TVDUOM, rvj.MaxTemperature, rvj.MaxTempUOM, rvj.CurrentWellName
  , cu.CustomerName, j.JobId, rvj.CoreXmlPath, rvj.IncidentCount, rvj.LastIncidentDate, dia.DocItemId
FROM RigViewJobs (NOLOCK) rvj
JOIN Jobs (NOLOCK) j on rvj.JobNumber = j.JobNumber	
LEFT JOIN Regions (NOLOCK) reg ON reg.Region = j.Region
LEFT JOIN Countries (NOLOCK) c ON c.Country = j.Country
LEFT JOIN BranchPlants (NOLOCK) d ON d.BranchPlant = j.BranchPlant
LEFT JOIN Customers (NOLOCK) cu ON cu.CustomerId = j.CustomerId
LEFT JOIN DocItemAttach dia on dia.GuidKeyId = j.JobId and dia.SubKeyId = rvj.RigViewJobId and dia.SubKeyName = 'RIGVIEW'
WHERE 
  j.IsDeleted = 0 
  and j.IsJAROnly = 0
--  and (j.EndDate is NULL or j.EndDate > getdate())
  and (j.StartDate is not NULL and j.StartDate < GETDATE())
  and j.JobNumber is not null
  and j.JobNumber <> ''
  and rvj.Latitude is not null
  and rvj.Longitude is not null
  and (j.EndDate is null or j.EndDate >= DATEADD(d, -7, GETDATE()))
  and rvj.LastUpdate >= DATEADD(d, -7, GETDATE())

GO
/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisCompGlobalStatusUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_RMAnalysisCompGlobalStatusUpdate] (
	@sToolStringInfoID as uniqueidentifier,
	@iGlobalStatusCodeID as tinyint,
	@iUserID as int) 

AS
SET NOCOUNT ON

DECLARE @sIncidentID As uniqueidentifier
DECLARE @sToolStringID As uniqueidentifier
DECLARE @sFixedAssetID As uniqueidentifier
DECLARE @iPartTypeId int
DECLARE @sSerialNum varchar(30)

SELECT 
	@sIncidentID = IncidentID
	, @sToolStringID = ToolStringID
	, @sFixedAssetID = FixedAssetID
	, @iPartTypeId = PartTypeID
	, @sSerialNum = SerialNum
FROM ToolstringComponentInfo 
Where ToolStringInfoID = @sToolStringInfoID

UPDATE ToolStringComponentInfo
SET GlobalStatusCodeID = @iGlobalStatusCodeID
WHERE ToolStringInfoID = @sToolStringInfoID

IF (@iGlobalStatusCodeID = 1 or @iGlobalStatusCodeID is null)
BEGIN
	UPDATE Incidents
	SET Global_LWD = 0,
		Global_DD = 0,
		Global_MWD = 0,
		Global_RSS = 0,
		Global_SURVEY = 0,
		Global_SURFACE = 0
	WHERE IncidentID = @sIncidentID
END

Exec usp_CreateAuditRMAnalysis @sIncidentID , @sToolStringID, @sFixedAssetID, 10, @iGlobalStatusCodeID, @iUserID, 1, @iPartTypeId, @sSerialNum

SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisCompImpact]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_RMAnalysisCompImpact] (
	@sIncidentID as uniqueidentifier,
	@sToolStringInfoID as uniqueidentifier,
	@sImpactType as varchar(5),
	@iValue as tinyint,
	@iAuditFieldID as int,
	@iUserID as int) 

AS
SET NOCOUNT ON

Declare @sToolStringID uniqueidentifier
Declare @sFixedAssetID uniqueidentifier
Declare @iPartTypeId int
Declare @sSerialNum varchar(30)
--Set @sToolStringID = (Select ToolStringID From ToolStringComponentInfo Where ToolStringInfoID = @sToolStringInfoID)
--Set @sFixedAssetID = (Select FixedAssetID From ToolStringComponentInfo Where ToolStringInfoID = @sToolStringInfoID)

SELECT
	@sToolStringID = ToolStringID
	, @sFixedAssetID = FixedAssetID
	, @iPartTypeId = PartTypeID
	, @sSerialNum = SerialNum
FROM ToolStringComponentInfo
WHERE ToolStringInfoID = @sToolStringInfoID

IF (@sImpactType = 'TFF')
BEGIN
	UPDATE ToolStringComponentInfo SET TFF = 0 WHERE IncidentID = @sIncidentID
END

Exec('UPDATE ToolStringComponentInfo SET ' + @sImpactType + ' = ' + @iValue + ' WHERE ToolStringInfoID = ''' + @sToolStringInfoID + '''')

Exec usp_CreateAuditRMAnalysis @sIncidentID,@sToolStringID,@sFixedAssetID,@iAuditFieldID,@iValue,@iUserID,1, @iPartTypeId, @sSerialNum

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisCompStatusUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_RMAnalysisCompStatusUpdate] (
	@sToolStringInfoID as uniqueidentifier,
	@sIncidentID as uniqueidentifier,
	@sFixedAssetID as uniqueidentifier,
	@iStatusCodeID as tinyint,
	@iGlobalStatusCodeID as tinyint,
	@iUserID as int) 

AS
SET NOCOUNT ON

DECLARE @sToolStringID As uniqueidentifier
DECLARE @iPartTypeId int
DECLARE @sSerialNum varchar(30)

SELECT 
	@sToolStringID = ToolStringID
	, @iPartTypeId = PartTypeID
	, @sSerialNum = SerialNum
FROM ToolstringComponentInfo 
Where ToolStringInfoID = @sToolStringInfoID

UPDATE ToolStringComponentInfo
SET StatusCodeID = @iStatusCodeID,
GlobalStatusCodeID = @iGlobalStatusCodeID
WHERE ToolStringInfoID = @sToolStringInfoID

IF (@iStatusCodeID = 1)
BEGIN
	UPDATE Incidents
	SET Dist_LWD = 0,
		Dist_DD = 0,
		Dist_MWD = 0,
		Dist_RSS = 0,
		Dist_SURVEY = 0,
		Dist_SURFACE = 0
	WHERE IncidentID = @sIncidentID
END

IF (@iGlobalStatusCodeID = 1 or @iGlobalStatusCodeID is null)
BEGIN
	UPDATE Incidents
	SET Global_LWD = 0,
		Global_DD = 0,
		Global_MWD = 0,
		Global_RSS = 0,
		Global_SURVEY = 0,
		Global_SURFACE = 0
	WHERE IncidentID = @sIncidentID
END

Exec usp_CreateAuditRMAnalysis @sIncidentID , @sToolStringID, @sFixedAssetID, 1, @iStatusCodeID, @iUserID, 1, @iPartTypeId, @sSerialNum
Exec usp_CreateAuditRMAnalysis @sIncidentID , @sToolStringID, @sFixedAssetID, 10, @iGlobalStatusCodeID, @iUserID, 1, @iPartTypeId, @sSerialNum

SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisEnableGlobalTechBoxes]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_RMAnalysisEnableGlobalTechBoxes] (
	@sToolStringInfoID as uniqueidentifier) 

AS
SET NOCOUNT ON

DECLARE @sIncidentID as uniqueidentifier
DECLARE @sGlobalTechBoxes as varchar(100)

SET @sIncidentID = (Select IncidentID From ToolStringComponentInfo (NOLOCK) Where ToolStringInfoID = @sToolStringInfoID)
SET @sGlobalTechBoxes = ''

SELECT @sGlobalTechBoxes = @sGlobalTechBoxes + t.[Type] + ','
FROM ToolStringComponentInfo (NOLOCK) tsci
LEFT JOIN ToolStrings (NOLOCK) t ON t.ToolStringID = tsci.ToolStringID
WHERE tsci.GlobalStatusCodeID Is Not Null
AND tsci.IncidentID = @sIncidentID
GROUP BY t.[Type]
HAVING Sum(dbo.NumCheck(tsci.GlobalStatusCodeID)) = 0

IF (@sGlobalTechBoxes <> '')
BEGIN
	   SET @sGlobalTechBoxes = LEFT(@sGlobalTechBoxes, LEN(@sGlobalTechBoxes) - 1)
END

SELECT @sGlobalTechBoxes

SET NOCOUNT OFF




/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisFieldSymptomUpdate]    Script Date: 08/06/2014 13:54:57 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisFailureCodeSave]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_RMAnalysisFailureCodeSave] (
	@sToolStringInfoID as uniqueidentifier,
	@sIncidentID as uniqueidentifier,
	@sToolStringID as uniqueidentifier,
	@sFixedAssetID as uniqueidentifier,
	@sFailureCodeID as uniqueidentifier,
	@iUserID as int) 

AS
SET NOCOUNT ON

Declare @iPartTypeId int
Declare @sSerialNum varchar(30)

SELECT
	@iPartTypeId = PartTypeID
	, @sSerialNum = SerialNum
FROM ToolStringComponentInfo
WHERE ToolStringInfoID = @sToolStringInfoID

IF (@sFailureCodeID Is Not Null)
BEGIN
	UPDATE toolstringcomponentinfo
	SET CompFailureCodeID = @sFailureCodeID
	WHERE ToolStringInfoID = @sToolStringInfoID
END
ELSE
BEGIN
	UPDATE toolstringcomponentinfo
	SET CompFailureCodeID = NULL
	WHERE ToolStringInfoID = @sToolStringInfoID
END

EXEC usp_CreateAuditRMAnalysis @sIncidentID, @sToolStringID, @sFixedAssetID, 6, @sFailureCodeID, @iUserID, 1, @iPartTypeId, @sSerialNum

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisFieldSymptomUpdate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_RMAnalysisFieldSymptomUpdate] (
	@sToolStringInfoID as uniqueidentifier,
	@sFieldSymptom as varchar(200),
	@iUserID as int) 

AS
SET NOCOUNT ON

Declare @sIncidentID uniqueidentifier
Declare @sToolStringID uniqueidentifier
Declare @sFixedAssetID uniqueidentifier
Declare @iPartTypeId int
Declare @sSerialNum varchar(30)
--Set @sIncidentID = (Select IncidentID From ToolStringComponentInfo Where ToolStringInfoID = @sToolStringInfoID)
--Set @sToolStringID = (Select ToolStringID From ToolStringComponentInfo Where ToolStringInfoID = @sToolStringInfoID)
--Set @sFixedAssetID = (Select FixedAssetID From ToolStringComponentInfo Where ToolStringInfoID = @sToolStringInfoID)

SELECT
	@sIncidentID = IncidentID
	, @sToolStringID = ToolStringID
	, @sFixedAssetID = FixedAssetID
	, @iPartTypeId = PartTypeID
	, @sSerialNum = SerialNum
FROM ToolStringComponentInfo
WHERE ToolStringInfoID = @sToolStringInfoID

UPDATE ToolstringComponentInfo
SET FieldSymptom = @sFieldSymptom
WHERE ToolStringInfoID = @sToolStringInfoID

IF (@sFieldSymptom = 'Lost In Hole')
BEGIN
	UPDATE ToolstringComponentInfo
	SET ArtNumber = 'N/A' 
	WHERE ToolStringInfoID = @sToolStringInfoID
	AND ArtNumber IS NULL

	UPDATE ToolstringComponentInfo
	SET TIPFT = 'N/A' 
	WHERE ToolStringInfoID = @sToolStringInfoID
	AND TIPFT IS NULL
END

SET @sFieldSymptom = Case When LEN(@sFieldSymptom) > 46 Then Left(@sFieldSymptom,46) + '...' Else @sFieldSymptom End

EXEC usp_CreateAuditRMAnalysis @sIncidentID,@sToolStringID,@sFixedAssetID,'16',@sFieldSymptom,@iUserID,1,@iPartTypeId,@sSerialNum

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisIncidentImpact]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_RMAnalysisIncidentImpact] (
	@sToolStringInfoID as uniqueidentifier,
	@iTFF as tinyint,
	@iCI as tinyint,
	@iNCI as tinyint,
	@iUserID as int) 

AS
SET NOCOUNT ON

DECLARE @sIncidentID as uniqueidentifier
DECLARE @sToolStringID as uniqueidentifier
DECLARE @sFixedAssetID as uniqueidentifier

SELECT 
	@sIncidentID = IncidentID,
	@sToolStringID = ToolStringID,
	@sFixedAssetID = FixedAssetID
FROM ToolStringComponentInfo (NOLOCK) 
WHERE ToolStringInfoID = @sToolStringInfoID


UPDATE ToolStringComponentInfo
SET TFF = @iTFF,
CSI = @iCI,
NCI = @iNCI
WHERE ToolStringInfoID = @sToolStringInfoID


Exec usp_CreateAuditRMAnalysis @sIncidentID,@sToolStringID,@sFixedAssetID,8,@iTFF,@iUserID,1
Exec usp_CreateAuditRMAnalysis @sIncidentID,@sToolStringID,@sFixedAssetID,9,@iCI,@iUserID,1
Exec usp_CreateAuditRMAnalysis @sIncidentID,@sToolStringID,@sFixedAssetID,13,@iNCI,@iUserID,1

SET NOCOUNT OFF




/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisSetCompDistrictStatus]    Script Date: 08/06/2014 13:56:08 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisLostTime]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--================================================================
--CREATED BY :SUYEB MOHAMMAD
--CREATED ON :14 Jan 2016
--DESCRIPTION:To update Lost time for tool strings
--================================================================
CREATE PROCEDURE [dbo].[usp_RMAnalysisLostTime] (@sToolStringInfoID AS uniqueidentifier,
@sLT AS varchar(30),
@iUserID AS int)
AS
  SET NOCOUNT ON

  DECLARE @sIncidentID uniqueidentifier
  DECLARE @sToolStringID uniqueidentifier
  DECLARE @sFixedAssetID uniqueidentifier
  DECLARE @iPartTypeId int
  DECLARE @sSerialNum varchar(30)

  SELECT
    @sIncidentID = IncidentID,
    @sToolStringID = ToolStringID,
    @sFixedAssetID = FixedAssetID,
    @iPartTypeId = PartTypeID,
    @sSerialNum = SerialNum
  FROM ToolstringComponentInfo
  WHERE ToolStringInfoID = @sToolStringInfoID

  UPDATE ToolstringComponentInfo
  SET LostTime = @sLT
  WHERE ToolStringInfoID = @sToolStringInfoID

  EXEC usp_CreateAuditRMAnalysis @sIncidentID,
                                 @sToolStringID,
                                 @sFixedAssetID,
                                 17,
                                 @sLT,
                                 @iUserID,
                                 1,
                                 @iPartTypeId,
                                 @sSerialNum

  SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisLT]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--================================================================
--CREATED BY :SUYEB MOHAMMAD
--CREATED ON :14 Jan 2016
--DESCRIPTION:To add jobs in jobqueue once losttime is updated
--================================================================
CREATE PROCEDURE [dbo].[usp_RMAnalysisLT] (@sToolStringInfoID AS uniqueidentifier,
@sLT AS varchar(30),
@iUserID AS int)
AS
  SET NOCOUNT ON

  DECLARE @sIncidentID uniqueidentifier
  DECLARE @sToolStringID uniqueidentifier
  DECLARE @sFixedAssetID uniqueidentifier
  DECLARE @iPartTypeId int
  DECLARE @sSerialNum varchar(30)
  DECLARE @FieldId int
  DECLARE @RunId uniqueidentifier
  DECLARE @LostTime VARCHAR(30)
  DECLARE @JobNumber VARCHAR(50)

  SELECT
		@sIncidentID = IncidentID,
		@sToolStringID = ToolStringID,
		@sFixedAssetID = FixedAssetID,
		@iPartTypeId = PartTypeID,
		@sSerialNum = SerialNum,
		@RunId = RunId,
		@FieldId = dbo.udf_GetAuditFieldId('MODIFY_NPT_ON_FI'),
		@LostTime = ISNULL(LostTime, 0)
  FROM	ToolstringComponentInfo
  WHERE ToolStringInfoID = @sToolStringInfoID

  UPDATE ToolstringComponentInfo
  SET	LostTime = @sLT
  WHERE ToolStringInfoID = @sToolStringInfoID

  UPDATE RelBusinessIntelligenceDataSet
  SET	LWDNPTnonTFF = (CASE WHEN r.tff = 1 THEN 0 ELSE a.LWD END),
		RSSNPTnonTFF = (CASE WHEN r.tff = 1 THEN 0 ELSE a.RSS END),
		TotalLWDNPT =  CASE WHEN r.LWD = 1 THEN (RSSNPTnonTFF + LWDNPTTFF + (CASE WHEN r.tff = 1 THEN 0 ELSE a.LWD END)) ELSE 0 END
  FROM	RelBusinessIntelligenceDataSet r
		INNER JOIN (SELECT t.RunID, SUM(CONVERT(decimal(18, 2), ISNULL(CASE WHEN (ts.type = 'HEL/LWD' OR ts.type = 'HEL/EM' OR ts.type = 'GWD') AND tff = '0' AND csi = '1' AND ru.isdeleted = '0' THEN CONVERT(decimal(18, 2), t.LostTime) ELSE 0 END, 0), 0)) [LWD],
		SUM(CONVERT(decimal(18, 2), ISNULL(CASE WHEN ts.Type = 'RSS' AND tff = '0' AND csi = '1' AND ru.isdeleted = '0' THEN CONVERT(decimal(18, 2), t.LostTime) ELSE 0 END, 0), 0)) [RSS]
  FROM	ToolStringComponentInfo t
		INNER JOIN ToolStringS ts ON t.ToolStringID = ts.ToolStringId
		INNER JOIN Runs ru ON ru.RunID = t.RunID
  WHERE ISNUMERIC(t.LostTime) = 1 AND t.RunID = @RunId
  GROUP BY t.RunID) A ON a.RunID = r.RunId

  EXEC usp_CreateAuditRMAnalysis @sIncidentID, @sToolStringID, @sFixedAssetID, @FieldId, @sLT, @iUserID, 1, @iPartTypeId, @sSerialNum

  --Add job in job queue
  IF(@LostTime <> @sLT)
   BEGIN
	SELECT @JobNumber = [JobNumber] FROM RelBusinessIntelligenceDataSet(NOLOCK) WHERE [RunId] = @RunId
	INSERT INTO JobQueue(JobId, CreateDate, RequestXml, JobQueueStatusId)
	VALUES(29, GETDATE(), '<ReliabilityWPTSJob><jobNumber>'+@JobNumber+'</jobNumber></ReliabilityWPTSJob>', 1)
   END


  SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisOSCodeSave]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_RMAnalysisOSCodeSave] (
	@sToolStringInfoID as uniqueidentifier,
	@sIncidentID as uniqueidentifier,
	@sToolStringID as uniqueidentifier,
	@sFixedAssetID as uniqueidentifier,
	@sFailureCodeID as uniqueidentifier,
	@iUserID as int) 

AS
SET NOCOUNT ON

Declare @iPartTypeId int
Declare @sSerialNum varchar(30)

SELECT
	@iPartTypeId = PartTypeID
	, @sSerialNum = SerialNum
FROM ToolStringComponentInfo
WHERE ToolStringInfoID = @sToolStringInfoID

UPDATE toolstringcomponentinfo
SET OutOfSpecCodeID = @sFailureCodeID
WHERE ToolStringInfoID = @sToolStringInfoID

EXEC usp_CreateAuditRMAnalysis @sIncidentID, @sToolStringID, @sFixedAssetID, 11, @sFailureCodeID, @iUserID, 1, @iPartTypeId, @sSerialNum

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisPRCodeSave]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_RMAnalysisPRCodeSave] (
	@sToolStringInfoID as uniqueidentifier,
	@sIncidentID as uniqueidentifier,
	@sToolStringID as uniqueidentifier,
	@sFixedAssetID as uniqueidentifier,
	@sFailureCodeID as uniqueidentifier,
	@iUserID as int) 

AS
SET NOCOUNT ON

Declare @iPartTypeId int
Declare @sSerialNum varchar(30)

SELECT
	@iPartTypeId = PartTypeID
	, @sSerialNum = SerialNum
FROM ToolStringComponentInfo
WHERE ToolStringInfoID = @sToolStringInfoID

UPDATE toolstringcomponentinfo
SET ProceduralCodeID = @sFailureCodeID
WHERE ToolStringInfoID = @sToolStringInfoID

EXEC usp_CreateAuditRMAnalysis @sIncidentID, @sToolStringID, @sFixedAssetID, 12, @sFailureCodeID, @iUserID, 1, @iPartTypeId, @sSerialNum

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisSetCompDistrictStatus]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_RMAnalysisSetCompDistrictStatus] (
	@sToolStringInfoID as uniqueidentifier,
	@iUserID as int) 
AS
SET NOCOUNT ON

DECLARE @sIncidentID as uniqueidentifier
DECLARE @sFixedAssetID as uniqueidentifier
DECLARE @iPartTypeId as int
DECLARE @sSerialNum as varchar(30)
DECLARE @sOrigStatusCodeID tinyint
DECLARE @sFieldSymptom as varchar(200)
DECLARE @sCompFailureCodeID as uniqueidentifier
DECLARE @sOutOfSpecCodeID as uniqueidentifier
DECLARE @sProceduralCodeID as uniqueidentifier
DECLARE @sTIPFT as varchar(25)
DECLARE @sArtNumber as varchar(25)
DECLARE @sRMFailDesc as varchar(50)
DECLARE @sCorrectiveAction as varchar(50)
DECLARE @bTFF as bit
DECLARE @bCSI as bit
DECLARE @bNCI as bit

SELECT 
	@sIncidentID = tsci.IncidentID,
	@sFixedAssetID = tsci.FixedAssetID,
	@iPartTypeId = tsci.PartTypeID,
	@sSerialNum = tsci.SerialNum,
	@sOrigStatusCodeID = tsci.StatusCodeID,
	@sFieldSymptom = tsci.FieldSymptom,
	@sCompFailureCodeID = tsci.CompFailureCodeID,
	@sOutOfSpecCodeID = OutOfSpecCodeID,
	@sProceduralCodeID = ProceduralCodeID, 
	@sTIPFT = TIPFT, 
	@sArtNumber = ArtNumber, 
	@sRMFailDesc = dbo.fnHasComponentComment(ToolStringInfoID,3),
	@sCorrectiveAction = dbo.fnHasComponentComment(ToolStringInfoID,4),
	@bTFF = TFF,
	@bCSI = CSI,
	@bNCI = NCI
FROM Incidents i
LEFT JOIN ToolstringComponentInfo tsci ON i.IncidentID = tsci.IncidentID
WHERE ToolStringInfoID = @sToolStringInfoID

DECLARE @bHasIncImpact as bit
SET @bHasIncImpact = 1

DECLARE @iStatusCodeID as tinyint
SET @iStatusCodeID = 1

DECLARE @iGlobalStatusCodeID as tinyint
SET @iGlobalStatusCodeID = NULL

DECLARE @sDistTechBoxes as varchar(100)
SET @sDistTechBoxes = ''

IF (@bTFF = 0 AND @bCSI = 0 AND @bNCI = 0)
BEGIN
	SET @bHasIncImpact = 0
END

IF (
	@sFieldSymptom is not null and
	@sCompFailureCodeID is not null and
	@sOutOfSpecCodeID is not null and
	@sProceduralCodeID is not null and
	@sTIPFT is not null and
	@sArtNumber is not null and
	@sRMFailDesc is not null and
	@sCorrectiveAction is not null and
	@bHasIncImpact = 1
)
BEGIN
	SET @iStatusCodeID = 0
	SET @iGlobalStatusCodeID = 1
END
ELSE IF (
	@sFieldSymptom is null and
	@sCompFailureCodeID is null and
	@sOutOfSpecCodeID is null and
	@sProceduralCodeID is null and
	@sTIPFT is null and
	@sArtNumber is null and
	@sRMFailDesc is null and
	@sCorrectiveAction is null and
	@bHasIncImpact = 0
)
BEGIN
	SET @iStatusCodeID = NULL
	SET @iGlobalStatusCodeID = NULL
END

EXEC usp_RMAnalysisCompStatusUpdate @sToolStringInfoID, @sIncidentID, @sFixedAssetID, @iStatusCodeID, @iGlobalStatusCodeID, @iUserID

IF (@iStatusCodeID = 0)
BEGIN
	SELECT @sDistTechBoxes = @sDistTechBoxes + t.[Type] + ','
	FROM ToolStringComponentInfo tsci
	LEFT JOIN ToolStrings t ON t.ToolStringID = tsci.ToolStringID
	WHERE tsci.StatusCodeID Is Not Null
	AND tsci.IncidentID = @sIncidentID
	GROUP BY t.[Type]
	HAVING Sum(dbo.NumCheck(tsci.StatusCodeID)) = 0

	IF (@sDistTechBoxes <> '')
	BEGIN
		   SET @sDistTechBoxes = LEFT(@sDistTechBoxes, LEN(@sDistTechBoxes) - 1)
	END
END

DECLARE @iRefreshStatus as tinyint
SET @iRefreshStatus = 1

IF (@sOrigStatusCodeID = @iStatusCodeID)
BEGIN
	SET @iRefreshStatus = 0
END

IF (@iStatusCodeID = 1 And @sArtNumber Is Null)
BEGIN
	UPDATE ToolStringComponentInfo 
	SET ArtNumber = 'N/A'
	WHERE ToolStringInfoID = @sToolStringInfoID

	SET @sArtNumber = 'N/A'
END

SELECT @iStatusCodeID, @iGlobalStatusCodeID, @sDistTechBoxes, @iRefreshStatus, @sArtNumber

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_RMAnalysisTIPFT]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_RMAnalysisTIPFT] (
	@sToolStringInfoID as uniqueidentifier,
	@sTIPFT as varchar(30),
	@iUserID as int) 
AS
SET NOCOUNT ON

Declare @sIncidentID uniqueidentifier
Declare @sToolStringID uniqueidentifier
Declare @sFixedAssetID uniqueidentifier
Declare @iPartTypeId int
Declare @sSerialNum varchar(30)

SELECT 
	@sIncidentID = IncidentID
	, @sToolStringID = ToolStringID
	, @sFixedAssetID = FixedAssetID
	, @iPartTypeId = PartTypeID
	, @sSerialNum = SerialNum
FROM ToolstringComponentInfo 
Where ToolStringInfoID = @sToolStringInfoID

UPDATE ToolstringComponentInfo
SET TIPFT = @sTIPFT
WHERE ToolStringInfoID = @sToolStringInfoID

EXEC usp_CreateAuditRMAnalysis @sIncidentID,@sToolStringID,@sFixedAssetID,17,@sTIPFT,@iUserID,1, @iPartTypeId, @sSerialNum

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_RunAssetAgingHistoryReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE procedure [dbo].[usp_RunAssetAgingHistoryReport]
	@xmlData xml
AS

declare @sql varchar(max)
declare @showType varchar(256)
declare @viewType varchar(256)
declare @isDrillDown varchar(1)
declare @startDate varchar(256)
declare @endDate varchar(256)
declare @numOfDays varchar(5)

select T.c.value('.', 'varchar(max)') as ToolPanel
into #ToolPanels
from @xmlData.nodes('/Filters/ToolPanels/Id') T(c)

select T.c.value('.', 'varchar(max)') as ToolCode
into #ToolCodes
from @xmlData.nodes('/Filters/ToolCodes/Id') T(c)

select T.c.value('.', 'varchar(max)') as ItemNum
into #ItemNums
from @xmlData.nodes('/Filters/ItemNums/Id') T(c)

select T.c.value('.', 'varchar(max)') as Region
into #Regions
from @xmlData.nodes('/Filters/Regions/Id') T(c)

select T.c.value('.', 'varchar(max)') as Country
into #Countries
from @xmlData.nodes('/Filters/Countries/Id') T(c)

select T.c.value('.', 'varchar(max)') as BranchPlant
into #BranchPlants
from @xmlData.nodes('/Filters/BranchPlants/Id') T(c)

Set @startDate = (Select T.c.value('.', 'varchar(256)') as StatusId FROM @xmlData.nodes('/Filters/StartDate') T(c))
Set @endDate = (Select T.c.value('.', 'varchar(256)') as StatusId FROM @xmlData.nodes('/Filters/EndDate') T(c))

CREATE TABLE #Statuses
( 
	OptionValue VARCHAR(50),
    OptionLabel VARCHAR(50)
) 

IF Exists(Select T.c.value('.', 'varchar(50)') as StatusId FROM @xmlData.nodes('/Filters/Status') T(c))
BEGIN 
	INSERT into #Statuses
	select Code, Status from PartStatus with(nolock)
		where Code in (
		select T.c.value('.', 'varchar(50)') as OptionValue
		from @xmlData.nodes('/Filters/Status') T(c)
	)
END
ELSE
BEGIN
	INSERT into #Statuses
	select Code, Status from PartStatus with(nolock)
END

Set @numOfDays = (Select T.c.value('.', 'varchar(5)') as StatusId FROM @xmlData.nodes('/Filters/NumOfDays') T(c))
select @showType = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/ShowType') T(c)
select @viewType = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/ViewType') T(c)
select @isDrillDown = T.c.value('.', 'varchar(1)') from @xmlData.nodes('/Filters/IsDrillDown') T(c)

select T.c.value('.', 'varchar(max)') as ToolPanelToolCode
into #ToolPanelsWithSelectedToolCodes from @xmlData.nodes('/Filters/ToolPanelsWithSelectedToolCodes/Id') T(c)

IF (@isDrillDown = '1') 
BEGIN
	if (@viewType = 'PartNum')
	begin
		if ((select count(*) from #ToolPanels) != 0 AND (select count(*) from #ToolCodes) = 0)
		begin 			
			insert into #ToolCodes 
			select distinct ToolCode from ItemNums with(nolock) where ToolPanel in (Select ToolPanel from #ToolPanels) AND IsAsset=1
			
			insert into #ToolPanelsWithSelectedToolCodes
			select distinct ToolPanel + '/' + ToolCode FROM ItemNums with(nolock) where ToolPanel in (Select ToolPanel from #ToolPanels) AND IsAsset=1
			
			delete from #ToolPanels	
		end
		else if ((select count(*) from #ToolPanels) != 0 AND (select count(*) from #ToolCodes) != 0 AND (select count(*) from #ItemNums) = 0)
		begin 			
			declare @toolPanel varchar(max)
			declare @toolCode varchar(max)
			
			set @toolPanel = (Select ToolPanel from #ToolPanels)
			set @toolCode = (Select ToolCode from #ToolCodes)
			
			insert into #ItemNums 
			select ItemNum from ItemNums with(nolock) where ToolPanel = @toolPanel and ToolCode = @toolCode and IsAsset=1
			
			delete from #ToolPanels
			delete from #ToolCodes
		end
		else if ((select count(*) from #ItemNums) != 0)
		begin
			delete from #ToolPanels
			delete from #ToolCodes
			delete from #ItemNums
		end
	end
	else
	begin
		if ((select count(*) from #Regions) != 0 AND (select count(*) from #Countries) = 0)
		begin 			
			insert into #Countries 
			select distinct Country from BranchPlants with(nolock) where Region in (Select Region from #Regions)
			delete from #Regions	
		end
		else if ((select count(*) from #Regions) != 0 AND (select count(*) from #Countries) != 0 AND (select count(*) from #BranchPlants) = 0)
		begin 			
			declare @region varchar(max)
			declare @country varchar(max)
			
			set @region = (Select Region from #Regions)
			set @country = (Select Country from #Countries)
			
			insert into #BranchPlants
			select distinct BranchPlant from BranchPlants with(nolock) where Region = @region AND Country = @country
			
			delete from #Regions
			delete from #Countries
		end
		else if ((select count(*) from #BranchPlants) != 0)
		begin
			delete from #Regions
			delete from #Countries
			delete from #BranchPlants
		end
	end
END

declare @whereClauseForLocationViewType varchar(max)
declare @whereClauseForItemNumViewType varchar(max)

set @whereClauseForLocationViewType = ''
set @whereClauseForItemNumViewType = ''

if((select count(*) from #Regions) > 0 OR (select count(*) from #Countries) > 0 OR (select count(*) from #BranchPlants) > 0)
begin
	set @whereClauseForItemNumViewType = ' and ( '
	
	if((select count(*) from #Regions) > 0)
		set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' b.Region in (select * from #Regions)'
	else if((select count(*) from #Countries) > 0)
		set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' b.Country in (select * from #Countries)'
	else if((select count(*) from #BranchPlants) > 0)
		set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' b.BranchPlant in (select * from #BranchPlants)'
		
	if((select count(*) from #Regions) > 0 AND (select count(*) from #Countries) > 0)
		set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' OR b.Country in (select * from #Countries)'	
		
	if((select count(*) from #Regions) > 0 AND (select count(*) from #BranchPlants) > 0)
		set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' OR b.BranchPlant in (select * from #BranchPlants)'
	
	if((select count(*) from #Regions) = 0 AND (select count(*) from #Countries) > 0 AND (select count(*) from #BranchPlants) > 0)
		set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' OR b.BranchPlant in (select * from #BranchPlants)'		
	
	set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' )'
end

if((select count(*) from #ToolPanels) > 0 OR (select count(*) from #ToolCodes) > 0 OR (select count(*) from #ItemNums) > 0)
begin
	set @whereClauseForLocationViewType = ' and ( '
	
	if((select count(*) from #ToolPanels) > 0)
		set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' i.ToolPanel in (select * from #ToolPanels)'
	else if((select count(*) from #ToolCodes) > 0)
		set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' (i.ToolCode in (select * from #ToolCodes) and ((isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''')) in (Select * from #ToolPanelsWithSelectedToolCodes)))'
	else if((select count(*) from #ItemNums) > 0)
		set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' i.ItemNum in (select * from #ItemNums)'
		
	if((select count(*) from #ToolPanels) > 0 AND (select count(*) from #ToolCodes) > 0)
		set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' OR (i.ToolCode in (select * from #ToolCodes) and ((isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''')) in (Select * from #ToolPanelsWithSelectedToolCodes)))'
		
	if((select count(*) from #ToolPanels) > 0 AND (select count(*) from #ItemNums) > 0)
		set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' OR i.ItemNum in (select * from #ItemNums)'
	
	if((select count(*) from #ToolPanels) = 0 AND (select count(*) from #ToolCodes) > 0 AND (select count(*) from #ItemNums) > 0)
		set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' OR i.ItemNum in (select * from #ItemNums)'		
	
	set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' )'
end


declare @showTypeCol varchar(100)
declare @query varchar(max)
set @query = ''


if(@showType = 'Count')
begin
	set @showTypeCol = ' 1 AS Value '
end
else
begin
	set @showTypeCol = ' f.Cost AS Value '
end

if((@viewType = 'Location' AND (select count(*) from #Regions) = 0 AND (select count(*) from #Countries) = 0 AND (select count(*) from #BranchPlants) = 0)
	OR (@viewType = 'Location' AND (select count(*) from #Regions) > 0) 
	OR (@viewType = 'PartNum' AND (select count(*) from #ToolPanels) = 0 AND (select count(*) from #ToolCodes) = 0 AND (select count(*) from #ItemNums) = 0)
	OR (@viewType = 'PartNum' AND (select count(*) from #ToolPanels) > 0))
begin
	set @query = ' select fas.InventoryDate, ' + @showTypeCol
	
	if @viewType = 'Location'
		set @query = @query + ',IsNull(rg.RegionDesc, '''') + ''~'' + IsNull(rg.Region, '''') + ''|'' + IsNull(rg.RegionDesc, '''') as ColumnName '
	else
		set @query = @query + ',IsNull(i.ToolPanel, '''') + ''~'' + IsNull(i.ToolPanel, '''') as ColumnName '
	
	set @query = @query + ' from FixedAssetSnapshots (nolock) fas 
	left join FixedAssets f with(nolock) ON fas.FixedAssetId=f.FixedAssetId
	left join BranchPlants b with(nolock) on b.BranchPlant = fas.BranchPlant'
	
	if @viewType = 'Location'
	begin
		 set @query = @query + ' left join Regions rg with(nolock) on b.Region = rg.Region					    	
							left join ItemNums i with(nolock) on i.ItemNum = fas.InventoryItemNum  
							where i.IsAsset = 1 AND fas.EquipmentStatus IN (Select OptionValue FROM #Statuses) '
		
		 if((select count(*) from #Regions) > 0)
		 begin
			set @query = @query + ' and rg.Region in (select * from #Regions)'										
		 end	 
		 
		 if(@whereClauseForLocationViewType != '')
		 begin
			set @query = @query + @whereClauseForLocationViewType
		 end
	end						
	else
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = fas.InventoryItemNum 
								 where i.IsAsset = 1 AND fas.EquipmentStatus IN (Select OptionValue FROM #Statuses) '
		 
		 if((select count(*) from #ToolPanels) > 0)
		 begin
			set @query = @query + ' and i.ToolPanel in (select * from #ToolPanels) '					
		 end	
		 
		 if(@whereClauseForItemNumViewType != '')
		 begin
			set @query = @query + @whereClauseForItemNumViewType
		 end
	end
	
	set @query = @query + ' AND fas.InventoryDate >= ''' + @startDate + ''' AND fas.InventoryDate <= ''' + @endDate + '''
						AND DATEDIFF(DAY, fas.LastStatusChangeDate, fas.InventoryDate) > ''' + @numOfDays + ''''
end

if(((select count(*) from #Countries) > 0 AND @viewType = 'Location') OR ((select count(*) from #ToolCodes) > 0 AND @viewType = 'PartNum'))
begin
	if(@query != '')
	begin	
		set @query = @query + ' Union All'
	end

	set @query = @query + ' select fas.InventoryDate, ' + @showTypeCol
	if @viewType = 'Location'
		set @query = @query + ',IsNull(c.CountryDesc, '''') + ''~'' + IsNull(b.Region, '''') + ''|'' + IsNull(r.RegionDesc, '''') +  ''/'' + IsNull(c.Country, '''') + ''|'' + IsNull(c.CountryDesc, '''')  as ColumnName '
	else
		set @query = @query + ',IsNull(i.ToolCode, '''') + ''~'' + IsNull(i.ToolPanel, '''') + ''/'' + IsNull(i.ToolCode, '''') as ColumnName '
		
	set @query = @query + ' from FixedAssetSnapshots (nolock) fas 
	left join FixedAssets f with(nolock) ON fas.FixedAssetId=f.FixedAssetId
	left join BranchPlants b with(nolock) on b.BranchPlant = fas.BranchPlant'
	
	if @viewType = 'Location'
	begin
		set @query = @query + ' left join Countries c with(nolock) on c.Country = b.Country
								left join Regions r with(nolock) on r.Region = b.Region
							left join ItemNums i with(nolock) on i.ItemNum = fas.InventoryItemNum 
							where i.IsAsset = 1 AND fas.EquipmentStatus IN (Select OptionValue FROM #Statuses) '
							
		 if((select count(*) from #Countries) > 0)
		 begin
			set @query = @query + ' and c.Country in (select * from #Countries)'					
		 end					
		
		 if(@whereClauseForLocationViewType != '')
		 begin
			set @query = @query + @whereClauseForLocationViewType
		 end							
	end						
	else
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = fas.InventoryItemNum 
								 where i.IsAsset = 1 AND fas.EquipmentStatus IN (Select OptionValue FROM #Statuses) '
		 
		 if((select count(*) from #ToolCodes) > 0)
		 begin
			set @query = @query + ' and i.ToolCode in (select * from #ToolCodes)'	
			set @query = @query + ' and ((isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''')) in (Select * from #ToolPanelsWithSelectedToolCodes)) '				
		 end	
		 
		 if(@whereClauseForItemNumViewType != '')
		 begin
			set @query = @query + @whereClauseForItemNumViewType
		 end				
	end
	
	set @query = @query + ' AND fas.InventoryDate >= ''' + @startDate + ''' AND fas.InventoryDate <= ''' + @endDate + '''
						AND DATEDIFF(DAY, fas.LastStatusChangeDate, fas.InventoryDate) > ''' + @numOfDays + ''''
end			

if(((select count(*) from #BranchPlants) > 0 AND @viewType = 'Location') OR ((select count(*) from #ItemNums) > 0 AND @viewType = 'PartNum'))
begin	
	
	if(@query != '')
	begin	
		set @query = @query + ' Union All'
	end

	set @query = @query + ' select fas.InventoryDate, ' + @showTypeCol
	if @viewType = 'Location'
		set @query = @query + ',IsNull(b.CompanyName, '''') + ''~'' +  IsNull(b.Region, '''') + ''|'' +  IsNull(r.RegionDesc, '''') + ''/'' + IsNull(b.Country, '''') + ''|'' + IsNull(c.CountryDesc, '''') + ''/'' + b.BranchPlant as ColumnName '
	else
		set @query = @query + ',IsNull(i.DescShort, '''') + ''~'' + IsNull(i.ToolPanel, '''') + ''/'' + IsNull(i.ToolCode, '''') + ''/''  + i.ItemNum as ColumnName '
		
	set @query = @query + ' from FixedAssetSnapshots (nolock) fas 
	left join FixedAssets f with(nolock) ON fas.FixedAssetId=f.FixedAssetId
	left join BranchPlants b with(nolock) on b.BranchPlant = fas.BranchPlant'

	if @viewType = 'Location'
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = fas.InventoryItemNum 
								left join Countries c with(nolock) on c.Country = b.Country
								left join Regions r with(nolock) on r.Region = b.Region
								 where i.IsAsset = 1 AND fas.EquipmentStatus IN (Select OptionValue FROM #Statuses) '
							
		 if((select count(*) from #BranchPlants) > 0)
		 begin
			set @query = @query + ' and b.BranchPlant in (select * from #BranchPlants)'					
		 end				
		
		 if(@whereClauseForLocationViewType != '')
		 begin
			set @query = @query + @whereClauseForLocationViewType
		 end
	end						
	else
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = fas.InventoryItemNum 
								 where i.IsAsset = 1 AND fas.EquipmentStatus IN (Select OptionValue FROM #Statuses) '
		
		 if((select count(*) from #ItemNums) > 0)
		 begin
			set @query = @query + ' and fas.InventoryItemNum in (select * from #ItemNums)'					
		 end	
		 
		 if(@whereClauseForItemNumViewType != '')
		 begin
			set @query = @query + @whereClauseForItemNumViewType
		 end
	end
	
	set @query = @query + ' AND fas.InventoryDate >= ''' + @startDate + ''' AND fas.InventoryDate <= ''' + @endDate + '''
						AND DATEDIFF(DAY, fas.LastStatusChangeDate, fas.InventoryDate) > ''' + @numOfDays + ''''
end

CREATE TABLE #Result
( 
    InventoryDate datetime, 
    Value int,
    ColumnName varchar(max)
)

print @query

set @sql = 
'
Insert into #Result
select * from ( ' + @query + ') b'

exec(@sql)

Declare @pivotColumns as varchar(max)
Declare @pivotValues as varchar(max)
Set @pivotColumns = '[RawCol]'
Set @pivotValues = '[RawCol]'
Set @sql = ''

Select @pivotColumns = @pivotColumns + ',[' + ISNULL(ColumnName,'') + ']',
		@pivotValues = @pivotValues + ',[' + ISNULL(ColumnName,'') + ']'
FROM #Result
GROUP by ColumnName
ORDER by ColumnName

Set @pivotColumns = REPLACE(@pivotColumns,'[RawCol],','')
Set @pivotValues = REPLACE(@pivotValues,'[RawCol],','')



Set @sql = 'Select InventoryDate, ' + @pivotValues + 'FROM #Result PIVOT ( SUM(Value) FOR ColumnName IN ('+ @pivotColumns +')) AS pvt ORDER by InventoryDate ASC'


print @sql
exec(@sql)

drop table #Regions 
drop table #Countries 
drop table #BranchPlants 
drop table #ToolPanels 
drop table #ToolCodes
drop table #ItemNums
drop table #Statuses
drop table #Result
drop table #ToolPanelsWithSelectedToolCodes


















GO
/****** Object:  StoredProcedure [dbo].[usp_RunAssetInventoryStatusReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_RunAssetInventoryStatusReport]
	@xmlData XML
AS

DECLARE @fromDate VARCHAR(256)
DECLARE @toDate VARCHAR(256)
DECLARE @anyStatus VARCHAR(5)
DECLARE @excludeAllStatus VARCHAR(5)
DECLARE @exporting VARCHAR(5)

SET @fromDate = (SELECT T.c.value('.', 'VARCHAR(256)') AS FromDate FROM @xmlData.nodes('/Filters/FromDate') T(c))
SET @toDate = (SELECT T.c.value('.', 'VARCHAR(256)') AS ToDate FROM @xmlData.nodes('/Filters/ToDate') T(c))
SET @anyStatus = (SELECT T.c.value('.', 'VARCHAR(5)') AS ToDate FROM @xmlData.nodes('/Filters/AnyStatus') T(c))
SET @excludeAllStatus = (SELECT T.c.value('.', 'VARCHAR(5)') AS ToDate FROM @xmlData.nodes('/Filters/ExcludeAllStatus') T(c))
SET @exporting = (SELECT T.c.value('.', 'VARCHAR(5)') AS ToDate FROM @xmlData.nodes('/Filters/Exporting') T(c))

CREATE TABLE #ToolPanels
( 
	ToolPanel VARCHAR(100)
)

CREATE TABLE #ToolCodes
( 
	ToolCode VARCHAR(100)
)

CREATE TABLE #BranchPlants
( 
	BranchPlant VARCHAR(200)
)

CREATE TABLE #BranchPlantNames
( 
	BranchPlantName VARCHAR(200)
)

CREATE TABLE #Regions
( 
	RegionDesc VARCHAR(50)
)

CREATE TABLE #Countries
( 
	CountryDesc VARCHAR(50)
)

CREATE TABLE #Statuses
( 
	OptionValue VARCHAR(50),
    OptionLabel VARCHAR(50)
)

CREATE TABLE #Statuses2
( 
	OptionValue VARCHAR(50),
    OptionLabel VARCHAR(50)
) 

CREATE TABLE #ExcludeStatuses
( 
	OptionValue VARCHAR(50),
    OptionLabel VARCHAR(50)
)

IF EXISTS(SELECT T.c.value('.', 'varchar(100)') AS StatusId FROM @xmlData.nodes('/Filters/ToolPanels') T(c))
BEGIN
	INSERT INTO #ToolPanels
	SELECT T.c.value('.', 'varchar(100)') AS ToolPanel FROM @xmlData.nodes('/Filters/ToolPanels/Id') T(c) 
END

IF EXISTS(SELECT T.c.value('.', 'varchar(100)') AS StatusId FROM @xmlData.nodes('/Filters/ToolCodes') T(c))
BEGIN
	INSERT INTO #ToolCodes
	SELECT T.c.value('.', 'varchar(100)') AS ToolCode FROM @xmlData.nodes('/Filters/ToolCodes/Id') T(c) 
END

IF EXISTS(SELECT T.c.value('.', 'varchar(200)') AS StatusId FROM @xmlData.nodes('/Filters/BranchPlants') T(c))
BEGIN
	INSERT INTO #BranchPlants
	SELECT T.c.value('.', 'varchar(200)') AS BranchPlant FROM @xmlData.nodes('/Filters/BranchPlants/Id') T(c) 
END

IF EXISTS(SELECT T.c.value('.', 'varchar(200)') AS BranchPlantName FROM @xmlData.nodes('/Filters/BranchPlantNames') T(c))
BEGIN
	INSERT INTO #BranchPlantNames
	SELECT T.c.value('.', 'varchar(200)') AS BranchPlantName FROM @xmlData.nodes('/Filters/BranchPlantNames/Id') T(c) 
END

IF EXISTS(SELECT T.c.value('.', 'varchar(50)') AS RegionDesc FROM @xmlData.nodes('/Filters/Regions') T(c))
BEGIN
	INSERT INTO #Regions
	SELECT T.c.value('.', 'varchar(50)') AS RegionDesc FROM @xmlData.nodes('/Filters/Regions/Id') T(c) 
END

IF EXISTS(SELECT T.c.value('.', 'varchar(50)') AS CountryDesc FROM @xmlData.nodes('/Filters/Countries') T(c))
BEGIN
	INSERT INTO #Countries
	SELECT T.c.value('.', 'varchar(50)') AS CountryDesc FROM @xmlData.nodes('/Filters/Countries/Id') T(c) 
END

IF (@anyStatus = '1')
BEGIN
	INSERT into #Statuses
	SELECT Code, Status FROM PartStatus (NOLOCK)
	ORDER BY Status
	
	INSERT into #Statuses2
	SELECT Code, Status FROM PartStatus (NOLOCK)
	ORDER BY Status
END
ELSE IF EXISTS(SELECT T.c.value('.', 'varchar(50)') AS StatusId FROM @xmlData.nodes('/Filters/Statuses') T(c))
BEGIN
	INSERT INTO #Statuses
	SELECT Code, Status FROM PartStatus (NOLOCK)
	WHERE Code in (
		SELECT T.c.value('.', 'varchar(50)') AS OptionValue FROM @xmlData.nodes('/Filters/Statuses/Id') T(c)
	) ORDER BY Status
	
	INSERT INTO #Statuses2
	SELECT Code, Status FROM PartStatus (NOLOCK)
	WHERE Code in (
		SELECT T.c.value('.', 'varchar(50)') AS OptionValue FROM @xmlData.nodes('/Filters/Statuses/Id') T(c)
	) ORDER BY Status
END

IF (@excludeAllStatus = '1')
BEGIN
	INSERT into #ExcludeStatuses
	SELECT Code, Status FROM PartStatus (NOLOCK)
	ORDER BY Status
END
ELSE IF EXISTS(SELECT T.c.value('.', 'varchar(50)') AS StatusId FROM @xmlData.nodes('/Filters/ExcludeStatuses') T(c))
BEGIN
	INSERT INTO #ExcludeStatuses
	SELECT Code, Status FROM PartStatus (NOLOCK)
	WHERE Code in (
		SELECT T.c.value('.', 'varchar(50)') AS OptionValue FROM @xmlData.nodes('/Filters/ExcludeStatuses/Id') T(c)
	) ORDER BY Status
END

DECLARE @sql VARCHAR(MAX)
DECLARE @selectColumns VARCHAR(MAX)
DECLARE @whereClause VARCHAR(MAX)
DECLARE @id VARCHAR(50)

SET @selectColumns = 'SELECT InventoryDate'
SET @id = NULL

SELECT TOP 1 @id = OptionValue FROM #Statuses

WHILE(@id IS NOT NULL)
BEGIN
	
	SELECT @selectColumns = @selectColumns + ',ISNULL(COUNT(CASE WHEN fas.EquipmentStatus = ''' + @id + ''' THEN 1 END),0) AS AssetsIn' + @id
	SELECT @selectColumns = @selectColumns + ',ISNULL(AVG(CASE WHEN fas.EquipmentStatus = ''' + @id + ''' THEN fas.NumDaysInEquipmentStatus END),0) AS AvgDaysIn' + @id
	
	DELETE FROM #Statuses WHERE OptionValue = @id
	SET @id = NULL
	SELECT TOP 1 @id = OptionValue FROM #Statuses
END

SET @sql = ' FROM FixedAssetSnapshots (NOLOCK) fas 
LEFT JOIN FixedAssets (NOLOCK) fa ON fa.FixedAssetId = fas.FixedAssetId 
LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = fas.InventoryItemNum 
'

SET @whereClause = ' WHERE i.IsAsset = 1 AND fas.InventoryDate >= ''' + @fromDate + ''' AND fas.InventoryDate <= ''' + @toDate + ''' '

SET @whereClause = @whereClause + ' AND DATEPART(DW, fas.InventoryDate) = 2 ' 

SET @whereClause = @whereClause + ' AND fas.EquipmentStatus IN (SELECT OptionValue FROM #Statuses2) '

IF ((SELECT COUNT(*) FROM #ToolPanels) <> 0)
BEGIN
	SET @whereClause = @whereClause + ' AND i.ToolPanel IN (SELECT ToolPanel FROM #ToolPanels) '
END

IF ((SELECT COUNT(*) FROM #ToolCodes) <> 0)
BEGIN
	SET @whereClause = @whereClause + ' AND i.ToolCode IN (SELECT ToolCode FROM #ToolCodes) '
END

IF ((SELECT COUNT(*) FROM #BranchPlants) <> 0)
BEGIN
	SET @whereClause = @whereClause + ' AND fas.BranchPlant IN (SELECT BranchPlant FROM #BranchPlants) '
END

IF ((SELECT COUNT(*) FROM #BranchPlantNames) <> 0)
BEGIN
	SET @whereClause = @whereClause + ' AND fas.BranchPlant IN (SELECT bp.BranchPlant FROM BranchPlants bp WHERE bp.CompanyName IN (SELECT BranchPlantName FROM #BranchPlantNames) )'
END

IF ((SELECT COUNT(*) FROM #Regions) <> 0)
BEGIN
	SET @whereClause = @whereClause + ' AND fas.BranchPlant IN (SELECT bp.BranchPlant FROM BranchPlants bp WHERE bp.Region IN (SELECT Region FROM Regions r WHERE r.RegionDesc IN (SELECT RegionDesc FROM #Regions )))'
END

IF ((SELECT COUNT(*) FROM #Countries) <> 0)
BEGIN
	SET @whereClause = @whereClause + ' AND fas.BranchPlant IN (SELECT bp.BranchPlant FROM BranchPlants bp WHERE bp.Country IN (SELECT Country FROM Countries r WHERE r.CountryDesc IN (SELECT CountryDesc FROM #Countries )))'
END


IF ((SELECT COUNT(*) FROM #ExcludeStatuses) <> 0)
BEGIN
	SET @whereClause = @whereClause + ' AND fa.EquipmentStatus NOT IN (SELECT OptionValue FROM #ExcludeStatuses) '
END

DECLARE @query VARCHAR(MAX)
SET @query = @selectColumns + @sql + @whereClause + ' GROUP BY InventoryDate ORDER BY InventoryDate ASC '

PRINT(@query)
EXEC(@query)

IF (@exporting = '1')
BEGIN
	SET @selectColumns = 'SELECT fa.TechId, fas.SerialNum, fas.LastStatusChangeDate, fas.InventoryDate, 
						ps.Status AS EquipmentStatus, fas.NumDaysInEquipmentStatus, i.ToolPanel, i.ToolCode, 
						fas.BranchPlant, bp.CompanyName'
	SET @sql = @sql + ' LEFT JOIN BranchPlants bp ON bp.BranchPlant=fas.BranchPlant 
	LEFT JOIN PartStatus (NOLOCK) ps ON ps.Code=fas.EquipmentStatus '

	SET @query = @selectColumns + @sql + @WhereClause + 'ORDER BY fas.InventoryDate DESC, fas.NumDaysInEquipmentStatus DESC '
	
	PRINT @query
	EXEC(@query)
END

DROP TABLE #ToolPanels
DROP TABLE #ToolCodes
DROP TABLE #BranchPlants
DROP TABLE #BranchPlantNames
DROP TABLE #Statuses
DROP TABLE #Statuses2
DROP TABLE #ExcludeStatuses



GO
/****** Object:  StoredProcedure [dbo].[usp_RunAssetStatusLocationCountReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[usp_RunAssetStatusLocationCountReport]
	@xmlData xml
AS
/*

<Filters><WhereClause> where 1 = 1 </WhereClause><PageSize>50</PageSize><StartIndex>0</StartIndex>
	<SortField>RowNum</SortField><SortDir>ASC</SortDir><ItemNumValue>ToolPanel</ItemNumValue>
	<LocationValue>Region</LocationValue><StatusValue>Status</StatusValue><Statuses><Id>AV</Id><Id>IT</Id></Statuses>
</Filters>

*/

declare @selectFields varchar(max)
declare @innerSelectFields varchar(max)
declare @groupFields varchar(max)
declare @innerGroupFields varchar(max)

set @selectFields = ''
set @innerSelectFields = ''
set @groupFields = ''
set @innerGroupFields = ''

declare @pageSize int
declare @startIndex int
declare @itemNumValue varchar(max)
declare @locationValue varchar(max)
declare @statusValue varchar(max)

declare @sortField varchar(max)
declare @sortDir varchar(max)
declare @whereClause varchar(max)

set @pageSize = 25
set @startIndex = 0
set @sortField = ''
set @sortDir = ' ASC '

declare @sql varchar(max)
declare @alterSql varchar(max)

set @alterSql = 'Alter table #Result Add '

CREATE TABLE #Result
( 
	RowNum int
) 

select 
@itemNumValue = T.c.value('(ItemNumValue/text())[1]','varchar(max)'),
@locationValue = T.c.value('(LocationValue/text())[1]','varchar(max)'),
@statusValue = T.c.value('(StatusValue/text())[1]','varchar(max)'),
@startIndex = T.c.value('(StartIndex/text())[1]','int'),
@pageSize = T.c.value('(PageSize/text())[1]','int'),
@sortField = T.c.value('(SortField/text())[1]','varchar(max)'),
@sortDir = T.c.value('(SortDir/text())[1]','varchar(max)'),
@whereClause = T.c.value('(WhereClause/text())[1]','varchar(max)')
from
@xmlData.nodes('/Filters') T(c)

select T.c.value('.', 'varchar(max)') as EquipmentStatus
into #filterStatuses
from 
@xmlData.nodes('/Filters/Statuses/Id') T(c)

if ((select count(*) from #filterStatuses) != 0)
begin
	set @whereClause = @whereClause + ' and f.EquipmentStatus in ( select EquipmentStatus from #filterStatuses )'
end

if @sortDir is null
	set @sortDir = ' ASC '

if(@itemNumValue != '')
begin
	set @sortField = 'ToolPanel'
	set @selectFields = @itemNumValue
	set @groupFields = @itemNumValue
	
	if (@itemNumValue = 'ToolPanel')
	begin
		set @alterSql = @alterSql + '[ToolPanel] varchar(max)'
	end
	else if (@itemNumValue = 'ToolPanel,ToolCode')
	begin
		set @alterSql = @alterSql + '[ToolPanel] varchar(max), [ToolCode] varchar(max)'
	end
	else
	begin
		set @alterSql = @alterSql + '[ToolPanel] varchar(max), [ToolCode] varchar(max), [ItemNum] varchar(max)'
	end
end	
else if (@locationValue != '')
begin
	set @sortField = 'RegionDesc'
end
else if (@itemNumValue != '' AND @locationValue != '')
begin
	set @sortField = 'ToolPanel, RegionDesc'
end

if (@locationValue != '')
begin
	if(@selectFields != '')
	begin
		set @selectFields += ','
		set @groupFields += ','		
	end
end

set @innerSelectFields = @selectFields
set @innerGroupFields = @groupFields

if(@itemNumValue != '' and @locationValue != '')
begin
	set @alterSql = @alterSql + ', '
end
	
if(@locationValue = 'Region')
begin
	set @selectFields += 'RegionDesc, Region'
	set @innerSelectFields += 'r.RegionDesc, r.Region'	
	set @groupFields += 'RegionDesc, Region'
	set @innerGroupFields += 'RegionDesc, r.Region'
	set @alterSql = @alterSql + '[RegionDesc] varchar(max), [Region] varchar(max)'
end
else if(@locationValue = 'Country')
begin
	set @selectFields += 'RegionDesc, Region, CountryDesc, Country'
	set @groupFields += 'RegionDesc, Region, CountryDesc, Country'
	set @innerSelectFields += 'r.RegionDesc, r.Region, c.CountryDesc, c.Country'
	set @innerGroupFields += 'r.RegionDesc, r.Region, c.CountryDesc, c.Country'
	set @alterSql = @alterSql + '[RegionDesc] varchar(max), [Region] varchar(max), [CountryDesc] varchar(max), [Country] varchar(max)'
end
else if(@locationValue = 'BranchPlant')
begin
	set @selectFields += 'RegionDesc, Region, CountryDesc, Country, BranchPlant, CompanyName'
	set @groupFields += 'RegionDesc, Region, CountryDesc, Country, BranchPlant, CompanyName'
	set @innerSelectFields += 'r.RegionDesc, r.Region, c.CountryDesc, c.Country, b.BranchPlant, b.CompanyName'
	set @innerGroupFields += 'r.RegionDesc, r.Region, c.CountryDesc, c.Country, b.BranchPlant, b.CompanyName'
	set @alterSql = @alterSql + '[RegionDesc] varchar(max), [Region] varchar(max), [CountryDesc] varchar(max), [Country] varchar(max), [BranchPlant] varchar(max), [CompanyName] varchar(max)'
end

select Status into #Statuses
from PartStatus with(nolock)
union 
select distinct 'EmptyStatus' as OptionLabel
from FixedAssets with(nolock)
where EquipmentStatus is null


if(@statusValue = 'Status' or @statusValue is null)
begin

	declare @statusDesc varchar(max)
	declare @selectValue varchar(max)
	declare @sumValue varchar(max)
	declare @pivotValue varchar(max)
	declare @counter int

	set @selectValue = ''
	set @statusDesc = ''
	set @sumValue = ''
	set @pivotValue = ''
	set @counter = 0

	set @statusDesc = null
	select top 1 @statusDesc = Status from #Statuses

	while(@statusDesc is not null)
	begin 
		set @selectValue = @selectValue + ', sum(IsNull([' + @statusDesc + '],0)) as [' + @statusDesc + ']'
		if @counter = 0
		begin
			set @sumValue = ',sum(IsNull([' + @statusDesc +'],0)'
			set @pivotValue = '[' + @statusDesc +']'
		end
		else
		begin
			set @sumValue = @sumValue + ' + IsNull([' + @statusDesc +'],0)'
			set @pivotValue = @pivotValue + ', [' + @statusDesc +']'
		end
		
		if(@statusValue = 'Status')
		begin
			set @alterSql = @alterSql + ', [' + @statusDesc +'] varchar(max)'
		end		
			
		delete from #Statuses where Status = @statusDesc
		set @statusDesc = null
		select top 1 @statusDesc = Status from #Statuses
		set @counter = @counter + 1
	end

	set @sumValue = @sumValue + ') as Total '
	set @alterSql = @alterSql + ', [Total] int'
	
	set @sql = 
	'
	insert into #Result
	select top ' + UPPER(@pageSize) + ' * from (
	select ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, '
	+ @selectFields 
	 
	if(@statusValue = 'Status')
	begin
		set @sql = @sql + @selectValue
	end

	set @sql = @sql + @sumValue + 
	' from (
	select isNull(ps.Status,''EmptyStatus'') as OptionLabel, ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, count(*) as AssetCount, ' + @innerSelectFields + '
	 from 
		FixedAssets f WITH(NOLOCK)
		left join ItemNums i WITH(NOLOCK) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1
		left join BranchPlants b WITH(NOLOCK) on b.BranchPlant = f.BranchPlant
		left join Regions r WITH(NOLOCK) on r.Region = b.Region
		left join Countries c WITH(NOLOCK) on c.Country = b.Country   
		left join PartStatus ps WITH(NOLOCK) on ps.Code = f.EquipmentStatus ' 
		+ @whereClause + ' group by ps.Status, ' + @innerGroupFields
	set @sql= @sql + ') b
	PIVOT( SUM(AssetCount) FOR OptionLabel IN( ' + @pivotValue + ' )
	 ) as p2
	group by ' + @groupFields + ''
	+ ' ) query where query.RowNum > ' + UPPER(@startIndex) + ' ORDER BY ' + @sortField + ' ' + @sortDir + ''
end
else if (@statusValue = 'StatusGroup')			
begin
	set @innerSelectFields = @innerSelectFields + ', sum(case when f.EquipmentStatus = ''WK'' then 1 else 0 end) as Active
							, sum(case when f.EquipmentStatus = ''AS'' then 1 else 0 end) as Assigned 
							, sum(case when f.EquipmentStatus = ''AV'' then 1 else 0 end) as Available 
							, sum(case when f.EquipmentStatus = ''II'' then 1 else 0 end) as Testing 
							, sum(case when f.EquipmentStatus = ''UR'' then 1 else 0 end) as Repair
							, sum(case when f.EquipmentStatus = ''IT'' then 1 else 0 end) as InTransit
							, sum(case when f.EquipmentStatus = ''PT'' then 1 else 0 end) as Parked
							, sum(case when f.EquipmentStatus not in (''WK'', ''AS'', ''AV'' , ''II'', ''UR'', ''IT'', ''PT'')
								then 1 else 0 end) as Other
							, SUM(case when f.EquipmentStatus is null then 1 else 0 end) as EmptyStatus'
	
	set @alterSql = @alterSql + ', [Active] int, [Assigned] int, [Available] int, [Testing] int, [Repair] int, [InTransit] int, [Parked] int, 
								[Other] int, [EmptyStatus] int, [Total] int'
	
	set @sql= '
	insert into #Result
	select top ' + UPPER(@pageSize) + ' * from (
	select ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, ' + @innerSelectFields + '
	, count(*) as Total from 
		FixedAssets f WITH(NOLOCK)
		left join ItemNums i WITH(NOLOCK) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1
		left join BranchPlants b WITH(NOLOCK) on b.BranchPlant = f.BranchPlant
		left join Regions r WITH(NOLOCK) on r.Region = b.Region
		left join Countries c WITH(NOLOCK) on c.Country = b.Country   
		left join PartStatus ps WITH(NOLOCK) on ps.Code = f.EquipmentStatus ' 
		+ @whereClause + ' group by ' + @innerGroupFields
	set @sql= @sql + ') b
	where b.RowNum > ' + UPPER(@startIndex) + ' ORDER BY ' + @sortField + ' ' + @sortDir + ''
	
end

exec (@alterSql)
print @sql
exec (@sql)

select * from #Result

set @sql = 'select count(*) from (
select ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, ' + @innerSelectFields + '
 from 
    FixedAssets f WITH(NOLOCK)
    left join ItemNums i WITH(NOLOCK) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1
    left join BranchPlants b WITH(NOLOCK) on b.BranchPlant = f.BranchPlant
    left join Regions r WITH(NOLOCK) on r.Region = b.Region
    left join Countries c WITH(NOLOCK) on c.Country = b.Country   
    left join PartStatus ps WITH(NOLOCK) on ps.Code = f.EquipmentStatus '
    + @whereClause + ' group by ' + @innerGroupFields
    + ' ) query '

exec (@sql)

drop table #Statuses




GO
/****** Object:  StoredProcedure [dbo].[usp_RunAssetStatusReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_RunAssetStatusReport]
	@xmlData xml
AS
/*
declare @xmlData xml

set @xmlData = '<Filters>
					<Regions><Id>LAO</Id><Id>NAM</Id></Regions>
					<Countries><Id>DZ</Id><Id>US</Id><Id>AR</Id></Countries>
					<BranchPlants><Id>PERTH</Id><Id>HASSIMESSA</Id></BranchPlants>					
					<ToolPanels><Id>EM</Id><Id>LWD</Id></ToolPanels>
					<ToolCodes><Id>TEST1</Id><Id>BAT6</Id></ToolCodes>
					<ItemNums><Id>123456</Id><Id>124589</Id></ItemNums>
					<Statuses><OptionValue>18</OptionValue><OptionValue>AV</OptionValue></Statuses>
					<ViewType>Location</ViewType><IsDrillDown>1</IsDrillDown><Location><Location></Filters>'
*/

declare @sql varchar(max)
declare @alterSql varchar(max)
declare @viewType varchar(256)
declare @isDrillDown varchar(1)
declare @location varchar(max)

set @alterSql = 'Alter table #Result Add '

select @viewType = T.c.value('.', 'varchar(256)') 
from 
@xmlData.nodes('/Filters/ViewType') T(c)

select T.c.value('.', 'varchar(max)') as Region
into #Regions
from 
@xmlData.nodes('/Filters/Regions/Id') T(c)

select T.c.value('.', 'varchar(max)') as Country
into #Countries
from 
@xmlData.nodes('/Filters/Countries/Id') T(c)

select T.c.value('.', 'varchar(max)') as BranchPlant
into #BranchPlants
from 
@xmlData.nodes('/Filters/BranchPlants/Id') T(c)

select T.c.value('.', 'varchar(max)') as ToolPanel
into #ToolPanels
from 
@xmlData.nodes('/Filters/ToolPanels/Id') T(c)

select T.c.value('.', 'varchar(max)') as ToolCode
into #ToolCodes
from 
@xmlData.nodes('/Filters/ToolCodes/Id') T(c)

select T.c.value('.', 'varchar(max)') as ItemNum
into #ItemNums
from 
@xmlData.nodes('/Filters/ItemNums/Id') T(c)

select T.c.value('.', 'varchar(max)') as ToolPanelToolCode
into #ToolPanelsWithSelectedToolCodes
from 
@xmlData.nodes('/Filters/ToolPanelsWithSelectedToolCodes/Id') T(c)

select [Status] into #Statuses
from PartStatus with(nolock)
where Code in (
	select T.c.value('.', 'varchar(max)') as Code
	from 
	@xmlData.nodes('/Filters/Statuses/Id') T(c)
)

select @isDrillDown = T.c.value('.', 'varchar(1)') 
from 
@xmlData.nodes('/Filters/IsDrillDown') T(c)

select @location = T.c.value('.', 'varchar(max)') 
from 
@xmlData.nodes('/Filters/Location') T(c)

if (@isDrillDown = '1') 
begin
	if (@viewType = 'PartNum')
	begin
		if ((select count(*) from #ToolPanels) != 0 AND (select count(*) from #ToolCodes) = 0)
		begin 			
			insert into #ToolCodes 
			select distinct ToolCode from ItemNums with(nolock) where ToolPanel in (Select ToolPanel from #ToolPanels) AND IsAsset=1
			
			insert into #ToolPanelsWithSelectedToolCodes
			select distinct ToolPanel + '/' + ToolCode FROM ItemNums with(nolock) where ToolPanel in (Select ToolPanel from #ToolPanels) AND IsAsset=1
			
			delete from #ToolPanels	
		end
		else if ((select count(*) from #ToolPanels) != 0 AND (select count(*) from #ToolCodes) != 0 AND (select count(*) from #ItemNums) = 0)
		begin 			
			declare @toolPanel varchar(max)
			declare @toolCode varchar(max)
			
			set @toolPanel = (Select ToolPanel from #ToolPanels)
			set @toolCode = (Select ToolCode from #ToolCodes)
			
			insert into #ItemNums 
			select ItemNum from ItemNums with(nolock) where ToolPanel = @toolPanel and ToolCode = @toolCode and IsAsset = 1
			
			delete from #ToolPanels
			delete from #ToolCodes
		end
		else if ((select count(*) from #ItemNums) != 0)
		begin
			delete from #ToolPanels
			delete from #ToolCodes
			delete from #ItemNums
		end
	end
	else -- ViewType = Location
	begin
		if ((select count(*) from BranchPlants with(nolock) where Region = @location) != 0)
		begin 			
			insert into #Countries 
			select distinct Country from BranchPlants with(nolock) where Region = @location
			delete from #Regions	
		end
		else if ((select count(*) from BranchPlants with(nolock) where Country = @location) != 0)
		begin 			
			declare @region varchar(max)
			declare @country varchar(max)
			
			set @region = (Select Region from #Regions)
			set @country = (Select Country from #Countries)
			
			insert into #BranchPlants 
			select distinct BranchPlant from BranchPlants with(nolock)
			where Country = @location
			
			delete from #Regions
			delete from #Countries
		end
		else if ((select count(*) from BranchPlants with(nolock) where BranchPlant = @location) != 0)
		begin
			delete from #Regions
			delete from #Countries
			delete from #BranchPlants
		end
	end
end


CREATE TABLE #ResultFilter
( 
    fullTreePath varchar(max),
	displayname varchar(max)
) 

if ((select count(*) from #Regions) = 0 AND (select count(*) from #Countries) = 0 AND (select count(*) from #BranchPlants) = 0)
begin
	if @viewType = 'PartNum'
	insert into #ResultFilter 
	select '', r.RegionDesc From BranchPlants b with(nolock) INNER JOIN Regions r with(nolock) on b.Region = r.Region 
end
else
begin
	if @viewType = 'PartNum'
	insert into #ResultFilter
	select '', r.RegionDesc From BranchPlants b with(nolock) LEFT JOIN Regions r with(nolock) ON b.Region = r.Region 
	where b.Region in (select Region from #Regions)
	Union All
	select '', c.CountryDesc From BranchPlants b with(nolock) LEFT JOIN Countries c with(nolock) ON b.Country = c.Country
	where b.Country in (select Country from #Countries)
	Union All
	select '', b.CompanyName From BranchPlants b with(nolock)
	where b.BranchPlant in (select BranchPlant from #BranchPlants)
end

if ((select count(*) from #ToolPanels) = 0 AND (select count(*) from #ToolCodes) = 0 AND (select count(*) from #ItemNums) = 0)
	begin		
		if @viewType = 'Location' 
		insert into #ResultFilter
		select '' as FullTreePath, 'All Tool Panels' as DisplayName From ItemNums with(nolock)
	end
else
	begin
		if @viewType = 'Location'
		insert into #ResultFilter
		select i.ToolPanel, i.ToolPanel From Itemnums i with(nolock)
		where i.ToolPanel in (select ToolPanel from #ToolPanels)
		Union All 
		select i.ToolPanel + '/' + i.ToolCode, i.ToolCode From Itemnums i with(nolock) 
		where i.ToolCode in (select ToolCode from #ToolCodes) and ((i.ToolPanel + '/' + i.ToolCode) in (Select * from #ToolPanelsWithSelectedToolCodes))
		Union All 
		select i.ToolPanel + '/' + i.ToolCode + '/' + i.ItemNum, i.DescShort From Itemnums i with(nolock) 
		where i.ItemNum in (select ItemNum from #ItemNums)
	end

declare @statusValue varchar(max)
declare @selectValue varchar(max)
declare @sumValue varchar(max)
declare @pivotValue varchar(max)
declare @counter int

set @selectValue = ''
set @sumValue = ''
set @pivotValue = ''

CREATE TABLE #Result
( 
    rootid varchar(max), 
    fullTreePath varchar(max),
	rootdisplayname varchar(max)
) 

set @counter = 0

set @statusValue = null
select top 1 @statusValue = [Status] from #Statuses

while(@statusValue is not null)
begin 
	set @selectValue = @selectValue + ', sum(IsNull([' + @statusValue + '],0)) as [' + @statusValue + ']' 
	if @counter = 0
	begin
		set @sumValue = ',sum(IsNull([' + @statusValue +'],0)'
		set @pivotValue = '[' + @statusValue +']'
		set @alterSql = @alterSql + '[' + @statusValue +'] int'
	end
	else
	begin
		set @sumValue = @sumValue + ' + IsNull([' + @statusValue +'],0)'
		set @pivotValue = @pivotValue + ', [' + @statusValue +']'
		set @alterSql = @alterSql + ', [' + @statusValue +'] int'
	end

	delete from #Statuses where [Status] = @statusValue
	set @statusValue = null
	select top 1 @statusValue = [Status] from #Statuses
	set @counter = @counter + 1
end


set @sumValue = @sumValue + ') as Total '
set @alterSql = @alterSql + ', [Total] int'

declare @whereClauseForLocationViewType varchar(max)
declare @whereClauseForItemNumViewType varchar(max)

set @whereClauseForLocationViewType = ''
set @whereClauseForItemNumViewType = ''

if((select count(*) from #Regions) > 0 OR (select count(*) from #Countries) > 0 OR (select count(*) from #BranchPlants) > 0)
begin
	set @whereClauseForItemNumViewType = ' and ( '
	
	if((select count(*) from #Regions) > 0)
		set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' b.Region in (select * from #Regions)'
	else if((select count(*) from #Countries) > 0)
		set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' b.Country in (select * from #Countries)'
	else if((select count(*) from #BranchPlants) > 0)
		set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' b.BranchPlant in (select * from #BranchPlants)'
		
	if((select count(*) from #Regions) > 0 AND (select count(*) from #Countries) > 0)
		set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' OR b.Country in (select * from #Countries)'	
	if((select count(*) from #Regions) > 0 AND (select count(*) from #BranchPlants) > 0)
		set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' OR b.BranchPlant in (select * from #BranchPlants)'
	
	if((select count(*) from #Regions) = 0 AND (select count(*) from #Countries) > 0 AND (select count(*) from #BranchPlants) > 0)
		set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' OR b.BranchPlant in (select * from #BranchPlants)'		
	
	set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' )'
end

if((select count(*) from #ToolPanels) > 0 OR (select count(*) from #ToolCodes) > 0 OR (select count(*) from #ItemNums) > 0)
begin
	set @whereClauseForLocationViewType = ' and ( '
	
	if((select count(*) from #ToolPanels) > 0)
		set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' i.ToolPanel in (select * from #ToolPanels)'
	else if((select count(*) from #ToolCodes) > 0)
		set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' (i.ToolCode in (select * from #ToolCodes) and ((isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''')) in (Select * from #ToolPanelsWithSelectedToolCodes)))'
	else if((select count(*) from #ItemNums) > 0)
		set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' i.ItemNum in (select * from #ItemNums)'
		
	if((select count(*) from #ToolPanels) > 0 AND (select count(*) from #ToolCodes) > 0)
		set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' OR (i.ToolCode in (select * from #ToolCodes) and ((isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''')) in (Select * from #ToolPanelsWithSelectedToolCodes)))'	
	if((select count(*) from #ToolPanels) > 0 AND (select count(*) from #ItemNums) > 0)
		set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' OR i.ItemNum in (select * from #ItemNums)'
	
	if((select count(*) from #ToolPanels) = 0 AND (select count(*) from #ToolCodes) > 0 AND (select count(*) from #ItemNums) > 0)
		set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' OR i.ItemNum in (select * from #ItemNums)'		
	
	set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' )'
end

declare @query varchar(max)
set @query = ''

print @pivotValue
set @sql = 
'
insert into #Result
select
	rootid
	, fulltreepath
	, rootdisplayname'
+ @selectValue + 
+ @sumValue + 
' from ('

if((@viewType = 'Location' AND (select count(*) from #Regions) = 0 AND (select count(*) from #Countries) = 0 AND (select count(*) from #BranchPlants) = 0)
	OR (@viewType = 'Location' AND (select count(*) from #Regions) > 0) 
	OR (@viewType = 'PartNum' AND (select count(*) from #ToolPanels) = 0 AND (select count(*) from #ToolCodes) = 0 AND (select count(*) from #ItemNums) = 0)
	OR (@viewType = 'PartNum' AND (select count(*) from #ToolPanels) > 0))
begin
	set @query = ' select 1 as Qty, ps.Status AS OptionLabel'
	if @viewType = 'Location'
		set @query = @query + ',IsNull(b.Region, '''') as rootid ,IsNull(rg.RegionDesc, '''') as fulltreepath, IsNull(rg.RegionDesc, '''') as rootdisplayname'
	else
		set @query = @query + ',IsNull(i.ToolPanel, '''') as rootid , IsNull(i.ToolPanel, '''') as fulltreepath, IsNull(i.ToolPanel, '''') as rootdisplayname'
		
	set @query = @query + ' from FixedAssets f with(nolock)
	left join BranchPlants b with(nolock) on b.BranchPlant = f.BranchPlant
	left join PartStatus ps with(nolock) on ps.Code = f.EquipmentStatus '
	if @viewType = 'Location'
	begin
		 set @query = @query + ' left join Regions rg with(nolock) on b.Region = rg.Region					    	
							left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'
		
		 if((select count(*) from #Regions) > 0)
		 begin
			set @query = @query + ' and rg.Region in (select * from #Regions)'										
		 end	 
		 
		 if(@whereClauseForLocationViewType != '')
		 begin
			set @query = @query + @whereClauseForLocationViewType
		 end
	end						
	else
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'		 
		 
		 if((select count(*) from #ToolPanels) > 0)
		 begin
			set @query = @query + ' and i.ToolPanel in (select * from #ToolPanels) '					
		 end	
		 
		 if(@whereClauseForItemNumViewType != '')
		 begin
			set @query = @query + @whereClauseForItemNumViewType
		 end
	end
end

if(((select count(*) from #Countries) > 0 AND @viewType = 'Location') OR ((select count(*) from #ToolCodes) > 0 AND @viewType = 'PartNum'))
begin
	if(@query != '')
	begin	
		set @query = @query + ' Union All'
	end
	
	set @query = @query + ' select 1 as Qty, ps.Status OptionLabel'
	if @viewType = 'Location'
		set @query = @query + ',IsNull(b.Country, '''') as rootid, IsNull(c.CountryDesc, '''') as fulltreepath, IsNull(c.CountryDesc, '''') as rootdisplayname'
	else
		set @query = @query + ',IsNull(i.ToolCode, '''') as rootid , i.ToolPanel + ''/'' + IsNull(i.ToolCode, '''') as fulltreepath, IsNull(i.ToolCode, '''') as rootdisplayname'
		
	set @query = @query + ' from FixedAssets f with(nolock)
	left join BranchPlants b with(nolock) on b.BranchPlant = f.BranchPlant
	left join PartStatus ps with(nolock) on ps.Code = f.EquipmentStatus '

	if @viewType = 'Location'
	begin
		set @query = @query + ' left join Countries c with(nolock) on c.Country = b.Country
							left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'	
							
		 if((select count(*) from #Countries) > 0)
		 begin
			set @query = @query + ' and c.Country in (select * from #Countries)'					
		 end					
		
		 if(@whereClauseForLocationViewType != '')
		 begin
			set @query = @query + @whereClauseForLocationViewType
		 end							
	end						
	else
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'	
		 
		 if((select count(*) from #ToolCodes) > 0)
		 begin
			set @query = @query + ' and i.ToolCode in (select * from #ToolCodes)'	
			set @query = @query + ' and ((isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''')) in (Select * from #ToolPanelsWithSelectedToolCodes)) '												
		 end	
		 
		 if(@whereClauseForItemNumViewType != '')
		 begin
			set @query = @query + @whereClauseForItemNumViewType
		 end				
	end		
end			
if(((select count(*) from #BranchPlants) > 0 AND @viewType = 'Location') OR ((select count(*) from #ItemNums) > 0 AND @viewType = 'PartNum'))
begin	
	
	if(@query != '')
	begin	
		set @query = @query + ' Union All'
	end

	set @query = @query + ' select 1 as Qty, ps.Status AS OptionLabel'
	if @viewType = 'Location'
		set @query = @query + ',IsNull(b.BranchPlant, '''') as rootid, IsNull(b.CompanyName, '''') as fulltreepath, IsNull(b.CompanyName, '''') as rootdisplayname'
	else
		set @query = @query + ',IsNull(f.InventoryItemNum, '''') as rootid , i.ToolPanel + ''/'' + i.ToolCode + ''/'' + IsNull(i.DescShort, '''') as  fulltreepath, IsNull(i.DescShort, '''') as rootdisplayname'
		
	set @query = @query + ' from FixedAssets f with(nolock)
	left join BranchPlants b with(nolock) on b.BranchPlant = f.BranchPlant
	left join PartStatus ps with(nolock) on ps.Code = f.EquipmentStatus '

	if @viewType = 'Location'
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'		
							
		 if((select count(*) from #BranchPlants) > 0)
		 begin
			set @query = @query + ' and b.BranchPlant in (select * from #BranchPlants)'					
		 end				
		
		 if(@whereClauseForLocationViewType != '')
		 begin
			set @query = @query + @whereClauseForLocationViewType
		 end
	end						
	else
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'
		
		 if((select count(*) from #ItemNums) > 0)
		 begin
			set @query = @query + ' and f.InventoryItemNum in (select * from #ItemNums)'					
		 end	
		 
		 if(@whereClauseForItemNumViewType != '')
		 begin
			set @query = @query + @whereClauseForItemNumViewType
		 end
	end
end
set @sql = @sql + @query
set @sql= @sql + ') b
PIVOT( SUM(Qty) FOR OptionLabel IN( ' + @pivotValue + ' )
 ) as p2
group by rootid, rootdisplayname, fulltreepath'

exec (@alterSql)
print @sql
exec (@sql)

select * from #Result
where rootdisplayname IS NOT NULL
order by rootdisplayname

select distinct * from #ResultFilter

drop table #Regions 
drop table #Countries 
drop table #BranchPlants 
drop table #ToolPanels 
drop table #ToolCodes
drop table #ItemNums
drop table #Statuses
drop table #Result
drop table #ResultFilter
drop table #ToolPanelsWithSelectedToolCodes









GO
/****** Object:  StoredProcedure [dbo].[usp_RunAssetStatusTrendReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[usp_RunAssetStatusTrendReport]
	@xmlData xml
AS
/*
declare @xmlData xml

set @xmlData = '<Filters>
					<Regions><Id>LAO</Id><Id>NAM</Id></Regions>
					<Countries><Id>DZ</Id><Id>US</Id><Id>AR</Id></Countries>
					<BranchPlants><Id>PERTH</Id><Id>HASSIMESSA</Id></BranchPlants>					
					<ToolPanels><Id>EM</Id><Id>LWD</Id></ToolPanels>
					<ToolCodes><Id>TEST1</Id><Id>BAT6</Id></ToolCodes>
					<ItemNums><Id>123456</Id><Id>124589</Id></ItemNums>
					<Statuses><OptionValue>18</OptionValue><OptionValue>AV</OptionValue></Statuses>
					<ViewType>Location</ViewType><FromDate>01/24/2013</FromDate><ToDate>02/24/2013</ToDate></Filters>'
*/

declare @sql varchar(max)
declare @alterSql varchar(max)
declare @viewType varchar(256)
declare @fromDate varchar(256)
declare @toDate varchar(256)
declare @qry varchar(max)

set @alterSql = 'Alter table #Result Add '

select @fromDate = T.c.value('.', 'varchar(256)') 
from 
@xmlData.nodes('/Filters/FromDate') T(c)

select @toDate = T.c.value('.', 'varchar(256)') 
from 
@xmlData.nodes('/Filters/ToDate') T(c)

select @viewType = T.c.value('.', 'varchar(256)') 
from 
@xmlData.nodes('/Filters/ViewType') T(c)

select T.c.value('.', 'varchar(max)') as Region
into #Regions
from 
@xmlData.nodes('/Filters/Regions/Id') T(c)

select T.c.value('.', 'varchar(max)') as Country
into #Countries
from 
@xmlData.nodes('/Filters/Countries/Id') T(c)

select T.c.value('.', 'varchar(max)') as BranchPlant
into #BranchPlants
from 
@xmlData.nodes('/Filters/BranchPlants/Id') T(c)

select T.c.value('.', 'varchar(max)') as ToolPanel
into #ToolPanels
from 
@xmlData.nodes('/Filters/ToolPanels/Id') T(c)

select T.c.value('.', 'varchar(max)') as ToolCode
into #ToolCodes
from 
@xmlData.nodes('/Filters/ToolCodes/Id') T(c)

select T.c.value('.', 'varchar(max)') as ItemNum
into #ItemNums
from 
@xmlData.nodes('/Filters/ItemNums/Id') T(c)

select T.c.value('.', 'varchar(max)') as ToolPanelToolCode
into #ToolPanelsWithSelectedToolCodes
from 
@xmlData.nodes('/Filters/ToolPanelsWithSelectedToolCodes/Id') T(c)

create table #Statuses(
	OptionValue varchar(2) null,
	OptionLabel varchar(50) null
)

insert into #Statuses
select Code, [Status]
from PartStatus with(nolock)
where Code in (
	select T.c.value('.', 'varchar(max)') as Code
	from 
	@xmlData.nodes('/Filters/Statuses/Id') T(c)
)


CREATE TABLE #ResultFilter
( 
    fullTreePath varchar(max),
	displayname varchar(max)
) 

if ((select count(*) from #Regions) = 0 AND (select count(*) from #Countries) = 0 AND (select count(*) from #BranchPlants) = 0)
begin
	insert into #ResultFilter 
	select distinct '', r.RegionDesc From BranchPlants b with(nolock) INNER JOIN Regions r with(nolock) on b.Region = r.Region 
end
else
begin				
	insert into #ResultFilter
	select distinct '', r.RegionDesc From Regions r where r.Region in (select Region from #Regions)
	Union All
	select distinct '', c.CountryDesc From Countries c where c.Country in (select Country from #Countries)
	Union All
	select distinct '', b.CompanyName From BranchPlants b where b.BranchPlant in (select BranchPlant from #BranchPlants)
end

if ((select count(*) from #ToolPanels) = 0 AND (select count(*) from #ToolCodes) = 0 AND (select count(*) from #ItemNums) = 0)
	begin		
		if @viewType = 'Location' 
		insert into #ResultFilter
		select distinct '' as FullTreePath, 'All Tool Panels' as DisplayName From ItemNums with(nolock)
	end
else 
	begin
		if @viewType = 'Location'
		insert into #ResultFilter
		select distinct i.ToolPanel, i.ToolPanel From Itemnums i with(nolock)
		where i.ToolPanel in (select ToolPanel from #ToolPanels)
		Union All 
		select distinct i.ToolPanel + '/' + i.ToolCode, i.ToolCode From Itemnums i with(nolock) 
		where i.ToolCode in (select ToolCode from #ToolCodes) and ((i.ToolPanel + '/' + i.ToolCode) in (Select * from #ToolPanelsWithSelectedToolCodes))
		Union All 
		select distinct i.ToolPanel + '/' + i.ToolCode + '/' + i.ItemNum, i.DescShort From Itemnums i with(nolock) 
		where i.ItemNum in (select ItemNum from #ItemNums)
	end	

declare @value varchar(4000)
declare @objectId varchar(max)
declare @recordType varchar(max)
declare @selectValue varchar(max)
declare @sumValue varchar(max)
declare @pivotValue varchar(max)
declare @fullTreePath varchar(max)
declare @counter int

set @selectValue = ''
set @pivotValue = ''

CREATE TABLE #PivotColumns
(
	ColumnName varchar(4000)
)

CREATE TABLE #Result
( 
    inventorydate datetime
) 

CREATE TABLE #PivotColumnsFilter
(
	RecordType varchar(10),
	Id varchar(max),
	DisplayName varchar(max),
	FullTreePath varchar(max)
)

set @counter = 0

set @value = null
set @objectId = null
set @fullTreePath = null
set @recordType = null

declare @sqlQuery varchar(max)
set @sqlQuery = ''

if @viewType = 'PartNum'
begin	
	if ((select count(*) from #ToolPanels) = 0 AND (select count(*) from #ToolCodes) = 0 AND (select count(*) from #ItemNums) = 0)
	begin
		set @sqlQuery = 'insert into #PivotColumnsFilter
		select distinct ''TP'' as RecordType, isnull(i.ToolPanel,'''') as Id, isnull(i.ToolPanel,'''') as DisplayName, isnull(i.ToolPanel,'''') as FullTreePath From Itemnums i with(nolock)'
	end
	else
	begin
		set @sqlQuery = 'insert into #PivotColumnsFilter 	
		select distinct ''TP'' as RecordType, isnull(i.ToolPanel,'''') as Id, isnull(i.ToolPanel,'''') as DisplayName, isnull(i.ToolPanel,'''') as FullTreePath From Itemnums i with(nolock)
		where i.ToolPanel in (select ToolPanel from #ToolPanels)
		Union All 
		select distinct ''TC'' as RecordType, isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''') as Id, isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''') as DisplayName, isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''') as FullTreePath From Itemnums i with(nolock) 
		where i.ToolCode in (select ToolCode from #ToolCodes) and ((isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''')) in (Select * from #ToolPanelsWithSelectedToolCodes))
		Union All 		
		select distinct ''IN'' as RecordType, isnull(i.ItemNum,'''') as Id, isnull(i.DescShort,'''') as DisplayName, isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''') + ''/'' + isnull(i.ItemNum,'''') as FullTreePath 
		From Itemnums i with(nolock) 
		where i.ItemNum in (select ItemNum from #ItemNums)'
	end
end	
else if @viewType = 'Location'
begin		
	if ((select count(*) from #Regions) = 0 AND (select count(*) from #Countries) = 0 AND (select count(*) from #BranchPlants) = 0)
	begin
		set @sqlQuery = 'insert into #PivotColumnsFilter
		select distinct ''RG'' as RecordType, isnull(r.Region,'''') as Id, isnull(r.RegionDesc,'''') as DisplayName, isnull(r.Region,'''') + ''|'' + isnull(r.RegionDesc,'''') as FullTreePath From Regions r with(nolock)'
	end
	else
	begin
		set @sqlQuery = 'insert into #PivotColumnsFilter 	
		select distinct ''RG'' as RecordType, isnull(r.Region,'''') as Id, isnull(r.RegionDesc,'''') as DisplayName, isnull(r.Region,'''') + ''|'' + isnull(r.RegionDesc,'''') as FullTreePath From Regions r with(nolock)
		where r.Region in (select Region from #Regions)
		Union All 
		select distinct ''CN'' as RecordType, isnull(c.Country,'''') as Id, isnull(c.CountryDesc,'''') as DisplayName, isnull(c.RegionCode,'''') + ''|'' + isnull(r.RegionDesc,'''') + ''/'' + isnull(c.Country,'''') as FullTreePath From Countries c with(nolock) 
		left outer join Regions r with(nolock) on r.Region = c.RegionCode
		where c.Country in (select Country from #Countries)
		Union All 		
		select distinct ''BP'' as RecordType, isnull(b.BranchPlant,'''') as Id, isnull(b.CompanyName,'''') as DisplayName, isnull(b.Region,'''') + ''|'' + isnull(r.RegionDesc,'''') + ''/'' + isnull(b.Country,'''') + ''|'' + isnull(c.CountryDesc,'''') + ''/'' + isnull(b.BranchPlant,'''') as FullTreePath 
		From BranchPlants b with(nolock) 
		left outer join Regions r with(nolock) on r.Region = b.Region
		left outer join Countries c with(nolock) on c.Country = b.Country
		where b.BranchPlant in (select BranchPlant from #BranchPlants)'
	end
end
else	-- @viewType = 'Status'
begin
	set @sqlQuery = 'insert into #PivotColumnsFilter
		select distinct ''ST'' as RecordType, isnull(ps.Code,'''') as Id, isnull(ps.Status,'''') as DisplayName, isnull(ps.Status,'''') as FullTreePath 
		From PartStatus ps with(nolock)
		where ps.Code in (select OptionValue from #Statuses)'
end

print @sqlQuery
exec (@sqlQuery)

select top 1 @objectId = Id, @value = DisplayName, @recordType = RecordType, @fullTreePath = FullTreePath from #PivotColumnsFilter 

while(@objectId is not null)
begin 		
	Set @value = @value + '~' + @fullTreePath	
	
	insert into #PivotColumns values (@value)
	
	set @selectValue = @selectValue + ', IsNull([' + @value + '],0) as [' + @value + ']' 
	
	if @counter = 0
	begin
		set @pivotValue = '[' + @value +']'
		set @alterSql = @alterSql + '[' + @value +'] int'
	end
	else
	begin
		set @pivotValue = @pivotValue + ', [' + @value +']'
		set @alterSql = @alterSql + ', [' + @value +'] int'
	end

	delete from #PivotColumnsFilter where Id = @objectId and RecordType = @recordType
	set @objectId = null
	select top 1 @objectId = Id, @value = DisplayName, @recordType = RecordType, @fullTreePath = FullTreePath  from #PivotColumnsFilter
	set @counter = @counter + 1
end

Print @selectValue
Print @pivotValue
print @alterSql

declare @whereClauseForLocationViewType varchar(max)
declare @whereClauseForItemNumViewType varchar(max)
declare @whereClauseForStatusViewType varchar(max)
declare @whereClauseLocations varchar(max)
declare @whereClauseItemNums varchar(max)
declare @statusFilter varchar(max)
declare @dateFilter varchar(100)

set @whereClauseLocations = ''
set @whereClauseItemNums = ''
			
set @dateFilter = ' and f.InventoryDate >= ''' + @fromDate + ''' and f.InventoryDate <= ''' + @toDate + ''''
set @statusFilter = ' and f.EquipmentStatus in (select OptionValue from #Statuses)'

set @whereClauseForItemNumViewType = @dateFilter + @statusFilter
set @whereClauseForLocationViewType = @dateFilter + @statusFilter
set @whereClauseForStatusViewType = @dateFilter + @statusFilter 

if((select count(*) from #Regions) > 0 OR (select count(*) from #Countries) > 0 OR (select count(*) from #BranchPlants) > 0)
begin
	set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' and ( '	
	
	if((select count(*) from #Regions) > 0)
		set @whereClauseLocations = @whereClauseLocations + ' b.Region in (select * from #Regions)'
	else if((select count(*) from #Countries) > 0)
		set @whereClauseLocations = @whereClauseLocations + ' b.Country in (select * from #Countries)'
	else if((select count(*) from #BranchPlants) > 0)
		set @whereClauseLocations = @whereClauseLocations + ' b.BranchPlant in (select * from #BranchPlants)'
		
	if((select count(*) from #Regions) > 0 AND (select count(*) from #Countries) > 0)
		set @whereClauseLocations = @whereClauseLocations + ' OR b.Country in (select * from #Countries)'	
	if((select count(*) from #Regions) > 0 AND (select count(*) from #BranchPlants) > 0)
		set @whereClauseLocations = @whereClauseLocations + ' OR b.BranchPlant in (select * from #BranchPlants)'
	
	if((select count(*) from #Regions) = 0 AND (select count(*) from #Countries) > 0 AND (select count(*) from #BranchPlants) > 0)
		set @whereClauseLocations = @whereClauseLocations + ' OR b.BranchPlant in (select * from #BranchPlants)'		

	set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + @whereClauseLocations + ' )' 
end

if((select count(*) from #ToolPanels) > 0 OR (select count(*) from #ToolCodes) > 0 OR (select count(*) from #ItemNums) > 0)
begin
	set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' AND ( '
	
	if((select count(*) from #ToolPanels) > 0)
		set @whereClauseItemNums = @whereClauseItemNums + ' i.ToolPanel in (select * from #ToolPanels)'
	else if((select count(*) from #ToolCodes) > 0)
		set @whereClauseItemNums = @whereClauseItemNums + ' (i.ToolCode in (select * from #ToolCodes) and ((isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''')) in (Select * from #ToolPanelsWithSelectedToolCodes)))'
	else if((select count(*) from #ItemNums) > 0)
		set @whereClauseItemNums = @whereClauseItemNums + ' i.ItemNum in (select * from #ItemNums)'
		
	if((select count(*) from #ToolPanels) > 0 AND (select count(*) from #ToolCodes) > 0)
		set @whereClauseItemNums = @whereClauseItemNums + ' OR (i.ToolCode in (select * from #ToolCodes) and ((isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''')) in (Select * from #ToolPanelsWithSelectedToolCodes)))'	
	if((select count(*) from #ToolPanels) > 0 AND (select count(*) from #ItemNums) > 0)
		set @whereClauseItemNums = @whereClauseItemNums + ' OR i.ItemNum in (select * from #ItemNums)'
	
	if((select count(*) from #ToolPanels) = 0 AND (select count(*) from #ToolCodes) > 0 AND (select count(*) from #ItemNums) > 0)
		set @whereClauseItemNums = @whereClauseItemNums + ' OR i.ItemNum in (select * from #ItemNums)'
	
	set @whereClauseForLocationViewType = @whereClauseForLocationViewType + @whereClauseItemNums + ' )' 
end

if(@viewType = 'Status')
begin
	
	if(@whereClauseLocations != '' AND @whereClauseItemNums != '') 
	begin
		set @whereClauseForStatusViewType = @whereClauseForStatusViewType + ' and ( ' + @whereClauseLocations + ') AND (' + @whereClauseItemNums + ')'		
	end
	else if (@whereClauseLocations != '')
		set @whereClauseForStatusViewType = @whereClauseForStatusViewType + ' and ( ' + @whereClauseLocations + ')'
	else if (@whereClauseItemNums != '')
		set @whereClauseForStatusViewType = @whereClauseForStatusViewType + ' and ( ' + @whereClauseItemNums + ')'
end

declare @query varchar(max)
set @query = ''

print 'buiding query'
set @sql = 
'
insert into #Result
select InventoryDate ' + @selectValue + '
		from ( '

if((@viewType = 'Location' AND (select count(*) from #Regions) = 0 AND (select count(*) from #Countries) = 0 AND (select count(*) from #BranchPlants) = 0)
	OR (@viewType = 'Location' AND (select count(*) from #Regions) > 0) 
	OR (@viewType = 'PartNum' AND (select count(*) from #ToolPanels) = 0 AND (select count(*) from #ToolCodes) = 0 AND (select count(*) from #ItemNums) = 0)
	OR (@viewType = 'PartNum' AND (select count(*) from #ToolPanels) > 0)
	OR @viewType = 'Status')
begin
	set @query = ' select f.InventoryDate, 1 as Qty, '
	if @viewType = 'Location'
		set @query = @query + 'isnull(rg.RegionDesc,'''') + ''~'' + isnull(b.Region,'''') + ''|'' + isnull(rg.RegionDesc,'''') '		
	else if @viewType = 'PartNum'
		set @query = @query + ' isnull(i.ToolPanel,'''') + ''~'' + isnull(i.ToolPanel,'''') '		
	else
		set @query = @query + ' ps.Status + ''~'' + ps.Status '
			
	set @query = @query + ' as PivotField from FixedAssetSnapshots f with(nolock)
	left join BranchPlants b with(nolock) on b.BranchPlant = f.BranchPlant
	left join PartStatus ps with(nolock) on ps.Code = f.EquipmentStatus '
	if @viewType = 'Location'
	begin
		 set @query = @query + ' left join Regions rg with(nolock) on b.Region = rg.Region					    	
							left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'
		
		 if((select count(*) from #Regions) > 0)
		 begin
			set @query = @query + ' and rg.Region in (select * from #Regions)'										
		 end	 
		 
		 if(@whereClauseForLocationViewType != '')
		 begin
			set @query = @query + @whereClauseForLocationViewType
		 end
	end						
	else if @viewType = 'PartNum'
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'		 
		 
		 if((select count(*) from #ToolPanels) > 0)
		 begin
			set @query = @query + ' and i.ToolPanel in (select * from #ToolPanels) '	
		 end	
		 
		 if(@whereClauseForItemNumViewType != '')
		 begin
			set @query = @query + @whereClauseForItemNumViewType
		 end
	end
	else
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1 '
		 
		 if(@whereClauseForStatusViewType != '')
		 begin
			set @query = @query + @whereClauseForStatusViewType 
		 end
	end
end

if(((select count(*) from #Countries) > 0 AND @viewType = 'Location') OR ((select count(*) from #ToolCodes) > 0 AND @viewType = 'PartNum'))
begin
	if(@query != '')
	begin	
		set @query = @query + ' Union All'
	end
	
	set @query = @query + ' select f.InventoryDate, 1 as Qty, '
	if @viewType = 'Location'
		set @query = @query + ' isnull(c.CountryDesc,'''') + ''~'' + IsNull(b.Region,'''') + ''|'' + IsNull(rg.RegionDesc,'''') + ''/'' + IsNull(b.Country,'''') + ''|'' + IsNull(c.CountryDesc,'''') '
	else if @viewType = 'PartNum'
		set @query = @query + ' isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''') + ''~'' + IsNull(i.ToolPanel,'''') + ''/'' + IsNull(i.ToolCode, '''') '
		
	set @query = @query + ' as PivotField from FixedAssetSnapshots f with(nolock)
	left join BranchPlants b with(nolock) on b.BranchPlant = f.BranchPlant
	left join PartStatus ps with(nolock) on ps.Code = f.EquipmentStatus '

	if @viewType = 'Location'
	begin
		set @query = @query + ' left join Countries c with(nolock) on c.Country = b.Country
								left join Regions rg with(nolock) on rg.Region = b.Region
							left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'	
							
		 if((select count(*) from #Countries) > 0)
		 begin
			set @query = @query + ' and c.Country in (select * from #Countries)'					
		 end					
		
		 if(@whereClauseForLocationViewType != '')
		 begin
			set @query = @query + @whereClauseForLocationViewType
		 end							
	end						
	else if @viewType = 'PartNum'
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'	
		 
		 if((select count(*) from #ToolCodes) > 0)
		 begin
			set @query = @query + ' and i.ToolCode in (select * from #ToolCodes)'	
			set @query = @query + ' and ((isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''')) in (Select * from #ToolPanelsWithSelectedToolCodes)) '								
		 end	
		 
		 if(@whereClauseForItemNumViewType != '')
		 begin
			set @query = @query + @whereClauseForItemNumViewType
		 end				
	end		
end	
		
if(((select count(*) from #BranchPlants) > 0 AND @viewType = 'Location') OR ((select count(*) from #ItemNums) > 0 AND @viewType = 'PartNum'))
begin	
	
	if(@query != '')
	begin	
		set @query = @query + ' Union All'
	end

	set @query = @query + ' select f.InventoryDate, 1 as Qty, '
	if @viewType = 'Location'
		set @query = @query + ' isnull(b.CompanyName, '''') + ''~'' + IsNull(b.Region, '''') + ''|'' + IsNull(rg.RegionDesc, '''') + ''/'' + IsNull(b.Country, '''') + ''|'' + IsNull(c.CountryDesc, '''') + ''/'' + isnull(b.BranchPlant, '''')'
	else if @viewType = 'PartNum'
		set @query = @query + ' isnull(i.DescShort, '''') + ''~'' + IsNull(i.ToolPanel, '''') + ''/'' + IsNull(i.ToolCode, '''') + ''/''  + isnull(i.ItemNum, '''') '
		
	set @query = @query + ' as PivotField from FixedAssetSnapshots f with(nolock)
	left join BranchPlants b with(nolock) on b.BranchPlant = f.BranchPlant
	left join PartStatus ps with(nolock) on ps.Code = f.EquipmentStatus '

	if @viewType = 'Location'
	begin
		 set @query = @query + ' left join Countries c with(nolock) on c.Country = b.Country
								 left join Regions rg with(nolock) on rg.Region = b.Region
									left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'		
							
		 if((select count(*) from #BranchPlants) > 0)
		 begin
			set @query = @query + ' and b.BranchPlant in (select * from #BranchPlants)'					
		 end				
		
		 if(@whereClauseForLocationViewType != '')
		 begin
			set @query = @query + @whereClauseForLocationViewType
		 end
	end						
	else if @viewType = 'PartNum'
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'
		
		 if((select count(*) from #ItemNums) > 0)
		 begin
			set @query = @query + ' and f.InventoryItemNum in (select * from #ItemNums)'					
		 end	
		 
		 if(@whereClauseForItemNumViewType != '')
		 begin
			set @query = @query + @whereClauseForItemNumViewType
		 end
	end
end
set @sql = @sql + @query

set @sql = @sql + '
		) p PIVOT ( SUM (Qty) FOR [PivotField] IN
			( ' + @pivotValue + ' )
		) AS pvt Order By InventoryDate
'

exec (@alterSql)
print @sql
exec (@sql)

if ((select count(ColumnName) from #PivotColumns where ColumnName = '~') > 0)
begin
	set @qry = 'if ((select sum([~]) from #Result) = 0) 
				begin 
					alter table #Result drop column [~] 
					delete from #PivotColumns where ColumnName = ''~'' 
				end'  
	exec (@qry)
end

Select * from #Statuses
select * from #Result 
select * from #ResultFilter
select * from #PivotColumns 
order by ColumnName

drop table #Regions 
drop table #Countries 
drop table #BranchPlants 
drop table #ToolPanels 
drop table #ToolCodes
drop table #ItemNums
drop table #Statuses
drop table #PivotColumnsFilter
drop table #Result
drop table #ResultFilter
drop table #ToolPanelsWithSelectedToolCodes




GO
/****** Object:  StoredProcedure [dbo].[usp_RunAssetUtilizationViewReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_RunAssetUtilizationViewReport]
	@xmlData xml
AS

DECLARE @inventoryDate AS DATE
DECLARE @sql AS VARCHAR(MAX)
DECLARE @innerSQL AS VARCHAR(MAX)


SELECT @inventoryDate = T.c.value('.', 'DATE') FROM @xmlData.nodes('/Filters/InventoryDate') T(c)

SELECT CAST(DATEPART(WK, CONVERT(DATE, @inventoryDate, 101)) AS VARCHAR) + ' ' + CAST(YEAR(@inventoryDate) as VARCHAR) as ReportingWeek

SELECT * FROM Regions WHERE Active = 1 order by RegionDesc

SELECT 'ALL' as GroupName, 0 as SortOrder
UNION ALL
SELECT 
	DISTINCT OptionLabel as GroupName, 
	ISNULL((SELECT TOP 1 so1.SortOrder 
			FROM SelectOptions so1 
			WHERE so1.OptionLabel = so.OptionLabel 
			AND so1.SortOrder IS NOT NULL  
			AND so1.SelectName = 'AssetUtilizationGroup'),99999) 
	AS SortOrder
FROM SelectOptions so
WHERE SelectName = 'AssetUtilizationGroup' 
ORDER By SortOrder


SET @innerSQL = '
SELECT 
  so.OptionLabel as GroupName
  , CONVERT(DATE, fas.InventoryDate, 101) as InventoryDate
  , rg.RegionDesc
  ,(SELECT COUNT(DISTINCT CONVERT(DATE, c.InventoryDate, 101)) FROM FixedAssetSnapshots c
	  WHERE YEAR(CONVERT(DATE, c.InventoryDate, 101)) = YEAR(CONVERT(DATE, fas.InventoryDate, 101)) 
	  AND MONTH(CONVERT(DATE, c.InventoryDate, 101)) = MONTH(CONVERT(DATE, fas.InventoryDate, 101)) 
	  AND DATEPART(WK, CONVERT(DATE, c.InventoryDate, 101)) = DATEPART(WK, CONVERT(DATE, fas.InventoryDate, 101))
	  ) AS NumInWeek      
  , COUNT(*) AS ToolCount
  , SUM( CASE WHEN fas.EquipmentStatus = ''WK'' THEN 1 ELSE 0 END) as WorkingTools
  , SUM( CASE WHEN fas.EquipmentStatus = ''UR'' THEN 1 ELSE 0 END) as UnderRepairTools
FROM FixedAssetSnapshots (NOLOCK) fas
LEFT JOIN ItemNums (NOLOCK) ri ON ri.ItemNum = fas.RNItemNum
INNER JOIN SelectOptions (NOLOCK) so ON so.OptionValue = ri.ToolPanel AND SelectName = ''AssetUtilizationGroup''
LEFT JOIN PartStatus (NOLOCK) ps ON ps.Code = fas.EquipmentStatus
LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = fas.BranchPlant
LEFT JOIN Countries (NOLOCK) c ON c.Country = bp.Country
LEFT JOIN Regions (NOLOCK) rg ON rg.Region = bp.Region
Where ps.IsTrend = 1 AND YEAR(CONVERT(DATE, fas.InventoryDate, 101)) = ''' + CAST(YEAR(CONVERT(DATE, @inventoryDate, 101)) AS NVARCHAR) +
''' AND MONTH(CONVERT(DATE, fas.InventoryDate, 101)) = ''' + CAST(MONTH(CONVERT(DATE, @inventoryDate, 101))  AS NVARCHAR) +
''' AND DATEPART(WK, CONVERT(DATE, fas.InventoryDate, 101)) = ''' + CAST(DATEPART(WK, CONVERT(DATE, @inventoryDate, 101)) AS NVARCHAR) +
''' GROUP BY so.OptionLabel,rg.RegionDesc, CONVERT(DATE, fas.InventoryDate, 101) '

SET @sql = '
	SELECT 
	  RegionDesc, GroupName
	  , SUM(a.ToolCount) AS TotalToolCount
	  , SUM(a.ToolCount)/ NumInWeek AS ToolCount
	  , SUM(a.WorkingTools)/ NumInWeek as WorkingToolCount
	  , SUM(a.UnderRepairTools)/ NumInWeek as UnderRepairToolCount
	FROM (' + @innerSQL + ') a
	group by RegionDesc, GroupName, NumInWeek '
	
execute(@sql)

GO
/****** Object:  StoredProcedure [dbo].[usp_RunCapitalIdleReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_RunCapitalIdleReport] 
	@xmlData xml
AS

--for chart1
SELECT ISNULL(r.RegionDesc, ' ') AS RegionMap, 
		COUNT(fa.FixedAssetId) AS AssetCount, SUM(ISNULL(fa.Cost, 0)) AS TotalAcquisitionValue 
INTO #Chart1Data
FROM FixedAssets (NOLOCK) fa
LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant=fa.BranchPlant
LEFT JOIN Regions (NOLOCK) r ON r.Region=bp.Region
LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
WHERE fa.EquipmentStatus = 'AS' AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1
AND DATEDIFF(DAY, fa.LastStatusChangeDate, GETDATE()) > 90
GROUP BY r.RegionDesc

SELECT * FROM #Chart1Data

--for chart 4
SELECT ISNULL(i.ToolPanel, ' ') AS ToolPanel, 
		COUNT(fa.FixedAssetId) AS AssetCount, SUM(ISNULL(fa.Cost, 0)) AS TotalAcquisitionValue
INTO #Chart4Data
FROM FixedAssets (NOLOCK) fa
LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
WHERE fa.EquipmentStatus = 'AS' AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1
AND DATEDIFF(DAY, fa.LastStatusChangeDate, GETDATE()) > 90
GROUP BY i.ToolPanel

SELECT * FROM #Chart4Data

CREATE TABLE #Chart2Data
( 
    RegionMap VARCHAR(8000),
	AcquisitionValue MONEY,
	Prev1AcquisitionValue MONEY,
	Prev2AcquisitionValue MONEY,
	Prev3AcquisitionValue MONEY,
	CurrentCount INT,
	Prev1Count INT,
	Prev2Count INT,
	Prev3Count INT
) 

INSERT INTO #Chart2Data(RegionMap, AcquisitionValue, CurrentCount)
SELECT RegionMap, TotalAcquisitionValue, AssetCount FROM #Chart1Data

CREATE TABLE #Chart3Data
( 
    ToolPanel VARCHAR(40),
	CurrentCount INT,
	Prev1Count INT,
	Prev2Count INT,
	Prev3Count INT
)

INSERT INTO #Chart3Data (ToolPanel, CurrentCount)
SELECT ToolPanel, AssetCount FROM #Chart4Data

DECLARE @PrevDate1 AS DATETIME
DECLARE @PrevDate2 AS DATETIME
DECLARE @PrevDate3 AS DATETIME

SELECT @PrevDate1 =  MAX(fas.InventoryDate) FROM FixedAssetSnapshots fas WHERE MONTH(fas.InventoryDate) = MONTH(DATEADD(m, -3, GETDATE())) AND YEAR(fas.InventoryDate) = YEAR(DATEADD(m, -3, GETDATE())) 
SELECT @PrevDate2 =  MAX(fas.InventoryDate) FROM FixedAssetSnapshots fas WHERE MONTH(fas.InventoryDate) = MONTH(DATEADD(m, -2, GETDATE())) AND YEAR(fas.InventoryDate) = YEAR(DATEADD(m, -2, GETDATE())) 
SELECT @PrevDate3 =  MAX(fas.InventoryDate) FROM FixedAssetSnapshots fas WHERE MONTH(fas.InventoryDate) = MONTH(DATEADD(m, -1, GETDATE())) AND YEAR(fas.InventoryDate) = YEAR(DATEADD(m, -1, GETDATE())) 

IF(@PrevDate1 IS NOT NULL)
BEGIN
	INSERT INTO #Chart2Data (RegionMap, Prev1AcquisitionValue, Prev1Count)
	SELECT r.RegionDesc AS RegionMap,
			SUM(ISNULL(fa.Cost, 0)) AS TotalAcquisitionValue, COUNT(*)
	FROM FixedAssetSnapshots (NOLOCK) fas
	LEFT JOIN FixedAssets (NOLOCK) fa ON fa.FixedAssetId = fas.FixedAssetId
	LEFT JOIN BranchPlants (NoLoCK) bp ON bp.BranchPlant = fas.BranchPlant
	LEFT JOIN Regions (NOLOCK) r ON r.Region = bp.Region
	LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = fas.InventoryItemNum
	LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = fas.RNItemNum
	WHERE fa.EquipmentStatus = 'AS' AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1
	AND DATEDIFF(DAY, fas.LastStatusChangeDate, fas.InventoryDate) > 90
	AND fas.InventoryDate = @PrevDate1
	GROUP BY r.RegionDesc

	INSERT INTO #Chart3Data (ToolPanel, Prev1Count)
	SELECT i.ToolPanel, COUNT(fas.SerialNum) AS AssetCount
	FROM FixedAssetSnapshots (NOLOCK) fas
	LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum=fas.InventoryItemNum
	LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = fas.RNItemNum
	WHERE fas.EquipmentStatus = 'AS' AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1
	AND DATEDIFF(DAY, fas.LastStatusChangeDate, fas.InventoryDate) > 90
	AND fas.InventoryDate=@PrevDate1
	GROUP BY i.ToolPanel
END

IF(@PrevDate2 is not null)
BEGIN
	INSERT INTO #Chart2Data (RegionMap, Prev2AcquisitionValue, Prev2Count)
	SELECT r.RegionDesc AS RegionMap,
			SUM(ISNULL(fa.Cost, 0)) AS TotalAcquisitionValue, COUNT(*)
	FROM FixedAssetSnapshots (NOLOCK) fas
	LEFT JOIN FixedAssets (NOLOCK) fa ON fa.FixedAssetId=fas.FixedAssetId
	LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant = fas.BranchPlant
	LEFT JOIN Regions (NOLOCK) r ON r.Region=bp.Region
	LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum=fas.InventoryItemNum
	LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
	WHERE fas.EquipmentStatus = 'AS' AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1
	AND DATEDIFF(DAY, fas.LastStatusChangeDate, fas.InventoryDate) > 90
	AND fas.InventoryDate=@PrevDate2
	GROUP BY r.RegionDesc
	
	INSERT INTO #Chart3Data (ToolPanel, Prev2Count)
	SELECT i.ToolPanel, COUNT(fas.SerialNum) AS AssetCount
	FROM FixedAssetSnapshots (NOLOCK) fas
	LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = fas.InventoryItemNum
	LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = fas.RNItemNum
	WHERE fas.EquipmentStatus = 'AS' AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1
	AND DATEDIFF(DAY, fas.LastStatusChangeDate, fas.InventoryDate) > 90
	AND fas.InventoryDate=@PrevDate2
	GROUP BY i.ToolPanel
END

IF(@PrevDate3 is not null)
BEGIN
	INSERT INTO #Chart2Data (RegionMap, Prev3AcquisitionValue, Prev3Count)
	SELECT r.RegionDesc AS RegionMap,
			SUM(ISNULL(fa.Cost, 0)) AS TotalAcquisitionValue, COUNT(*)
	FROM FixedAssetSnapshots (NOLOCK) fas
	LEFT JOIN FixedAssets (NOLOCK) fa ON fa.FixedAssetId=fas.FixedAssetId
	LEFT JOIN BranchPlants (NOLOCK) bp ON bp.BranchPlant=fas.BranchPlant
	LEFT JOIN Regions (NOLOCK) r ON r.Region=bp.Region
	LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum=fas.InventoryItemNum
	LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = fas.RNItemNum
	WHERE fas.EquipmentStatus = 'AS' AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1
	AND DATEDIFF(DAY, fas.LastStatusChangeDate, fas.InventoryDate) > 90
	AND fas.InventoryDate=@PrevDate3
	GROUP BY r.RegionDesc
	
	INSERT INTO #Chart3Data (ToolPanel, Prev3Count)
	SELECT i.ToolPanel, COUNT(fas.SerialNum) AS AssetCount
	FROM FixedAssetSnapshots (NOLOCK) fas
	LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum=fas.InventoryItemNum
	LEFT JOIN dbo.ItemNums (NOLOCK) ri ON ri.ItemNum = fas.RNItemNum
	WHERE fas.EquipmentStatus = 'AS' AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1
	AND DATEDIFF(DAY, fas.LastStatusChangeDate, fas.InventoryDate) > 90
	AND fas.InventoryDate=@PrevDate3
	GROUP BY i.ToolPanel
END

--for chart2
SELECT	RegionMap AS DisplayName,
		SUM(ISNULL(AcquisitionValue, 0)) AS CurrentAcquisitionValue, 
		SUM(ISNULL(Prev1AcquisitionValue, 0)) AS Prev1AcquisitionValue,
		SUM(ISNULL(Prev2AcquisitionValue, 0)) AS Prev2AcquisitionValue,
		SUM(ISNULL(Prev3AcquisitionValue, 0)) AS Prev3AcquisitionValue
FROM #Chart2Data 
GROUP BY RegionMap

--for chart3
SELECT	ToolPanel as DisplayName,
		SUM(ISNULL(CurrentCount,0)) AS CurrentAssetCount, 
		SUM(ISNULL(Prev1Count,0)) AS Prev1Count,
		SUM(ISNULL(Prev2Count,0)) AS Prev2Count,
		SUM(ISNULL(Prev3Count,0)) AS Prev3Count
FROM #Chart3Data 
GROUP BY ToolPanel

--for chart5
SELECT	RegionMap  as DisplayName,
		SUM(ISNULL(CurrentCount,0)) AS CurrentAssetCount, 
		SUM(ISNULL(Prev1Count,0)) AS Prev1Count,
		SUM(ISNULL(Prev2Count,0)) AS Prev2Count,
		SUM(ISNULL(Prev3Count,0)) AS Prev3Count
FROM #Chart2Data 
GROUP BY RegionMap

SELECT @PrevDate1 AS PrevDate1, @PrevDate2 AS PrevDate2, @PrevDate3 AS PrevDate3



DROP TABLE #Chart1Data
DROP TABLE #Chart2Data
DROP TABLE #Chart3Data
DROP TABLE #Chart4Data




GO
/****** Object:  StoredProcedure [dbo].[usp_RunDispatchExceptionReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_RunDispatchExceptionReport]
	@xmlData xml
AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;


DECLARE @LocationGroup AS VARCHAR(50)
DECLARE @NotMappedToJAR AS VARCHAR(5)
DECLARE @WhereClause AS VARCHAR(MAX)


DECLARE @startIndex AS VARCHAR(10)
DECLARE @pageSize AS VARCHAR(10)
DECLARE @sortField AS VARCHAR(100)
DECLARE @sortDir AS VARCHAR(64)

SELECT @LocationGroup = T.c.value('.', 'VARCHAR(50)') FROM @xmlData.nodes('/Filters/LocationGroup') T(c)
SELECT @NotMappedToJAR = T.c.value('.', 'VARCHAR(5)') FROM @xmlData.nodes('/Filters/NotMappedToJAR') T(c)
SELECT @WhereClause = T.c.value('.', 'VARCHAR(max)') FROM @xmlData.nodes('/Filters/WhereClause')T(c);


SELECT @startIndex = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/StartIndex')T(c);
SELECT @pageSize = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/PageSize')T(c);
SELECT @sortField = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/SortField')T(c);
SELECT @sortDir = T.c.value('.', 'VARCHAR(64)') FROM @xmlData.nodes('/Filters/SortDir')T(c);

DECLARE @sql AS VARCHAR(MAX)
DECLARE @LocationGroupColumns AS VARCHAR(MAX) = '*'
DECLARE @LocationGroupBys AS VARCHAR(MAX) = ''
DECLARE @GroupingCondition AS VARCHAR(MAX) = ''

IF(@LocationGroup = 'Region')
BEGIN
	SET @LocationGroupColumns = 'RegionDesc, Count(JobId) as JobCount'
	SET @LocationGroupBys = 'GROUP BY RegionDesc'
	SET @GroupingCondition = ' HAVING Count(JobId) > 0'
END
ELSE IF(@LocationGroup = 'Country')
BEGIN
	SET @LocationGroupColumns = 'RegionDesc, CountryDesc, Count(JobId) as JobCount'
	SET @LocationGroupBys = 'GROUP BY RegionDesc, CountryDesc'
	SET @GroupingCondition = ' HAVING Count(JobId) > 0'
END
ELSE IF(@LocationGroup = 'BranchPlant')
BEGIN
	SET @LocationGroupColumns = 'RegionDesc, CountryDesc, BranchPlant, BranchPlantName, Count(JobId) as JobCount'
	SET @LocationGroupBys = 'GROUP BY RegionDesc, CountryDesc, BranchPlant, BranchPlantName'
	SET @GroupingCondition = ' HAVING Count(JobId) > 0'
END

if (@NotMappedToJAR = '1')
begin
	Set @WhereClause = ' (' + @WhereClause + ') OR (vwDispatchExceptionReport.JobId IS NULL) '
end

Set @sql = ' SELECT ' + @LocationGroupColumns + ' FROM vwDispatchExceptionReport ' + @WhereClause + @LocationGroupBys + @GroupingCondition



DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') t '

EXECUTE (@sqlString)

DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, * From ( ' + 
		@sql + ') query ) page 
		WHERE page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir

EXECUTE(@pagingSql)

END


GO
/****** Object:  StoredProcedure [dbo].[usp_RunDispatchVsBsLosToolCountExceptionReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_RunDispatchVsBsLosToolCountExceptionReport]
	@xmlData xml
AS
BEGIN

SET NOCOUNT ON;

DECLARE @dispatchWhereClause as VARCHAR(MAX)
DECLARE @toolStringWhereClause as VARCHAR(MAX)

SELECT @dispatchWhereClause = T.c.value('.', 'VARCHAR(MAX)') FROM @xmlData.nodes('/Filters/DispatchWhereClause')T(c);
SELECT @toolStringWhereClause = T.c.value('.', 'VARCHAR(MAX)') FROM @xmlData.nodes('/Filters/ToolStringWhereClause')T(c);

IF(ISNULL(@dispatchWhereClause, '') = '')
BEGIN
	Set @dispatchWhereClause = ' 1=1 '
END

IF(ISNULL(@toolStringWhereClause, '') = '')
BEGIN
	Set @toolStringWhereClause = ' 1=1 '
END


DECLARE @startIndex VARCHAR(10)
DECLARE @pageSize VARCHAR(10)
DECLARE @sortField VARCHAR(100)
DECLARE @sortDir VARCHAR(64)

SELECT @startIndex = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/StartIndex')T(c);
SELECT @pageSize = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/PageSize')T(c);
SELECT @sortField = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/SortField')T(c);
SELECT @sortDir = T.c.value('.', 'VARCHAR(64)') FROM @xmlData.nodes('/Filters/SortDir')T(c);

declare @locationGroup varchar(256)
declare @locationCols varchar(256)
declare @locationDispatchGroupCols varchar(256)
declare @locationToolStringGroupCols varchar(256)

Select @locationGroup = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/LocationGroup') T(c)
SET @locationCols = 'Region'
SET @locationDispatchGroupCols = 'r.RegionDesc'
SET @locationToolStringGroupCols = 'r.RegionDesc'

IF @locationGroup = 'Country'
BEGIN
	SET @locationCols = 'Region, Country'
	SET @locationDispatchGroupCols = ' r.RegionDesc, c.CountryDesc'
	SET @locationToolStringGroupCols = 'r.RegionDesc, c.CountryDesc'
END
ELSE if @locationGroup = 'BranchPlant'
BEGIN
	SET @locationCols = 'Region, Country, BranchPlant, BranchPlantName'
	SET @locationDispatchGroupCols = 'r.RegionDesc, c.CountryDesc, d.BranchPlant, bp.CompanyName'
	SET @locationToolStringGroupCols = 'r.RegionDesc, c.CountryDesc, ts.District, bp.CompanyName'
END


Create table #tblAllData
(
	 Region VARCHAR(250) NULL,
	 Country VARCHAR(250) NULL,
	 BranchPlant VARCHAR(250) NULL,
	 BranchPlantName VARCHAR(250) NULL,
	 DTToolCount INT NULL,
	 BSLOSToolCount INT NULL
)

-- Dispatch Data
EXECUTE('
INSERT INTO #tblAllData(' + @locationCols + ', DTToolCount)
Select ' + @locationDispatchGroupCols + '
	, COUNT(*)	
from DispatchInstanceItems(NOLOCK) dii
INNER JOIN FixedAssets(NOLOCK) fa ON fa.AssetNumber = dii.AssetNumber
LEFT JOIN ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
INNER JOIN DispatchInstances di ON di.DispatchInstanceId = dii.DispatchInstanceId
INNER JOIN Dispatches(NOLOCK) d ON d.DispatchId = di.DispatchId
LEFT OUTER JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = d.BranchPlant
LEFT OUTER JOIN Regions(NOLOCK) r ON r.Region = bp.Region
LEFT OUTER JOIN Countries(NOLOCK) c ON c.Country = bp.Country
Where di.ShipType = ''DT-SEQ-ADD'' AND ISNULL(ri.IsAsset, ISNULL(i.IsAsset, 0)) = 1
AND ' + @dispatchWhereClause + '
GROUP by ' + @locationDispatchGroupCols + '
ORDER by ' + @locationDispatchGroupCols + '
')

--ToolString data
EXECUTE('
INSERT INTO #tblAllData(' + @locationCols + ', BSLOSToolCount)
Select ' + @locationToolStringGroupCols + '
	, COUNT(*)
from ToolStringFixedAssets(NOLOCK) tsfa
INNER JOIN ToolStrings(NOLOCK) ts ON ts.ToolStringId = tsfa.ToolStringID
INNER JOIN FixedAssets(NOLOCK) fa ON fa.FixedAssetId = tsfa.FixedAssetId
LEFT JOIN ItemNums(NOLOCK) i ON i.ItemNum = fa.InventoryItemNum
LEFT JOIN ItemNums(NOLOCK) ri ON ri.ItemNum = fa.RNItemNum
LEFT OUTER JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = ts.District
LEFT OUTER JOIN Regions(NOLOCK) r ON r.Region = bp.Region
LEFT OUTER JOIN Countries(NOLOCK) c ON c.Country = bp.Country
Where ts.CreatedBy = 0 AND ts.IsDeleted = 0 AND ISNULL(ri.IsAsset, ISNULL(i.IsAsset, 0)) = 1
AND ' + @toolStringWhereClause + '
GROUP by ' + @locationToolStringGroupCols + '
ORDER by ' + @locationToolStringGroupCols + '
')

DECLARE @sqlString VARCHAR(MAX)
DECLARE @sql AS VARCHAR(MAX)
DECLARE @pagingSql VARCHAR(MAX)

Set @sql = '
Select ' + @locationCols + '
	, SUM(DTToolCount) as DTToolCount
	, SUM(BSLOSToolCount) as BSLOSToolCount
from #tblAllData
GROUP by ' + @locationCols + '
HAVING ISNULL(SUM(DTToolCount), 0) <> ISNULL(SUM(BSLOSToolCount), 0)
'

SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') t '
PRINT @sqlString
EXECUTE (@sqlString)

SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, * From ( ' + 
		@sql + ') query ) page 
		where page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir

EXECUTE(@pagingSql)


DROP TABLE #tblAllData

END

GO
/****** Object:  StoredProcedure [dbo].[usp_RunIdleDemandReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_RunIdleDemandReport]
	@xmlData XML
AS

declare @sqlQuery varchar(max)

declare @pageSize varchar(10)
declare @startIndex varchar(10)
declare @sortField varchar(256)
declare @sortDir varchar(10)
declare @whereClauseRF varchar(max)
declare @whereClauseFA varchar(max)


declare @reportGroup varchar(256)
declare @reportGroupCols varchar(256)

declare @locationGroup varchar(256)
declare @locationGroupCols varchar(256)

set @pageSize = 25
set @startIndex = 0
set @sortField = ''
set @sortDir = ' ASC '

select @reportGroup = T.c.value('.', 'varchar(256)') 
from @xmlData.nodes('/Filters/ReportGroup') T(c)

select @locationGroup = T.c.value('.', 'varchar(256)') 
from @xmlData.nodes('/Filters/LocationGroup') T(c)

select @startIndex = T.c.value('.', 'varchar(10)') 
from @xmlData.nodes('/Filters/StartIndex') T(c)

select @pageSize = T.c.value('.', 'varchar(10)') 
from @xmlData.nodes('/Filters/PageSize') T(c)

select @sortField = T.c.value('.', 'varchar(256)') 
from @xmlData.nodes('/Filters/SortField') T(c)

select @sortDir = T.c.value('.', 'varchar(10)') 
from @xmlData.nodes('/Filters/SortDir') T(c)

select @whereClauseFA = T.c.value('.', 'varchar(max)') 
from @xmlData.nodes('/Filters/WhereClauseFA') T(c)

select @whereClauseRF = T.c.value('.', 'varchar(max)') 
from @xmlData.nodes('/Filters/WhereClauseRF') T(c)


IF(LEN(@whereClauseFA) = 0 or @whereClauseFA is null)
SET @whereClauseFA = '1=1'

IF(LEN(@whereClauseRF) = 0 or @whereClauseRF is null)
SET @whereClauseRF = '1=1'




IF @sortDir IS NULL
BEGIN
	SET @sortDir = ' ASC '
END

SET @reportGroupCols = 'a.ToolPanel'

IF @reportGroup = 'ToolPanel,ToolCode'
BEGIN
	SET @reportGroupCols = 'a.ToolPanel, a.ToolCode'
END
ELSE if @reportGroup = 'ToolPanel,ToolCode,ItemNum'
BEGIN
	SET @reportGroupCols = 'a.ToolPanel, a.ToolCode, a.ItemNum'
END

SET @locationGroupCols = 'a.RegionDesc'

IF @locationGroup = 'Country'
BEGIN
	SET @locationGroupCols = ' a.RegionDesc, a.CountryDesc'
END
ELSE if @locationGroup = 'BranchPlant'
BEGIN
	SET @locationGroupCols = 'a.RegionDesc, a.CountryDesc, a.BranchPlant, a.BranchPlantName'
END


Create table #AllData
(
	 ToolPanel VARCHAR(50) NULL,
	 ToolCode VARCHAR(50) NULL,
	 ItemNum VARCHAR (50) NULL,
	 RegionDesc VARCHAR(250) NULL,
	 CountryDesc VARCHAR(250) NULL,
	 BranchPlant VARCHAR(250) NULL,
	 BranchPlantName VARCHAR(250) NULL,
	 Active INT NULL,
	 Available INT NULL,
	 Assigned INT NULL,
	 Idle INT NULL,
	 QtyDistrictRepair INT NULL,
	 QtyGlobalRepair INT NULL,
	 QtyOutstanding INT NULL
)

EXEC( '

INSERT INTO #AllData 
SELECT
	  fa.ToolPanel
	, fa.ToolCode
	, fa.RNItemNum AS ItemNum
	, fa.RegionDesc
	, fa.CountryDesc
	, fa.BranchPlant
	, fa.BranchPlantName
	, SUM(ISNULL(fa.IsActive,0)) AS Active
	, SUM(ISNULL(fa.IsAvailable,0)) AS Available
	, SUM(ISNULL(fa.IsAssigned,0)) AS Assigned
	, SUM(ISNULL(fa.IsIdle,0)) AS Idle
	, SUM(ISNULL(fa.IsRepair,0)) AS QtyDistrictRepair
	, SUM(CASE WHEN fa.IsGlobalRepair = 1 AND fa.IsRepair = 1 THEN 1 ELSE 0 END) AS QtyGlobalRepair
	, NULL AS QtyOutstanding
From vwWAMFixedAssetReport (NOLOCK) fa 
WHERE ' + @whereClauseFA + '
GROUP BY fa.ToolPanel, fa.ToolCode,fa.RNItemNum, fa.RegionDesc, fa.CountryDesc, fa.BranchPlant,fa.BranchPlantName ' )

EXEC( '
INSERT INTO #AllData 
SELECT
	  rf.ToolPanel
	, rf.ToolCode
	, rf.ItemNum AS ItemNum
	, rf.ToRegion
	, rf.ToCountry
	, rf.ToBranchPlant
	, rf.ToCompanyName
	, 0 AS Active
	, 0 AS Available
	, 0 AS Assigned
	, 0 AS Idle
	, 0 AS QtyDistrictRepair
	, 0 AS QtyGlobalRepair
	, SUM(ISNULL(rf.QtyOutstanding, 0)) AS QtyOutstanding
From vwOutstandingRequestItems (NOLOCK) rf
WHERE ' + @whereClauseRF + '
GROUP BY rf.ToolPanel, rf.ToolCode,rf.ItemNum, rf.ToRegion, rf.ToCountry, rf.ToBranchPlant,rf.ToCompanyName ')

SET @sqlQuery = 'SELECT ' + @reportGroupCols + ',' + @locationGroupCols + ',
	SUM(a.Active)AS Active,
	SUM(a.Available) AS Available,
	SUM(a.Assigned) AS Assigned,
	SUM(a.Idle) AS Idle,
	SUM(a.QtyDistrictRepair) AS QtyDistrictRepair,
	SUM(a.QtyGlobalRepair) AS QtyGlobalRepair,
	SUM(ISNULL(a.QtyOutstanding,0)) as QtyOutstanding
FROM #AllData a
GROUP BY ' + @reportGroupCols + ',' + @locationGroupCols 


DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, * From ( ' + 
		@sqlQuery + ') query ) page 
		where page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir


EXECUTE(@pagingSql)

DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sqlQuery + ') a'
EXECUTE (@sqlString)











DROP TABLE #AllData
GO
/****** Object:  StoredProcedure [dbo].[usp_RunJarDailyReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_RunJarDailyReport]
	@xmlData xml
AS

/*
declare @xmlData xml
set @xmlData = '<Filters><DateRangeFrom>2014-11-1</DateRangeFrom><DateRangeTo>2014-11-13</DateRangeTo><ServiceLineOperand>OR</ServiceLineOperand><ServiceLines><Id>BECFIELD</Id><Id>DD</Id><Id>EM</Id><Id>GEOLINK</Id><Id>HP</Id><Id>LWD</Id><Id>RSS</Id><Id>SURVEY</Id><Id>TENSOR</Id></ServiceLines></Filters>'
*/

declare @sQuery varchar(max)
declare @sSql varchar(max)
declare @sDailyWhere varchar(max)
declare @sWhere varchar(max)
declare @fromDate varchar(256)
declare @toDate varchar(256)
declare @hemisphere varchar(25)
declare @toolSize varchar(10)
declare @activity varchar(50)
declare @serviceLineOperand varchar(3)

select @fromDate = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/DateRangeFrom') T(c)
select @toDate = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/DateRangeTo') T(c)
select @hemisphere = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/Hemisphere') T(c)
select @toolSize = T.c.value('.', 'varchar(10)') from @xmlData.nodes('/Filters/ToolSize') T(c)
select @activity = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Activity') T(c)
select @serviceLineOperand = T.c.value('.', 'varchar(3)') from @xmlData.nodes('/Filters/ServiceLineOperand') T(c)

Select T.c.value('.', 'varchar(max)') as Region
Into #Regions
From @xmlData.nodes('/Filters/Regions/Id') T(c)
	
Select T.c.value('.', 'varchar(max)') as Country
Into #Countries
From @xmlData.nodes('/Filters/Countries/Id') T(c)

Select T.c.value('.', 'varchar(max)') as District
Into #Districts
From @xmlData.nodes('/Filters/Districts/Id') T(c)

Select T.c.value('.', 'varchar(max)') as JobNumber
Into #JobNumbers
From @xmlData.nodes('/Filters/JobNumbers/Id') T(c)

Select T.c.value('.', 'varchar(max)') as ToolPanel
Into #ToolPanels
From @xmlData.nodes('/Filters/ToolPanels/Id') T(c)

Select T.c.value('.', 'varchar(max)') as ToolCode
Into #ToolCodes
From @xmlData.nodes('/Filters/ToolCodes/Id') T(c)

Select T.c.value('.', 'varchar(max)') as RevenueStatus
Into #RevenueStatus
From @xmlData.nodes('/Filters/RevenueStatus/Id') T(c)

Select Replace(T.c.value('.', 'varchar(max)'),'/','_') as ServiceLine
Into #ServiceLines
From @xmlData.nodes('/Filters/ServiceLines/Id') T(c)

set @sDailyWhere = ' where 1=1'

if((Select COUNT(*) from #RevenueStatus) != 0)
begin
	set @sDailyWhere = @sDailyWhere + ' and JarActivities.RevenueStatus in (select RevenueStatus from #RevenueStatus)'
end

if (@activity <> '')
begin
	set @sDailyWhere = @sDailyWhere + ' and JarActivities.Activity = ''' + @activity + ''''
end

set @sWhere = ' where Jobs.IsDeleted = 0'

if (@fromDate <> '')
begin
	set @sWhere = @sWhere + ' And ActivityDays.ActivityDay >= ''' + @fromDate + ''''
end

if (@toDate <> '')
begin
	set @sWhere = @sWhere + ' And ActivityDays.ActivityDay <= ''' + @toDate + ''''
end

if (@hemisphere <> '')
begin
	set @sWhere = @sWhere + ' And Regions.Hemisphere like ''' + REPLACE(@hemisphere,'*','%') + ''''
end

if((Select COUNT(*) from #Regions) != 0)
begin
	set @sWhere = @sWhere + ' And Jobs.Region in (select Region from #Regions)'
end

if((Select COUNT(*) from #Countries) != 0)
begin
	set @sWhere = @sWhere + ' And Jobs.Country in (select Country from #Countries)'
end

if((Select COUNT(*) from #Districts) != 0)
begin
	set @sWhere = @sWhere + ' And Jobs.BranchPlant in (select District from #Districts)'
end

if((Select COUNT(*) from #JobNumbers) != 0)
begin
	set @sWhere = @sWhere + ' And Jobs.JobNumber in (select JobNumber from #JobNumbers)'
end

if(@toolSize <> '' OR (Select COUNT(*) from #ToolCodes) != 0)
begin
	set @sWhere = @sWhere + ' And JarRuns.JarRunId in (select JarRunId from JarRunTools jrt with(nolock)
							left join ToolStrings t with(nolock) on t.ToolStringId = jrt.ToolStringId
							left join ToolStringFixedAssets tsfa with(nolock) on tsfa.ToolStringId = jrt.ToolStringId
							left join ItemNums i with(nolock) on i.ItemNum = tsfa.InventoryItemNum
							where jrt.JarRunId = JarRuns.JarRunId'

	if((Select COUNT(*) from #ToolPanels) != 0)
	begin
		set @sWhere = @sWhere + ' and i.ToolPanel in (select ToolPanel from #ToolPanels)'
	end
	
	if((Select COUNT(*) from #ToolCodes) != 0)
	begin
		set @sWhere = @sWhere + ' and i.ToolCode in (select ToolCode from #ToolCodes)'
	end

	if (@toolSize <> '')
	begin
		set @sWhere = @sWhere + ' and t.SizeId = ' + @toolSize
	end

	set @sWhere = @sWhere + ' group by JarRunId)'
end

if((Select COUNT(*) from #ServiceLines) != 0)
begin
	--select @sWhere = @sWhere + ' and ' + ServiceLine + ' = 1' from #ServiceLines
	set @sWhere += ' and ('

	declare @whereServicLines varchar(300)
	set @whereServicLines = ''
	select @whereServicLines += ServiceLine + ' = 1 ' + @serviceLineOperand + ' ' from #ServiceLines

	set @sWhere += Left(@whereServicLines, (Len(@whereServicLines)- (Len(@serviceLineOperand)+1))) + ')'
end

create table #DailyData
( 
    ActivityDay date
    , JobId uniqueidentifier
    , RegionDesc varchar(50)
    , CountryDesc varchar(50)
    , District varchar(100)
    , CustomerName varchar(50)
    , JarWell varchar(50)
	, JarWellType varchar(25)
	, JarReservoirType varchar(25)
	, KOP varchar(20)
	, RigName varchar(50)
	, JobNumber varchar(50)
	, LocationCountry varchar(50)
	, LocationState varchar(50)
	, LocationCounty varchar(50)
	, KitNumber varchar(20)
	, StartDate datetime
	, EstDays datetime
	, JarRunId uniqueidentifier
	, RunNumber varchar(50)
	, HasGFA tinyint
	, ToolSize float
	, BackupToolSize float
	, HoleSize float
	, HoleDepth float
	, MaxTemp float
	, Comments varchar(2000)
	, LWD_Pers tinyint
	, MWD_Pers tinyint
	, RSS_Pers tinyint
	, DD_Pers tinyint
	, LWD_MWD_Pers tinyint
	, LWD_RSS_Pers tinyint
	, DD_MWD_Pers tinyint
	, DD_LWD_Pers tinyint
	, BECFIELD tinyint
	, DD tinyint
	, EM tinyint
	, GEOLINK tinyint
	, HP tinyint
	, LWD tinyint
	, RSS tinyint
	, SURVEY tinyint
	, TENSOR tinyint
	, EstDayRate float
	, RevenueStatusByTime varchar(500)
	, ActivityByTime varchar(500)
	, FieldEngineersByDay varchar(500)
)

set @sQuery = 'insert into #DailyData
	select ActivityDays.ActivityDay
	, ActivityDays.JobId
	, Regions.RegionDesc
	, Countries.CountryDesc
	, BranchPlants.CompanyName As District
	, Customers.CustomerName
	, Jobs.JarWell
	, Jobs.JarWellType
	, Jobs.JarReservoirType
	, Jobs.KOP
	, Jobs.Rig
	, Jobs.JobNumber
	, Jobs.LocationCountry
	, Jobs.LocationState
	, Jobs.LocationCounty
	, Jobs.KitNumber
	, Jobs.StartDate
	, Jobs.EstDays
	, JarRuns.JarRunId
	, JarRuns.RunNumber
	, 0 As HasGFA
	, JarRuns.ToolSize
	, JarRuns.BackupToolSize
	, JarRuns.HoleSize
	, JarRuns.HoleDepth
	, JarRuns.MaxTemp
	, Left(ActivityDays.CommentsByTime,2000) As Comments
	, ActivityDays.LWD_Pers
	, ActivityDays.MWD_Pers
	, ActivityDays.RSS_Pers
	, ActivityDays.DD_Pers
	, ActivityDays.LWD_MWD_Pers
	, ActivityDays.LWD_RSS_Pers
	, ActivityDays.DD_MWD_Pers
	, ActivityDays.DD_LWD_Pers
	, ActivityDays.BECFIELD
	, ActivityDays.DD
	, ActivityDays.EM
	, ActivityDays.GEOLINK
	, ActivityDays.HP
	, ActivityDays.LWD
	, ActivityDays.RSS
	, ActivityDays.SURVEY
	, ActivityDays.TENSOR
	, ActivityDays.EstDayRate
	, ActivityDays.RevenueStatusByTime
	, ActivityDays.ActivityByTime
	, ActivityDays.FieldEngineersByDay
from (select CAST(JarActivities.StartDate As DATE) ActivityDay
		, JarActivities.JobId
		, Max(JarActivities.RunNumber) As RunNumber
		, Max(IsNull(ActivityPersonnel.LWD_Pers,0)) As LWD_Pers
		, Max(IsNull(ActivityPersonnel.MWD_Pers,0)) As MWD_Pers
		, Max(IsNull(ActivityPersonnel.RSS_Pers,0)) As RSS_Pers
		, Max(IsNull(ActivityPersonnel.DD_Pers,0)) As DD_Pers
		, Max(IsNull(ActivityPersonnel.LWD_MWD_Pers,0)) As LWD_MWD_Pers
		, Max(IsNull(ActivityPersonnel.LWD_RSS_Pers,0)) As LWD_RSS_Pers
		, Max(IsNull(ActivityPersonnel.DD_MWD_Pers,0)) As DD_MWD_Pers
		, Max(IsNull(ActivityPersonnel.DD_LWD_Pers,0)) As DD_LWD_Pers
		, Max(IsNull(ActivityServices.BECFIELD,0)) As BECFIELD
		, Max(IsNull(ActivityServices.DD,0)) As DD
		, Max(IsNull(ActivityServices.EM,0)) As EM
		, Max(IsNull(ActivityServices.GEOLINK,0)) As GEOLINK
		, Max(IsNull(ActivityServices.HP,0)) As HP
		, Max(IsNull(ActivityServices.LWD,0)) As LWD
		, Max(IsNull(ActivityServices.RSS,0)) As RSS
		, Max(IsNull(ActivityServices.SURVEY,0)) As SURVEY
		, Max(IsNull(ActivityServices.TENSOR,0)) As TENSOR
		, IsNull(Max(JarActivities.EstDayRate),0) As EstDayRate
		, STUFF((select '', '' + CONVERT(varchar(15),CAST(StartDate AS TIME),100) + '' - '' + CONVERT(varchar(15),CAST(EndDate AS TIME),100)
			+ '': '' + CAST(b.RevenueStatus AS VARCHAR(MAX)) 
				from JarActivities b
				where b.JobId = JarActivities.JobId and (CAST(b.StartDate As DATE) = CAST(JarActivities.StartDate As DATE))
				order by b.StartDate FOR XML PATH ('''')
		),1,2,'''') AS RevenueStatusByTime
		, STUFF((select '', '' + CONVERT(varchar(15),CAST(StartDate AS TIME),100) + '' - '' + CONVERT(varchar(15),CAST(EndDate AS TIME),100)
			+ '': '' + CAST(b.Activity AS VARCHAR(MAX)) 
				from JarActivities b
				where b.JobId = JarActivities.JobId and (CAST(b.StartDate As DATE) = CAST(JarActivities.StartDate As DATE))
				order by b.StartDate FOR XML PATH ('''')
		),1,2,'''') AS ActivityByTime
		, STUFF((select ''||'' + CONVERT(varchar(15),CAST(StartDate AS TIME),100) + '' - '' + CONVERT(varchar(15),CAST(EndDate AS TIME),100)
			+ '': '' + CAST(b.Comments AS VARCHAR(MAX)) 
				from JarActivities b
				where b.JobId = JarActivities.JobId and (CAST(b.StartDate As DATE) = CAST(JarActivities.StartDate As DATE))
				order by b.StartDate FOR XML PATH ('''')
		),1,2,'''') AS CommentsByTime
		, STUFF((select '', '' + CAST(jp.FirstName + '' '' + jp.LastName + '' ('' + jp.ProductLine + '')'' AS VARCHAR(MAX))
				from JarActivities b 
				left join JarActivityPersonnel jap on jap.JarActivityId = b.JarActivityId
				left join JobPersonnel jp on jp.JobPersonnelID = jap.JobPersonnelId
				where Shift = ''Field Engineer''
				and b.JobId = JarActivities.JobId and (CAST(b.StartDate As DATE) = CAST(JarActivities.StartDate As DATE))
				group by jp.FirstName, jp.LastName, jp.ProductLine
				order by jp.ProductLine, jp.FirstName, jp.LastName FOR XML PATH ('''')
		),1,2,'''') AS FieldEngineersByDay
	from JarActivities WITH(NOLOCK)
	left join (
		select jas.JarActivityId
			, max(case when jas.ServiceLine = ''BECFIELD'' then 1 else 0 end) as BECFIELD
			, max(case when jas.ServiceLine = ''DD'' then 1 else 0 end) as DD
			, max(case when jas.ServiceLine = ''EM'' then 1 else 0 end) as EM
			, max(case when jas.ServiceLine = ''GEOLINK'' then 1 else 0 end) as GEOLINK
			, max(case when jas.ServiceLine = ''HP'' then 1 else 0 end) as HP
			, max(case when jas.ServiceLine = ''LWD'' then 1 else 0 end) as LWD
			, max(case when jas.ServiceLine = ''RSS'' then 1 else 0 end) as RSS
			, max(case when jas.ServiceLine = ''SURVEY'' then 1 else 0 end) as SURVEY
			, max(case when jas.ServiceLine = ''TENSOR'' then 1 else 0 end) as TENSOR
		from JarActivityServices jas WITH(NOLOCK)
		group by jas.JarActivityId, jas.ServiceLine
	) AS ActivityServices on ActivityServices.JarActivityId = JarActivities.JarActivityId
	left join (
		select jap.JarActivityId
		, Sum(case when jp.ProductLine = ''LWD'' Then 1 Else 0 End) As LWD_Pers
		, Sum(case when jp.ProductLine = ''MWD'' Then 1 Else 0 End) As MWD_Pers
		, Sum(case when jp.ProductLine = ''RSS'' Then 1 Else 0 End) As RSS_Pers
		, Sum(case when jp.ProductLine = ''DD'' Then 1 Else 0 End) As DD_Pers
		, Sum(case when jp.ProductLine = ''LWD, MWD'' Then 1 Else 0 End) As LWD_MWD_Pers
		, Sum(case when jp.ProductLine = ''LWD, RSS'' Then 1 Else 0 End) As LWD_RSS_Pers
		, Sum(case when jp.ProductLine = ''DD, MWD'' Then 1 Else 0 End) As DD_MWD_Pers
		, Sum(case when jp.ProductLine = ''DD, LWD'' Then 1 Else 0 End) As DD_LWD_Pers
		from JarActivityPersonnel jap WITH(NOLOCK)
		left join JobPersonnel jp WITH(NOLOCK) on jp.JobPersonnelID = jap.JobPersonnelId
		group by jap.JarActivityId
	) AS ActivityPersonnel on ActivityPersonnel.JarActivityId = JarActivities.JarActivityId'
	+ @sDailyWhere +
	' group by CAST(JarActivities.StartDate As DATE), JarActivities.JobId)
As ActivityDays
left join Jobs WITH(NOLOCK) on Jobs.JobId = ActivityDays.JobId
left join JarRuns WITH(NOLOCK) on JarRuns.JobId = ActivityDays.JobId and JarRuns.RunNumber = ActivityDays.RunNumber
left join Regions WITH(NOLOCK) on Regions.Region = Jobs.Region
left join Countries WITH(NOLOCK) on Countries.Country = Jobs.Country
left join BranchPlants WITH(NOLOCK) on BranchPlants.BranchPlant = Jobs.BranchPlant
left join Customers WITH(NOLOCK) on Customers.CustomerId = Jobs.CustomerId' + @sWhere

print (@sQuery)
exec(@sQuery)

select
	CAST(ja.StartDate As DATE) ActivityDay
	, ja.JobId
	, jas.ServiceLine + '_' + jas.Sensor as Sensor
into #DailyServiceSensors
from JarActivityServices jas WITH(NOLOCK)
left join JarActivities ja WITH(NOLOCK) on ja.JarActivityId = jas.JarActivityId
where ja.JobId in (select JobId from #DailyData group by JobId)
and CAST(ja.StartDate As DATE) in (select ActivityDay from #DailyData group by ActivityDay)
group by ja.JobId, CAST(ja.StartDate As DATE), jas.ServiceLine, jas.Sensor

DECLARE @Sensors TABLE
(
  Sensor varchar(100)
)

INSERT INTO @Sensors (Sensor)
SELECT Sensor
FROM #DailyServiceSensors
GROUP BY Sensor

declare @cols varchar(max)
declare @groupByCols varchar(max) 

SELECT @cols = STUFF((select ', ' + quotename(Sensor)
                        from @Sensors
                        order by Sensor
                        for xml path('') 
                      ), 1, 2, '')                    

SELECT @groupByCols = STUFF((select ', Case When Max(' + QUOTENAME(Sensor) + ') > 0 Then 1 Else 0 End As ' + quotename(Sensor)
                        from @Sensors
                        order by Sensor
                        for xml path(''), root('GrpCols'), type).value('/GrpCols[1]','varchar(max)'
                      ), 1, 2, '')

set @sSql = 'select * from #DailyData'
			if (LEN(@cols) > 0)
			begin
				set @sSql = @sSql + ' left join (
					Select pvtActivityDay, pvtJobId, ' + @groupByCols + '
					From 
					(
						select ActivityDay As pvtActivityDay, JobId As pvtJobId, Sensor 
						from #DailyServiceSensors AS t1
					) p 
					
					PIVOT (
							count([Sensor]) FOR Sensor IN ( '+ @cols +' )
						  ) 
					AS pvt 
					group by pvtActivityDay, pvtJobId
				) as pvtSensors on pvtSensors.pvtActivityDay = #DailyData.ActivityDay and pvtSensors.pvtJobId = #DailyData.JobId'
			end
			set @sSql = @sSql + ' order by #DailyData.ActivityDay, #DailyData.District, #DailyData.JobNumber'

print (@sSql)
execute(@sSql)

drop table #DailyData
drop table #DailyServiceSensors
drop table #RevenueStatus
drop table #Regions
drop table #Countries
drop table #Districts
drop table #JobNumbers
drop table #ToolPanels
drop table #ToolCodes
drop table #ServiceLines





GO
/****** Object:  StoredProcedure [dbo].[usp_RunJarDateRangeReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_RunJarDateRangeReport]
	@xmlData xml
AS

/*
declare @xmlData xml
set @xmlData = '<Filters><DateRangeFrom>2014-9-1</DateRangeFrom><DateRangeTo>2014-9-6</DateRangeTo><JobNumbers><Id>10216216</Id><Id>10204281</Id></JobNumbers></Filters>'
*/

declare @sQuery varchar(max)
declare @sSql varchar(max)
declare @sDailyWhere varchar(max)
declare @sWhere varchar(max)
declare @fromDate varchar(256)
declare @toDate varchar(256)
declare @hemisphere varchar(25)
declare @toolSize varchar(10)
declare @activity varchar(50)
declare @serviceLineOperand varchar(3)

select @fromDate = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/DateRangeFrom') T(c)
select @toDate = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/DateRangeTo') T(c)
select @hemisphere = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/Hemisphere') T(c)
select @toolSize = T.c.value('.', 'varchar(10)') from @xmlData.nodes('/Filters/ToolSize') T(c)
select @activity = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Activity') T(c)
select @serviceLineOperand = T.c.value('.', 'varchar(3)') from @xmlData.nodes('/Filters/ServiceLineOperand') T(c)

Select T.c.value('.', 'varchar(max)') as Region
Into #Regions
From @xmlData.nodes('/Filters/Regions/Id') T(c)
	
Select T.c.value('.', 'varchar(max)') as Country
Into #Countries
From @xmlData.nodes('/Filters/Countries/Id') T(c)

Select T.c.value('.', 'varchar(max)') as District
Into #Districts
From @xmlData.nodes('/Filters/Districts/Id') T(c)

Select T.c.value('.', 'varchar(max)') as JobNumber
Into #JobNumbers
From @xmlData.nodes('/Filters/JobNumbers/Id') T(c)

Select T.c.value('.', 'varchar(max)') as ToolPanel
Into #ToolPanels
From @xmlData.nodes('/Filters/ToolPanels/Id') T(c)

Select T.c.value('.', 'varchar(max)') as ToolCode
Into #ToolCodes
From @xmlData.nodes('/Filters/ToolCodes/Id') T(c)

Select T.c.value('.', 'varchar(max)') as RevenueStatus
Into #RevenueStatus
From @xmlData.nodes('/Filters/RevenueStatus/Id') T(c)

Select Replace(T.c.value('.', 'varchar(max)'),'/','_') as ServiceLine
Into #ServiceLines
From @xmlData.nodes('/Filters/ServiceLines/Id') T(c)

set @sDailyWhere = ' where 1=1'

if((Select COUNT(*) from #RevenueStatus) != 0)
begin
	set @sDailyWhere = @sDailyWhere + ' and JarActivities.RevenueStatus in (select RevenueStatus from #RevenueStatus)'
end

if (@activity <> '')
begin
	set @sDailyWhere = @sDailyWhere + ' and JarActivities.Activity = ''' + @activity + ''''
end

set @sWhere = ' where Jobs.IsDeleted = 0'

if (@fromDate <> '')
begin
	set @sWhere = @sWhere + ' And ActivityDays.ActivityDay >= ''' + @fromDate + ''''
end

if (@toDate <> '')
begin
	set @sWhere = @sWhere + ' And ActivityDays.ActivityDay <= ''' + @toDate + ''''
end

if (@hemisphere <> '')
begin
	set @sWhere = @sWhere + ' And Regions.Hemisphere like ''' + REPLACE(@hemisphere,'*','%') + ''''
end

if((Select COUNT(*) from #Regions) != 0)
begin
	set @sWhere = @sWhere + ' And Jobs.Region in (select Region from #Regions)'
end

if((Select COUNT(*) from #Countries) != 0)
begin
	set @sWhere = @sWhere + ' And Jobs.Country in (select Country from #Countries)'
end

if((Select COUNT(*) from #Districts) != 0)
begin
	set @sWhere = @sWhere + ' And Jobs.BranchPlant in (select District from #Districts)'
end

if((Select COUNT(*) from #JobNumbers) != 0)
begin
	set @sWhere = @sWhere + ' And Jobs.JobNumber in (select JobNumber from #JobNumbers)'
end

if(@toolSize <> '' OR (Select COUNT(*) from #ToolCodes) != 0)
begin
	set @sWhere = @sWhere + ' And JarRuns.JarRunId in (select JarRunId from JarRunTools jrt with(nolock)
							left join ToolStrings t on t.ToolStringId = jrt.ToolStringId
							left join ToolStringFixedAssets tsfa with(nolock) on tsfa.ToolStringId = jrt.ToolStringId
							left join ItemNums i with(nolock) on i.ItemNum = tsfa.InventoryItemNum
							where jrt.JarRunId = JarRuns.JarRunId'

	if((Select COUNT(*) from #ToolPanels) != 0)
	begin
		set @sWhere = @sWhere + ' and i.ToolPanel in (select ToolPanel from #ToolPanels)'
	end
	
	if((Select COUNT(*) from #ToolCodes) != 0)
	begin
		set @sWhere = @sWhere + ' and i.ToolCode in (select ToolCode from #ToolCodes)'
	end

	if (@toolSize <> '')
	begin
		set @sWhere = @sWhere + ' and t.SizeId = ' + @toolSize
	end

	set @sWhere = @sWhere + ' group by JarRunId)'
end

if((Select COUNT(*) from #ServiceLines) != 0)
begin
	--select @sWhere = @sWhere + ' and ' + ServiceLine + ' = 1' from #ServiceLines
	set @sWhere += ' and ('

	declare @whereServicLines varchar(300)
	set @whereServicLines = ''
	select @whereServicLines += ServiceLine + ' = 1 ' + @serviceLineOperand + ' ' from #ServiceLines

	set @sWhere += Left(@whereServicLines, (Len(@whereServicLines)- (Len(@serviceLineOperand)+1))) + ')'
end

create table #DailyData
( 
    ActivityDay date
    , BranchPlant varchar(12)
    , Hemisphere varchar(25)
    , RegionDesc varchar(50)
    , CountryDesc varchar(50)
    , District varchar(100)
	, JobTotal smallint
	, GFATotal smallint
	, LWD_Pers smallint
	, MWD_Pers smallint
	, RSS_Pers smallint
	, DD_Pers smallint
	, LWD_MWD_Pers smallint
	, LWD_RSS_Pers smallint
	, DD_MWD_Pers smallint
	, DD_LWD_Pers smallint
	, BECFIELD smallint
	, DD smallint
	, EM smallint
	, GEOLINK smallint
	, HP smallint
	, LWD smallint
	, RSS smallint
	, SURVEY smallint
	, TENSOR smallint
)

set @sQuery = 'insert into #DailyData
	select ActivityDays.ActivityDay
	, jobs.BranchPlant
	, Regions.Hemisphere
	, Regions.RegionDesc
	, Countries.CountryDesc
	, BranchPlants.CompanyName as District
	, Count(Jobs.JobNumber) as JobTotal
	, Sum(0) as GFATotal
	, Sum(ActivityDays.LWD_Pers) as LWD_Pers
	, Sum(ActivityDays.MWD_Pers) as MWD_Pers
	, Sum(ActivityDays.RSS_Pers) as RSS_Pers
	, Sum(ActivityDays.DD_Pers) as DD_Pers
	, Sum(ActivityDays.LWD_MWD_Pers) as LWD_MWD_Pers
	, Sum(ActivityDays.LWD_RSS_Pers) as LWD_RSS_Pers
	, Sum(ActivityDays.DD_MWD_Pers) as DD_MWD_Pers
	, Sum(ActivityDays.DD_LWD_Pers) as DD_LWD_Pers
	, Sum(ActivityDays.BECFIELD) as BECFIELD
	, Sum(ActivityDays.DD) as DD
	, Sum(ActivityDays.EM) as EM
	, Sum(ActivityDays.GEOLINK) as GEOLINK
	, Sum(ActivityDays.HP) as HP
	, Sum(ActivityDays.LWD) as LWD
	, Sum(ActivityDays.RSS) as RSS
	, Sum(ActivityDays.SURVEY) as SURVEY
	, Sum(ActivityDays.TENSOR) as TENSOR
from (select CAST(JarActivities.StartDate As DATE) ActivityDay
		, JarActivities.JobId
		, Max(JarActivities.RunNumber) As RunNumber
		, Max(IsNull(ActivityPersonnel.LWD_Pers,0)) As LWD_Pers
		, Max(IsNull(ActivityPersonnel.MWD_Pers,0)) As MWD_Pers
		, Max(IsNull(ActivityPersonnel.RSS_Pers,0)) As RSS_Pers
		, Max(IsNull(ActivityPersonnel.DD_Pers,0)) As DD_Pers
		, Max(IsNull(ActivityPersonnel.LWD_MWD_Pers,0)) As LWD_MWD_Pers
		, Max(IsNull(ActivityPersonnel.LWD_RSS_Pers,0)) As LWD_RSS_Pers
		, Max(IsNull(ActivityPersonnel.DD_MWD_Pers,0)) As DD_MWD_Pers
		, Max(IsNull(ActivityPersonnel.DD_LWD_Pers,0)) As DD_LWD_Pers
		, Max(IsNull(ActivityServices.BECFIELD,0)) As BECFIELD
		, Max(IsNull(ActivityServices.DD,0)) As DD
		, Max(IsNull(ActivityServices.EM,0)) As EM
		, Max(IsNull(ActivityServices.GEOLINK,0)) As GEOLINK
		, Max(IsNull(ActivityServices.HP,0)) As HP
		, Max(IsNull(ActivityServices.LWD,0)) As LWD
		, Max(IsNull(ActivityServices.RSS,0)) As RSS
		, Max(IsNull(ActivityServices.SURVEY,0)) As SURVEY
		, Max(IsNull(ActivityServices.TENSOR,0)) As TENSOR
	from JarActivities WITH(NOLOCK)
	left join (
		select jas.JarActivityId
			, max(case when jas.ServiceLine = ''BECFIELD'' then 1 else 0 end) as BECFIELD
			, max(case when jas.ServiceLine = ''DD'' then 1 else 0 end) as DD
			, max(case when jas.ServiceLine = ''EM'' then 1 else 0 end) as EM
			, max(case when jas.ServiceLine = ''GEOLINK'' then 1 else 0 end) as GEOLINK
			, max(case when jas.ServiceLine = ''HP'' then 1 else 0 end) as HP
			, max(case when jas.ServiceLine = ''LWD'' then 1 else 0 end) as LWD
			, max(case when jas.ServiceLine = ''RSS'' then 1 else 0 end) as RSS
			, max(case when jas.ServiceLine = ''SURVEY'' then 1 else 0 end) as SURVEY
			, max(case when jas.ServiceLine = ''TENSOR'' then 1 else 0 end) as TENSOR
		from JarActivityServices jas WITH(NOLOCK)
		group by jas.JarActivityId, jas.ServiceLine
	) AS ActivityServices on ActivityServices.JarActivityId = JarActivities.JarActivityId
	left join (
		select jap.JarActivityId
		, Max(case when jp.ProductLine = ''LWD'' Then 1 Else 0 End) As LWD_Pers
		, Max(case when jp.ProductLine = ''MWD'' Then 1 Else 0 End) As MWD_Pers
		, Max(case when jp.ProductLine = ''RSS'' Then 1 Else 0 End) As RSS_Pers
		, Max(case when jp.ProductLine = ''DD'' Then 1 Else 0 End) As DD_Pers
		, Max(case when jp.ProductLine = ''LWD, MWD'' Then 1 Else 0 End) As LWD_MWD_Pers
		, Max(case when jp.ProductLine = ''LWD, RSS'' Then 1 Else 0 End) As LWD_RSS_Pers
		, Max(case when jp.ProductLine = ''DD, MWD'' Then 1 Else 0 End) As DD_MWD_Pers
		, Max(case when jp.ProductLine = ''DD, LWD'' Then 1 Else 0 End) As DD_LWD_Pers
		from JarActivityPersonnel jap WITH(NOLOCK)
		left join JobPersonnel jp WITH(NOLOCK) on jp.JobPersonnelID = jap.JobPersonnelId
		group by jap.JarActivityId
	) AS ActivityPersonnel on ActivityPersonnel.JarActivityId = JarActivities.JarActivityId'
	+ @sDailyWhere +
	' group by CAST(JarActivities.StartDate As DATE), JarActivities.JobId
) As ActivityDays
left join Jobs WITH(NOLOCK) on Jobs.JobId = ActivityDays.JobId
left join JarRuns WITH(NOLOCK) on JarRuns.JobId = ActivityDays.JobId and JarRuns.RunNumber = ActivityDays.RunNumber
left join Regions WITH(NOLOCK) on Regions.Region = Jobs.Region
left join Countries WITH(NOLOCK) on Countries.Country = Jobs.Country
left join BranchPlants WITH(NOLOCK) on BranchPlants.BranchPlant = Jobs.BranchPlant' + @sWhere + 
' Group By ActivityDays.ActivityDay, Jobs.BranchPlant, Regions.Hemisphere, Regions.RegionDesc, Countries.CountryDesc, BranchPlants.CompanyName'

--print (@sQuery)
exec(@sQuery)

Select
	CAST(ja.StartDate As DATE) ActivityDay
	, j.BranchPlant
	, ja.JobId
	, jas.ServiceLine + '_' + jas.Sensor as Sensor
INTO #DailyServiceSensors
From JarActivityServices jas
Left Join JarActivities ja on ja.JarActivityId = jas.JarActivityId
Left Join Jobs j on j.JobId = ja.JobId
Where j.BranchPlant in (select BranchPlant from #DailyData group by BranchPlant)
And CAST(ja.StartDate As DATE) in (select ActivityDay from #DailyData group by ActivityDay)
Group By BranchPlant, ja.JobId, CAST(ja.StartDate As DATE), jas.ServiceLine, jas.Sensor

DECLARE @Sensors TABLE
(
  Sensor varchar(100)
)

INSERT INTO @Sensors (Sensor)
SELECT Sensor
FROM #DailyServiceSensors
GROUP BY Sensor

declare @cols varchar(max)
declare @groupByCols varchar(max) 

SELECT @cols = STUFF((select ', ' + quotename(Sensor)
                        from @Sensors
                        order by Sensor
                        for xml path('') 
                      ), 1, 2, '')                    

SELECT @groupByCols = STUFF((select ', Sum(' + QUOTENAME(Sensor) + ') As ' + quotename(Sensor)
                        from @Sensors
                        order by Sensor
                        for xml path(''), root('GrpCols'), type).value('/GrpCols[1]','varchar(max)'
                      ), 1, 2, '')

set @sSql = 'select * from #DailyData'
			if (LEN(@cols) > 0)
			begin
				set @sSql = @sSql + ' left join (
					Select pvtActivityDay, pvtBranchPlant, ' + @groupByCols + '
					From 
					(
						select ActivityDay As pvtActivityDay, BranchPlant As pvtBranchPlant, Sensor 
						from #DailyServiceSensors AS t1
					) p 
					
					PIVOT (
							count([Sensor]) FOR Sensor IN ( '+ @cols +' )
						  ) 
					AS pvt 
					group by pvtActivityDay, pvtBranchPlant
				) as pvtSensors on pvtSensors.pvtActivityDay = #DailyData.ActivityDay and pvtSensors.pvtBranchPlant = #DailyData.BranchPlant'
			end
			set @sSql = @sSql + ' order by #DailyData.Hemisphere, #DailyData.RegionDesc, #DailyData.CountryDesc, #DailyData.District, #DailyData.ActivityDay'

--print (@sSql)
execute(@sSql)

drop table #DailyData
drop table #DailyServiceSensors
drop table #RevenueStatus
drop table #Regions
drop table #Countries
drop table #Districts
drop table #JobNumbers
drop table #ToolPanels
drop table #ToolCodes
drop table #ServiceLines




GO
/****** Object:  StoredProcedure [dbo].[usp_RunJobStatusCountReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_RunJobStatusCountReport]
	@xmlData xml
AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;

DECLARE @ViewBy AS varchar(10)
DECLARE @StartDate AS DATE
DECLARE @EndDate AS DATE
DECLARE @DateCounter AS DATE
DECLARE @LocationGroup AS VARCHAR(50)
DECLARE @IncludeZeroEntries AS VARCHAR(1)
DECLARE @locationWhereClause AS VARCHAR(MAX)
DECLARE @revenueAndServiceLineWhereClause AS VARCHAR(MAX)

DECLARE @startIndex AS VARCHAR(10)
DECLARE @pageSize AS VARCHAR(10)
DECLARE @sortField AS VARCHAR(100)
DECLARE @sortDir AS VARCHAR(64)

SELECT @ViewBy = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/ViewBy') T(c)
SELECT @StartDate = T.c.value('.', 'DATE') FROM @xmlData.nodes('/Filters/StartDate') T(c)
SELECT @EndDate = T.c.value('.', 'DATE') FROM @xmlData.nodes('/Filters/EndDate') T(c)
SELECT @LocationGroup = T.c.value('.', 'VARCHAR(50)') FROM @xmlData.nodes('/Filters/LocationGroup') T(c)
SELECT @IncludeZeroEntries = T.c.value('.', 'VARCHAR(50)') FROM @xmlData.nodes('/Filters/IncludeZeroEntries') T(c)
SELECT @locationWhereClause = T.c.value('.', 'VARCHAR(max)') FROM @xmlData.nodes('/Filters/LocationWhereClause')T(c);
SELECT @revenueAndServiceLineWhereClause = T.c.value('.', 'VARCHAR(max)') FROM @xmlData.nodes('/Filters/RevenueAndServiceLineWhereClause')T(c);


select T.c.value('.', 'VARCHAR(100)') as ServiceLine
INTO #tblServiceLines
from @xmlData.nodes('/Filters/ServiceLine/ServiceLineItem') T(c)

IF((Select COUNT(*) from #tblServiceLines) = 0)
BEGIN
	INSERT INTO #tblServiceLines
	Select distinct ServiceLine from JarServiceSensors(NOLOCK)
END

SELECT @startIndex = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/StartIndex')T(c);
SELECT @pageSize = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/PageSize')T(c);
SELECT @sortField = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/SortField')T(c);
SELECT @sortDir = T.c.value('.', 'VARCHAR(64)') FROM @xmlData.nodes('/Filters/SortDir')T(c);

-- set first and last day of week/month/year.
IF(@ViewBy = 'Week')
BEGIN
	Set @StartDate = CONVERT(DATE, DATEADD(DAY, 1 - DATEPART(WEEKDAY, @StartDate), CAST(@StartDate AS DATE)), 101) -- first day of week
	Set @EndDate = CONVERT(DATE, DATEADD(DAY, 7 - DATEPART(WEEKDAY, @EndDate), CAST(@EndDate AS DATE)) , 101) -- last day of week
END
ELSE IF(@ViewBy = 'Month')
BEGIN
	Set @StartDate = CONVERT(DATE, DATEADD(month, DATEDIFF(month, 0, @StartDate), 0), 101)  -- first day of month
	Set @EndDate = CONVERT(DATE, DATEADD(s, -1, DATEADD(mm, DATEDIFF(m, 0, @EndDate) + 1, 0)), 101)  -- last day of month
END
ELSE IF(@ViewBy = 'Year')
BEGIN
	Set @StartDate = CONVERT(DATE, DATEADD(yy, DATEDIFF(yy, 0, @StartDate), 0), 101)  -- first day of year
	Set @EndDate = CONVERT(DATE, DATEADD(yy, DATEDIFF(yy, 0, @EndDate) + 1, -1), 101)  -- last day of year
END

--create date range from start to end date.
CREATE TABLE #tblDateRanges
(
	ActivityDate DATE
)


Set @DateCounter = @StartDate
WHILE(@DateCounter <= @EndDate)
BEGIN
	INSERT INTO #tblDateRanges(ActivityDate)
	Select @DateCounter
	
	Set @DateCounter = DATEADD(DAY, 1, @DateCounter)
END

--Fill table with initial job data.
Select daterange.ActivityDate
		, j.JobId
		, r.RegionDesc as Region
		, c.CountryDesc as Country
		, j.BranchPlant
		, bp.CompanyName as BranchPlantName
		, (CASE WHEN (j.EndDate IS NULL OR j.EndDate > daterange.ActivityDate )
			THEN (Select top 1 JarActivityId from JarActivities(NOLOCK) ja Where ja.JobId = j.JobId AND CONVERT(DATE, ja.EndDate, 101) <= CONVERT(DATE, daterange.ActivityDate, 101) ORDER By ja.EndDate DESC)
			ELSE '00000000-0000-0000-0000-000000000000'
			END) as JarActivityId
INTO #tblJobs
from Jobs(NOLOCK) j
CROSS JOIN #tblDateRanges daterange
LEFT JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
LEFT JOIN Regions(NOLOCK) r on r.Region = j.Region
LEFT JOIN Countries(NOLOCK) c on c.Country = j.Country
WHERE (CONVERT(DATE, @StartDate, 101) <= CONVERT(DATE, ISNULL(j.EndDate, @EndDate), 101)) 
and (CONVERT(DATE, @EndDate, 101) >= CONVERT(DATE, j.StartDate, 101))
and j.IsDeleted = 0

--jobs details table.
CREATE TABLE #tblJobDetails
(
	ActivityDate DATE,
	JobId uniqueidentifier,
	Region varchar(100),
	Country varchar(100),
	BranchPlant varchar(100),
	BranchPlantName varchar(100),
	JarActivityId uniqueidentifier NULL,
	RevenueStatus VARCHAR(100),
	ServiceLine VARCHAR(100)
)

EXECUTE('
INSERT INTO #tblJobDetails
Select distinct jobs.ActivityDate
		, jobs.JobId
		, jobs.Region
		, jobs.Country
		, jobs.BranchPlant
		, jobs.BranchPlantName
		, jobs.JarActivityId
		, ja.RevenueStatus
		, jas.ServiceLine
from #tblJobs jobs
LEFT JOIN JarActivities(NOLOCK) ja ON ja.JarActivityId = jobs.JarActivityId
LEFT JOIN JarActivityServices(NOLOCK) jas ON jas.JarActivityId = jobs.JarActivityId
Where ' + @locationWhereClause + ' AND ' + @revenueAndServiceLineWhereClause + '
')

--GFA data
Select distinct
	CONVERT(DATE, gfa.FailureDate, 101) as FailureDate
	, gfa.GFAId
	, r.RegionDesc as Region
	, c.CountryDesc as Country
	, j.BranchPlant
	, bp.CompanyName as BranchPlantName
	, p.JarActivityServiceLine as ServiceLine
	, gfa.Is3030
INTO #tblGFAs
from GFAIncidents(NOLOCK) gfa
INNER JOIN ProductLines(NOLOCK) p ON p.SystemName = gfa.ProductLine
INNER JOIN Jobs(NOLOCK) j ON j.JobId = gfa.JobId
LEFT JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
LEFT JOIN Regions(NOLOCK) r on r.Region = j.Region
LEFT JOIN Countries(NOLOCK) c on c.Country = j.Country
Where CONVERT(DATE, gfa.FailureDate, 101) BETWEEN CONVERT(DATE, @StartDate, 101) AND CONVERT(DATE, @EndDate, 101)
AND j.IsDeleted = 0 AND gfa.IsDeleted = 0

--Runs data
Select a.EndDate, a.RunID, a.Region, a.Country, a.BranchPlant, a.BranchPlantName, p.JarActivityServiceLine as ServiceLine 
INTO #tblRuns
from(
	Select CONVERT(DATE, EndDate, 101) as EndDate, RunID, Region, Country, BranchPlant, BranchPlantName, SystemName
	FROM(
		Select distinct
			run.RunID
			, run.EndDate
			, r.RegionDesc as Region
			, c.CountryDesc as Country
			, j.BranchPlant
			, bp.CompanyName as BranchPlantName
			, run.HEL_LWD, run.HEL_EM, run.EM, run.PP as HYPERPULSE, run.RSS, run.TENSOR, run.GEOLINK, run.BECFIELD, run.GWD, run.WPR, run.MOTOR, run.AGS
		from Runs(NOLOCK) run
		INNER JOIN Wells(NOLOCK) w ON w.WellID =  run.WellID
		INNER JOIN Jobs(NOLOCK) j ON j.JobId = w.JobId
		LEFT JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
		LEFT JOIN Regions(NOLOCK) r on r.Region = j.Region
		LEFT JOIN Countries(NOLOCK) c on c.Country = j.Country
		Where CONVERT(DATE, run.EndDate, 101) BETWEEN CONVERT(DATE, @StartDate, 101) AND CONVERT(DATE, @EndDate, 101)
		AND j.IsDeleted = 0 AND run.IsDownHole = 1 AND run.IsDeleted = 0 AND w.IsDeleted = 0
	) pvt
	UNPIVOT (ServiceLineValue FOR SystemName IN (HEL_LWD, HEL_EM, EM, HYPERPULSE, RSS, TENSOR, GEOLINK, BECFIELD, GWD, WPR, MOTOR, AGS))AS unpvt
	Where ServiceLineValue = 1
)a
INNER JOIN ProductLines(NOLOCK) p ON p.SystemName = a.SystemName

--Incidents data
Select a.FailureDate, a.IncidentID, a.Region, a.Country, a.BranchPlant, a.BranchPlantName, p.JarActivityServiceLine as ServiceLine
INTO #tblIncidents
from(
Select distinct
	CONVERT(DATE, inc.FailureDate, 101) as FailureDate
	, inc.IncidentId
	, r.RegionDesc as Region
	, c.CountryDesc as Country
	, j.BranchPlant
	, bp.CompanyName as BranchPlantName
	, (CASE WHEN t.[Type] = 'HEL/LWD' THEN 'HEL_LWD'
			WHEN t.[Type] = 'HEL/EM' THEN 'HEL_EM'
			WHEN t.[Type] = 'RSS' THEN 'RSS'
			WHEN t.[Type] = 'EM' THEN 'EM'
			WHEN t.[Type] = 'HYPERPULSE' THEN 'HYPERPULSE'
			WHEN t.[Type] = 'AGS' THEN 'AGS'
			WHEN t.[Type] = 'BECFIELD' THEN 'BECFIELD'
			WHEN t.[Type] = 'DMT/AMS' THEN 'DMT_AMS'
			WHEN t.[Type] = 'GEOLINK' THEN 'GEOLINK'
			WHEN t.[Type] = 'GWD' THEN 'GWD'
			WHEN t.[Type] = 'MOTOR' THEN 'MOTOR'
			WHEN t.[Type] = 'TENSOR' THEN 'TENSOR'
			WHEN t.[Type] = 'WPR' THEN 'WPR'
			ELSE ''
		END) as SystemName
from Incidents(NOLOCK) inc
INNER JOIN Runs(NOLOCK) run ON run.RunID = inc.RunID
INNER JOIN Wells(NOLOCK) w ON w.WellID =  run.WellID
INNER JOIN ToolStringComponentInfo(NOLOCK) tsci ON tsci.IncidentID = inc.IncidentID
INNER JOIN ToolStrings(NOLOCK) t ON t.ToolStringID = tsci.ToolStringID
INNER JOIN Jobs(NOLOCK) j ON j.JobId = w.JobId
LEFT JOIN BranchPlants(NOLOCK) bp ON bp.BranchPlant = j.BranchPlant
LEFT JOIN Regions(NOLOCK) r on r.Region = j.Region
LEFT JOIN Countries(NOLOCK) c on c.Country = j.Country
Where CONVERT(DATE, inc.FailureDate, 101) BETWEEN CONVERT(DATE, @StartDate, 101) AND CONVERT(DATE, @EndDate, 101)
AND j.IsDeleted = 0 AND inc.IsDeleted = 0 AND run.IsDownHole = 1 AND run.IsDeleted = 0 AND w.IsDeleted = 0
)a
INNER JOIN ProductLines(NOLOCK) p ON p.SystemName = a.SystemName

--create result set
CREATE TABLE #tblResults
(
	ActivityDate DATE,
	WeekStartDate DATE,
	WeekEndDate DATE,
	ActivityYear INT,
	ActivityMonth INT,
	Region VARCHAR(100),
	Country VARCHAR(100),
	BranchPlant VARCHAR(100),
	BranchPlantName VARCHAR(100),
	ServiceLine VARCHAR(100),
	JobCount INT,
	GFACount INT,
	GFA3030Count INT,
	RunCount INT,
	IncidentCount INT
)

CREATE TABLE #tblLocations
(
	ActivityDate DATE,
	Region varchar(100),
	Country varchar(100),
	BranchPlant varchar(100),
	BranchPlantName varchar(100)
)

DECLARE @locationSql AS VARCHAR(MAX)
SET @locationSql = ' INSERT INTO #tblLocations
SELECT * 
from(
Select ActivityDate as ActivityDate, Region, Country, BranchPlant, BranchPlantName from #tblJobDetails
UNION
Select FailureDate as ActivityDate, Region, Country, BranchPlant, BranchPlantName from #tblGFAs
UNION
Select EndDate as ActivityDate, Region, Country, BranchPlant, BranchPlantName from #tblRuns
UNION
Select FailureDate as ActivityDate, Region, Country, BranchPlant, BranchPlantName from #tblIncidents 
) a WHERE Region IS NOT NULL AND ' + @locationWhereClause

EXECUTE(@locationSql)

INSERT INTO #tblResults(ActivityDate, WeekStartDate, WeekEndDate, ActivityYear, ActivityMonth, Region, Country, BranchPlant, BranchPlantName, ServiceLine)
Select distinct daterange.ActivityDate
		, CONVERT(DATE, DATEADD(DAY, 1 - DATEPART(WEEKDAY, daterange.ActivityDate), CAST(daterange.ActivityDate AS DATE)), 101) as WeekStartDate
		, CONVERT(DATE, DATEADD(DAY, 7 - DATEPART(WEEKDAY, daterange.ActivityDate), CAST(daterange.ActivityDate AS DATE)) , 101) as WeekEndDate
		, YEAR(daterange.ActivityDate) as ActivityYear
		, MONTH(daterange.ActivityDate) as ActivityMonth
		, loc.Region
		, loc.Country
		, loc.BranchPlant
		, loc.BranchPlantName
		, jss.ServiceLine
from #tblDateRanges daterange
LEFT JOIN #tblLocations loc ON loc.ActivityDate = daterange.ActivityDate
CROSS JOIN #tblServiceLines jss

--update result set totals
Update dest
	Set JobCount = ISNULL(
			(	
				Select COUNT(Distinct source.JobId) 
				from #tblJobDetails source
				Where source.ActivityDate = dest.ActivityDate
				AND source.Region = dest.Region
				AND source.Country = dest.Country
				AND source.BranchPlant = dest.BranchPlant
				AND source.BranchPlantName = dest.BranchPlantName
				AND source.ServiceLine = dest.ServiceLine
			), 0),
		GFACount = ISNULL(
			(	
				Select COUNT(Distinct GFAId) 
				from #tblGFAs source
				Where source.FailureDate = dest.ActivityDate
				AND source.Region = dest.Region
				AND source.Country = dest.Country 
				AND source.BranchPlant = dest.BranchPlant 
				AND source.BranchPlantName = dest.BranchPlantName 
				AND source.ServiceLine = dest.ServiceLine 
			), 0),
		GFA3030Count = ISNULL(
			(	
				Select COUNT(Distinct GFAId) 
				from #tblGFAs source
				Where source.FailureDate = dest.ActivityDate
				AND source.Region = dest.Region
				AND source.Country = dest.Country 
				AND source.BranchPlant = dest.BranchPlant 
				AND source.BranchPlantName = dest.BranchPlantName 
				AND source.ServiceLine = dest.ServiceLine 
				AND source.Is3030 = 1
			), 0),
		RunCount = ISNULL(
			(	
				Select COUNT(Distinct RunID) 
				from #tblRuns source
				Where source.EndDate = dest.ActivityDate
				AND source.Region = dest.Region
				AND source.Country = dest.Country 
				AND source.BranchPlant = dest.BranchPlant 
				AND source.BranchPlantName = dest.BranchPlantName 
				AND source.ServiceLine = dest.ServiceLine 
			), 0),
		IncidentCount = ISNULL(
			(	
				Select COUNT(Distinct IncidentID) 
				from #tblIncidents source
				Where source.FailureDate = dest.ActivityDate
				AND source.Region = dest.Region
				AND source.Country = dest.Country 
				AND source.BranchPlant = dest.BranchPlant 
				AND source.BranchPlantName = dest.BranchPlantName 
				AND source.ServiceLine = dest.ServiceLine 
			), 0)
From #tblResults dest

-- location group
Declare @locationGroupColumns as VARCHAR(MAX)
DECLARE @peakCountWhere as VARCHAR(MAX)

Set @locationGroupColumns = ' results.Region, '
Set @peakCountWhere = ' peakr.Region = results.Region '

--EXECUTE (@sqlPeakCount)

IF(@LocationGroup = 'Country')
BEGIN
	Set @locationGroupColumns = ' results.Region, results.Country, '
	Set @peakCountWhere = ' peakr.Region = results.Region AND peakr.Country = results.Country '
END
ELSE IF(@LocationGroup = 'BranchPlant')
BEGIN
	Set @locationGroupColumns = ' results.Region, results.Country, results.BranchPlant, results.BranchPlantName, '
	Set @peakCountWhere = ' peakr.Region = results.Region AND peakr.Country = results.Country AND peakr.BranchPlant = results.BranchPlant '
END

Set @peakCountWhere = @peakCountWhere + ' AND peakr.ServiceLine = results.ServiceLine '

--ViewBy Group.
DECLARE @groupByColumns as VARCHAR(MAX)

IF(@ViewBy = 'Week')
BEGIN
	Set @groupByColumns = ' results.WeekStartDate, results.WeekEndDate, ' + @locationGroupColumns + ' results.ServiceLine '
	Set @peakCountWhere = @peakCountWhere + ' AND peakr.ActivityDate BETWEEN results.WeekStartDate AND results.WeekEndDate '
END
ELSE IF(@ViewBy = 'Month')
BEGIN
	Set @groupByColumns = ' results.ActivityYear, results.ActivityMonth, ' + @locationGroupColumns + ' results.ServiceLine '
	Set @peakCountWhere = @peakCountWhere + ' AND peakr.ActivityYear = results.ActivityYear AND peakr.ActivityMonth = results.ActivityMonth '
END
ELSE IF(@ViewBy = 'Year')
BEGIN
	Set @groupByColumns = ' results.ActivityYear, ' + @locationGroupColumns + ' results.ServiceLine '
	Set @peakCountWhere = @peakCountWhere + ' AND peakr.ActivityYear = results.ActivityYear '
END
ELSE
BEGIN
	Set @groupByColumns = ' results.ActivityDate, ' + @locationGroupColumns + ' results.ServiceLine '
END

--SUM columns.
Declare @JobCountClause AS VARCHAR(MAX)
DECLARE @sumColumns as VARCHAR(MAX)

Set @JobCountClause = 
	(CASE WHEN @ViewBy = 'Day' THEN ' SUM(results.JobCount) ' ELSE 
		' (CASE WHEN COUNT(Distinct (CASE WHEN results.JobCount > 0 THEN results.ActivityDate ELSE NULL END)) > 0 THEN 
			SUM(results.JobCount) / COUNT(Distinct (CASE WHEN results.JobCount > 0 THEN results.ActivityDate ELSE NULL END))
		  ELSE 0
		  END) '
	END)

Set @sumColumns = '
	'+ @JobCountClause +' as JobCount,
	'+(CASE WHEN @ViewBy = 'Day' THEN ' NULL ' ELSE ' (SELECT top 1 SUM(JobCount) from #tblResults peakr Where ' + @peakCountWhere + ' GROUP BY ActivityDate ORDER by SUM(JobCount) DESC) ' END) + ' as PeakJobCount,
	SUM(results.GFACount) as GFACount, 
	SUM(results.GFA3030Count) as GFA3030Count, 
	SUM(results.RunCount) as RunCount, 
	SUM(results.IncidentCount) as IncidentCount '

--Include Zero Values.
DECLARE @IncludeZeroClause as VARCHAR(MAX)
Set @IncludeZeroClause = ''
IF(@IncludeZeroEntries <> '1')
BEGIN
	Set @IncludeZeroClause = ' HAVING ' + @JobCountClause + ' > 0 '
END

DECLARE @sql AS VARCHAR(MAX)
Set @sql = ' 
	  Select ' + @groupByColumns + ',' + @sumColumns +
	' from #tblResults results ' +
	--' WHERE Region IS NOT NULL ' +
	' GROUP by  ' + @groupByColumns + @IncludeZeroClause

DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') t '

EXECUTE (@sqlString)

DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, * From ( ' + 
		@sql + ') query ) page 
		WHERE page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir

EXECUTE(@pagingSql)

DROP TABLE #tblServiceLines
DROP TABLE #tblDateRanges
DROP TABLE #tblJobs
DROP TABLE #tblJobDetails
DROP TABLE #tblGFAs
DROP TABLE #tblRuns
DROP TABLE #tblIncidents
DROP TABLE #tblLocations
DROP TABLE #tblResults


END

GO
/****** Object:  StoredProcedure [dbo].[usp_RunKitDistributionMapReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_RunKitDistributionMapReport]
(
	@xmlData xml
)
AS

declare @Region varchar(max)

select @Region = T.c.value('.', 'varchar(max)') 
from 
@xmlData.nodes('/Filters/Region') T(c)


SET ANSI_NULLS ON
IF (@Region IS NOT NULL AND @Region != '')
BEGIN
	-----BranchPlants--------------
	SELECT	IsNull(r.Region,'') as Region, IsNull(r.RegionDesc,'') as RegionDesc,
			IsNull(b.BranchPlant,'') as BranchPlant, IsNull(b.CompanyName,'') as CompanyName, COUNT(*) AS NumOfKit,
			b.Longitude, b.Latitude 
	FROM FixedAssets f WITH(NOLOCK)
	INNER JOIN ItemNums i WITH(NOLOCK) ON i.ItemNum = f.InventoryItemNum AND i.IsAsset = 1 AND i.ToolCode = 'KIT'  --TODO: Do we need to use 'KIT' check
    LEFT JOIN BranchPlants b WITH(NOLOCK) ON f.BranchPlant = b.BranchPlant 
    LEFT JOIN Regions r WITH(NOLOCK) ON b.Region = r.Region
    WHERE b.Region = @Region
    GROUP BY r.Region, r.RegionDesc, b.BranchPlant, b.CompanyName, b.Longitude, b.Latitude 

	-----BranchPlants with Tool Panels--------------
	SELECT	IsNull(r.Region,'') as Region, IsNull(r.RegionDesc,'') as RegionDesc,
			IsNull(b.BranchPlant,'') as BranchPlant, IsNull(b.CompanyName,'') as CompanyName,
			IsNull(i.ToolPanel,'') as ToolPanel, COUNT(*) AS NumOfKit
	FROM FixedAssets f WITH(NOLOCK)
	INNER JOIN ItemNums i WITH(NOLOCK) ON i.ItemNum = f.InventoryItemNum AND i.IsAsset = 1 AND i.ToolCode = 'KIT'  --TODO: Do we need to use 'KIT' check
    LEFT JOIN BranchPlants b WITH(NOLOCK) ON f.BranchPlant = b.BranchPlant 
    LEFT JOIN Regions r WITH(NOLOCK) ON b.Region = r.Region
    WHERE b.Region = @Region
    GROUP BY r.Region, r.RegionDesc, b.BranchPlant, b.CompanyName, i.ToolPanel
    order by i.ToolPanel 	
END
ELSE 
BEGIN
	-----Regions---------
	SELECT IsNull(r.Region,'') as Region, IsNull(r.RegionDesc,'') as RegionDesc, COUNT(*) AS NumOfKit, 
	r.Longitude, r.Latitude 
	FROM FixedAssets f WITH(NOLOCK)
	INNER JOIN ItemNums i WITH(NOLOCK) ON i.ItemNum = f.InventoryItemNum AND i.IsAsset = 1 AND i.ToolCode = 'KIT'  --TODO: Do we need to use 'KIT' check
    LEFT JOIN BranchPlants b WITH(NOLOCK) ON f.BranchPlant = b.BranchPlant 
    LEFT JOIN Regions r WITH(NOLOCK) ON b.Region = r.Region
    GROUP BY r.Region, r.RegionDesc, r.Longitude, r.Latitude 

	-----Regions with Tool Panels---------
	SELECT IsNull(r.Region,'') as Region, IsNull(r.RegionDesc,'') as RegionDesc, IsNull(i.ToolPanel,'') as ToolPanel, COUNT(*) AS NumOfKit
	FROM FixedAssets f WITH(NOLOCK)
	INNER JOIN ItemNums i WITH(NOLOCK) ON i.ItemNum = f.InventoryItemNum AND i.IsAsset = 1 AND i.ToolCode = 'KIT'  --TODO: Do we need to use 'KIT' check
    LEFT JOIN BranchPlants b WITH(NOLOCK) ON f.BranchPlant = b.BranchPlant 
    LEFT JOIN Regions r WITH(NOLOCK) ON b.Region = r.Region
    GROUP BY r.Region, r.RegionDesc, i.ToolPanel
    order by i.ToolPanel
END
GO
/****** Object:  StoredProcedure [dbo].[usp_RunNCRFaultCodeParetoReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[usp_RunNCRFaultCodeParetoReport]
	@xmlData xml
AS
/*
declare @xmlData xml

set @xmlData = '<Filters>
					<ViewType>Location</ViewType>
					<FromDate>01/24/2013</FromDate>
					<ToDate>02/24/2013</ToDate></Filters>'
*/

declare @viewType varchar(256)
declare @fromDate varchar(256)
declare @toDate varchar(256)

select @fromDate = T.c.value('.', 'varchar(256)') 
from 
@xmlData.nodes('/Filters/FromDate') T(c)

select @toDate = T.c.value('.', 'varchar(256)') 
from 
@xmlData.nodes('/Filters/ToDate') T(c)

select @viewType = T.c.value('.', 'varchar(256)') 
from 
@xmlData.nodes('/Filters/ViewType') T(c)


if @viewType = 'Fault Code'
begin	
	Select count(nf.NCRFailureCodeId) as iCount, nf.NCRFailureCodeId, nr.FailCode as Code
    From NCRRequests nr (NOLOCK)
    Left Join NCRFailureCodes nf (NOLOCK) on nr.FailCode = nf.FailCode
    Left Join Requests r (NOLOCK) on nr.RequestId = r.RequestId
    WHERE r.RequestType = 'NCR' AND r.DateEntered BETWEEN '' + @fromDate + '' AND '' + @toDate + ''
    Group By nf.NCRFailureCodeId, nr.FailCode
    Having count(nf.NCRFailureCodeId) > 0
    Order By iCount DESC
end	
else if @viewType = 'Item Num'
begin		
	Select count(nr.PartNumber) as iCount, nr.PartNumber as Code
    From NCRRequests nr (NOLOCK)
    Left Join Requests r (NOLOCK) on nr.RequestId = r.RequestId
    WHERE r.RequestType = 'NCR' AND r.DateEntered BETWEEN '' + @fromDate + '' AND '' + @toDate + ''
    Group By nr.PartNumber
    Having count(nr.PartNumber) > 0
    Order By iCount DESC
end
else	-- @viewType = 'Vendor'
begin
	Select count(nr.Vendor) as iCount, nr.Vendor as Code
    From NCRRequests nr (NOLOCK)
    Left Join Requests r (NOLOCK) on nr.RequestId = r.RequestId
    WHERE r.RequestType = 'NCR' AND r.DateEntered BETWEEN '' + @fromDate + '' AND '' + @toDate + ''
    Group By nr.Vendor
    Having count(nr.Vendor) > 0
    Order By iCount DESC
end

GO
/****** Object:  StoredProcedure [dbo].[usp_RunRelBitDataReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_RunRelBitDataReport]
	@xmlData xml
AS
/*
declare @xmlData xml
set @xmlData = '<Filters>
					<OptionalFilters>
						<Id Name="TVDEnd" Operator="&gt;" Value="100" Conjunction="OR" />
						<Id Name="MDEnd" Operator="&gt;" Value="100" Conjunction="" />
					</OptionalFilters>
				</Filters>'
*/
declare @sSql varchar(max)
declare @sFrom varchar(max)
declare @sWhere varchar(max)
declare @fromDate varchar(256)
declare @toDate varchar(256)
declare @jobNumber varchar(50)
declare @rig varchar(50)
declare @well varchar(50)
declare @bitManufacturer varchar(50)
declare @bitSerialNumber varchar(50)
declare @bitModel varchar(50)

select @fromDate = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/DateRangeFrom') T(c)
select @toDate = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/DateRangeTo') T(c)
select @jobNumber = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/JobNumber') T(c)
select @rig = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Rig') T(c)
select @well = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Well') T(c)
select @bitManufacturer = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/BitManufacturer') T(c)
select @bitSerialNumber = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/BitSerialNumber') T(c)
select @bitModel = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/BitModel') T(c)

Select T.c.value('.', 'varchar(max)') as Region
Into #Regions
From @xmlData.nodes('/Filters/Regions/Id') T(c)
	
Select T.c.value('.', 'varchar(max)') as Country
Into #Countries
From @xmlData.nodes('/Filters/Countries/Id') T(c)

Select T.c.value('.', 'varchar(max)') as District
Into #Districts
From @xmlData.nodes('/Filters/Districts/Id') T(c)

Select T.c.value('.', 'varchar(max)') as CustomerName
Into #Customers
From @xmlData.nodes('/Filters/Customers/Id') T(c)

Select 
	T.c.value('@Name', 'varchar(500)') as FieldName
	, T.c.value('@Operator', 'varchar(50)') as FieldOperator
	, T.c.value('@Value', 'varchar(500)') as FieldValue
	, T.c.value('@Conjunction', 'varchar(100)') as FieldConjunction
Into #OptionalFilters
From @xmlData.nodes('/Filters/OptionalFilters/Id') T(c)

SET @sSql = 'SELECT Runs.RunID
			, Year(Runs.EndDate) As RunYear
			, Month(Runs.EndDate) As RunMonth
			, Regions.RegionDesc
			, Districts.DistrictDesc
			, Customers.CustomerName As Client
			, Jobs.JobNumber
			, Wells.Well
			, Runs.RunNumber
			, Runs.EndDate
			, Runs.DrillHrs
			, (dbo.LengthConvert(Runs.MDEnd,Runs.MDEndUOM,''ft'') - dbo.LengthConvert(Runs.MDStart,Runs.MDStartUOM,''ft'')) As MDDrillFt
			, BitData.BitManufacturer
			, BitData.SerialNumber As BitSerialNumber
			, dbo.LengthConvert(BitData.BitSize, BitData.BitSizeUOM, ''in'') As BitSize
			, BitData.BitType
			, BitData.Model
			, BitData.BitTFA 
			, BitData.BitTFAUOM
			, dbo.PressureConvert(BitData.BitDeltaP, BitData.BitDeltaPUOM, ''psi'') As BitDeltaP
			, BitData.EstimatedFlowRate
			, BitData.Comments
			, BitData.MaxOuterD
			, BitData.TopConnectionType
			, BitData.GaugeType
			, dbo.LengthConvert(BitData.GaugeLength, BitData.GaugeLengthUOM, ''ft'') GaugeLength
			, dbo.LengthConvert(BitData.PDCCutterSize, BitData.PDCCutterSizeUOM, ''in'') As PDCCutterSize
			, BitData.NumberOfBlades
			, dbo.LengthConvert(BitData.BitLength, BitData.BitLengthUOM, ''ft'') As BitLength'

SET @sFrom = ' FROM Jobs WITH(NOLOCK)
				LEFT JOIN Regions WITH(NOLOCK) ON Jobs.Region = Regions.Region
				LEFT JOIN Districts WITH(NOLOCK) ON Jobs.BranchPlant = Districts.District
				LEFT JOIN Customers WITH(NOLOCK) ON Jobs.CustomerID = Customers.CustomerID
				LEFT JOIN Wells WITH(NOLOCK) ON Jobs.JobID = Wells.JobID AND Wells.IsDeleted = 0
				LEFT JOIN Runs WITH(NOLOCK) ON Runs.WellID = Wells.WellID AND Runs.IsDeleted = 0
				LEFT JOIN Countries WITH(NOLOCK) ON Jobs.Country = Countries.Country
				LEFT JOIN BitData WITH(NOLOCK) ON BitData.RunID = Runs.RunID'

SET @sWhere = ' Where Jobs.IsDeleted = 0 And Runs.IsDownHole = 1'

if (@fromDate <> '')
begin
	set @sWhere = @sWhere + ' And Runs.EndDate >= ''' + @fromDate + ''''
end

if (@toDate <> '')
begin
	set @sWhere = @sWhere + ' And Runs.EndDate <= ''' + @toDate + ''''
end


if((Select COUNT(*) from #Regions) != 0)
begin
	set @sWhere = @sWhere + ' And Regions.RegionDesc in (select Region from #Regions)'
end

if((Select COUNT(*) from #Countries) != 0)
begin
	set @sWhere = @sWhere + ' And Countries.CountryDesc in (select Country from #Countries)'
end

if((Select COUNT(*) from #Districts) != 0)
begin
	set @sWhere = @sWhere + ' And Jobs.BranchPlant in (select District from #Districts)'
end

if((Select COUNT(*) from #Customers) != 0)
begin
	set @sWhere = @sWhere + ' And Customers.CustomerName in (select CustomerName from #Customers)'
end

if (@jobNumber <> '')
begin
	set @sWhere = @sWhere + ' And Jobs.JobNumber like ''' + REPLACE(@jobNumber,'*','%') + ''''
end

if (@rig <> '')
begin
	set @sWhere = @sWhere + ' And Jobs.Rig like ''' + REPLACE(@rig,'*','%') + ''''
end

if (@well <> '')
begin
	set @sWhere = @sWhere + ' And Wells.Well like ''' + REPLACE(@well,'*','%') + ''''
end

if (@bitManufacturer <> '')
begin
	set @sWhere = @sWhere + ' And BitData.BitManufacturer like ''' + REPLACE(@bitManufacturer,'*','%') + ''''
end

if (@bitSerialNumber <> '')
begin
	set @sWhere = @sWhere + ' And BitData.SerialNumber like ''' + REPLACE(@bitSerialNumber,'*','%') + ''''
end

if (@bitModel <> '')
begin
	set @sWhere = @sWhere + ' And BitData.Model like ''' + REPLACE(@bitModel,'*','%') + ''''
end

if((Select COUNT(*) from #OptionalFilters) != 0)
begin
	declare @sConjunc varchar(5)
	set @sConjunc = 'And'

	select
		@sWhere = @sWhere + ' ' + @sConjunc + Case When FieldConjunction = 'OR' And @sConjunc <> 'OR' Then ' (' Else ' ' End
		+ FieldName + ' ' 
		+ FieldOperator 
		+ ' ' + FieldValue + 
		Case When @sConjunc = 'OR' And FieldConjunction <> 'OR' Then ')' Else '' End
		, @sConjunc = FieldConjunction
	from #OptionalFilters
end

DECLARE @query VARCHAR(MAX)
SET @query = @sSql + @sFrom + @sWhere + ' ORDER BY RunYear, RunMonth, RegionDesc, DistrictDesc, JobNumber, Well, Runs.EndDate'

print @query
EXEC(@query)

DROP TABLE #Regions
DROP TABLE #Countries
DROP TABLE #Districts
DROP TABLE #Customers
DROP TABLE #OptionalFilters




GO
/****** Object:  StoredProcedure [dbo].[usp_RunRelBitRunDetailReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_RunRelBitRunDetailReport]
	@xmlData xml
AS

/*
declare @xmlData xml
--set @xmlData = '<Filters><DateRangeFrom>2014-10-1 00:00:00</DateRangeFrom><DateRangeTo>2014-12-31 23:59:59</DateRangeTo><ToolTypes><Id>HEL/LWD</Id><Id>HyperPulse</Id></ToolTypes><OptionalFields><Id>BHA.SurfaceRPM</Id><Id>Countries.CountryDesc</Id><Id>Hydraulics.SPP</Id><Id>Jobs.Latitude</Id><Id>MudData.SolidPercentageMax</Id><Id>PulseCountData.TotalNumberOfPulses</Id><Id>Runs.ReasonsForPooh</Id><Id>Wells.WaterDepth</Id><Id>BHA.Torque</Id><Id>Hydraulics.GasFlowRate</Id><Id>Jobs.LocationCountry</Id><Id>Jobs.Longitude</Id><Id>MudData.WaterPercentageMax</Id><Id>Runs.AverageROP</Id><Id>Runs.RotatingHrs</Id><Id>BHA.WeightOnBit</Id><Id>Hydraulics.FlowRate</Id><Id>Jobs.LocationCounty</Id><Id>MudData.OilPercentageMax</Id><Id>MudData.BaseFluidEnd</Id><Id>Runs.RunEngineers</Id><Id>Runs.RunToolSizes</Id><Id>BitData.BitDeltaP</Id><Id>Hydraulics.OrificeSize</Id><Id>Jobs.LocationState</Id><Id>MudData.SandPercentageMax</Id><Id>MudData.pHMax</Id><Id>Runs.Formation</Id><Id>Runs.RunTools</Id></OptionalFields><OptionalTables><Id>BHA</Id><Id>Countries</Id><Id>PulseCountData</Id><Id>BitData</Id></OptionalTables></Filters>'
set @xmlData = '<Filters><DateRangeFrom>2014-7-1 00:00:00</DateRangeFrom><DateRangeTo>2014-12-31 23:59:59</DateRangeTo><CustomProperties><Id>HeatWave 180C</Id><Id>HEX (200C Rated Tool)</Id></CustomProperties></Filters>'
*/

declare @sSql varchar(max)
declare @sFrom varchar(max)
declare @sWhere varchar(max)
declare @fromDate varchar(256)
declare @toDate varchar(256)
declare @jobNumber varchar(50)
declare @rig varchar(50)
declare @well varchar(50)
declare @offShore varchar(3)
declare @tffCiNci varchar(3)
declare @toolSize varchar(10)
declare @extendedRange varchar(3)
declare @customerNumberWhereClause varchar(max)
declare @customerNameWhereClause varchar(max)

select @fromDate = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/DateRangeFrom') T(c)
select @toDate = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/DateRangeTo') T(c)
select @jobNumber = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/JobNumber') T(c)
select @rig = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Rig') T(c)
select @well = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Well') T(c)
select @offShore = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/OffShore') T(c)
select @tffCiNci = T.c.value('.', 'varchar(3)') from @xmlData.nodes('/Filters/TFFCINCI') T(c)
select @toolSize = T.c.value('.', 'varchar(10)') from @xmlData.nodes('/Filters/ToolSize') T(c)
select @extendedRange = T.c.value('.', 'varchar(3)') from @xmlData.nodes('/Filters/ExtendedRange') T(c)
select @customerNumberWhereClause = T.c.value('.', 'varchar(max)') from @xmlData.nodes('/Filters/CustomerNumberWhereClause') T(c)
select @customerNameWhereClause = T.c.value('.', 'varchar(max)') from @xmlData.nodes('/Filters/CustomerNameWhereClause') T(c)

Select T.c.value('.', 'varchar(max)') as Region
Into #Regions
From @xmlData.nodes('/Filters/Regions/Id') T(c)
	
Select T.c.value('.', 'varchar(max)') as Country
Into #Countries
From @xmlData.nodes('/Filters/Countries/Id') T(c)

Select T.c.value('.', 'varchar(max)') as District
Into #Districts
From @xmlData.nodes('/Filters/Districts/Id') T(c)

Select T.c.value('.', 'varchar(max)') as PartTypeId
Into #PartTypes
From @xmlData.nodes('/Filters/PartTypes/Id') T(c)

Select T.c.value('.', 'varchar(max)') as CustomProperty
Into #CustomProperties
From @xmlData.nodes('/Filters/CustomProperties/Id') T(c)

Select T.c.value('.', 'varchar(max)') as ToolType
Into #ToolTypes
From @xmlData.nodes('/Filters/ToolTypes/Id') T(c)

Select T.c.value('.', 'varchar(max)') as OptionalField
Into #OptionalFields
From @xmlData.nodes('/Filters/OptionalFields/Id') T(c)

Select T.c.value('.', 'varchar(max)') as OptionalTable
Into #OptionalTables
From @xmlData.nodes('/Filters/OptionalTables/Id') T(c)

Select 
	T.c.value('@Name', 'varchar(500)') as FieldName
	, T.c.value('@Operator', 'varchar(50)') as FieldOperator
	, T.c.value('@Value', 'varchar(500)') as FieldValue
	, T.c.value('@Conjunction', 'varchar(100)') as FieldConjunction
Into #OptionalFilters
From @xmlData.nodes('/Filters/OptionalFilters/Id') T(c)

SET @sSql = 'SELECT
				 Year(Runs.EndDate) As RunYear
				, Month(Runs.EndDate) As RunMonth
				, Regions.RegionDesc
				, Districts.DistrictDesc
				, Customers.CustomerName
				, Jobs.JobNumber
				, Jobs.Rig
				, Jobs.RigType
				, Jobs.Field
				, tsci.HEL_LWD
				, tsci.RSS
				, tsci.EM
				, tsci.PP
				, tsci.HEL_EM
				, tsci.TENSOR
				, tsci.BECFIELD
				, tsci.GEOLINK
				, tsci.MOTOR
				, tsci2.HeatWave
				, tsci2.HEX
				, Wells.Well
				, Runs.RunNumber
				, Cast(Jobs.OffShore as tinyint) As OffShore
				, Runs.StartDate As InHoleDate
				, Runs.EndDate As OutHoleDate
				, tsci2.TFF
				, tsci2.CSI
				, tsci2.OS
				, tsci2.TFFComp
				, Incidents.AcceptedLostTime
				, Runs.OperHrs
				, Runs.CircHrs
				, Runs.DrillHrs
				, dbo.LengthConvert(Runs.MDStart,Runs.MDStartUOM,''ft'') As MDStart
				, dbo.LengthConvert(Runs.MDEnd,Runs.MDEndUOM,''ft'') As MDEnd
				, (dbo.LengthConvert(Runs.MDEnd,Runs.MDEndUOM,''ft'') - dbo.LengthConvert(Runs.MDStart,Runs.MDStartUOM,''ft'')) As MDDistance
				, dbo.LengthConvert(Runs.TVDStart,Runs.TVDStartUOM,''ft'') As TVDStart
				, dbo.LengthConvert(Runs.TVDEnd,Runs.TVDEndUOM,''ft'') As TVDEnd
				, dbo.LengthConvert(Hydraulics.HoleSize,Hydraulics.HoleSizeUOM,''in'') As HoleSize
				, dbo.PressureConvert(Hydraulics.MaxPressure,Hydraulics.MaxPressureUOM,''psi'') as MaxHydrostaticPressure
				, dbo.PressureConvert(Hydraulics.MaxOperPressure,Hydraulics.MaxOperPressureUOM,''psi'') as MaxOperPressure
				, dbo.PressureConvert(Hydraulics.MaxObservedPressure,Hydraulics.MaxObservedPressureUOM,''psi'') As MaxObservedPressure
				, dbo.TempConvert(MudData.BoreHoleTempMax,MudData.BoreHoleTempUnits,''°F'') As MaxTemp
				, dbo.DensityConvert(MudData.DensityEnd,MudData.DensityUnits,''ppg'') As MudDensity
				, dbo.DogLegConvert(MotorData.MaxDogleg,MotorData.MaxDoglegUOM,''deg/100 ft'') AS MaxDoglegRotating
				, dbo.DogLegConvert(MotorData.MaxDoglegSliding,MotorData.MaxDoglegSlidingUOM,''deg/100 ft'') AS MaxDoglegSliding
				, SurveyData.MaxInc
				, MotorData.SerialNumber As MotorSerialNumber
				, dbo.LengthConvert(MotorData.MotorSize,MotorData.MotorSizeUOM,''in'') As MotorSize
				, dbo.LengthConvert(MotorData.Length,MotorData.LengthUOM,''ft'') As MotorLength
				, MotorData.MotorType
				, MotorData.Manufacturer
				, MotorData.LobesRS
				, MotorData.MotorRPM
				, dbo.PressureConvert(MotorData.DeltaPOnBottom,MotorData.DeltaPOnBottomUOM,''psi'') As MotorOnBottom
				, dbo.PressureConvert(MotorData.DeltaPOffBottom,MotorData.DeltaPOffBottomUOM,''psi'') As MotorOffBottom
				, dbo.PressureConvert(MotorData.MotorDifferential,MotorData.MotorDifferentialUOM,''psi'') As MotorDifferential'

if ((select COUNT(*) from #OptionalFields) != 0)
begin
	declare @sToolTypeFilter varchar(50)
	if ((Select COUNT(*) from #ToolTypes) != 0)
	begin
		set @sToolTypeFilter = ' And t.[Type] in (select ToolType from #ToolTypes)'
	end
	else
	begin
		set @sToolTypeFilter = ''
	end

	Select @sSql = @sSql + ', ' + Case OptionalField 
					When 'Runs.AverageROP' Then 'dbo.VelocityConvert(Runs.AverageROP, Runs.AverageROPUOM, ''ft/hr'') As AverageROP'
					When 'BitData.BitDeltaP' Then 'dbo.PressureConvert(BitData.BitDeltaP, BitData.BitDeltaPUOM, ''psi'') As BitDeltaP'
					When 'Hydraulics.GasFlowRate' Then 'dbo.VolumeConvert(Hydraulics.GasFlowRate, Hydraulics.GasFlowRateUOM, ''gpm'') As GasFlowRate'
					When 'Hydraulics.FlowRate' Then 'dbo.VolumeConvert(Hydraulics.FlowRate, Hydraulics.FlowRateUOM, ''gpm'') As FlowRate'
					When 'Hydraulics.OrificeSize' Then 'Hydraulics.Orifice As OrificeSize'
					When 'Hydraulics.SPP' Then 'dbo.PressureConvert(Hydraulics.SPP, Hydraulics.SPPUOM, ''psi'') As SPP'
					When 'BHA.Torque' Then 'dbo.TorqueConvert(BHA.Torque, BHA.TorqueUOM, ''ft-lbs'') As Torque'
					When 'Wells.WaterDepth' Then 'dbo.LengthConvert(Wells.WaterDepth, Wells.WaterDepthUOM, ''ft'') As WaterDepth'
					When 'BHA.WeightOnBit' Then 'dbo.WeightConvert(BHA.WeightOnBit, BHA.WeightOnBitUOM, ''klb'') As WeightOnBit'
					When 'Runs.RunTools' 
					Then 'STUFF((Select '', '' + t.SerialNumber From ToolStrings (NOLOCK) t
								Left Join ToolStringComponentInfo (NOLOCK) tsci ON tsci.ToolStringId = t.ToolStringId 
								Where tsci.RunID = Runs.RunId Group By t.SerialNumber FOR XML PATH ('''')
						),1,2,'''') AS RunTools'
					When 'Runs.RunEngineers' 
					Then 'STUFF((Select '', '' + e.FirstName + '' '' + e.LastName + ''('' + e.ProductLine + '')'' From EngineersOnDuty (NOLOCK) e
							Where e.RunID = Runs.RunId Group By e.LastName, e.FirstName, e.ProductLine FOR XML PATH ('''')
						),1,2,'''') AS RunEngineers'
					When 'Runs.RunToolSizes'
					Then 'STUFF((Select '', '' + tss.[Size] From ToolStrings (NOLOCK) t
							Left Join ToolStringSize (NOLOCK) tss ON tss.ToolSizeID = t.SizeId
							Left Join ToolStringComponentInfo (NOLOCK) tsci ON tsci.ToolStringId = t.ToolStringId 
							Where t.SizeId Is Not NULL And t.SizeId <> 0'
							+ @sToolTypeFilter +
							' And tsci.RunID = Runs.RunId Group By tss.[Size] FOR XML PATH ('''')
						),1,2,'''') AS RunToolSizes'
					Else OptionalField End
					From #OptionalFields
end

SET @sFrom = ' From Jobs WITH(NOLOCK)
				Left Join Regions WITH(NOLOCK) ON Regions.Region = Jobs.Region
				Left Join Districts WITH(NOLOCK) ON Districts.District = Jobs.BranchPlant
				Left Join Customers WITH(NOLOCK) ON Jobs.CustomerID = Customers.CustomerID
				Left Join Wells WITH(NOLOCK) ON Jobs.JobID = Wells.JobID AND Wells.IsDeleted = 0
				Left Join Runs WITH(NOLOCK) ON Wells.WellID = Runs.WellID AND Runs.IsDeleted = 0
				Left Join MudData WITH(NOLOCK) ON Runs.RunID = MudData.RunID
				Left Join Hydraulics WITH(NOLOCK) ON Runs.RunID = Hydraulics.RunID
				Left Join Incidents WITH(NOLOCK) ON Runs.RunID = Incidents.RunID
				Left Join MotorData WITH(NOLOCK) ON Runs.RunID = MotorData.RunID
				Left Join SurveyData WITH(NOLOCK) ON Runs.RunID = SurveyData.RunID
				Left Join (
					Select
					ToolStringComponentInfo.RunID
					, Max(Case When ToolStrings.[Type] = ''HEL/LWD'' Then 1 Else 0 End) As HEL_LWD
					, Max(Case When ToolStrings.[Type] = ''RSS'' Then 1 Else 0 End) As RSS
					, Max(Case When ToolStrings.[Type] = ''EM'' Then 1 Else 0 End) As EM
					, Max(Case When ToolStrings.[Type] = ''HYPERPULSE'' Then 1 Else 0 End) As PP
					, Max(Case When ToolStrings.[Type] = ''HEL/EM'' Then 1 Else 0 End) As HEL_EM
					, Max(Case When ToolStrings.[Type] = ''TENSOR'' Then 1 Else 0 End) As TENSOR
					, Max(Case When ToolStrings.[Type] = ''BECFIELD'' Then 1 Else 0 End) As BECFIELD
					, Max(Case When ToolStrings.[Type] = ''GEOLINK'' Then 1 Else 0 End) As GEOLINK
					, Max(Case When ToolStrings.[Type] = ''MOTOR'' Then 1 Else 0 End) As MOTOR
					From ToolStringComponentInfo WITH(NOLOCK)
					Left Join ToolStrings WITH(NOLOCK) ON ToolStrings.ToolStringID = ToolStringComponentInfo.ToolStringID
					Left Join PartTypes WITH(NOLOCK) ON PartTypes.PartTypeID = ToolStringComponentInfo.PartTypeID
					Group By ToolStringComponentInfo.RunID
				) As tsci ON tsci.RunID = Runs.RunID
				Left Join (
					Select
					ToolStringComponentInfo.RunID
					, Max(Cast(ToolStringComponentInfo.TFF as tinyint)) As TFF
					, Max(Cast(ToolStringComponentInfo.CSI as tinyint)) As CSI
					, Max(Cast(ToolStringComponentInfo.OS as tinyint)) As OS
					, Max(Case When ToolStringComponentInfo.TFF = 1 Then ToolStrings.SerialNumber + '': '' + IsNull(PartTypes.[Name], ToolStringComponentInfo.FailedNonPartName) + '' - '' + ToolStringComponentInfo.SerialNum Else '''' End) As TFFComp
					, Max(Case When ToolStringComponentInfo.CustomProperty = ''HeatWave 180C'' Then 1 Else 0 End) As HeatWave
					, Max(Case When ToolStringComponentInfo.CustomProperty = ''HEX (200C Rated Tool)'' Then 1 Else 0 End) As HEX
					From ToolStringComponentInfo WITH(NOLOCK)
					Left Join ToolStrings WITH(NOLOCK) ON ToolStrings.ToolStringID = ToolStringComponentInfo.ToolStringID
					Left Join PartTypes WITH(NOLOCK) ON PartTypes.PartTypeID = ToolStringComponentInfo.PartTypeID'

					if((Select COUNT(*) from #ToolTypes) != 0)
					begin
						set @sFrom = @sFrom + ' Where ToolStrings.Type in (select ToolType from #ToolTypes)'
					end

					set @sFrom = @sFrom + ' Group By ToolStringComponentInfo.RunID) As tsci2 ON tsci2.RunID = Runs.RunID'

if ((select COUNT(*) from #OptionalTables) != 0)
begin
	Select @sFrom = @sFrom + ' Left Join ' + Case OptionalTable
					When 'Countries' Then 'Countries WITH(NOLOCK) ON Countries.Country = Jobs.Country'
					Else OptionalTable + ' WITH(NOLOCK) ON Runs.RunID = ' + OptionalTable + '.RunID' End
					From #OptionalTables				
end

SET @sWhere = ' Where Jobs.IsDeleted = 0 And Runs.IsDownHole = 1'

if (@fromDate <> '')
begin
	set @sWhere = @sWhere + ' And Runs.EndDate >= ''' + @fromDate + ''''
end

if (@toDate <> '')
begin
	set @sWhere = @sWhere + ' And Runs.EndDate <= ''' + @toDate + ''''
end


if((Select COUNT(*) from #Regions) != 0)
begin
	set @sWhere = @sWhere + ' And Regions.RegionDesc in (select Region from #Regions)'
end

if((Select COUNT(*) from #Countries) != 0)
begin
	set @sWhere = @sWhere + ' And Jobs.Country in (select Country from Countries WITH(NOLOCK) where CountryDesc in (select Country from #Countries))'
end

if((Select COUNT(*) from #Districts) != 0)
begin
	set @sWhere = @sWhere + ' And Jobs.BranchPlant in (select District from #Districts)'
end

if(LTRIM(RTRIM(ISNULL(@customerNumberWhereClause, ''))) <> '')
begin
	set @sWhere = @sWhere + ' And (' + @customerNumberWhereClause + ')'
end

if(LTRIM(RTRIM(ISNULL(@customerNameWhereClause, ''))) <> '')
begin
	set @sWhere = @sWhere + ' And (' + @customerNameWhereClause + ')'
end

if (@jobNumber <> '')
begin
	set @sWhere = @sWhere + ' And Jobs.JobNumber like ''' + REPLACE(@jobNumber,'*','%') + ''''
end

if (@rig <> '')
begin
	set @sWhere = @sWhere + ' And Jobs.Rig like ''' + REPLACE(@rig,'*','%') + ''''
end

if (@well <> '')
begin
	set @sWhere = @sWhere + ' And Wells.Well like ''' + REPLACE(@well,'*','%') + ''''
end

if (@offShore <> '')
begin
	set @sWhere = @sWhere + ' And Jobs.Offshore = ' + @offShore + ''
end

if (@extendedRange<> '')
begin
	if (@extendedRange = 'Yes')
	begin
		set @sWhere = @sWhere + ' And Runs.RunID in (select runid from RunEMData WITH(NOLOCK) where ExtendedRangeCableLength Is Not Null or ExtendedRangeRun = ''Y'')'
	end
	else
	begin
		set @sWhere = @sWhere + ' And Runs.RunID in (select runid from RunEMData WITH(NOLOCK) where ExtendedRangeCableLength Is Null or ExtendedRangeRun <> ''Y'')'
	end
end

if((Select COUNT(*) from #OptionalFilters) != 0)
begin
	declare @sConjunc varchar(5)
	set @sConjunc = 'And'

	select
		@sWhere = @sWhere + ' ' + @sConjunc + Case When FieldConjunction = 'OR' And @sConjunc <> 'OR' Then ' (' Else ' ' End
		+ Case FieldName 
		When 'TVDStart' Then 'dbo.LengthConvert(Runs.TVDStart,Runs.TVDStartUOM,''ft'')'
		When 'TVDEnd' Then 'dbo.LengthConvert(Runs.TVDEnd,Runs.TVDEndUOM,''ft'')'
		When 'MDStart' Then 'dbo.LengthConvert(Runs.MDStart,Runs.MDStartUOM,''ft'')'
		When 'MDEnd' Then 'dbo.LengthConvert(Runs.MDEnd,Runs.MDEndUOM,''ft'')'
		When 'WaterDepth' Then 'dbo.LengthConvert(Wells.WaterDepth, Wells.WaterDepthUOM, ''ft'')'
		When 'MaxOperPressure' Then 'dbo.PressureConvert(Hydraulics.MaxOperPressure,Hydraulics.MaxOperPressureUOM,''psi'')'
		When 'MaxHydrostaticPressure' Then 'dbo.PressureConvert(Hydraulics.MaxPressure,Hydraulics.MaxPressureUOM,''psi'')'
		When 'MaxObservedPressure' Then 'dbo.PressureConvert(Hydraulics.MaxObservedPressure,Hydraulics.MaxObservedPressureUOM,''psi'')'
		When 'MaxTemp' Then 'dbo.TempConvert(MudData.BoreHoleTempMax,MudData.BoreHoleTempUnits,''°F'')'
		When 'MudDensity' Then 'dbo.DensityConvert(MudData.DensityEnd,MudData.DensityUnits,''ppg'')'
		When 'MaxDogleg' Then 'dbo.DogLegConvert(MotorData.MaxDogleg,MotorData.MaxDoglegUOM,''deg/100 ft'')'
		When 'MaxDoglegSliding' Then 'dbo.DogLegConvert(MotorData.MaxDoglegSliding,MotorData.MaxDoglegSlidingUOM,''deg/100 ft'')'
		When 'MaxInc' Then 'SurveyData.MaxInc'
		Else FieldName End + ' ' 
		+ FieldOperator 
		+ ' ' + FieldValue + 
		Case When @sConjunc = 'OR' And FieldConjunction <> 'OR' Then ')' Else '' End
		, @sConjunc = FieldConjunction
	from #OptionalFilters
end

if((Select COUNT(*) from #ToolTypes) != 0 OR (Select COUNT(*) from #PartTypes) != 0 OR (Select COUNT(*) from #CustomProperties) != 0 OR @tffCiNci <> '' OR @toolSize <> '')
begin
	set @sWhere = @sWhere + ' And Runs.RunID In (select RunID from ToolStringComponentInfo WITH(NOLOCK) left join ToolStrings WITH(NOLOCK) on ToolStrings.ToolStringID = ToolStringComponentInfo.ToolStringID where 1=1'

	if((Select COUNT(*) from #ToolTypes) != 0)
	begin
		set @sWhere = @sWhere + ' And ToolStrings.Type in (select ToolType from #ToolTypes)'
	end

	if ((Select COUNT(*) from #PartTypes) != 0)
	begin
		set @sWhere = @sWhere + ' And ToolStringComponentInfo.PartTypeId in (select PartTypeId from #PartTypes)'
	end
	
	if ((Select COUNT(*) from #CustomProperties) != 0)
	begin
		set @sWhere = @sWhere + ' And ToolStringComponentInfo.CustomProperty in (select CustomProperty from #CustomProperties)'
	end

	if (@tffCiNci <> '')
	begin
		if (@tffCiNci = '-1')
		begin
			set @sWhere = @sWhere + ' And (ToolStringComponentInfo.TFF = 1 OR ToolStringComponentInfo.CSI = 1 OR ToolStringComponentInfo.NCI = 1)'
		end
		else
		begin
			set @sWhere = @sWhere + ' And ToolStringComponentInfo.' + @tffCiNci + ' = 1'
		end
	end

	if (@toolSize <> '')
	begin
		set @sWhere = @sWhere + ' And ToolStrings.SizeId = ' + @toolSize
	end
	
	set @sWhere = @sWhere + ')'
end

DECLARE @query VARCHAR(MAX)
SET @query = @sSql + @sFrom + @sWhere + ' ORDER BY RunYear, RunMonth, RegionDesc, DistrictDesc, JobNumber, Well, OutHoleDate'

PRINT(@query)
EXEC(@query)

DROP TABLE #Regions
DROP TABLE #Countries
DROP TABLE #Districts
DROP TABLE #PartTypes
DROP TABLE #CustomProperties
DROP TABLE #ToolTypes
DROP TABLE #OptionalFilters
DROP TABLE #OptionalFields
DROP TABLE #OptionalTables










GO
/****** Object:  StoredProcedure [dbo].[usp_RunRelComponentHistoryReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_RunRelComponentHistoryReport]
	@xmlData xml
AS
/*
declare @xmlData xml
set @xmlData = '<Filters><PartTypes><Id>CDST</Id><Id>6</Id></PartTypes><SerialNumbers><Id>51428</Id></SerialNumbers></Filters>'
*/

 DECLARE @startDateTime DATETIME,@RunId  uniqueidentifier=NEWID();
    SET @startDateTime = GETDATE();
	
declare @sSql varchar(max)
declare @sFrom varchar(max)
declare @sWhere varchar(max)
declare @fromDate varchar(256)
declare @toDate varchar(256)
declare @toolString varchar(100)
declare @toolSize varchar(10)
declare @districtStatus varchar(8)
declare @tffCiNci varchar(3)
declare @osPr varchar(2)
declare @failureType varchar(20)
declare @failureCategoryCode varchar(4)
declare @failureSubCategoryCode varchar(4)
declare @failureCodeNumber varchar(4)

select @fromDate = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/DateRangeFrom') T(c)
select @toDate = T.c.value('.', 'varchar(256)') from @xmlData.nodes('/Filters/DateRangeTo') T(c)
select @toolString = T.c.value('.', 'varchar(100)') from @xmlData.nodes('/Filters/ToolString') T(c)
select @toolSize = T.c.value('.', 'varchar(10)') from @xmlData.nodes('/Filters/ToolSize') T(c)
select @districtStatus = T.c.value('.', 'varchar(8)') from @xmlData.nodes('/Filters/DistrictStatus') T(c)
select @tffCiNci = T.c.value('.', 'varchar(3)') from @xmlData.nodes('/Filters/TFFCINCI') T(c)
select @osPr = T.c.value('.', 'varchar(2)') from @xmlData.nodes('/Filters/OSPR') T(c)
select @failureType = T.c.value('.', 'varchar(20)') from @xmlData.nodes('/Filters/FailureType') T(c)
select @failureCategoryCode = T.c.value('.', 'varchar(4)') from @xmlData.nodes('/Filters/FailureCategoryCode') T(c)
select @failureSubCategoryCode = T.c.value('.', 'varchar(4)') from @xmlData.nodes('/Filters/FailureSubCategoryCode') T(c)
select @failureCodeNumber = T.c.value('.', 'varchar(4)') from @xmlData.nodes('/Filters/FailureCodeNumber') T(c)

Select T.c.value('.', 'varchar(max)') as PartTypeId
Into #PartTypes
From @xmlData.nodes('/Filters/PartTypes/Id') T(c)

Delete From #PartTypes Where ISNUMERIC(PartTypeId) = 0

Select T.c.value('.', 'varchar(max)') as SerialNumber
Into #SerialNumbers
From @xmlData.nodes('/Filters/SerialNumbers/Id') T(c)

Select T.c.value('.', 'varchar(max)') as Region
Into #Regions
From @xmlData.nodes('/Filters/Regions/Id') T(c)
	
Select T.c.value('.', 'varchar(max)') as Country
Into #Countries
From @xmlData.nodes('/Filters/Countries/Id') T(c)

Select T.c.value('.', 'varchar(max)') as District
Into #Districts
From @xmlData.nodes('/Filters/Districts/Id') T(c)

Select T.c.value('.', 'varchar(max)') as CustomerName
Into #Customers
From @xmlData.nodes('/Filters/Customers/Id') T(c)

Select T.c.value('.', 'varchar(max)') as ToolType
Into #ToolTypes
From @xmlData.nodes('/Filters/ToolTypes/Id') T(c)

Select T.c.value('.', 'varchar(max)') as OptionalField
Into #OptionalFields
From @xmlData.nodes('/Filters/OptionalFields/Id') T(c)

Select T.c.value('.', 'varchar(max)') as OptionalTable
Into #OptionalTables
From @xmlData.nodes('/Filters/OptionalTables/Id') T(c)

SET @sSql = 'SELECT
				cr.RunYear
				, cr.RunMonth
				, cr.Component
				, cr.SerialNumber
				, cr.DistrictStatus
				, cr.GlobalStatus
				, cr.TFF
				, cr.CI
				, cr.NCI
				, cr.OS
				, cr.PR
				, cr.AcceptedFieldSymptom
				, cr.TIPFT
				, cr.ArtNumber
				, cr.FailureCategoryCode + cr.FailureSubCategoryCode + cr.FailureCodeNumber As FailureCode
				, cr.OSFailureDesc
				, dbo.fnGetComponentComment(cr.ToolStringInfoID, 3) As RMFailureDesc
				, dbo.fnGetComponentComment(cr.ToolStringInfoID, 4) As CorrectiveAction
				, cr.ToolSize
				, cr.ToolString
				, cr.ToolType
				, cr.RegionDesc
				, cr.CountryDesc
				, cr.DistrictDesc
				, cr.CustomerName
				, cr.JobNumber
				, cr.OffShore
				, cr.Well
				, cr.RunNumber
				, cr.OutHoleDate
				, cr.FailureNumber
				, cr.FailureDate
				, cr.FailureStatus
				, cr.OperHrs
				, cr.CircHrs
				, cr.DrillHrs
				, dbo.LengthConvert(cr.TVDEnd, cr.TVDEndUOM, ''ft'') AS TVDEnd
				, dbo.TempConvert(cr.BoreHoleTempMax, cr.BoreHoleTempUnits, ''°F'') AS MaxTemp
				, cr.PMTT
				, dbo.DensityConvert(cr.DensityMax, cr.DensityUnits, ''ppg'') AS MaxDensity
				, dbo.PressureConvert(cr.MaxOperPressure, cr.MaxOperPressureUOM, ''psi'') AS MaxOperPressure
				, dbo.VolumeConvert(cr.LiquidFlow,cr.LiquidFlowUOM,''gpm'') As LiquidFlow
				, cr.OrificeSize
				, cr.HoleSize'
				
if ((select COUNT(*) from #OptionalFields) != 0)
begin
	Select @sSql = @sSql + ', ' + Case OptionalField 
					When 'MDStart' Then 'dbo.LengthConvert(MDStart,MDStartUOM,''ft'') As ' + OptionalField
					When 'MDEnd' Then 'dbo.LengthConvert(MDEnd,MDEndUOM,''ft'') As ' + OptionalField
					When 'TVDStart' Then 'dbo.LengthConvert(TVDStart,TVDStartUOM,''ft'') As ' + OptionalField
					When 'AverageROP' Then 'dbo.VelocityConvert(AverageROP,AverageROPUOM,''ft/hr'') As ' + OptionalField
					When 'GasFlowRate' Then 'dbo.VolumeConvert(GasFlowRate,GasFlowRateUOM,''gpm'') As ' + OptionalField
					When 'MaxObservedPressure' Then 'dbo.PressureConvert(MaxObservedPressure,MaxObservedPressureUOM, ''psi'') As ' + OptionalField
					When 'SPP' Then 'dbo.PressureConvert(SPP,SPPUOM, ''psi'') As ' + OptionalField
					When 'MaxDogleg' Then 'dbo.DogLegConvert(MaxDogleg,MaxDoglegUOM,''deg/100 ft'') As ' + OptionalField
					When 'MaxDoglegSliding' Then 'dbo.DogLegConvert(MaxDoglegSliding,MaxDoglegSlidingUOM,''deg/100 ft'') As ' + OptionalField
					When 'BitDeltaP' Then 'dbo.PressureConvert(BitDeltaP,BitDeltaPUOM,''psi'') As ' + OptionalField
					When 'Torque' Then 'dbo.TorqueConvert(Torque,TorqueUOM,''ft-lbs'') As ' + OptionalField
					When 'WeightOnBit' Then 'dbo.WeightConvert(WeightOnBit,WeightOnBitUOM,''klb'') As ' + OptionalField
					Else OptionalField End
					From #OptionalFields
end

SET @sFrom = ' FROM vwComponentHistoryReport (NOLOCK) cr'

if ((select COUNT(*) from #OptionalTables) != 0)
begin
	Select @sFrom = @sFrom + ' LEFT JOIN ' + OptionalTable + ' WITH(NOLOCK) ON cr.RunID = ' + OptionalTable + '.RunID'
					From #OptionalTables
end

SET @sWhere = ' WHERE 1 = 1'

if (@fromDate <> '')
begin
	set @sWhere = @sWhere + ' AND cr.DateFilter >= ''' + @fromDate + ''''
end

if (@toDate <> '')
begin
	set @sWhere = @sWhere + ' AND cr.DateFilter <= ''' + @toDate + ''''
end

if (@toolString <> '')
begin
	set @sWhere = @sWhere + ' AND cr.ToolString LIKE ''' + REPLACE(@toolString,'*','%') + ''''
end

if (@toolSize <> '')
begin
	set @sWhere = @sWhere + ' AND cr.ToolSizeID = ' + @toolSize
end

if (@districtStatus <> '')
begin
	if (@districtStatus = '-1')
	begin
		set @sWhere = @sWhere + ' AND cr.DistrictStatus Is Not Null'
	end
	else
	begin
		set @sWhere = @sWhere + ' AND cr.DistrictStatus = ''' + @districtStatus + ''''
	end
end

if (@tffCiNci <> '')
begin
	if (@tffCiNci = '-1')
	begin
		set @sWhere = @sWhere + ' AND (cr.TFF = 1 OR cr.CI = 1 OR cr.NCI = 1)'
	end
	else
	begin
		set @sWhere = @sWhere + ' AND cr.' + @tffCiNci + ' = 1'
	end
end

if (@osPr <> '')
begin
	if (@osPr = '-1')
	begin
		set @sWhere = @sWhere + ' AND (cr.OS = 1 OR cr.PR = 1)'
	end
	else
	begin
		set @sWhere = @sWhere + ' AND cr.' + @osPr + ' = 1'
	end
end

if ((Select COUNT(*) from #PartTypes) != 0)
begin
	set @sWhere = @sWhere + ' And cr.ComponentID in (select PartTypeId from #PartTypes)'
end

if ((Select COUNT(*) from #SerialNumbers) != 0)
begin
	set @sWhere = @sWhere + ' And cr.SerialNumber in (select SerialNumber from #SerialNumbers)'
end

if((Select COUNT(*) from #Regions) != 0)
begin
	set @sWhere = @sWhere + ' And cr.RegionDesc in (select Region from #Regions)'
end

if((Select COUNT(*) from #Countries) != 0)
begin
	set @sWhere = @sWhere + ' And cr.CountryDesc in (select Country from #Countries)'
end

if((Select COUNT(*) from #Districts) != 0)
begin
	set @sWhere = @sWhere + ' And cr.District in (select District from #Districts)'
end

if((Select COUNT(*) from #Customers) != 0)
begin
	set @sWhere = @sWhere + ' And cr.CustomerName in (select CustomerName from #Customers)'
end

if((Select COUNT(*) from #ToolTypes) != 0)
begin
	set @sWhere = @sWhere + ' And cr.ToolType in (select ToolType from #ToolTypes)'
end

if (@failureCategoryCode <> '')
begin
	declare @failureCodePrefix As varchar(4)
	set @failureCodePrefix = ''

	if (@failureType = 'OSPR')
	begin
		set @failureCodePrefix = @failureCategoryCode
	end
	else
	begin
		set @sWhere = @sWhere + ' AND cr.FailureCodeType = ''' + @failureType + ''''
	end
	
	set @sWhere = @sWhere + ' AND cr.' + @failureCodePrefix + 'FailureCategoryCode = ''' + @failureCategoryCode + ''''
	if (@failureSubCategoryCode <> '')
	begin
		set @sWhere = @sWhere + ' AND cr.' + @failureCodePrefix + 'FailureSubCategoryCode = ''' + @failureSubCategoryCode + ''''
	end
	
	if (@failureCodeNumber <> '')
	begin
		set @sWhere = @sWhere + ' AND cr.' + @failureCodePrefix + 'FailureCodeNumber = ''' + @failureCodeNumber + ''''
	end
end

DECLARE @query VARCHAR(MAX)
SET @query = @sSql + @sFrom + @sWhere + ' ORDER BY cr.RunYear Desc, cr.RunMonth Desc, cr.JobNumber, cr.Well, reverse(convert(char(50),reverse(cr.RunNumber))+'',''), cr.ToolString, cr.Component'

PRINT @query
EXEC(@query)
exec usp_MyAdvisor_Logs @RunId,'usp_RunRelComponentHistoryReport', '01.Final Report Qry Run', @startDateTime

DROP TABLE #PartTypes
DROP TABLE #SerialNumbers
DROP TABLE #Regions
DROP TABLE #Countries
DROP TABLE #Districts
DROP TABLE #Customers
DROP TABLE #ToolTypes
DROP TABLE #OptionalFields
DROP TABLE #OptionalTables



GO
/****** Object:  StoredProcedure [dbo].[usp_RunTimeSheetExport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_RunTimeSheetExport]
	@StartDate as DateTime,
	@EndDate as DateTime
AS
BEGIN

SET NOCOUNT ON;

	
SELECT 
  pc.ActivityType as ActivityType
  , pc.PLCode AS PLCode
  , pc.PLName AS PLName
  , pc.ProjectDesc AS TaskDesc
  , pc.WFTProjectCode AS TaskCode
  , pc.TranType AS TranType
  , ts.TimeSheetExportId AS TimesheetID
  , ISNULL(u.JDEBadgeNum, '') AS BadgeNum
  , dbo.fnWeekEnding(ts.DateWorked) AS WeekEndDate
  , DATEADD(dd, -1, DATEADD(mm, DATEDIFF(m, 0, DATEADD(dd, -(DATEPART(dw, DateWorked)-1), DateWorked)) + 1 ,0)) as MonthEndDate
  ,	DATEADD(dd, -1, DATEADD(mm, DATEDIFF(m, 0, DateWorked) + 1 ,0)) as TrueMonthEndDate
  , pc.ActivityType as ReasonCode
  , ts.Employee AS SavedBy
  , ts.DateAdded AS SaveDate
  , ts.Employee AS SubmittedBy
  , ts.DateAdded AS SubmittedDate
  , usuper.UserName AS ApprovedBy
  , ts.DatePosted AS ApprovedDate
  , ts.TotalHours AS TotalHours
  , 'D' + convert(varchar, DATEPART(DW, DateWorked)) + 'Hours' AS DHours
  , ts.DateWorked
  , ts.Employee
INTO #tempTable
FROM TimeSheet (NOLOCK) ts
LEFT JOIN (SELECT DISTINCT Code, WFTProjectCode, ProjectDesc, PLCode, SelectLists.OptionText as PLName, ActivityType, TranType FROM ProjectCodes (NOLOCK) INNER JOIN SelectLists (NOLOCK) ON SelectLists.OptionValue = ProjectCodes.PLCode Where SelectLists.SelectListName = 'TimeSheetPLCode') pc on pc.Code = ts.ProjectId
LEFT JOIN Users (NOLOCK) u on ts.Employee = u.UserName
LEFT JOIN Users (NOLOCK) usuper on u.ReportsTo = usuper.UserId
LEFT JOIN UserProfile (NOLOCK) up on up.UserId = u.UserId
WHERE TotalHours > 0
AND 
(
	(DateWorked >= @StartDate and DateWorked <= @EndDate)
	OR
	(LastUpdateDate >= @StartDate and LastUpdateDate <= @EndDate)
)


UPDATE b
	SET TimesheetID = (SELECT TOP 1 a.TimesheetID FROM #tempTable a WHERE a.WeekEndDate = b.WeekEndDate AND a.Employee = b.Employee ORDER BY WeekEndDate, DateWorked),
	SaveDate = (SELECT TOP 1 a.SaveDate FROM #tempTable a WHERE a.WeekEndDate = b.WeekEndDate ORDER BY WeekEndDate, DateWorked),
	SubmittedDate = (SELECT TOP 1 a.SaveDate FROM #tempTable a WHERE a.WeekEndDate = b.WeekEndDate ORDER BY WeekEndDate, DateWorked),
	ApprovedDate = (SELECT TOP 1 a.ApprovedDate FROM #tempTable a WHERE a.WeekEndDate = b.WeekEndDate ORDER BY WeekEndDate, DateWorked)
FROM #tempTable b

--TRUNCATE TABLE AdvENGTransactions

INSERT INTO [10.5.101.55].alrsspd.adv.AdvENGTransactions(
		ActivityType,
		PLCode,
		PLName,
		TaskDesc,
		TaskCode,
		TimeSheetStatus,
		TimesheetID,
		RecordStatus,
		BACC,
		BadgeNum,
		WeekEndDate,
		MonthEndDate,
		TrueMonthEndDate,
		Plant,
		TranType,
		D1Hours,
		D2Hours,
		D3Hours,
		D4Hours,
		D5Hours,
		D6Hours,
		D7Hours,
		ReasonCode,
		Reference,
		SavedBy,
		SaveDate,
		SubmittedBy,
		SubmittedDate,
		ApprovedBy,
		ApprovedDate,
		Flex1,
		Flex2,
		Flex3,
		Flex4,
		Trxid,
		Payout,
		LoadedBy,
		LoadDate,
		ProcessedBy,
		ProcessedDate
)
SELECT --NULL as TransactionID, -- is auto incement id in table
		ActivityType,
		PLCode,
		PLName,
		TaskDesc,
		TaskCode,
		'A' as TimeSheetStatus,
		TimesheetID,
		'A' as RecordStatus,
		'US' as BACC,
		BadgeNum,
		WeekEndDate,
		MonthEndDate,
		TrueMonthEndDate,
		'109538' as Plant,
		ISNULL(TranType, '') as TranType,
		D1Hours,
		D2Hours,
		D3Hours,
		D4Hours,
		D5Hours,
		D6Hours,
		D7Hours,
		ActivityType as ReasonCode,
		NULL as Reference,
		SavedBy,
		SaveDate,
		SubmittedBy,
		SubmittedDate,
		ApprovedBy,
		ApprovedDate,
		NULL as Flex1,
		NULL as Flex2,
		NULL as Flex3,
		NULL as Flex4,
		NULL as Trxid,
		NULL as Payout,
		'Advantage' as LoadedBy,
		GetDate() as LoadDate,
		NULL as ProcessedBy,
		NULL as ProcessedDate
FROM (
	SELECT ActivityType, PLCode, PLName, TaskDesc, TaskCode, TranType, TimesheetID, BadgeNum,
			WeekEndDate, MonthEndDate, TrueMonthEndDate, SavedBy, SaveDate, SubmittedBy, SubmittedDate, ApprovedBy, ApprovedDate,
			TotalHours, DHours 
	FROM #tempTable) AS DataTable
	PIVOT(
		SUM(TotalHours)
		FOR DHours in (D1Hours, D2Hours, D3Hours ,D4Hours, D5Hours, D6Hours, D7Hours)
	) PivotTable
ORDER BY WeekEndDate, TaskCode, PLCode

Select 'Success'

DROP TABLE #tempTable

END





/****** Object:  StoredProcedure [dbo].[usp_SetBuildNumber]    Script Date: 08/06/2014 14:54:51 ******/
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_RunWorkOrderTraceabilityDetailReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_RunWorkOrderTraceabilityDetailReport]
	@xmlData xml
AS
BEGIN

SET NOCOUNT ON;

DECLARE @WhereClause AS VARCHAR(MAX)

SELECT @WhereClause = T.c.value('.', 'VARCHAR(max)') FROM @xmlData.nodes('/Filters/WhereClause')T(c);


DECLARE @startIndex AS VARCHAR(10)
DECLARE @pageSize AS VARCHAR(10)
DECLARE @sortField AS VARCHAR(100)
DECLARE @sortDir AS VARCHAR(64)

SELECT @startIndex = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/StartIndex')T(c);
SELECT @pageSize = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/PageSize')T(c);
SELECT @sortField = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/SortField')T(c);
SELECT @sortDir = T.c.value('.', 'VARCHAR(64)') FROM @xmlData.nodes('/Filters/SortDir')T(c);

--get the initial fa results based upon filters.
CREATE TABLE #tblFixedAssets
(
	FixedAssetId uniqueidentifier,
	SerialNum varchar(50),
	InventoryItemNum varchar(30),
	RNItemNum varchar(30),
	TopFixedAssetId uniqueidentifier
	
)

print 'stage 1'

EXEC('
INSERT INTO #tblFixedAssets
Select FixedAssetId, SerialNum, InventoryItemNum, RNItemNum, TopLevelFixedAssetId
from FixedAssets(NOLOCK)
' + @WhereClause
)

CREATE TABLE #tblFixedAssetHistory
(
	FixedAssetId uniqueidentifier,
	SerialNum varchar(50),
	InventoryItemNum varchar(30),
	RNItemNum varchar(30),
	Revision varchar(2),
	Qty int NULL,
	TopFixedAssetId uniqueidentifier,
	TopSerialNum varchar(50),
	TopInventoryItemNum varchar(30),
	WorkOrderIdInstalled uniqueidentifier null,
	WorkOrderIdRemoved uniqueidentifier null
)

print 'stage 2'
INSERT INTO #tblFixedAssetHistory
Select 
	fah.FixedAssetId
	, fah.SerialNum
	, fah.InventoryItemNum
	, fah.RNItemNum
	, fah.Revision
	, fah.Qty
	, wo.FixedAssetId as TopFixedAssetId
	, wo.SerialNum as TopSerialNum
	, wo.InventoryItemNum as TopInventoryItemNum
	, (
		Select Top 1 ptd.RefId 
		from PartTransferDtl(NOLOCK) ptd
		LEFT JOIN PartTransfers(NOLOCK) pt ON pt.PartTransferId = ptd.PartTransferId
		LEFT JOIN (Select Top 1 wo.WorkOrderId, fah.FixedAssetId, wo.DateAdded
					from FixedAssetHistory(NOLOCK) fah2
					INNER JOIN WorkOrders(NOLOCK) wo2 ON wo2.WorkOrderId = fah2.WorkOrderId
					Where fah2.FixedAssetId = fah.FixedAssetId
					AND wo.FixedAssetId = wo2.FixedAssetId
					AND fah2.DatedAdded <= fah.DatedAdded 
					ORDER by fah2.DatedAdded ASC
		) firstEntry ON ptd.FixedAssetId = firstEntry.FixedAssetId
		Where ptd.DateAdded < firstEntry.DateAdded
		AND ptd.RefType = 'WO' AND pt.TransferType = 9 AND ptd.Dest = 'IN'
		ORDER by ptd.DateAdded DESC
	  ) as WorkOrderIdInstalled
	, (
		Select Top 1 ptd.RefId 
		from PartTransferDtl(NOLOCK) ptd
		LEFT JOIN PartTransfers(NOLOCK) pt ON pt.PartTransferId = ptd.PartTransferId
		LEFT JOIN (Select Top 1 wo.WorkOrderId, fah.FixedAssetId, wo.DateAdded
					from FixedAssetHistory(NOLOCK) fah2
					INNER JOIN WorkOrders(NOLOCK) wo2 ON wo2.WorkOrderId = fah2.WorkOrderId
					Where fah2.FixedAssetId = fah.FixedAssetId
					AND wo.FixedAssetId = wo2.FixedAssetId
					AND fah2.DatedAdded >= fah.DatedAdded 
					ORDER by fah2.DatedAdded DESC
		) lastEntry ON ptd.FixedAssetId = lastEntry.FixedAssetId
		Where ptd.DateAdded > lastEntry.DateAdded
		AND ptd.RefType = 'WO' AND pt.TransferType = 9 AND ptd.Source = 'IN'
		ORDER by ptd.DateAdded ASC
	  ) as WorkOrderIdRemoved
from FixedAssetHistory(NOLOCK) fah
INNER JOIN #tblFixedAssets(NOLOCK) falocal ON falocal.FixedAssetId = fah.FixedAssetId
INNER JOIN WorkOrders(NOLOCK) wo ON wo.WorkOrderId = fah.WorkOrderId

print 'stage 3'
INSERT INTO #tblFixedAssetHistory
Select 
	ptd.FixedAssetId
	, ptd.SerialNum
	, ptd.InventoryItemNum
	, ptd.RNItemNum
	, ptd.Revision
	, ptd.Quantity as Qty
	, wo.FixedAssetId as TopFixedAssetId
	, wo.SerialNum as TopSerialNum
	, wo.InventoryItemNum as TopInventoryItemNum
	, ptd.RefId as WorkOrderIdInstalled
	, (Select Top 1 RefId 
		from PartTransferDtl(NOLOCK) ptd2
		LEFT JOIN PartTransfers(NOLOCK) pt2 ON pt2.PartTransferId = ptd2.PartTransferId 
		Where ptd2.RefType = 'WO' AND pt2.TransferType = 9 AND ptd2.Source = 'IN' 
		AND ptd2.FixedAssetId = ptd.FixedAssetId 
		AND ptd2.DateAdded > ptd.DateAdded 
		ORDER by ptd.DateAdded ASC
	  ) as WorkOrderIdRemoved
from PartTransferDtl(NOLOCK) ptd
LEFT JOIN PartTransfers(NOLOCK) pt ON pt.PartTransferId = ptd.PartTransferId 
INNER JOIN #tblFixedAssets(NOLOCK) falocal ON falocal.FixedAssetId = ptd.FixedAssetId
INNER JOIN WorkOrders(NOLOCK) wo ON wo.WorkOrderId = ptd.RefId
Where ptd.RefType = 'WO' AND pt.TransferType = 9 AND ptd.Dest = 'IN'

print 'stage 4'
INSERT INTO #tblFixedAssetHistory
Select 
	fa.FixedAssetId
	, fa.SerialNum
	, fa.InventoryItemNum
	, fa.RNItemNum
	, fa.Revision
	, fa.CurrentItemQty as Qty
	, fap.FixedAssetId as TopFixedAssetId
	, fap.SerialNum as TopSerialNum
	, fap.InventoryItemNum as TopInventoryItemNum
	, NULL as WorkOrderIdInstalled
	, NULL as WorkOrderIdRemoved
from FixedAssets(NOLOCK) fa
INNER JOIN #tblFixedAssets falocal ON falocal.FixedAssetId = fa.FixedAssetId
INNER JOIN FixedAssets(NOLOCK) fap ON fap.FixedAssetId = fa.TopLevelFixedAssetId
LEFT JOIN #tblFixedAssetHistory fah ON fah.FixedAssetId = fa.FixedAssetId AND fah.TopFixedAssetId = fa.TopLevelFixedAssetId
Where fa.EquipmentStatus = 'IN'
AND fah.FixedAssetId IS NULL

--get parents.
CREATE TABLE #tblFixedAssetParents
(
	FixedAssetId uniqueidentifier,
	SerialNum varchar(50),
	InventoryItemNum varchar(30),
	RNItemNum varchar(30),
	Revision varchar(2),
	Qty int NULL,
	TopFixedAssetId uniqueidentifier,
	TopSerialNum varchar(50),
	TopInventoryItemNum varchar(30),
	WorkOrderIdInstalled uniqueidentifier null,
	WorkOrderNumInstalled varchar(30),
	JDEWorkOrderNumInstalled varchar(30),
	WorkOrderBranchPlantInstalled varchar(12),
	WorkOrderBranchPlantNameInstalled varchar(50),
	DateInstalled DATETIME NULL,
	WorkOrderIdRemoved uniqueidentifier null,
	WorkOrderNumRemoved varchar(30),
	JDEWorkOrderNumRemoved varchar(30),
	WorkOrderBranchPlantRemoved varchar(12),
	WorkOrderBranchPlantNameRemoved varchar(50),
	DateRemoved DATETIME NULL
)

print 'stage 5'
INSERT INTO #tblFixedAssetParents
Select Distinct 
	fah.FixedAssetId
	, fah.SerialNum
	, fah.InventoryItemNum
	, fah.RNItemNum
	, fah.Revision
	, fah.Qty
	
	, fah.TopFixedAssetId
	, fah.TopSerialNum
	, fah.TopInventoryItemNum
	
	, fah.WorkOrderIdInstalled
	, woi.WorkOrderNum as WorkOrderNumInstalled
	, woi.JDEWorkOrderNum as JDEWorkOrderNumInstalled
	, woi.BranchPlant as WorkOrderBranchPlantInstalled
	, woibp.CompanyName as WorkOrderBranchPlantNameInstalled
	, ISNULL(woi.DateAdded, CONVERT(DATETIME, '08/12/2014')) as DateInstalled
	
	, fah.WorkOrderIdRemoved
	, wor.WorkOrderNum as WorkOrderNumRemoved
	, wor.JDEWorkOrderNum as JDEWorkOrderNumRemoved
	, wor.BranchPlant as WorkOrderBranchPlantRemoved
	, worbp.CompanyName as WorkOrderBranchPlantNameRemoved
	, wor.DateAdded as DateRemoved
from #tblFixedAssetHistory fah
LEFT JOIN WorkOrders(NOLOCK) woi ON woi.WorkOrderId = fah.WorkOrderIdInstalled
LEFT JOIN BranchPlants(NOLOCK) woibp ON woibp.BranchPlant = woi.BranchPlant
LEFT JOIN WorkOrders(NOLOCK) wor ON wor.WorkOrderId = fah.WorkOrderIdRemoved
LEFT JOIN BranchPlants(NOLOCK) worbp ON worbp.BranchPlant = wor.BranchPlant

-- getting run info, based upon top serialnum and inventoty itemnum
DECLARE @sql AS VARCHAR(MAX)
Set @sql = '
Select  
		fa.FixedAssetId
		, fa.SerialNum
		, fa.InventoryItemNum
		, fa.RNItemNum
		, fa.Revision
		, fa.Qty
		
		, fa.TopFixedAssetId
		, fa.TopSerialNum
		, fa.TopInventoryItemNum
		
		, fa.WorkOrderIdInstalled
		, fa.WorkOrderNumInstalled
		, fa.JDEWorkOrderNumInstalled
		, fa.WorkOrderBranchPlantInstalled
		, fa.WorkOrderBranchPlantNameInstalled
		, fa.DateInstalled
		
		, fa.WorkOrderIdRemoved
		, fa.WorkOrderNumRemoved
		, fa.JDEWorkOrderNumRemoved
		, fa.WorkOrderBranchPlantRemoved
		, fa.WorkOrderBranchPlantNameRemoved
		, fa.DateRemoved
		
		, ts.SerialNumber as ToolString
		
		, j.JobId
		, j.JobNumber
		, well.Well
		, j.BranchPlant as JobBranchPlant
		, b.CompanyName as JobBranchPlantName
		, reg.Region
		, reg.RegionDesc
		, co.Country
		, co.CountryDesc
		, dbo.DensityConvert(md.DensityEnd, md.DensityUnits,''ppg'') As MudWeight
		, dbo.VolumeConvert(h.FlowRate,h.FlowRateUOM,''gpm'') As FlowRate
		
		, run.RunID
		, run.RunNumber
		, run.StartDate
		, run.EndDate
		, run.OperHrs
		, run.CircHrs
		, run.DrillHrs
		, run.PulseCount
		, dbo.TempConvert(md.BoreHoleTempMax,md.BoreHoleTempUnits,''°F'') As MaxTempF
		, dbo.LengthConvert(h.HoleSize,h.HoleSizeUOM,''in'') As HoleSize
		, ISNULL(comp.LostTime,i.AcceptedLostTime) As NPTonTopLevelSN
		, i.AcceptedLostTime As NPTbyRun

		, ISNULL(comp.TFF,0) As TFF
		, comp.SerialNum TopLevelSN
		, ifc.LevelOneCode + ifc.LevelTwoCode + ifc.LevelThreeCode As FaultCodeTFF
from #tblFixedAssetParents fa 
INNER JOIN ToolStringComponentInfo(NOLOCK) tsci ON tsci.SerialNum = fa.TopSerialNum AND tsci.InventoryItemNum = fa.TopInventoryItemNum
LEFT  JOIN ToolStrings(NOLOCK) ts ON ts.ToolStringId = tsci.ToolStringID
LEFT JOIN Runs(NOLOCK) run ON run.RunID = tsci.RunID AND run.IsDownHole = 1 AND run.IsDeleted = 0
	AND CONVERT(DATE, fa.DateInstalled, 101) <= CONVERT(DATE, run.StartDate, 101)
	AND (fa.DateRemoved IS NULL OR run.EndDate IS NULL OR CONVERT(DATE, fa.DateRemoved, 101) >= CONVERT(DATE, run.EndDate, 101))
LEFT JOIN Wells(NOLOCK) well ON well.WellID = run.WellID AND well.IsDeleted = 0
LEFT JOIN Jobs(NOLOCK) j ON j.JobId = well.JobID AND j.IsDeleted = 0
LEFT JOIN BranchPlants b WITH (NOLOCK) ON b.BranchPlant = j.BranchPlant
LEFT JOIN Regions reg WITH(NOLOCK) ON reg.Region = j.Region
LEFT JOIN Countries co WITH(NOLOCK) ON co.Country = j.Country
LEFT JOIN MudData md WITH(NOLOCK) ON md.RunID = run.RunID
LEFT JOIN Hydraulics h WITH(NOLOCK) ON h.RunID = run.RunID
LEFT JOIN Incidents i WITH(NOLOCK) ON i.RunID = run.RunID
LEFT JOIN vwIncidentFaultCodes ifc WITH(NOLOCK) ON ifc.IncidentId = I.IncidentID
LEFT JOIN
(
 Select
  tsci.IncidentID
  , tsci.TFF
  , tsci.SerialNum
  , tsci.LostTime
 From ToolStringComponentInfo tsci WITH(NOLOCK)
 Left Join ToolStrings t WITH(NOLOCK) ON t.ToolStringID = tsci.ToolStringID
 Left Join PartTypes pt WITH(NOLOCK) ON pt.PartTypeID = tsci.PartTypeID
    Where tsci.TFF = 1
) AS comp ON comp.IncidentID = i.IncidentID
Where run.RunID IS NOT NULL
'

DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') t '

print 'stage 6'
print @sqlstring
EXECUTE (@sqlString)

DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, * From ( ' + 
		@sql + ') query ) page 
		WHERE page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir

print 'stage 7'
EXECUTE(@pagingSql)


DROP TABLE #tblFixedAssets
DROP TABLE #tblFixedAssetHistory
DROP TABLE #tblFixedAssetParents

END
GO
/****** Object:  StoredProcedure [dbo].[usp_RunWorkOrderTraceabilityReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_RunWorkOrderTraceabilityReport]
	@xmlData xml
AS
BEGIN

SET NOCOUNT ON;

DECLARE @WhereClause AS VARCHAR(MAX)

SELECT @WhereClause = T.c.value('.', 'VARCHAR(max)') FROM @xmlData.nodes('/Filters/WhereClause')T(c);


DECLARE @startIndex AS VARCHAR(10)
DECLARE @pageSize AS VARCHAR(10)
DECLARE @sortField AS VARCHAR(100)
DECLARE @sortDir AS VARCHAR(64)

SELECT @startIndex = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/StartIndex')T(c);
SELECT @pageSize = T.c.value('.', 'VARCHAR(10)') FROM @xmlData.nodes('/Filters/PageSize')T(c);
SELECT @sortField = T.c.value('.', 'VARCHAR(100)') FROM @xmlData.nodes('/Filters/SortField')T(c);
SELECT @sortDir = T.c.value('.', 'VARCHAR(64)') FROM @xmlData.nodes('/Filters/SortDir')T(c);

--get the initial fa results based upon filters.
CREATE TABLE #tblFixedAssets
(
	FixedAssetId uniqueidentifier,
	SerialNum varchar(30),
	InventoryItemNum varchar(30),
	RNItemNum varchar(30)
)

EXEC('
INSERT INTO #tblFixedAssets
Select FixedAssetId, SerialNum, InventoryItemNum, RNItemNum
from FixedAssets(NOLOCK)
' + @WhereClause
)


--get parents.
CREATE TABLE #tblFixedAssetParents
(
	FixedAssetId uniqueidentifier,
	SerialNum varchar(30),
	InventoryItemNum varchar(30),
	RNItemNum varchar(30),
	TopFixedAssetId uniqueidentifier,
	TopSerialNum varchar(30),
	TopInventoryItemNum varchar(30),
	TopRNItemNum varchar(30),
	OperHrs float DEFAULT 0,
	CircHrs float DEFAULT 0,
	DrillHrs float DEFAULT 0
)

--get parents, either from FA history OR from current strcuture, (in case of top most, it will be parent of itself.)
INSERT INTO #tblFixedAssetParents(FixedAssetId, SerialNum, InventoryItemNum, RNItemNum, TopFixedAssetId, TopSerialNum, TopInventoryItemNum, TopRNItemNum)
Select * from (
	Select fah.FixedAssetId
			, fah.SerialNum
			, fah.InventoryItemNum
			, fah.RNItemNum
			, wo.FixedAssetId as TopFixedAssetId
			, wo.SerialNum as TopSerialNum
			, wo.InventoryItemNum as TopInventoryItemNum
			, wofa.RNItemNum as TopRNItemNum
	from FixedAssetHistory(NOLOCK) fah
	INNER JOIN WorkOrders(NOLOCK) wo ON wo.WorkOrderId = fah.WorkOrderId
	INNER JOIN FixedAssets(NOLOCK) wofa ON wofa.FixedAssetId = wo.FixedAssetId
	INNER JOIN #tblFixedAssets far ON far.FixedAssetId = fah.FixedAssetId
	UNION
	Select fa.FixedAssetId
			, fa.SerialNum
			, fa.InventoryItemNum
			, fa.RNItemNum
			, ISNULL(fa.TopLevelFixedAssetId, fa.FixedAssetId) as TopFixedAssetId 
			, ISNULL(fap.SerialNum, fa.SerialNum) as TopSerialNum
			, ISNULL(fap.InventoryItemNum, fa.InventoryItemNum) as TopInventoryItemNum
			, ISNULL(fap.RNItemNum, fa.RNItemNum) as TopRNItemNum
	from FixedAssets(NOLOCK) fa
	LEFT JOIN FixedAssets(NOLOCK) fap ON fap.FixedAssetId = fa.TopLevelFixedAssetId
	INNER JOIN #tblFixedAssets far ON far.FixedAssetId = fa.FixedAssetId
	--Where fa.EquipmentStatus = 'IN'
) a


-- get run info based upon the top level serial num and itemnum.
Select distinct 
		tsci.SerialNum
		, tsci.InventoryItemNum
		, SUM(run.OperHrs) as OperHrs
		, SUM(run.CircHrs) as CircHrs
		, SUM(run.DrillHrs) as DrillHrs
INTO #tblComponentInfo
from ToolStringComponentInfo(NOLOCK) tsci
INNER JOIN Runs(NOLOCK) run ON run.RunID = tsci.RunID
INNER JOIN Wells(NOLOCK) well ON well.WellID = run.WellID
INNER JOIN Jobs(NOLOCK) j ON j.JobId = well.JobID
INNER JOIN #tblFixedAssetParents fa ON fa.TopSerialNum = tsci.SerialNum AND fa.TopInventoryItemNum = tsci.InventoryItemNum
AND run.IsDownHole = 1 AND run.IsDeleted = 0 AND well.IsDeleted = 0 AND j.IsDeleted = 0
GROUP by tsci.SerialNum, tsci.InventoryItemNum

--update parents table with run info to get result set.
Update fap
Set 
	OperHrs = ISNULL(tci.OperHrs, 0),
	CircHrs = ISNULL(tci.CircHrs, 0),
	DrillHrs = ISNULL(tci.DrillHrs, 0)
From #tblFixedAssetParents fap
INNER JOIN #tblComponentInfo tci ON tci.SerialNum = fap.TopSerialNum AND tci.InventoryItemNum = fap.TopInventoryItemNum

DECLARE @sql AS VARCHAR(MAX)
Set @sql = 'Select * from #tblFixedAssetParents'


DECLARE @sqlString VARCHAR(MAX)
SET @sqlString = 'SELECT COUNT(*) AS TotalCount FROM (' + @sql + ') t '

EXECUTE (@sqlString)

DECLARE @pagingSql VARCHAR(MAX)
SET @pagingSql = 'SELECT TOP ' + @pageSize + ' page.* FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY ' + @sortField + ' ' + @sortDir + ') as RowNum, * From ( ' + 
		@sql + ') query ) page 
		WHERE page.RowNum > ' + @startIndex + ' order by ' + @sortField + ' ' + @sortDir

EXECUTE(@pagingSql)


END

GO
/****** Object:  StoredProcedure [dbo].[usp_SaveJobImportStatus]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_SaveJobImportStatus]
	@xmlData xml
AS

/*
declare @xmlData xml
set @xmlData = '<Filters>
					<AutoUpdateStatus>0</AutoUpdateStatus>
					<SetJobStatus>
						<Id>8323A336-BB2E-408A-AF60-A2C200BA3981</Id>
					</SetJobStatus>
					<ConfirmedCloseJobs>
						<Id>AB281623-6A92-496F-B761-A32A00CE4D98</Id>
					</ConfirmedCloseJobs>
				</Filters>'
*/
declare @sSql varchar(max)
declare @autoUpdateStatus varchar(1)

select @autoUpdateStatus = T.c.value('.', 'varchar(1)') from @xmlData.nodes('/Filters/AutoUpdateStatus') T(c)

Select T.c.value('.', 'varchar(max)') as JobId
Into #ConfirmedCloseJobs
From @xmlData.nodes('/Filters/ConfirmedCloseJobs/Id') T(c)
	
Select T.c.value('.', 'varchar(max)') as JobId
Into #SetJobStatus
From @xmlData.nodes('/Filters/SetJobStatus/Id') T(c)

if((select COUNT(*) from #ConfirmedCloseJobs) != 0)
begin
	set @sSql = 'UPDATE Jobs 
				SET ImportStatus = ''Closed''
				, ConfirmedClosed = 1
				WHERE JobId In (select JobId from #ConfirmedCloseJobs)'
	
	--print(@sSql)
	exec(@sSql)
end

if((select COUNT(*) from #SetJobStatus) != 0)
begin
	declare @confirmClosed varchar(50)
	declare @sAnd varchar(100)

	if (@autoUpdateStatus = '1')
		begin
			-- set status for non-confirmed closed jobs (this is called when auto-updating job status)
			set @confirmClosed = ''
			set @sAnd = ' AND ConfirmedClosed = 0'
		end
	else
		begin
			-- set status and unconfirm closed (this is called when user unchecks confirm closed for job)
			set @confirmClosed = ', j.ConfirmedClosed = 0'
			set @sAnd = ' AND j.JobId in (select JobId from #SetJobStatus)'
		end

	--	Pending
	set @sSql = 'UPDATE j
				SET j.ImportStatus = ''Pending'''
				+ @confirmClosed +
				' FROM Jobs j 
				JOIN vwJobImportStatusReport s ON s.JobId = j.JobId
				WHERE j.StartDate <= GETDATE()
				AND (j.EndDate Is Not Null AND j.EndDate <= GETDATE())
				AND (s.ImportedRunsTotal <> s.ForecastedTotalRuns OR s.ImportedFailuresTotal <> s.GFACnt)'
				+ @sAnd
				--print(@sSql)
				exec(@sSql)

	--	Active
	set @sSql = 'UPDATE j
				SET j.ImportStatus = ''Active'''
				+ @confirmClosed +
				' FROM Jobs j 
				JOIN vwJobImportStatusReport s ON s.JobId = j.JobId
				WHERE j.StartDate <= GETDATE()
				AND (j.EndDate Is Null OR j.EndDate > GETDATE())
				AND (s.ImportedRunsTotal <> s.ForecastedTotalRuns OR s.ImportedFailuresTotal <> s.GFACnt)'
				+ @sAnd
				--print(@sSql)
				exec(@sSql)

	--	Closed
	set @sSql = 'UPDATE j
				SET j.ImportStatus = ''Closed'''
				+ @confirmClosed +
				' FROM Jobs j 
				JOIN vwJobImportStatusReport s ON s.JobId = j.JobId
				WHERE j.StartDate <= GETDATE()
				AND (j.EndDate Is Not Null AND j.EndDate <= GETDATE())
				AND (s.ImportedRunsTotal = s.ForecastedTotalRuns AND s.ImportedFailuresTotal = s.GFACnt)'
				+ @sAnd
				--print(@sSql)
				exec(@sSql)

end

DROP TABLE #ConfirmedCloseJobs
DROP TABLE #SetJobStatus

GO
/****** Object:  StoredProcedure [dbo].[usp_SavePartTypeProperty]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_SavePartTypeProperty] (
	@sPartTypePropertyID as uniqueidentifier,
	@iPartTypeID as int,
	@sPropertyName as varchar(50),
	@sDefaultValue as varchar(250),
	@iSortOrder as tinyint,
	@iIsRequired as bit) 
AS
BEGIN

IF (@sPartTypePropertyID Is Null)
BEGIN

	SET @sPartTypePropertyID = newid()

	INSERT INTO PartTypeProperties (PartTypePropertyID, PartTypeID, [Property], DefaultValue, SortOrder, IsRequired)
	VALUES (@sPartTypePropertyID, @iPartTypeID, @sPropertyName, @sDefaultValue, @iSortOrder, @iIsRequired)
END
ELSE
BEGIN
	UPDATE PartTypeProperties
	SET [Property] = @sPropertyName
	, DefaultValue = @sDefaultValue
	, SortOrder = @iSortOrder
	, IsRequired = @iIsRequired
	WHERE PartTypePropertyID = @sPartTypePropertyID
END

SELECT @sPartTypePropertyID

SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ScorecardMapRegions]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_ScorecardMapRegions]
	@xmlData as xml
AS
BEGIN
	
SET NOCOUNT ON;

DECLARE @StartDate AS DATE
DECLARE @EndDate AS DATE
DECLARE @Region as varchar(50)
Declare @sqlColorExpression as VARCHAR(MAX)

SELECT @EndDate = T.c.value('.', 'DATE') FROM @xmlData.nodes('/Filters/Date') T(c)
SELECT @Region = T.c.value('.', 'VARCHAR(50)') FROM @xmlData.nodes('/Filters/Region') T(c)

--Select DATE COLUMNS NAMES
IF(@EndDate IS NULL)
BEGIN
	Set @EndDate = DATEADD(MONTH, -1, GETDATE())
END
ELSE
BEGIN
	Set @EndDate = DATEADD(MONTH, -1, @EndDate)
END

SET @StartDate = DATEADD(MONTH, -1, @EndDate)

Select RowId, MonthName, Year
INTO #tblDates
From
(
	Select 1 as RowId, UPPER(CONVERT(VARCHAR(3), DATENAME(MONTH, @StartDate))) as MonthName, YEAR(@StartDate) as Year
	UNION
	Select 2 as RowId, UPPER(CONVERT(VARCHAR(3), DATENAME(MONTH, @EndDate))) as MonthName, YEAR(@EndDate) as Year
) a

--E6B8B7--FF0000
--FFFF99--FFFF00
--92D050--00B050
-- color codes...
Select '#E6B8B7' as [R]
		, '#FFFF99' as [Y]
		, '#92D050' as [G]
		, '#00B0F0' as [C]
		, '#C00000' as [H]
		, '#FFFFFF' as [W]
INTO #tblColors


--Regions + Gloabl

IF(ISNULL(@Region, '') = '')
BEGIN
	Set @Region = 'ALL'
END

CREATE TABLE #tblRegions
(
	Region varchar(25),
	RegionDesc varchar(50),
	Latitude decimal null,
	Longitude decimal null,
	Revenue1 DECIMAL(18, 4),
	Revenue2 DECIMAL(18, 4)
)

IF(@Region = 'ALL' OR @Region = 'Global')
BEGIN
	INSERT INTO #tblRegions(Region, RegionDesc, Latitude, Longitude)
	Select 'Global' as Region, 'Global DS' as RegionDesc, '30.35' as Latitude, '-35.40' as Longitude
END

INSERT INTO #tblRegions(Region, RegionDesc, Latitude, Longitude)
Select r.Region, r.RegionDesc, r.Latitude, r.Longitude
from Regions(NOLOCK) r
where r.Active = 1
AND r.Region = (CASE WHEN @Region = 'ALL' THEN r.Region ELSE @Region END)
ORDER By r.RegionDesc

-- Get Revenue Values....
Update #tblRegions Set Revenue1 = (Select TOP 1 ActualValue 
from Scorecards(NOLOCK) s 
LEFT JOIN ReportFields(NOLOCK) f ON f.ReportFieldId = s.ReportFieldId 
Where f.Attribute1 = 'Revenue' 
AND s.Region = #tblRegions.Region AND s.DataYear = YEAR(@StartDate) AND s.DataMonth = MONTH(@StartDate))

Update #tblRegions Set Revenue2 = (Select TOP 1 ActualValue 
from Scorecards(NOLOCK) s 
LEFT JOIN ReportFields(NOLOCK) f ON f.ReportFieldId = s.ReportFieldId 
Where f.Attribute1 = 'Revenue' 
AND s.Region = #tblRegions.Region AND s.DataYear = YEAR(@EndDate) AND s.DataMonth = MONTH(@EndDate))


--Categories
Select CategoryName, CategoryDisplayName, CategoryDisplayNameShort, CategoryDisplayOrder
INTO #tblCategories
from ReportFields(NOLOCK)
Where ReportName = 'Scorecard'
GROUP by CategoryName, CategoryDisplayName, CategoryDisplayNameShort, CategoryDisplayOrder
ORDER by CategoryDisplayOrder

--Scorecard Data...
Select DataYear, DataMonth, Region, ReportFieldId, ActualValue, BudgetValue
INTO #tblScorecard
from Scorecards(NOLOCK)
Where 
	(
		(DataYear = YEAR(@StartDate) AND DataMonth = MONTH(@StartDate))
		 OR 
		(DataYear = YEAR(@EndDate) AND DataMonth = MONTH(@EndDate))
	)
	

--create data...
CREATE TABLE #tblData
(
	Id INT identity(1, 1),
	ReportFieldId INT,
	CategoryName VARCHAR(255),
	CategoryDisplayName VARCHAR(255),
	CategoryDisplayNameShort VARCHAR(255),
	CategoryDisplayOrder INT NULL,
	FieldName VARCHAR(255),
	DisplayName VARCHAR(255),
	DisplayOrder INT NULL,
	Symbol VARCHAR(2),
	Attribute1 VARCHAR(50),
	Region VARCHAR(25),
	RegionDesc varchar(50),
	Revenue1 DECIMAL(18, 4),
	Revenue2 DECIMAL(18, 4),
	
	Month1Actual decimal(18, 4) NULL,
	Month1ActualColor VARCHAR(1),
	Month1Revenue decimal(18, 2) NULL,
	Month1RevenueColor VARCHAR(1),
	Month1Budget decimal(18, 4) NULL,
	Month1BudgetColor VARCHAR(1),
	Month1ActualVsBudget INT NULL,
	Month1ActualVsBudgetColor VARCHAR(1),
	
	Month2Actual decimal(18, 4) NULL,
	Month2ActualColor VARCHAR(1),
	Month2Revenue decimal(18, 2) NULL,
	Month2RevenueColor VARCHAR(1),
	Month2Budget decimal(18, 4) NULL,
	Month2BudgetColor VARCHAR(1),
	Month2ActualVsBudget INT NULL,
	Month2ActualVsBudgetColor VARCHAR(1)
)

INSERT INTO #tblData(ReportFieldId, CategoryName, CategoryDisplayName, CategoryDisplayNameShort, CategoryDisplayOrder, FieldName, DisplayName, DisplayOrder, Symbol, Attribute1
		, Region, RegionDesc, Revenue1, Revenue2)
Select f.ReportFieldId, f.CategoryName, f.CategoryDisplayName, f.CategoryDisplayNameShort, f.CategoryDisplayOrder, f.FieldName, f.DisplayName, f.DisplayOrder, f.Symbol, f.Attribute1
		, r.Region, r.RegionDesc, r.Revenue1, r.Revenue2
from ReportFields(NOLOCK) f
CROSS JOIN #tblRegions r
Where f.ReportName = 'Scorecard' -- AND r.Region = 'Global' AND f.ReportFieldId >= 32
ORDER by f.CategoryDisplayOrder, f.DisplayOrder

Update a
	Set 
		a.Month1Actual = (Select top 1 ActualValue from #tblScorecard sc Where sc.DataYear = YEAR(@StartDate) AND sc.DataMonth = MONTH(@StartDate) AND sc.Region = a.Region AND sc.ReportFieldId = a.ReportFieldId),
		a.Month1Budget = (Select top 1 BudgetValue from #tblScorecard sc Where sc.DataYear = YEAR(@StartDate) AND sc.DataMonth = MONTH(@StartDate) AND sc.Region = a.Region AND sc.ReportFieldId = a.ReportFieldId),
		a.Month2Actual = (Select top 1 ActualValue from #tblScorecard sc Where sc.DataYear = YEAR(@EndDate) AND sc.DataMonth = MONTH(@EndDate) AND sc.Region = a.Region AND sc.ReportFieldId = a.ReportFieldId),
		a.Month2Budget = (Select top 1 BudgetValue from #tblScorecard sc Where sc.DataYear = YEAR(@EndDate) AND sc.DataMonth = MONTH(@EndDate) AND sc.Region = a.Region AND sc.ReportFieldId = a.ReportFieldId)
from #tblData a

Update a
	Set 
		a.Month1Actual = (Select TOP 1 Month1Actual from #tblData b Where b.Attribute1 = 'PersonnelCost' AND a.Region = b.Region),
		a.Month1Budget = (Select TOP 1 Month1Budget from #tblData b Where b.Attribute1 = 'PersonnelCost' AND a.Region = b.Region),
		a.Month2Actual = (Select TOP 1 Month2Actual from #tblData b Where b.Attribute1 = 'PersonnelCost' AND a.Region = b.Region),
		a.Month2Budget = (Select TOP 1 Month2Budget from #tblData b Where b.Attribute1 = 'PersonnelCost' AND a.Region = b.Region)
From #tblData a
Where a.Attribute1 = 'UsePersonnelCost'

--////////////////////////////////////////////Calculate Quality And Reliability Sections(Runs)/////////////////////////////////////////////////////

-- create Jar Runs table
Select RunYear, RunMonth, Region, SUM(TotalJarRuns) as TotalJarRuns
INTO #tblJarRuns
From(
	Select 
		YEAR(ja.EndDate) as RunYear, MONTH(ja.EndDate) as RunMonth, j.Region, 1 as TotalJarRuns
	from JarActivities(NOLOCK) ja
	INNER JOIN Jobs(NOLOCK) j on j.JobId = ja.JobId
	Where j.IsDeleted = 0 AND ja.RunNumber NOT IN('Other', 'Standby')
	AND 
		(
			(YEAR(ja.EndDate) = YEAR(@StartDate) AND MONTH(ja.EndDate) = MONTH(@StartDate))
			 OR 
			(YEAR(ja.EndDate) = YEAR(@EndDate) AND MONTH(ja.EndDate) = MONTH(@EndDate))
		)
	GROUP by YEAR(ja.EndDate), MONTH(ja.EndDate), j.Region, j.JobNumber, ja.RunNumber
)jr
GROUP by RunYear, RunMonth, Region

INSERT INTO #tblJarRuns
Select RunYear, RunMonth, 'Global', SUM(TotalJarRuns) from #tblJarRuns GROUP by RunYear, RunMonth

-- create runs table (total/Good)
CREATE TABLE #tblRuns
(
	RunYear INT,
	RunMonth INT,
	Region VARCHAR(25),
	
	TotalJarRuns INT,
	TotalRuns INT,
	TotalGoodRuns INT,
	
	LWD INT,
	LWDGoodRuns INT,
	MWD INT,
	MWDGoodRuns INT,
	RSS INT,
	RSSGoodRuns INT,
	Motor INT,
	MotorGoodRuns INT,
	
	TotalUploadedRunsPerc DECIMAL(18, 2),
	TotalGoodRunsPerc DECIMAL(18, 2),
	LWDGoodRunsPerc  DECIMAL(18, 2),
	MWDGoodRunsPerc  DECIMAL(18, 2),
	RSSGoodRunsPerc  DECIMAL(18, 2),
	MotorGoodRunsPerc  DECIMAL(18, 2)
)

--Fill Runs table
INSERT INTO #tblRuns(RunYear, RunMonth, Region, TotalRuns, TotalGoodRuns, LWD, LWDGoodRuns, MWD, MWDGoodRuns, RSS, RSSGoodRuns, Motor, MotorGoodRuns)
Select RunYear
		, RunMonth
		, Region
		, COUNT(RunNumber) as TotalRuns
		, SUM(GoodRun) as TotalGoodRuns
		, SUM(LWD) As LWD
		, SUM(Case When (LWD = 1 And LWDFailureCSI = 0) Then 1 Else 0 End) As LWDGoodRuns
		, SUM(AllMWD) As MWD
		, SUM(Case When (AllMWD = 1 And MWDFailureCSI = 0) Then 1 Else 0 End) As MWDGoodRuns
		, SUM(RSS) as RSS
		, SUM(Case When (RSS = 1 And RSSFailureCSI = 0) Then 1 Else 0 End) As RSSGoodRuns
		, SUM(Case When (MotorWFT = 1 or RentalMotor = 1) Then 1 Else 0 End) As Motor
		, SUM(Case When ((MotorWFT = 1 or RentalMotor = 1) And MotorFailureCSI = 0) Then 1 Else 0 End) As MotorGoodRuns
From RelBusinessIntelligenceDataSet
Where 
	(
		(YEAR(EndDate) = YEAR(@StartDate) AND MONTH(EndDate) = MONTH(@StartDate))
		 OR 
		(YEAR(EndDate) = YEAR(@EndDate) AND MONTH(EndDate) = MONTH(@EndDate))
	)
--Where EndDate >= '02/01/2015 00:00:00.000'
--And EndDate < '03/01/2015 00:00:00.000'
GROUP by RunYear, RunMonth, Region

--insert global runs data...
INSERT INTO #tblRuns(RunYear, RunMonth, Region, TotalRuns, TotalGoodRuns, LWD, LWDGoodRuns, MWD, MWDGoodRuns, RSS, RSSGoodRuns, Motor, MotorGoodRuns)
Select RunYear, RunMonth, 'Global', SUM(TotalRuns), SUM(TotalGoodRuns), SUM(LWD), SUM(LWDGoodRuns), SUM(MWD), SUM(MWDGoodRuns)
	, SUM(RSS), SUM(RSSGoodRuns), SUM(Motor), SUM(MotorGoodRuns)
From #tblRuns
GROUP by RunYear, RunMonth

--Update Total Jar Runs...
Update r
	Set r.TotalJarRuns = jr.TotalJarRuns
From #tblRuns r
INNER JOIN #tblJarRuns jr ON jr.RunYear = r.RunYear AND jr.RunMonth = r.RunMonth AND jr.Region = r.Region

-- calculate runs percentage...
Update #tblRuns Set TotalUploadedRunsPerc = (Case When TotalJarRuns > 0 Then TotalRuns / (TotalJarRuns*1.00) Else 0 End) * 100
Update #tblRuns Set TotalGoodRunsPerc = (Case When TotalRuns > 0 Then TotalGoodRuns / (TotalRuns*1.00) Else 0 End) * 100
Update #tblRuns Set LWDGoodRunsPerc = (Case When LWD > 0 Then LWDGoodRuns / (LWD*1.00) Else 0 End) * 100
Update #tblRuns Set MWDGoodRunsPerc = (Case When MWD > 0 Then MWDGoodRuns / (MWD*1.00) Else 0 End) * 100
Update #tblRuns Set RSSGoodRunsPerc = (Case When RSS > 0 Then RSSGoodRuns / (RSS*1.00) Else 0 End) * 100
Update #tblRuns Set MotorGoodRunsPerc = (Case When Motor > 0 Then MotorGoodRuns / (Motor*1.00) Else 0 End) * 100

-- update run info in #tblData

Update a
	Set 
		a.Month1Actual = CASE
							WHEN a.Attribute1 = 'TotalJarRuns' THEN r.TotalJarRuns 
							WHEN a.Attribute1 = 'TotalRuns' THEN r.TotalRuns
							WHEN a.Attribute1 = 'DeltaJarToRelRuns' THEN ISNULL(r.TotalJarRuns, 0) - ISNULL(r.TotalRuns, 0)
							WHEN a.Attribute1 = 'TotalUploadedRunsPerc' THEN r.TotalUploadedRunsPerc
							WHEN a.Attribute1 = 'TotalGoodRunsPerc' THEN r.TotalGoodRunsPerc
							WHEN a.Attribute1 = 'RSSGoodRunsPerc' THEN r.RSSGoodRunsPerc
							WHEN a.Attribute1 = 'MotorGoodRunsPerc' THEN r.MotorGoodRunsPerc
							WHEN a.Attribute1 = 'LWDGoodRunsPerc' THEN r.LWDGoodRunsPerc
							WHEN a.Attribute1 = 'MWDGoodRunsPerc' THEN r.MWDGoodRunsPerc
							ELSE a.Month1Actual
						  END
from #tblData a
INNER JOIN #tblRuns r ON r.Region = a.Region AND r.RunMonth = MONTH(@StartDate) AND r.RunYear = YEAR(@StartDate)
Where a.Attribute1 IS NOT NULL

Update a
	Set 
		a.Month2Actual = CASE
							WHEN a.Attribute1 = 'TotalJarRuns' THEN r.TotalJarRuns 
							WHEN a.Attribute1 = 'TotalRuns' THEN r.TotalRuns
							WHEN a.Attribute1 = 'DeltaJarToRelRuns' THEN ISNULL(r.TotalJarRuns, 0) - ISNULL(r.TotalRuns, 0)
							WHEN a.Attribute1 = 'TotalUploadedRunsPerc' THEN r.TotalUploadedRunsPerc
							WHEN a.Attribute1 = 'TotalGoodRunsPerc' THEN r.TotalGoodRunsPerc
							WHEN a.Attribute1 = 'RSSGoodRunsPerc' THEN r.RSSGoodRunsPerc
							WHEN a.Attribute1 = 'MotorGoodRunsPerc' THEN r.MotorGoodRunsPerc
							WHEN a.Attribute1 = 'LWDGoodRunsPerc' THEN r.LWDGoodRunsPerc
							WHEN a.Attribute1 = 'MWDGoodRunsPerc' THEN r.MWDGoodRunsPerc
							ELSE a.Month2Actual
						  END
from #tblData a
INNER JOIN #tblRuns r ON r.Region = a.Region AND r.RunMonth = MONTH(@EndDate) AND r.RunYear = YEAR(@EndDate)
Where a.Attribute1 IS NOT NULL


--////////////////////////////////////////////End Calculate Quality And Reliability Sections(Runs)/////////////////////////////////////////////////////
--

--////////////////////////////////////////////Calculate Quality And Reliability Sections(NPT/Oper Hrs)/////////////////////////////////////////////////////

CREATE TABLE #tblOperNptHrs
(
	RunYear INT,
	RunMonth INT,
	Region VARCHAR(25),
	TotalOperHrs DECIMAL(18, 2),
	TotalNptHrs DECIMAL(18, 2),
	LWD DECIMAL(18, 2),
	LWDOperHrs DECIMAL(18, 2),
	LWDNPTHrs DECIMAL(18, 2),
	MWD DECIMAL(18, 2),
	MWDOperHrs DECIMAL(18, 2),
	MWDNPTHrs DECIMAL(18, 2),
	RSS DECIMAL(18, 2),
	RSSOperHrs DECIMAL(18, 2),
	RSSNPTHrs DECIMAL(18, 2),
	Motor DECIMAL(18, 2),
	MotorOperHrs DECIMAL(18, 2),
	MotorNptHrs DECIMAL(18, 2),
	
	TotalGoodNPTPerc  DECIMAL(18, 2),
	LWDGoodNPTPerc  DECIMAL(18, 2),
	MWDGoodNPTPerc  DECIMAL(18, 2),
	RSSGoodNPTPerc  DECIMAL(18, 2),
	MotorGoodNPTPerc  DECIMAL(18, 2)
)

INSERT INTO #tblOperNptHrs(RunYear, RunMonth, Region, TotalOperHrs, TotalNptHrs, LWD, LWDNptHrs, LWDOperHrs
	, MWD, MWDNptHrs, MWDOperHrs, RSS, RSSNptHrs, RSSOperHrs, Motor, MotorNptHrs, MotorOperHrs
	)
Select RunYear
		, RunMonth
		, Region
		, SUM(OperHrs) As TotalOperHrs
		, SUM(Case When NPTRun = 1 Then NPT Else 0 End) As TotalNptHrs
		
		, SUM(LWD) As LWD
		, SUM(TotalLWDNPT) As LWDNptHrs
		, SUM(Case When LWD = 1 Then OperHrs Else 0 End) As LWDOperHrs
		
		, SUM(AllMWD) As MWD
		, SUM(MWDNPTTFF) As MWDNptHrs
		, SUM(Case When AllMWD = 1 Then OperHrs Else 0 End) As MWDOperHrs
		
		, SUM(RSS) AS RSS
		, SUM(TotalRSSNPTTFF + RSSNPTnonTFF) As RSSNptHrs
		, SUM(Case When RSS = 1 Then OperHrs Else 0 End) As RSSOperHrs
		
		, SUM(Case When (MotorWFT = 1 or RentalMotor = 1) Then 1 Else 0 End) As Motor
		, SUM(MotorNPTTFF) As MotorNptHrs
		, SUM(Case When (MotorWFT = 1 or RentalMotor = 1) Then OperHrs Else 0 End) As MotorOperHrs
From RelBusinessIntelligenceDataSet
Where 
	(
		(YEAR(EndDate) = YEAR(@StartDate) AND MONTH(EndDate) = MONTH(@StartDate))
		 OR 
		(YEAR(EndDate) = YEAR(@EndDate) AND MONTH(EndDate) = MONTH(@EndDate))
	)
GROUP BY RunYear, RunMonth, Region

INSERT INTO #tblOperNptHrs(RunYear, RunMonth, Region, TotalOperHrs, TotalNptHrs, LWD, LWDNptHrs, LWDOperHrs
	, MWD, MWDNptHrs, MWDOperHrs, RSS, RSSNptHrs, RSSOperHrs, Motor, MotorNptHrs, MotorOperHrs
	)
Select RunYear, RunMonth, 'Global', SUM(TotalOperHrs), SUM(TotalNptHrs), SUM(LWD), SUM(LWDNptHrs), SUM(LWDOperHrs)
	, SUM(MWD), SUM(MWDNptHrs), SUM(MWDOperHrs), SUM(RSS), SUM(RSSNptHrs), SUM(RSSOperHrs), SUM(Motor), SUM(MotorNptHrs), SUM(MotorOperHrs)
from #tblOperNptHrs
GROUP by RunYear, RunMonth

Update #tblOperNptHrs Set TotalGoodNPTPerc = (Case When TotalOperHrs > 0 Then TotalNptHrs / TotalOperHrs Else 0 End) * 100
Update #tblOperNptHrs Set LWDGoodNPTPerc = (Case When LWDOperHrs > 0 Then LWDNptHrs / LWDOperHrs Else 0 End) * 100
Update #tblOperNptHrs Set MWDGoodNPTPerc = (Case When MWDOperHrs > 0 Then MWDNptHrs / MWDOperHrs Else 0 End) * 100
Update #tblOperNptHrs Set RSSGoodNPTPerc = (Case When RSSOperHrs > 0 Then RSSNptHrs / RSSOperHrs Else 0 End) * 100
Update #tblOperNptHrs Set MotorGoodNPTPerc = (Case When MotorOperHrs > 0 Then MotorNptHrs / MotorOperHrs Else 0 End) * 100

-- update NPT/Oper info in #tblData

Update a
	Set 
		a.Month1Actual = CASE
							WHEN a.Attribute1 = 'TotalGoodNPTPerc' THEN r.TotalGoodNPTPerc 
							WHEN a.Attribute1 = 'RSSGoodNPTPerc' THEN r.RSSGoodNPTPerc
							WHEN a.Attribute1 = 'MotorGoodNPTPerc' THEN r.MotorGoodNPTPerc
							WHEN a.Attribute1 = 'LWDGoodNPTPerc' THEN r.LWDGoodNPTPerc
							WHEN a.Attribute1 = 'MWDGoodNPTPerc' THEN r.MWDGoodNPTPerc
							ELSE a.Month1Actual
						  END
from #tblData a
INNER JOIN #tblOperNptHrs r ON r.Region = a.Region AND r.RunMonth = MONTH(@StartDate) AND r.RunYear = YEAR(@StartDate)
Where a.Attribute1 IS NOT NULL

Update a
	Set 
		a.Month2Actual = CASE
							WHEN a.Attribute1 = 'TotalGoodNPTPerc' THEN r.TotalGoodNPTPerc 
							WHEN a.Attribute1 = 'RSSGoodNPTPerc' THEN r.RSSGoodNPTPerc
							WHEN a.Attribute1 = 'MotorGoodNPTPerc' THEN r.MotorGoodNPTPerc
							WHEN a.Attribute1 = 'LWDGoodNPTPerc' THEN r.LWDGoodNPTPerc
							WHEN a.Attribute1 = 'MWDGoodNPTPerc' THEN r.MWDGoodNPTPerc
							ELSE a.Month2Actual
						  END
from #tblData a
INNER JOIN #tblOperNptHrs r ON r.Region = a.Region AND r.RunMonth = MONTH(@EndDate) AND r.RunYear = YEAR(@EndDate)
Where a.Attribute1 IS NOT NULL



--////////////////////////////////////////////End Calculate Quality And Reliability Sections(NPT/Oper Hrs)/////////////////////////////////////////////////////

--////////////////////////////////////////////Calculate No. Open Client Failure Reports > 30days/////////////////////////////////////////////////////

-- fill incident count data: TODO: Redo.

SELECT
		YEAR(oci.FailureDate) as FailureYear, MONTH(oci.FailureDate) as FailureMonth, oci.region, COUNT(distinct oci.ID) as OpenIncidentCount
INTO #tblIncidents
from vwOpenCustomerImpactedIncidentReport oci
where oci.DaysOpen >= 30
GROUP by YEAR(oci.FailureDate), MONTH(oci.FailureDate), oci.Region

-- fill incident count data(Global)
INSERT INTO #tblIncidents
Select FailureYear, FailureMonth, 'Global', SUM(OpenIncidentCount) from #tblIncidents GROUP by FailureYear, FailureMonth

-- update incident count in results
Update #tblData
	Set Month1Actual = t.OpenIncidentCount
from
	(select Region, SUM(openincidentcount) as OpenIncidentCount from #tblIncidents
	group by Region) t
where t.Region = #tblData.Region and #tblData.Attribute1 = 'OpenIncidentCount'


-- update incident count in results
Update #tblData
	Set Month2Actual = t.OpenIncidentCount
from
	(select Region, SUM(openincidentcount) as OpenIncidentCount from #tblIncidents
	group by Region) t
where t.Region = #tblData.Region and #tblData.Attribute1 = 'OpenIncidentCount'


--////////////////////////////////////////////End Calculate No. Open Client Failure Reports > 30days/////////////////////////////////////////////////////

--////////////////////////////////////////////Calculate Revenue/////////////////////////////////////////////////////
Update a 
	Set a.Month1Revenue = ROUND((a.Month1Actual*100)/a.Revenue1, 2) 
from #tblData a
LEFT JOIN ScorecardTargetLimits(NOLOCK) t ON t.ReportFieldId = a.ReportFieldId AND t.Region = a.Region
Where ISNULL(Revenue1, 0) <> 0 AND ISNULL(t.CalculateRevenue, 0) = 1

Update a 
	Set a.Month2Revenue = ROUND((a.Month2Actual*100)/a.Revenue2, 2) 
from #tblData a
LEFT JOIN ScorecardTargetLimits(NOLOCK) t ON t.ReportFieldId = a.ReportFieldId AND t.Region = a.Region
Where ISNULL(Revenue2, 0) <> 0 AND ISNULL(t.CalculateRevenue, 0) = 1

--////////////////////////////////////////////Calculate Revenue Color/////////////////////////////////////////////////////
SET @sqlColorExpression = ''
Select @sqlColorExpression += 'Update #tblData Set Month1RevenueColor = ' 
	+ dbo.GetScorecardLimitExpression(a.ReportFieldId, a.Region, CONVERT(VARCHAR(50), a.Month1Revenue), 'Target') + '
Where Id = ' + CONVERT(VARCHAR(50), Id) + ';'
FROM #tblData a
LEFT JOIN ScorecardTargetLimits(NOLOCK) t ON t.ReportFieldId = a.ReportFieldId AND t.Region = a.Region
Where t.ApplyTargetLimitTo = 'Revenue'
EXECUTE(@sqlColorExpression)

SET @sqlColorExpression = ''
Select @sqlColorExpression += 'Update #tblData Set Month2RevenueColor = ' 
	+ dbo.GetScorecardLimitExpression(a.ReportFieldId, a.Region, CONVERT(VARCHAR(50), a.Month2Revenue), 'Target') + '
Where Id = ' + CONVERT(VARCHAR(50), Id) + ';'
FROM #tblData a
LEFT JOIN ScorecardTargetLimits(NOLOCK) t ON t.ReportFieldId = a.ReportFieldId AND t.Region = a.Region
Where t.ApplyTargetLimitTo = 'Revenue'
EXECUTE(@sqlColorExpression)

--////////////////////////////////////////////Calculate Actual Vs Budget/////////////////////////////////////////////////////
Update a 
	Set a.Month1ActualVsBudget = ROUND((((a.Month1Actual - a.Month1Budget) / a.Month1Budget) + 1)*100, 0)
from #tblData a
LEFT JOIN ScorecardTargetLimits(NOLOCK) t ON t.ReportFieldId = a.ReportFieldId AND t.Region = a.Region
Where ISNULL(Month1Budget, 0) <> 0 AND ISNULL(t.CalculateActualVsBudget, 0) = 1

Update a 
	Set a.Month2ActualVsBudget = ROUND((((a.Month2Actual - a.Month2Budget) / a.Month2Budget) + 1)*100, 0)
from #tblData a
LEFT JOIN ScorecardTargetLimits(NOLOCK) t ON t.ReportFieldId = a.ReportFieldId AND t.Region = a.Region
Where ISNULL(Month2Budget, 0) <> 0 AND ISNULL(t.CalculateActualVsBudget, 0) = 1

--////////////////////////////////////////////Calculate Actual Vs Budget Color/////////////////////////////////////////////////////
SET @sqlColorExpression = ''
Select @sqlColorExpression += 'Update #tblData Set Month1ActualVsBudgetColor = ' 
	+ dbo.GetScorecardLimitExpression(a.ReportFieldId, a.Region, CONVERT(VARCHAR(50), a.Month1ActualVsBudget), 'ActualVsBudget') + '
Where Id = ' + CONVERT(VARCHAR(50), Id) + ';'
FROM #tblData a
LEFT JOIN ScorecardTargetLimits(NOLOCK) t ON t.ReportFieldId = a.ReportFieldId AND t.Region = a.Region
Where ISNULL(t.CalculateActualVsBudget, 0) = 1
EXECUTE(@sqlColorExpression)

SET @sqlColorExpression = ''
Select @sqlColorExpression += 'Update #tblData Set Month2ActualVsBudgetColor = ' 
	+ dbo.GetScorecardLimitExpression(a.ReportFieldId, a.Region, CONVERT(VARCHAR(50), a.Month2ActualVsBudget), 'ActualVsBudget') + '
Where Id = ' + CONVERT(VARCHAR(50), Id) + ';'
FROM #tblData a
LEFT JOIN ScorecardTargetLimits(NOLOCK) t ON t.ReportFieldId = a.ReportFieldId AND t.Region = a.Region
Where ISNULL(t.CalculateActualVsBudget, 0) = 1
EXECUTE(@sqlColorExpression)

--////////////////////////////////////////////Calculate Actual Color/////////////////////////////////////////////////////
SET @sqlColorExpression = ''
Select @sqlColorExpression += 'Update #tblData Set Month1ActualColor = ' 
	+ dbo.GetScorecardLimitExpression(a.ReportFieldId, a.Region, CONVERT(VARCHAR(50), a.Month1Actual), 'Target') + '
Where Id = ' + CONVERT(VARCHAR(50), Id) + ';'
FROM #tblData a
LEFT JOIN ScorecardTargetLimits(NOLOCK) t ON t.ReportFieldId = a.ReportFieldId AND t.Region = a.Region
Where t.ApplyTargetLimitTo = 'Actual'
EXECUTE(@sqlColorExpression)

SET @sqlColorExpression = ''
Select @sqlColorExpression += 'Update #tblData Set Month2ActualColor = ' 
	+ dbo.GetScorecardLimitExpression(a.ReportFieldId, a.Region, CONVERT(VARCHAR(50), a.Month2Actual), 'Target') + '
Where Id = ' + CONVERT(VARCHAR(50), Id) + ';'
FROM #tblData a
LEFT JOIN ScorecardTargetLimits(NOLOCK) t ON t.ReportFieldId = a.ReportFieldId AND t.Region = a.Region
Where t.ApplyTargetLimitTo = 'Actual'
EXECUTE(@sqlColorExpression)




-- Select Results...
Select * from #tblDates
Select * from #tblColors
Select * from #tblRegions
Select * from #tblCategories

Select tbl.ReportFieldId, tbl.CategoryName,	tbl.CategoryDisplayName, tbl.CategoryDisplayNameShort, tbl.FieldName, tbl.DisplayName
	
	, ISNULL(t.TargetLimitStart, t.ActualVsBudgetLimitStart) as TargetLimitStart
	, (CASE WHEN LTRIM(RTRIM(ISNULL(t.TargetLimitStart, ISNULL(t.ActualVsBudgetLimitStart, '')))) = '' THEN '' ELSE 'R' END) as TargetLimitStartColor
	
	, (CASE WHEN LTRIM(RTRIM(ISNULL(t.TargetLimitBetween1, ISNULL(t.ActualVsBudgetLimitBetween1, '')))) = '' 
		THEN '' 
		ELSE LTRIM(RTRIM(ISNULL(t.TargetLimitBetween1, ISNULL(t.ActualVsBudgetLimitBetween1, '')))) END
		) +
		(
			CASE WHEN LTRIM(RTRIM(ISNULL(t.TargetLimitBetween1, ''))) <> '' THEN
				(CASE WHEN LTRIM(RTRIM(ISNULL(t.TargetLimitBetween2, ''))) = '' THEN '' ELSE (' - ' + LTRIM(RTRIM(ISNULL(t.TargetLimitBetween2, '')))) END)
			ELSE 
				(CASE WHEN LTRIM(RTRIM(ISNULL(t.ActualVsBudgetLimitBetween2, ''))) = '' THEN '' ELSE (' - ' + LTRIM(RTRIM(ISNULL(t.ActualVsBudgetLimitBetween2, '')))) END)
			END
		) as TargetLimitBetween
	, (CASE WHEN LTRIM(RTRIM(ISNULL(t.TargetLimitBetween1, ISNULL(t.ActualVsBudgetLimitBetween1, '')))) = '' THEN '' ELSE 'Y' END) as TargetLimitBetweenColor
	
	, ISNULL(t.TargetLimitEnd, t.ActualVsBudgetLimitEnd) as TargetLimitEnd
	, (CASE WHEN LTRIM(RTRIM(ISNULL(t.TargetLimitEnd, ISNULL(t.ActualVsBudgetLimitEnd, '')))) = '' THEN '' ELSE 'G' END) as TargetLimitEndColor
	
	, tbl.Symbol
	, tbl.Region, tbl.RegionDesc
	
	, tbl.Month1Actual
	, tbl.Month1ActualColor
	
	, tbl.Month1Revenue
	, tbl.Month1RevenueColor
	
	, tbl.Month1Budget
	, tbl.Month1BudgetColor
	
	, tbl.Month1ActualVsBudget
	, tbl.Month1ActualVsBudgetColor 
	
	, tbl.Month2Actual
	, tbl.Month2ActualColor
	
	, tbl.Month2Revenue
	, tbl.Month2RevenueColor
	
	, tbl.Month2Budget
	, tbl.Month2BudgetColor
	
	, tbl.Month2ActualVsBudget
	, tbl.Month2ActualVsBudgetColor
from #tblData tbl
LEFT JOIN ScorecardTargetLimits(NOLOCK) t ON t.ReportFieldId = tbl.ReportFieldId AND t.Region = tbl.Region
ORDER by tbl.Region, tbl.CategoryDisplayOrder, tbl.DisplayOrder


DROP TABLE #tblDates
DROP TABLE #tblColors
DROP TABLE #tblRegions
DROP TABLE #tblCategories
DROP TABLE #tblScorecard
DROP TABLE #tblData

DROP TABLE #tblJarRuns
DROP TABLE #tblRuns
DROP TABLE #tblOperNptHrs
DROP TABLE #tblIncidents

	
END
GO
/****** Object:  StoredProcedure [dbo].[usp_SetBuildNumber]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_SetBuildNumber] (
	@sBranchPlant varchar(12),
	@iBuildYear int,
	@iBuildNumber int)
AS
BEGIN
SET NOCOUNT ON

DECLARE @iCurrBuildNumber int

SET @iCurrBuildNumber = (SELECT BuildNumber FROM BuildNumber (NOLOCK) WHERE BranchPlant = @sBranchPlant AND BuildYear = @iBuildYear)

IF (@iCurrBuildNumber >= @iBuildNumber)
BEGIN
	SET @iBuildNumber = @iCurrBuildNumber + 1
END

UPDATE BuildNumber
SET BuildNumber = @iBuildNumber
WHERE BranchPlant = @sBranchPlant
AND BuildYear = @iBuildYear
						
SELECT @iBuildNumber

SET NOCOUNT OFF
END





/****** Object:  StoredProcedure [dbo].[usp_SetRMAnalysisReportStatus]    Script Date: 08/06/2014 14:55:24 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_SetConocoJobDataXmlDate]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_SetConocoJobDataXmlDate] (
	@sJobNumber as varchar(50),
	@sDesc as varchar(50))
AS
SET NOCOUNT ON

DECLARE @sJobID As uniqueidentifier
SET @sJobID = (Select JobID From Jobs Where IsDeleted = 0 AND JobNumber = @sJobNumber)

DECLARE @sRecExists As varchar(50)
SET @sRecExists = (Select [Desc] From ConocoJobDataXML Where JobID = @sJobID)

IF @sRecExists IS NULL
BEGIN
	INSERT INTO ConocoJobDataXML (JobID, DateGenerated, [Desc])
	VALUES (@sJobID, GetDate(), @sDesc)
END
ELSE
BEGIN
	UPDATE ConocoJobDataXML
	SET DateGenerated = GetDate()
	WHERE JobID = @sJobID
END

SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[usp_SetRMAnalysisReportStatus]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_SetRMAnalysisReportStatus] (
	@sIncidentID as uniqueidentifier,
	@iUserID as int) 
AS
SET NOCOUNT ON

DECLARE @iReportStatusID as tinyint
DECLARE @iDistrictStatusCnt as tinyint
DECLARE @sTechBoxes as varchar(70)
DECLARE @sIsClosedAtDistrict as varchar(2)
DECLARE @sIsClosedAtGlobal as varchar(2)


SET @iReportStatusID = 1
SET @sTechBoxes = ''
SET @sIsClosedAtDistrict = NULL
SET @sIsClosedAtGlobal = NULL


SET @iDistrictStatusCnt = (SELECT Sum(StatusCodeID) As Cnt FROM ToolStringComponentInfo WHERE StatusCodeID Is Not Null AND IncidentID = @sIncidentID)

IF (@iDistrictStatusCnt = 0)
BEGIN
	SELECT 
		@sTechBoxes = @sTechBoxes + Case IsNull(t.[Type], Max(tsci.FailedNonPartType)) 
			When 'MOTOR' Then 'Dist_DD = 1'
			When 'AGS' Then 'Dist_DD = 1'
			When 'HEL/LWD' Then 'Dist_LWD = 1'
			When 'HEL/EM' Then 'Dist_LWD = 1'
			When 'EM' Then 'Dist_MWD = 1'
			When 'HYPERPULSE' Then 'Dist_MWD = 1'
			When 'BECFIELD' Then 'Dist_MWD = 1'
			When 'GEOLINK' Then 'Dist_MWD = 1'
			When 'TENSOR' Then 'Dist_MWD = 1'
			When 'GWD' Then 'Dist_MWD = 1'
			When 'WPR' Then 'Dist_MWD = 1'
			When 'EM/TWINWELLS' Then 'Dist_MWD = 1'
			When 'DMT/AMS' Then 'Dist_SURVEY = 1'
			Else 'Dist_' + IsNull(t.[Type], Max(tsci.FailedNonPartType)) + ' = 1'
		End + ' AND '
	FROM ToolStringComponentInfo tsci
	LEFT JOIN ToolStrings t ON t.ToolStringID = tsci.ToolStringID
	WHERE tsci.StatusCodeID Is Not Null
	AND tsci.IncidentID = @sIncidentID
	GROUP BY t.[Type]

	IF (@sTechBoxes <> '')
	BEGIN
		   SET @sTechBoxes = LEFT(@sTechBoxes, LEN(@sTechBoxes) - 4)
	END

	DECLARE @sSQL as nvarchar(200)
	DECLARE @sParmDefinition as nvarchar(100)

	SET @sSQL = N'SELECT @sIsClosedAtDistrictOUT = Left(IncidentID,2) FROM Incidents WHERE IncidentID = @sIncidentIdIN AND ' + @sTechBoxes;
	SET @sParmDefinition = N'@sIncidentIdIN uniqueidentifier, @sIsClosedAtDistrictOUT varchar(2) OUTPUT';

	EXEC sp_executesql @sSQL, @sParmDefinition, @sIncidentIdIN=@sIncidentID, @sIsClosedAtDistrictOUT=@sIsClosedAtDistrict OUTPUT

	IF (@sIsClosedAtDistrict IS NOT NULL)
	BEGIN
		SET @iReportStatusID = 99
	END
END


SET @sTechBoxes = ''

IF (@iReportStatusID = 99)
BEGIN
	DECLARE @iGlobalStatusCnt tinyint
	SET @iGlobalStatusCnt = (SELECT Sum(GlobalStatusCodeID) As Cnt FROM ToolStringComponentInfo WHERE GlobalStatusCodeID Is Not Null AND IncidentID = @sIncidentID)

	IF (@iGlobalStatusCnt = 0)
	BEGIN
		SELECT 
			@sTechBoxes = @sTechBoxes + Case IsNull(t.[Type], Max(tsci.FailedNonPartType))
				When 'MOTOR' Then 'Global_DD = 1'
				When 'AGS' Then 'Global_DD = 1'
				When 'HEL/LWD' Then 'Global_LWD = 1'
				When 'HEL/EM' Then 'Global_LWD = 1'
				When 'EM' Then 'Global_MWD = 1'
				When 'HYPERPULSE' Then 'Global_MWD = 1'
				When 'BECFIELD' Then 'Global_MWD = 1'
				When 'GEOLINK' Then 'Global_MWD = 1'
				When 'TENSOR' Then 'Global_MWD = 1'
				When 'GWD' Then 'Global_MWD = 1'
				When 'WPR' Then 'Global_MWD = 1'
				When 'EM/TWINWELLS' Then 'Global_MWD = 1'
				When 'DMT/AMS' Then 'Global_SURVEY = 1'
				Else 'Global_' + IsNull(t.[Type], Max(tsci.FailedNonPartType)) + ' = 1'
			End + ' AND '
		FROM ToolStringComponentInfo tsci
		LEFT JOIN ToolStrings t ON t.ToolStringID = tsci.ToolStringID
		WHERE tsci.GlobalStatusCodeID Is Not Null
		AND tsci.IncidentID = @sIncidentID
		GROUP BY t.[Type]

		IF (@sTechBoxes <> '')
		BEGIN
			   SET @sTechBoxes = LEFT(@sTechBoxes, LEN(@sTechBoxes) - 4)
		END

		SET @sSQL = N'SELECT @sIsClosedAtGlobalOUT = Left(IncidentID,2) FROM Incidents WHERE IncidentID = @sIncidentIdIN AND ' + @sTechBoxes;
		SET @sParmDefinition = N'@sIncidentIdIN uniqueidentifier, @sIsClosedAtGlobalOUT varchar(2) OUTPUT';

		EXEC sp_executesql @sSQL, @sParmDefinition, @sIncidentIdIN=@sIncidentID, @sIsClosedAtGlobalOUT=@sIsClosedAtGlobal OUTPUT

		IF (@sIsClosedAtGlobal IS NOT NULL)
		BEGIN
			SET @iReportStatusID = 0
		END
	END
END


UPDATE Incidents 
SET IsOpen = @iReportStatusID
WHERE IncidentID = @sIncidentID

EXEC usp_CreateAuditRMAnalysisRptLevel @sIncidentID,29,@iReportStatusID,@iUserID,1

SELECT @iReportStatusID

SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[usp_SetToolSheetJobMap]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_SetToolSheetJobMap] (
	@sToolStringID as uniqueidentifier,
	@sJobID as uniqueidentifier)

AS
BEGIN
SET NOCOUNT ON

DECLARE @sToolJobMapID As Varchar(38)
SET @sToolJobMapID = (SELECT Top 1 ToolJobMapID FROM ToolJobMap WHERE ToolStringID = @sToolStringID AND JobID = @sJobID)

IF @sToolJobMapID IS NULL
BEGIN
	INSERT INTO ToolJobMap 
	VALUES (newid(), @sToolStringID, @sJobID)
	SELECT 'Tool/Job Mapping Created'
END

SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_SOA_AssetFeed_PartTransferDtlRecord]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_SOA_AssetFeed_PartTransferDtlRecord]
	@xmlData xml,
	@fixedAssetId uniqueidentifier,
	@currentEquipmentStatus varchar(2)
AS
	declare @partTransferDtlId uniqueidentifier
	declare @transactionId int
	declare @AssetNumber varchar(10)
	declare @BranchPlant varchar(12)
	declare @DocumentType varchar(25)
	declare @DocumentNumber int
	declare @AddressNumber int
	declare @ItemNo varchar(30)
	declare @SerialNo varchar(30)
	declare @rnItemNum varchar(30)
	declare @Quantity decimal(15,2)
	declare @AssetStatus varchar(2)
	declare @DateShipConfirmed datetime
	declare @UserCreatedDocument varchar(25)
	declare @UserApprovedonRecvSide varchar(25)
	declare @DateApproved datetime
	declare @SendingLocation varchar(12)
	declare @ReceivingLocation varchar(12)
	declare @AssetTransferReqNo varchar(25)
	declare @DateofTransaction datetime
	DECLARE @TimeOfTransaction varchar(6)
	declare @OwnershipCode varchar(3)
	declare @Revision varchar(2)
	DECLARE @ParentAsset varchar(10)
	DECLARE @ProgramId varchar(MAX)

	DECLARE @startDateTime DATETIME, @runId UNIQUEIDENTIFIER;
	SET @startDateTime = GETDATE();
	SET @runId = NEWID();

	;WITH XMLNAMESPACES ('http://www.wft.com/AssetInformation/Outbound/v1.0' AS inp1,
			DEFAULT 'http://www.wft.com/AssetInformation/Outbound/v1.0')
	SELECT
		@transactionId = ltrim(rtrim(T.c.value('(TransactionId/text())[1]', 'int')))
	FROM @xmlData.nodes('/AssetInfoCollection/MessageHeader') AS T(c)

	EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeed_PartTransferDtlRecord', 'Get Message header from xml', @startDateTime;
	SET @startDateTime = GETDATE();

	;WITH XMLNAMESPACES ('http://www.wft.com/AssetInformation/Outbound/v1.0' AS inp1,
			DEFAULT 'http://www.wft.com/AssetInformation/Outbound/v1.0')
	SELECT
		@AssetNumber = ltrim(rtrim(T.c.value('(AssetNumber/text())[1]', 'varchar(10)'))),
		@BranchPlant = T.c.value('(BranchPlant/text())[1]', 'varchar(12)'),
		@DocumentType = ltrim(rtrim(T.c.value('(DocumentType/text())[1]', 'varchar(25)'))),
		@DocumentNumber = ltrim(rtrim(T.c.value('(DocumentNumber/text())[1]', 'int'))),
		@AddressNumber = ltrim(rtrim(T.c.value('(AddressNumber/text())[1]', 'int'))),
		--@ItemNo = ltrim(rtrim(T.c.value('(ItemNo/text())[1]', 'varchar(30)'))),
		--@SerialNo = ltrim(rtrim(T.c.value('(SerialNo/text())[1]', 'varchar(30)'))),
		@Quantity = ltrim(rtrim(T.c.value('(Quantity/text())[1]', 'decimal(15,2)'))),
		@AssetStatus = ltrim(rtrim(T.c.value('(AssetStatus/text())[1]', 'varchar(2)'))),
		@DateShipConfirmed = ltrim(rtrim(T.c.value('(DateShipConfirmed/text())[1]', 'datetime'))),
		@UserCreatedDocument = ltrim(rtrim(T.c.value('(UserCreatedDocument/text())[1]', 'varchar(25)'))),
		@UserApprovedonRecvSide = ltrim(rtrim(T.c.value('(UserApprovedonRecvSide/text())[1]', 'varchar(25)'))),
		@DateApproved = ltrim(rtrim(T.c.value('(DateApproved/text())[1]', 'datetime'))),
		@SendingLocation = ltrim(rtrim(T.c.value('(SendingLocation/text())[1]', 'varchar(12)'))),
		@ReceivingLocation = ltrim(rtrim(T.c.value('(ReceivingLocation/text())[1]', 'varchar(12)'))),
		@AssetTransferReqNo = ltrim(rtrim(T.c.value('(AssetTransferReqNo/text())[1]', 'varchar(25)'))),
		@DateofTransaction = ltrim(rtrim(T.c.value('(DateofTransaction/text())[1]', 'datetime'))),
		@TimeOfTransaction = RIGHT('000000' + ISNULL(ltrim(rtrim(T.c.value('(TimeofTransaction/text())[1]', 'varchar(6)'))),''),6),
		@OwnershipCode = ltrim(rtrim(T.c.value('(Ownership/text())[1]', 'varchar(3)'))),
	    @Revision = ltrim(rtrim(T.c.value('(Revision/text())[1]', 'varchar(2)'))),
		@ParentAsset = LTRIM(RTRIM(T.c.value('(ParentAsset/text())[1]', 'varchar(10)'))),
		@ProgramId = LTRIM(RTRIM(T.c.value('(ProgramId/text())[1]', 'varchar(MAX)')))
	FROM @xmlData.nodes('/AssetInfoCollection/MessageDetail') AS T(c)

	EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeed_PartTransferDtlRecord', 'Get Message Detail from xml', @startDateTime;
	SET @startDateTime = GETDATE();

	SET @DateofTransaction = DATEADD(HOUR, CAST(LEFT(@TimeOfTransaction,2) AS INT), @DateofTransaction)
	SET @DateofTransaction = DATEADD(MINUTE, CAST(SUBSTRING(@TimeOfTransaction,3,2) AS INT), @DateofTransaction)
	SET @DateofTransaction = DATEADD(SECOND, CAST(RIGHT(@TimeOfTransaction,2) AS INT), @DateofTransaction)
	SET @Quantity = ISNULL(FLOOR(@Quantity),0)
	

	SET @partTransferDtlId = null
	SELECT @partTransferDtlId = PartTransferDtlId
	FROM PartTransferDtl (NOLOCK)
	WHERE JDETransactionId = @transactionId AND AssetNumber = @AssetNumber
	
	EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeed_PartTransferDtlRecord', 'Get PartTransferDtlId', @startDateTime;
	SET @startDateTime = GETDATE();

	if @partTransferDtlId is null
	begin
	
		SELECT @ItemNo = InventoryItemNum
		, @SerialNo = SerialNum 
		, @rnItemNum = RNItemNum
		from FixedAssets (NOLOCK)
		where FixedAssetId = @fixedAssetId
		
		EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeed_PartTransferDtlRecord', 'Get serialnum, itemnum from FixedAssets', @startDateTime;
		SET @startDateTime = GETDATE();

		SET @partTransferDtlId = NEWID()
		
		-- Parent/Child Break
		if(@ProgramId = 'P5512002')
		BEGIN
		
			SET @DocumentType = CASE WHEN ISNULL(@DocumentType,'') = '' THEN 'PC' ELSE @DocumentType END
		END

		INSERT INTO PartTransferDtl (
			PartTransferDtlId,
			JDETransactionId,
			FixedAssetId,
			AssetNumber,
			DocumentType,
			DocumentNumber,
			AddressNumber,
			InventoryItemNum,
			RNItemNum,
			SerialNum,
			Quantity,
			AssetStatus,
			DateShipConfirmed,
			UserCreatedDocument,
			UserApprovedonRecvSide,
			DateApproved,
			SendingLocation,
			ReceivingLocation,
			AssetTransferReqNo,
			DateofTransaction,
			OwnershipCode,
			Source,
			Dest,
			DateAdded,
			ParentNumber)
		VALUES (
			@partTransferDtlId,
			@transactionId,
			@fixedAssetId,
			@AssetNumber,
			@DocumentType,
			@DocumentNumber,
			@AddressNumber,
			@ItemNo,
			@rnItemNum,
			@SerialNo,
			@Quantity,
			@AssetStatus,
			@DateShipConfirmed,
			@UserCreatedDocument,
			@UserApprovedonRecvSide,
			@DateApproved,
			@SendingLocation,
			@ReceivingLocation,
			@AssetTransferReqNo,
			@DateofTransaction,
			@OwnershipCode,
			@CurrentEquipmentStatus,
			@AssetStatus,
			GETDATE(),
			-- Save Current Parent Before Override
			CASE WHEN (@AssetNumber = @ParentAsset) 
					THEN (SELECT TOP 1 ParentNumber FROM FixedAssets (NOLOCK) WHERE AssetNumber = @AssetNumber) 
					ELSE @ParentAsset END
			)

			EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeed_PartTransferDtlRecord', 'Insert PartTransferDtl', @startDateTime;
		

		--SELECT * FROM PartTransferDtl where PartTransferDtlId = @partTransferDtlId
	end





GO
/****** Object:  StoredProcedure [dbo].[usp_SOA_AssetFeedJob]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 4/20/2017
-- Description:	This procedure is used to read SOA Asset XML feed from remote server 
--				and process it in MyAdvisor 
-- =============================================
CREATE PROCEDURE [dbo].[usp_SOA_AssetFeedJob] 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @JobQueueId INT, @JobStartDate datetime
	DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT;  

	IF NOT EXISTS (SELECT * FROM JobQueue (NOLOCK) WHERE JobId = 48 AND JobQueueStatusId = 1)
	BEGIN

		SELECT @JobStartDate = GETDATE()

		INSERT INTO JobQueue (JobId, CreateDate, RequestXml, RunStart, RunEnd, JobQueueStatusId, CurrentRetry)
		VALUES (48, @JobStartDate, '<usp_SOA_FeedJob/>', @JobStartDate, NULL, 1, 0)

		SELECT @JobQueueId = SCOPE_IDENTITY()

		BEGIN TRY

			-- Insert statements for procedure here
			DECLARE @transactionId varchar(40), @transactionName varchar(40), @payload xml, @Id1 VARCHAR(200), @RunStart datetime,  @RunEnd datetime, @flag bit

			DECLARE db_cursor1 CURSOR FOR  
				SELECT TransactionId, TransactionName, PayLoad, ID1
				FROM USDCALADBBL01.aesSoa.dbo.vwSOAMessagesRemote
				WHERE Status IS NULL 
					AND TransactionName IN ('ASSTADD', 'ASSTDISP', 'ASSTREV', 'ASSTTFR', 'ASSTUPD', 'WO-CHANGE-OUT', 'WO-CREATE-OUT', 'WO-CLOSE', 'WOISSUE'
						, 'DT-INVOICE' ,'DT-RETURN' ,'DT-SEQ-ADD' ,'DT-SEQ-CHANGE' ,'DT-SEQ-DELETE' ,'DT-SHIP' ,'DT-UNRETURN')
					--AND TransactionId > (SELECT MAX(JDETransactionId) FROM Aesops.dbo.PartTransferDtl (NOLOCK))
				ORDER BY [TimeStamp] ASC
 
			OPEN db_cursor1   
			FETCH NEXT FROM db_cursor1 INTO @transactionId, @transactionName, @payload, @Id1

			WHILE @@FETCH_STATUS = 0   
			BEGIN   
	
				DECLARE @TranCounter INT;  
				SET @TranCounter = @@TRANCOUNT;  

				--Declare Transaction
				IF @TranCounter > 0  
					SAVE TRANSACTION ProcedureSave;  
				ELSE  
					BEGIN TRANSACTION;  
    
				BEGIN TRY  

					-- Do the actual work here
					SELECT @RunStart = GETDATE(), @flag = 0
		 

					IF(@transactionName = 'ASSTUPD' OR @transactionName = 'ASSTTFR' OR @transactionName = 'ASSTDISP' OR @transactionName = 'ASSTREV' OR @transactionName = 'ASSTADD')
						BEGIN 
							EXEC AesOps.[dbo].[usp_SOA_AssetFeedProcess] @payload, @flag output, @ErrorMessage output
						END

					ELSE IF (@transactionName = 'WO-CREATE-OUT' OR @transactionName = 'WO-CHANGE-OUT')
						BEGIN
							EXEC AesOps.[dbo].[usp_ProcessJDEWOOutboundFeedXml] @payload
						END
					ELSE IF (@transactionName = 'WO-CLOSE')
						BEGIN
							EXEC AesOps.[dbo].[usp_ProcessJDEWOSummaryFeedXml] @payload
						END
					ELSE IF (@transactionName = 'WOISSUE')
						BEGIN
							EXEC AesOps.[dbo].[usp_ProcessJDEWOSwapInFeedXml] @payload
						END
					ELSE
						BEGIN
							EXEC AesOps.[dbo].[spDeliveryTicketToDispatchSOA] @payload
						END
						 
					IF @TranCounter = 0  
						BEGIN
							COMMIT TRANSACTION;  
						END
				END TRY  
				BEGIN CATCH  

					IF @TranCounter = 0  
						ROLLBACK TRANSACTION;  
					ELSE  
            
						IF XACT_STATE() <> -1  
							ROLLBACK TRANSACTION ProcedureSave;  
            
					SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();  

					--RAISERROR (@ErrorMessage, @ErrorSeverity, , @ErrorState);  
				END CATCH  

				-- if message processing failed due to validation or error log it
				if(@flag != 1)
				BEGIN
					DECLARE @payloadstring VARCHAR(MAX) = CONVERT(varchar(MAX), @payload)
					exec [AesOps].dbo.[usp_AddException] @RunStart, @ErrorMessage, @payloadstring, 'system', 'SOAApp-Feed', @transactionId
				END
				-- log error 
				SET @RunEnd = GETDATE()
	
				--TODO : Update flag
				exec USDCALADBBL01.AESSOA.dbo.[usp_SOAMessage_UpdateStatus] @transactionId, @transactionName, @RunStart, @RunEnd, @flag

				FETCH NEXT FROM db_cursor1 INTO @transactionId, @transactionName, @payload, @Id1
			END

			CLOSE db_cursor1   
			DEALLOCATE db_cursor1

			UPDATE JobQueue 
			SET RunEnd = GETDATE(),
				JobQueueStatusId = 3
			WHERE JobQueueId = @JobQueueId

		END TRY  
			BEGIN CATCH  
				SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(); 

				INSERT INTO [dbo].[JobLog] ([JobId],[RunStart],[RunEnd],[RequestXml],[JobLogStatusId],[JobQueueId],[Exception],[RetryNumber])
				VALUES (48, @JobStartDate, Getdate(), null, 4, @JobQueueId, @ErrorMessage, 0)

			END CATCH
	END

END

GO
/****** Object:  StoredProcedure [dbo].[usp_SOA_AssetFeedProcess]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_SOA_AssetFeedProcess] 
    @xmlData xml,
	@flag bit output,
	@errormessage varchar(1000) output
AS
BEGIN
    SET NOCOUNT ON;
    
	SET @flag = 0;

    declare @FixedAssetId uniqueidentifier
        , @CurrentEquipmentStatus varchar(2)
        , @transactionId int
        , @transactionName varchar(25)
        , @AssetNumber varchar(10)
        , @Company varchar(5)
        , @CurrentBranchPlant varchar(12)
        , @BranchPlant varchar(12)
        , @toBranchPlant varchar(12)
        , @AssetDescription1 varchar(30)
        , @AssetDescription2 varchar(30)
        , @AssetDescription3 varchar(30)
        , @ManufacturersSerialNo varchar(25)
        , @RBU varchar(12) -- business unit
        , @RNItemNum varchar(30)
        , @SerialNum varchar(30)
        , @Qty decimal(15,2)
        , @CurrencyCode varchar(3)
        , @Cost decimal(15,2)
        , @AccumDepreciation decimal(15,2)
        , @NetBookValue decimal(15,2)
        , @EquipmentStatus varchar(2) -- asset status
        , @ProductLineCode varchar(3)
        , @UnitNumber varchar(12)
        , @InventoryItemNum varchar(8)
        , @LegacySerialNumber varchar(25)  -- legacy part number
        , @AFENumber varchar(12)
        , @State varchar(3)
        , @ContractAccount varchar(25)
        , @Ownership varchar(3)
        , @DateAcquired datetime
        , @LifeMonths numeric(4)
        , @StartDepreciation_Date datetime
        , @NewUsed char(1)
        , @Manufacturer varchar(3)
        , @PanelCodeVersion varchar(25)
    --  , @AssetAdditionDate
    --  , @WhoAddedAsset
        , @Revision varchar(2)
        , @CatCode16 varchar(3)
    --  , @CatCode20
        , @ParentAsset varchar(10)
		, @CurrentParentAsset varchar(10)
        , @DateDisposed datetime
        , @ModelYear varchar(3)
        , @DocumentType varchar(25)
        , @DocumentNumber int
		, @SendingLocation varchar(12)
        , @ReceivingLocation varchar(12)
        , @DateofTransaction datetime
		, @TimeOfTransaction varchar(6)
		, @ProgramId varchar(MAX)

	DECLARE @startDateTime DATETIME, @runId UNIQUEIDENTIFIER;
	SET @startDateTime = GETDATE();
	SET @runId = NEWID();
    
    ;WITH XMLNAMESPACES ('http://www.wft.com/AssetInformation/Outbound/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/AssetInformation/Outbound/v1.0')        
    SELECT
        @transactionName= ltrim(rtrim(T.c.value('(TransactionName/text())[1]', 'varchar(25)'))),
        @transactionId= ltrim(rtrim(T.c.value('(TransactionId/text())[1]', 'int')))        
    FROM @xmlData.nodes('/AssetInfoCollection/MessageHeader') AS T(c)

	EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeedProcess', 'Get Message header from xml', @startDateTime;
	SET @startDateTime = GETDATE();

    ;WITH XMLNAMESPACES ('http://www.wft.com/AssetInformation/Outbound/v1.0' AS inp1,
        DEFAULT 'http://www.wft.com/AssetInformation/Outbound/v1.0')        
    SELECT
        @AssetNumber = ltrim(rtrim(T.c.value('(AssetNumber/text())[1]', 'varchar(10)')))
        , @SerialNum = ltrim(rtrim(T.c.value('(SerialNo/text())[1]', 'varchar(30)')))
        , @InventoryItemNum = ltrim(rtrim(T.c.value('(InventoryPartNumber/text())[1]', 'varchar(30)')))
    FROM @xmlData.nodes('/AssetInfoCollection/MessageDetail') AS T(c)

	EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeedProcess', 'Get Message detail from xml', @startDateTime;
	SET @startDateTime = GETDATE();
	
-- IF feed already processed don't process again
	
	IF NOT EXISTS(SELECT * FROM PartTransferDtl (NOLOCK) WHERE AssetNumber = @AssetNumber AND JDETransactionId = @transactionId)
	BEGIN

		set @FixedAssetId = null

		select @FixedAssetId = FixedAssetId
			, @CurrentEquipmentStatus = EquipmentStatus 
			, @CurrentBranchPlant = BranchPlant
			, @CurrentParentAsset = ParentNumber
		from FixedAssets (NOLOCK) 
		where AssetNumber = @AssetNumber 
    
	EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeedProcess', 'Get data from FixedAssets', @startDateTime;
	SET @startDateTime = GETDATE();

		if @FixedAssetId is null
			begin
				declare @faCount int
		
				SELECT @faCount = count(1) from FixedAssets (NOLOCK) where InventoryItemNum = @InventoryItemNum and SerialNum = @SerialNum

				if @faCount = 1
					begin
						select @FixedAssetId = FixedAssetId
							, @CurrentEquipmentStatus = EquipmentStatus 
							, @CurrentBranchPlant = BranchPlant
						from FixedAssets (NOLOCK) 
						where InventoryItemNum = @InventoryItemNum 
							and SerialNum = @SerialNum 
							--and Source = 'JDEETL'

							EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeedProcess', 'Get data from FixedAssets', @startDateTime;
							SET @startDateTime = GETDATE();
					end
				else if @faCount > 1
					begin
						insert into AesImport.dbo.AssetWarnings (FixedAssetId, WarningMsg, OldInventoryItemNum, OldSerialNum, DateAdded, IsProcessed)
						select FixedAssetId, 'Duplicate IN/SN (SOA)', InventoryItemNum, SerialNum, getdate(), 0
						from FixedAssets (NOLOCK)
						where InventoryItemNum = @InventoryItemNum and SerialNum = @SerialNum 

						EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeedProcess', 'Insert AssetWarnings', @startDateTime;
						SET @startDateTime = GETDATE();

						SET @flag = 2 
						SET @errormessage = 'Duplicate IN/SN (SOA)';
						return		
					end
			end

		;WITH XMLNAMESPACES ('http://www.wft.com/AssetInformation/Outbound/v1.0' AS inp1,
			DEFAULT 'http://www.wft.com/AssetInformation/Outbound/v1.0')
		SELECT
			@Company = ltrim(rtrim(T.c.value('(Company/text())[1]', 'varchar(5)')))
			, @BranchPlant = ltrim(rtrim(T.c.value('(BranchPlant/text())[1]', 'varchar(12)')))
			, @DocumentType = ltrim(rtrim(T.c.value('(DocumentType/text())[1]', 'varchar(25)')))
			, @DocumentNumber = ltrim(rtrim(T.c.value('(DocumentNumber/text())[1]', 'int')))
			, @AssetDescription1 = ltrim(rtrim(T.c.value('(AssetDescription1/text())[1]', 'varchar(30)')))
			, @AssetDescription2 = ltrim(rtrim(T.c.value('(AssetDescription2/text())[1]', 'varchar(30)')))
			, @AssetDescription3 = ltrim(rtrim(T.c.value('(AssetDescription3/text())[1]', 'varchar(30)')))
			, @ManufacturersSerialNo = ltrim(rtrim(T.c.value('(ManufacturersSerialNo/text())[1]', 'varchar(25)')))
			, @RBU = ltrim(rtrim(T.c.value('(RBU/text())[1]', 'varchar(12)'))) -- business unit
			, @RNItemNum = ltrim(rtrim(T.c.value('(ItemNo/text())[1]', 'varchar(30)')))
			, @SerialNum = ltrim(rtrim(T.c.value('(SerialNo/text())[1]', 'varchar(30)')))
			, @Qty = T.c.value('(Quantity/text())[1]', 'decimal(15,2)')
			, @CurrencyCode = ltrim(rtrim(T.c.value('(CurrencyCode/text())[1]', 'varchar(3)')))
			, @Cost = T.c.value('(Cost/text())[1]', 'decimal(15,2)')
			, @AccumDepreciation = T.c.value('(AccumulatedDepreciation/text())[1]', 'decimal(15,2)')
			, @NetBookValue = T.c.value('(NetBookValue/text())[1]', 'decimal(15,2)')
			, @EquipmentStatus = ltrim(rtrim(T.c.value('(AssetStatus/text())[1]', 'varchar(2)'))) -- asset status
			, @ProductLineCode = ltrim(rtrim(T.c.value('(ProductLineCode/text())[1]', 'varchar(3)')))
			, @UnitNumber = ltrim(rtrim(T.c.value('(UnitNumber/text())[1]', 'varchar(12)')))
			, @InventoryItemNum = ltrim(rtrim(T.c.value('(InventoryPartNumber/text())[1]', 'varchar(30)')))
			, @LegacySerialNumber = ltrim(rtrim(T.c.value('(LegacyPartNumber/text())[1]', 'varchar(25)')))  -- legacy part number
			, @AFENumber = ltrim(rtrim(T.c.value('(AFE/text())[1]', 'varchar(12)')))
			, @State = ltrim(rtrim(T.c.value('(State/text())[1]', 'varchar(3)')))
			, @ContractAccount = ltrim(rtrim(T.c.value('(ContractAccount/text())[1]', 'varchar(25)')))
			, @Ownership = ltrim(rtrim(T.c.value('(Ownership/text())[1]', 'varchar(3)')))
			, @DateAcquired = T.c.value('(DateAcquired/text())[1]', 'datetime')
			, @LifeMonths = T.c.value('(LifeMonthsonAARegister/text())[1]', 'numeric(4)')
			, @StartDepreciation_Date = T.c.value('(StartDeprDate/text())[1]', 'datetime')
			, @NewUsed = ltrim(rtrim(T.c.value('(NeworUsed/text())[1]', 'char(1)')))
			, @Manufacturer = ltrim(rtrim(T.c.value('(Manufacturer/text())[1]', 'varchar(10)')))
			, @PanelCodeVersion = ltrim(rtrim(T.c.value('(PanelCodeVersion/text())[1]', 'varchar(25)')))
			--, @AssetAdditionDate
			--, @WhoAddedAsset
			, @CatCode16 = ltrim(rtrim(T.c.value('(Cat_Code_16/text())[1]', 'varchar(3)')))
			, @Revision = ltrim(rtrim(T.c.value('(Revision/text())[1]', 'varchar(2)')))
			--, @CatCode20
			, @ParentAsset = ltrim(rtrim(T.c.value('(ParentAsset/text())[1]', 'varchar(10)')))
			, @DateDisposed = T.c.value('(DateDisposed/text())[1]', 'datetime')
			, @ModelYear = ltrim(rtrim(T.c.value('(ModelYear/text())[1]', 'varchar(3)')))
			, @SendingLocation = ltrim(rtrim(T.c.value('(SendingLocation/text())[1]', 'varchar(12)')))
			, @ReceivingLocation = ltrim(rtrim(T.c.value('(ReceivingLocation/text())[1]', 'varchar(12)')))
			, @DateofTransaction =  ltrim(rtrim(T.c.value('(DateofTransaction/text())[1]', 'datetime'))) 
			, @TimeOfTransaction = RIGHT('000000' + ISNULL(ltrim(rtrim(T.c.value('(TimeofTransaction/text())[1]', 'varchar(6)'))),''),6)
			, @ProgramId = LTRIM(RTRIM(T.c.value('(ProgramId/text())[1]', 'varchar(MAX)')))
		FROM @xmlData.nodes('/AssetInfoCollection/MessageDetail') AS T(c)
	
	EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeedProcess', 'Get MessageDetail from xml', @startDateTime;
	SET @startDateTime = GETDATE();

		SET @DateofTransaction = DATEADD(HOUR, CAST(LEFT(@TimeOfTransaction,2) AS INT), @DateofTransaction)
		SET @DateofTransaction = DATEADD(MINUTE, CAST(SUBSTRING(@TimeOfTransaction,3,2) AS INT), @DateofTransaction)
		SET @DateofTransaction = DATEADD(SECOND, CAST(RIGHT(@TimeOfTransaction,2) AS INT), @DateofTransaction)

	
		
		if @FixedAssetId is null
			begin
				set @FixedAssetId = NEWID()
            
				INSERT INTO FixedAssets (
					FixedAssetId
					,AssetNumber
					,Company
					,BranchPlant
					--,FixedAssetBranchPlant
					,AssetDescription
					,ManufacturersSerialNumber
					,BusinessUnit
					,RNItemNum
					,SerialNum
					,CurrentItemQty
					,CurrencyCode
					,Cost
					,AccumDepreciation
					,NetBookValue
					,EquipmentStatus
					,ProductLineCode
					,UnitNumber
					,InventoryItemNum
					,LegacySerialNumber
					,AFENumber
					,[State]
					,ContractAccount
					,[Ownership]
					,DateAcquired
					,LifeMonths
					,StartDepreciation_Date
					,NewUsed
					,Manufacturer
					,ModelYear
					,ThirdItemNumber
					--,DateDisposed
					--,FiscalYear
					--,LedgerType
					,Revision
					,CatCode16
					,ParentNumber
					,LastStatusChangeDate
					,Source
				)
				VALUES
				(
					@FixedAssetId
					, @AssetNumber
					, @Company
					, @BranchPlant
					, @AssetDescription1
					--, @AssetDescription2
					--, @AssetDescription3
					, @ManufacturersSerialNo
					, @RBU
					, @RNItemNum
					, @SerialNum
					, @Qty
					, @CurrencyCode
					, @Cost
					, @AccumDepreciation
					, @NetBookValue
					, @EquipmentStatus
					, @ProductLineCode
					, @UnitNumber
					, @InventoryItemNum
					, @LegacySerialNumber
					, @AFENumber
					, @State
					, @ContractAccount
					, @Ownership
					, @DateAcquired
					, @LifeMonths
					, @StartDepreciation_Date
					, @NewUsed
					, @Manufacturer
					, @ModelYear
					, @PanelCodeVersion
					--, @DateDisposed
				-- , @AssetAdditionDate
				-- , @WhoAddedAsset
					, @Revision
					, @CatCode16
				-- , @CatCode20
					, @ParentAsset
					, @DateofTransaction
					, 'JDESOA'
				)

				EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeedProcess', 'Insert Fixed Assets', @startDateTime;
				SET @startDateTime = GETDATE();
			end
		else
			begin

				select @toBranchPlant = CASE WHEN (@DocumentType = 'S5' or (@DocumentType = 'S9' or @DocumentType = 'WC')) THEN @CurrentBranchPlant
											WHEN (@DocumentType = 'IN' or @DocumentType = 'O9' or @DocumentType = 'OT') THEN @ReceivingLocation
											WHEN @DocumentType = 'SR' THEN @SendingLocation
										ELSE @BranchPlant END 


				exec dbo.usp_SOA_AssetFeed_PartTransferDtlRecord @xmlData, @FixedAssetId, @CurrentEquipmentStatus

				-- Asset Transfer
				if(@CurrentBranchPlant != @toBranchPlant)
					exec usp_TransferChildComponents @FixedAssetId, @toBranchPlant

				EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeedProcess', 'execute sp usp_TransferChildComponents', @startDateTime;
				SET @startDateTime = GETDATE();

				UPDATE FixedAssets
				SET
					Company = ISNULL(@Company, Company)
					, BranchPlant = ISNULL(@toBranchPlant, BranchPlant)
					, AssetDescription = ISNULL(@AssetDescription1, AssetDescription)
					, ManufacturersSerialNumber = ISNULL(@ManufacturersSerialNo, ManufacturersSerialNumber)
					, BusinessUnit = ISNULL(@RBU, BusinessUnit)
					, RNItemNum = @RNItemNum
					, SerialNum = @SerialNum
					, CurrentItemQty = @Qty
					, CurrencyCode = ISNULL(@CurrencyCode, CurrencyCode)
					, Cost = ISNULL(@Cost, Cost)
					, AccumDepreciation = ISNULL(@AccumDepreciation, AccumDepreciation)
					, NetBookValue = ISNULL(@NetBookValue, NetBookValue)
					, EquipmentStatus = @EquipmentStatus
					, ProductLineCode = ISNULL(@ProductLineCode, ProductLineCode)
					, UnitNumber = @UnitNumber
					, InventoryItemNum = CASE WHEN ISNULL(@InventoryItemNum,'0') = '0' THEN [InventoryItemNum]
											  WHEN ISNULL([InventoryItemNum],'0') = '0' THEN @InventoryItemNum
											  --commented temporarily to avoid TRS issue where RN item # is getting passed instead of part #
											  --ELSE @InventoryItemNum END
											  ELSE [InventoryItemNum] END

					, LegacySerialNumber = ISNULL(@LegacySerialNumber, LegacySerialNumber)
					, AFENumber = ISNULL(@AFENumber, AFENumber) 
					, [State] = ISNULL(@State, State)
					, ContractAccount = ISNULL(@ContractAccount, ContractAccount)
					, [Ownership] = ISNULL(@Ownership, [Ownership])
					, DateAcquired = ISNULL(@DateAcquired, DateAcquired)
					, LifeMonths = ISNULL(@LifeMonths, LifeMonths)
					, StartDepreciation_Date = ISNULL(@StartDepreciation_Date, StartDepreciation_Date)
					, NewUsed = ISNULL(@NewUsed, NewUsed)
					, Manufacturer = ISNULL(@Manufacturer, Manufacturer)
					, ThirdItemNumber = ISNULL(@PanelCodeVersion, ThirdItemNumber)
					, Revision = ISNULL(@Revision, Revision)
					, CatCode16 = ISNULL(@CatCode16, CatCode16)
					, ParentNumber = @ParentAsset
					, ParentFixedAssetId = CASE WHEN @ParentAsset = @AssetNumber THEN NULL 
									ELSE (SELECT Top 1 FixedAssetId FROM FixedAssets (NOLOCK) WHERE AssetNumber = @ParentAsset ) END
					, ModelYear = ISNULL(@ModelYear, ModelYear)
					, DateDisposed = ISNULL(@DateDisposed, DateDisposed)
					, LastStatusChangeDate = @DateofTransaction
				WHERE FixedAssetId = @FixedAssetId
				
				EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeedProcess', 'Update Fixed Assets', @startDateTime;
				SET @startDateTime = GETDATE();

				-- Parent/Child break
				if(@CurrentParentAsset != @ParentAsset)
					exec usp_UpdateTopLevelFixedAssetId @FixedAssetId

				EXEC usp_MyAdvisor_Logs @runId, 'usp_SOA_AssetFeedProcess', 'execute sp usp_UpdateTopLevelFixedAssetId', @startDateTime;

			end

			SET @flag = 1;
	END
	ELSE
		BEGIN
			SET @flag = 2;
			SET @errormessage = 'SOA Message is already proccessed';
		END
END




GO
/****** Object:  StoredProcedure [dbo].[usp_SOA_FeedJob]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh Mane
-- Create date: 4/20/2017
-- Description:	This procedure is used to read SOA Asset XML feed from remote server 
--				and process it in MyAdvisor 
--Modified By : Ganesh Abdagire
--Date : 5/20/2021
-- Use AesOps
-- =============================================
CREATE PROCEDURE [dbo].[usp_SOA_FeedJob] 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @startDateTime DATETIME,@RunId  uniqueidentifier=NEWID();
   

	DECLARE @JobQueueId INT, @JobStartDate datetime
	DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT;  
	CREATE TABLE #TempvwSOAMessagesRemote(
	[Id] INT Identity(1,1),
	[TransactionId] [varchar](40) NULL,
	[TransactionName] [varchar](40) NULL,
	[PayLoad] [nvarchar](max) NULL,
	[ID1] [varchar](200) NULL	
    ) ON [PRIMARY] 

	--IF NOT EXISTS (SELECT * FROM JobQueue (NOLOCK) WHERE JobId = 48 AND JobQueueStatusId = 1)
	BEGIN

		SELECT @JobStartDate = GETDATE()

		INSERT INTO JobQueue (JobId, CreateDate, RequestXml, RunStart, RunEnd, JobQueueStatusId, CurrentRetry)
		VALUES (48, @JobStartDate, '<usp_SOA_FeedJob/>', @JobStartDate, NULL, 1, 0)

		SELECT @JobQueueId = SCOPE_IDENTITY()

		BEGIN TRY

			-- Insert statements for procedure here
			DECLARE @transactionId varchar(40), @transactionName varchar(40), @payload xml, @Id1 VARCHAR(200), @RunStart datetime,  @RunEnd datetime, @flag bit

			--DECLARE db_cursor1 CURSOR FOR  
			INSERT INTO  #TempvwSOAMessagesRemote
			SELECT top 10000 TransactionId, TransactionName, PayLoad, ID1 FROM (SELECT TransactionId, TransactionName, PayLoad, ID1, [TimeStamp]
			FROM USDCALADBBL01.aesSoa.dbo.vwSOAMessagesRemote
			WHERE Status IS NULL 
				AND TransactionName IN ('ASSTADD', 'ASSTDISP', 'ASSTREV', 'ASSTTFR', 'ASSTUPD', 'WO-CHANGE-OUT', 'WO-CREATE-OUT', 'WO-CLOSE', 'WOISSUE'
					, 'DT-INVOICE' ,'DT-RETURN' ,'DT-SEQ-ADD' ,'DT-SEQ-CHANGE' ,'DT-SEQ-DELETE' ,'DT-SHIP' ,'DT-UNRETURN', 'DT-WRETURN')
				--AND DateAdded > '5/31/2018'
			) A ORDER BY [TimeStamp] ASC, TransactionId ASC
 
			--OPEN db_cursor1   
			--FETCH NEXT FROM db_cursor1 INTO @transactionId, @transactionName, @payload, @Id1
			DECLARE @TotalTransactions INT=0,@CurrentTransaction INT=1
			SELECT @TotalTransactions=Max(Id),@CurrentTransaction=MIN(Id) FROM #TempvwSOAMessagesRemote
			--WHILE @@FETCH_STATUS = 0   
			WHILE @TotalTransactions>=@CurrentTransaction
			BEGIN   
			   
	            SELECT @transactionId=TransactionId,@transactionName=TransactionName,@payload=PayLoad,@Id1=ID1 FROM  #TempvwSOAMessagesRemote where Id=@CurrentTransaction
				DECLARE @TranCounter INT;  
				SET @TranCounter = @@TRANCOUNT;  

				--Declare Transaction
				--IF @TranCounter > 0  
				--	SAVE TRANSACTION ProcedureSave;  
				--ELSE  
				--	BEGIN TRANSACTION;  
    
				BEGIN TRY  

					-- Do the actual work here
					SELECT @RunStart = GETDATE(), @flag = 0
		 
					print 'Started ' + convert(varchar(100), @transactionId)

					IF(@transactionName = 'ASSTUPD' OR @transactionName = 'ASSTTFR' OR @transactionName = 'ASSTDISP' OR @transactionName = 'ASSTREV' OR @transactionName = 'ASSTADD')
						BEGIN 
				     		SET @startDateTime = GETDATE();

							EXEC AesOps.[dbo].[usp_SOA_AssetFeedProcess] @payload, @flag output, @ErrorMessage output

							exec usp_MyAdvisor_Logs @RunId,'usp_SOA_FeedJob', '01.usp_SOA_AssetFeedProcess', @startDateTime
						END

					ELSE IF (@transactionName = 'WO-CREATE-OUT' OR @transactionName = 'WO-CHANGE-OUT')
						BEGIN
							SET @startDateTime = GETDATE();
							
							EXEC AesOps.[dbo].[usp_ProcessJDEWOOutboundFeedXml] @payload
							SET @flag = 1
							
							exec usp_MyAdvisor_Logs @RunId,'usp_SOA_FeedJob', '02.usp_ProcessJDEWOOutboundFeedXml', @startDateTime
						END
					ELSE IF (@transactionName = 'WO-CLOSE')
						BEGIN
							SET @startDateTime = GETDATE();

							EXEC AesOps.[dbo].[usp_ProcessJDEWOSummaryFeedXml] @payload
							SET @flag = 1

							exec usp_MyAdvisor_Logs @RunId,'usp_SOA_FeedJob', '03.usp_ProcessJDEWOSummaryFeedXml', @startDateTime

						END
					ELSE IF (@transactionName = 'WOISSUE')
						BEGIN
							SET @startDateTime = GETDATE();

							EXEC AesOps.[dbo].[usp_ProcessJDEWOSwapInFeedXml] @payload
							SET @flag = 1

							exec usp_MyAdvisor_Logs @RunId,'usp_SOA_FeedJob', '05.usp_ProcessJDEWOSwapInFeedXml', @startDateTime
						END
					ELSE
						BEGIN
							SET @startDateTime = GETDATE();

							EXEC AesOps.[dbo].[spDeliveryTicketToDispatchSOA] @payload
							SET @flag = 1

							exec usp_MyAdvisor_Logs @RunId,'usp_SOA_FeedJob', '06.spDeliveryTicketToDispatchSOA', @startDateTime

						END
						 
					--IF @TranCounter = 0  
					--	BEGIN
					--		COMMIT TRANSACTION;  
					--	END

					print 'End ' + convert(varchar(100), @transactionId)

				END TRY  
				BEGIN CATCH  

					SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();  

					
					--IF @TranCounter = 0  
					--	ROLLBACK TRANSACTION;  
					--ELSE  
            
					--	IF XACT_STATE() <> -1  
					--		ROLLBACK TRANSACTION ProcedureSave;
				END CATCH  

				-- if message processing failed due to validation or error log it
				if(@flag != 1)
				BEGIN
					DECLARE @payloadstring NVARCHAR(MAX) = CONVERT(Nvarchar(MAX), @payload)
					exec [AesOps].dbo.[usp_AddException] @RunStart, @ErrorMessage, @payloadstring, 'system', 'SOAApp-Feed', @transactionId
				END

				-- log error 
				SET @RunEnd = GETDATE()
	
				--TODO : Update flag
				exec USDCALADBBL01.aesSoa.dbo.[usp_SOAMessage_UpdateStatus] @transactionId, @transactionName, @RunStart, @RunEnd, @flag
				SET @CurrentTransaction=@CurrentTransaction+1
				--FETCH NEXT FROM db_cursor1 INTO @transactionId, @transactionName, @payload, @Id1
			END

			--CLOSE db_cursor1   
			--DEALLOCATE db_cursor1			
			drop table #TempvwSOAMessagesRemote

			UPDATE JobQueue 
			SET RunEnd = GETDATE(),
				JobQueueStatusId = 3
			WHERE JobQueueId = @JobQueueId

		END TRY  
			BEGIN CATCH  
				
				UPDATE JobQueue  SET RunEnd = GETDATE(), JobQueueStatusId = 4 WHERE JobQueueId = @JobQueueId
			
				SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(); 

				print @ErrorMessage

				INSERT INTO [dbo].[JobLog] ([JobId],[RunStart],[RunEnd],[RequestXml],[JobLogStatusId],[JobQueueId],[Exception],[RetryNumber])
				VALUES (48, @JobStartDate, Getdate(), null, 4, @JobQueueId, @ErrorMessage, 0)
								
				--CLOSE db_cursor1   
				--DEALLOCATE db_cursor1

			END CATCH
	END

END

GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_Batteries]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/30/2020  
-- Description: IMPORT SPECNAV Batteries DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_Batteries]
(
	@runId			AS VARCHAR(38),
	@batteries		AS [UT_Battery] READONLY
)
AS
 
SET NOCOUNT ON

----------Delete Batteries records for run id --------------------
DELETE FROM Batteries WHERE RunID = @runId;

----------import Batteries --------------
INSERT INTO Batteries (BatteryID, RunID, ToolStringSN, [Type], SerialNumber, StartAmpHrs, EndAmpHrs, UsedAmpHrs  
 , PreVoltage, PostVoltage, ToolStringID, FixedAssetID)             
SELECT	NEWID(), @runId, SerialNumber, PartName, PartSerialNumber, PreAmp, PostAmp, ConsumedAmp, PreVoltage, PostVoltage, ToolStringId, FixedAssetId       			      
FROM	@batteries;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_BHAComponents]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/24/2020  
-- Description: IMPORT SPECNAV BHA Components DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_BHAComponents]
(
	@bhaId				AS VARCHAR(38),
	@bhaComponents		AS [UT_BHAComponent] READONLY
)
AS
 
SET NOCOUNT ON

----------import BHAComponents --------------
INSERT INTO BHAComponents (	BHACompID, BHAID, SerialNumber, Component, OrderPosition, IsNonMagDrillCollar,  
							InsideDiameter, InsideDiameterUOM, OutsideDiameter, OutsideDiameterUOM, [Length], LengthUOM, StabilizerBladeOD, StabilizerBladeODUOM)
SELECT	NEWID(), @bhaId, Serial_Number, Component, ROW_NUMBER() OVER (ORDER BY ID) AS OrderPosition, Is_Non_Magnetic_Drill_Collar,
		Inner_D, Inner_DUOM, OD, ODUOM, [Length], LengthUOM, Stabilizer_Blade_OD, Stabilizer_Blade_ODUOM						       			      
FROM	@bhaComponents;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_BitDataNozzles]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/26/2020  
-- Description: IMPORT SPECNAV BitDataNozzles DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_BitDataNozzles]
(
	@runId				AS VARCHAR(38),
	@bitDataNozzles		AS [UT_BitDataNozzle] READONLY
)
AS
 
SET NOCOUNT ON

----------Delete BitDataNozzles records for run id --------------------
DELETE FROM BitDataNozzles WHERE RunID = @runId;

----------import BitDataNozzles --------------
INSERT INTO BitDataNozzles (BitDataNozzleID, RunID, Quantity, [Size], Area)      
SELECT	NEWID(), @runId, Quantity,Size,	Area		       			      
FROM	@bitDataNozzles;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_Borehole]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/15/2020  
-- Description: IMPORT SPECNAV BOREHOLE DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_Borehole]
(
	@wellId AS VARCHAR(38),
	@boreHoles AS [UT_Borehole] READONLY
)
AS
 
SET NOCOUNT ON

----------import BoreholeRecs --------------
INSERT INTO BoreholeRecs (BoreholeRecID, WellID, Section, HoleSize, HoleSizeUOM, DepthFrom, DepthFromUOM, DepthTo, DepthToUOM,
								 IncStart, IncStartUOM, IncEnd, IncEndUOM)
SELECT	NEWID(),@wellId, Section, HoleSize, HoleSizeUOM, FromDepth, DepthUOM, ToDepth, DepthUOM,
		IncStart, IncUOM, IncEnd, IncUOM 
FROM	@boreHoles WHERE ISNULL(FromDepth, '') != '' AND ISNULL(ToDepth, '') != ''

----------import BoreholeDevRecs --------------
INSERT INTO BoreholeDevRecs (BoreholeDevRecID, WellID, RunBHAName, HoleSize, HoleSizeUOM,  
							HoleMDStart, HoleMDStartUOM, HoleMDEnd, HoleMDEndUOM, MinInc, MinIncUOM, MaxInc, MaxIncUOM) 
SELECT	NEWID(),@wellId, Section, HoleSize, HoleSizeUOM, FromDepth, DepthUOM, ToDepth, DepthUOM,
		IncStart, IncUOM, IncEnd, IncUOM 
FROM	@boreHoles WHERE ISNULL(IncStart, '') != '' AND ISNULL(IncEnd, '') != ''; 

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_BoreholeCasing]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/15/2020  
-- Description: IMPORT SPECNAV BOREHOLE CASING DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_BoreholeCasing]
(
	@wellId				AS VARCHAR(38),
	@boreholeCasing		AS [UT_BoreholeCasing] READONLY
)
AS
 
SET NOCOUNT ON


----------import BoreholeRecs --------------
INSERT INTO BoreholeCasing (BoreholeCasingID, WellID, OD, ODUOM, Weight, WeightUOM, DepthFrom, DepthFromUOM, DepthTo, DepthToUOM,  
        ID, IDUOM, HoleSize) 
SELECT	NEWID(),@wellId, CasingOD, CasingODUOM, CasingWeight, CasingWeightUOM, CasingFrom, [CasingDepthUOM], [CasingTo],
		[CasingDepthUOM], [CasingID], CasingODUOM, [HoleSize] 
FROM	@boreholeCasing;

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_DailyRigData]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 04/06/2020  
-- Description: IMPORT SPECNAV DAILYRIGDATA 
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_DailyRigData]
(
	@dailyId		AS VARCHAR(38),
	@dailyRigData	AS [UT_DailyRigData] READONLY
)
AS
 
SET NOCOUNT ON

----------import DailyRigData --------------
INSERT INTO DailyRigData (DailyRigDataID, DailyID, Date, StartTime, EndTime, TimeInterval, BRT, ActivityMode, Activity, Comments)               
SELECT	NEWID(), @dailyId, Date, Start_Time, End_Time, Time_Interval, BRT, Activity_Mode, Activity, Comments     			      
FROM	@dailyRigData;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_DailyToolComponents]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 04/06/2020  
-- Description: IMPORT SPECNAV DailyToolComponents Data 
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_DailyToolComponents]
(
	@dailyId			AS VARCHAR(38),
	@runId				AS VARCHAR(38)
)
AS
 
SET NOCOUNT ON

----------Delete DailyToolComponents records for daily id --------------------
DELETE FROM DailyToolComponents WHERE DailyID = @dailyId;

----------import DailyToolComponents --------------
INSERT INTO DailyToolComponents (DailyToolComponentID, DailyID, ToolStringID, FixedAssetID, SerialNum, RNItemNum, InventoryItemNum, PartTypeID, CustomProperty, IsUsed)              
SELECT		NewID(), @dailyId, ToolStringID, FixedAssetID, SerialNum, RNItemNum, InventoryItemNum, PartTypeID, CustomProperty, 1		      
FROM	ToolStringComponentInfo
WHERE	RunID = @runId;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_DataDictionary]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/26/2020  
-- Description: IMPORT SPECNAV DATADICTIONARY DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_DataDictionary]
(
	@runId				AS VARCHAR(38),
	@dataDictionary	AS [UT_DataDictionary] READONLY
)
AS
 
SET NOCOUNT ON

----------import DownloadFrequencies --------------
INSERT INTO DataDictionary (DataDictionaryId, RunID, ShortName, Bits, Parity, NumErrorCodes  
						, HexCodes, Mnemonic, DecimalPlaces, Units, Scale, Offset, DHScale, DHOffset, CommTies, RetryDelay, RTParameter, Tool, DownloadDataID, ItemIndex)   
SELECT	NEWID(), @runId, Short_Name, Bits, Parity, Num_Error_Codes, Hex_Code, Mnemonic, Decimal_Places, Units, Scale, Offset, DH_Scale, DH_Offset, Comm_Tries,
		Retry_Delay, RT_Parameter, Tool, Download_Data_ID, Item_Index					       			      
FROM	@dataDictionary;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_DownloadFrequencies]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/25/2020  
-- Description: IMPORT SPECNAV BHA Components DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_DownloadFrequencies]
(
	@runId					AS VARCHAR(38),
	@downloadFrequencies	AS [UT_DownloadFrequency] READONLY
)
AS
 
SET NOCOUNT ON

----------import DownloadFrequencies --------------
INSERT INTO DownloadFrequencies (DownloadFrequencyID, RunID, [On], [Off], TD, DownloadDataID) 
SELECT	NEWID(), @runId, [On], [Off], [Td], [Download_Data_ID]						       			      
FROM	@downloadFrequencies;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_DownloadModes]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/26/2020  
-- Description: IMPORT SPECNAV DOWNLOADMODES DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_DownloadModes]
(
	@runId				AS VARCHAR(38),
	@downloadModes		AS [UT_DownloadMode] READONLY
)
AS
 
SET NOCOUNT ON

----------import DownloadModes --------------
INSERT INTO DownloadModes (DownloadModeId, RunID, ModeName, NumLists, Cycles, DownloadDataID)    
SELECT	NEWID(), @runId, [Name], NumLists, Cycles, DownloadDataID				       			      
FROM	@downloadModes;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_EngineersOnDuty]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 04/06/2020  
-- Description: IMPORT SPECNAV ENGINEERSONDUTY Data 
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_EngineersOnDuty]
(
	@dailyId			AS VARCHAR(38),
	@runId				AS VARCHAR(38),
	@engineersOnDuty	AS [UT_EngineersOnDuty] READONLY
)
AS
 
SET NOCOUNT ON

----------import EngineersOnDuty --------------
INSERT INTO EngineersOnDuty (EmpID, RunID, DailyID, FirstName, LastName, IsLead, [Description], ProductLine, CoreID)               
SELECT	NEWID(),@runId, @dailyId, First_Name, Last_Name, Lead, Title, Product_Line, Employee_Id 			      
FROM	@engineersOnDuty;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_PulseCountData]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/30/2020  
-- Description: IMPORT SPECNAV PulseCountData DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_PulseCountData]
(
	@runId				AS VARCHAR(38),
	@pulseCountData	AS [UT_PulseCountData] READONLY
)
AS
 
SET NOCOUNT ON

----------Delete PulseCountData records for run id --------------------
DELETE FROM PulseCountData WHERE RunID = @runId;

----------import PulseCountData --------------
INSERT INTO PulseCountData (PulseCountDataID, RunID, Sensor, SerialNumber, PulseCountEnd, OrificeSize, PoppetSize,   
 EOR, EORUOM, TotalNumberOfPulses, ToolStringID, FixedAssetID)           
SELECT	NEWID(), @runId, PartName, PartSerialNumber, PulseCount, OrificeSize, PoppetSize, EOR, EORUOM, TotalNumberOfPulses, ToolStringId, FixedAssetId       			      
FROM	@pulseCountData;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_Pumps]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/30/2020  
-- Description: IMPORT SPECNAV PUMPS DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_Pumps]
(
	@runId		AS VARCHAR(38),
	@pumps		AS [UT_Pump] READONLY
)
AS
 
SET NOCOUNT ON

----------Delete Pumps records for run id --------------------
DELETE FROM Pumps WHERE RunID = @runId;

----------import Pumps --------------
INSERT INTO Pumps (PumpID, RunID, Model, [Type], StrokeLength, StrokeLengthUOM, LinerSize, LinerSizeUOM, DampenerCharge, DampenerChargeUOM  
 , DampenerType, StrokeVolume,  Efficiency, Manufacturer, DampenerManufacturer, PressureRating)              
SELECT	NEWID(), @runId, PumpModel, PumpType, PumpStrokeLength, PumpStrokeLengthUOM, LinerSize, LinerSizeUOM, DampenerCharge, DampenerChargeUOM, DampenerType,
		StrokeVolume, PumpEfficiency, PumpManufacturer, PressureDampenerManufacturer, PumpPressureRating       			      
FROM	@pumps;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_RSSConnectTimes]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/30/2020  
-- Description: IMPORT SPECNAV RSSConnectTimes DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_RSSConnectTimes]
(
	@runId				AS VARCHAR(38),
	@rssConnectTimes	AS [UT_RSSConnectTime] READONLY
)
AS
 
SET NOCOUNT ON

----------Delete RSSConnectTimes records for run id --------------------
DELETE FROM RSSConnectTimes WHERE RunID = @runId;

----------import RSSConnectTimes --------------
INSERT INTO RSSConnectTimes (RSSConnectTimeID, RunID, ToolStringSN, BatteryType, SerialNumber, BatteryInsert, BatteryInitialized  
 , ToolRead, ConnectToHEL, ToolStringID, FixedAssetID)             
SELECT	NEWID(), @runId, SerialNumber, PartName, PartSerialNumber, BatteryInsert,BatteryInitialized, ToolRead, ConnectToHEL, ToolStringId, FixedAssetId       			      
FROM	@rssConnectTimes;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_SensorConnectTimes]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/30/2020  
-- Description: IMPORT SPECNAV SensorConnectTimes DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_SensorConnectTimes]
(
	@runId				AS VARCHAR(38),
	@sensorConnectTimes	AS [UT_SensorConnectTime] READONLY
)
AS
 
SET NOCOUNT ON

----------Delete SensorConnectTimes records for run id --------------------
DELETE FROM SensorConnectTimes WHERE RunID = @runId;

----------import SensorConnectTimes --------------
INSERT INTO SensorConnectTimes (SensorConnectTimeID, RunID, Sensor, SerialNumber, ConnectTime, DisconnectTime, ElapsedTime, ToolStringID, FixedAssetID)          
SELECT	NEWID(), @runId, PartName, PartSerialNumber, ConnectTime, DisconnectTime, ElapsedTime, ToolStringId, FixedAssetId       			      
FROM	@sensorConnectTimes;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_SensorToBitOffsets]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/26/2020  
-- Description: IMPORT SPECNAV SENSORTOBITOFFSETS DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_SensorToBitOffsets]
(
	@runId				AS VARCHAR(38),
	@sensorToBitOffsets	AS [UT_SensorToBitOffset] READONLY
)
AS
 
SET NOCOUNT ON

----------Delete SensorToBitOffsets records for run id --------------------
DELETE FROM SensorToBitOffsets WHERE RunID = @runId;

----------import SensorToBitOffsets --------------
INSERT INTO SensorToBitOffsets (SensorToBitOffsetID, RunID, PartTypeName, SerialNumber, Offset, OffsetUOM, Rate, RateUOM, ToolStringID, FixedAssetID)        
SELECT	NEWID(), @runId, PartName, PartSerialNumber, Offset, OffsetUOM, AquaRate, AquaRateUOM, ToolStringId, FixedAssetId       			      
FROM	@sensorToBitOffsets;

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_ToolDetails]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/23/2020  
-- Description: IMPORT SPECNAV TOOLDETAIL DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_ToolDetails]
(
	@toolDetails		AS [UT_ToolDetail] READONLY,
	@toolStringMappings	AS [UT_ToolStringMapping] READONLY
)
AS
 
SET NOCOUNT ON

----------Delete ToolDetail records for tool string ids --------------------
DELETE FROM ToolDetail WHERE ToolStringID in (SELECT ToolStringId FROM @toolStringMappings);

----------import ToolStrings --------------
INSERT INTO ToolDetail (ToolDetailID, ToolStringID, ArriveDate, DepartDate, InitialFieldDate 
						, NonMag, OuterDTop, OuterDBottom  
						, MaxOuterD, MaxOuterDUOM, InnerD, InnerDUOM
						, BladeDiameter, BladeDiameterUOM, BladeType, FullGaugeLength
						, FishNeck, [Length], LengthUOM, [Weight]
						, WeightPerFM, TopConnectionType, BottomConnectionType
						, WFTEquipment, InitialOperatingHours, TotalOperatingHours, InitialCirculatingHours, TotalCirculatingHours
						, InitialDrillHours, TotalDrillHours, InitialKRevs, TotalKRevs, BitToBend
						, NoLoadRPMFlowUnit, BearingPackConfiguration, PowerSectionConfiguration, MotorType, MotorNominalSize
						, AdjustableHousing, CutForFloat, JarForceUp
						, JarForceDown, JarDelay, JarType, InitialJarHits
						, TotalJarHits, BitSize, BitSizeUOM, BitModel, InnerRows
						, OuterRows, DullCharacteristics, LocationL, BearingSeatB, GaugeG
						, OtherDullO, ReasonPulledR, GaugeLength, ActivePassive
						, NumberOfBlades, PDCCutterSize, BitManufacturer, QuantityOnRig
						, PumpManufacturer, PumpModel, PumpType, PumpStrokeLength
						, PumpEfficiency, PumpPressureRating, DampenerType, PressureDampenerManufacturer  
						, MotorProperty, FixedBendAngle, Manufacturer )  
SELECT	NEWID(), tsm.ToolStringId, td.Arrive_Date, td.Depart_Date, td.Initial_Field_Date
		, td.NonMag, td.Outer_D_Top, td.Outer_D_Bottom
		, td.Max_Outer_D, td.Max_Outer_DUOM, td.Inner_D, td.Inner_DUOM
		, td.Blade_Diameter, td.Blade_DiameterUOM, td.Blade_Type, td.Full_Gauge_Length
		, td.Fish_Neck, td.[Length], td.LengthUOM, td.[Weight]
		, td.Weight_Per_FM, td.Top_Connection_Type, td.Bottom_Connection_Type
		, td.WFT_Equipment, td.Initial_Operating_Hours, td.Total_Operating_Hours, td.Initial_Circulating_Hours, td.Total_Circulating_Hours
		, td.Initial_Drill_Hours, td.Total_Drill_Hours, td.Initial_KRevs, td.Total_KRevs, td.Bit_To_Bend
		, td.No_LoadRPM_Flow_Unit, td.Bearing_Pack_Configuration, td.Power_Section_Configuration, td.Motor_Type, td.Motor_Nominal_Size
		, td.Adjustable_Housing, td.Cut_For_Float, td.Jar_Force_Up
		, td.Jar_Force_Down, td.Jar_Delay, td.Jar_Type, td.Initial_Jar_Hits
		, td.Total_Jar_Hits, td.Bit_Size, td.Bit_SizeUOM, td.Bit_Model, td.Inner_Rows
		, td.Outer_Rows, td.Dull_Characteristics, td.LocationL, td.Bearing_SeatB, td.GaugeG
		, td.Other_DullO, td.Reason_PulledR, td.Gauge_Length, td.Active_Passive
		, td.Number_Of_Blades, td.PDC_Cutter_Size, td.Bit_Manufacturer, td.Quantity_On_Rig
		, td.Pump_Manufacturer, td.Pump_Model, td.Pump_Type, td.Pump_Stroke_Length
		, td.Pump_Efficiency, td.Pump_Pressure_Rating, td.Dampener_Type, td.Pressure_Dampener_Manufacturer
		, td.Motor_Property, td.Fixed_Bend_Angle, td.Manufacturer
FROM	@toolDetails td
JOIN	@toolStringMappings tsm ON td.Inventory_ID = tsm.CoreToolStringId;

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_ToolString]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/23/2020  
-- Description: IMPORT SPECNAV TOOLSTRING DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_ToolString]
(
	@toolStrings	AS [UT_ToolString] READONLY,
	@district		varchar(12),
	@userID			int, 
	@runId			uniqueidentifier, 
	@incidentId		uniqueidentifier,
	@productLineId	int = 1,
	@createdBy		int = 1
)
AS
 
SET NOCOUNT ON

----------import rental motor ToolStrings --------------
INSERT INTO ToolStrings (ToolStringID, SerialNumber, [Description], CreatedBy, 
						SizeID, ToolYear, District, BuildNumber, ToolMod,   
						[CheckSum], [Type], CreateDate, CreateUserID, ProductLineId)  
SELECT		NEWID(), Serial_Number, 'Rental Motor', @createdBy, 
			NULL, [Year], @district, NULL,
			NULL, NULL,'MOTOR', 
			GETDATE(), @userID, @productLineId 
FROM		@toolStrings ts
LEFT JOIN	ToolStrings ts1 (NOLOCK) on ts.Serial_Number = ts1.SerialNumber AND ts1.[Description] = 'Rental Motor' 
WHERE		ts1.ToolStringId IS NULL AND ts.[Name] = 'Rental';

----------import loadout sheet ToolStrings --------------
INSERT INTO ToolStrings (ToolStringID, SerialNumber, [Description], CreatedBy, 
						SizeID, ToolYear, District, BuildNumber, ToolMod,   
						[CheckSum], [Type], CreateDate, CreateUserID, ProductLineId)  
SELECT		NEWID(), Serial_Number, 
			'ToolString', @createdBy, 
			(SELECT TOP 1 ToolSizeID FROM ToolStringSize WHERE ShortName = Size) As SizeId, 
			ts.[Year], @district, ts.Build , ts.[Configuration],
			ts.[checksum],so.OptionLabel,GETDATE(), @userID, @productLineId 
FROM		@toolStrings ts
JOIN		SelectOptions so (NOLOCK) on so.SelectName = 'LoadoutSheetToolType' AND so.OptionValue = ts.Template_Type AND so.OptionLabel != 'NonTool'
LEFT JOIN	ToolStrings ts1 (NOLOCK) on ts.Serial_Number = ts1.SerialNumber AND ts1.[Description] = 'ToolString' 
WHERE		ts1.ToolStringId IS NULL;

---------Map rental motor component info -------------------------
INSERT INTO ToolStringComponentInfo(ToolStringInfoID, ToolStringID, FixedAssetID, SerialNum, RunID, IncidentID, IsUsed, FailedNonPartName)  
SELECT	NEWID(), ts1.ToolStringId, null, ts1.SerialNumber, @runId, @incidentId, 1, 'Rental Motor'
FROM		@toolStrings ts
JOIN		ToolStrings ts1 (NOLOCK) on ts.Serial_Number = ts1.SerialNumber AND ts1.IsDeleted = 0 AND ts1.CreatedBy = 1 AND ts1.[Type] = 'Rental' 
LEFT JOIN	ToolStringComponentInfo tsci (NOLOCK) on tsci.ToolStringID = ts1.ToolStringId AND tsci.SerialNum = ts1.SerialNumber AND tsci.RunID = @runId
where		tsci.ToolStringInfoID IS NULL AND ts.[Name] = 'Rental';



SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_WellCoordinates]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/16/2020  
-- Description: IMPORT SPECNAV WELL COORDINATES DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_WellCoordinates]
(
	@wellId				AS VARCHAR(38),
	@wellCoordinates	AS [UT_WellCoordinate] READONLY
)
AS
 
SET NOCOUNT ON

----------import WellCoordinates --------------
INSERT INTO WellCoordinates (WellCoordinateID, WellID,Coordinate,CoordinateLoc,Type1,  
								Type2, Type1Value1, Type1Value2, Type2Value1,  Type2Value2)    
SELECT	NEWID(), @wellId, [Coordinate], [Coordinate_Loc], [Type1], 
		[Type2], [Type1Value1], [Type1Value2], [Type2Value1], [Type2Value2]						       			      
FROM	@wellCoordinates;

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_WellTargetChangeRequests]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/16/2020  
-- Description: IMPORT SPECNAV WELL TARGET CHANGE REQUESTS DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_WellTargetChangeRequests]
(
	@wellId						AS VARCHAR(38),
	@wellTargetChangeRequests	AS [UT_WellTargetChangeRequest] READONLY
)
AS
 
SET NOCOUNT ON

----------import WellTargetsChangeRequests --------------
INSERT INTO WellTargetsChangeRequests ( WellTargetsChangeRequestID, WellID, TargetDate, TargetChangeRequestBy, TargetChangeRecordedBy,  
										LastSurveyMD, LastSurveyInc, LastSurveyAzimuth,LastSurveyTVD, ETBMD,  
										ETBInc, ETBAzimuth, ETBTVD, ETBNSCoordinates, ETBEWCoordinates,    
										ETBVerticalSection, ETBDogleg, NewMD, NewInc, NewAzimuth,  
										NewTVD, NewNSCoordinates, NewEWCoordinates, NewVerticalSection, NewDogleg, Comments)   
SELECT	NEWID(),@wellId, Target_Date, Target_Change_Request_By, Target_Change_Recorded_By, 
		Last_Survey_Measured_Depth, Last_Survey_Inclination, Last_Survey_Azimuth,  Last_Survey_TVD, ETB_Measured_Depth,
        ETB_Inclination, ETB_Azimuth, ETB_TVD, ETB_NSCoordinates, ETB_EWCoordinates,
		[ETB_Vertical_Section],	[ETB_Dogleg], [New_Target_Measured_Depth], [New_Target_Inclination], [New_Target_Azimuth],
		[New_Target_TVD], [New_Target_NSCoordinates], [New_Target_EWCoordinates], [New_Target_Vertical_Section], [New_Target_Dogleg], [Comments] 						       			      
FROM	@wellTargetChangeRequests;

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_WellTargets]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/15/2020  
-- Description: IMPORT SPECNAV WELL TARGET DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_WellTargets]
(
	@wellId			AS VARCHAR(38),
	@wellTargets	AS [UT_WellTarget] READONLY
)
AS
 
SET NOCOUNT ON

----------import WellTargets --------------
INSERT INTO WellTargets (WellTargetID, WellID, KickOffPoint, ProposedMaxAngle) 
SELECT	NEWID(),@wellId, Kickoff_Point, Proposed_Max_Angle
FROM	@wellTargets;

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_SpecnavImport_WellTargetsPlanned]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- Author:  SACHIN MHALUNGEKAR  
-- Create date: 03/16/2020  
-- Description: IMPORT SPECNAV WELL TARGETS PLANNED DATA  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_SpecnavImport_WellTargetsPlanned]
(
	@wellId				AS VARCHAR(38),
	@wellTargetsPlanned	AS [UT_WellTargetPlanned] READONLY
)
AS
 
SET NOCOUNT ON

----------import WellTargetsPlanned --------------
INSERT INTO WellTargetsPlanned (WellTargetPlannedID, WellID, [Target], [Type], Radius, Formation, Latitude, Departure,  
        Azimuth, VerticalSection, TVD, MaxBuildRate)  
SELECT	NEWID(),@wellId, [Target], [Type], Radius, Formation, Latitude, Departure,  
        Azimuth, VerticalSection, TVD, MaxBuildRate
FROM	@wellTargetsPlanned;

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_ToolNotReceievedHistoryReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[usp_ToolNotReceievedHistoryReport]
	@xmlData xml
AS
/*
declare @xmlData xml

set @xmlData = '<Filters>
					<Regions><Id>LAO</Id><Id>NAM</Id></Regions>
					<Countries><Id>DZ</Id><Id>US</Id><Id>AR</Id></Countries>
					<BranchPlants><Id>PERTH</Id><Id>HASSIMESSA</Id></BranchPlants>					
					<ToolPanels><Id>EM</Id><Id>LWD</Id></ToolPanels>
					<ToolCodes><Id>TEST1</Id><Id>BAT6</Id></ToolCodes>
					<ItemNums><Id>123456</Id><Id>124589</Id></ItemNums>
					<ViewType>Location</ViewType><FromDate>01/24/2013</FromDate><ToDate>02/24/2013</ToDate></Filters>'
*/

declare @sql varchar(max)
declare @alterSql varchar(max)
declare @viewType varchar(256)
declare @fromDate varchar(256)
declare @toDate varchar(256)
declare @isDrillDown varchar(1)
declare @location varchar(max)
Declare @DaysNotRecievedSelectedValue as Int
Declare @InTransitStatusId varchar(2)


set @alterSql = 'Alter table #Result Add '

select @fromDate = T.c.value('.', 'varchar(256)') 
from 
@xmlData.nodes('/Filters/StartDate') T(c)

select @toDate = T.c.value('.', 'varchar(256)') 
from 
@xmlData.nodes('/Filters/EndDate') T(c)

select @viewType = T.c.value('.', 'varchar(256)') 
from 
@xmlData.nodes('/Filters/ViewType') T(c)

select T.c.value('.', 'varchar(max)') as Region
into #Regions
from 
@xmlData.nodes('/Filters/Regions/Id') T(c)

select T.c.value('.', 'varchar(max)') as Country
into #Countries
from 
@xmlData.nodes('/Filters/Countries/Id') T(c)

select T.c.value('.', 'varchar(max)') as BranchPlant
into #BranchPlants
from 
@xmlData.nodes('/Filters/BranchPlants/Id') T(c)

select T.c.value('.', 'varchar(max)') as ToolPanel
into #ToolPanels
from 
@xmlData.nodes('/Filters/ToolPanels/Id') T(c)

select T.c.value('.', 'varchar(max)') as ToolCode
into #ToolCodes
from 
@xmlData.nodes('/Filters/ToolCodes/Id') T(c)

select T.c.value('.', 'varchar(max)') as ItemNum
into #ItemNums
from 
@xmlData.nodes('/Filters/ItemNums/Id') T(c)

select T.c.value('.', 'varchar(max)') as ToolPanelToolCode
into #ToolPanelsWithSelectedToolCodes
from 
@xmlData.nodes('/Filters/ToolPanelsWithSelectedToolCodes/Id') T(c)

select @isDrillDown = T.c.value('.', 'varchar(1)') 
from 
@xmlData.nodes('/Filters/IsDrillDown') T(c)

select @location = T.c.value('.', 'varchar(max)') 
from 
@xmlData.nodes('/Filters/Location') T(c)

select @DaysNotRecievedSelectedValue = T.c.value('.', 'int') 
from 
@xmlData.nodes('/Filters/DaysNotReceived') T(c)

select @InTransitStatusId = T.c.value('.', 'varchar(2)') 
from 
@xmlData.nodes('/Filters/InTransitStatusId') T(c)


if (@isDrillDown = '1') 
begin
	if (@viewType = 'PartNum')
	begin
		if ((select count(*) from #ToolPanels) != 0 AND (select count(*) from #ToolCodes) = 0)
		begin 			
			insert into #ToolCodes 
			select distinct ISNULL(ToolCode,'') from ItemNums with(nolock) where ISNULL(ToolPanel,'') in (Select ISNULL(ToolPanel,'') from #ToolPanels)
			
			insert into #ToolPanelsWithSelectedToolCodes
			select distinct ISNULL(ToolPanel,'') + '/' + ISNULL(ToolCode,'') FROM ItemNums with(nolock) where ISNULL(ToolPanel,'') in (Select ToolPanel from #ToolPanels) AND IsAsset=1

			delete from #ToolPanels	
		end
		else if ((select count(*) from #ToolPanels) != 0 AND (select count(*) from #ToolCodes) != 0 AND (select count(*) from #ItemNums) = 0)
		begin 			
			declare @toolPanel varchar(max)
			declare @toolCode varchar(max)
			
			set @toolPanel = (Select ISNULL(ToolPanel,'') from #ToolPanels)
			set @toolCode = (Select ISNULL(ToolCode,'') from #ToolCodes)
			
			insert into #ItemNums 
			select ISNULL(ItemNum,'') from ItemNums with(nolock) where ISNULL(ToolPanel,'') = @toolPanel and ISNULL(ToolCode,'') = @toolCode and IsAsset = 1
			
			delete from #ToolPanels
			delete from #ToolCodes
		end
		else if ((select count(*) from #ItemNums) != 0)
		begin
			delete from #ToolPanels
			delete from #ToolCodes
			delete from #ItemNums
		end
	end
	else -- ViewType = Location
	begin
		if ((select count(*) from BranchPlants with(nolock) where ISNULL(Region,'') = @location) != 0)
		begin 			
			insert into #Countries 
			select distinct ISNULL(Country,'') from BranchPlants with(nolock) where ISNULL(Region,'') = @location
			delete from #Regions	
		end
		else if ((select count(*) from BranchPlants with(nolock) where ISNULL(Country,'') = @location) != 0)
		begin 			
			declare @region varchar(max)
			declare @country varchar(max)
			
			set @region = (Select ISNULL(Region,'') from #Regions)
			set @country = (Select ISNULL(Country,'') from #Countries)
			
			insert into #BranchPlants 
			select distinct ISNULL(BranchPlant,'') from BranchPlants with(nolock)
			where ISNULL(Country,'') = @location
			
			delete from #Regions
			delete from #Countries
		end
		else if ((select count(*) from BranchPlants with(nolock) where ISNULL(BranchPlant,'') = @location) != 0)
		begin
			delete from #Regions
			delete from #Countries
			delete from #BranchPlants
		end
	end
end

CREATE TABLE #ResultFilter
( 
    fullTreePath varchar(max),
	displayname varchar(max)
) 

if ((select count(*) from #Regions) = 0 AND (select count(*) from #Countries) = 0 AND (select count(*) from #BranchPlants) = 0)
begin
	insert into #ResultFilter 
	select distinct '', ISNULL(r.RegionDesc,'') From BranchPlants b with(nolock) INNER JOIN Regions r with(nolock) on b.Region = r.Region 
end
else
begin				
	insert into #ResultFilter
	select distinct '', ISNULL(r.RegionDesc,'') From Regions r where ISNULL(r.Region,'') in (select ISNULL(Region,'') from #Regions)
	Union All
	select distinct '', ISNULL(c.CountryDesc,'') From Countries c where ISNULL(c.Country,'') in (select ISNULL(Country,'') from #Countries)
	Union All
	select distinct '', ISNULL(b.CompanyName,'') From BranchPlants b where ISNULL(b.BranchPlant,'') in (select ISNULL(BranchPlant,'') from #BranchPlants)
end

if ((select count(*) from #ToolPanels) = 0 AND (select count(*) from #ToolCodes) = 0 AND (select count(*) from #ItemNums) = 0)
	begin		
		if @viewType = 'Location' 
		insert into #ResultFilter
		select distinct '' as FullTreePath, 'All Tool Panels' as DisplayName From ItemNums with(nolock)
	end
else 
	begin
		if @viewType = 'Location'
		insert into #ResultFilter
		select distinct i.ToolPanel, i.ToolPanel From Itemnums i with(nolock)
		where i.ToolPanel in (select ToolPanel from #ToolPanels)
		Union All 
		select distinct ISNULL(i.ToolPanel,'') + '/' + ISNULL(i.ToolCode,''), ISNULL(i.ToolCode,'') From Itemnums i with(nolock) 
		where ISNULL(i.ToolCode,'') in (select ISNULL(ToolCode,'') from #ToolCodes) and ((ISNULL(i.ToolPanel,'') + '/' + ISNULL(i.ToolCode,'')) in (Select * from #ToolPanelsWithSelectedToolCodes))
		Union All 
		select distinct ISNULL(i.ToolPanel,'') + '/' + ISNULL(i.ToolCode,'') + '/' + ISNULL(i.ItemNum,''), i.DescShort From Itemnums i with(nolock) 
		where i.ItemNum in (select ItemNum from #ItemNums)
	end	

declare @value varchar(4000)
declare @objectId varchar(max)
declare @recordType varchar(max)
declare @selectValue varchar(max)
declare @sumValue varchar(max)
declare @pivotValue varchar(max)
declare @fullTreePath varchar(max)
declare @counter int

set @selectValue = ''
set @pivotValue = ''

CREATE TABLE #PivotColumns
(
	ColumnName varchar(4000)
)

CREATE TABLE #Result
( 
    inventorydate datetime
) 

CREATE TABLE #PivotColumnsFilter
(
	RecordType varchar(10),
	Id varchar(max),
	DisplayName varchar(max),
	FullTreePath varchar(max)
)

set @counter = 0

set @value = null
set @objectId = null
set @fullTreePath = null
set @recordType = null

declare @sqlQuery varchar(max)
set @sqlQuery = ''

if @viewType = 'PartNum'
begin	
	if ((select count(*) from #ToolPanels) = 0 AND (select count(*) from #ToolCodes) = 0 AND (select count(*) from #ItemNums) = 0)
	begin
		set @sqlQuery = 'insert into #PivotColumnsFilter
		select distinct ''TP'' as RecordType, isnull(i.ToolPanel,'''') as Id, isnull(i.ToolPanel,'''') as DisplayName, isnull(i.ToolPanel,'''') as FullTreePath From Itemnums i with(nolock)'
	end
	else
	begin
		set @sqlQuery = 'insert into #PivotColumnsFilter 	
		select distinct ''TP'' as RecordType, isnull(i.ToolPanel,'''') as Id, isnull(i.ToolPanel,'''') as DisplayName, isnull(i.ToolPanel,'''') as FullTreePath From Itemnums i with(nolock)
		where i.ToolPanel in (select ToolPanel from #ToolPanels)
		Union All 
		select distinct ''TC'' as RecordType, isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''') as Id, isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''') as DisplayName, isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''') as FullTreePath From Itemnums i with(nolock) 
		where ISNULL(i.ToolCode,'''') in (select ISNULL(ToolCode,'''') from #ToolCodes) and ((isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''')) in (Select * from #ToolPanelsWithSelectedToolCodes))
		Union All 		
		select distinct ''IN'' as RecordType, isnull(i.ItemNum,'''') as Id, isnull(i.DescShort,'''') as DisplayName, isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''') + ''/'' + isnull(i.ItemNum,'''') as FullTreePath 
		From Itemnums i with(nolock) 
		where i.ItemNum in (select ItemNum from #ItemNums)'
	end
end	
else if @viewType = 'Location'
begin		
	if ((select count(*) from #Regions) = 0 AND (select count(*) from #Countries) = 0 AND (select count(*) from #BranchPlants) = 0)
	begin
		set @sqlQuery = 'insert into #PivotColumnsFilter
		select distinct ''RG'' as RecordType, isnull(r.Region,'''') as Id, isnull(r.RegionDesc,'''') as DisplayName, isnull(r.Region,'''') as FullTreePath From Regions r with(nolock)'
	end
	else
	begin
		set @sqlQuery = 'insert into #PivotColumnsFilter 	
		select distinct ''RG'' as RecordType, isnull(r.Region,'''') as Id, isnull(r.RegionDesc,'''') as DisplayName, isnull(r.Region,'''') as FullTreePath From Regions r with(nolock)
		where ISNULL(r.Region,'''') in (select ISNULL(Region,'''') from #Regions)
		Union All 
		select distinct ''CN'' as RecordType, isnull(c.Country,'''') as Id, isnull(c.CountryDesc,'''') as DisplayName, isnull(c.RegionCode,'''') + ''/'' + isnull(c.Country,'''') as FullTreePath From Countries c with(nolock) 
		where ISNULL(c.Country,'''') in (select ISNULL(Country,'''') from #Countries)
		Union All 		
		select distinct ''BP'' as RecordType, isnull(b.BranchPlant,'''') as Id, isnull(b.CompanyName,'''') as DisplayName, isnull(b.Region,'''') + ''/'' + isnull(b.Country,'''') + ''/'' + isnull(b.BranchPlant,'''') as FullTreePath 
		From BranchPlants b with(nolock) 
		where ISNULL(b.BranchPlant,'''') in (select ISNULL(BranchPlant,'''') from #BranchPlants)'
	end
end

print @sqlQuery
exec (@sqlQuery)

select top 1 @objectId = Id, @value = DisplayName, @recordType = RecordType, @fullTreePath = FullTreePath from #PivotColumnsFilter order by DisplayName

while(@objectId is not null)
begin 		
	Set @value = @value + '~' + @fullTreePath	
	
	insert into #PivotColumns values (@value)
	
	set @selectValue = @selectValue + ', IsNull([' + @value + '],0) as [' + @value + ']' 
	
	if @counter = 0
	begin
		set @pivotValue = '[' + @value +']'
		set @alterSql = @alterSql + '[' + @value +'] int'
	end
	else
	begin
		set @pivotValue = @pivotValue + ', [' + @value +']'
		set @alterSql = @alterSql + ', [' + @value +'] int'
	end

	delete from #PivotColumnsFilter where Id = @objectId and RecordType = @recordType
	set @objectId = null
	select top 1 @objectId = Id, @value = DisplayName, @recordType = RecordType, @fullTreePath = FullTreePath  from #PivotColumnsFilter order by DisplayName
	set @counter = @counter + 1
end

Print @selectValue
Print @pivotValue
print @alterSql

declare @whereClauseForLocationViewType varchar(max)
declare @whereClauseForItemNumViewType varchar(max)
declare @whereClauseLocations varchar(max)
declare @whereClauseItemNums varchar(max)
declare @statusFilter varchar(max)
declare @dateFilter varchar(max)

set @whereClauseLocations = ''
set @whereClauseItemNums = ''
			
set @dateFilter = ' and f.InventoryDate >= ''' + @fromDate + ''' and f.InventoryDate <= ''' + @toDate + ''''
set @statusFilter = ' and f.EquipmentStatus = ''' + @InTransitStatusId + ''''

if(@DaysNotRecievedSelectedValue = 1)
	set @dateFilter = @dateFilter + ' AND datediff(d,f.LastStatusChangeDate,f.InventoryDate) Between 1 AND 30 '
	
else if(@DaysNotRecievedSelectedValue = 2)
	set @dateFilter = @dateFilter + ' AND datediff(d,f.LastStatusChangeDate,f.InventoryDate) Between 31 AND 60 '	

else if(@DaysNotRecievedSelectedValue = 3)
	set @dateFilter = @dateFilter + ' AND datediff(d,f.LastStatusChangeDate,f.InventoryDate) Between 61 AND 90 '	

else if(@DaysNotRecievedSelectedValue = 4)
	set @dateFilter = @dateFilter + ' AND datediff(d,f.LastStatusChangeDate,f.InventoryDate) Between 91 AND 120 '	
	
else if(@DaysNotRecievedSelectedValue = 5)
	set @dateFilter = @dateFilter + ' AND datediff(d,f.LastStatusChangeDate,f.InventoryDate) Between 121 AND 180 '

else if(@DaysNotRecievedSelectedValue = 6)
	set @dateFilter = @dateFilter + ' AND datediff(d,f.LastStatusChangeDate,f.InventoryDate) > 180 '

set @whereClauseForItemNumViewType = @dateFilter + @statusFilter
set @whereClauseForLocationViewType = @dateFilter + @statusFilter

if((select count(*) from #Regions) > 0 OR (select count(*) from #Countries) > 0 OR (select count(*) from #BranchPlants) > 0)
begin
	set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + ' and ( '	
	
	if((select count(*) from #Regions) > 0)
		set @whereClauseLocations = @whereClauseLocations + ' ISNULL(b.Region,'''') in (select * from #Regions)'
	else if((select count(*) from #Countries) > 0)
		set @whereClauseLocations = @whereClauseLocations + ' ISNULL(b.Country,'''') in (select * from #Countries)'
	else if((select count(*) from #BranchPlants) > 0)
		set @whereClauseLocations = @whereClauseLocations + ' ISNULL(b.BranchPlant,'''') in (select * from #BranchPlants)'
		
	if((select count(*) from #Regions) > 0 AND (select count(*) from #Countries) > 0)
		set @whereClauseLocations = @whereClauseLocations + ' OR ISNULL(b.Country,'''') in (select * from #Countries)'	
	if((select count(*) from #Regions) > 0 AND (select count(*) from #BranchPlants) > 0)
		set @whereClauseLocations = @whereClauseLocations + ' OR ISNULL(b.BranchPlant,'''') in (select * from #BranchPlants)'
	
	if((select count(*) from #Regions) = 0 AND (select count(*) from #Countries) > 0 AND (select count(*) from #BranchPlants) > 0)
		set @whereClauseLocations = @whereClauseLocations + ' OR ISNULL(b.BranchPlant,'''') in (select * from #BranchPlants)'		

	set @whereClauseForItemNumViewType = @whereClauseForItemNumViewType + @whereClauseLocations + ' )' 
end

if((select count(*) from #ToolPanels) > 0 OR (select count(*) from #ToolCodes) > 0 OR (select count(*) from #ItemNums) > 0)
begin
	set @whereClauseForLocationViewType = @whereClauseForLocationViewType + ' AND ( '
	
	if((select count(*) from #ToolPanels) > 0)
		set @whereClauseItemNums = @whereClauseItemNums + ' i.ToolPanel in (select * from #ToolPanels)'
	else if((select count(*) from #ToolCodes) > 0)
		set @whereClauseItemNums = @whereClauseItemNums + ' (ISNULL(i.ToolCode,'''') in (select * from #ToolCodes) and ((isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''')) in (Select * from #ToolPanelsWithSelectedToolCodes)))'
	else if((select count(*) from #ItemNums) > 0)
		set @whereClauseItemNums = @whereClauseItemNums + ' i.ItemNum in (select * from #ItemNums)'
		
	if((select count(*) from #ToolPanels) > 0 AND (select count(*) from #ToolCodes) > 0)
		set @whereClauseItemNums = @whereClauseItemNums + ' OR (ISNULL(i.ToolCode,'''') in (select * from #ToolCodes) and ((isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''')) in (Select * from #ToolPanelsWithSelectedToolCodes)))'	
	if((select count(*) from #ToolPanels) > 0 AND (select count(*) from #ItemNums) > 0)
		set @whereClauseItemNums = @whereClauseItemNums + ' OR i.ItemNum in (select * from #ItemNums)'
	
	if((select count(*) from #ToolPanels) = 0 AND (select count(*) from #ToolCodes) > 0 AND (select count(*) from #ItemNums) > 0)
		set @whereClauseItemNums = @whereClauseItemNums + ' OR i.ItemNum in (select * from #ItemNums)'
	
	set @whereClauseForLocationViewType = @whereClauseForLocationViewType + @whereClauseItemNums + ' )' 
end

declare @query varchar(max)
set @query = ''

print 'buiding query'
set @sql = 
'
insert into #Result
select InventoryDate ' + @selectValue + '
		from ( '

if((@viewType = 'Location' AND (select count(*) from #Regions) = 0 AND (select count(*) from #Countries) = 0 AND (select count(*) from #BranchPlants) = 0)
	OR (@viewType = 'Location' AND (select count(*) from #Regions) > 0) 
	OR (@viewType = 'PartNum' AND (select count(*) from #ToolPanels) = 0 AND (select count(*) from #ToolCodes) = 0 AND (select count(*) from #ItemNums) = 0)
	OR (@viewType = 'PartNum' AND (select count(*) from #ToolPanels) > 0))
begin
	set @query = ' select f.InventoryDate, 1 as Qty, '
	if @viewType = 'Location'
		set @query = @query + 'rg.RegionDesc + ''~'' + b.Region '		
	else if @viewType = 'PartNum'
		set @query = @query + ' i.ToolPanel + ''~'' + i.ToolPanel '		
	else
		set @query = @query + ' ps.[Status] + ''~'' + ps.[Status] '
			
	set @query = @query + ' as PivotField from FixedAssetSnapshots f with(nolock)
	left join BranchPlants b with(nolock) on b.BranchPlant = f.BranchPlant
	left join PartStatus ps with(nolock) on ps.Code = f.EquipmentStatus '
	if @viewType = 'Location'
	begin
		 set @query = @query + ' left join Regions rg with(nolock) on b.Region = rg.Region					    	
							left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'
		
		 if((select count(*) from #Regions) > 0)
		 begin
			set @query = @query + ' and ISNULL(rg.Region,'''') in (select * from #Regions)'										
		 end	 
		 
		 if(@whereClauseForLocationViewType != '')
		 begin
			set @query = @query + @whereClauseForLocationViewType
		 end
	end						
	else if @viewType = 'PartNum'
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'		 
		 
		 if((select count(*) from #ToolPanels) > 0)
		 begin
			set @query = @query + ' and i.ToolPanel in (select * from #ToolPanels) '	
		 end	
		 
		 if(@whereClauseForItemNumViewType != '')
		 begin
			set @query = @query + @whereClauseForItemNumViewType
		 end
	end
end

if(((select count(*) from #Countries) > 0 AND @viewType = 'Location') OR ((select count(*) from #ToolCodes) > 0 AND @viewType = 'PartNum'))
begin
	if(@query != '')
	begin	
		set @query = @query + ' Union All'
	end
	
	set @query = @query + ' select f.InventoryDate, 1 as Qty, '
	if @viewType = 'Location'
		set @query = @query + ' ISNULL(c.CountryDesc,'''') + ''~'' + IsNull(b.Region,'''') + ''/'' + ISNULL(b.Country,'''') '
	else if @viewType = 'PartNum'
		set @query = @query + ' isnull(i.ToolPanel,'''') + ''/'' + ISNULL(i.ToolCode,'''') + ''~'' + IsNull(i.ToolPanel,'''') + ''/'' + IsNull(i.ToolCode, '''') '
		
	set @query = @query + ' as PivotField from FixedAssetSnapshots f with(nolock)
	left join BranchPlants b with(nolock) on b.BranchPlant = f.BranchPlant
	left join PartStatus ps with(nolock) on ps.Code = f.EquipmentStatus '

	if @viewType = 'Location'
	begin
		set @query = @query + ' left join Countries c with(nolock) on c.Country = b.Country
							left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'	
							
		 if((select count(*) from #Countries) > 0)
		 begin
			set @query = @query + ' and ISNULL(c.Country,'''') in (select * from #Countries)'					
		 end					
		
		 if(@whereClauseForLocationViewType != '')
		 begin
			set @query = @query + @whereClauseForLocationViewType
		 end							
	end						
	else if @viewType = 'PartNum'
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'	
		 
		 if((select count(*) from #ToolCodes) > 0)
		 begin
			set @query = @query + ' and ISNULL(i.ToolCode,'''') in (select * from #ToolCodes)'	
			set @query = @query + ' and ((isnull(i.ToolPanel,'''') + ''/'' + isnull(i.ToolCode,'''')) in (Select * from #ToolPanelsWithSelectedToolCodes)) '								
		 end	
		 
		 if(@whereClauseForItemNumViewType != '')
		 begin
			set @query = @query + @whereClauseForItemNumViewType
		 end				
	end		
end	
		
if(((select count(*) from #BranchPlants) > 0 AND @viewType = 'Location') OR ((select count(*) from #ItemNums) > 0 AND @viewType = 'PartNum'))
begin	
	
	if(@query != '')
	begin	
		set @query = @query + ' Union All'
	end

	set @query = @query + ' select f.InventoryDate, 1 as Qty, '
	if @viewType = 'Location'
		set @query = @query + ' ISNULL(b.CompanyName,'''') + ''~'' + IsNull(b.Region, '''') + ''/'' + IsNull(b.Country, '''') + ''/'' + ISNULL(b.BranchPlant,'''')'
	else if @viewType = 'PartNum'
		set @query = @query + ' ISNULL(i.DescShort,'''') + ''~'' + IsNull(i.ToolPanel, '''') + ''/'' + IsNull(i.ToolCode, '''') + ''/''  + ISNULL(i.ItemNum,'''') '
		
	set @query = @query + ' as PivotField from FixedAssetSnapshots f with(nolock)
	left join BranchPlants b with(nolock) on b.BranchPlant = f.BranchPlant
	left join PartStatus ps with(nolock) on ps.Code = f.EquipmentStatus '

	if @viewType = 'Location'
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'		
							
		 if((select count(*) from #BranchPlants) > 0)
		 begin
			set @query = @query + ' and ISNULL(b.BranchPlant,'''') in (select * from #BranchPlants)'					
		 end				
		
		 if(@whereClauseForLocationViewType != '')
		 begin
			set @query = @query + @whereClauseForLocationViewType
		 end
	end						
	else if @viewType = 'PartNum'
	begin
		 set @query = @query + ' left join ItemNums i with(nolock) on i.ItemNum = f.InventoryItemNum and i.IsAsset = 1 where 1 = 1'
		
		 if((select count(*) from #ItemNums) > 0)
		 begin
			set @query = @query + ' and f.InventoryItemNum in (select * from #ItemNums)'					
		 end	
		 
		 if(@whereClauseForItemNumViewType != '')
		 begin
			set @query = @query + @whereClauseForItemNumViewType
		 end
	end
end
set @sql = @sql + @query

set @sql = @sql + '
		) p PIVOT ( SUM (Qty) FOR [PivotField] IN
			( ' + @pivotValue + ' )
		) AS pvt Order By InventoryDate
'

exec (@alterSql)
print @sql
exec (@sql)

select * from #Result 
select * from #ResultFilter
select * from #PivotColumns

drop table #Regions 
drop table #Countries 
drop table #BranchPlants 
drop table #ToolPanels 
drop table #ToolCodes
drop table #ItemNums
drop table #PivotColumnsFilter
drop table #Result
drop table #ResultFilter
drop table #ToolPanelsWithSelectedToolCodes




GO
/****** Object:  StoredProcedure [dbo].[usp_ToolStringJobReport]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_ToolStringJobReport]
	@xmlData xml
AS
BEGIN

SET NOCOUNT ON;
--SET @xmlData = '<Filters><WhereClause> (  1 = ''1'' )  AND ( fa.Code = ''AV'' OR fa.Code = ''II'' ) AND (  fa.BranchPlantName like ''%Stavanger, Norway%'' )</WhereClause><Status><Code>AV</Code><Code>II</Code></Status><NumberOfDays>30</NumberOfDays><ToolStringJobs><ToolStringJob><JobId>9bbaa920-9a77-440a-8987-a453012007b7</JobId><StartDate>06/11/2015 00:00:00</StartDate><EndDate>06/12/2015 21:00:30</EndDate></ToolStringJob><ToolStringJob><JobId>d7cc2ec0-320d-4fb0-998a-a453013901fc</JobId><StartDate>06/12/2015 21:00:30</StartDate><EndDate>06/13/2015 00:00:00</EndDate></ToolStringJob></ToolStringJobs></Filters>'

DECLARE @sSql VARCHAR(MAX)
DECLARE @minDate DATETIME
DECLARE @maxDate DATETIME
DECLARE @NoOfDays AS INT
DECLARE @counter AS INT
DECLARE @whereClause AS VARCHAR(MAX)
-- Getting Filters----

SELECT @whereClause = T.c.value('.', 'VARCHAR(max)') FROM  @xmlData.nodes('/Filters/WhereClause') T(c);
IF(ISNULL(@whereClause, '') = '')
BEGIN
	SET @whereClause = ' 1=1 '
END

CREATE TABLE #tblJarRunForecastToolFilter (
	id INT IDENTITY(1,1) NOT NULL,
	JobId UNIQUEIDENTIFIER,
	StartDate DATETIME,
	EndDate	DATETIME
)

CREATE TABLE #tblItemNumConfigCount (
	id INT IDENTITY(1,1) NOT NULL,
	ParentItemNum VARCHAR(100),
	ItemNum VARCHAR(100),
	Qty INT,
	Total INT,
	CanBeMade INT
)

CREATE TABLE #tblData (
	id INT IDENTITY(1,1) NOT NULL,
	JarRunForecastToolId UNIQUEIDENTIFIER,
	JobId UNIQUEIDENTIFIER,
	JarRunId UNIQUEIDENTIFIER,
	JobNumber VARCHAR(50),
	WellNumber VARCHAR(50),
	RigNumber VARCHAR(50),
	ItemNumConfigId UNIQUEIDENTIFIER,
	ItemNum VARCHAR(100),
	Size varchar(20),
	TotalRequired INT,
	TotalCanBeMade INT,
	ExcessShortage INT
)
CREATE TABLE #tblFilter
(
	id INT IDENTITY(1,1) NOT NULL,
	JarRunForecastToolId UNIQUEIDENTIFIER,
	ItemNumConfigId UNIQUEIDENTIFIER,
	ItemNum VARCHAR(100)
)
SELECT @NoOfDays = T.c.value('.', 'INT') FROM  @xmlData.nodes('/Filters/NoOfDays') T(c);

INSERT INTO #tblJarRunForecastToolFilter
SELECT	T.c.value('JobId[1]', 'UNIQUEIDENTIFIER') as JobId,
		T.c.value('StartDate[1]', 'DATE') as StartDate,
		T.c.value('EndDate[1]', 'DATE') as EndDate
FROM @xmlData.nodes('/Filters/ToolStringJobs/ToolStringJob') T(c);


INSERT INTO #tblFilter
SELECT 
	b.JarRunForecastToolId, b.ItemNumConfigId, b.ItemNum 
FROM #tblJarRunForecastToolFilter a
INNER JOIN vwJarRunForecastTools b on b.JobId = a.JobId
ORDER by StartDate,EndDate

SET @minDate = (SELECT Min(StartDate) FROM #tblJarRunForecastToolFilter)
SET @maxDate = (SELECT Max(EndDate) FROM #tblJarRunForecastToolFilter)

if(DateDiff(day,@minDate,@maxDate) > @NoOfDays)
BEGIN
	SET @maxDate = DATEADD(day, @NoOfDays-1, @minDate)
END
-- Getting Filters----

-- Getting Total Inventory----

INSERT INTO #tblItemNumConfigCount
SELECT 
	a.ParentItemNum,a.ItemNum,a.Qty,0,0
FROM  ItemNumConfigs a 
WHERE IsToolString = 1 and a.ParentItemNum in (SELECT ItemNum FROM #tblFilter)

SET @sSql = 'UPDATE #tblItemNumConfigCount '
SET @sSql = @sSql + 'SET Total = (
					SELECT 
						ISNULL(count(fa.Code),0) 
					FROM vwWAMFixedAssetReport fa 
					WHERE fa.RNItemNum = #tblItemNumConfigCount.ItemNum AND ' + @whereClause 

SET @sSql = @sSql + ' GROUP BY RNItemNum )'

PRINT(@sSql)
EXEC(@sSql)
SET @sSql = ''

Update #tblItemNumConfigCount SET Total = 0 WHERE Total IS NULL
Update #tblItemNumConfigCount SET CanBeMade = CASE WHEN Qty =0 THEN 0 ELSE (Total / Qty) END

-- Getting Running Inventory----

INSERT INTO #tblData
SELECT 
	jrft.JarRunForecastToolId, j.JobId, r.JarRunId
	, j.JobNumber, j.JarWell as WELLNumber, j.RigName as RigNumber
	, jrft.ItemNumConfigId, ic.ItemNum as ItemNum
	, tss.Size as Size
	,jrft.Qty,0,0
FROM JarRunForecastTools (NOLOCK) jrft
LEFT JOIN JarRuns (NOLOCK) r ON r.JarRunId = jrft.JarRunId
LEFT JOIN ItemNumConfigs (NOLOCK) ic ON ic.ItemNumConfigId = jrft.ItemNumConfigId and ic.IsToolString = 1
LEFT JOIN ToolStringSize (NOLOCK) tss ON tss.ToolSizeID = ic.ToolSizeID
LEFT JOIN jobs (NOLOCK) j ON j.JobId = r.JobId
INNER JOIN #tblJarRunForecastToolFilter tbl ON tbl.JobId = j.JobId

Update #tblData SET TotalCanBeMade = (SELECT Min(CanBeMade) FROM #tblItemNumConfigCount WHERE ParentItemNum = #tblData.ItemNum)

DECLARE @sDate AS DATETIME
DECLARE @eDate AS DATETIME

SET @sDate = @minDate
SET @eDate = @maxDate

WHILE(@sDate <= @eDate)
BEGIN
	SET @sSql = 'ALTER TABLE #tblData Add [' + convert(VARCHAR, @sDate,101) + '] INT '
	EXEC(@sSql)
	
	SET @sSql = 'Update #tblData SET [' + convert(VARCHAR, @sDate,101) + '] = (
				SELECT 
					TOP 1 TotalRequired FROM 
				#tblData a 
				INNER JOIN #tblJarRunForecastToolFilter b on a.JobId = b.JobId 
				WHERE ''' + Convert(VARCHAR,@sDate,101) + ''' BETWEEN Convert(VARCHAR,b.StartDate,101) AND Convert(VARCHAR,b.EndDate,101) 
						AND a.JarRunForecastToolId = #tblData.JarRunForecastToolId)'
	PRINT(@sSQL)	
	EXEC(@sSQL)
	
	
	SET @counter = 1;
	While(@counter <= (SELECT Max(id) FROM #tblFilter))
	BEGIN
		
		Declare @JarRunForecastToolId as UNIQUEIDENTIFIER
		Declare @ItemNumConfigId as UNIQUEIDENTIFIER
		SELECT @JarRunForecastToolId = JarRunForecastToolId, @ItemNumConfigId = ItemNumConfigId FROM #tblFilter WHERE id = @counter
		SET @sSql = 'Update #tblData 
						SET[' + convert(VARCHAR, @sDate,101) + '] = (TotalCanBeMade - (
								SELECT 
									ISNULL(SUM(TotalRequired),0) 
								FROM #tblData 
								WHERE ItemNumConfigId = '''+ Convert(VARCHAR(50),@ItemNumConfigId) +''' 
								AND JarRunForecastToolId IN (
									SELECT 
										JarRunForecastToolId 
									FROM #tblFilter 
									WHERE id <= ' + Convert(VARCHAR,@counter) + '
									) 
									AND [' + convert(VARCHAR, @sDate,101) + '] IS NOT NULL)
								) 
								WHERE JarRunForecastToolId = ''' + Convert(VARCHAR(50),@JarRunForecastToolId) + ''' 
								AND ItemNumConfigId = ''' + Convert(VARCHAR(50),@ItemNumConfigId) + ''' 
								AND [' + convert(VARCHAR, @sDate,101) + '] IS NOT NULL'
		PRINT(@sSql)		
		EXEC(@sSql)
		
		SET @counter = @counter + 1
	END

	SET @sDate = DATEADD(day,1,@sDate)
END

UPDATE #tblData 
SET ExcessShortage = TotalCanBeMade - TotalRequired

SELECT * FROM #tblData

DROP TABLE #tblJarRunForecastToolFilter
DROP TABLE #tblItemNumConfigCount
DROP TABLE #tblData
DROP TABLE #tblFilter
	
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ToolStringJobReportDetail]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_ToolStringJobReportDetail]
	@xmlData xml
AS
BEGIN
	SET NOCOUNT ON;
	
--SET @xmlData = '<Filters><WhereClause> (  1 = ''1'' )  AND ( fa.Code = ''AV'' OR fa.Code = ''II'' ) AND (  fa.BranchPlantName like ''%Stavanger, Norway%'' )</WhereClause><Status><Code>AV</Code><Code>II</Code></Status><NumberOfDays>30</NumberOfDays><ToolStringJobs><ToolStringJob><JobId>9bbaa920-9a77-440a-8987-a453012007b7</JobId><StartDate>06/11/2015 00:00:00</StartDate><EndDate>06/12/2015 21:00:30</EndDate></ToolStringJob><ToolStringJob><JobId>d7cc2ec0-320d-4fb0-998a-a453013901fc</JobId><StartDate>06/12/2015 21:00:30</StartDate><EndDate>06/13/2015 00:00:00</EndDate></ToolStringJob></ToolStringJobs></Filters>'

DECLARE @sSql VARCHAR(MAX)
DECLARE @minDate DATETIME
DECLARE @maxDate DATETIME
DECLARE @NoOfDays as INT
DECLARE @counter as INT
DECLARE @statusColumn VARCHAR(MAX)
DECLARE @whereClause AS VARCHAR(MAX)
-- Getting Filters----

SELECT @whereClause = T.c.value('.', 'VARCHAR(MAX)') FROM  @xmlData.nodes('/Filters/WhereClause') T(c);
IF(ISNULL(@whereClause, '') = '')
BEGIN
	SET @whereClause = ' 1=1 '
END

CREATE TABLE #tblDateColumnName (
	id INT IDENTITY(1,1) NOT NULL,
	ColumnName VARCHAR(100)
)

CREATE TABLE #tblStatus (
	id INT IDENTITY(1,1) NOT NULL,
	StatusCode VARCHAR(2),
	StatusDesc VARCHAR(50)
)

INSERT INTO #tblStatus
SELECT Code, status FROM PartStatus WHERE Code IN (SELECT T.c.value('.', 'VARCHAR(2)') as Status FROM  @xmlData.nodes('/Filters/Status/Code') T(c));

SELECT @NoOfDays = T.c.value('.', 'INT') FROM  @xmlData.nodes('/Filters/NoOfDays') T(c);

CREATE TABLE #tblJarRunForecastToolFilter (
	id INT IDENTITY(1,1) NOT NULL,
	JobId UNIQUEIDENTIFIER,
	StartDate DATETIME,
	EndDate	DATETIME
)

INSERT INTO #tblJarRunForecastToolFilter
SELECT	T.c.value('JobId[1]', 'UNIQUEIDENTIFIER') as JobId,
		T.c.value('StartDate[1]', 'DATE') as StartDate,
		T.c.value('EndDate[1]', 'DATE') as EndDate
FROM @xmlData.nodes('/Filters/ToolStringJobs/ToolStringJob') T(c);

CREATE TABLE #tblData (
	id INT IDENTITY(1,1) NOT NULL,
	JarRunForecastToolId UNIQUEIDENTIFIER,
	ItemNumConfigId UNIQUEIDENTIFIER,
	JobId UNIQUEIDENTIFIER,
	JobNumber VARCHAR(50),
	ItemNumDesc VARCHAR(1000),
	ItemNum VARCHAR(100),
	TotalRequired INT
)

CREATE TABLE #tblFilter
(
	id INT IDENTITY(1,1) NOT NULL,
	JarRunForecastToolId UNIQUEIDENTIFIER,
	ItemNumConfigId UNIQUEIDENTIFIER,
	ItemNum VARCHAR(100)
)

INSERT INTO #tblFilter
SELECT jrft.JarRunForecastToolId,ic.ItemNumConfigId, ic.ItemNum
FROM JarRunForecastTools (NOLOCK) jrft
LEFT JOIN ItemNumConfigs (NOLOCK) pic ON pic.ItemNumConfigId = jrft.ItemNumConfigId and pic.IsToolString = 1
LEFT JOIN ItemNumConfigs (NOLOCK) ic ON ic.ParentItemNum = pic.ItemNum and ic.IsToolString = 1
LEFT JOIN JarRuns (NOLOCK) r ON r.JarRunId = jrft.JarRunId
LEFT JOIN jobs (NOLOCK) j ON j.JobId = r.JobId
INNER JOIN #tblJarRunForecastToolFilter tbl ON tbl.JobId = j.JobId
ORDER by tbl.StartDate,tbl.EndDate

--Setting Date

SET @minDate = (SELECT Min(StartDate) FROM #tblJarRunForecastToolFilter)
SET @maxDate = (SELECT Max(EndDate) FROM #tblJarRunForecastToolFilter)

if(DateDiff(day,@minDate,@maxDate) > @NoOfDays)
BEGIN
	SET @maxDate = DATEADD(day,@NoOfDays-1,@minDate)
END

-- Filling PartCodes Data
INSERT INTO #tblData
SELECT  jrft.JarRunForecastToolId, ic.ItemNumConfigId, j.JobId, j.JobNumber, i.DescShort,i.ItemNum, SUM(ISNULL(ic.Qty,0) * ISNULL(jrft.Qty,0))
FROM JarRunForecastTools (NOLOCK) jrft
LEFT JOIN ItemNumConfigs (NOLOCK) pic ON pic.ItemNumConfigId = jrft.ItemNumConfigId and pic.IsToolString = 1
LEFT JOIN ItemNumConfigs (NOLOCK) ic ON ic.ParentItemNum = pic.ItemNum and ic.IsToolString = 1
LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = ic.ItemNum
LEFT JOIN JarRuns (NOLOCK) r ON r.JarRunId = jrft.JarRunId
LEFT JOIN jobs (NOLOCK) j ON j.JobId = r.JobId
INNER JOIN #tblJarRunForecastToolFilter tbl ON tbl.JobId = j.JobId
GROUP BY tbl.id,jrft.JarRunForecastToolId, ic.ItemNumConfigId,j.JobId, j.JobNumber, i.DescShort,i.ItemNum
-- Getting Total Tools----

SET @counter = 1
SET @statusColumn = '0'
While @counter <= (SELECT Max(id) FROM #tblStatus)
BEGIN
	
	DECLARE @StatusDesc as VARCHAR(50)
	DECLARE @StatusCode as VARCHAR(50)
	SELECT @StatusDesc = StatusDesc, @StatusCode = StatusCode FROM #tblStatus WHERE id = @counter
	
	SET @sSql = 'Alter TABLE #tblData Add [' + @StatusCode + '] INT '
	EXEC(@sSql)
	
	SET @sSql = 'UPDATE #tblData SET [' + @StatusCode + '] = (
				 SELECT 
						ISNULL(count(fa.Code),0) 
					FROM vwWAMFixedAssetReport fa 
					WHERE fa.RNItemNum = #tblData.ItemNum AND ' + @whereClause + ' AND fa.code = ''' +  @StatusCode + ''''
	SET @sSQl = @sSQl +  ' GROUP by fa.RNItemNum )'

	EXEC(@sSql)
	
	SET @sSql = 'UPDATE #tblData SET [' + @StatusCode + '] = 0 WHERE [' + @StatusCode + '] IS NULL'
	EXEC(@sSql)
	
	SET @statusColumn = @statusColumn + ' + [' + @StatusCode + ']'
	SET @counter = @counter + 1
END

SET @sSql = 'Alter TABLE #tblData Add [Grand Total] INT, [ExcessShortage] INT'
EXEC(@sSql)
SET @sSql = 'UPDATE #tblData SET [Grand Total] = (' + @statusColumn + ')'
EXEC(@sSql)

-- Getting Utilization

DECLARE @sDate as DATETIME
DECLARE @eDate as DATETIME
SET @sDate = @minDate
SET @eDate = @maxDate
DECLARE @columns as VARCHAR(8000)
SET @columns = ''
While(@sDate <= @eDate)
BEGIN
	
	INSERT INTO #tblDateColumnName
	SELECT convert(VARCHAR, @sDate,101)

	SET @sSql = 'Alter TABLE #tblData Add [' + convert(VARCHAR, @sDate,101) + '] INT '
	EXEC(@sSql)

	SET @columns = @columns + ',[' + convert(VARCHAR, @sDate,101) + ']'

	SET @sSql = ' UPDATE a SET [' + convert(VARCHAR, @sDate,101) + '] = (a.[Grand Total] - a.TotalRequired) FROM #tblData a ' 
	SET @sSql =	@sSql + ' INNER JOIN #tblJarRunForecastToolFilter b ON a.JobId = b.JobId '
	SET @sSql =	@sSql + ' WHERE ''' + Convert(VARCHAR,@sDate,101) + ''' BETWEEN Convert(VARCHAR,b.StartDate,101) AND Convert(VARCHAR,b.EndDate,101) ' 
	SET @sSql =	@sSql + ' AND b.JobId = a.JobId '
	EXEC(@sSQL)

	SET @counter = 1;
	While(@counter <= (SELECT Max(id) FROM #tblFilter))
	BEGIN
		
		DECLARE @JarRunForecastToolId as UNIQUEIDENTIFIER
		DECLARE @ItemNumConfigId as UNIQUEIDENTIFIER
		SELECT @JarRunForecastToolId = JarRunForecastToolId, @ItemNumConfigId = ItemNumConfigId FROM #tblFilter WHERE id = @counter

		SET @sSql = 'UPDATE #tblData SET[' + convert(VARCHAR, @sDate,101) + '] = ([Grand Total] - 
				(SELECT ISNULL(SUM(TotalRequired),0) FROM #tblData 
					WHERE ItemNumConfigId = ''' + Convert(VARCHAR(50),@ItemNumConfigId) + ''' 
					AND JarRunForecastToolId IN 
						(SELECT 
							JarRunForecastToolId FROM 
						#tblFilter WHERE id <= ' + Convert(VARCHAR,@counter) + ') 
						AND [' + convert(VARCHAR, @sDate,101) + '] IS NOT NULL)) 
						WHERE JarRunForecastToolId = ''' + Convert(VARCHAR(50),@JarRunForecastToolId) + ''' AND ItemNumConfigId = ''' + Convert(VARCHAR(50),@ItemNumConfigId) + ''' AND [' + convert(VARCHAR, @sDate,101) + '] IS NOT NULL'
		print(@sSql)		
		EXEC(@sSql)
		SET @counter = @counter + 1
	END
		
	SET @sDate = DATEADD(day,1,@sDate)
END

UPDATE #tblData SET [ExcessShortage] = [Grand Total] - [TotalRequired]

SELECT * FROM #tblData
SELECT * FROM #tblStatus ORDER BY StatusDesc
SELECT * FROM #tblDateColumnName

DROP TABLE #tblStatus
DROP TABLE #tblDateColumnName
DROP TABLE #tblJarRunForecastToolFilter
DROP TABLE #tblData
DROP TABLE #tblFilter

	
END
GO
/****** Object:  StoredProcedure [dbo].[usp_ToolStringJobReportDetailPart]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_ToolStringJobReportDetailPart]
	@xmlData xml
AS
BEGIN
	SET NOCOUNT ON;
	
--SET @xmlData = '<Filters><WhereClause> (  1 = ''1'' )  AND ( fa.Code = ''AV'' OR fa.Code = ''II'' ) AND (  fa.BranchPlantName like ''%Stavanger, Norway%'' )</WhereClause><Status><Code>AV</Code><Code>II</Code></Status><NumberOfDays>30</NumberOfDays><ToolStringJobs><ToolStringJob><JobId>9bbaa920-9a77-440a-8987-a453012007b7</JobId><StartDate>06/11/2015 00:00:00</StartDate><EndDate>06/12/2015 21:00:30</EndDate></ToolStringJob><ToolStringJob><JobId>d7cc2ec0-320d-4fb0-998a-a453013901fc</JobId><StartDate>06/12/2015 21:00:30</StartDate><EndDate>06/13/2015 00:00:00</EndDate></ToolStringJob></ToolStringJobs></Filters>'

DECLARE @sSql VARCHAR(max)
DECLARE @minDate DATETIME
DECLARE @maxDate DATETIME
DECLARE @NoOfDays as INT
DECLARE @counter as INT
DECLARE @statusColumn VARCHAR(max)
DECLARE @whereClause AS VARCHAR(MAX)

DECLARE @EmptyGuid AS VARCHAR(36)
Set @EmptyGuid = '00000000-0000-0000-0000-000000000000'
-- Getting Filters----

SELECT @whereClause = T.c.value('.', 'VARCHAR(MAX)') FROM  @xmlData.nodes('/Filters/WhereClause') T(c);
IF(ISNULL(@whereClause, '') = '')
BEGIN
	SET @whereClause = ' 1=1 '
END

CREATE TABLE #tblStatus (
	id INT IDENTITY(1,1) NOT NULL,
	StatusCode VARCHAR(2),
	StatusDesc VARCHAR(50)
)

INSERT INTO #tblStatus
SELECT Code, status FROM PartStatus Where Code IN (SELECT T.c.value('.', 'VARCHAR(2)') as Status FROM  @xmlData.nodes('/Filters/Status/Code') T(c));

SELECT @NoOfDays = T.c.value('.', 'INT') FROM  @xmlData.nodes('/Filters/NoOfDays') T(c);

CREATE TABLE #tblDateColumnName (
	id INT IDENTITY(1,1) NOT NULL,
	ColumnName VARCHAR(100)
)
	
CREATE TABLE #tblJarRunForecastToolFilter (
	id INT IDENTITY(1,1) NOT NULL,
	JobId UNIQUEIDENTIFIER,
	StartDate DATETIME,
	EndDate	DATETIME
)

CREATE TABLE #tblData (
	id INT IDENTITY(1,1) NOT NULL,
	ItemNumConfigId UNIQUEIDENTIFIER,
	ItemDesc VARCHAR(1000),
	ItemNum VARCHAR(100),
	TotalRequired INT
)

INSERT INTO #tblJarRunForecastToolFilter
SELECT	T.c.value('JobId[1]', 'UNIQUEIDENTIFIER') as JobId,
		T.c.value('StartDate[1]', 'DATE') as StartDate,
		T.c.value('EndDate[1]', 'DATE') as EndDate
FROM @xmlData.nodes('/Filters/ToolStringJobs/ToolStringJob') T(c);

-- Getting Filters----

--Setting Date

SET @minDate = (SELECT Min(StartDate) FROM #tblJarRunForecastToolFilter)
SET @maxDate = (SELECT Max(EndDate) FROM #tblJarRunForecastToolFilter)

IF(DateDiff(day,@minDate,@maxDate) > @NoOfDays)
BEGIN
	SET @maxDate = DATEADD(day,@NoOfDays-1,@minDate)
END

-- Filling Data

INSERT INTO #tblData
SELECT ic.ItemNumConfigId, i.DescShort,i.ItemNum, SUM(ISNULL(ic.Qty,0) * ISNULL(jrft.Qty,0)) as TotalRequired
FROM JarRunForecastTools (NOLOCK) jrft
LEFT JOIN ItemNumConfigs (NOLOCK) pic ON pic.ItemNumConfigId = jrft.ItemNumConfigId and pic.IsToolString = 1
LEFT JOIN ItemNumConfigs (NOLOCK) ic ON ic.ParentItemNum = pic.ItemNum and ic.IsToolString = 1
LEFT JOIN ItemNums (NOLOCK) i ON i.ItemNum = ic.ItemNum
LEFT JOIN JarRuns (NOLOCK) r ON r.JarRunId = jrft.JarRunId
LEFT JOIN jobs (NOLOCK) j ON j.JobId = r.JobId
INNER JOIN #tblJarRunForecastToolFilter tbl ON tbl.JobId = j.JobId
GROUP BY ic.ItemNumConfigId, i.ItemNum,i.DescShort
ORDER by i.DescShort, i.ItemNum

IF EXISTS(Select top 1 ItemNumConfigId from #tblData)
BEGIN
	INSERT INTO #tblData
	Select CONVERT(UNIQUEIDENTIFIER, @EmptyGuid), '-1', 'Total', (Select SUM(TotalRequired) from #tblData)
END

-- Filling Assets

CREATE TABLE #FixedAssets(
	FixedAssetId uniqueidentifier,
	RNItemNum varchar(30),
	StatusCode varchar(2),
	StatusDesc varchar(50),
	CurrentItemQty INT
)

EXEC('
INSERT INTO #FixedAssets
Select fa.FixedAssetId, fa.RNItemNum, Code as StatusCode, Status as StatusDesc, 1 as CurrentItemQty
from vwWAMFixedAssetReport fa
Where ' + @whereClause + '
')

-- Getting Total Tools----

SET @counter = 1
SET @statusColumn = '0'
WHILE @counter <= (SELECT Max(id) FROM #tblStatus)
BEGIN
	
	DECLARE @StatusDesc as VARCHAR(50)
	DECLARE @StatusCode as VARCHAR(50)
	SELECT @StatusDesc = StatusDesc, @StatusCode = StatusCode FROM #tblStatus Where id = @counter
	
	
	SET @sSql = 'ALTER TABLE #tblData Add [' + @StatusCode + '] INT '
	EXEC(@sSql)
	
	Select @sSQl = 'Update #tblData Set [' + @StatusCode + '] = (Select ISNULL(SUM(ISNULL(CurrentItemQty, 0)), 0) from #FixedAssets Where StatusCode = ''' + @StatusCode + ''' AND #tblData.ItemNum = #FixedAssets.RNItemNum) Where ItemNumConfigId <> '''+ @EmptyGuid +''' '
	EXEC(@sSql)
	
	Select @sSQl = 'Update #tblData Set [' + @StatusCode + '] = (Select SUM([' + @StatusCode + ']) from #tblData Where ItemNumConfigId <> '''+ @EmptyGuid +''') Where ItemNumConfigId = '''+ @EmptyGuid +''' '
	EXEC(@sSql)
	
	SET @statusColumn = @statusColumn + ' + [' + @StatusCode + ']'
	SET @counter = @counter + 1
END


SET @sSql = 'ALTER TABLE #tblData Add [Grand Total] INT, [ExcessShortage] INT'
EXEC(@sSql)
SET @sSql = 'UPDATE #tblData SET [Grand Total] = (' + @statusColumn + ')'
EXEC(@sSql)

-- Getting Utilization

DECLARE @sDate as DATETIME
DECLARE @eDate as DATETIME
SET @sDate = @minDate
SET @eDate = @maxDate
DECLARE @columns as VARCHAR(8000)
SET @columns = ''
While(@sDate <= @eDate)
BEGIN
	
	INSERT INTO #tblDateColumnName
	SELECT convert(VARCHAR, @sDate,101)

	SET @sSql = 'Alter TABLE #tblData Add [' + convert(VARCHAR, @sDate,101) + '] INT '
	EXEC(@sSql)

	SET @columns = @columns + ',[' + convert(VARCHAR, @sDate,101) + ']'

	SET @sSql = ' Update #tblData SET [' + convert(VARCHAR, @sDate,101) + '] = ([Grand Total] - ' 
	SET @sSql =	@sSql + ' (SELECT SUM(ISNULL(ic.Qty,0) * ISNULL(jrft.Qty,0)) FROM #tblData a ' 
	SET @sSql =	@sSql + ' INNER JOIN ItemNumConfigs ic ON ic.ItemNum = a.ItemNum and ic.IsToolString = 1'	
	SET @sSql =	@sSql + ' INNER JOIN ItemNumConfigs (NOLOCK) pic ON pic.ItemNum = ic.ParentItemNum and pic.IsToolString = 1 '
	SET @sSql =	@sSql + ' INNER JOIN JarRunForecastTools (NOLOCK) jrft ON jrft.ItemNumConfigId = pic.ItemNumConfigId '
	SET @sSql =	@sSql + ' LEFT JOIN JarRuns (NOLOCK) r ON r.JarRunId = jrft.JarRunId'
	SET @sSql =	@sSql + ' LEFT JOIN jobs (NOLOCK) j ON j.JobId = r.JobId'
	SET @sSql =	@sSql + ' INNER JOIN #tblJarRunForecastToolFilter tbl ON tbl.JobId = j.JobId'
	SET @sSql =	@sSql + ' Where ''' + Convert(VARCHAR,@sDate,101) + ''' BETWEEN Convert(VARCHAR,tbl.StartDate,101) AND Convert(VARCHAR,tbl.EndDate,101) ' 
	SET @sSql =	@sSql + ' AND a.ItemNumConfigId = #tblData.ItemNumConfigId ))'
	SET @sSql =	@sSql + ' Where ItemNumConfigId <> '''+ @EmptyGuid +''' '
	EXEC(@sSQL)
	
	
	Select @sSQl = 'Update #tblData Set [' + convert(VARCHAR, @sDate,101) + '] = (Select SUM([' + convert(VARCHAR, @sDate,101) + ']) from #tblData Where ItemNumConfigId <> '''+ @EmptyGuid +''') Where ItemNumConfigId = '''+ @EmptyGuid +''' '
	EXEC(@sSql)

	SET @sDate = DATEADD(day,1,@sDate)
END

UPDATE #tblData SET [ExcessShortage] = [Grand Total] - [TotalRequired]

SELECT * FROM #tblData
SELECT * FROM #tblStatus ORDER BY StatusDesc
SELECT * FROM #tblDateColumnName

DROP TABLE #tblStatus
DROP TABLE #tblDateColumnName
DROP TABLE #tblJarRunForecastToolFilter
DROP TABLE #tblData

	
END

GO
/****** Object:  StoredProcedure [dbo].[usp_TransferChildComponents]    Script Date: 3/24/2023 7:52:18 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_TransferChildComponents]
	@FixedAssetId as uniqueidentifier = NULL,
	@ToBranchPlant as varchar(12) = NULL
AS
BEGIN

SET NOCOUNT ON

DECLARE @tblChildComponents TABLE
(
	FixedAssetId uniqueidentifier, 
	ParentFixedAssetId uniqueidentifier, 
	EquipmentStatus varchar(100), 
	BranchPlant varchar(100), 
	Level int
)

-- Only Execute if the @FixedAssetId is not child component.
IF(@FixedAssetId IS NOT NULL AND (Select EquipmentStatus from FixedAssets (NOLOCK) Where FixedAssetId = @FixedAssetId) <> 'IN')
BEGIN
	
	WITH RecursiveCTE(FixedAssetId, ParentFixedAssetId, EquipmentStatus, BranchPlant, Level)
	AS ( 
			SELECT fa.FixedAssetId, fa.ParentFixedAssetId, fa.EquipmentStatus, fa.BranchPlant, 1 as Level
			FROM FixedAssets (NOLOCK) fa 
			WHERE fa.ParentFixedAssetId = @FixedAssetId
	 
			UNION ALL

			SELECT pc.FixedAssetId, ct.FixedAssetId as ParentFixedAssetId,  pc.EquipmentStatus, pc.BranchPlant, Level + 1 as Level
			FROM FixedAssets (NOLOCK) pc
			INNER JOIN RecursiveCTE ct  ON ct.FixedAssetId  = pc.ParentFixedAssetId AND pc.ParentFixedAssetId <> pc.FixedAssetId
		) 
	INSERT INTO @tblChildComponents
	SELECT * 
	FROM RecursiveCTE order by level

	--Select * from #tblChildComponents
	INSERT INTO @tblChildComponents (FixedAssetId) VALUES(@FixedAssetId)

	-- Update Branch Plants
	Update FixedAssets Set BranchPlant = @ToBranchPlant 
	Where FixedAssetId IN(Select FixedAssetId from @tblChildComponents)


	--DROP TABLE #tblChildComponents
	
END


SET NOCOUNT OFF

END



GO
/****** Object:  StoredProcedure [dbo].[usp_Update_FaultCode_AIRT_BS]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[usp_Update_FaultCode_AIRT_BS]
@AssetRepairTrackId uniqueidentifier,
@FaultCodeId uniqueidentifier,
@FailureType varchar(5)
AS
BEGIN
	DECLARE @ToolStringInfoID uniqueidentifier
	SELECT @ToolStringInfoID = ToolStringInfoID FROM AssetRepairTrack WHERE AssetRepairTrackId=@AssetRepairTrackId
BEGIN 
	UPDATE ToolStringComponentInfo SET CompFailureCodeID=@FaultCodeId WHERE ToolStringInfoID=@ToolStringInfoID

UPDATE AssetRepairTrack SET FailureCodeId=@FaultCodeId,FailureType=@FailureType WHERE AssetRepairTrackId=@AssetRepairTrackId
IF @@ROWCOUNT = 0 
Select 'False'
else
Select 'True'
END
END


GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateAssetLifeRemaining]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*----------------------------------------------------
Program Name 	: [usp_UpdateAssetLifeRemaining]	
Program Type	: Stored Procedure
Description		: To update	AssetLifeRemaining in fixed assets
Author			: Sachin Mhalungekar
Created Date	: 13/06/18
Modification History
---------------------------------------------------
<CR #> 			<Date>	    <Author>	<Reason for changes and location of changes>
--------------------------------------------------*/
CREATE PROCEDURE [dbo].[usp_UpdateAssetLifeRemaining] 
AS
BEGIN
SET NOCOUNT ON
	
	UPDATE fa 
		SET fa.AssetLifeRemaining = alr.AssetLifeRemaining
	FROM FixedAssets fa
	LEFT JOIN VW_FixedAsset_LifeConsumed alr on fa.FixedAssetId = alr.FixedAssetId
	WHERE ISNULL(alr.AssetLifeRemaining, fa.AssetLifeRemaining) IS NOT NULL

SET NOCOUNT OFF
END

GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateGFAIncident]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_UpdateGFAIncident] (
	@sGFAID as uniqueidentifier,
	@sDisposition as varchar(20),
	@sFailureTime as varchar(30),
	@sEmployeeID as varchar(100),
	@sProductLine as varchar(50),
	@iTFF as tinyint,
	@iCI as tinyint,
	@iNCI as tinyint,
	@sMudType as varchar(50),
	@sCircHrs as varchar(25),
	@fRunCircHrs as float,
	@fTotalCircHrs as float,
	@fNPT as float,
	@iIs3030 as bit,
	@sVibrationLevel as bit,
	@sCoordContacted as bit,
	@sGlobalContacted as bit,
	@sAcceptedFieldFailure as varchar(200),
	@sFailureDesc as varchar(5000),
	@sPossibleCauses as varchar(5000),
	@sSummary as varchar(5000),
	@iUserID as int,
	@sServiceLine as varchar(10),
	@sIncidentID as uniqueidentifier,
	@sIncidentNumber as varchar(50))
AS
BEGIN
SET NOCOUNT ON;

UPDATE GFAIncidents
SET Disposition = @sDisposition
, FailureTime = @sFailureTime
, EmployeeID = @sEmployeeID
, ProductLine = @sProductLine
, TFF = @iTFF
, CI = @iCI
, NCI = @iNCI
, MudType = @sMudType
, CircHrs = @sCircHrs
, RunCircHrs = @fRunCircHrs
, TotalCircHrs = @fTotalCircHrs
, NPT = @fNPT
, Is3030 = @iIs3030
, VibrationLevel = @sVibrationLevel
, CoordContacted = @sCoordContacted
, GlobalContacted = @sGlobalContacted
, AcceptedFieldFailure = @sAcceptedFieldFailure
, FailureDesc = @sFailureDesc
, PossibleCauses = @sPossibleCauses
, Summary = @sSummary
, SaveDate = GetDate()
, SaveUserID = @iUserID
, IncidentID = @sIncidentID
, IncidentNumber = @sIncidentNumber
WHERE GFAID = @sGFAID

SELECT @sGFAID
SET NOCOUNT OFF;
END
GO
/****** Object:  StoredProcedure [dbo].[usp_updateItemNumsEcnRestriction]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_updateItemNumsEcnRestriction]
AS
BEGIN
	--Remove restriction if ECN # is above 9
	UPDATE i
		SET i.EcnRestriction = 0
	FROM ItemNums i
	join (select 
			SUBSTRING(US_EXPT_CMDTY_CTRL_NO, PATINDEX('%[0-9]%', US_EXPT_CMDTY_CTRL_NO), PATINDEX('%[0-9][^0-9]%', US_EXPT_CMDTY_CTRL_NO + 't') - PATINDEX('%[0-9]%', US_EXPT_CMDTY_CTRL_NO) + 1) [ECN #],
			ITM_NO_SHRT 
			FROM [dbo].[JDE_slv_Sanctions_ECCN_US]
		) A on i.ItemNum = a.ITM_NO_SHRT
	WHERE [ECN #] > 9 
		AND ISNULL([ECN #],'') != '' 
		AND i.EcnRestriction = 1 

	--SET restriction if ECN # is between 0 to 9
	UPDATE i
		SET EcnRestriction = 1
	FROM ItemNums i
	JOIN (select 
			SUBSTRING(US_EXPT_CMDTY_CTRL_NO, PATINDEX('%[0-9]%', US_EXPT_CMDTY_CTRL_NO), PATINDEX('%[0-9][^0-9]%', US_EXPT_CMDTY_CTRL_NO + 't') - PATINDEX('%[0-9]%', US_EXPT_CMDTY_CTRL_NO) + 1) [ECN #],
			ITM_NO_SHRT FROM [dbo].[JDE_slv_Sanctions_ECCN_US]
	) A on i.ItemNum = a.ITM_NO_SHRT
	WHERE [ECN #] BETWEEN 0 
			AND 9 AND ISNULL([ECN #],'') != '' 
			AND i.EcnRestriction = 0
END
GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateItemNumToolPanelToolCode]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_UpdateItemNumToolPanelToolCode]
	@RNItemNum as varchar(30) = NULL,
	@ToolPanel as varchar(30) = NULL,
	@ToolCode as varchar(30) = NULL,
	@Revision as varchar(20) = NULL,
	@NetWeight as varchar(30) = NULL
AS
BEGIN
	SET NOCOUNT ON;
		
	IF LTRIM(RTRIM(@RNItemNum)) = '' Set @RNItemNum = NULL
	IF LTRIM(RTRIM(@ToolPanel)) = '' Set @ToolPanel = NULL
	IF LTRIM(RTRIM(@ToolCode)) = '' Set @ToolCode = NULL
	IF LTRIM(RTRIM(@Revision)) = '' Set @Revision = NULL
	IF LTRIM(RTRIM(@NetWeight)) = '' Set @NetWeight = NULL	
	
	IF (@ToolPanel IS NOT NULL)
	BEGIN
		-- Only updates ToolPanel if existing value is NULL
		UPDATE ItemNums 
		SET ToolPanel = LTRIM(RTRIM(ISNULL(ToolPanel, @ToolPanel)))
		WHERE ItemNum = @RNItemNum
		
		-- Update corresponding InventoryItemNum record if exists in ItemNum Companion table
		UPDATE ItemNums 
		SET ToolPanel = LTRIM(RTRIM(ISNULL(ToolPanel, @ToolPanel)))
		WHERE ItemNum IN (Select InventoryItemNum from InventoryRNItemNums Where RNItemNum = @RNItemNum)
	END

	IF (@ToolCode IS NOT NULL)
	BEGIN
		-- Only updates ToolCode if existing value is NULL
		UPDATE ItemNums 
		SET ToolCode = LTRIM(RTRIM(ISNULL(ToolCode, @ToolCode)))
		WHERE ItemNum = @RNItemNum

		-- Update corresponding InventoryItemNum record if exists in ItemNum Companion table
		UPDATE ItemNums 
		SET ToolCode = LTRIM(RTRIM(ISNULL(@ToolCode, ToolCode)))
		WHERE ItemNum IN(Select InventoryItemNum from InventoryRNItemNums Where RNItemNum = @RNItemNum)
	END

	IF (@Revision IS NOT NULL)
	BEGIN
		-- Only updates Revision if existing value is NULL
		UPDATE ItemNums 
		SET Revision = @Revision
		WHERE ItemNum = @RNItemNum
				
		if (SELECT ItemNumRevisionId FROM ItemNumRevisions WHERE ItemNum = @RNItemNum and Revision = @Revision) IS NULL
		BEGIN
			INSERT INTO ItemNumRevisions (ItemNumRevisionId, ItemNum, Revision, ItemNum3, IsObsolete, Active, DateAdded)
			SELECT NEWID(), @RNItemNum, @Revision, ItemNum3, IsObsolete, Active, GETDATE()
			FROM ItemNums where ItemNum = @RNItemNum 
		END
	END
	
	IF (@NetWeight IS NOT NULL)
	BEGIN
		-- Only updates Net Weight if existing value is NULL
		UPDATE ItemNums 
		SET NetWeight = LTRIM(RTRIM(ISNULL(NetWeight, @NetWeight)))
		WHERE ItemNum = @RNItemNum
	END

END

GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateJarDaily]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_UpdateJarDaily]
		@sJarDailyID AS VARCHAR(38), @sWell AS VARCHAR(50), @sReservoirType AS VARCHAR(15), @sWellType AS VARCHAR(25), 
		@sKOP AS VARCHAR(20), @sKitNumber AS VARCHAR(50), @sRun AS VARCHAR(20), 
		@iPersEM AS INT, @iPersPP AS INT, @iPersTENSOR AS INT, @iPersGEOLINK AS INT, @iPersBECFIELD AS INT,
		@iPersCMP AS INT, @iPersSURVEY AS INT, @iPersLWD AS INT, @iPersRSS AS INT, @iPersDD AS INT,
		@bDD AS BIT, @bMOT AS BIT, @bDDPMTR AS BIT, @bTPM AS BIT, @bAdjustGaugeStab AS BIT, @bCoilTubingOrienter AS BIT, @bWMM AS BIT,
		@bRSS AS BIT, @bRMD AS BIT, @bTorqueBuster AS BIT, @bDMT AS BIT, @bAMS AS BIT, @bMULT AS BIT,
		@bHELDIR AS BIT, @bIDS AS BIT, @bDualIDS AS BIT, @bHELGR AS BIT, @bGWD AS BIT, @bHGAM AS BIT, @bHGAR AS BIT,
		@bSAGR AS BIT, @bHELMFR AS BIT, @bMFR AS BIT, @bMFR80 AS BIT, @bMFRAZI AS BIT, @bHELNDT AS BIT,
		@bNDT AS BIT, @bNeutronOnly AS BIT, @bMAS AS BIT, @bBAP AS BIT, @bTVM AS BIT, @bDLC AS BIT,
		@bHELEM AS BIT, @bHELER AS BIT, @bRAT AS BIT, @bESM AS BIT, @bDualPulser AS BIT, @bHELABM AS BIT, @bPWFT AS BIT, @bTBS AS BIT, @bGeosteering AS BIT,
		@bEMDIR AS BIT, @bEMGR AS BIT, @bEMGAMMA AS BIT, @bEMUGR AS BIT, @bAP AS BIT, @bEMER AS BIT,
		@bEMGAB AS BIT, @bEMINC AS BIT, @bEMABM AS BIT, @bPPDIR AS BIT, @bPPGR AS BIT, @bPPGAMMA AS BIT,
		@bPPUGR AS BIT, @bPPINC AS BIT, @bPPWPR AS BIT, @bTENDIR AS BIT, @bTENGR AS BIT, @bGEODIR AS BIT, @bGEOGR AS BIT,
		@bGEORES AS BIT, @bBECDIR AS BIT, @bBECGR AS BIT, @bCMPDIR AS BIT, @bCMPGR AS BIT,
		@bSortEM AS BIT, @bSortPP AS BIT, @bSortTEN AS BIT, @bSortGEO AS BIT, @bSortBEC AS BIT, @bSortCMP AS BIT, 
		@bSortSUR AS BIT, @bSortLWD AS BIT, @bSortRSS AS BIT, @bSortDD AS BIT,
		@sOtherMWD AS VARCHAR(20), @sToolSize AS VARCHAR(15), @sToolSizeBackup AS VARCHAR(15), @dDepth AS FLOAT, @sDepthUOM AS VARCHAR(2),
		@dMaxTemp AS FLOAT, @sMaxTempUOM AS VARCHAR(2), @dDayRate AS FLOAT, @sDayRateUOM AS VARCHAR(20),
		@sCommentType AS VARCHAR(50), @sActivity AS VARCHAR(50), @sComments AS VARCHAR(MAX), 
		@iModified AS TINYINT, @iModifyUserID AS INT, @iFailureDownhole AS TINYINT, @iFailureDeckCheck AS TINYINT,
		@iFailureSurfaceEquip AS TINYINT, @iFailureSurfaceEquipDownhole AS TINYINT
AS
BEGIN

SET NOCOUNT ON;

UPDATE JarDailies SET
	Well = @sWell
	, ReservoirType = @sReservoirType
	, WellType = @sWellType
	, KOP = @sKOP
	, KitNumber = @sKitNumber
	, Run = @sRun
	, PersEM = @iPersEM
	, PersPP = @iPersPP
	, PersTENSOR = @iPersTENSOR
	, PersGEOLINK = @iPersGEOLINK
	, PersBECFIELD = @iPersBECFIELD
	, PersCMP = @iPersCMP
	, PersSURVEY = @iPersSURVEY
	, PersLWD = @iPersLWD
	, PersRSS = @iPersRSS
	, PersDD = @iPersDD
	, DD = @bDD
	, MOT = @bMOT
	, DDPMTR = @bDDPMTR
	, TPM = @bTPM
	, AdjustGaugeStab = @bAdjustGaugeStab
	, CoilTubingOrienter = @bCoilTubingOrienter
	, WMM = @bWMM
	, RSS = @bRSS
	, RMD = @bRMD
	, TorqueBuster = @bTorqueBuster
	, DMT = @bDMT
	, AMS = @bAMS
	, MULT = @bMULT
	, HELDIR = @bHELDIR
	, IDS = @bIDS
	, DualIDS = @bDualIDS
	, HELGR = @bHELGR
	, HGAM = @bHGAM
	, GWD = @bGWD
	, HGAR = @bHGAR
	, SAGR = @bSAGR
	, HELMFR = @bHELMFR
	, MFR = @bMFR
	, MFR80 = @bMFR80
	, MFRAZI = @bMFRAZI
	, HELNDT = @bHELNDT
	, NDT = @bNDT
	, NeutronOnly = @bNeutronOnly
	, MAS = @bMAS
	, BAP = @bBAP
	, TVM = @bTVM
	, DLC = @bDLC
	, HELEM = @bHELEM
	, HELER = @bHELER
	, RAT = @bRAT
	, ESM = @bESM
	, DualPulser = @bDualPulser
	, HELABM = @bHELABM
	, PWFT = @bPWFT
	, TBS = @bTBS
	, Geosteering = @bGeosteering
	, MotarySteerable = 0
	, EMDIR = @bEMDIR
	, EMGR = @bEMGR
	, EMGAMMA = @bEMGAMMA
	, EMUGR = @bEMUGR
	, AP = @bAP
	, EMER = @bEMER
	, EMGAB = @bEMGAB
	, EMINC = @bEMINC
	, EMABM = @bEMABM
	, PPDIR = @bPPDIR
	, PPGR = @bPPGR
	, PPGAMMA = @bPPGAMMA
	, PPUGR = @bPPUGR
	, PPINC = @bPPINC
	, PPWPR = @bPPWPR
	, TENDIR = @bTENDIR
	, TENGR = @bTENGR
	, GEODIR = @bGEODIR
	, GEOGR = @bGEOGR
	, GEORES = @bGEORES
	, BECDIR = @bBECDIR
	, BECGR = @bBECGR
	, CMPDIR = @bCMPDIR
	, CMPGR = @bCMPGR
	, SortEM = @bSortEM
	, SortPP = @bSortPP
	, SortTEN = @bSortTEN
	, SortGEO = @bSortGEO
	, SortBEC = @bSortBEC
	, SortCMP = @bSortCMP
	, SortSUR = @bSortSUR
	, SortLWD = @bSortLWD
	, SortRSS = @bSortRSS
	, SortDD = @bSortDD
	, OtherMWD = @sOtherMWD
	, ToolSize = @sToolSize
	, ToolSizeBackup = @sToolSizeBackup
	, Depth = @dDepth
	, DepthUOM = @sDepthUOM
	, MaxTemp = @dMaxTemp
	, MaxTempUOM = @sMaxTempUOM
	, DailyRate = @dDayRate
	, DailyRateUOM = @sDayRateUOM
	, CommentType = @sCommentType
	, Activity = @sActivity
	, Comments = @sComments
	, Modified = @iModified
	, ModifyUserID = @iModifyUserID
	, ModifyDate = GetDate()
	, FailureDownhole = @iFailureDownhole
	, FailureDeckCheck = @iFailureDeckCheck
	, FailureSurfaceEquip = @iFailureSurfaceEquip
	, FailureSurfaceEquipDownhole = @iFailureSurfaceEquipDownhole
WHERE JarDailyID = @sJarDailyID

SELECT @sJarDailyID;
SET NOCOUNT OFF

END
GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateJarDailySLS]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_UpdateJarDailySLS]
		(@sJarDailyID AS VARCHAR(38), @sWell AS VARCHAR(50), @sFormationFluid AS VARCHAR(15), @sWellType AS VARCHAR(25), 
		@sWellClassification AS VARCHAR(50), @sReservoirLithology AS VARCHAR(20), @sKitNumber AS VARCHAR(50), @sRun AS VARCHAR(5), 
		@bCBM AS BIT, @bGeothermal AS BIT, @bHPHT AS BIT, @bShalePlay AS BIT, @bTightGas AS BIT, 
		@iPersML AS INT, @iPersEDR AS INT, @iPersGCT AS INT, @iPersGPC AS INT, @iPersRW AS INT, @iPersRTDS AS INT, 
		@sSubML AS VARCHAR(15), @bMainLog AS BIT, @bVarian AS BIT, @bQFT AS BIT, @bEKDS AS BIT, @beHydraulics AS BIT, @bVibra AS BIT, 
		@bShaleDensity AS BIT, @bShaleFactor AS BIT, @bShuttle AS BIT, @bPHPS AS BIT, @bDPU AS BIT, @bTGD AS BIT, 
		@bMLAPP AS BIT, @bMLCalcimetry AS BIT, @bChrom1002 AS BIT, @bTHA998 AS BIT, @bGeoPlot AS BIT, 
		@bEDR1 AS BIT, @bEDR2 AS BIT, @bGasWizard AS BIT, @bRigRptsStd AS BIT, @bRigRptsPro AS BIT, @bAutoDriller AS BIT, @bGasTrap AS BIT, 
		@bGCTMPD AS BIT, @bSingle AS BIT, @bDelta AS BIT, @bExpress AS BIT, @bOnsite AS BIT, @bRemote AS BIT, @bGPCAPP AS BIT, 
		@bKSI AS BIT, @bXRF AS BIT, @bXRD AS BIT, @bSRA AS BIT, @bSpectro AS BIT, @bThinSection AS BIT, @bRWSCalcimetry AS BIT, 
		@bWellHub AS BIT, @bVisean AS BIT, 
		@bSortML AS BIT, @bSortEDR AS BIT, @bSortGCT AS BIT, @bSortGPC AS BIT, @bSortRW AS BIT, @bSortRTDS AS BIT,
		@dDepth AS FLOAT, @sDepthUOM AS VARCHAR(2), @dWaterDepth AS FLOAT, @sWaterDepthUOM AS VARCHAR(2),
		@dDayRate AS FLOAT, @sDayRateUOM AS VARCHAR(20),
		@sCommentType AS VARCHAR(50), @sActivity AS VARCHAR(50), @sComments AS VARCHAR(MAX),
		@iModified AS TINYINT, @iModifyUserID AS INT)
AS
BEGIN

SET NOCOUNT ON;

UPDATE JarDailiesSLS SET
	Well = @sWell
	, FormationFluid = @sFormationFluid
	, WellType = @sWellType
	, WellClassification = @sWellClassification
	, ReservoirLithology = @sReservoirLithology
	, KitNumber = @sKitNumber
	, Run = @sRun
	, CBM = @bCBM
	, Geothermal = @bGeothermal
	, HPHT = @bHPHT
	, ShalePlay = @bShalePlay
	, TightGas = @bTightGas
	, PersML = @iPersML
	, PersEDR = @iPersEDR
	, PersGCT = @iPersGCT
	, PersGPC = @iPersGPC
	, PersRW = @iPersRW
	, PersRTDS = @iPersRTDS
	, SubML = @sSubML
	, MainLog = @bMainLog
	, Varian = @bVarian
	, QFT = @bQFT
	, EKDS = @bEKDS
	, eHydraulics = @beHydraulics
	, Vibra = @bVibra
	, ShaleDensity = @bShaleDensity
	, ShaleFactor = @bShaleFactor
	, Shuttle = @bShuttle
	, PHPS = @bPHPS
	, DPU = @bDPU
	, TGD = @bTGD
	, MLAPP = @bMLAPP
	, MLCalcimetry = @bMLCalcimetry
	, Chrom1002 = @bChrom1002
	, THA998 = @bTHA998
	, GeoPlot = @bGeoPlot
	, EDR1 = @bEDR1
	, EDR2 = @bEDR2
	, GasWizard = @bGasWizard
	, RigRptsStd = @bRigRptsStd
	, RigRptsPro = @bRigRptsPro
	, AutoDriller = @bAutoDriller
	, GasTrap = @bGasTrap
	, GCTMPD = @bGCTMPD
	, Single = @bSingle
	, Delta = @bDelta
	, Express = @bExpress
	, Onsite = @bOnsite
	, [Remote] = @bRemote
	, GPCAPP = @bGPCAPP
	, KSI = @bKSI
	, XRF = @bXRF
	, XRD = @bXRD
	, SRA = @bSRA
	, Spectro = @bSpectro
	, ThinSection = @bThinSection
	, RWSCalcimetry = @bRWSCalcimetry
	, WellHub = @bWellHub
	, Visean = @bVisean
	, SortML = @bSortML
	, SortEDR = @bSortEDR
	, SortGCT = @bSortGCT
	, SortGPC = @bSortGPC
	, SortRW = @bSortRW
	, SortRTDS = @bSortRTDS
	, Depth = @dDepth
	, DepthUOM = @sDepthUOM
	, WaterDepth = @dWaterDepth
	, WaterDepthUOM = @sWaterDepthUOM
	, DailyRate = @dDayRate
	, DailyRateUOM = @sDayRateUOM
	, CommentType = @sCommentType
	, Activity = @sActivity
	, Comments = @sComments
	, Modified = @iModified
	, ModifyUserID = @iModifyUserID
	, ModifyDate = GetDate()
WHERE JarDailyID = @sJarDailyID

SELECT @sJarDailyID;
SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateJob]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_UpdateJob]
	@sJobID as uniqueidentifier
	, @sCustomerId as uniqueidentifier
	, @sJobNumber as varchar(50)
	, @dtStart as datetime
	, @dtEnd as datetime
	, @dtEst as datetime
	, @dtSpud as datetime
	, @sLocationCountry as varchar(50)
	, @sLocationState as varchar(50)
	, @sLocationCounty as varchar(50)
	, @sRigType as varchar(50)
	, @sRig as varchar(50)
	, @sOffShore as varchar(3)
	, @sCoordinator as varchar(100)
	, @sWellPlanRevision varchar(10)
	, @iIsDS as bit
	, @sIsJAROnly as bit
	, @sJarWell as varchar(50)
	, @sJarRun as varchar(50)
	, @sJarRevStatus as varchar(50)
	, @iUserID as int
AS
BEGIN

SET NOCOUNT ON;

IF (@iIsDS = 1)
BEGIN
	Select Top 1 @sJarWell = Well, @sJarRun = Run, @sJarRevStatus = CommentType From JarDailies Where IsDeleted = 0 And JobID = @sJobID Order By ReportDate Desc
END
ELSE
BEGIN
	Select Top 1 @sJarWell = Well, @sJarRun = Run, @sJarRevStatus = CommentType From JarDailiesSLS Where IsDeleted = 0 And JobID = @sJobID Order By ReportDate Desc
END

UPDATE Jobs SET 
	CustomerId = @sCustomerId
	, JobNumber = @sJobNumber
	, StartDate = @dtStart
	, EndDate = @dtEnd
	, EstDays = @dtEst
	, SpudDate = @dtSpud
	, LocationCountry = @sLocationCountry
	, LocationState = @sLocationState
	, LocationCounty = @sLocationCounty
	, RigType = @sRigType	
	, Rig = @sRig
	, Offshore = @sOffShore
	, Coordinator = @sCoordinator
	, WellPlanRevision = @sWellPlanRevision
	, IsDS = @iIsDS
	, IsJarOnly = @sIsJAROnly
	, JarWell = @sJarWell
	, JarRunNumber = @sJarRun
	, JarRevStatus = @sJarRevStatus
	, UpdateDate = GETDATE()
	, UpdateUserID = @iUserID
WHERE JobId = @sJobId

SELECT @sJobId
SET NOCOUNT OFF

END
GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateJobLatestJarActivity]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_UpdateJobLatestJarActivity] (
	@jobId as uniqueidentifier
)
AS
BEGIN
SET NOCOUNT ON

DECLARE @runNumber As varchar(30)

SELECT Top 1
 @runNumber = jr.RunNumber
FROM Jobs (NOLOCK) j 
LEFT JOIN JarRuns (NOLOCK) jr ON jr.JobId = j.JobId
LEFT JOIN JarActivities (NOLOCK) ja ON ja.JobId = j.JobId
WHERE j.JobId = @jobId
ORDER BY ja.EndDate Desc

UPDATE Jobs
SET JarRunNumber = @runNumber
WHERE JobId = @jobId

SET NOCOUNT OFF
END





/****** Object:  StoredProcedure [dbo].[usp_UpdateJobStatus]    Script Date: 08/06/2014 14:59:39 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateJobPersonnel]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_UpdateJobPersonnel] (
	@sJobPersonnelID as uniqueidentifier,
	@sJobID as uniqueidentifier,
	@sLastName as varchar(50),
	@sFirstName as varchar(50),
	@sEmployeeId as varchar(15),
	@sTitle as varchar(15),
	@sProductLine as varchar(15),
	@sShift as varchar(15),
	@iIsLead as bit,
	@sCompany as varchar(50),
	@dArriveDate as datetime,
	@dDepartDate as datetime,
	@sPhoneNumber as varchar(15),
	@sVehicleUnitId as varchar(30),
	@sVehiclePlateNumber as varchar(30))
AS
BEGIN
SET NOCOUNT ON;

UPDATE Employees
SET FirstName = @sFirstName
	, LastName = @sLastName
	, Title = @sTitle
WHERE EmployeeID = @sEmployeeId

UPDATE JobPersonnel
SET JobID = @sJobID
, ProductLine = @sProductLine
, ArriveDate = @dArriveDate
, DepartDate = @dDepartDate
, Shift = @sShift
, IsLead = @iIsLead
, Company = @sCompany
, PhoneNumber = @sPhoneNumber
, VehicleUnitId = @sVehicleUnitId
, VehiclePlateNumber = @sVehiclePlateNumber
WHERE JobPersonnelID = @sJobPersonnelID


SELECT @sJobPersonnelID
SET NOCOUNT OFF;
END
GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateJobStatus]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_UpdateJobStatus] (
	@sJobID as uniqueidentifier,
	@sStatus as varchar(15)) 

AS
BEGIN
SET NOCOUNT ON;

DECLARE @sOrigStatus varchar(15)
SET @sOrigStatus = (Select ImportStatus From Jobs (NOLOCK) Where JobID = @sJobID)

IF (@sOrigStatus <> @sStatus)
BEGIN
	UPDATE Jobs
	SET ImportStatus = @sStatus
	WHERE JobID = @sJobID

	IF (@sStatus = 'Active')
	BEGIN
		Update Jobs
		Set DateActive = GetDate()
		Where JobID = @sJobID
	END
	ELSE IF (@sStatus = 'Pending')
	BEGIN
		Update Jobs
		Set DatePending = GetDate()
		Where JobID = @sJobID
	END
	ELSE IF (@sStatus = 'Projected')
	BEGIN
		Update Jobs
		Set DateProjected = GetDate()
		Where JobID = @sJobID
	END
	ELSE IF (@sStatus = 'Closed')
	BEGIN
		Update Jobs
		Set DateClosed = GetDate()
		Where JobID = @sJobID
	END
END

SET NOCOUNT OFF;
END




/****** Object:  StoredProcedure [dbo].[usp_UpdateRigViewJob]    Script Date: 08/06/2014 15:00:23 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_UpdatePartType]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_UpdatePartType] (
	@iPartTypeID as int,
	@sPartTypeName as varchar(100),
	@sShortName as varchar(2),
	@sDescription as varchar(250),
	@sAccountable as varchar(10),
	@iOccurrence as int,
	@iIsPrimary as bit,
	@iHEL_LWD as bit,
	@iHEL_EM as bit,
	@iRSS as bit,
	@iEM as bit,
	@iEM_TWINWELLS as bit,
	@iHYPERPULSE as bit,
	@iBECFIELD as bit,
	@iGWD as bit,
	@iGEOLINK as bit,
	@iTENSOR as bit,
	@iWPR as bit,
	@iAGS as bit,
	@iDMT_AMS as bit,
	@iMOTOR as bit,
	@iSURFACE as bit)
AS
BEGIN
SET NOCOUNT ON
UPDATE PartTypes 
SET 
	[Name] = @sPartTypeName
	, ShortName = @sShortName
	, [Description] = @sDescription
	, Accountable = @sAccountable
	, Occurrence = @iOccurrence
	, [Primary] = @iIsPrimary
	, HEL_LWD = @iHEL_LWD
	, HEL_EM = @iHEL_EM
	, RSS = @iRSS
	, EM = @iEM
	, EM_TWINWELLS = @iEM_TWINWELLS
	, HYPERPULSE = @iHYPERPULSE
	, BECFIELD = @iBECFIELD
	, GWD = @iGWD
	, GEOLINK = @iGEOLINK
	, TENSOR = @iTENSOR
	, WPR = @iWPR
	, AGS = @iAGS
	, DMT_AMS = @iDMT_AMS
	, MOTOR = @iMOTOR
	, SURFACE = @iSURFACE
WHERE PartTypeID = @iPartTypeID

SELECT @iPartTypeID
SET NOCOUNT OFF
END
GO
/****** Object:  StoredProcedure [dbo].[usp_UpdatePFTConfigName]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_UpdatePFTConfigName]
	@PFTWONumber as varchar(25)
	,@NewPFTProcessName as varchar(1024)

AS
BEGIN
	SET NOCOUNT ON

	DECLARE @ERR INT
		,@HasSequences INT
		,@PFTWOId UNIQUEIDENTIFIER
		,@NewPFTConfigId UNIQUEIDENTIFIER
		,@NewPFTCurSeqId UNIQUEIDENTIFIER

	SET @ERR = 0
	SET @HasSequences = 0
	
	BEGIN TRAN
	
	SET @PFTWOId = (SELECT PFTWOId FROM PFTWO WHERE WO_NO = @PFTWONumber)
	IF @PFTWOId IS NULL
	BEGIN
		SET @ERR = -10 -- Invalid PFT
		ROLLBACK TRAN
		SELECT @ERR
		RETURN @ERR
	END
	
	SET @NewPFTConfigId = (SELECT PFTConfigId FROM PFTConfig WHERE ProcessName = @NewPFTProcessName)
	IF @NewPFTConfigId IS NULL
	BEGIN
		SET @ERR = -20 -- Invalid PFT Config
		ROLLBACK TRAN
		SELECT @ERR
		RETURN @ERR
	END
	
	SET @HasSequences = (SELECT COUNT(*) FROM PFTWOSeq WHERE PFTWOId = @PFTWOId)
	IF @HasSequences > 0
	BEGIN
		SET @ERR = -30 -- Sequences already added to PFT
		ROLLBACK TRAN
		SELECT @ERR
		RETURN @ERR
	END
	
	SET @NewPFTCurSeqId = (SELECT TOP(1) PFTConfigSeqId FROM PFTConfigSeq WHERE PFTConfigId = @NewPFTConfigId ORDER BY Seq ASC)
	IF @NewPFTCurSeqId IS NULL
	BEGIN
		SET @ERR = -40 -- No initial Sequence
		ROLLBACK TRAN
		SELECT @ERR
		RETURN @ERR
	END	
	
	UPDATE PFTWO SET
		PFTConfigId = @NewPFTConfigId
		, CurPFTWOSeqId = @NewPFTCurSeqId 
	WHERE PFTWOId = @PFTWOId
	
	IF @@ERROR <> 0
	BEGIN
		ROLLBACK TRAN
		SELECT -50
		RETURN -50
	END
	
	COMMIT TRAN
	
	SELECT 0
	RETURN 0
	
	SET NOCOUNT OFF

END

GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateRelHomeTables2]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_UpdateRelHomeTables2]
AS

SET NOCOUNT ON

EXEC usp_CreateRelHomeMTBF 12,12
EXEC usp_CreateRelHomeGlobalTotals
EXEC usp_CreateRelHomeRegionalTotals
TRUNCATE TABLE RelHomeMaxValues
EXEC usp_CreateRelHomeMaxValues 'HEL/LWD'
EXEC usp_CreateRelHomeMaxValues 'HEL/EM'
EXEC usp_CreateRelHomeMaxValues 'RSS'
EXEC usp_CreateRelHomeMaxValues 'EM'
EXEC usp_CreateRelHomeMaxValues 'PP'
EXEC usp_CreateRelHomeMaxValues 'BECFIELD'
EXEC usp_CreateRelHomeMaxValues 'GEOLINK'
EXEC usp_CreateRelHomeMaxValues 'TENSOR'
EXEC usp_CreateRelHomeMaxValues 'GWD'
EXEC usp_CreateRelHomeMaxValues 'WPR'
EXEC usp_CreateRelHomeMaxValues 'Motor'

SELECT 'SUCCESS'

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateRigViewJob]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_UpdateRigViewJob] 
	-- Add the parameters for the stored procedure here
	@JobNumber varchar(50), 
	@CurrentWellName varchar(50),
	@Latitude decimal(18,4),
	@Longitude decimal(18,4),
	@RunNumber varchar(50),
	@MD decimal(18,4),
	@MDUOM varchar(10),	
	@TVD decimal(18,4),
	@TVDUOM varchar(10),
	@MaxTemp decimal(18,4),
	@MaxTempUOM varchar(1),
	@CoreXmlPath varchar(4000),
	@IncidentCount int,
	@LastIncidentDate datetime
AS
BEGIN
	SET NOCOUNT ON;
	
	declare @RigViewJobId int
		, @jobId uniqueidentifier
		
	set @RigViewJobId = null
    -- Insert statements for procedure here
	SELECT @RigViewJobId = RigViewJobId FROM RigViewJobs (NOLOCK) where JobNumber = @JobNumber
	SELECT @jobId = JobId from Jobs where JobNumber = @JobNumber
	
	if @RigViewJobId is not null
	BEGIN
		UPDATE RigViewJobs 
		SET CurrentWellName = @CurrentWellName
		, Latitude = @Latitude
		, Longitude = @Longitude
		, RunNumber = @RunNumber
		, MD = @MD
		, MDUOM = @MDUOM
		, TVD = @TVD
		, TVDUOM = @TVDUOM
		, MaxTemperature = @MaxTemp
		, MaxTempUOM = @MaxTempUOM
		, LastUpdate = GETUTCDATE()
		--, CoreXmlPath = @CoreXmlPath
		, IncidentCount = @IncidentCount
		, LastIncidentDate = @LastIncidentDate
		WHERE RigViewJobId = @RigViewJobId
		
		select @jobId AS JobId, @RigViewJobId as RigViewJobId
	END
	ELSE
	BEGIN
		INSERT INTO RigViewJobs (JobNumber, CurrentWellName, Latitude, Longitude, RunNumber, MD, MDUOM, TVD, TVDUOM, MaxTemperature, MaxTempUOM, LastUpdate, CoreXmlPath, IncidentCount, LastIncidentDate)
		VALUES (@JobNumber, @CurrentWellName, @Latitude, @Longitude, @RunNumber, @MD, @MDUOM, @TVD, @TVDUOM, @MaxTemp, @MaxTempUOM, GETUTCDATE(), null, @IncidentCount, @LastIncidentDate)
		
		select @jobId AS JobId, SCOPE_IDENTITY() as RigViewJobId
	END
	
END





/****** Object:  StoredProcedure [dbo].[usp_UpdateRMAnalysisCheckBox]    Script Date: 08/06/2014 15:00:54 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateRMAnalysisCheckBox]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_UpdateRMAnalysisCheckBox] (
	@sField as varchar(10),
	@sToolStringInfoID as uniqueidentifier,
	@iChk as tinyint,
	@iUserID as int) 

AS
SET NOCOUNT ON

DECLARE @sIncidentID as uniqueidentifier
DECLARE @sToolStringID as uniqueidentifier
DECLARE @sFixedAssetID as uniqueidentifier
Declare @iPartTypeId int
Declare @sSerialNum varchar(30)

SELECT 
	@sIncidentID = IncidentID
	, @sToolStringID = ToolStringID
	, @sFixedAssetID = FixedAssetID
	, @iPartTypeId = PartTypeID
	, @sSerialNum = SerialNum
FROM ToolstringComponentInfo 
Where ToolStringInfoID = @sToolStringInfoID

EXEC('UPDATE ToolStringComponentInfo SET ' + @sField + ' = ' + @iChk + ' WHERE ToolStringInfoID = ''' + @sToolStringInfoID + '''')

DECLARE @iNum as tinyint

--SELECT @iNum = CASE @sField WHEN 'OS' THEN 11 WHEN 'PR' THEN 12 WHEN 'RC' THEN 31 WHEN 'CN' THEN 32 END
SELECT @iNum = CASE @sField WHEN 'RC' THEN 31 WHEN 'CN' THEN 32 END

Exec usp_CreateAuditRMAnalysis @sIncidentID,@sToolStringID,@sFixedAssetID,@iNum,@iChk,@iUserID,1, @iPartTypeId, @sSerialNum

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateRMAnalysisFracasBox]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_UpdateRMAnalysisFracasBox] (
	@sToolStringInfoID as uniqueidentifier,
	@iFA as tinyint,
	@iUserID as int) 

AS
SET NOCOUNT ON

DECLARE @sIncidentID as uniqueidentifier
DECLARE @sToolStringID as uniqueidentifier
DECLARE @sFixedAssetID as uniqueidentifier
Declare @iPartTypeId int
Declare @sSerialNum varchar(30)

SELECT 
	@sIncidentID = IncidentID
	, @sToolStringID = ToolStringID
	, @sFixedAssetID = FixedAssetID
	, @iPartTypeId = PartTypeID
	, @sSerialNum = SerialNum
FROM ToolstringComponentInfo 
Where ToolStringInfoID = @sToolStringInfoID

UPDATE ToolStringComponentInfo
SET FA = @iFA
WHERE ToolStringInfoID = @sToolStringInfoID

EXEC usp_CreateAuditRMAnalysis @sIncidentID,@sToolStringID,@sFixedAssetID,30,@iFA,@iUserID,1, @iPartTypeId, @sSerialNum

DECLARE @sFracasComponentID as uniqueidentifier
--SET @sFracasComponentID = (Select FracasComponentID From FracasComponents Where IncidentID = @sIncidentID And ToolStringID = @sToolStringID And FixedAssetID = @sFixedAssetID)
SET @sFracasComponentID = (Select FracasComponentID From FracasComponents Where IncidentID = @sIncidentID And ToolStringID = @sToolStringID And PartTypeID = @iPartTypeId And SerialNum = @sSerialNum)

IF (@sFracasComponentID IS NULL AND @iFA = 1)
BEGIN
	INSERT INTO FracasComponents (FracasComponentID, IncidentID, ToolStringID, FixedAssetID, PartTypeID, SerialNum)
	VALUES (newid(), @sIncidentID, @sToolStringID, @sFixedAssetID, @iPartTypeID, @sSerialNum)
END
ELSE
BEGIN
	IF (@iFA = 0)
	BEGIN
		UPDATE FracasComponents
		SET IsDeleted = 1
		WHERE FracasComponentID = @sFracasComponentID
	END
	ELSE
	BEGIN
		UPDATE FracasComponents
		SET IsDeleted = 0
		WHERE FracasComponentID = @sFracasComponentID
	END
END

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateRMAnalysisReport]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_UpdateRMAnalysisReport] 
(
	@sIncidentID as uniqueidentifier,
	@iDistrictDD as tinyint,
	@iDistrictLWD as tinyint,
	@iDistrictMWD as tinyint,
	@iDistrictRSS as tinyint,
	@iDistrictSURVEY as tinyint,
	@iDistrictSURFACE as tinyint,
	@iGlobalDD as tinyint,
	@iGlobalLWD as tinyint,
	@iGlobalMWD as tinyint,
	@iGlobalRSS as tinyint,
	@iGlobalSURVEY as tinyint,
	@iGlobalSURFACE as tinyint,
	@dWFTNPT as decimal(8,2),
	@dClientNPT as decimal(8,2),
	@dCOF as decimal(8,2),
	@fMaxDoglegSeverity as float,
	@fMaxWhirl as float,
	@sMaxStickSlip as varchar(20),
	@iUserID as int
) 
AS
SET NOCOUNT ON

DECLARE @Criticality tinyint

SET @Criticality = CASE WHEN @dWFTNPT <= 0 THEN 0 
					WHEN @dWFTNPT < 24 THEN 3
					WHEN @dWFTNPT >= 24 AND @dWFTNPT < 72 THEN 2
					WHEN @dWFTNPT >= 72 THEN 1 END

UPDATE Incidents
	SET Dist_LWD = @iDistrictLWD
	, Dist_DD = @iDistrictDD
	, Dist_MWD = @iDistrictMWD
	, Dist_RSS = @iDistrictRSS
	, Dist_SURVEY = @iDistrictSURVEY
	, Dist_SURFACE = @iDistrictSURFACE
	, Global_LWD = @iGlobalLWD
	, Global_DD = @iGlobalDD
	, Global_MWD = @iGlobalMWD
	, Global_RSS = @iGlobalRSS
	, Global_SURVEY = @iGlobalSURVEY
	, Global_SURFACE = @iGlobalSURFACE
	, AcceptedLostTime = @dWFTNPT
	, ClientNPT = @dClientNPT
	, COF = @dCOF
	, MaxDoglegSeverity = @fMaxDoglegSeverity
	, MaxWhirl = @fMaxWhirl
	, MaxStickSlip = @sMaxStickSlip
	, Criticality = @Criticality

WHERE IncidentID = @sIncidentID

Update Runs 
SET ImportDate = GETDATE()
WHERE RunID = (SELECT RunID FROM Incidents Where IncidentID = @sIncidentID)

Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,19,@iDistrictDD,@iUserID,1
Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,20,@iDistrictLWD,@iUserID,1
Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,21,@iDistrictMWD,@iUserID,1
Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,22,@iDistrictRSS,@iUserID,1
Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,23,@iDistrictSURVEY,@iUserID,1
Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,34,@iDistrictSURFACE,@iUserID,1

Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,24,@iGlobalDD,@iUserID,1
Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,25,@iGlobalLWD,@iUserID,1
Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,26,@iGlobalMWD,@iUserID,1
Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,27,@iGlobalRSS,@iUserID,1
Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,28,@iGlobalSURVEY,@iUserID,1
Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,35,@iGlobalSURFACE,@iUserID,1

Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,36,@dWFTNPT,@iUserID,1
Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,37,@dClientNPT,@iUserID,1
Exec usp_CreateAuditRMAnalysisRptLevel @sIncidentID,38,@dCOF,@iUserID,1


SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateToolSheet]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_UpdateToolSheet] (
	@sToolStringID uniqueidentifier,
	@sSerialNumber varchar(50),
	@sDescription varchar(50),
	@iCreatedBy int,
	@iSizeID int,	
	@iToolYear smallint,
	@sDistrict varchar(12),
	@sBuildNumber varchar(6),
	@sToolMod varchar(3),
	@iDisassembled bit,
	@sDisassembledDate datetime,
	@sCheckSum varchar(15),
	@sType varchar(20),
	@iKitNumber int,
	@iIsLatestKitNumber tinyint,
	@iIsTurnaround tinyint,
	@sMotorType varchar(15),
	@sMotorProperty varchar(30),
	@sWorkOrderNum varchar(15),
	@sMotorSerial varchar(60),
	@sEDP varchar(30),
	@sComments varchar(100),
	@iUserID int) 
AS
BEGIN
SET NOCOUNT ON

UPDATE ToolStrings
SET SerialNumber = @sSerialNumber
, SizeId = @iSizeID
, ToolMod = @sToolMod
, Disassembled = @iDisassembled
, DisassembledDate = @sDisassembledDate
, [CheckSum] = @sCheckSum
, [Type] = @sType
, KitNumber = @iKitNumber
, IsLatestKitNumber = @iIsLatestKitNumber
, IsTurnaround = @iIsTurnaround
, MotorType = @sMotorType
, MotorProperty = @sMotorProperty
, WorkOrderNum = @sWorkOrderNum
, MotorSerial = @sMotorSerial
, EDP = @sEDP
, Comments = @sComments
, UpdateDate = GetDate()
, UpdateUserId = @iUserID
WHERE ToolStringID = @sToolStringID

SELECT @sToolStringID

SET NOCOUNT OFF
END




GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateToolSheetTemplate]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_UpdateToolSheetTemplate] (
	@sTemplateID as uniqueidentifier,
	@iUserID as int) 
AS
SET NOCOUNT ON

UPDATE ToolSheetTemplates
SET LastUpdate = GetDate()
, UpdateBy = @iUserID
WHERE TemplateID = @sTemplateID

SELECT @sTemplateID

SET NOCOUNT OFF
GO
/****** Object:  StoredProcedure [dbo].[usp_UpdateTopLevelFixedAssetId]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_UpdateTopLevelFixedAssetId]
	@FixedAssetId as uniqueidentifier
AS
BEGIN
	SET NOCOUNT ON;

	Declare @FixedAssets as Table
	(
		FixedAssetId  uniqueidentifier
	);

	Declare @TopLevelFixedAssetId as uniqueidentifier
	SET @TopLevelFixedAssetId = NULL
	    
	--Select TopLevelFixedAssetId
	Select @TopLevelFixedAssetId = (Select TOP 1 FixedAssetId from fnGetTopMostParent(@FixedAssetId))

	-- If TopLevelFixedAssetId IS NULL then it itself can be top most parent, otherwise update the record.
	IF(@TopLevelFixedAssetId IS NOT NULL)
	BEGIN
		Update FixedAssets Set TopLevelFixedAssetId = @TopLevelFixedAssetId Where FixedAssetId = @FixedAssetId
	END
	ELSE
	BEGIN
		Update FixedAssets Set TopLevelFixedAssetId = NULL Where FixedAssetId = @FixedAssetId
		Set @TopLevelFixedAssetId = @FixedAssetId
	END


	--Find all child and update those.
	;WITH RecursiveCTE(FixedAssetId, ParentFixedAssetId)
	AS
	(
		SELECT
			fa.FixedAssetId,
			fa.FixedAssetId as ParentFixedAssetId
		FROM FixedAssets (NOLOCK) fa
		WHERE fa.ParentFixedAssetId = @FixedAssetId
		 
		UNION ALL

		SELECT			
			pc.FixedAssetId,
			ct.FixedAssetId as ParentFixedAssetId
		FROM FixedAssets (NOLOCK) pc
		INNER JOIN RecursiveCTE ct  ON pc.ParentFixedAssetId = ct.FixedAssetId  AND pc.ParentFixedAssetId <> pc.FixedAssetId
	)

	Insert Into @FixedAssets Select FixedAssetId from RecursiveCTE;

	Update FixedAssets 
		Set TopLevelFixedAssetId = @TopLevelFixedAssetId
	Where FixedAssetId IN(Select FixedAssetId from @FixedAssets)

	--Insert Into @FixedAssets Select @TopLevelFixedAssetId;

	---- Update PM life left percentage
	--UPDATE fa 
	--SET 
	--	fa.AssetLifeRemaining = alr.AssetLifeLeft
	--FROM FixedAssets fa
	--JOIN VwAssetLifeRemaining alr (NOLOCK) on fa.FixedAssetId=alr.FixedAssetId
	--WHERE fa.FixedAssetId IN(Select FixedAssetId from @FixedAssets);
END




GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateAddChildAsset]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--========================================================
--CREATED BY : Yogesh Mane
--CREATED ON : 15 Feb 2016
--DESCRIPTION: Validate add child assets 
--=========================================================
CREATE PROC [dbo].[usp_ValidateAddChildAsset]
	@ParentAssetNum VARCHAR(50),
	@ChildAssetNum VARCHAR(50),
	@UserId VARCHAR(10)
AS
BEGIN
	DECLARE @ChildFixedAssetId UNIQUEIDENTIFIER;
	DECLARE @ChildStatus VARCHAR(10);
	DECLARE @ChildBranchPlant VARCHAR(25);
	DECLARE @ChildFixedAstBranchPlant VARCHAR(25);
	DECLARE @ParentSerialNum VARCHAR(50);
	DECLARE @ParentRNItemNum VARCHAR(50);
	DECLARE @ParentFixedAssetId UNIQUEIDENTIFIER;
	DECLARE @ParentStatus VARCHAR(10);
	DECLARE @ParentBranchPlant VARCHAR(25);
	DECLARE @ParentFixedAstBranchPlant VARCHAR(25);
	DECLARE @AuditActionId INT;
	DECLARE @ChildParentFixedAssetId UNIQUEIDENTIFIER;
	DECLARE @ChildSerialNum VARCHAR(50), 
			@ChildRNItemNum VARCHAR(50);


	SELECT	@ChildAssetNum = [AssetNumber], 
			@ChildSerialNum = SerialNum, 
			@ChildRNItemNum = RNItemNum,
			@ChildFixedAssetId = [FixedAssetId], 
			@ChildStatus = [EquipmentStatus], 
			@ChildBranchPlant = [BranchPlant], 
			@ChildFixedAstBranchPlant = [FixedAssetBranchPlant], 
			@ChildParentFixedAssetId = [ParentFixedAssetId]
	FROM	[FixedAssets](NOLOCK)
	WHERE	AssetNumber = @ChildAssetNum

	SELECT	@ParentAssetNum = [AssetNumber], 
			@ParentSerialNum = SerialNum, 
			@ParentRNItemNum = RNItemNum,
			@ParentFixedAssetId = [FixedAssetId], 
			@ParentStatus = [EquipmentStatus], 
			@ParentBranchPlant = [BranchPlant], 
			@ParentFixedAstBranchPlant = [FixedAssetBranchPlant]
	FROM	[FixedAssets](NOLOCK)
	WHERE	AssetNumber = @ParentAssetNum

	IF(@ParentStatus != 'AV')
	BEGIN
		SELECT -10;
		RETURN;		 
	END 

	IF(@ChildStatus != 'AV')
	BEGIN
		SELECT -20 ;
		RETURN ;
	END

	IF(@ChildBranchPlant != @ParentBranchPlant)
	BEGIN 
		SELECT -30;
		RETURN;
	END 

	IF(@ChildFixedAstBranchPlant != @ParentFixedAstBranchPlant)
	BEGIN 
		SELECT -40; 
		RETURN ;
	END 

	IF(@ChildParentFixedAssetId IS NOT NULL)
	BEGIN 
		SELECT -50;
		RETURN ;
	END 

	IF(@ChildFixedAssetId IS NULL)
	BEGIN 
		SELECT -1;
		RETURN ;
	END 

	IF(@ParentFixedAssetId IS NULL)
	BEGIN 
		SELECT -1;
		RETURN ;
	END 

	IF(@ChildFixedAssetId = @ParentFixedAssetId)
	BEGIN 
		SELECT -1;
		RETURN ;
	END

	SELECT 1

	SELECT	@ChildFixedAssetId AS [FixedAssetId], 
			@ParentAssetNum AS [ParentAssetNum], 
			@ParentSerialNum AS [ParentSerialNum], 
			@ParentRNItemNum AS [ParentItemNum],
			@ChildAssetNum AS [ChildAssetNum], 
			@ChildSerialNum AS [ChildSerialNum], 
			@ChildRNItemNum AS [ChildItemNUm]
END

GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateExistingDT]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ============================================================================
-- CREATED BY : SUYEB MOHAMAMD
-- CREATED ON : 4th may 2017
-- DESCRIPTION: To validate if tool is already attached and has been dispatched
-- ============================================================================
CREATE PROCEDURE [dbo].[usp_ValidateExistingDT] --'<Filters><SerialNum>76931</SerialNum><ItemNum>1647206</ItemNum></Filters>'
	@xmlData xml
AS
BEGIN
SET NOCOUNT ON;
	DECLARE @SerialNum VARCHAR(25)
	DECLARE @ItemNum VARCHAR(25)
	DECLARE @FixedAssetId UNIQUEIDENTIFIER
	DECLARE @ShipType VARCHAR(15)
	DECLARE @DispatchNumber INT

	SELECT	@SerialNum = T.c.value('.', 'VARCHAR(25)') FROM @xmlData.nodes('/Filters/SerialNum') T(c)	
	SELECT	@ItemNum = T.c.value('.', 'VARCHAR(25)') FROM @xmlData.nodes('/Filters/ItemNum') T(c)		
	
	SELECT	@FixedAssetId = FixedAssetId from FixedAssets where SerialNum = @SerialNum AND InventoryItemNum = @ItemNum

	SELECT	TOP 1 @DispatchNumber = D.DispatchNumber, @ShipType = Di.ShipType
	FROM	Dispatches D 
			INNER JOIN DispatchInstances DI ON D.DispatchId = DI.DispatchId
			INNER JOIN DispatchInstanceItems DTI ON DTI.DispatchInstanceId=DI.DispatchInstanceId
	WHERE	DTi.FixedAssetId = @FixedAssetId AND ShipType IN ('DT-SEQ-ADD', 'DT-RETURN')
	ORDER	BY DTI.DateAdded DESC

	IF (@ShipType = 'DT-SEQ-ADD')
		SELECT @DispatchNumber [DispatchNumber]
	ELSE 
		SELECT NULL [DispatchNumber]

END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateExistingDT_ToolString]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ============================================================================
-- CREATED BY : SUYEB MOHAMAMD
-- CREATED ON : 2nd June 2017
-- DESCRIPTION: To validate if tool is already attached and has been dispatched
-- ============================================================================
CREATE PROCEDURE [dbo].[usp_ValidateExistingDT_ToolString] --'<Filters><ToolStringId>76931</ToolStringId></Filters>'
	@xmlData xml
AS
BEGIN
SET NOCOUNT ON;
	
	DECLARE @ToolStringId UNIQUEIDENTIFIER
	DECLARE @ShipType VARCHAR(15)
	DECLARE @DispatchNumber INT

	SELECT	@ToolStringId = T.c.value('.', 'VARCHAR(50)') FROM @xmlData.nodes('/Filters/ToolStringId') T(c)	

SELECT SerialNum, DispatchNumber FROM (
       SELECT ROW_Number() OVER (PARTITION BY DTI.FixedAssetID ORDER BY DTI.DateAdded DESC) [RowNum],D.DispatchNumber, Di.ShipType, DTI.SerialNum, DTI.DateAdded
       FROM Dispatches D 
       INNER JOIN DispatchInstances DI ON D.DispatchId = DI.DispatchId
       INNER JOIN DispatchInstanceItems DTI ON DTI.DispatchInstanceId=DI.DispatchInstanceId
       INNER JOIN ToolStringComponentInfo TC ON TC.FixedAssetID = DTI.FixedAssetId
       INNER JOIN ToolStrings T ON TC.ToolStringID = T.ToolStringId
       WHERE T.ToolStringId = @ToolStringId AND ShipType IN ('DT-SEQ-ADD', 'DT-RETURN')
) A 
WHERE A.RowNum = 1 AND ShipType = 'DT-SEQ-ADD'

SELECT	DISTINCT DTI.SerialNum
FROM	Dispatches D 
		INNER JOIN DispatchInstances DI ON D.DispatchId = DI.DispatchId
		INNER JOIN DispatchInstanceItems DTI ON DTI.DispatchInstanceId=DI.DispatchInstanceId
		INNER JOIN FixedAssets FA ON FA.FixedAssetId = DTI.FixedAssetId AND FA.BranchPlant != D.BranchPlant
		INNER JOIN ToolStringComponentInfo TC ON TC.FixedAssetID = DTI.FixedAssetId
		INNER JOIN ToolStrings T ON TC.ToolStringID = T.ToolStringId
WHERE	T.ToolStringId = @ToolStringId

END
GO
/****** Object:  StoredProcedure [dbo].[usp_ValidateLastSequence]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- CREATED BY : SUYEB MOHAMMAD
-- CREATED ON : 24th Oct 2017
-- DESCRIPTION:	To validate if the sequence is last sequence of pft steps
-- =============================================
CREATE PROCEDURE [dbo].[usp_ValidateLastSequence]
@PFTConfigSequenceId UNIQUEIDENTIFIER
AS

BEGIN
DECLARE @PFTConfgId UNIQUEIDENTIFIER
DECLARE @Sequence INT = 0
DECLARE @MaxSequence INT = 1

SELECT	@Sequence = [Seq], @PFTConfgId = [PFTConfigId] FROM	[PFTConfigSeq] WHERE [PFTConfigSeqId] = @PFTConfigSequenceId
SELECT	@MaxSequence = MAX([Seq]) FROM [PFTConfigSeq] WHERE [PFTConfigId] = @PFTConfgId

IF(@Sequence = @MaxSequence)
	SELECT 1
ELSE 
	SELECT 0

END
GO
/****** Object:  StoredProcedure [dbo].[usp_VerifyChildNCR]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--======================================================================
--CREATED BY : SUYEB MOHAMMAD
--CREATED ON : 11 Aug 2016
--DESCRIPTION: To get child ncr based on fixed asset id and request id 
--=======================================================================
CREATE PROCEDURE [dbo].[usp_VerifyChildNCR]
	@XMLData AS XML
AS
BEGIN
SET NOCOUNT ON;

DECLARE @FixedAssetId UNIQUEIDENTIFIER
DECLARE @RequestID BIGINT
DECLARE @ChildRequestID BIGINT = 0

SELECT	@FixedAssetId = T.c.value('(FixedAssetId/text())[1]', 'UNIQUEIDENTIFIER'),
		@RequestId =  T.c.value('(RequestId/text())[1]', 'BIGINT')
FROM	@XMLData.nodes('/Filters') T(c);

print @FixedAssetId
print @RequestId

SELECT  TOP 1 @ChildRequestID = [NR].[RequestId] 
FROM	[NCRRequests](NOLOCK) [NR]
		INNER JOIN [FixedAssets](NOLOCK) [FA] ON [NR].[SerialNumbers] = [FA].[SerialNum]
WHERE	[NR].[LinkToNCR] = @RequestId AND [FA].[FixedAssetId] = @FixedAssetId
ORDER	BY 1 DESC 

SELECT	@ChildRequestID

END
GO
/****** Object:  StoredProcedure [dbo].[usp_WamMapBranchPlants]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_WamMapBranchPlants]
	@xmlData as xml
AS
	SET NOCOUNT ON
	set arithabort ON

	declare @IsRadioActiveAdmin bit
	select @IsRadioActiveAdmin = T.c.value('.', 'bit') from @xmlData.nodes('/Filters/IsRadioActiveAdmin') T(c);
	Set @IsRadioActiveAdmin = ISNULL(@IsRadioActiveAdmin, 0)
	
	declare @Country varchar(50)
	select @Country = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Country') T(c);

	declare @Region varchar(50)
	select @Region = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Region') T(c);
	

	select r.Region, c.Country, bp.BranchPlant, bp.CompanyName, bp.Latitude, bp.Longitude
	from BranchPlants (NOLOCK) bp
	left join Countries (NOLOCK) c on c.Country = bp.Country
	left join Regions (NOLOCK) r on r.Region = bp.Region
	where 1 = 1
	  AND r.Active=1
	  and c.Country = IsNull(@Country, c.Country)
	  and r.Region = IsNull(@Region, r.Region)
	order by r.Region, c.Country, bp.BranchPlant
	
	select
	case  
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DAG') then 'DHM-AGS'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BP') then 'DHM-BP'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'ROT') then 'DHM-ROT'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'STR') then 'DHM-STR'
		when (ISNULL(ri.ToolPanel, i.ToolPanel) = 'DHM') then 'DHM-OTHER'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DLC') then 'RSS-DLC'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DLCB') then 'RSS-DLCB'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DLCK') then 'RSS-DLCK'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DLCL') then 'RSS-DLCL'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BIAS4') then 'RSS-BIAS4'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BIAS6') then 'RSS-BIAS6'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BIAS8') then 'RSS-BIAS8'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BIAS9') then 'RSS-BIAS9'
		when (ISNULL(ri.ToolPanel, i.ToolPanel) = 'RSS') then 'RSS-OTHER'
		else  ISNULL(ri.ToolPanel, i.ToolPanel)
	end as ToolPanel 
	, bp.BranchPlant 
	, ps.Status as PartStatusDesc
	, count(*) as PartStatusCount
	, avg(DateDiff(d, IsNull(f.LastStatusChangeDate, getdate()), getdate())) as DaysInStatus
	from FixedAssets f (NOLOCK)
	LEFT JOIN ItemNums i (NOLOCK) on i.ItemNum = f.InventoryItemNum
	LEFT JOIN BranchPlants bp (NOLOCK) on f.BranchPlant = bp.BranchPlant
	LEFT JOIN Countries country (NOLOCK) on country.Country = bp.Country
	LEFT JOIN Regions region (NOLOCK) on region.Region = bp.Region
	LEFT JOIN PartStatus ps (NOLOCK) on f.EquipmentStatus = ps.Code
	LEFT JOIN ItemNums (NOLOCK) ri ON ri.ItemNum = f.RNItemNum
	LEFT JOIN dbo.SelectOptions (NOLOCK) soRadioActive on soRadioActive.SelectName = 'AIRTRadioActive' AND soRadioActive.OptionValue = i.ToolCode
	where 1 = 1
	  AND ISNULL(ri.ToolPanel, i.ToolPanel) IN ('DHM', 'DIR', 'EM', 'LWD', 'RSS')
	  AND ps.IsDisposed = 0
	  AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1
	  AND region.Region = IsNull(@Region, region.Region)
	  AND country.Country = IsNull(@Country, country.Country)
	  AND region.Active = 1
	  AND (CASE WHEN soRadioActive.SelectOptionId is null THEN 0 ELSE 1 END) = (CASE WHEN @IsRadioActiveAdmin = 1 THEN (CASE WHEN soRadioActive.SelectOptionId is null THEN 0 ELSE 1 END) ELSE 0 END)
	group by
	  bp.BranchPlant, ISNULL(ri.ToolPanel, i.ToolPanel), ps.Status, ISNULL(ri.ToolCode, i.ToolCode) 
	order by
	  bp.BranchPlant, ISNULL(ri.ToolPanel, i.ToolPanel), ps.Status, ISNULL(ri.ToolCode, i.ToolCode) 

	SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [dbo].[usp_WamMapCountries]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[usp_WamMapCountries]
	@xmlData as xml
AS
	SET NOCOUNT ON
	set arithabort ON

	declare @IsRadioActiveAdmin bit
	select @IsRadioActiveAdmin = T.c.value('.', 'bit') from @xmlData.nodes('/Filters/IsRadioActiveAdmin') T(c);
	Set @IsRadioActiveAdmin = ISNULL(@IsRadioActiveAdmin, 0)
	
	declare @Region varchar(50)
	select @Region = T.c.value('.', 'varchar(50)') from @xmlData.nodes('/Filters/Region') T(c);
		
	
	select r.Region, c.Country, c.CountryDesc, c.Latitude, c.Longitude
	from Countries (NOLOCK) c
	join Regions (NOLOCK) r on r.Region = c.RegionCode
	where 
	  r.Active = 1
	  and r.Region = IsNull(@Region, r.Region)
	order by r.Region, c.Country

	select
	case  
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DAG') then 'DHM-AGS'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BP') then 'DHM-BP'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'ROT') then 'DHM-ROT'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'STR') then 'DHM-STR'
		when (ISNULL(ri.ToolPanel, i.ToolPanel) = 'DHM') then 'DHM-OTHER'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DLC') then 'RSS-DLC'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DLCB') then 'RSS-DLCB'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DLCK') then 'RSS-DLCK'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DLCL') then 'RSS-DLCL'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BIAS4') then 'RSS-BIAS4'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BIAS6') then 'RSS-BIAS6'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BIAS8') then 'RSS-BIAS8'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BIAS9') then 'RSS-BIAS9'
		when (ISNULL(ri.ToolPanel, i.ToolPanel) = 'RSS') then 'RSS-OTHER'
		else  ISNULL(ri.ToolPanel, i.ToolPanel)
	end as ToolPanel 
	, country.Country as CountryDesc 
	, ps.Status as PartStatusDesc
	, count(*) as PartStatusCount
	, avg(DateDiff(d, IsNull(f.LastStatusChangeDate, getdate()), getdate())) as DaysInStatus
	from FixedAssets f (NOLOCK)
	LEFT JOIN ItemNums i (NOLOCK) on i.ItemNum = f.InventoryItemNum
	LEFT JOIN BranchPlants bp (NOLOCK) on f.BranchPlant = bp.BranchPlant
	LEFT JOIN Countries country (NOLOCK) on country.Country = bp.Country
	LEFT JOIN Regions region (NOLOCK) on region.Region = bp.Region
	LEFT JOIN PartStatus ps (NOLOCK) on f.EquipmentStatus = ps.Code
	LEFT JOIN ItemNums (NOLOCK) ri ON ri.ItemNum = f.RNItemNum
	LEFT JOIN dbo.SelectOptions (NOLOCK) soRadioActive on soRadioActive.SelectName = 'AIRTRadioActive' AND soRadioActive.OptionValue = i.ToolCode
	where 1=1
	  AND ISNULL(ri.ToolPanel, i.ToolPanel) IN ('DHM', 'DIR', 'EM', 'LWD', 'RSS')
	  AND ps.IsDisposed = 0
	  AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1
	  AND region.Region = IsNull(@Region, region.Region)
	  AND region.Active = 1
	  AND (CASE WHEN soRadioActive.SelectOptionId is null THEN 0 ELSE 1 END) = (CASE WHEN @IsRadioActiveAdmin = 1 THEN (CASE WHEN soRadioActive.SelectOptionId is null THEN 0 ELSE 1 END) ELSE 0 END)
	group by
	  country.Country, ISNULL(ri.ToolPanel, i.ToolPanel), ps.Status, ISNULL(ri.ToolCode, i.ToolCode)
	order by
	  country.Country, ISNULL(ri.ToolPanel, i.ToolPanel), ps.Status, ISNULL(ri.ToolCode, i.ToolCode) 

	SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [dbo].[usp_WamMapRegions]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_WamMapRegions]
	@xmlData as xml
AS
	SET NOCOUNT ON
	set arithabort ON
	
	declare @IsRadioActiveAdmin bit
	select @IsRadioActiveAdmin = T.c.value('.', 'bit') from @xmlData.nodes('/Filters/IsRadioActiveAdmin') T(c);
	Set @IsRadioActiveAdmin = ISNULL(@IsRadioActiveAdmin, 0)

	select r.Region, r.RegionDesc, r.Latitude, r.Longitude
	from Regions (NOLOCK) r
	where r.Active = 1
	union 
	select 'Global' as Region, 'Global' as RegionDesc, '30.35' as Latitude, '-35.40' as Longitude
	order by Region
	
	select
	case  
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DAG') then 'DHM-AGS'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BP') then 'DHM-BP'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'ROT') then 'DHM-ROT'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'STR') then 'DHM-STR'
		when (ISNULL(ri.ToolPanel, i.ToolPanel) = 'DHM') then 'DHM-OTHER'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DLC') then 'RSS-DLC'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DLCB') then 'RSS-DLCB'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DLCK') then 'RSS-DLCK'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'DLCL') then 'RSS-DLCL'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BIAS4') then 'RSS-BIAS4'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BIAS6') then 'RSS-BIAS6'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BIAS8') then 'RSS-BIAS8'
		when (ISNULL(ri.ToolCode, i.ToolCode) = 'BIAS9') then 'RSS-BIAS9'
		when (ISNULL(ri.ToolPanel, i.ToolPanel) = 'RSS') then 'RSS-OTHER'
		else  ISNULL(ri.ToolPanel, i.ToolPanel)
	end as ToolPanel 
	, region.Region as RegionDesc
	, ps.Status as PartStatusDesc
	, count(*) as PartStatusCount
	, avg(DateDiff(d, IsNull(f.LastStatusChangeDate, getdate()), getdate())) as DaysInStatus
	from FixedAssets f (NOLOCK)
	LEFT JOIN ItemNums i (NOLOCK) on i.ItemNum = f.InventoryItemNum
	LEFT JOIN BranchPlants bp (NOLOCK) on f.BranchPlant = bp.BranchPlant
	LEFT JOIN Countries country (NOLOCK) on country.Country = bp.Country
	LEFT JOIN Regions region (NOLOCK) on region.Region = bp.Region
	LEFT JOIN PartStatus ps (NOLOCK) on f.EquipmentStatus = ps.Code
	LEFT JOIN ItemNums (NOLOCK) ri ON ri.ItemNum = f.RNItemNum
	LEFT JOIN dbo.SelectOptions (NOLOCK) soRadioActive on soRadioActive.SelectName = 'AIRTRadioActive' AND soRadioActive.OptionValue = i.ToolCode
	where 1=1
		AND ISNULL(ri.ToolPanel, i.ToolPanel) IN ('DHM', 'DIR', 'EM', 'LWD', 'RSS')
		AND ps.IsDisposed = 0
		AND IsNull(ri.IsAsset, IsNull(i.IsAsset, 0)) = 1
		AND region.Active = 1
		AND (CASE WHEN soRadioActive.SelectOptionId is null THEN 0 ELSE 1 END) = (CASE WHEN @IsRadioActiveAdmin = 1 THEN (CASE WHEN soRadioActive.SelectOptionId is null THEN 0 ELSE 1 END) ELSE 0 END)
	group by
	  region.Region, ISNULL(ri.ToolPanel, i.ToolPanel), ps.Status, ISNULL(ri.ToolCode, i.ToolCode)
	order by
	  region.Region, ISNULL(ri.ToolPanel, i.ToolPanel), ps.Status, ISNULL(ri.ToolCode, i.ToolCode)
	  
	  
	SET NOCOUNT OFF







GO
/****** Object:  StoredProcedure [dbo].[usp_WorkOrderSetRNItemNums]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_WorkOrderSetRNItemNums]
	@StartRNItemNum as VARCHAR(30)
	, @EndRNItemNum as VARCHAR(30)
	, @WorkOrderNum as VARCHAR(30)

AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRAN
		UPDATE WorkOrders SET StartRNItemNum = @StartRNItemNum, EndRNItemNum = @EndRNItemNum
		WHERE WorkOrderNum = @WorkOrderNum
	
		IF @@ERROR <> 0
		BEGIN
			ROLLBACK TRAN
			SELECT -1
			RETURN -1
		END
		
	COMMIT TRAN
	
	SELECT 0
	RETURN 0
	
	SET NOCOUNT OFF
END

GO
/****** Object:  StoredProcedure [dbo].[uspAssetUtilizationReport]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Umesh Lade
-- Create date: 13 Sep 2016
-- Description: This stored procedure is used to prepare asset utilization report
-- =============================================

CREATE PROCEDURE [dbo].[uspAssetUtilizationReport] --'<Filters><StartDate>2015-1-1</StartDate><EndDate>2016-9-1</EndDate></Filters>'
	@xmlData xml
AS
BEGIN
SET NOCOUNT ON;
	DECLARE @StartDate VARCHAR(20)
	DECLARE @EndDate VARCHAR(20)
	DECLARE @SQLQuery NVARCHAR(2000)
	DECLARE @GroupByOrderByClause VARCHAR(50)=' GROUP BY year,month ORDER BY year,month'	
	DECLARE @whereClause VARCHAR(MAX)

	SELECT T.c.value('.', 'VARCHAR(max)') AS Countries
	INTO #Countries
	FROM @xmlData.nodes('/Filters/Country/Id') T(c)
	
	SELECT T.c.value('.', 'VARCHAR(200)') AS Regions
	INTO #Regions
	FROM @xmlData.nodes('/Filters/Region/Id') T(c)
	
	SELECT T.c.value('.', 'VARCHAR(300)') AS ProductLine 
	INTO #ProductLine
	FROM @xmlData.nodes('/Filters/ProductLine/Id') T(c)
	
	SELECT T.c.value('.', 'VARCHAR(300)') AS BranchPlant 
	INTO #BranchPlant
	FROM @xmlData.nodes('/Filters/BranchPlant/Id') T(c)

	SELECT T.c.value('.', 'VARCHAR(300)') AS ToolCode
	INTO #ToolCode
	FROM @xmlData.nodes('/Filters/ToolCode/Id') T(c)

	SELECT T.c.value('.', 'VARCHAR(300)') AS ToolPanel 
	INTO #ToolPanel
	FROM @xmlData.nodes('/Filters/ToolPanel/Id') T(c)

	SELECT T.c.value('.', 'VARCHAR(10)') AS IsGlobalRepair 
	INTO #IsGlobalRepair
	FROM @xmlData.nodes('/Filters/IsGlobalRepair/Id') T(c)

	SET @StartDate = (SELECT T.c.value('.', 'DATE') AS FromDate FROM @xmlData.nodes('/Filters/StartDate') T(c))
	SET @EndDate = (SELECT T.c.value('.', 'DATE') AS ToDate FROM @xmlData.nodes('/Filters/EndDate') T(c))

	SET @whereClause=''

IF((SELECT COUNT(*) FROM #Regions) > 0)
	BEGIN
		SET @whereClause = @whereClause + ' AND Region in (select Regions from #Regions)'
	END
 IF((SELECT COUNT(*) FROM #Countries) > 0)
 	BEGIN
		SET @whereClause = @whereClause + ' AND Country in (select Countries from #Countries)'
	END	
IF((SELECT COUNT(*) FROM #BranchPlant) > 0)
	BEGIN
		SET @whereClause = @whereClause + ' AND BranchPlant in (select BranchPlant from #BranchPlant)'
	END

IF((select count(*) from #ToolCode) > 0)
BEGIN
		SET @whereClause = @whereClause + ' AND ToolCode in (select ToolCode from #ToolCode)'
END
IF((select count(*) from #ProductLine) > 0)
BEGIN
		SET @whereClause = @whereClause + ' AND ProductLineId in (select ProductLine from #ProductLine)'
END	

IF((select count(*) from #ToolPanel) > 0)
BEGIN
		SET @whereClause = @whereClause + ' AND ToolPanel in (select ToolPanel from #ToolPanel)'
END		

IF((select count(*) from #IsGlobalRepair) > 0)
BEGIN
		SET @whereClause = @whereClause + ' AND IsGlobalRepair NOT IN (select IsGlobalRepair from #IsGlobalRepair)'
END						

IF(@StartDate IS NOT NULL AND @EndDate IS NOT NULL )
	BEGIN
			SET @whereClause = @whereClause + ' AND  ' + 'CONVERT(datetime, CONVERT(VARCHAR(4), [year]) + ''-'' + CONVERT(VARCHAR(4),[Month]) + ''-01'', 101)'
			+ ' BETWEEN ''' + @StartDate + ''' AND ''' + @EndDate +''''
	END
SET @SQLQuery= 'SELECT	 											
	[year], 											
	[month],											
	SUM(QtyRequested) AS QtyRequested,											
	SUM(NumberOfRuns) AS NumberOfRuns,											
	SUM([Unuseable]) AS [Unuseable],											
	SUM([Useable]) AS [Useable],											
	SUM([Working]) AS [Working]											
    FROM vwAssetUtilizationReport 
	WHERE 1 = 1 '
	IF(@whereClause<>'')
		BEGIN
		SET @SQLQuery=@SQLQuery+@whereClause
		END
	SET @SQLQuery=@SQLQuery +@GroupByOrderByClause
	EXEC (@SQLQuery)

	print @SQLQuery

	DROP TABLE #Countries
	DROP TABLE #Regions
	DROP TABLE #ProductLine
	DROP TABLE #BranchPlant
	DROP TABLE #ToolCode
	DROP TABLE #ToolPanel
END
GO
/****** Object:  StoredProcedure [dbo].[uspAssetUtilizationReportDaily]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Yogesh
-- Create date: 16 Mar 2017
-- Description: This stored procedure is used to prepare asset utilization report
-- =============================================
CREATE PROCEDURE [dbo].[uspAssetUtilizationReportDaily] --'<Filters><StartDate>2015-1-1</StartDate><EndDate>2016-9-1</EndDate></Filters>'
	@xmlData xml
AS
BEGIN
SET NOCOUNT ON;

	DECLARE @TopQueryStatements NVARCHAR(2000)
	DECLARE @EndQueryStatements VARCHAR(100)	
	DECLARE @WhereClause VARCHAR(MAX) =''

	SELECT T.c.value('.', 'VARCHAR(max)') AS Countries INTO #Countries FROM @xmlData.nodes('/Filters/Country/Id') T(c)
	SELECT T.c.value('.', 'VARCHAR(200)') AS Regions INTO #Regions FROM @xmlData.nodes('/Filters/Region/Id') T(c)
	SELECT T.c.value('.', 'VARCHAR(300)') AS ProductLine INTO #ProductLine FROM @xmlData.nodes('/Filters/ProductLine/Id') T(c)
	SELECT T.c.value('.', 'VARCHAR(300)') AS BranchPlant INTO #BranchPlant FROM @xmlData.nodes('/Filters/BranchPlant/Id') T(c)
	SELECT T.c.value('.', 'VARCHAR(300)') AS ToolCode INTO #ToolCode FROM @xmlData.nodes('/Filters/ToolCode/Id') T(c)
	SELECT T.c.value('.', 'VARCHAR(300)') AS ToolPanel INTO #ToolPanel FROM @xmlData.nodes('/Filters/ToolPanel/Id') T(c)
	SELECT T.c.value('.', 'VARCHAR(10)') AS IsGlobalRepair INTO #IsGlobalRepair FROM @xmlData.nodes('/Filters/IsGlobalRepair/Id') T(c)
	
	IF((SELECT COUNT(*) FROM #Regions) > 0)
		BEGIN
			SET @WhereClause = @WhereClause + ' AND Region in (select Regions from #Regions)'
		END

	 IF((SELECT COUNT(*) FROM #Countries) > 0)
 		BEGIN
			SET @WhereClause = @WhereClause + ' AND Country in (select Countries from #Countries)'
		END	

	IF((SELECT COUNT(*) FROM #BranchPlant) > 0)
		BEGIN
			SET @WhereClause = @WhereClause + ' AND BranchPlant in (select BranchPlant from #BranchPlant)'
		END

	IF((select count(*) from #ToolCode) > 0)
		BEGIN
				SET @WhereClause = @WhereClause + ' AND ToolCode in (select ToolCode from #ToolCode)'
		END

	IF((select count(*) from #ProductLine) > 0)
		BEGIN
				SET @WhereClause = @WhereClause + ' AND ProductLineId in (select ProductLine from #ProductLine)'
		END	

	IF((select count(*) from #ToolPanel) > 0)
		BEGIN
				SET @WhereClause = @WhereClause + ' AND ToolPanel in (select ToolPanel from #ToolPanel)'
		END	

	IF((select count(*) from #IsGlobalRepair) > 0)
	BEGIN
		SET @whereClause = @whereClause + ' AND IsGlobalRepair NOT IN (select IsGlobalRepair from #IsGlobalRepair)'
	END							

	SET @TopQueryStatements= 'SELECT * FROM ( 
						SELECT CASE WHEN MONTH(InventoryDate) = MONTH(DATEADD(month, DATEDIFF(month, 0, GETDATE())-2, 0)) THEN 2
									WHEN MONTH(InventoryDate) = MONTH(DATEADD(month, DATEDIFF(month, 0, GETDATE())-1, 0)) THEN 1
									ELSE 0 END  [MonthIndex], 
							CONVERT(VARCHAR(6), InventoryDate, 7) [DisplayDate],
							InventoryDate,											
							SUM([Unuseable]) AS [Unuseable],											
							SUM([Useable]) AS [Useable],											
							SUM([Working]) AS [Working]											
							FROM vwAssetUtilizationReportDaily v
						WHERE 1 = 1 '

	IF(@WhereClause<>'')
	BEGIN
		SET @TopQueryStatements = @TopQueryStatements + @WhereClause 
	END

	SET @EndQueryStatements = ' GROUP BY v.InventoryDate) A 
		ORDER BY InventoryDate ASC '

	DECLARE @Query1 NVARCHAR(4000)

	SET @Query1 = @TopQueryStatements + ' AND InventoryDate >= DATEADD(month, DATEDIFF(month, 0, GETDATE())-2, 0) ' + @EndQueryStatements

	exec sp_executesql @Query1
	
	DROP TABLE #Countries
	DROP TABLE #Regions
	DROP TABLE #ProductLine
	DROP TABLE #BranchPlant
	DROP TABLE #ToolCode
	DROP TABLE #ToolPanel
END
GO
/****** Object:  StoredProcedure [dbo].[UspCreateErrorLogHistory]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- UspCreateErrorLogHistory '2020-11-01 00:00:00'
CREATE PROCEDURE [dbo].[UspCreateErrorLogHistory]
@ExcludeFromCurrentToDate datetime
AS
BEGIN

 BEGIN TRY
     IF (NOT EXISTS (SELECT * 
                  FROM INFORMATION_SCHEMA.TABLES 
                  WHERE TABLE_SCHEMA = 'dbo' 
                  AND  TABLE_NAME = 'ErrorLogHistory'))
     
 			
 			SELECT [ErrorLogId]
                    ,[ErrorDate]
                    ,[ErrorMessage]
                    ,[Exception]
                    ,[UserName]
                    ,[ApplicationName]
                    ,[URI]
 	               INTO [dbo].ErrorLogHistory
             FROM [dbo].[ErrorLog]	(NoLock)	
 			
 	 ELSE
 	       INSERT INTO [dbo].ErrorLogHistory
 	       SELECT   [ErrorLogId]
                    ,[ErrorDate]
                    ,[ErrorMessage]
                    ,[Exception]
                    ,[UserName]
                    ,[ApplicationName]
                    ,[URI]	               
            FROM [dbo].[ErrorLog] (NoLock)
 
 	DELETE  
 	FROM ErrorLog  
 	WHERE ErrorDate<@ExcludeFromCurrentToDate	
 END TRY  
 BEGIN CATCH  
     -- Execute error retrieval routine.  
      SELECT  
      ERROR_NUMBER() AS ErrorNumber  
      ,ERROR_SEVERITY() AS ErrorSeverity  
      ,ERROR_STATE() AS ErrorState  
      ,ERROR_PROCEDURE() AS ErrorProcedure  
      ,ERROR_LINE() AS ErrorLine  
      ,ERROR_MESSAGE() AS ErrorMessage;    
 END CATCH; 	

END
GO
/****** Object:  StoredProcedure [dbo].[UspCreateJobQueueHistory]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[UspCreateJobQueueHistory]
@ExcludeFromCurrentToDate datetime
AS
BEGIN

 BEGIN TRY
     IF (NOT EXISTS (SELECT * 
                  FROM INFORMATION_SCHEMA.TABLES 
                  WHERE TABLE_SCHEMA = 'dbo' 
                  AND  TABLE_NAME = 'JobQueueHistory'))
     
 			
 			SELECT JobQueueId, JobId, 
				   CreateDate, RunStart, RunEnd, 
				   RequestXml, JobQueueStatusId, 
				   CurrentRetry, AutoRetryCount
 	               INTO [dbo].JobQueueHistory
             FROM [dbo].[JobQueue]	(NoLock)	
 			
 	 ELSE
 	       INSERT INTO [dbo].JobQueueHistory
 	       SELECT        JobQueueId, JobId, 
				   CreateDate, RunStart, RunEnd, 
				   RequestXml, JobQueueStatusId, 
				   CurrentRetry, AutoRetryCount
FROM            JobQueue(NoLock)
 
 	DELETE  
 	FROM JobQueue  
 	WHERE CreateDate < @ExcludeFromCurrentToDate	
 END TRY  
 BEGIN CATCH  
     -- Execute error retrieval routine.  
      SELECT  
      ERROR_NUMBER() AS ErrorNumber  
      ,ERROR_SEVERITY() AS ErrorSeverity  
      ,ERROR_STATE() AS ErrorState  
      ,ERROR_PROCEDURE() AS ErrorProcedure  
      ,ERROR_LINE() AS ErrorLine  
      ,ERROR_MESSAGE() AS ErrorMessage;    
 END CATCH; 	

END

GO
/****** Object:  StoredProcedure [dbo].[USPGETAIRTDISPOSITIONS]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure  [dbo].[USPGETAIRTDISPOSITIONS]
@AssetRepairTrackId uniqueidentifier,
@TimeZoneId int
AS
BEGIN
     SELECT
            AssetRepairTrackId,
            DispositionDesc,
            DispositionComments,
            ApproverFullName AS ApproverUserName,
            [dbo].[ufnTimeZoneConvert](@TimeZoneId,DispositionDate) AS DispositionDate ,
            AddedByFullName AS AddedByUserName
      FROM  vwARTDispositions
      WHERE AssetRepairTrackId=@AssetRepairTrackId
END

GO
/****** Object:  StoredProcedure [dbo].[USPGETAIRTFAILURECODES]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[USPGETAIRTFAILURECODES]
@AssetRepairTrackId uniqueidentifier
AS
Begin

   SELECT fc.FailureCategoryCode + fs.FailureSubCategoryCode + f.FailureCode + ' - ' + fc.FailureCategoryDesc + ' / ' + fs.FailureSubCategoryDesc + ' / ' + f.FailureDesc AS FailureCode, 
                     fcos.FailureCategoryCode + scos.FailureSubCategoryCode + os.FailureCode + ' - ' + fcos.FailureCategoryDesc + ' / ' + scos.FailureSubCategoryDesc + ' / ' + os.FailureDesc AS OutOfSpecCode, 
                     fcpr.FailureCategoryCode + scpr.FailureSubCategoryCode + pr.FailureCode + ' - ' + fcpr.FailureCategoryDesc + ' / ' + scpr.FailureSubCategoryDesc + ' / ' + pr.FailureDesc AS ProceduralCode
   FROM     FailureCodes AS f LEFT OUTER JOIN
                     FailureCategories AS fc ON fc.FailureCategoryId = f.FailureCategoryId LEFT OUTER JOIN
                     FailureSubCategories AS fs ON fs.FailureSubCategoryId = f.FailureSubCategoryId LEFT OUTER JOIN
                     AssetRepairTrack AS a ON a.FailureCodeId = f.FailureCodeId LEFT OUTER JOIN
                     FailureCodes AS os WITH (NOLOCK) ON os.FailureCodeId = a.OutOfSpecCodeId LEFT OUTER JOIN
                     FailureCategories AS fcos WITH (NOLOCK) ON fcos.FailureCategoryId = os.FailureCategoryId LEFT OUTER JOIN
                     FailureSubCategories AS scos WITH (NOLOCK) ON scos.FailureSubCategoryId = os.FailureSubCategoryId LEFT OUTER JOIN
                     FailureCodes AS pr WITH (NOLOCK) ON pr.FailureCodeId = a.ProceduralCodeId LEFT OUTER JOIN
                     FailureCategories AS fcpr WITH (NOLOCK) ON fcpr.FailureCategoryId = pr.FailureCategoryId LEFT OUTER JOIN
                     FailureSubCategories AS scpr WITH (NOLOCK) ON scpr.FailureSubCategoryId = pr.FailureSubCategoryId
   WHERE  (a.AssetRepairTrackId = @AssetRepairTrackId)

End

GO
/****** Object:  StoredProcedure [dbo].[USPGETAIRTPFTFORMFIELD]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USPGETAIRTPFTFORMFIELD]
	@ASSETREPAIRTRACKID UNIQUEIDENTIFIER,
	@PFTTYPE VARCHAR(50) ,
	@TimeZoneId int,
	@Language VARCHAR(3)='en',
	@WithPic bit
AS 
BEGIN
	Declare  @TimeZoneName varchar(100),@StartTimeSP DateTime=GETDATE(),@RunId uniqueidentifier=NEWID();
	Select @TimeZoneName = isnull(OptionLabel,'') from SelectOptions where SelectName = 'TimeZone' and OptionValue = @TimeZoneId

    if (@PFTTYPE='TIPFT')
	BEGIN
		SELECT 
			form.Name [FormName],
			form.Description [FormDesc],
			formColl.ObjectId,
			formColl.Name [FormCollectionsName],
			formColl.Description [FormCollectionsDesc]
			, FormField.Type [ObjectType] 
			,  IsNUll( (Select TOP 1 TranslatedObjectName FROM PFTMultilingualObject WHERE PFTObjectId = FormField.ObjectId AND Language = @Language) , FormField.Name) [FormFieldName]
    		,  IsNUll( (Select TOP 1 TranslatedObjectDesc FROM PFTMultilingualObject WHERE PFTObjectId = FormField.ObjectId AND Language = @Language) , FormField.Description) [FormFieldDesc]
    		, FormField.Field1
    		, CASE WHEN FormField.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldType' AND OptionValue = FormField.Field1  )                        
				Else FormField.Field1 END [Field1Name]   
    		, FormField.Field2
    		, CASE WHEN (FormField.type = 5 and FormField.Field1 ='1') THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field2)                        
				Else Null END [Field2Name]
			, FormField.Field3
    		, FormField.Field4
    		, CASE WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'MathSign' and OptionValue = FormField.Field4)                        
				Else FormField.Field4 END [Field4Name]
 			, FormField.Field5
    		,CASE  WHEN FormField.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = FormField.Field5)                        
				Else FormField.Field5 END [Field5Name]
    		, FormField.Field6
    		, FormField.Field7
    		, FormField.Field8
    		, FormField.Field9
    		, FormField.Field10
    		, FormField.Field11
    		,CASE  WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field11)                        
					Else FormField.Field11 END [Field11Name]
    		, FormField.Field12
    		, CASE   WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field12)                        
					Else FormField.Field12 END [Field12Name]
    		, FormField.Field13
			 ,CASE  
				WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field13)                        
				  Else FormField.Field13 END [Field13Name]
			, (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = pwfcf.UOM) AS UOM
			, pwfcf.Result	
			, pwfcf.FieldResult	
			, pwfcf.ResultInEmpirical	
			, pwfcf.TextResult1	
			, pwfcf.TextResult2	
			, pwfcf.TextResult3	
			, pwfcf.TextResult4
			, IsNull(us.LastName,'')+','+IsNull(us.FirstName,'') as Technician
			, [dbo].[ufnTimeZoneConvert](@TimeZoneId,pwfcf.DateAdded) As [DateAdded]  
			, CASE WHEN @WithPic = 1 THEN CASE WHEN FormField.Type = 3 THEN
										 (SELECT  top 1 SUBSTRING(CONVERT([varchar](MAX), BlobContent), CHARINDEX(',', BlobContent) + 1, len(BlobContent))
										   FROM	 PFTBlobObjects
										   WHERE ObjectId = FormField.ObjectId) ELSE NULL END
						ELSE NULL END AS PicContent
			,pom.SequenceNumber
			, @TimeZoneName As [TimeZoneName]
		FROM AssetRepairTrack AS airt 
			JOIN PFTWOForms AS pwf ON pwf.PFTWOId = airt.ITPFTWOId
			JOIN PFTObjects AS form ON form.ObjectId = pwf.ObjectId
			JOIN PFTWOFormCollections AS pwfc ON pwfc.PFTWOFormId = pwf.PFTWOFormId
			JOIN PFTObjects AS formColl ON pwfc.ObjectId = formColl.ObjectId
			JOIN PFTObjectMappings AS pom ON pom.ParentId = pwfc.ObjectId
			JOIN PFTObjects AS FormField ON FormField.ObjectId = pom.ObjectId  
			Left JOIN PFTWOFormCollectionFields AS pwfcf ON pom.ObjectId = pwfcf.ObjectId And   pwfcf.PFTWOFormCollectionId = pwfc.PFTWOFormCollectionId
			Left JOIN Users us on pwfcf.UserId = us.UserId
	WHERE AssetRepairTrackId  = @AssetRepairTrackId
	order by   formColl.ObjectId, FormField.Type ,pom.SequenceNumber
    
	exec usp_MyAdvisor_Logs @RunId,'USPGETAIRTPFTFORMFIELD', 'TIPFT Get Form Fields', @StartTimeSP
END
   if (@PFTTYPE='SRPM')
   BEGIN 
   
		SELECT 
			form.Name [FormName],
			form.Description [FormDesc],
			formColl.ObjectId,
			formColl.Name [FormCollectionsName],
			formColl.Description [FormCollectionsDesc]
			, FormField.Type [ObjectType] 
			,   IsNUll( (Select TOP 1 TranslatedObjectName FROM PFTMultilingualObject WHERE PFTObjectId = FormField.ObjectId AND Language = @Language) ,FormField.Name)  [FormFieldName]
    			,   IsNUll( (Select TOP 1 TranslatedObjectDesc FROM PFTMultilingualObject WHERE PFTObjectId = FormField.ObjectId AND Language = @Language) ,FormField.Description)    [FormFieldDesc]
    			, FormField.Field1
    			, CASE WHEN FormField.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldType' AND OptionValue = FormField.Field1  )                        
					Else FormField.Field1 END [Field1Name]   
    			, FormField.Field2
    			, CASE WHEN (FormField.type = 5 and FormField.Field1 ='1') THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field2)                        
					Else Null END [Field2Name]
				, FormField.Field3
    			, FormField.Field4
    			, CASE WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'MathSign' and OptionValue = FormField.Field4)                        
					Else FormField.Field4 END [Field4Name]
 				, FormField.Field5
    			,CASE  WHEN FormField.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = FormField.Field5)                        
					Else FormField.Field5 END [Field5Name]
    			, FormField.Field6
    			, FormField.Field7
    			, FormField.Field8
    			, FormField.Field9
    			, FormField.Field10
    			, FormField.Field11
    			,CASE  WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field11)                        
					   Else FormField.Field11 END [Field11Name]
    			, FormField.Field12
    			, CASE   WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field12)                        
						Else FormField.Field12 END [Field12Name]
    			, FormField.Field13
				 ,CASE  
				WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field13)                        
				  Else FormField.Field13 END [Field13Name]
			, (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = pwfcf.UOM) AS UOM 	
			, pwfcf.Result	
			, pwfcf.FieldResult	
			, pwfcf.ResultInEmpirical	
			, pwfcf.TextResult1	
			, pwfcf.TextResult2	
			, pwfcf.TextResult3	
			, pwfcf.TextResult4
			, IsNull(us.LastName,'')+','+IsNull(us.FirstName,'') as Technician
			, [dbo].[ufnTimeZoneConvert](@TimeZoneId,pwfcf.DateAdded) As [DateAdded]    
			, pftwo.PFTWOId
			, (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'PFTConfigType' and OptionValue  = pftwo.PFTType) AS PFTType
			, pftwo.AssetRepairTrackId
			, CASE WHEN @WithPic = 1 THEN CASE WHEN FormField.Type = 3 THEN
												 (SELECT  top 1 SUBSTRING(CONVERT([varchar](MAX), BlobContent), CHARINDEX(',', BlobContent) + 1, len(BlobContent))
												   FROM	 PFTBlobObjects
												   WHERE ObjectId = FormField.ObjectId) ELSE NULL END
								ELSE NULL END AS PicContent
	,pom.SequenceNumber
	, @TimeZoneName As [TimeZoneName]
FROM PFTWO AS pftwo 
	JOIN PFTWOForms AS pwf ON pwf.PFTWOId = pftwo.PFTWOId  
	JOIN PFTObjects AS form ON form.ObjectId = pwf.ObjectId
	JOIN PFTWOFormCollections AS pwfc ON pwfc.PFTWOFormId = pwf.PFTWOFormId
	JOIN PFTObjects AS formColl ON pwfc.ObjectId = formColl.ObjectId
	JOIN PFTObjectMappings AS pom ON pom.ParentId = pwfc.ObjectId
	JOIN PFTObjects AS FormField ON FormField.ObjectId = pom.ObjectId  
	Left JOIN PFTWOFormCollectionFields AS pwfcf ON pom.ObjectId = pwfcf.ObjectId And   pwfcf.PFTWOFormCollectionId = pwfc.PFTWOFormCollectionId
	Left JOIN Users us on pwfcf.UserId = us.UserId
	WHERE 
	pftwo.AssetRepairTrackId=@AssetRepairTrackId and 
	pftwo.PFTType in (1,3) and 
			 pftwo.ReasonForChange not in ('Closed – Roll Back Services','Closed – Rollback')
	     order by   formColl.ObjectId, FormField.[Type] ,pom.SequenceNumber
	--1 = CASE 
 --   		WHEN pftwo.PFTType = 1 
 --   		THEN  CASE WHEN pftwo.PFTWOId IN (select SRPFTWOId from AssetRepairTrack
	--			where AssetRepairTrackId=@AssetRepairTrackId) THEN 1 ELSE 0 END
 --   		ELSE 1 
 --   		END
 --   		and
	--		pftwo.AssetRepairTrackId = @AssetRepairTrackId  and  pftwo.PFTType!=2  
 --          And 
	--       pftwo.PFTType in (1,3)
	--     order by   formColl.ObjectId, FormField.[Type] ,pom.SequenceNumber

	exec usp_MyAdvisor_Logs @RunId,'USPGETAIRTPFTFORMFIELD', 'SRPM Get Form Fields', @StartTimeSP
   END

END




GO
/****** Object:  StoredProcedure [dbo].[USPGETAIRTPFTSEQUENCES]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[USPGETAIRTPFTSEQUENCES]
	@ASSETREPAIRTRACKID UNIQUEIDENTIFIER,
	@PFTTYPE VARCHAR(50)='TIPFT',
	@Language VARCHAR(3)='en',
	@TimeZoneId int,
	@WithPic bit
AS 
BEGIN
 
    DECLARE @startDateTimePFT DATETIME
    SET @startDateTimePFT = GETDATE();
	Declare  @TimeZoneName varchar(100);
	Select @TimeZoneName = isnull(OptionLabel,'') from SelectOptions where SelectName = 'TimeZone' and OptionValue = @TimeZoneId
	Declare @RunId uniqueidentifier =NEWID();

    if (@PFTTYPE='TIPFT')
	BEGIN
				Declare  @ITPFTWOId uniqueidentifier
				SELECT   @ITPFTWOId=ITPFTWOId FROM  AssetRepairTrack
					WHERE   AssetRepairTrackId = @ASSETREPAIRTRACKID	  
	
				
				SELECT 'Test and Inspection PFT'  PFTTYPE,
					PWO.ProcessName,HasAttachment, PFTResult, PFTConfigSeqId, FailureCode, FailureComponent, Comment, 
				[dbo].[ufnTimeZoneConvert](@TimeZoneId,PWOSeq.DateAdded) As [DateAdded]
				, PWOSeq.IsDebug, PWOSeq.IsRTV, Seq, 
				IsNUll( (Select TOP 1 TranslatedObjectName FROM PFTMultilingualObject WHERE PFTObjectId = PWOSeq.ObjectId AND Language = @Language) ,SeqName)
					SeqName, 
				IsNUll( (Select TOP 1 CASE WHEN len(TranslatedObjectDesc) > 355 then SUBSTRING(TranslatedObjectDesc, 1, 355) + '...(more)' Else TranslatedObjectDesc
							END FROM PFTMultilingualObject WHERE PFTObjectId = PWOSeq.ObjectId AND Language = @Language) ,
						CASE WHEN len(SeqDesc) > 355 then SUBSTRING(SeqDesc, 1, 355) + '...(more)' Else [SeqDesc] END)
					 [SeqDesc],
    				LabName, PFTResultDesc,  Hours, 
				us.UserName,IsNull(us.LastName,'')+','+IsNull(us.FirstName,'') as Technician,
				(SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = PWOSF.UOM) AS UOM
				, PWOSF.Result	
				, PWOSF.FieldResult	
				, PWOSF.ResultInEmpirical	
				, PWOSF.TextResult1	
				, PWOSF.TextResult2	
				, PWOSF.TextResult3	
				, PWOSF.TextResult4
				, IsNUll( (Select TOP 1 TranslatedObjectName FROM PFTMultilingualObject WHERE PFTObjectId = FormField.ObjectId AND Language = @Language) ,FormField.Name) [FormFieldName]
    			, IsNUll( (Select TOP 1 TranslatedObjectDesc FROM PFTMultilingualObject WHERE PFTObjectId = FormField.ObjectId AND Language = @Language) ,FormField.Description) [FormFieldDesc]
    			, FormField.Field1
    			, CASE WHEN FormField.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldType' AND OptionValue = FormField.Field1  )                        
					Else FormField.Field1 END [Field1Name]   
    			, FormField.Field2
    			, CASE WHEN (FormField.type = 5 and FormField.Field1 ='1') THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field2)                        
					Else Null END [Field2Name]
				, FormField.Field3
    			, FormField.Field4
    			, CASE WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'MathSign' and OptionValue = FormField.Field4)                        
					Else FormField.Field4 END [Field4Name]
 				, FormField.Field5
    			,CASE  WHEN FormField.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = FormField.Field5)                        
					Else FormField.Field5 END [Field5Name]
    			, FormField.Field6
    			, FormField.Field7
    			, FormField.Field8
    			, FormField.Field9
    			, FormField.Field10
    			, FormField.Field11
    			,CASE  WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field11)                        
					   Else FormField.Field11 END [Field11Name]
    			, FormField.Field12
    			, CASE   WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field12)                        
						Else FormField.Field12 END [Field12Name]
    			, FormField.Field13
				, CASE        WHEN FormField.Type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field13)                        
						 Else FormField.Field13 END [Field13Name]
				,CASE WHEN @WithPic = 1 THEN CASE WHEN FormField.Type = 3 THEN
										 (SELECT  top 1 SUBSTRING(CONVERT([varchar](MAX), BlobContent), CHARINDEX(',', BlobContent) + 1, len(BlobContent))
										   FROM	 PFTBlobObjects
										   WHERE ObjectId = FormField.ObjectId) ELSE NULL END
						ELSE NULL END AS PicContent
				,pom.SequenceNumber
				,FormField.Type [ObjectType]
				, @TimeZoneName As [TimeZoneName]
			FROM  vwPFTWOSeq PWOSeq 
				  INNER JOIN vwPFTWO PWO on PWOSeq.PFTWOId=PWO.PFTWOId
				  LEFT JOIN PFTObjectMappings AS POM ON POM.ParentId = PWOSeq.ObjectId 
				  LEFT JOIN PFTObjects AS FormField ON FormField.ObjectId = POM.ObjectId 
				  LEFT JOIN PFTWOSeqFields PWOSF ON PWOSF.PFTWOSeqId = PWOSeq.PFTWOSeqId and PWOSF.ObjectId= POM.ObjectId 
				  LEFT JOIN Users us ON PWOSeq.UserId=us.UserId
				  WHERE  PWO.PFTWOId in (@ITPFTWOId)
				  order by PWOSeq.DateAdded,PWOSeq.Seq   

	 exec usp_MyAdvisor_Logs @RunId,'USPGETAIRTPFTSEQUENCES', 'PMPFT',@startDateTimePFT

   END
   ELSE
   BEGIN                  
			 SELECT  
    			 CASE WHEN pfwo.PFTType = 1 THEN 'SERVICE & REPAIR PFT' ELSE 'PLANNED MAINTENANCE PFT' END PFTType
    			, PFTConfig.ProcessName 
    			, pfwo.PFTWOId
    			, pftwos.Seq
    			, IsNUll( (Select TOP 1 TranslatedObjectName FROM PFTMultilingualObject WHERE PFTObjectId = pftwos.ObjectId AND Language = @Language) ,SeqName)
				SeqName, 
				IsNUll( (Select TOP 1 CASE WHEN len(TranslatedObjectDesc) > 355 then SUBSTRING(TranslatedObjectDesc, 1, 355) + '...(more)' Else TranslatedObjectDesc
						END FROM PFTMultilingualObject WHERE PFTObjectId = pftwos.ObjectId AND Language = @Language) ,
					CASE WHEN len(SeqDesc) > 355 then SUBSTRING(SeqDesc, 1, 355) + '...(more)' Else [SeqDesc] END)
				 [SeqDesc],
				 PFTConfigSeqId,
    			 pftwos.PFTResult
    			, pftwos.Comment
    			, pftwos.UserName
    			, [dbo].[ufnTimeZoneConvert](@TimeZoneId,pftwos.DateAdded) As [DateAdded]
    			, IsNull(us.LastName,'')+','+IsNull(us.FirstName,'') Technician
    			, pftwos.PFTResultDesc    ,
    			(SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = PWOSF.UOM) AS UOM
    			, PWOSF.Result	
    			, PWOSF.FieldResult	
    			, PWOSF.ResultInEmpirical	
    			, PWOSF.TextResult1	
    			, PWOSF.TextResult2	
    			, PWOSF.TextResult3	
    			, PWOSF.TextResult4
    			, IsNUll( (Select TOP 1 TranslatedObjectName FROM PFTMultilingualObject WHERE PFTObjectId = FormField.ObjectId AND Language = @Language) ,FormField.Name) [FormFieldName]
    			, IsNUll( (Select TOP 1 TranslatedObjectDesc FROM PFTMultilingualObject WHERE PFTObjectId = FormField.ObjectId AND Language = @Language) ,FormField.Description) [FormFieldDesc]
    			, FormField.Field1
    			, CASE WHEN FormField.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldType' AND OptionValue = FormField.Field1  )                        
					Else FormField.Field1 END [Field1Name]   
    			, FormField.Field2
    			, CASE WHEN (FormField.type = 5 and FormField.Field1 ='1') THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field2)                        
					Else Null END [Field2Name]
				, FormField.Field3
    			, FormField.Field4
    			, CASE WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'MathSign' and OptionValue = FormField.Field4)                        
					Else FormField.Field4 END [Field4Name]
 				, FormField.Field5
    			,CASE  WHEN FormField.type = 5 THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = FormField.Field5)                        
					Else FormField.Field5 END [Field5Name]
    			, FormField.Field6
    			, FormField.Field7
    			, FormField.Field8
    			, FormField.Field9
    			, FormField.Field10
    			, FormField.Field11
    			,CASE  WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field11)                        
					   Else FormField.Field11 END [Field11Name]
    			, FormField.Field12
    			, CASE   WHEN FormField.type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field12)                        
						Else FormField.Field12 END [Field12Name]
    			, FormField.Field13
    			, CASE        WHEN FormField.Type = 5 AND FormField.Field1 ='6' THEN (SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'NumberType' and OptionValue = FormField.Field13)                        
						 Else FormField.Field13 END [Field13Name]
				, CASE WHEN @WithPic = 1 THEN CASE WHEN FormField.Type = 3 THEN
									 (SELECT   top 1     SUBSTRING(CONVERT([varchar](MAX), BlobContent), CHARINDEX(',', BlobContent) + 1, len(BlobContent))
									   FROM            PFTBlobObjects
									   WHERE        ObjectId = FormField.ObjectId) ELSE NULL END
							ELSE NULL END AS PicContent
				, pom.SequenceNumber
				, FormField.Type [ObjectType]
				, @TimeZoneName As [TimeZoneName]
			FROM PFTWO pfwo
    			INNER JOIN vwPFTWOSeq pftwos on pfwo.PFTWOId=pftwos.PFTWOId
				LEFT OUTER JOIN PFTConfig WITH(NOLOCK) ON pfwo.PFTConfigId = PFTConfig.PFTConfigId 
				LEFT JOIN PFTObjectMappings AS POM ON POM.ParentId = pftwos.ObjectId 
				LEFT JOIN PFTObjects AS FormField ON FormField.ObjectId = POM.ObjectId 
				LEFT JOIN PFTWOSeqFields PWOSF ON PWOSF.PFTWOSeqId = pftwos.PFTWOSeqId and PWOSF.ObjectId= POM.ObjectId 
				LEFT JOIN Users us ON pftwos.UserId=us.UserId
				 WHERE 
			 pfwo.AssetRepairTrackId=@AssetRepairTrackId
			 and pfwo.PFTType in (1,3) and 
			 pfwo.ReasonForChange not in ('Closed – Roll Back Services','Closed – Rollback')
			 ORDER BY pfwo.PFTType,Seq  
			 --WHERE 
				--1 = CASE 
    --				WHEN pfwo.PFTType = 1 
    --				THEN  CASE WHEN pfwo.PFTWOId IN (select SRPFTWOId from AssetRepairTrack
				--	 where AssetRepairTrackId=@AssetRepairTrackId) THEN 1 ELSE 0 END
    --				ELSE 1 
    --				END
    --			  and
				--   pfwo.AssetRepairTrackId = @AssetRepairTrackId  and  pfwo.PFTType!=2  
				--	 ORDER BY pfwo.PFTType,Seq  	   

		exec usp_MyAdvisor_Logs @RunId,'USPGETAIRTPFTSEQUENCES', 'SRPFT & PMPFT',@startDateTimePFT	

  END

  
  

END

GO
/****** Object:  StoredProcedure [dbo].[uspGetWptsUploadData]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--===================================================================
--MODFIED BY : SUYEB MOHAMMAD
--MODFIED ON : 22 June 2015
--DESCRIPTION: To add downhole2 and downhol2etools data
--===================================================================
CREATE procedure [dbo].[uspGetWptsUploadData]
	@xmlData xml
as

	SET NOCOUNT ON;
	
	DECLARE @jobNumber varchar(50)
	
	SET @jobNumber = @xmlData.value('(Filters/jobNumber)[1]', 'varchar(50)')
	
	DECLARE @Runs TABLE
	(
		RunNo int,
		RunNumber varchar(100),
		RunId UniqueIdentifier
	)

	INSERT INTO @Runs
	SELECT ROW_NUMBER () OVER (Order by w.Well, r.RunNumber ASC) [RunNo],
		r.RunNumber,
		r.RunId
	FROM Jobs j WITH(NOLOCK)
	INNER JOIN Wells w WITH(NOLOCK) ON w.JobID = j.JobID AND w.IsDeleted = 0
	INNER JOIN Runs r WITH(NOLOCK) ON r.WellID = w.WellID AND r.IsDeleted = 0 --AND r.IsDownhole = 1
	Where j.JobNumber = @jobNumber 


	SELECT TOP 1 * FROM vwWptsHdrProfile (NOLOCK) where JobNo = @jobNumber ORDER BY OutHoleDate Desc
	
	SELECT * FROM vwWptsJobPerformance (NOLOCK) where JobNumber = @jobNumber
	

	SELECT r.RunNo, v.* 
	FROM vwdownhole2 (NOLOCK) v
	INNER JOIN @Runs r on r.RunId = v.RunId
	where JobNumber = @jobNumber
	ORDER BY r.RunNo

	SELECT r.RunNo, v.* 
	FROM vwdownhole2Tools v (NOLOCK)
	INNER JOIN @Runs r on r.RunId = v.RunId
	where JobNumber = @jobNumber
	Order by r.RunNo

	SELECT r1.[RunNo]
		, dbo.NumCheck(r.OperHrs) As OpHours
		, ISNULL(i.AcceptedLostTime, 0) as NPTHours
		--, w.WellID
		--, r1.RunNumber
	FROM Jobs j WITH(NOLOCK)
	INNER JOIN Wells w WITH(NOLOCK) ON w.JobID = j.JobID AND w.IsDeleted = 0
	INNER JOIN Runs r WITH(NOLOCK) ON r.WellID = w.WellID AND r.IsDeleted = 0 --AND r.IsDownhole = 1
	INNER JOIN @Runs r1 ON r.RunID = r1.RunId
	LEFT JOIN Incidents i WITH(NOLOCK) ON i.RunID = r.RunID AND i.IsDeleted = 0
	Where j.JobNumber = @jobNumber 
	Order by r1.RunNo

	SET NOCOUNT OFF;



GO
/****** Object:  StoredProcedure [WFT\E249496].[usp_GetNonBuildSheetContainer]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [WFT\E249496].[usp_GetNonBuildSheetContainer]
	  @ToolStringId UNIQUEIDENTIFIER

AS
BEGIN
	 

SELECT        tsc.Name AS ContainerName, tsc.SerialNum AS ContainerSerialNum,
			  tsc.Description AS ContainerDesc, tsf.OrderPosition AS AssetPosition, 
				tsf.SerialNum AS AssetSerialNum, tsf.InventoryItemNum AS AssetInvItemNum,
				tsf.Description AS AssetDesc, NULL AS AssetQty, tsf.Comments AS AssetComments, 
				tsc.ContainerId, tsf.SortNumber, 'Asset' AS Type,tsc.Weight As ContainerWeight,tsc.Dimension As ContainerDimension
FROM            ToolStrings AS ts INNER JOIN
                         ToolStringContainers AS tsc ON tsc.ToolStringId = ts.ToolStringId INNER JOIN
                         ToolStringFixedAssets AS tsf ON tsf.ToolStringID = ts.ToolStringId AND tsf.ContainerId = tsc.ContainerId
WHERE        (ts.ToolStringId = @ToolStringId)
UNION
SELECT        tsc.Name AS ContainerName, tsc.SerialNum AS ContainerSerialNum, tsc.Description AS ContainerDesc, NULL AS AssetPosition, 
                         tsnf.SerialNum AS AssetSerialNum, NULL AS AssetInvItemNum, tsnf.Description AS AssetDesc, tsnf.Quantity AS AssetQty, tsnf.Comments AS AssetComments, 
                         tsc.ContainerId, NULL AS SortNumber, 'NonAsset' AS Type,tsc.Weight As ContainerWeight,tsc.Dimension As ContainerDimension
FROM            ToolStrings AS ts INNER JOIN
                         ToolStringContainers AS tsc ON tsc.ToolStringId = ts.ToolStringId INNER JOIN
                         ToolStringNonSerialParts AS tsnf ON tsnf.ToolStringId = ts.ToolStringId AND tsnf.ContainerId = tsc.ContainerId
WHERE        (ts.ToolStringId = @ToolStringId)
ORDER BY tsc.ContainerId, tsf.SortNumber

END
GO
/****** Object:  StoredProcedure [WFT\E249496].[usp_GetNonBuildSheetPFTDetail]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Mangesh Taware
-- Create date: 12 Jan 2021
-- Description:	To get Nono Build Sheet report detail info
-- =============================================
CREATE PROCEDURE [WFT\E249496].[usp_GetNonBuildSheetPFTDetail]
	  @ToolStringId UNIQUEIDENTIFIER,
	  @Language VARCHAR(3)='en',
	  @TimeZoneId int
AS
BEGIN
	 
	Declare @TimeZoneName varchar(100);
	Select @TimeZoneName = isnull(OptionLabel,'') from SelectOptions where SelectName = 'TimeZone' and OptionValue = @TimeZoneId

	SELECT		PWO.PFTType,
				PWO.PFTWOId,
				PFTC.ProcessName,
				PFTResult, PFTConfigSeqId , Comment, 
				[dbo].[ufnTimeZoneConvert](@TimeZoneId,PWOSeq.DateAdded) As [DateAdded]
				,Seq, 
				IsNUll( (Select TOP 1 TranslatedObjectName FROM PFTMultilingualObject WHERE PFTObjectId = PWOSeq.ObjectId AND Language = @Language) ,SeqName)
				SeqName, 
				IsNUll( (Select TOP 1 CASE WHEN len(TranslatedObjectDesc) > 355 then SUBSTRING(TranslatedObjectDesc, 1, 355) + '...(more)' Else TranslatedObjectDesc
						END FROM PFTMultilingualObject WHERE PFTObjectId = PWOSeq.ObjectId AND Language = @Language) ,
						CASE WHEN len(SeqDesc) > 355 then SUBSTRING(SeqDesc, 1, 355) + '...(more)' Else [SeqDesc] END)
				[SeqDesc],
    			LabName, PFTResultDesc,  Hours, 
				us.UserName,IsNull(us.LastName,'')+','+IsNull(us.FirstName,'') as Technician,
				(SELECT OptionLabel FROM SelectOptions WHERE SelectName = 'FormFieldUOM' and OptionValue = PWOSF.UOM) AS UOM
				, PWOSF.Result	
				, PWOSF.FieldResult	
				, PWOSF.ResultInEmpirical	
				, PWOSF.TextResult1	
				, PWOSF.TextResult2	
				, PWOSF.TextResult3	
				, PWOSF.TextResult4
				, FormField.PFTObjectName [FormFieldName]
				, FormField.PFTObjectDescription [FormFieldDesc]
				, FormField.Field1
				, FormField.Field1Name
				, FormField.Field2
				, FormField.Field2Name
				, FormField.Field3
				, FormField.Field4
				, FormField.Field4Name
				, FormField.Field5
				, FormField.Field5Name
				, FormField.Field6
				, FormField.Field7
				, FormField.Field8
				, FormField.Field9
				, FormField.Field10
				, FormField.Field11
				, FormField.Field11Name
				, FormField.Field12
				, FormField.Field12Name
				, FormField.Field13
				, FormField.Field13Name
				, CASE WHEN FormField.ObjectType = 3 THEN
										 (SELECT  top 1 SUBSTRING(CONVERT([varchar](MAX), BlobContent), CHARINDEX(',', BlobContent) + 1, len(BlobContent))
										   FROM	 PFTBlobObjects
										   WHERE ObjectId = FormField.ObjectId) ELSE NULL END AS PicContent
				,pom.SequenceNumber
				,FormField.ObjectType
				, @TimeZoneName As [TimeZoneName]
				,PWO.FixedAssetId
				,PWO.SerialNum
				,pwo.DESCRIPTION As [SerialNumDesc]
			FROM  vwPFTWOSeq PWOSeq 
				  INNER JOIN VWPFTWOSearch PWO on PWOSeq.PFTWOId=PWO.PFTWOId
				  INNER JOIN PFTConfig PFTC ON PFTC.PFTConfigId   = PWO.PFTConfigId
				  LEFT JOIN PFTObjectMappings AS POM ON POM.ParentId = PWOSeq.ObjectId 
				  LEFT JOIN VW_PFTObjectSearch AS FormField ON FormField.ObjectId = POM.ObjectId and (FormField.ObjectType = 5 or FormField.ObjectType = 3)
				  LEFT JOIN PFTWOSeqFields PWOSF ON PWOSF.PFTWOSeqId = PWOSeq.PFTWOSeqId and PWOSF.ObjectId= POM.ObjectId 
				  LEFT JOIN Users us ON PWOSeq.UserId=us.UserId
				  WHERE  PWO.AssetRepairTrackId = @ToolStringId AND 
						 (PWO.ReasonForChange != 'Closed – Cancelled' or isnull(PWO.ReasonForChange,'0') = '0')
				  ORDER BY   PWO.DateAdded, PWOSeq.Seq 
END
GO
/****** Object:  StoredProcedure [WFT\E249496].[usp_GetNonBuildSheetReportHeader]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Mangesh Taware
-- Create date: 12 Jan 2021
-- Description:	To get Nono Build Sheet report header info
-- =============================================
CREATE PROCEDURE [WFT\E249496].[usp_GetNonBuildSheetReportHeader]
	  @ToolStringId UNIQUEIDENTIFIER
AS
BEGIN
	 
SELECT        ts.SerialNumber AS ToolNumber, ts.ToolYear, 
(Select top 1 
	  d.DispatchNumber
FROM toolstrings ts
	JOIN jarruntools (NOLOCK) j on j.ToolStringId = ts.ToolStringId
	LEFT JOIN Dispatches (NOLOCK) d   ON j.JobId = d.DispatchId
	LEFT OUTER JOIN Customers (NOLOCK) cu ON d.JDECustomerNumber = cu.CustomerNumber   
WHERE  (ts.ToolStringId = @ToolStringId) order by j.DateAdded  desc) As DeliveryTicket,
 (Select top 1 
	 cu.CustomerName
FROM toolstrings ts
	JOIN jarruntools (NOLOCK) j on j.ToolStringId = ts.ToolStringId
	LEFT JOIN Dispatches (NOLOCK) d   ON j.JobId = d.DispatchId
	LEFT OUTER JOIN Customers (NOLOCK) cu ON d.JDECustomerNumber = cu.CustomerNumber   
WHERE  (ts.ToolStringId = @ToolStringId) order by j.DateAdded  desc) As CustomerName, 
 bst.TemplateName AS BuildSheetType, 
                         ts.District + ' - ' + bpl.CompanyName AS BranchPlant,
						  glp.Code AS ProductLine, ISNULL(us.LastName, '') + ',' + ISNULL(us.FirstName, '') AS Technician,
	   ts.CreateDate
FROM            ToolStrings AS ts INNER JOIN
                         GLProductLines AS glp ON ts.ProductLineId = glp.Id INNER JOIN
                         BranchPlants AS bpl ON ts.District = bpl.BranchPlant LEFT OUTER JOIN
                         Users AS us ON ts.CreateUserId = us.UserId
						 LEFT JOIN BuildSheetTemplates bst ON bst.TemplateID = ts.TemplateId
WHERE        (ts.ToolStringId = @ToolStringId)
END
GO
/****** Object:  StoredProcedure [WFT\E249496].[Usp_Insert_SwapInFeed_To_JdeComponents]    Script Date: 3/24/2023 7:52:19 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
-- =================================================================================================================
-- Author:		Ganesh Abdagire
-- Create date: 17-March-2021
-- Description:	This procedure is used add processed SwapIn Feed to  JDEWorkOrdeComponent
-- Use AesOpsUAT
-- ===============================================================================================================
CREATE PROCEDURE [WFT\E249496].[Usp_Insert_SwapInFeed_To_JdeComponents]
@ParentFixedAssetId uniqueidentifier,
@ParentNumber varchar(250),
@ParentItemNumber varchar(250),
@ParentRevision varchar(250),
@TopLevelFixedAssetId uniqueidentifier,
@FixedAssetId uniqueidentifier,
@ChildSerNumber varchar(250),
@ChildItemNumber varchar(250),
@ChildRevision  varchar(20),
@Qty int,
@WorkOrderNum varchar(100),
--@WorkOrderType varchar(50),
@InstallDate datetime=NULL,
@InstallBy varchar(15) = null

AS
BEGIN

 print('test');	

END

GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The field name entered by organization (default is display name)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DataFields', @level2type=N'COLUMN',@level2name=N'FieldName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'e.g., MatterValue, InvoiceValue, PaymentValue' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DataFields'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For multi-line pick lists' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LookupValues', @level2type=N'COLUMN',@level2name=N'DisplayValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'1=notify, 5=default, 10=admin (can be entered more than once)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MCApprovers', @level2type=N'COLUMN',@level2name=N'ApproverType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'P=Pass;F=Fail;H=Hold' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'PFTWOSeq', @level2type=N'COLUMN',@level2name=N'PFTResult'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RequestAdmins', @level2type=N'COLUMN',@level2name=N'IsDefault'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'X=Not Entered;A=Approved;N=Not Approved' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RequestApprovals', @level2type=N'COLUMN',@level2name=N'ApprovalStatus'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Order of approvals for RequestId' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RequestApprovals', @level2type=N'COLUMN',@level2name=N'ApprovalOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'CR=Change Request;NCR=Non Conformance Report' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Requests', @level2type=N'COLUMN',@level2name=N'RequestType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A=Approved,NA=NotApproved,AP=Awaiting Approval' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Requests', @level2type=N'COLUMN',@level2name=N'RequestStatus'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'O=Open,C=Closed,H=Hold' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Requests', @level2type=N'COLUMN',@level2name=N'OpenClosed'
GO
